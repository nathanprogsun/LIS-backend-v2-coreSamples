// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: proto/test_service.proto

package coresamples_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetDuplicateAssayGroupTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *GetDuplicateAssayGroupTestRequest) Reset() {
	*x = GetDuplicateAssayGroupTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDuplicateAssayGroupTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDuplicateAssayGroupTestRequest) ProtoMessage() {}

func (x *GetDuplicateAssayGroupTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDuplicateAssayGroupTestRequest.ProtoReflect.Descriptor instead.
func (*GetDuplicateAssayGroupTestRequest) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetDuplicateAssayGroupTestRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

type GetDuplicateAssayGroupTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DuplicateTests []int32 `protobuf:"varint,1,rep,packed,name=duplicate_tests,json=duplicateTests,proto3" json:"duplicate_tests,omitempty"`
}

func (x *GetDuplicateAssayGroupTestResponse) Reset() {
	*x = GetDuplicateAssayGroupTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDuplicateAssayGroupTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDuplicateAssayGroupTestResponse) ProtoMessage() {}

func (x *GetDuplicateAssayGroupTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDuplicateAssayGroupTestResponse.ProtoReflect.Descriptor instead.
func (*GetDuplicateAssayGroupTestResponse) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetDuplicateAssayGroupTestResponse) GetDuplicateTests() []int32 {
	if x != nil {
		return x.DuplicateTests
	}
	return nil
}

type GetTestIDsFromTestCodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCodes []string `protobuf:"bytes,1,rep,name=test_codes,json=testCodes,proto3" json:"test_codes,omitempty"`
}

func (x *GetTestIDsFromTestCodesRequest) Reset() {
	*x = GetTestIDsFromTestCodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestIDsFromTestCodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestIDsFromTestCodesRequest) ProtoMessage() {}

func (x *GetTestIDsFromTestCodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestIDsFromTestCodesRequest.ProtoReflect.Descriptor instead.
func (*GetTestIDsFromTestCodesRequest) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetTestIDsFromTestCodesRequest) GetTestCodes() []string {
	if x != nil {
		return x.TestCodes
	}
	return nil
}

type GetTestIDsFromTestCodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*TestCodetoTestIDsList `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *GetTestIDsFromTestCodesResponse) Reset() {
	*x = GetTestIDsFromTestCodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestIDsFromTestCodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestIDsFromTestCodesResponse) ProtoMessage() {}

func (x *GetTestIDsFromTestCodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestIDsFromTestCodesResponse.ProtoReflect.Descriptor instead.
func (*GetTestIDsFromTestCodesResponse) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetTestIDsFromTestCodesResponse) GetResponse() []*TestCodetoTestIDsList {
	if x != nil {
		return x.Response
	}
	return nil
}

type TestCodetoTestIDsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCode string  `protobuf:"bytes,1,opt,name=test_code,json=testCode,proto3" json:"test_code,omitempty"`
	TestIds  []int32 `protobuf:"varint,2,rep,packed,name=test_ids,json=testIds,proto3" json:"test_ids,omitempty"`
}

func (x *TestCodetoTestIDsList) Reset() {
	*x = TestCodetoTestIDsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCodetoTestIDsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCodetoTestIDsList) ProtoMessage() {}

func (x *TestCodetoTestIDsList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCodetoTestIDsList.ProtoReflect.Descriptor instead.
func (*TestCodetoTestIDsList) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{4}
}

func (x *TestCodetoTestIDsList) GetTestCode() string {
	if x != nil {
		return x.TestCode
	}
	return ""
}

func (x *TestCodetoTestIDsList) GetTestIds() []int32 {
	if x != nil {
		return x.TestIds
	}
	return nil
}

type GetTestTubeTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestIds []int32 `protobuf:"varint,1,rep,packed,name=test_ids,json=testIds,proto3" json:"test_ids,omitempty"`
}

func (x *GetTestTubeTypesRequest) Reset() {
	*x = GetTestTubeTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestTubeTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestTubeTypesRequest) ProtoMessage() {}

func (x *GetTestTubeTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestTubeTypesRequest.ProtoReflect.Descriptor instead.
func (*GetTestTubeTypesRequest) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetTestTubeTypesRequest) GetTestIds() []int32 {
	if x != nil {
		return x.TestIds
	}
	return nil
}

type GetTestTubeTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestTubeInfos []*GetTestTubeTypesResponse_TestTubeInfo `protobuf:"bytes,1,rep,name=test_tube_infos,json=testTubeInfos,proto3" json:"test_tube_infos,omitempty"`
}

func (x *GetTestTubeTypesResponse) Reset() {
	*x = GetTestTubeTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestTubeTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestTubeTypesResponse) ProtoMessage() {}

func (x *GetTestTubeTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestTubeTypesResponse.ProtoReflect.Descriptor instead.
func (*GetTestTubeTypesResponse) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetTestTubeTypesResponse) GetTestTubeInfos() []*GetTestTubeTypesResponse_TestTubeInfo {
	if x != nil {
		return x.TestTubeInfos
	}
	return nil
}

type TestID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId int32 `protobuf:"varint,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *TestID) Reset() {
	*x = TestID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestID) ProtoMessage() {}

func (x *TestID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestID.ProtoReflect.Descriptor instead.
func (*TestID) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{7}
}

func (x *TestID) GetTestId() int32 {
	if x != nil {
		return x.TestId
	}
	return 0
}

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TestName        string         `protobuf:"bytes,2,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	TestCode        string         `protobuf:"bytes,3,opt,name=test_code,json=testCode,proto3" json:"test_code,omitempty"`
	TestId          int32          `protobuf:"varint,4,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	DisplayName     string         `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	TestDescription string         `protobuf:"bytes,6,opt,name=test_description,json=testDescription,proto3" json:"test_description,omitempty"`
	PanelId         int32          `protobuf:"varint,7,opt,name=panel_id,json=panelId,proto3" json:"panel_id,omitempty"`
	AssayName       string         `protobuf:"bytes,8,opt,name=assay_name,json=assayName,proto3" json:"assay_name,omitempty"`
	CreatedAt       string         `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt       string         `protobuf:"bytes,10,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	IsActive        bool           `protobuf:"varint,11,opt,name=isActive,proto3" json:"isActive,omitempty"`
	TestDetails     []*TestDetails `protobuf:"bytes,12,rep,name=test_details,json=testDetails,proto3" json:"test_details,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{8}
}

func (x *Test) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Test) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *Test) GetTestCode() string {
	if x != nil {
		return x.TestCode
	}
	return ""
}

func (x *Test) GetTestId() int32 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *Test) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Test) GetTestDescription() string {
	if x != nil {
		return x.TestDescription
	}
	return ""
}

func (x *Test) GetPanelId() int32 {
	if x != nil {
		return x.PanelId
	}
	return 0
}

func (x *Test) GetAssayName() string {
	if x != nil {
		return x.AssayName
	}
	return ""
}

func (x *Test) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Test) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Test) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Test) GetTestDetails() []*TestDetails {
	if x != nil {
		return x.TestDetails
	}
	return nil
}

type CreateTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsActive        bool   `protobuf:"varint,1,opt,name=isActive,proto3" json:"isActive,omitempty"`
	TestName        string `protobuf:"bytes,2,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	TestCode        string `protobuf:"bytes,3,opt,name=test_code,json=testCode,proto3" json:"test_code,omitempty"`
	TestId          int32  `protobuf:"varint,4,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"` //this is now ignored since test_id is the new pk and is auto-incremented
	DisplayName     string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	TestDescription string `protobuf:"bytes,6,opt,name=test_description,json=testDescription,proto3" json:"test_description,omitempty"`
	AssayName       string `protobuf:"bytes,7,opt,name=assay_name,json=assayName,proto3" json:"assay_name,omitempty"`
}

func (x *CreateTestRequest) Reset() {
	*x = CreateTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestRequest) ProtoMessage() {}

func (x *CreateTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestRequest.ProtoReflect.Descriptor instead.
func (*CreateTestRequest) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{9}
}

func (x *CreateTestRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *CreateTestRequest) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *CreateTestRequest) GetTestCode() string {
	if x != nil {
		return x.TestCode
	}
	return ""
}

func (x *CreateTestRequest) GetTestId() int32 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *CreateTestRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateTestRequest) GetTestDescription() string {
	if x != nil {
		return x.TestDescription
	}
	return ""
}

func (x *CreateTestRequest) GetAssayName() string {
	if x != nil {
		return x.AssayName
	}
	return ""
}

type CreateTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TestName        string `protobuf:"bytes,2,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	TestCode        string `protobuf:"bytes,3,opt,name=test_code,json=testCode,proto3" json:"test_code,omitempty"`
	TestId          int32  `protobuf:"varint,4,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	DisplayName     string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	TestDescription string `protobuf:"bytes,6,opt,name=test_description,json=testDescription,proto3" json:"test_description,omitempty"`
	PanelId         int32  `protobuf:"varint,7,opt,name=panel_id,json=panelId,proto3" json:"panel_id,omitempty"`
	AssayName       string `protobuf:"bytes,8,opt,name=assay_name,json=assayName,proto3" json:"assay_name,omitempty"`
	CreatedAt       string `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt       string `protobuf:"bytes,10,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	IsActive        bool   `protobuf:"varint,11,opt,name=isActive,proto3" json:"isActive,omitempty"`
}

func (x *CreateTestResponse) Reset() {
	*x = CreateTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestResponse) ProtoMessage() {}

func (x *CreateTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestResponse.ProtoReflect.Descriptor instead.
func (*CreateTestResponse) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{10}
}

func (x *CreateTestResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateTestResponse) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *CreateTestResponse) GetTestCode() string {
	if x != nil {
		return x.TestCode
	}
	return ""
}

func (x *CreateTestResponse) GetTestId() int32 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *CreateTestResponse) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateTestResponse) GetTestDescription() string {
	if x != nil {
		return x.TestDescription
	}
	return ""
}

func (x *CreateTestResponse) GetPanelId() int32 {
	if x != nil {
		return x.PanelId
	}
	return 0
}

func (x *CreateTestResponse) GetAssayName() string {
	if x != nil {
		return x.AssayName
	}
	return ""
}

func (x *CreateTestResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CreateTestResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *CreateTestResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type GetTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestIds []string `protobuf:"bytes,1,rep,name=test_ids,json=testIds,proto3" json:"test_ids,omitempty"`
}

func (x *GetTestRequest) Reset() {
	*x = GetTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestRequest) ProtoMessage() {}

func (x *GetTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestRequest.ProtoReflect.Descriptor instead.
func (*GetTestRequest) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetTestRequest) GetTestIds() []string {
	if x != nil {
		return x.TestIds
	}
	return nil
}

type GetTestFieldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestIds         []string `protobuf:"bytes,1,rep,name=test_ids,json=testIds,proto3" json:"test_ids,omitempty"`
	TestDetailNames []string `protobuf:"bytes,2,rep,name=test_detail_names,json=testDetailNames,proto3" json:"test_detail_names,omitempty"`
}

func (x *GetTestFieldRequest) Reset() {
	*x = GetTestFieldRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestFieldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestFieldRequest) ProtoMessage() {}

func (x *GetTestFieldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestFieldRequest.ProtoReflect.Descriptor instead.
func (*GetTestFieldRequest) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetTestFieldRequest) GetTestIds() []string {
	if x != nil {
		return x.TestIds
	}
	return nil
}

func (x *GetTestFieldRequest) GetTestDetailNames() []string {
	if x != nil {
		return x.TestDetailNames
	}
	return nil
}

type TestS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId                 int32  `protobuf:"varint,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	TestNames              string `protobuf:"bytes,2,opt,name=test_names,json=testNames,proto3" json:"test_names,omitempty"`
	TestCodes              string `protobuf:"bytes,3,opt,name=test_codes,json=testCodes,proto3" json:"test_codes,omitempty"`
	TestInstrument         string `protobuf:"bytes,4,opt,name=test_instrument,json=testInstrument,proto3" json:"test_instrument,omitempty"`
	TestType               string `protobuf:"bytes,5,opt,name=test_type,json=testType,proto3" json:"test_type,omitempty"`
	TestAssayName          string `protobuf:"bytes,6,opt,name=test_assay_name,json=testAssayName,proto3" json:"test_assay_name,omitempty"`
	TestDuplicateAssayName string `protobuf:"bytes,7,opt,name=test_duplicate_assay_name,json=testDuplicateAssayName,proto3" json:"test_duplicate_assay_name,omitempty"`
	TestGroupName          string `protobuf:"bytes,8,opt,name=test_group_name,json=testGroupName,proto3" json:"test_group_name,omitempty"`
	TestTurnaroundDays     string `protobuf:"bytes,9,opt,name=test_turnaround_days,json=testTurnaroundDays,proto3" json:"test_turnaround_days,omitempty"`
}

func (x *TestS) Reset() {
	*x = TestS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestS) ProtoMessage() {}

func (x *TestS) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestS.ProtoReflect.Descriptor instead.
func (*TestS) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{13}
}

func (x *TestS) GetTestId() int32 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *TestS) GetTestNames() string {
	if x != nil {
		return x.TestNames
	}
	return ""
}

func (x *TestS) GetTestCodes() string {
	if x != nil {
		return x.TestCodes
	}
	return ""
}

func (x *TestS) GetTestInstrument() string {
	if x != nil {
		return x.TestInstrument
	}
	return ""
}

func (x *TestS) GetTestType() string {
	if x != nil {
		return x.TestType
	}
	return ""
}

func (x *TestS) GetTestAssayName() string {
	if x != nil {
		return x.TestAssayName
	}
	return ""
}

func (x *TestS) GetTestDuplicateAssayName() string {
	if x != nil {
		return x.TestDuplicateAssayName
	}
	return ""
}

func (x *TestS) GetTestGroupName() string {
	if x != nil {
		return x.TestGroupName
	}
	return ""
}

func (x *TestS) GetTestTurnaroundDays() string {
	if x != nil {
		return x.TestTurnaroundDays
	}
	return ""
}

type TestDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDetailName   string `protobuf:"bytes,1,opt,name=test_detail_name,json=testDetailName,proto3" json:"test_detail_name,omitempty"`
	TestDetailsValue string `protobuf:"bytes,2,opt,name=test_details_value,json=testDetailsValue,proto3" json:"test_details_value,omitempty"`
}

func (x *TestDetails) Reset() {
	*x = TestDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDetails) ProtoMessage() {}

func (x *TestDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDetails.ProtoReflect.Descriptor instead.
func (*TestDetails) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{14}
}

func (x *TestDetails) GetTestDetailName() string {
	if x != nil {
		return x.TestDetailName
	}
	return ""
}

func (x *TestDetails) GetTestDetailsValue() string {
	if x != nil {
		return x.TestDetailsValue
	}
	return ""
}

type GetTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test []*Test `protobuf:"bytes,1,rep,name=Test,proto3" json:"Test,omitempty"`
}

func (x *GetTestResponse) Reset() {
	*x = GetTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestResponse) ProtoMessage() {}

func (x *GetTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestResponse.ProtoReflect.Descriptor instead.
func (*GetTestResponse) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetTestResponse) GetTest() []*Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type GetTestTubeTypesResponse_TestTubeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId      int32                                               `protobuf:"varint,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	SampleTypes []*GetTestTubeTypesResponse_TestTubeInfo_SampleType `protobuf:"bytes,2,rep,name=sample_types,json=sampleTypes,proto3" json:"sample_types,omitempty"`
}

func (x *GetTestTubeTypesResponse_TestTubeInfo) Reset() {
	*x = GetTestTubeTypesResponse_TestTubeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestTubeTypesResponse_TestTubeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestTubeTypesResponse_TestTubeInfo) ProtoMessage() {}

func (x *GetTestTubeTypesResponse_TestTubeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestTubeTypesResponse_TestTubeInfo.ProtoReflect.Descriptor instead.
func (*GetTestTubeTypesResponse_TestTubeInfo) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetTestTubeTypesResponse_TestTubeInfo) GetTestId() int32 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *GetTestTubeTypesResponse_TestTubeInfo) GetSampleTypes() []*GetTestTubeTypesResponse_TestTubeInfo_SampleType {
	if x != nil {
		return x.SampleTypes
	}
	return nil
}

type GetTestTubeTypesResponse_TestTubeInfo_SampleType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleType string   `protobuf:"bytes,1,opt,name=sample_type,json=sampleType,proto3" json:"sample_type,omitempty"`
	TubeType   []string `protobuf:"bytes,2,rep,name=tube_type,json=tubeType,proto3" json:"tube_type,omitempty"`
}

func (x *GetTestTubeTypesResponse_TestTubeInfo_SampleType) Reset() {
	*x = GetTestTubeTypesResponse_TestTubeInfo_SampleType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestTubeTypesResponse_TestTubeInfo_SampleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestTubeTypesResponse_TestTubeInfo_SampleType) ProtoMessage() {}

func (x *GetTestTubeTypesResponse_TestTubeInfo_SampleType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestTubeTypesResponse_TestTubeInfo_SampleType.ProtoReflect.Descriptor instead.
func (*GetTestTubeTypesResponse_TestTubeInfo_SampleType) Descriptor() ([]byte, []int) {
	return file_proto_test_service_proto_rawDescGZIP(), []int{6, 0, 0}
}

func (x *GetTestTubeTypesResponse_TestTubeInfo_SampleType) GetSampleType() string {
	if x != nil {
		return x.SampleType
	}
	return ""
}

func (x *GetTestTubeTypesResponse_TestTubeInfo_SampleType) GetTubeType() []string {
	if x != nil {
		return x.TubeType
	}
	return nil
}

var File_proto_test_service_proto protoreflect.FileDescriptor

var file_proto_test_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x3c, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x4d,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x22, 0x3f, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x44, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x69,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x44, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x44, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x0a, 0x15, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x44, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73,
	0x22, 0xde, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x75, 0x62, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
	0x0f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x54, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x1a, 0xdd, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x68, 0x0a, 0x0c, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54,
	0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x4a, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x21, 0x0a, 0x06, 0x54, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x8e, 0x03, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74,
	0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x73, 0x73, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x43, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73,
	0x73, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73,
	0x73, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x73, 0x73, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x22, 0x2b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x22, 0x5c,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xe1, 0x02, 0x0a,
	0x05, 0x54, 0x65, 0x73, 0x74, 0x53, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65,
	0x73, 0x74, 0x41, 0x73, 0x73, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73,
	0x73, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x74, 0x65, 0x73, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65,
	0x73, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x79, 0x73,
	0x22, 0x65, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x40, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x54, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x04, 0x54, 0x65, 0x73, 0x74, 0x32, 0xb6, 0x05, 0x0a, 0x0b, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x60, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54,
	0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x54, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x44, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8f, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x41, 0x73, 0x73, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x61, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_test_service_proto_rawDescOnce sync.Once
	file_proto_test_service_proto_rawDescData = file_proto_test_service_proto_rawDesc
)

func file_proto_test_service_proto_rawDescGZIP() []byte {
	file_proto_test_service_proto_rawDescOnce.Do(func() {
		file_proto_test_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_test_service_proto_rawDescData)
	})
	return file_proto_test_service_proto_rawDescData
}

var file_proto_test_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_proto_test_service_proto_goTypes = []interface{}{
	(*GetDuplicateAssayGroupTestRequest)(nil),                // 0: coresamples_service.GetDuplicateAssayGroupTestRequest
	(*GetDuplicateAssayGroupTestResponse)(nil),               // 1: coresamples_service.GetDuplicateAssayGroupTestResponse
	(*GetTestIDsFromTestCodesRequest)(nil),                   // 2: coresamples_service.GetTestIDsFromTestCodesRequest
	(*GetTestIDsFromTestCodesResponse)(nil),                  // 3: coresamples_service.GetTestIDsFromTestCodesResponse
	(*TestCodetoTestIDsList)(nil),                            // 4: coresamples_service.TestCodetoTestIDsList
	(*GetTestTubeTypesRequest)(nil),                          // 5: coresamples_service.GetTestTubeTypesRequest
	(*GetTestTubeTypesResponse)(nil),                         // 6: coresamples_service.GetTestTubeTypesResponse
	(*TestID)(nil),                                           // 7: coresamples_service.TestID
	(*Test)(nil),                                             // 8: coresamples_service.Test
	(*CreateTestRequest)(nil),                                // 9: coresamples_service.CreateTestRequest
	(*CreateTestResponse)(nil),                               // 10: coresamples_service.CreateTestResponse
	(*GetTestRequest)(nil),                                   // 11: coresamples_service.GetTestRequest
	(*GetTestFieldRequest)(nil),                              // 12: coresamples_service.GetTestFieldRequest
	(*TestS)(nil),                                            // 13: coresamples_service.TestS
	(*TestDetails)(nil),                                      // 14: coresamples_service.testDetails
	(*GetTestResponse)(nil),                                  // 15: coresamples_service.GetTestResponse
	(*GetTestTubeTypesResponse_TestTubeInfo)(nil),            // 16: coresamples_service.GetTestTubeTypesResponse.TestTubeInfo
	(*GetTestTubeTypesResponse_TestTubeInfo_SampleType)(nil), // 17: coresamples_service.GetTestTubeTypesResponse.TestTubeInfo.SampleType
}
var file_proto_test_service_proto_depIdxs = []int32{
	4,  // 0: coresamples_service.GetTestIDsFromTestCodesResponse.response:type_name -> coresamples_service.TestCodetoTestIDsList
	16, // 1: coresamples_service.GetTestTubeTypesResponse.test_tube_infos:type_name -> coresamples_service.GetTestTubeTypesResponse.TestTubeInfo
	14, // 2: coresamples_service.Test.test_details:type_name -> coresamples_service.testDetails
	8,  // 3: coresamples_service.GetTestResponse.Test:type_name -> coresamples_service.Test
	17, // 4: coresamples_service.GetTestTubeTypesResponse.TestTubeInfo.sample_types:type_name -> coresamples_service.GetTestTubeTypesResponse.TestTubeInfo.SampleType
	11, // 5: coresamples_service.TestService.GetTest:input_type -> coresamples_service.GetTestRequest
	12, // 6: coresamples_service.TestService.GetTestField:input_type -> coresamples_service.GetTestFieldRequest
	9,  // 7: coresamples_service.TestService.CreateTest:input_type -> coresamples_service.CreateTestRequest
	5,  // 8: coresamples_service.TestService.GetTestTubeTypes:input_type -> coresamples_service.GetTestTubeTypesRequest
	2,  // 9: coresamples_service.TestService.GetTestIDsFromTestCodes:input_type -> coresamples_service.GetTestIDsFromTestCodesRequest
	0,  // 10: coresamples_service.TestService.GetDuplicateAssayGroupTest:input_type -> coresamples_service.GetDuplicateAssayGroupTestRequest
	15, // 11: coresamples_service.TestService.GetTest:output_type -> coresamples_service.GetTestResponse
	15, // 12: coresamples_service.TestService.GetTestField:output_type -> coresamples_service.GetTestResponse
	10, // 13: coresamples_service.TestService.CreateTest:output_type -> coresamples_service.CreateTestResponse
	6,  // 14: coresamples_service.TestService.GetTestTubeTypes:output_type -> coresamples_service.GetTestTubeTypesResponse
	3,  // 15: coresamples_service.TestService.GetTestIDsFromTestCodes:output_type -> coresamples_service.GetTestIDsFromTestCodesResponse
	1,  // 16: coresamples_service.TestService.GetDuplicateAssayGroupTest:output_type -> coresamples_service.GetDuplicateAssayGroupTestResponse
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_proto_test_service_proto_init() }
func file_proto_test_service_proto_init() {
	if File_proto_test_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_test_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDuplicateAssayGroupTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDuplicateAssayGroupTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestIDsFromTestCodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestIDsFromTestCodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCodetoTestIDsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestTubeTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestTubeTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestFieldRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestTubeTypesResponse_TestTubeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestTubeTypesResponse_TestTubeInfo_SampleType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_test_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_test_service_proto_goTypes,
		DependencyIndexes: file_proto_test_service_proto_depIdxs,
		MessageInfos:      file_proto_test_service_proto_msgTypes,
	}.Build()
	File_proto_test_service_proto = out.File
	file_proto_test_service_proto_rawDesc = nil
	file_proto_test_service_proto_goTypes = nil
	file_proto_test_service_proto_depIdxs = nil
}
