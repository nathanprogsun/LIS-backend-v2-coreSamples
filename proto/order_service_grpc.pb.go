// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/order_service.proto

package coresamples_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderService_GetOrder_FullMethodName                 = "/coresamples_service.OrderService/GetOrder"
	OrderService_CancelOrder_FullMethodName              = "/coresamples_service.OrderService/CancelOrder"
	OrderService_RestoreCanceledOrder_FullMethodName     = "/coresamples_service.OrderService/RestoreCanceledOrder"
	OrderService_AddOrderFlag_FullMethodName             = "/coresamples_service.OrderService/AddOrderFlag"
	OrderService_FlagOrder_FullMethodName                = "/coresamples_service.OrderService/FlagOrder"
	OrderService_UnflagOrder_FullMethodName              = "/coresamples_service.OrderService/UnflagOrder"
	OrderService_ListOrderFlagTypes_FullMethodName       = "/coresamples_service.OrderService/ListOrderFlagTypes"
	OrderService_ChangeOrderStatus_FullMethodName        = "/coresamples_service.OrderService/ChangeOrderStatus"
	OrderService_GetOrderStatusForDisplay_FullMethodName = "/coresamples_service.OrderService/GetOrderStatusForDisplay"
	OrderService_RerunSampleTests_FullMethodName         = "/coresamples_service.OrderService/RerunSampleTests"
	OrderService_RestoreOrderStatus_FullMethodName       = "/coresamples_service.OrderService/RestoreOrderStatus"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	GetOrder(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*Order, error)
	CancelOrder(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	RestoreCanceledOrder(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*RestoreOrderResponse, error)
	AddOrderFlag(ctx context.Context, in *AddOrderFlagRequest, opts ...grpc.CallOption) (*AddOrderFlagResponse, error)
	FlagOrder(ctx context.Context, in *FlagOrderRequest, opts ...grpc.CallOption) (*FlagOrderResponse, error)
	UnflagOrder(ctx context.Context, in *UnflagOrderRequest, opts ...grpc.CallOption) (*UnflagOrderResponse, error)
	ListOrderFlagTypes(ctx context.Context, in *ListOrderFlagTypesRequest, opts ...grpc.CallOption) (*ListOrderFlagTypesResponse, error)
	// VA Portal
	ChangeOrderStatus(ctx context.Context, in *ChangeOrderStatusRequest, opts ...grpc.CallOption) (*Order, error)
	GetOrderStatusForDisplay(ctx context.Context, in *GetOrderStatusDisplay, opts ...grpc.CallOption) (*GetOrderStatusDisplayResponse, error)
	RerunSampleTests(ctx context.Context, in *RerunSampleTestsRequest, opts ...grpc.CallOption) (*RerunSampleTestsResponse, error)
	RestoreOrderStatus(ctx context.Context, in *RestoreOrderStatusRequest, opts ...grpc.CallOption) (*RestoreOrderStatusResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) GetOrder(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, OrderService_GetOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CancelOrder(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_CancelOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) RestoreCanceledOrder(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*RestoreOrderResponse, error) {
	out := new(RestoreOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_RestoreCanceledOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) AddOrderFlag(ctx context.Context, in *AddOrderFlagRequest, opts ...grpc.CallOption) (*AddOrderFlagResponse, error) {
	out := new(AddOrderFlagResponse)
	err := c.cc.Invoke(ctx, OrderService_AddOrderFlag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) FlagOrder(ctx context.Context, in *FlagOrderRequest, opts ...grpc.CallOption) (*FlagOrderResponse, error) {
	out := new(FlagOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_FlagOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UnflagOrder(ctx context.Context, in *UnflagOrderRequest, opts ...grpc.CallOption) (*UnflagOrderResponse, error) {
	out := new(UnflagOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_UnflagOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ListOrderFlagTypes(ctx context.Context, in *ListOrderFlagTypesRequest, opts ...grpc.CallOption) (*ListOrderFlagTypesResponse, error) {
	out := new(ListOrderFlagTypesResponse)
	err := c.cc.Invoke(ctx, OrderService_ListOrderFlagTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ChangeOrderStatus(ctx context.Context, in *ChangeOrderStatusRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, OrderService_ChangeOrderStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderStatusForDisplay(ctx context.Context, in *GetOrderStatusDisplay, opts ...grpc.CallOption) (*GetOrderStatusDisplayResponse, error) {
	out := new(GetOrderStatusDisplayResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrderStatusForDisplay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) RerunSampleTests(ctx context.Context, in *RerunSampleTestsRequest, opts ...grpc.CallOption) (*RerunSampleTestsResponse, error) {
	out := new(RerunSampleTestsResponse)
	err := c.cc.Invoke(ctx, OrderService_RerunSampleTests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) RestoreOrderStatus(ctx context.Context, in *RestoreOrderStatusRequest, opts ...grpc.CallOption) (*RestoreOrderStatusResponse, error) {
	out := new(RestoreOrderStatusResponse)
	err := c.cc.Invoke(ctx, OrderService_RestoreOrderStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	GetOrder(context.Context, *OrderID) (*Order, error)
	CancelOrder(context.Context, *OrderID) (*CancelOrderResponse, error)
	RestoreCanceledOrder(context.Context, *OrderID) (*RestoreOrderResponse, error)
	AddOrderFlag(context.Context, *AddOrderFlagRequest) (*AddOrderFlagResponse, error)
	FlagOrder(context.Context, *FlagOrderRequest) (*FlagOrderResponse, error)
	UnflagOrder(context.Context, *UnflagOrderRequest) (*UnflagOrderResponse, error)
	ListOrderFlagTypes(context.Context, *ListOrderFlagTypesRequest) (*ListOrderFlagTypesResponse, error)
	// VA Portal
	ChangeOrderStatus(context.Context, *ChangeOrderStatusRequest) (*Order, error)
	GetOrderStatusForDisplay(context.Context, *GetOrderStatusDisplay) (*GetOrderStatusDisplayResponse, error)
	RerunSampleTests(context.Context, *RerunSampleTestsRequest) (*RerunSampleTestsResponse, error)
	RestoreOrderStatus(context.Context, *RestoreOrderStatusRequest) (*RestoreOrderStatusResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) GetOrder(context.Context, *OrderID) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrderServiceServer) CancelOrder(context.Context, *OrderID) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderServiceServer) RestoreCanceledOrder(context.Context, *OrderID) (*RestoreOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreCanceledOrder not implemented")
}
func (UnimplementedOrderServiceServer) AddOrderFlag(context.Context, *AddOrderFlagRequest) (*AddOrderFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderFlag not implemented")
}
func (UnimplementedOrderServiceServer) FlagOrder(context.Context, *FlagOrderRequest) (*FlagOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlagOrder not implemented")
}
func (UnimplementedOrderServiceServer) UnflagOrder(context.Context, *UnflagOrderRequest) (*UnflagOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnflagOrder not implemented")
}
func (UnimplementedOrderServiceServer) ListOrderFlagTypes(context.Context, *ListOrderFlagTypesRequest) (*ListOrderFlagTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrderFlagTypes not implemented")
}
func (UnimplementedOrderServiceServer) ChangeOrderStatus(context.Context, *ChangeOrderStatusRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeOrderStatus not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderStatusForDisplay(context.Context, *GetOrderStatusDisplay) (*GetOrderStatusDisplayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderStatusForDisplay not implemented")
}
func (UnimplementedOrderServiceServer) RerunSampleTests(context.Context, *RerunSampleTestsRequest) (*RerunSampleTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RerunSampleTests not implemented")
}
func (UnimplementedOrderServiceServer) RestoreOrderStatus(context.Context, *RestoreOrderStatusRequest) (*RestoreOrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreOrderStatus not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrder(ctx, req.(*OrderID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CancelOrder(ctx, req.(*OrderID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_RestoreCanceledOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).RestoreCanceledOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_RestoreCanceledOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).RestoreCanceledOrder(ctx, req.(*OrderID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_AddOrderFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AddOrderFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_AddOrderFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AddOrderFlag(ctx, req.(*AddOrderFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_FlagOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).FlagOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_FlagOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).FlagOrder(ctx, req.(*FlagOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UnflagOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnflagOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UnflagOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UnflagOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UnflagOrder(ctx, req.(*UnflagOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ListOrderFlagTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderFlagTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ListOrderFlagTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ListOrderFlagTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ListOrderFlagTypes(ctx, req.(*ListOrderFlagTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ChangeOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ChangeOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ChangeOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ChangeOrderStatus(ctx, req.(*ChangeOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderStatusForDisplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderStatusDisplay)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderStatusForDisplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderStatusForDisplay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderStatusForDisplay(ctx, req.(*GetOrderStatusDisplay))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_RerunSampleTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RerunSampleTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).RerunSampleTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_RerunSampleTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).RerunSampleTests(ctx, req.(*RerunSampleTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_RestoreOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).RestoreOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_RestoreOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).RestoreOrderStatus(ctx, req.(*RestoreOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coresamples_service.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrder",
			Handler:    _OrderService_GetOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _OrderService_CancelOrder_Handler,
		},
		{
			MethodName: "RestoreCanceledOrder",
			Handler:    _OrderService_RestoreCanceledOrder_Handler,
		},
		{
			MethodName: "AddOrderFlag",
			Handler:    _OrderService_AddOrderFlag_Handler,
		},
		{
			MethodName: "FlagOrder",
			Handler:    _OrderService_FlagOrder_Handler,
		},
		{
			MethodName: "UnflagOrder",
			Handler:    _OrderService_UnflagOrder_Handler,
		},
		{
			MethodName: "ListOrderFlagTypes",
			Handler:    _OrderService_ListOrderFlagTypes_Handler,
		},
		{
			MethodName: "ChangeOrderStatus",
			Handler:    _OrderService_ChangeOrderStatus_Handler,
		},
		{
			MethodName: "GetOrderStatusForDisplay",
			Handler:    _OrderService_GetOrderStatusForDisplay_Handler,
		},
		{
			MethodName: "RerunSampleTests",
			Handler:    _OrderService_RerunSampleTests_Handler,
		},
		{
			MethodName: "RestoreOrderStatus",
			Handler:    _OrderService_RestoreOrderStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/order_service.proto",
}
