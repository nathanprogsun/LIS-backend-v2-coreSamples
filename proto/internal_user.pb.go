// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: proto/internal_user.proto

package coresamples_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckNavigatorCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId              string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	NavigatorInternalUserId string `protobuf:"bytes,2,opt,name=navigator_internal_user_id,json=navigatorInternalUserId,proto3" json:"navigator_internal_user_id,omitempty"`
}

func (x *CheckNavigatorCustomerRequest) Reset() {
	*x = CheckNavigatorCustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckNavigatorCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckNavigatorCustomerRequest) ProtoMessage() {}

func (x *CheckNavigatorCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckNavigatorCustomerRequest.ProtoReflect.Descriptor instead.
func (*CheckNavigatorCustomerRequest) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{0}
}

func (x *CheckNavigatorCustomerRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *CheckNavigatorCustomerRequest) GetNavigatorInternalUserId() string {
	if x != nil {
		return x.NavigatorInternalUserId
	}
	return ""
}

type CheckNavigatorCustomerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Access string `protobuf:"bytes,1,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *CheckNavigatorCustomerResponse) Reset() {
	*x = CheckNavigatorCustomerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckNavigatorCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckNavigatorCustomerResponse) ProtoMessage() {}

func (x *CheckNavigatorCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckNavigatorCustomerResponse.ProtoReflect.Descriptor instead.
func (*CheckNavigatorCustomerResponse) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{1}
}

func (x *CheckNavigatorCustomerResponse) GetAccess() string {
	if x != nil {
		return x.Access
	}
	return ""
}

type GetInternalUserByidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalUserId string `protobuf:"bytes,1,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
}

func (x *GetInternalUserByidRequest) Reset() {
	*x = GetInternalUserByidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInternalUserByidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInternalUserByidRequest) ProtoMessage() {}

func (x *GetInternalUserByidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInternalUserByidRequest.ProtoReflect.Descriptor instead.
func (*GetInternalUserByidRequest) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{2}
}

func (x *GetInternalUserByidRequest) GetInternalUserId() string {
	if x != nil {
		return x.InternalUserId
	}
	return ""
}

type GetInternalUserByidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalUserId         int32  `protobuf:"varint,1,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
	InternalUserRole       string `protobuf:"bytes,2,opt,name=internal_user_role,json=internalUserRole,proto3" json:"internal_user_role,omitempty"`
	InternalUserName       string `protobuf:"bytes,3,opt,name=internal_user_name,json=internalUserName,proto3" json:"internal_user_name,omitempty"`
	InternalUserFirstname  string `protobuf:"bytes,4,opt,name=internal_user_firstname,json=internalUserFirstname,proto3" json:"internal_user_firstname,omitempty"`
	InternalUserLastname   string `protobuf:"bytes,5,opt,name=internal_user_lastname,json=internalUserLastname,proto3" json:"internal_user_lastname,omitempty"`
	InternalUserMiddlename string `protobuf:"bytes,6,opt,name=internal_user_middlename,json=internalUserMiddlename,proto3" json:"internal_user_middlename,omitempty"`
	InternalUserEmail      string `protobuf:"bytes,7,opt,name=internal_user_email,json=internalUserEmail,proto3" json:"internal_user_email,omitempty"`
	InternalUserPhone      string `protobuf:"bytes,8,opt,name=internal_user_phone,json=internalUserPhone,proto3" json:"internal_user_phone,omitempty"`
	InternalUserRoleId     int32  `protobuf:"varint,9,opt,name=internal_user_role_id,json=internalUserRoleId,proto3" json:"internal_user_role_id,omitempty"`
}

func (x *GetInternalUserByidResponse) Reset() {
	*x = GetInternalUserByidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInternalUserByidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInternalUserByidResponse) ProtoMessage() {}

func (x *GetInternalUserByidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInternalUserByidResponse.ProtoReflect.Descriptor instead.
func (*GetInternalUserByidResponse) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{3}
}

func (x *GetInternalUserByidResponse) GetInternalUserId() int32 {
	if x != nil {
		return x.InternalUserId
	}
	return 0
}

func (x *GetInternalUserByidResponse) GetInternalUserRole() string {
	if x != nil {
		return x.InternalUserRole
	}
	return ""
}

func (x *GetInternalUserByidResponse) GetInternalUserName() string {
	if x != nil {
		return x.InternalUserName
	}
	return ""
}

func (x *GetInternalUserByidResponse) GetInternalUserFirstname() string {
	if x != nil {
		return x.InternalUserFirstname
	}
	return ""
}

func (x *GetInternalUserByidResponse) GetInternalUserLastname() string {
	if x != nil {
		return x.InternalUserLastname
	}
	return ""
}

func (x *GetInternalUserByidResponse) GetInternalUserMiddlename() string {
	if x != nil {
		return x.InternalUserMiddlename
	}
	return ""
}

func (x *GetInternalUserByidResponse) GetInternalUserEmail() string {
	if x != nil {
		return x.InternalUserEmail
	}
	return ""
}

func (x *GetInternalUserByidResponse) GetInternalUserPhone() string {
	if x != nil {
		return x.InternalUserPhone
	}
	return ""
}

func (x *GetInternalUserByidResponse) GetInternalUserRoleId() int32 {
	if x != nil {
		return x.InternalUserRoleId
	}
	return 0
}

type DeleteSampleNavigatorNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NavigatorNoteId int32 `protobuf:"varint,1,opt,name=navigator_note_id,json=navigatorNoteId,proto3" json:"navigator_note_id,omitempty"`
}

func (x *DeleteSampleNavigatorNoteRequest) Reset() {
	*x = DeleteSampleNavigatorNoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSampleNavigatorNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSampleNavigatorNoteRequest) ProtoMessage() {}

func (x *DeleteSampleNavigatorNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSampleNavigatorNoteRequest.ProtoReflect.Descriptor instead.
func (*DeleteSampleNavigatorNoteRequest) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteSampleNavigatorNoteRequest) GetNavigatorNoteId() int32 {
	if x != nil {
		return x.NavigatorNoteId
	}
	return 0
}

type DeleteSampleNavigatorNoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NavigatorNoteId int32 `protobuf:"varint,1,opt,name=navigator_note_id,json=navigatorNoteId,proto3" json:"navigator_note_id,omitempty"`
}

func (x *DeleteSampleNavigatorNoteResponse) Reset() {
	*x = DeleteSampleNavigatorNoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSampleNavigatorNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSampleNavigatorNoteResponse) ProtoMessage() {}

func (x *DeleteSampleNavigatorNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSampleNavigatorNoteResponse.ProtoReflect.Descriptor instead.
func (*DeleteSampleNavigatorNoteResponse) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteSampleNavigatorNoteResponse) GetNavigatorNoteId() int32 {
	if x != nil {
		return x.NavigatorNoteId
	}
	return 0
}

type ModifySampleNavigatorNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NavigatorNoteId         int32  `protobuf:"varint,1,opt,name=navigator_note_id,json=navigatorNoteId,proto3" json:"navigator_note_id,omitempty"`
	Note                    string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	ModifiedBy              string `protobuf:"bytes,3,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	NavigatorNoteReadStatus string `protobuf:"bytes,4,opt,name=navigator_note_read_status,json=navigatorNoteReadStatus,proto3" json:"navigator_note_read_status,omitempty"`
	NavigatorNoteColor      string `protobuf:"bytes,5,opt,name=navigator_note_color,json=navigatorNoteColor,proto3" json:"navigator_note_color,omitempty"`
	NavigatorNoteType       string `protobuf:"bytes,6,opt,name=navigator_note_type,json=navigatorNoteType,proto3" json:"navigator_note_type,omitempty"`
	NavigatorNoteIcon       string `protobuf:"bytes,7,opt,name=navigator_note_icon,json=navigatorNoteIcon,proto3" json:"navigator_note_icon,omitempty"`
}

func (x *ModifySampleNavigatorNoteRequest) Reset() {
	*x = ModifySampleNavigatorNoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifySampleNavigatorNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifySampleNavigatorNoteRequest) ProtoMessage() {}

func (x *ModifySampleNavigatorNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifySampleNavigatorNoteRequest.ProtoReflect.Descriptor instead.
func (*ModifySampleNavigatorNoteRequest) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{6}
}

func (x *ModifySampleNavigatorNoteRequest) GetNavigatorNoteId() int32 {
	if x != nil {
		return x.NavigatorNoteId
	}
	return 0
}

func (x *ModifySampleNavigatorNoteRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *ModifySampleNavigatorNoteRequest) GetModifiedBy() string {
	if x != nil {
		return x.ModifiedBy
	}
	return ""
}

func (x *ModifySampleNavigatorNoteRequest) GetNavigatorNoteReadStatus() string {
	if x != nil {
		return x.NavigatorNoteReadStatus
	}
	return ""
}

func (x *ModifySampleNavigatorNoteRequest) GetNavigatorNoteColor() string {
	if x != nil {
		return x.NavigatorNoteColor
	}
	return ""
}

func (x *ModifySampleNavigatorNoteRequest) GetNavigatorNoteType() string {
	if x != nil {
		return x.NavigatorNoteType
	}
	return ""
}

func (x *ModifySampleNavigatorNoteRequest) GetNavigatorNoteIcon() string {
	if x != nil {
		return x.NavigatorNoteIcon
	}
	return ""
}

type ModifySampleNavigatorNoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NavigatorNoteId         int32  `protobuf:"varint,1,opt,name=navigator_note_id,json=navigatorNoteId,proto3" json:"navigator_note_id,omitempty"`
	Note                    string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	SampleId                int32  `protobuf:"varint,3,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	CreatedByInternalUserId int32  `protobuf:"varint,4,opt,name=created_by_internal_user_id,json=createdByInternalUserId,proto3" json:"created_by_internal_user_id,omitempty"`
	CreatedTime             string `protobuf:"bytes,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	NavigatorNoteReadStatus string `protobuf:"bytes,6,opt,name=navigator_note_read_status,json=navigatorNoteReadStatus,proto3" json:"navigator_note_read_status,omitempty"`
	ModifiedBy              string `protobuf:"bytes,7,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	ModifiedTime            string `protobuf:"bytes,8,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`
	NavigatorNoteColor      string `protobuf:"bytes,9,opt,name=navigator_note_color,json=navigatorNoteColor,proto3" json:"navigator_note_color,omitempty"`
	NavigatorNoteType       string `protobuf:"bytes,10,opt,name=navigator_note_type,json=navigatorNoteType,proto3" json:"navigator_note_type,omitempty"`
	NavigatorNoteIcon       string `protobuf:"bytes,11,opt,name=navigator_note_icon,json=navigatorNoteIcon,proto3" json:"navigator_note_icon,omitempty"`
	IsActive                bool   `protobuf:"varint,12,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *ModifySampleNavigatorNoteResponse) Reset() {
	*x = ModifySampleNavigatorNoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifySampleNavigatorNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifySampleNavigatorNoteResponse) ProtoMessage() {}

func (x *ModifySampleNavigatorNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifySampleNavigatorNoteResponse.ProtoReflect.Descriptor instead.
func (*ModifySampleNavigatorNoteResponse) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{7}
}

func (x *ModifySampleNavigatorNoteResponse) GetNavigatorNoteId() int32 {
	if x != nil {
		return x.NavigatorNoteId
	}
	return 0
}

func (x *ModifySampleNavigatorNoteResponse) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *ModifySampleNavigatorNoteResponse) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *ModifySampleNavigatorNoteResponse) GetCreatedByInternalUserId() int32 {
	if x != nil {
		return x.CreatedByInternalUserId
	}
	return 0
}

func (x *ModifySampleNavigatorNoteResponse) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *ModifySampleNavigatorNoteResponse) GetNavigatorNoteReadStatus() string {
	if x != nil {
		return x.NavigatorNoteReadStatus
	}
	return ""
}

func (x *ModifySampleNavigatorNoteResponse) GetModifiedBy() string {
	if x != nil {
		return x.ModifiedBy
	}
	return ""
}

func (x *ModifySampleNavigatorNoteResponse) GetModifiedTime() string {
	if x != nil {
		return x.ModifiedTime
	}
	return ""
}

func (x *ModifySampleNavigatorNoteResponse) GetNavigatorNoteColor() string {
	if x != nil {
		return x.NavigatorNoteColor
	}
	return ""
}

func (x *ModifySampleNavigatorNoteResponse) GetNavigatorNoteType() string {
	if x != nil {
		return x.NavigatorNoteType
	}
	return ""
}

func (x *ModifySampleNavigatorNoteResponse) GetNavigatorNoteIcon() string {
	if x != nil {
		return x.NavigatorNoteIcon
	}
	return ""
}

func (x *ModifySampleNavigatorNoteResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type CreateSampleNavigatorNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note                    string `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	SampleId                int32  `protobuf:"varint,2,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	CreatedByInternalUserId int32  `protobuf:"varint,3,opt,name=created_by_internal_user_id,json=createdByInternalUserId,proto3" json:"created_by_internal_user_id,omitempty"`
	ModifiedBy              string `protobuf:"bytes,4,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
}

func (x *CreateSampleNavigatorNoteRequest) Reset() {
	*x = CreateSampleNavigatorNoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSampleNavigatorNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSampleNavigatorNoteRequest) ProtoMessage() {}

func (x *CreateSampleNavigatorNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSampleNavigatorNoteRequest.ProtoReflect.Descriptor instead.
func (*CreateSampleNavigatorNoteRequest) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{8}
}

func (x *CreateSampleNavigatorNoteRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateSampleNavigatorNoteRequest) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *CreateSampleNavigatorNoteRequest) GetCreatedByInternalUserId() int32 {
	if x != nil {
		return x.CreatedByInternalUserId
	}
	return 0
}

func (x *CreateSampleNavigatorNoteRequest) GetModifiedBy() string {
	if x != nil {
		return x.ModifiedBy
	}
	return ""
}

type CreateSampleNavigatorNoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NavigatorNoteId         int32  `protobuf:"varint,1,opt,name=navigator_note_id,json=navigatorNoteId,proto3" json:"navigator_note_id,omitempty"`
	Note                    string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	SampleId                int32  `protobuf:"varint,3,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	CreatedByInternalUserId int32  `protobuf:"varint,4,opt,name=created_by_internal_user_id,json=createdByInternalUserId,proto3" json:"created_by_internal_user_id,omitempty"`
	CreatedTime             string `protobuf:"bytes,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	NavigatorNoteReadStatus string `protobuf:"bytes,6,opt,name=navigator_note_read_status,json=navigatorNoteReadStatus,proto3" json:"navigator_note_read_status,omitempty"`
	ModifiedBy              string `protobuf:"bytes,7,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	ModifiedTime            string `protobuf:"bytes,8,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`
	NavigatorNoteColor      string `protobuf:"bytes,9,opt,name=navigator_note_color,json=navigatorNoteColor,proto3" json:"navigator_note_color,omitempty"`
	NavigatorNoteType       string `protobuf:"bytes,10,opt,name=navigator_note_type,json=navigatorNoteType,proto3" json:"navigator_note_type,omitempty"`
	NavigatorNoteIcon       string `protobuf:"bytes,11,opt,name=navigator_note_icon,json=navigatorNoteIcon,proto3" json:"navigator_note_icon,omitempty"`
	IsActive                bool   `protobuf:"varint,12,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *CreateSampleNavigatorNoteResponse) Reset() {
	*x = CreateSampleNavigatorNoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSampleNavigatorNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSampleNavigatorNoteResponse) ProtoMessage() {}

func (x *CreateSampleNavigatorNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSampleNavigatorNoteResponse.ProtoReflect.Descriptor instead.
func (*CreateSampleNavigatorNoteResponse) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{9}
}

func (x *CreateSampleNavigatorNoteResponse) GetNavigatorNoteId() int32 {
	if x != nil {
		return x.NavigatorNoteId
	}
	return 0
}

func (x *CreateSampleNavigatorNoteResponse) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateSampleNavigatorNoteResponse) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *CreateSampleNavigatorNoteResponse) GetCreatedByInternalUserId() int32 {
	if x != nil {
		return x.CreatedByInternalUserId
	}
	return 0
}

func (x *CreateSampleNavigatorNoteResponse) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *CreateSampleNavigatorNoteResponse) GetNavigatorNoteReadStatus() string {
	if x != nil {
		return x.NavigatorNoteReadStatus
	}
	return ""
}

func (x *CreateSampleNavigatorNoteResponse) GetModifiedBy() string {
	if x != nil {
		return x.ModifiedBy
	}
	return ""
}

func (x *CreateSampleNavigatorNoteResponse) GetModifiedTime() string {
	if x != nil {
		return x.ModifiedTime
	}
	return ""
}

func (x *CreateSampleNavigatorNoteResponse) GetNavigatorNoteColor() string {
	if x != nil {
		return x.NavigatorNoteColor
	}
	return ""
}

func (x *CreateSampleNavigatorNoteResponse) GetNavigatorNoteType() string {
	if x != nil {
		return x.NavigatorNoteType
	}
	return ""
}

func (x *CreateSampleNavigatorNoteResponse) GetNavigatorNoteIcon() string {
	if x != nil {
		return x.NavigatorNoteIcon
	}
	return ""
}

func (x *CreateSampleNavigatorNoteResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type SetLowerLevelInternalUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalUserRole    string `protobuf:"bytes,1,opt,name=internal_user_role,json=internalUserRole,proto3" json:"internal_user_role,omitempty"`
	UpperInternalUserId string `protobuf:"bytes,2,opt,name=upper_internal_user_id,json=upperInternalUserId,proto3" json:"upper_internal_user_id,omitempty"`
	LowerInternalUserId string `protobuf:"bytes,3,opt,name=lower_internal_user_id,json=lowerInternalUserId,proto3" json:"lower_internal_user_id,omitempty"`
}

func (x *SetLowerLevelInternalUsersRequest) Reset() {
	*x = SetLowerLevelInternalUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLowerLevelInternalUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLowerLevelInternalUsersRequest) ProtoMessage() {}

func (x *SetLowerLevelInternalUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLowerLevelInternalUsersRequest.ProtoReflect.Descriptor instead.
func (*SetLowerLevelInternalUsersRequest) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{10}
}

func (x *SetLowerLevelInternalUsersRequest) GetInternalUserRole() string {
	if x != nil {
		return x.InternalUserRole
	}
	return ""
}

func (x *SetLowerLevelInternalUsersRequest) GetUpperInternalUserId() string {
	if x != nil {
		return x.UpperInternalUserId
	}
	return ""
}

func (x *SetLowerLevelInternalUsersRequest) GetLowerInternalUserId() string {
	if x != nil {
		return x.LowerInternalUserId
	}
	return ""
}

type SetLowerLevelInternalUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalUserId         int32  `protobuf:"varint,1,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
	InternalUserRole       string `protobuf:"bytes,2,opt,name=internal_user_role,json=internalUserRole,proto3" json:"internal_user_role,omitempty"`
	InternalUserName       string `protobuf:"bytes,3,opt,name=internal_user_name,json=internalUserName,proto3" json:"internal_user_name,omitempty"`
	InternalUserFirstname  string `protobuf:"bytes,4,opt,name=internal_user_firstname,json=internalUserFirstname,proto3" json:"internal_user_firstname,omitempty"`
	InternalUserLastname   string `protobuf:"bytes,5,opt,name=internal_user_lastname,json=internalUserLastname,proto3" json:"internal_user_lastname,omitempty"`
	InternalUserMiddlename string `protobuf:"bytes,6,opt,name=internal_user_middlename,json=internalUserMiddlename,proto3" json:"internal_user_middlename,omitempty"`
	InternalUserRoleId     int32  `protobuf:"varint,7,opt,name=internal_user_role_id,json=internalUserRoleId,proto3" json:"internal_user_role_id,omitempty"`
	InternalUserType       string `protobuf:"bytes,8,opt,name=internal_user_type,json=internalUserType,proto3" json:"internal_user_type,omitempty"`
	InternalUserTypeId     string `protobuf:"bytes,9,opt,name=internal_user_type_id,json=internalUserTypeId,proto3" json:"internal_user_type_id,omitempty"`
	InternalUserIsFullTime bool   `protobuf:"varint,10,opt,name=internal_user_is_full_time,json=internalUserIsFullTime,proto3" json:"internal_user_is_full_time,omitempty"`
	InternalUserRegion     int32  `protobuf:"varint,11,opt,name=internal_user_region,json=internalUserRegion,proto3" json:"internal_user_region,omitempty"`
	InternalUserEmail      string `protobuf:"bytes,12,opt,name=internal_user_email,json=internalUserEmail,proto3" json:"internal_user_email,omitempty"`
	InternalUserPhone      string `protobuf:"bytes,13,opt,name=internal_user_phone,json=internalUserPhone,proto3" json:"internal_user_phone,omitempty"`
	IsActive               bool   `protobuf:"varint,14,opt,name=isActive,proto3" json:"isActive,omitempty"`
	UserId                 int32  `protobuf:"varint,15,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SetLowerLevelInternalUsersResponse) Reset() {
	*x = SetLowerLevelInternalUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLowerLevelInternalUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLowerLevelInternalUsersResponse) ProtoMessage() {}

func (x *SetLowerLevelInternalUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLowerLevelInternalUsersResponse.ProtoReflect.Descriptor instead.
func (*SetLowerLevelInternalUsersResponse) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{11}
}

func (x *SetLowerLevelInternalUsersResponse) GetInternalUserId() int32 {
	if x != nil {
		return x.InternalUserId
	}
	return 0
}

func (x *SetLowerLevelInternalUsersResponse) GetInternalUserRole() string {
	if x != nil {
		return x.InternalUserRole
	}
	return ""
}

func (x *SetLowerLevelInternalUsersResponse) GetInternalUserName() string {
	if x != nil {
		return x.InternalUserName
	}
	return ""
}

func (x *SetLowerLevelInternalUsersResponse) GetInternalUserFirstname() string {
	if x != nil {
		return x.InternalUserFirstname
	}
	return ""
}

func (x *SetLowerLevelInternalUsersResponse) GetInternalUserLastname() string {
	if x != nil {
		return x.InternalUserLastname
	}
	return ""
}

func (x *SetLowerLevelInternalUsersResponse) GetInternalUserMiddlename() string {
	if x != nil {
		return x.InternalUserMiddlename
	}
	return ""
}

func (x *SetLowerLevelInternalUsersResponse) GetInternalUserRoleId() int32 {
	if x != nil {
		return x.InternalUserRoleId
	}
	return 0
}

func (x *SetLowerLevelInternalUsersResponse) GetInternalUserType() string {
	if x != nil {
		return x.InternalUserType
	}
	return ""
}

func (x *SetLowerLevelInternalUsersResponse) GetInternalUserTypeId() string {
	if x != nil {
		return x.InternalUserTypeId
	}
	return ""
}

func (x *SetLowerLevelInternalUsersResponse) GetInternalUserIsFullTime() bool {
	if x != nil {
		return x.InternalUserIsFullTime
	}
	return false
}

func (x *SetLowerLevelInternalUsersResponse) GetInternalUserRegion() int32 {
	if x != nil {
		return x.InternalUserRegion
	}
	return 0
}

func (x *SetLowerLevelInternalUsersResponse) GetInternalUserEmail() string {
	if x != nil {
		return x.InternalUserEmail
	}
	return ""
}

func (x *SetLowerLevelInternalUsersResponse) GetInternalUserPhone() string {
	if x != nil {
		return x.InternalUserPhone
	}
	return ""
}

func (x *SetLowerLevelInternalUsersResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *SetLowerLevelInternalUsersResponse) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetLowerLevelInternalUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalUserRole   string `protobuf:"bytes,1,opt,name=internal_user_role,json=internalUserRole,proto3" json:"internal_user_role,omitempty"`
	InternalUserRoleId int32  `protobuf:"varint,2,opt,name=internal_user_role_id,json=internalUserRoleId,proto3" json:"internal_user_role_id,omitempty"`
}

func (x *GetLowerLevelInternalUsersRequest) Reset() {
	*x = GetLowerLevelInternalUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLowerLevelInternalUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLowerLevelInternalUsersRequest) ProtoMessage() {}

func (x *GetLowerLevelInternalUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLowerLevelInternalUsersRequest.ProtoReflect.Descriptor instead.
func (*GetLowerLevelInternalUsersRequest) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{12}
}

func (x *GetLowerLevelInternalUsersRequest) GetInternalUserRole() string {
	if x != nil {
		return x.InternalUserRole
	}
	return ""
}

func (x *GetLowerLevelInternalUsersRequest) GetInternalUserRoleId() int32 {
	if x != nil {
		return x.InternalUserRoleId
	}
	return 0
}

type GetLowerLevelInternalUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalUserId          int32                                 `protobuf:"varint,1,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
	InternalUserRole        string                                `protobuf:"bytes,2,opt,name=internal_user_role,json=internalUserRole,proto3" json:"internal_user_role,omitempty"`
	InternalUserName        string                                `protobuf:"bytes,3,opt,name=internal_user_name,json=internalUserName,proto3" json:"internal_user_name,omitempty"`
	InternalUserFirstname   string                                `protobuf:"bytes,4,opt,name=internal_user_firstname,json=internalUserFirstname,proto3" json:"internal_user_firstname,omitempty"`
	InternalUserLastname    string                                `protobuf:"bytes,5,opt,name=internal_user_lastname,json=internalUserLastname,proto3" json:"internal_user_lastname,omitempty"`
	InternalUserMiddlename  string                                `protobuf:"bytes,6,opt,name=internal_user_middlename,json=internalUserMiddlename,proto3" json:"internal_user_middlename,omitempty"`
	InternalUserRoleId      int32                                 `protobuf:"varint,7,opt,name=internal_user_role_id,json=internalUserRoleId,proto3" json:"internal_user_role_id,omitempty"`
	InternalUserType        string                                `protobuf:"bytes,8,opt,name=internal_user_type,json=internalUserType,proto3" json:"internal_user_type,omitempty"`
	InternalUserTypeId      string                                `protobuf:"bytes,9,opt,name=internal_user_type_id,json=internalUserTypeId,proto3" json:"internal_user_type_id,omitempty"`
	InternalUserIsFullName  bool                                  `protobuf:"varint,10,opt,name=internal_user_is_full_name,json=internalUserIsFullName,proto3" json:"internal_user_is_full_name,omitempty"`
	InternalUserRegion      int32                                 `protobuf:"varint,11,opt,name=internal_user_region,json=internalUserRegion,proto3" json:"internal_user_region,omitempty"`
	InternalUserEmail       string                                `protobuf:"bytes,12,opt,name=internal_user_email,json=internalUserEmail,proto3" json:"internal_user_email,omitempty"`
	InternalUserPhone       string                                `protobuf:"bytes,13,opt,name=internal_user_phone,json=internalUserPhone,proto3" json:"internal_user_phone,omitempty"`
	IsActive                bool                                  `protobuf:"varint,14,opt,name=isActive,proto3" json:"isActive,omitempty"`
	UserId                  int32                                 `protobuf:"varint,15,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LowerLevelInternalUsers []*GetLowerLevelInternalUsersResponse `protobuf:"bytes,16,rep,name=lower_level_internal_users,json=lowerLevelInternalUsers,proto3" json:"lower_level_internal_users,omitempty"`
}

func (x *GetLowerLevelInternalUsersResponse) Reset() {
	*x = GetLowerLevelInternalUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLowerLevelInternalUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLowerLevelInternalUsersResponse) ProtoMessage() {}

func (x *GetLowerLevelInternalUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLowerLevelInternalUsersResponse.ProtoReflect.Descriptor instead.
func (*GetLowerLevelInternalUsersResponse) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{13}
}

func (x *GetLowerLevelInternalUsersResponse) GetInternalUserId() int32 {
	if x != nil {
		return x.InternalUserId
	}
	return 0
}

func (x *GetLowerLevelInternalUsersResponse) GetInternalUserRole() string {
	if x != nil {
		return x.InternalUserRole
	}
	return ""
}

func (x *GetLowerLevelInternalUsersResponse) GetInternalUserName() string {
	if x != nil {
		return x.InternalUserName
	}
	return ""
}

func (x *GetLowerLevelInternalUsersResponse) GetInternalUserFirstname() string {
	if x != nil {
		return x.InternalUserFirstname
	}
	return ""
}

func (x *GetLowerLevelInternalUsersResponse) GetInternalUserLastname() string {
	if x != nil {
		return x.InternalUserLastname
	}
	return ""
}

func (x *GetLowerLevelInternalUsersResponse) GetInternalUserMiddlename() string {
	if x != nil {
		return x.InternalUserMiddlename
	}
	return ""
}

func (x *GetLowerLevelInternalUsersResponse) GetInternalUserRoleId() int32 {
	if x != nil {
		return x.InternalUserRoleId
	}
	return 0
}

func (x *GetLowerLevelInternalUsersResponse) GetInternalUserType() string {
	if x != nil {
		return x.InternalUserType
	}
	return ""
}

func (x *GetLowerLevelInternalUsersResponse) GetInternalUserTypeId() string {
	if x != nil {
		return x.InternalUserTypeId
	}
	return ""
}

func (x *GetLowerLevelInternalUsersResponse) GetInternalUserIsFullName() bool {
	if x != nil {
		return x.InternalUserIsFullName
	}
	return false
}

func (x *GetLowerLevelInternalUsersResponse) GetInternalUserRegion() int32 {
	if x != nil {
		return x.InternalUserRegion
	}
	return 0
}

func (x *GetLowerLevelInternalUsersResponse) GetInternalUserEmail() string {
	if x != nil {
		return x.InternalUserEmail
	}
	return ""
}

func (x *GetLowerLevelInternalUsersResponse) GetInternalUserPhone() string {
	if x != nil {
		return x.InternalUserPhone
	}
	return ""
}

func (x *GetLowerLevelInternalUsersResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *GetLowerLevelInternalUsersResponse) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetLowerLevelInternalUsersResponse) GetLowerLevelInternalUsers() []*GetLowerLevelInternalUsersResponse {
	if x != nil {
		return x.LowerLevelInternalUsers
	}
	return nil
}

type TransferSalesCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromSalesId string `protobuf:"bytes,1,opt,name=from_sales_id,json=fromSalesId,proto3" json:"from_sales_id,omitempty"`
	ToSalesId   string `protobuf:"bytes,2,opt,name=to_sales_id,json=toSalesId,proto3" json:"to_sales_id,omitempty"`
	CustomerId  string `protobuf:"bytes,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *TransferSalesCustomerRequest) Reset() {
	*x = TransferSalesCustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferSalesCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferSalesCustomerRequest) ProtoMessage() {}

func (x *TransferSalesCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferSalesCustomerRequest.ProtoReflect.Descriptor instead.
func (*TransferSalesCustomerRequest) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{14}
}

func (x *TransferSalesCustomerRequest) GetFromSalesId() string {
	if x != nil {
		return x.FromSalesId
	}
	return ""
}

func (x *TransferSalesCustomerRequest) GetToSalesId() string {
	if x != nil {
		return x.ToSalesId
	}
	return ""
}

func (x *TransferSalesCustomerRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

type TransferSalesCustomerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TransferSalesCustomerResponse) Reset() {
	*x = TransferSalesCustomerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferSalesCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferSalesCustomerResponse) ProtoMessage() {}

func (x *TransferSalesCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferSalesCustomerResponse.ProtoReflect.Descriptor instead.
func (*TransferSalesCustomerResponse) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{15}
}

func (x *TransferSalesCustomerResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetInternalUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role      string   `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	RoleIds   []int32  `protobuf:"varint,2,rep,packed,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
	Usernames []string `protobuf:"bytes,3,rep,name=usernames,proto3" json:"usernames,omitempty"`
}

func (x *GetInternalUserRequest) Reset() {
	*x = GetInternalUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInternalUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInternalUserRequest) ProtoMessage() {}

func (x *GetInternalUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInternalUserRequest.ProtoReflect.Descriptor instead.
func (*GetInternalUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{16}
}

func (x *GetInternalUserRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *GetInternalUserRequest) GetRoleIds() []int32 {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

func (x *GetInternalUserRequest) GetUsernames() []string {
	if x != nil {
		return x.Usernames
	}
	return nil
}

type GetInternalUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*GetInternalUserResponseMiddleLevel `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *GetInternalUserResponse) Reset() {
	*x = GetInternalUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInternalUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInternalUserResponse) ProtoMessage() {}

func (x *GetInternalUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInternalUserResponse.ProtoReflect.Descriptor instead.
func (*GetInternalUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{17}
}

func (x *GetInternalUserResponse) GetResponse() []*GetInternalUserResponseMiddleLevel {
	if x != nil {
		return x.Response
	}
	return nil
}

type GetInternalUserResponseMiddleLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalUser []*InternalUser `protobuf:"bytes,1,rep,name=internal_user,json=internalUser,proto3" json:"internal_user,omitempty"`
}

func (x *GetInternalUserResponseMiddleLevel) Reset() {
	*x = GetInternalUserResponseMiddleLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInternalUserResponseMiddleLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInternalUserResponseMiddleLevel) ProtoMessage() {}

func (x *GetInternalUserResponseMiddleLevel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInternalUserResponseMiddleLevel.ProtoReflect.Descriptor instead.
func (*GetInternalUserResponseMiddleLevel) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{18}
}

func (x *GetInternalUserResponseMiddleLevel) GetInternalUser() []*InternalUser {
	if x != nil {
		return x.InternalUser
	}
	return nil
}

type CreateInternalUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalUserRole       string `protobuf:"bytes,2,opt,name=internal_user_role,json=internalUserRole,proto3" json:"internal_user_role,omitempty"`
	InternalUserName       string `protobuf:"bytes,3,opt,name=internal_user_name,json=internalUserName,proto3" json:"internal_user_name,omitempty"`
	InternalUserFirstname  string `protobuf:"bytes,4,opt,name=internal_user_firstname,json=internalUserFirstname,proto3" json:"internal_user_firstname,omitempty"`
	InternalUserLastname   string `protobuf:"bytes,5,opt,name=internal_user_lastname,json=internalUserLastname,proto3" json:"internal_user_lastname,omitempty"`
	InternalUserMiddlename string `protobuf:"bytes,6,opt,name=internal_user_middlename,json=internalUserMiddlename,proto3" json:"internal_user_middlename,omitempty"`
	InternalUserType       string `protobuf:"bytes,8,opt,name=internal_user_type,json=internalUserType,proto3" json:"internal_user_type,omitempty"`
	InternalUserTypeId     string `protobuf:"bytes,9,opt,name=internal_user_type_id,json=internalUserTypeId,proto3" json:"internal_user_type_id,omitempty"`
	InternalUserIsFullTime bool   `protobuf:"varint,10,opt,name=internal_user_is_full_time,json=internalUserIsFullTime,proto3" json:"internal_user_is_full_time,omitempty"`
	InternalUserRegion     int32  `protobuf:"varint,11,opt,name=internal_user_region,json=internalUserRegion,proto3" json:"internal_user_region,omitempty"`
	InternalUserEmail      string `protobuf:"bytes,12,opt,name=internal_user_email,json=internalUserEmail,proto3" json:"internal_user_email,omitempty"`
	InternalUserPhone      string `protobuf:"bytes,13,opt,name=internal_user_phone,json=internalUserPhone,proto3" json:"internal_user_phone,omitempty"`
}

func (x *CreateInternalUserRequest) Reset() {
	*x = CreateInternalUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInternalUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInternalUserRequest) ProtoMessage() {}

func (x *CreateInternalUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInternalUserRequest.ProtoReflect.Descriptor instead.
func (*CreateInternalUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{19}
}

func (x *CreateInternalUserRequest) GetInternalUserRole() string {
	if x != nil {
		return x.InternalUserRole
	}
	return ""
}

func (x *CreateInternalUserRequest) GetInternalUserName() string {
	if x != nil {
		return x.InternalUserName
	}
	return ""
}

func (x *CreateInternalUserRequest) GetInternalUserFirstname() string {
	if x != nil {
		return x.InternalUserFirstname
	}
	return ""
}

func (x *CreateInternalUserRequest) GetInternalUserLastname() string {
	if x != nil {
		return x.InternalUserLastname
	}
	return ""
}

func (x *CreateInternalUserRequest) GetInternalUserMiddlename() string {
	if x != nil {
		return x.InternalUserMiddlename
	}
	return ""
}

func (x *CreateInternalUserRequest) GetInternalUserType() string {
	if x != nil {
		return x.InternalUserType
	}
	return ""
}

func (x *CreateInternalUserRequest) GetInternalUserTypeId() string {
	if x != nil {
		return x.InternalUserTypeId
	}
	return ""
}

func (x *CreateInternalUserRequest) GetInternalUserIsFullTime() bool {
	if x != nil {
		return x.InternalUserIsFullTime
	}
	return false
}

func (x *CreateInternalUserRequest) GetInternalUserRegion() int32 {
	if x != nil {
		return x.InternalUserRegion
	}
	return 0
}

func (x *CreateInternalUserRequest) GetInternalUserEmail() string {
	if x != nil {
		return x.InternalUserEmail
	}
	return ""
}

func (x *CreateInternalUserRequest) GetInternalUserPhone() string {
	if x != nil {
		return x.InternalUserPhone
	}
	return ""
}

type InternalUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalUserId         int32  `protobuf:"varint,1,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
	InternalUserRole       string `protobuf:"bytes,2,opt,name=internal_user_role,json=internalUserRole,proto3" json:"internal_user_role,omitempty"`
	InternalUserName       string `protobuf:"bytes,3,opt,name=internal_user_name,json=internalUserName,proto3" json:"internal_user_name,omitempty"`
	InternalUserFirstname  string `protobuf:"bytes,4,opt,name=internal_user_firstname,json=internalUserFirstname,proto3" json:"internal_user_firstname,omitempty"`
	InternalUserLastname   string `protobuf:"bytes,5,opt,name=internal_user_lastname,json=internalUserLastname,proto3" json:"internal_user_lastname,omitempty"`
	InternalUserMiddlename string `protobuf:"bytes,6,opt,name=internal_user_middlename,json=internalUserMiddlename,proto3" json:"internal_user_middlename,omitempty"`
	InternalUserRoleId     int32  `protobuf:"varint,7,opt,name=internal_user_role_id,json=internalUserRoleId,proto3" json:"internal_user_role_id,omitempty"`
	InternalUserType       string `protobuf:"bytes,8,opt,name=internal_user_type,json=internalUserType,proto3" json:"internal_user_type,omitempty"`
	InternalUserTypeId     string `protobuf:"bytes,9,opt,name=internal_user_type_id,json=internalUserTypeId,proto3" json:"internal_user_type_id,omitempty"`
	InternalUserIsFullTime bool   `protobuf:"varint,10,opt,name=internal_user_is_full_time,json=internalUserIsFullTime,proto3" json:"internal_user_is_full_time,omitempty"`
	InternalUserRegion     int32  `protobuf:"varint,11,opt,name=internal_user_region,json=internalUserRegion,proto3" json:"internal_user_region,omitempty"`
	InternalUserEmail      string `protobuf:"bytes,12,opt,name=internal_user_email,json=internalUserEmail,proto3" json:"internal_user_email,omitempty"`
	InternalUserPhone      string `protobuf:"bytes,13,opt,name=internal_user_phone,json=internalUserPhone,proto3" json:"internal_user_phone,omitempty"`
	IsActive               bool   `protobuf:"varint,14,opt,name=isActive,proto3" json:"isActive,omitempty"`
	UserId                 int32  `protobuf:"varint,15,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *InternalUser) Reset() {
	*x = InternalUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalUser) ProtoMessage() {}

func (x *InternalUser) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalUser.ProtoReflect.Descriptor instead.
func (*InternalUser) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{20}
}

func (x *InternalUser) GetInternalUserId() int32 {
	if x != nil {
		return x.InternalUserId
	}
	return 0
}

func (x *InternalUser) GetInternalUserRole() string {
	if x != nil {
		return x.InternalUserRole
	}
	return ""
}

func (x *InternalUser) GetInternalUserName() string {
	if x != nil {
		return x.InternalUserName
	}
	return ""
}

func (x *InternalUser) GetInternalUserFirstname() string {
	if x != nil {
		return x.InternalUserFirstname
	}
	return ""
}

func (x *InternalUser) GetInternalUserLastname() string {
	if x != nil {
		return x.InternalUserLastname
	}
	return ""
}

func (x *InternalUser) GetInternalUserMiddlename() string {
	if x != nil {
		return x.InternalUserMiddlename
	}
	return ""
}

func (x *InternalUser) GetInternalUserRoleId() int32 {
	if x != nil {
		return x.InternalUserRoleId
	}
	return 0
}

func (x *InternalUser) GetInternalUserType() string {
	if x != nil {
		return x.InternalUserType
	}
	return ""
}

func (x *InternalUser) GetInternalUserTypeId() string {
	if x != nil {
		return x.InternalUserTypeId
	}
	return ""
}

func (x *InternalUser) GetInternalUserIsFullTime() bool {
	if x != nil {
		return x.InternalUserIsFullTime
	}
	return false
}

func (x *InternalUser) GetInternalUserRegion() int32 {
	if x != nil {
		return x.InternalUserRegion
	}
	return 0
}

func (x *InternalUser) GetInternalUserEmail() string {
	if x != nil {
		return x.InternalUserEmail
	}
	return ""
}

func (x *InternalUser) GetInternalUserPhone() string {
	if x != nil {
		return x.InternalUserPhone
	}
	return ""
}

func (x *InternalUser) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *InternalUser) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ListSalesInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalUserRoleId string `protobuf:"bytes,1,opt,name=internal_user_role_id,json=internalUserRoleId,proto3" json:"internal_user_role_id,omitempty"`
	InternalUserName   string `protobuf:"bytes,2,opt,name=internal_user_name,json=internalUserName,proto3" json:"internal_user_name,omitempty"`
}

func (x *ListSalesInfoRequest) Reset() {
	*x = ListSalesInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSalesInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSalesInfoRequest) ProtoMessage() {}

func (x *ListSalesInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSalesInfoRequest.ProtoReflect.Descriptor instead.
func (*ListSalesInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{21}
}

func (x *ListSalesInfoRequest) GetInternalUserRoleId() string {
	if x != nil {
		return x.InternalUserRoleId
	}
	return ""
}

func (x *ListSalesInfoRequest) GetInternalUserName() string {
	if x != nil {
		return x.InternalUserName
	}
	return ""
}

type InternalSales struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalUserId         int32  `protobuf:"varint,1,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
	InternalUserRole       string `protobuf:"bytes,2,opt,name=internal_user_role,json=internalUserRole,proto3" json:"internal_user_role,omitempty"`
	InternalUserName       string `protobuf:"bytes,3,opt,name=internal_user_name,json=internalUserName,proto3" json:"internal_user_name,omitempty"`
	InternalUserFirstname  string `protobuf:"bytes,4,opt,name=internal_user_firstname,json=internalUserFirstname,proto3" json:"internal_user_firstname,omitempty"`
	InternalUserLastname   string `protobuf:"bytes,5,opt,name=internal_user_lastname,json=internalUserLastname,proto3" json:"internal_user_lastname,omitempty"`
	InternalUserMiddlename string `protobuf:"bytes,6,opt,name=internal_user_middlename,json=internalUserMiddlename,proto3" json:"internal_user_middlename,omitempty"`
	InternalUserRoleId     int32  `protobuf:"varint,7,opt,name=internal_user_role_id,json=internalUserRoleId,proto3" json:"internal_user_role_id,omitempty"`
	InternalUserType       string `protobuf:"bytes,8,opt,name=internal_user_type,json=internalUserType,proto3" json:"internal_user_type,omitempty"`
	InternalUserTypeId     string `protobuf:"bytes,9,opt,name=internal_user_type_id,json=internalUserTypeId,proto3" json:"internal_user_type_id,omitempty"`
	InternalUserIsFullTime bool   `protobuf:"varint,10,opt,name=internal_user_is_full_time,json=internalUserIsFullTime,proto3" json:"internal_user_is_full_time,omitempty"`
	InternalUserRegion     int32  `protobuf:"varint,11,opt,name=internal_user_region,json=internalUserRegion,proto3" json:"internal_user_region,omitempty"`
	InternalUserEmail      string `protobuf:"bytes,12,opt,name=internal_user_email,json=internalUserEmail,proto3" json:"internal_user_email,omitempty"`
	InternalUserPhone      string `protobuf:"bytes,13,opt,name=internal_user_phone,json=internalUserPhone,proto3" json:"internal_user_phone,omitempty"`
	IsActive               bool   `protobuf:"varint,14,opt,name=isActive,proto3" json:"isActive,omitempty"`
	UserId                 int32  `protobuf:"varint,15,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *InternalSales) Reset() {
	*x = InternalSales{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalSales) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalSales) ProtoMessage() {}

func (x *InternalSales) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalSales.ProtoReflect.Descriptor instead.
func (*InternalSales) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{22}
}

func (x *InternalSales) GetInternalUserId() int32 {
	if x != nil {
		return x.InternalUserId
	}
	return 0
}

func (x *InternalSales) GetInternalUserRole() string {
	if x != nil {
		return x.InternalUserRole
	}
	return ""
}

func (x *InternalSales) GetInternalUserName() string {
	if x != nil {
		return x.InternalUserName
	}
	return ""
}

func (x *InternalSales) GetInternalUserFirstname() string {
	if x != nil {
		return x.InternalUserFirstname
	}
	return ""
}

func (x *InternalSales) GetInternalUserLastname() string {
	if x != nil {
		return x.InternalUserLastname
	}
	return ""
}

func (x *InternalSales) GetInternalUserMiddlename() string {
	if x != nil {
		return x.InternalUserMiddlename
	}
	return ""
}

func (x *InternalSales) GetInternalUserRoleId() int32 {
	if x != nil {
		return x.InternalUserRoleId
	}
	return 0
}

func (x *InternalSales) GetInternalUserType() string {
	if x != nil {
		return x.InternalUserType
	}
	return ""
}

func (x *InternalSales) GetInternalUserTypeId() string {
	if x != nil {
		return x.InternalUserTypeId
	}
	return ""
}

func (x *InternalSales) GetInternalUserIsFullTime() bool {
	if x != nil {
		return x.InternalUserIsFullTime
	}
	return false
}

func (x *InternalSales) GetInternalUserRegion() int32 {
	if x != nil {
		return x.InternalUserRegion
	}
	return 0
}

func (x *InternalSales) GetInternalUserEmail() string {
	if x != nil {
		return x.InternalUserEmail
	}
	return ""
}

func (x *InternalSales) GetInternalUserPhone() string {
	if x != nil {
		return x.InternalUserPhone
	}
	return ""
}

func (x *InternalSales) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *InternalSales) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ListInternalSalesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sales []*InternalSales `protobuf:"bytes,1,rep,name=Sales,proto3" json:"Sales,omitempty"`
}

func (x *ListInternalSalesResponse) Reset() {
	*x = ListInternalSalesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInternalSalesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInternalSalesResponse) ProtoMessage() {}

func (x *ListInternalSalesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInternalSalesResponse.ProtoReflect.Descriptor instead.
func (*ListInternalSalesResponse) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{23}
}

func (x *ListInternalSalesResponse) GetSales() []*InternalSales {
	if x != nil {
		return x.Sales
	}
	return nil
}

type ListSalesNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role              string   `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	InternalUserNames []string `protobuf:"bytes,2,rep,name=internal_user_names,json=internalUserNames,proto3" json:"internal_user_names,omitempty"`
	Page              string   `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage           string   `protobuf:"bytes,4,opt,name=perPage,proto3" json:"perPage,omitempty"`
}

func (x *ListSalesNameRequest) Reset() {
	*x = ListSalesNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_internal_user_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSalesNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSalesNameRequest) ProtoMessage() {}

func (x *ListSalesNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_internal_user_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSalesNameRequest.ProtoReflect.Descriptor instead.
func (*ListSalesNameRequest) Descriptor() ([]byte, []int) {
	return file_proto_internal_user_proto_rawDescGZIP(), []int{24}
}

func (x *ListSalesNameRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ListSalesNameRequest) GetInternalUserNames() []string {
	if x != nil {
		return x.InternalUserNames
	}
	return nil
}

func (x *ListSalesNameRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *ListSalesNameRequest) GetPerPage() string {
	if x != nil {
		return x.PerPage
	}
	return ""
}

var File_proto_internal_user_proto protoreflect.FileDescriptor

var file_proto_internal_user_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x7d, 0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x38, 0x0a, 0x1e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x46, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x79, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xde, 0x03, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e,
	0x6f, 0x74, 0x65, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x22, 0xd2, 0x02, 0x0a, 0x20, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x1a,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x22, 0x93, 0x04, 0x0a, 0x21,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x1a, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x22, 0xb2, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x22, 0x93, 0x04, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xbb, 0x01, 0x0a,
	0x21, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x33, 0x0a, 0x16, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x75, 0x70, 0x70, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe9, 0x05, 0x0a, 0x22, 0x53,
	0x65, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xdf, 0x06,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x74, 0x0a, 0x1a, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x17, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22,
	0x83, 0x01, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x65,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x53, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x22, 0xce, 0x04, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x22, 0xd3, 0x05, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xd4, 0x05, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x32, 0xb9, 0x0b, 0x0a,
	0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12,
	0x71, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x77,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x4c,
	0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74,
	0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x19, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x69, 0x64, 0x12, 0x2f, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x79, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x3b, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_internal_user_proto_rawDescOnce sync.Once
	file_proto_internal_user_proto_rawDescData = file_proto_internal_user_proto_rawDesc
)

func file_proto_internal_user_proto_rawDescGZIP() []byte {
	file_proto_internal_user_proto_rawDescOnce.Do(func() {
		file_proto_internal_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_internal_user_proto_rawDescData)
	})
	return file_proto_internal_user_proto_rawDescData
}

var file_proto_internal_user_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_proto_internal_user_proto_goTypes = []interface{}{
	(*CheckNavigatorCustomerRequest)(nil),      // 0: coresamples_service.CheckNavigatorCustomerRequest
	(*CheckNavigatorCustomerResponse)(nil),     // 1: coresamples_service.CheckNavigatorCustomerResponse
	(*GetInternalUserByidRequest)(nil),         // 2: coresamples_service.GetInternalUserByidRequest
	(*GetInternalUserByidResponse)(nil),        // 3: coresamples_service.GetInternalUserByidResponse
	(*DeleteSampleNavigatorNoteRequest)(nil),   // 4: coresamples_service.DeleteSampleNavigatorNoteRequest
	(*DeleteSampleNavigatorNoteResponse)(nil),  // 5: coresamples_service.DeleteSampleNavigatorNoteResponse
	(*ModifySampleNavigatorNoteRequest)(nil),   // 6: coresamples_service.ModifySampleNavigatorNoteRequest
	(*ModifySampleNavigatorNoteResponse)(nil),  // 7: coresamples_service.ModifySampleNavigatorNoteResponse
	(*CreateSampleNavigatorNoteRequest)(nil),   // 8: coresamples_service.CreateSampleNavigatorNoteRequest
	(*CreateSampleNavigatorNoteResponse)(nil),  // 9: coresamples_service.CreateSampleNavigatorNoteResponse
	(*SetLowerLevelInternalUsersRequest)(nil),  // 10: coresamples_service.SetLowerLevelInternalUsersRequest
	(*SetLowerLevelInternalUsersResponse)(nil), // 11: coresamples_service.SetLowerLevelInternalUsersResponse
	(*GetLowerLevelInternalUsersRequest)(nil),  // 12: coresamples_service.GetLowerLevelInternalUsersRequest
	(*GetLowerLevelInternalUsersResponse)(nil), // 13: coresamples_service.GetLowerLevelInternalUsersResponse
	(*TransferSalesCustomerRequest)(nil),       // 14: coresamples_service.TransferSalesCustomerRequest
	(*TransferSalesCustomerResponse)(nil),      // 15: coresamples_service.TransferSalesCustomerResponse
	(*GetInternalUserRequest)(nil),             // 16: coresamples_service.GetInternalUserRequest
	(*GetInternalUserResponse)(nil),            // 17: coresamples_service.GetInternalUserResponse
	(*GetInternalUserResponseMiddleLevel)(nil), // 18: coresamples_service.GetInternalUserResponseMiddleLevel
	(*CreateInternalUserRequest)(nil),          // 19: coresamples_service.CreateInternalUserRequest
	(*InternalUser)(nil),                       // 20: coresamples_service.InternalUser
	(*ListSalesInfoRequest)(nil),               // 21: coresamples_service.ListSalesInfoRequest
	(*InternalSales)(nil),                      // 22: coresamples_service.internalSales
	(*ListInternalSalesResponse)(nil),          // 23: coresamples_service.ListInternalSalesResponse
	(*ListSalesNameRequest)(nil),               // 24: coresamples_service.ListSalesNameRequest
	(*ListCustomerPracticeResponse)(nil),       // 25: coresamples_service.ListCustomerPracticeResponse
}
var file_proto_internal_user_proto_depIdxs = []int32{
	13, // 0: coresamples_service.GetLowerLevelInternalUsersResponse.lower_level_internal_users:type_name -> coresamples_service.GetLowerLevelInternalUsersResponse
	18, // 1: coresamples_service.GetInternalUserResponse.response:type_name -> coresamples_service.GetInternalUserResponseMiddleLevel
	20, // 2: coresamples_service.GetInternalUserResponseMiddleLevel.internal_user:type_name -> coresamples_service.InternalUser
	22, // 3: coresamples_service.ListInternalSalesResponse.Sales:type_name -> coresamples_service.internalSales
	19, // 4: coresamples_service.InternalUserService.CreateInternalUser:input_type -> coresamples_service.CreateInternalUserRequest
	24, // 5: coresamples_service.InternalUserService.GetSalesClinics:input_type -> coresamples_service.ListSalesNameRequest
	16, // 6: coresamples_service.InternalUserService.GetInternalUser:input_type -> coresamples_service.GetInternalUserRequest
	14, // 7: coresamples_service.InternalUserService.TransferSalesCustomer:input_type -> coresamples_service.TransferSalesCustomerRequest
	12, // 8: coresamples_service.InternalUserService.GetLowerLevelInternalUsers:input_type -> coresamples_service.GetLowerLevelInternalUsersRequest
	10, // 9: coresamples_service.InternalUserService.SetLowerLevelInternalUsers:input_type -> coresamples_service.SetLowerLevelInternalUsersRequest
	8,  // 10: coresamples_service.InternalUserService.CreateSampleNavigatorNote:input_type -> coresamples_service.CreateSampleNavigatorNoteRequest
	6,  // 11: coresamples_service.InternalUserService.ModifySampleNavigatorNote:input_type -> coresamples_service.ModifySampleNavigatorNoteRequest
	4,  // 12: coresamples_service.InternalUserService.DeleteSampleNavigatorNote:input_type -> coresamples_service.DeleteSampleNavigatorNoteRequest
	2,  // 13: coresamples_service.InternalUserService.GetInternalUserByid:input_type -> coresamples_service.GetInternalUserByidRequest
	0,  // 14: coresamples_service.InternalUserService.CheckCustomerNavigator:input_type -> coresamples_service.CheckNavigatorCustomerRequest
	20, // 15: coresamples_service.InternalUserService.CreateInternalUser:output_type -> coresamples_service.InternalUser
	25, // 16: coresamples_service.InternalUserService.GetSalesClinics:output_type -> coresamples_service.ListCustomerPracticeResponse
	17, // 17: coresamples_service.InternalUserService.GetInternalUser:output_type -> coresamples_service.GetInternalUserResponse
	15, // 18: coresamples_service.InternalUserService.TransferSalesCustomer:output_type -> coresamples_service.TransferSalesCustomerResponse
	13, // 19: coresamples_service.InternalUserService.GetLowerLevelInternalUsers:output_type -> coresamples_service.GetLowerLevelInternalUsersResponse
	11, // 20: coresamples_service.InternalUserService.SetLowerLevelInternalUsers:output_type -> coresamples_service.SetLowerLevelInternalUsersResponse
	9,  // 21: coresamples_service.InternalUserService.CreateSampleNavigatorNote:output_type -> coresamples_service.CreateSampleNavigatorNoteResponse
	7,  // 22: coresamples_service.InternalUserService.ModifySampleNavigatorNote:output_type -> coresamples_service.ModifySampleNavigatorNoteResponse
	5,  // 23: coresamples_service.InternalUserService.DeleteSampleNavigatorNote:output_type -> coresamples_service.DeleteSampleNavigatorNoteResponse
	3,  // 24: coresamples_service.InternalUserService.GetInternalUserByid:output_type -> coresamples_service.GetInternalUserByidResponse
	1,  // 25: coresamples_service.InternalUserService.CheckCustomerNavigator:output_type -> coresamples_service.CheckNavigatorCustomerResponse
	15, // [15:26] is the sub-list for method output_type
	4,  // [4:15] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_internal_user_proto_init() }
func file_proto_internal_user_proto_init() {
	if File_proto_internal_user_proto != nil {
		return
	}
	file_proto_sales_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_internal_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckNavigatorCustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckNavigatorCustomerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInternalUserByidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInternalUserByidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSampleNavigatorNoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSampleNavigatorNoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifySampleNavigatorNoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifySampleNavigatorNoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSampleNavigatorNoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSampleNavigatorNoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLowerLevelInternalUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLowerLevelInternalUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLowerLevelInternalUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLowerLevelInternalUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferSalesCustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferSalesCustomerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInternalUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInternalUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInternalUserResponseMiddleLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInternalUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSalesInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalSales); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInternalSalesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_internal_user_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSalesNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_internal_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_internal_user_proto_goTypes,
		DependencyIndexes: file_proto_internal_user_proto_depIdxs,
		MessageInfos:      file_proto_internal_user_proto_msgTypes,
	}.Build()
	File_proto_internal_user_proto = out.File
	file_proto_internal_user_proto_rawDesc = nil
	file_proto_internal_user_proto_goTypes = nil
	file_proto_internal_user_proto_depIdxs = nil
}
