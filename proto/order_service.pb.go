// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: proto/order_service.proto

package coresamples_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RerunSampleTestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId int32   `protobuf:"varint,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	TestIds  []int32 `protobuf:"varint,2,rep,packed,name=test_ids,json=testIds,proto3" json:"test_ids,omitempty"`
}

func (x *RerunSampleTestsRequest) Reset() {
	*x = RerunSampleTestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerunSampleTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerunSampleTestsRequest) ProtoMessage() {}

func (x *RerunSampleTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerunSampleTestsRequest.ProtoReflect.Descriptor instead.
func (*RerunSampleTestsRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{0}
}

func (x *RerunSampleTestsRequest) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *RerunSampleTestsRequest) GetTestIds() []int32 {
	if x != nil {
		return x.TestIds
	}
	return nil
}

type RerunSampleTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendStatus string `protobuf:"bytes,1,opt,name=send_status,json=sendStatus,proto3" json:"send_status,omitempty"`
	SendTime   string `protobuf:"bytes,2,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	SendLog    string `protobuf:"bytes,3,opt,name=send_log,json=sendLog,proto3" json:"send_log,omitempty"`
}

func (x *RerunSampleTestsResponse) Reset() {
	*x = RerunSampleTestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerunSampleTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerunSampleTestsResponse) ProtoMessage() {}

func (x *RerunSampleTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerunSampleTestsResponse.ProtoReflect.Descriptor instead.
func (*RerunSampleTestsResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{1}
}

func (x *RerunSampleTestsResponse) GetSendStatus() string {
	if x != nil {
		return x.SendStatus
	}
	return ""
}

func (x *RerunSampleTestsResponse) GetSendTime() string {
	if x != nil {
		return x.SendTime
	}
	return ""
}

func (x *RerunSampleTestsResponse) GetSendLog() string {
	if x != nil {
		return x.SendLog
	}
	return ""
}

type ChangeOrderStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Status  string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ChangeOrderStatusRequest) Reset() {
	*x = ChangeOrderStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeOrderStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeOrderStatusRequest) ProtoMessage() {}

func (x *ChangeOrderStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeOrderStatusRequest.ProtoReflect.Descriptor instead.
func (*ChangeOrderStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{2}
}

func (x *ChangeOrderStatusRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ChangeOrderStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CancelOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId                 int32  `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderTitle              string `protobuf:"bytes,2,opt,name=order_title,json=orderTitle,proto3" json:"order_title,omitempty"`
	OrderType               string `protobuf:"bytes,3,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	ParentOrderId           int32  `protobuf:"varint,4,opt,name=parent_order_id,json=parentOrderId,proto3" json:"parent_order_id,omitempty"`
	OrderDescription        string `protobuf:"bytes,5,opt,name=order_description,json=orderDescription,proto3" json:"order_description,omitempty"`
	OrderConfirmationNumber string `protobuf:"bytes,6,opt,name=order_confirmation_number,json=orderConfirmationNumber,proto3" json:"order_confirmation_number,omitempty"`
	CustomerId              int32  `protobuf:"varint,7,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	OrderCreateTime         string `protobuf:"bytes,8,opt,name=order_create_time,json=orderCreateTime,proto3" json:"order_create_time,omitempty"`
	IsActive                bool   `protobuf:"varint,9,opt,name=isActive,proto3" json:"isActive,omitempty"`
	HasOrderSetting         bool   `protobuf:"varint,10,opt,name=has_order_setting,json=hasOrderSetting,proto3" json:"has_order_setting,omitempty"`
	OrderCanceled           bool   `protobuf:"varint,11,opt,name=order_canceled,json=orderCanceled,proto3" json:"order_canceled,omitempty"`
	SalesId                 int32  `protobuf:"varint,12,opt,name=sales_id,json=salesId,proto3" json:"sales_id,omitempty"`
}

func (x *CancelOrderResponse) Reset() {
	*x = CancelOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderResponse) ProtoMessage() {}

func (x *CancelOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderResponse.ProtoReflect.Descriptor instead.
func (*CancelOrderResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{3}
}

func (x *CancelOrderResponse) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *CancelOrderResponse) GetOrderTitle() string {
	if x != nil {
		return x.OrderTitle
	}
	return ""
}

func (x *CancelOrderResponse) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *CancelOrderResponse) GetParentOrderId() int32 {
	if x != nil {
		return x.ParentOrderId
	}
	return 0
}

func (x *CancelOrderResponse) GetOrderDescription() string {
	if x != nil {
		return x.OrderDescription
	}
	return ""
}

func (x *CancelOrderResponse) GetOrderConfirmationNumber() string {
	if x != nil {
		return x.OrderConfirmationNumber
	}
	return ""
}

func (x *CancelOrderResponse) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CancelOrderResponse) GetOrderCreateTime() string {
	if x != nil {
		return x.OrderCreateTime
	}
	return ""
}

func (x *CancelOrderResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *CancelOrderResponse) GetHasOrderSetting() bool {
	if x != nil {
		return x.HasOrderSetting
	}
	return false
}

func (x *CancelOrderResponse) GetOrderCanceled() bool {
	if x != nil {
		return x.OrderCanceled
	}
	return false
}

func (x *CancelOrderResponse) GetSalesId() int32 {
	if x != nil {
		return x.SalesId
	}
	return 0
}

type RestoreOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId                 int32  `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderTitle              string `protobuf:"bytes,2,opt,name=order_title,json=orderTitle,proto3" json:"order_title,omitempty"`
	OrderType               string `protobuf:"bytes,3,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	ParentOrderId           int32  `protobuf:"varint,4,opt,name=parent_order_id,json=parentOrderId,proto3" json:"parent_order_id,omitempty"`
	OrderDescription        string `protobuf:"bytes,5,opt,name=order_description,json=orderDescription,proto3" json:"order_description,omitempty"`
	OrderConfirmationNumber string `protobuf:"bytes,6,opt,name=order_confirmation_number,json=orderConfirmationNumber,proto3" json:"order_confirmation_number,omitempty"`
	CustomerId              int32  `protobuf:"varint,7,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	OrderCreateTime         string `protobuf:"bytes,8,opt,name=order_create_time,json=orderCreateTime,proto3" json:"order_create_time,omitempty"`
	IsActive                bool   `protobuf:"varint,9,opt,name=isActive,proto3" json:"isActive,omitempty"`
	HasOrderSetting         bool   `protobuf:"varint,10,opt,name=has_order_setting,json=hasOrderSetting,proto3" json:"has_order_setting,omitempty"`
	OrderCanceled           bool   `protobuf:"varint,11,opt,name=order_canceled,json=orderCanceled,proto3" json:"order_canceled,omitempty"`
	SalesId                 int32  `protobuf:"varint,12,opt,name=sales_id,json=salesId,proto3" json:"sales_id,omitempty"`
	OrderStatus             string `protobuf:"bytes,13,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
}

func (x *RestoreOrderResponse) Reset() {
	*x = RestoreOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreOrderResponse) ProtoMessage() {}

func (x *RestoreOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreOrderResponse.ProtoReflect.Descriptor instead.
func (*RestoreOrderResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{4}
}

func (x *RestoreOrderResponse) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *RestoreOrderResponse) GetOrderTitle() string {
	if x != nil {
		return x.OrderTitle
	}
	return ""
}

func (x *RestoreOrderResponse) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *RestoreOrderResponse) GetParentOrderId() int32 {
	if x != nil {
		return x.ParentOrderId
	}
	return 0
}

func (x *RestoreOrderResponse) GetOrderDescription() string {
	if x != nil {
		return x.OrderDescription
	}
	return ""
}

func (x *RestoreOrderResponse) GetOrderConfirmationNumber() string {
	if x != nil {
		return x.OrderConfirmationNumber
	}
	return ""
}

func (x *RestoreOrderResponse) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *RestoreOrderResponse) GetOrderCreateTime() string {
	if x != nil {
		return x.OrderCreateTime
	}
	return ""
}

func (x *RestoreOrderResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *RestoreOrderResponse) GetHasOrderSetting() bool {
	if x != nil {
		return x.HasOrderSetting
	}
	return false
}

func (x *RestoreOrderResponse) GetOrderCanceled() bool {
	if x != nil {
		return x.OrderCanceled
	}
	return false
}

func (x *RestoreOrderResponse) GetSalesId() int32 {
	if x != nil {
		return x.SalesId
	}
	return 0
}

func (x *RestoreOrderResponse) GetOrderStatus() string {
	if x != nil {
		return x.OrderStatus
	}
	return ""
}

type OrderID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID int32 `protobuf:"varint,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
}

func (x *OrderID) Reset() {
	*x = OrderID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderID) ProtoMessage() {}

func (x *OrderID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderID.ProtoReflect.Descriptor instead.
func (*OrderID) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{5}
}

func (x *OrderID) GetOrderID() int32 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

type OrderMinimum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId                 int32                `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Samples                 []*Samples           `protobuf:"bytes,2,rep,name=samples,proto3" json:"samples,omitempty"`
	OrderTitle              string               `protobuf:"bytes,3,opt,name=order_title,json=orderTitle,proto3" json:"order_title,omitempty"`
	OrderDescription        string               `protobuf:"bytes,4,opt,name=order_description,json=orderDescription,proto3" json:"order_description,omitempty"`
	OrderCreateTime         string               `protobuf:"bytes,5,opt,name=order_create_time,json=orderCreateTime,proto3" json:"order_create_time,omitempty"`
	IsActive                bool                 `protobuf:"varint,6,opt,name=isActive,proto3" json:"isActive,omitempty"`
	CustomerId              int32                `protobuf:"varint,7,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	OrderType               string               `protobuf:"bytes,8,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	OrderCanceled           bool                 `protobuf:"varint,9,opt,name=order_canceled,json=orderCanceled,proto3" json:"order_canceled,omitempty"`
	OrderFlagged            bool                 `protobuf:"varint,10,opt,name=order_flagged,json=orderFlagged,proto3" json:"order_flagged,omitempty"`
	OrderFlags              []*OrderFlagsMinimum `protobuf:"bytes,11,rep,name=order_flags,json=orderFlags,proto3" json:"order_flags,omitempty"`
	OrderConfirmationNumber string               `protobuf:"bytes,12,opt,name=order_confirmation_number,json=orderConfirmationNumber,proto3" json:"order_confirmation_number,omitempty"`
	OrderStatus             string               `protobuf:"bytes,13,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	BillingOrderId          string               `protobuf:"bytes,14,opt,name=billing_order_id,json=billingOrderId,proto3" json:"billing_order_id,omitempty"`
	ClinicId                int32                `protobuf:"varint,15,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
}

func (x *OrderMinimum) Reset() {
	*x = OrderMinimum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderMinimum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderMinimum) ProtoMessage() {}

func (x *OrderMinimum) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderMinimum.ProtoReflect.Descriptor instead.
func (*OrderMinimum) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{6}
}

func (x *OrderMinimum) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *OrderMinimum) GetSamples() []*Samples {
	if x != nil {
		return x.Samples
	}
	return nil
}

func (x *OrderMinimum) GetOrderTitle() string {
	if x != nil {
		return x.OrderTitle
	}
	return ""
}

func (x *OrderMinimum) GetOrderDescription() string {
	if x != nil {
		return x.OrderDescription
	}
	return ""
}

func (x *OrderMinimum) GetOrderCreateTime() string {
	if x != nil {
		return x.OrderCreateTime
	}
	return ""
}

func (x *OrderMinimum) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *OrderMinimum) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *OrderMinimum) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *OrderMinimum) GetOrderCanceled() bool {
	if x != nil {
		return x.OrderCanceled
	}
	return false
}

func (x *OrderMinimum) GetOrderFlagged() bool {
	if x != nil {
		return x.OrderFlagged
	}
	return false
}

func (x *OrderMinimum) GetOrderFlags() []*OrderFlagsMinimum {
	if x != nil {
		return x.OrderFlags
	}
	return nil
}

func (x *OrderMinimum) GetOrderConfirmationNumber() string {
	if x != nil {
		return x.OrderConfirmationNumber
	}
	return ""
}

func (x *OrderMinimum) GetOrderStatus() string {
	if x != nil {
		return x.OrderStatus
	}
	return ""
}

func (x *OrderMinimum) GetBillingOrderId() string {
	if x != nil {
		return x.BillingOrderId
	}
	return ""
}

func (x *OrderMinimum) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

type InitialPatientPageOrderMinimum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId                                 int32      `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Samples                                 []*Samples `protobuf:"bytes,2,rep,name=samples,proto3" json:"samples,omitempty"`
	OrderTitle                              string     `protobuf:"bytes,3,opt,name=order_title,json=orderTitle,proto3" json:"order_title,omitempty"`
	OrderDescription                        string     `protobuf:"bytes,4,opt,name=order_description,json=orderDescription,proto3" json:"order_description,omitempty"`
	OrderCreateTime                         string     `protobuf:"bytes,5,opt,name=order_create_time,json=orderCreateTime,proto3" json:"order_create_time,omitempty"`
	IsActive                                bool       `protobuf:"varint,6,opt,name=isActive,proto3" json:"isActive,omitempty"`
	CustomerId                              int32      `protobuf:"varint,7,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	OrderType                               string     `protobuf:"bytes,8,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	OrderCanceled                           bool       `protobuf:"varint,9,opt,name=order_canceled,json=orderCanceled,proto3" json:"order_canceled,omitempty"`
	OrderFlagged                            bool       `protobuf:"varint,10,opt,name=order_flagged,json=orderFlagged,proto3" json:"order_flagged,omitempty"`
	OrderConfirmationNumber                 string     `protobuf:"bytes,11,opt,name=order_confirmation_number,json=orderConfirmationNumber,proto3" json:"order_confirmation_number,omitempty"`
	OrderStatus                             string     `protobuf:"bytes,12,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	OrderKitStatus                          string     `protobuf:"bytes,13,opt,name=order_kit_status,json=orderKitStatus,proto3" json:"order_kit_status,omitempty"`
	OrderReportStatus                       string     `protobuf:"bytes,14,opt,name=order_report_status,json=orderReportStatus,proto3" json:"order_report_status,omitempty"`
	BillingOrderId                          string     `protobuf:"bytes,15,opt,name=billing_order_id,json=billingOrderId,proto3" json:"billing_order_id,omitempty"`
	OrderTnpIssueStatus                     string     `protobuf:"bytes,16,opt,name=order_tnp_issue_status,json=orderTnpIssueStatus,proto3" json:"order_tnp_issue_status,omitempty"`
	OrderBillingIssueStatus                 string     `protobuf:"bytes,17,opt,name=order_billing_issue_status,json=orderBillingIssueStatus,proto3" json:"order_billing_issue_status,omitempty"`
	OrderShippingIssueStatus                string     `protobuf:"bytes,18,opt,name=order_shipping_issue_status,json=orderShippingIssueStatus,proto3" json:"order_shipping_issue_status,omitempty"`
	OrderMissingInfoIssueStatus             string     `protobuf:"bytes,19,opt,name=order_missing_info_issue_status,json=orderMissingInfoIssueStatus,proto3" json:"order_missing_info_issue_status,omitempty"`
	OrderReceiveIssueStatus                 string     `protobuf:"bytes,20,opt,name=order_receive_issue_status,json=orderReceiveIssueStatus,proto3" json:"order_receive_issue_status,omitempty"`
	ClinicId                                int32      `protobuf:"varint,21,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	OrderIncompleteQuestionnaireIssueStatus string     `protobuf:"bytes,22,opt,name=order_incomplete_questionnaire_issue_status,json=orderIncompleteQuestionnaireIssueStatus,proto3" json:"order_incomplete_questionnaire_issue_status,omitempty"`
	OrderNyWaiveFormIssueStatus             string     `protobuf:"bytes,23,opt,name=order_ny_waive_form_issue_status,json=orderNyWaiveFormIssueStatus,proto3" json:"order_ny_waive_form_issue_status,omitempty"`
	OrderProcessingTime                     string     `protobuf:"bytes,24,opt,name=order_processing_time,json=orderProcessingTime,proto3" json:"order_processing_time,omitempty"`
	OrderLabIssueStatus                     string     `protobuf:"bytes,25,opt,name=order_lab_issue_status,json=orderLabIssueStatus,proto3" json:"order_lab_issue_status,omitempty"`
	OrderMajorStatus                        string     `protobuf:"bytes,26,opt,name=order_major_status,json=orderMajorStatus,proto3" json:"order_major_status,omitempty"`
	OrderServiceTime                        string     `protobuf:"bytes,27,opt,name=order_service_time,json=orderServiceTime,proto3" json:"order_service_time,omitempty"`
}

func (x *InitialPatientPageOrderMinimum) Reset() {
	*x = InitialPatientPageOrderMinimum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialPatientPageOrderMinimum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialPatientPageOrderMinimum) ProtoMessage() {}

func (x *InitialPatientPageOrderMinimum) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialPatientPageOrderMinimum.ProtoReflect.Descriptor instead.
func (*InitialPatientPageOrderMinimum) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{7}
}

func (x *InitialPatientPageOrderMinimum) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *InitialPatientPageOrderMinimum) GetSamples() []*Samples {
	if x != nil {
		return x.Samples
	}
	return nil
}

func (x *InitialPatientPageOrderMinimum) GetOrderTitle() string {
	if x != nil {
		return x.OrderTitle
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetOrderDescription() string {
	if x != nil {
		return x.OrderDescription
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetOrderCreateTime() string {
	if x != nil {
		return x.OrderCreateTime
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *InitialPatientPageOrderMinimum) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *InitialPatientPageOrderMinimum) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetOrderCanceled() bool {
	if x != nil {
		return x.OrderCanceled
	}
	return false
}

func (x *InitialPatientPageOrderMinimum) GetOrderFlagged() bool {
	if x != nil {
		return x.OrderFlagged
	}
	return false
}

func (x *InitialPatientPageOrderMinimum) GetOrderConfirmationNumber() string {
	if x != nil {
		return x.OrderConfirmationNumber
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetOrderStatus() string {
	if x != nil {
		return x.OrderStatus
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetOrderKitStatus() string {
	if x != nil {
		return x.OrderKitStatus
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetOrderReportStatus() string {
	if x != nil {
		return x.OrderReportStatus
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetBillingOrderId() string {
	if x != nil {
		return x.BillingOrderId
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetOrderTnpIssueStatus() string {
	if x != nil {
		return x.OrderTnpIssueStatus
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetOrderBillingIssueStatus() string {
	if x != nil {
		return x.OrderBillingIssueStatus
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetOrderShippingIssueStatus() string {
	if x != nil {
		return x.OrderShippingIssueStatus
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetOrderMissingInfoIssueStatus() string {
	if x != nil {
		return x.OrderMissingInfoIssueStatus
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetOrderReceiveIssueStatus() string {
	if x != nil {
		return x.OrderReceiveIssueStatus
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *InitialPatientPageOrderMinimum) GetOrderIncompleteQuestionnaireIssueStatus() string {
	if x != nil {
		return x.OrderIncompleteQuestionnaireIssueStatus
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetOrderNyWaiveFormIssueStatus() string {
	if x != nil {
		return x.OrderNyWaiveFormIssueStatus
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetOrderProcessingTime() string {
	if x != nil {
		return x.OrderProcessingTime
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetOrderLabIssueStatus() string {
	if x != nil {
		return x.OrderLabIssueStatus
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetOrderMajorStatus() string {
	if x != nil {
		return x.OrderMajorStatus
	}
	return ""
}

func (x *InitialPatientPageOrderMinimum) GetOrderServiceTime() string {
	if x != nil {
		return x.OrderServiceTime
	}
	return ""
}

type OrderFlagsMinimum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderFlagName     string `protobuf:"bytes,1,opt,name=order_flag_name,json=orderFlagName,proto3" json:"order_flag_name,omitempty"`
	OrderFlagCategory string `protobuf:"bytes,2,opt,name=order_flag_category,json=orderFlagCategory,proto3" json:"order_flag_category,omitempty"`
	OrderFlagLevel    int32  `protobuf:"varint,3,opt,name=order_flag_level,json=orderFlagLevel,proto3" json:"order_flag_level,omitempty"`
}

func (x *OrderFlagsMinimum) Reset() {
	*x = OrderFlagsMinimum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderFlagsMinimum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderFlagsMinimum) ProtoMessage() {}

func (x *OrderFlagsMinimum) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderFlagsMinimum.ProtoReflect.Descriptor instead.
func (*OrderFlagsMinimum) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{8}
}

func (x *OrderFlagsMinimum) GetOrderFlagName() string {
	if x != nil {
		return x.OrderFlagName
	}
	return ""
}

func (x *OrderFlagsMinimum) GetOrderFlagCategory() string {
	if x != nil {
		return x.OrderFlagCategory
	}
	return ""
}

func (x *OrderFlagsMinimum) GetOrderFlagLevel() int32 {
	if x != nil {
		return x.OrderFlagLevel
	}
	return 0
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId                                 int32         `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Samples                                 []*Samples    `protobuf:"bytes,2,rep,name=samples,proto3" json:"samples,omitempty"`
	OrderTitle                              string        `protobuf:"bytes,3,opt,name=order_title,json=orderTitle,proto3" json:"order_title,omitempty"`
	OrderDescription                        string        `protobuf:"bytes,4,opt,name=order_description,json=orderDescription,proto3" json:"order_description,omitempty"`
	OrderCreateTime                         string        `protobuf:"bytes,5,opt,name=order_create_time,json=orderCreateTime,proto3" json:"order_create_time,omitempty"`
	IsActive                                bool          `protobuf:"varint,6,opt,name=isActive,proto3" json:"isActive,omitempty"`
	CustomerId                              int32         `protobuf:"varint,7,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	OrderType                               string        `protobuf:"bytes,8,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	OrderCanceled                           bool          `protobuf:"varint,9,opt,name=order_canceled,json=orderCanceled,proto3" json:"order_canceled,omitempty"`
	OrderFlagged                            bool          `protobuf:"varint,10,opt,name=order_flagged,json=orderFlagged,proto3" json:"order_flagged,omitempty"`
	OrderFlags                              []*OrderFlags `protobuf:"bytes,11,rep,name=order_flags,json=orderFlags,proto3" json:"order_flags,omitempty"`
	OrderConfirmationNumber                 string        `protobuf:"bytes,12,opt,name=order_confirmation_number,json=orderConfirmationNumber,proto3" json:"order_confirmation_number,omitempty"`
	OrderStatus                             string        `protobuf:"bytes,13,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	BillingOrderId                          string        `protobuf:"bytes,14,opt,name=billing_order_id,json=billingOrderId,proto3" json:"billing_order_id,omitempty"`
	OrderKitStatus                          string        `protobuf:"bytes,15,opt,name=order_kit_status,json=orderKitStatus,proto3" json:"order_kit_status,omitempty"`
	OrderReportStatus                       string        `protobuf:"bytes,16,opt,name=order_report_status,json=orderReportStatus,proto3" json:"order_report_status,omitempty"`
	OrderTnpIssueStatus                     string        `protobuf:"bytes,17,opt,name=order_tnp_issue_status,json=orderTnpIssueStatus,proto3" json:"order_tnp_issue_status,omitempty"`
	OrderBillingIssueStatus                 string        `protobuf:"bytes,18,opt,name=order_billing_issue_status,json=orderBillingIssueStatus,proto3" json:"order_billing_issue_status,omitempty"`
	OrderShippingIssueStatus                string        `protobuf:"bytes,19,opt,name=order_shipping_issue_status,json=orderShippingIssueStatus,proto3" json:"order_shipping_issue_status,omitempty"`
	OrderMissingInfoIssueStatus             string        `protobuf:"bytes,20,opt,name=order_missing_info_issue_status,json=orderMissingInfoIssueStatus,proto3" json:"order_missing_info_issue_status,omitempty"`
	OrderReceiveIssueStatus                 string        `protobuf:"bytes,21,opt,name=order_receive_issue_status,json=orderReceiveIssueStatus,proto3" json:"order_receive_issue_status,omitempty"`
	ClinicId                                int32         `protobuf:"varint,22,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	OrderIncompleteQuestionnaireIssueStatus string        `protobuf:"bytes,23,opt,name=order_incomplete_questionnaire_issue_status,json=orderIncompleteQuestionnaireIssueStatus,proto3" json:"order_incomplete_questionnaire_issue_status,omitempty"`
	OrderNyWaiveFormIssueStatus             string        `protobuf:"bytes,24,opt,name=order_ny_waive_form_issue_status,json=orderNyWaiveFormIssueStatus,proto3" json:"order_ny_waive_form_issue_status,omitempty"`
	OrderServiceTime                        string        `protobuf:"bytes,25,opt,name=order_service_time,json=orderServiceTime,proto3" json:"order_service_time,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{9}
}

func (x *Order) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *Order) GetSamples() []*Samples {
	if x != nil {
		return x.Samples
	}
	return nil
}

func (x *Order) GetOrderTitle() string {
	if x != nil {
		return x.OrderTitle
	}
	return ""
}

func (x *Order) GetOrderDescription() string {
	if x != nil {
		return x.OrderDescription
	}
	return ""
}

func (x *Order) GetOrderCreateTime() string {
	if x != nil {
		return x.OrderCreateTime
	}
	return ""
}

func (x *Order) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Order) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *Order) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *Order) GetOrderCanceled() bool {
	if x != nil {
		return x.OrderCanceled
	}
	return false
}

func (x *Order) GetOrderFlagged() bool {
	if x != nil {
		return x.OrderFlagged
	}
	return false
}

func (x *Order) GetOrderFlags() []*OrderFlags {
	if x != nil {
		return x.OrderFlags
	}
	return nil
}

func (x *Order) GetOrderConfirmationNumber() string {
	if x != nil {
		return x.OrderConfirmationNumber
	}
	return ""
}

func (x *Order) GetOrderStatus() string {
	if x != nil {
		return x.OrderStatus
	}
	return ""
}

func (x *Order) GetBillingOrderId() string {
	if x != nil {
		return x.BillingOrderId
	}
	return ""
}

func (x *Order) GetOrderKitStatus() string {
	if x != nil {
		return x.OrderKitStatus
	}
	return ""
}

func (x *Order) GetOrderReportStatus() string {
	if x != nil {
		return x.OrderReportStatus
	}
	return ""
}

func (x *Order) GetOrderTnpIssueStatus() string {
	if x != nil {
		return x.OrderTnpIssueStatus
	}
	return ""
}

func (x *Order) GetOrderBillingIssueStatus() string {
	if x != nil {
		return x.OrderBillingIssueStatus
	}
	return ""
}

func (x *Order) GetOrderShippingIssueStatus() string {
	if x != nil {
		return x.OrderShippingIssueStatus
	}
	return ""
}

func (x *Order) GetOrderMissingInfoIssueStatus() string {
	if x != nil {
		return x.OrderMissingInfoIssueStatus
	}
	return ""
}

func (x *Order) GetOrderReceiveIssueStatus() string {
	if x != nil {
		return x.OrderReceiveIssueStatus
	}
	return ""
}

func (x *Order) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *Order) GetOrderIncompleteQuestionnaireIssueStatus() string {
	if x != nil {
		return x.OrderIncompleteQuestionnaireIssueStatus
	}
	return ""
}

func (x *Order) GetOrderNyWaiveFormIssueStatus() string {
	if x != nil {
		return x.OrderNyWaiveFormIssueStatus
	}
	return ""
}

func (x *Order) GetOrderServiceTime() string {
	if x != nil {
		return x.OrderServiceTime
	}
	return ""
}

type OrderSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId                 int32  `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderTitle              string `protobuf:"bytes,2,opt,name=order_title,json=orderTitle,proto3" json:"order_title,omitempty"`
	OrderDescription        string `protobuf:"bytes,3,opt,name=order_description,json=orderDescription,proto3" json:"order_description,omitempty"`
	OrderComfirmationNumber string `protobuf:"bytes,4,opt,name=order_comfirmation_number,json=orderComfirmationNumber,proto3" json:"order_comfirmation_number,omitempty"`
	AddressId               int32  `protobuf:"varint,5,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	ContactId               int32  `protobuf:"varint,6,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	CustomerId              int32  `protobuf:"varint,7,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	OrderCreateTime         string `protobuf:"bytes,8,opt,name=order_create_time,json=orderCreateTime,proto3" json:"order_create_time,omitempty"`
	IsActive                bool   `protobuf:"varint,9,opt,name=isActive,proto3" json:"isActive,omitempty"`
	HasOrderSetting         bool   `protobuf:"varint,10,opt,name=has_order_setting,json=hasOrderSetting,proto3" json:"has_order_setting,omitempty"`
	OrderStatus             string `protobuf:"bytes,11,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	BillingOrderId          string `protobuf:"bytes,12,opt,name=billing_order_id,json=billingOrderId,proto3" json:"billing_order_id,omitempty"`
}

func (x *OrderSample) Reset() {
	*x = OrderSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderSample) ProtoMessage() {}

func (x *OrderSample) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderSample.ProtoReflect.Descriptor instead.
func (*OrderSample) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{10}
}

func (x *OrderSample) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *OrderSample) GetOrderTitle() string {
	if x != nil {
		return x.OrderTitle
	}
	return ""
}

func (x *OrderSample) GetOrderDescription() string {
	if x != nil {
		return x.OrderDescription
	}
	return ""
}

func (x *OrderSample) GetOrderComfirmationNumber() string {
	if x != nil {
		return x.OrderComfirmationNumber
	}
	return ""
}

func (x *OrderSample) GetAddressId() int32 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *OrderSample) GetContactId() int32 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *OrderSample) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *OrderSample) GetOrderCreateTime() string {
	if x != nil {
		return x.OrderCreateTime
	}
	return ""
}

func (x *OrderSample) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *OrderSample) GetHasOrderSetting() bool {
	if x != nil {
		return x.HasOrderSetting
	}
	return false
}

func (x *OrderSample) GetOrderStatus() string {
	if x != nil {
		return x.OrderStatus
	}
	return ""
}

func (x *OrderSample) GetBillingOrderId() string {
	if x != nil {
		return x.BillingOrderId
	}
	return ""
}

type AddOrderFlagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderFlagName                             string `protobuf:"bytes,1,opt,name=order_flag_name,json=orderFlagName,proto3" json:"order_flag_name,omitempty"`
	OrderFlagDescription                      string `protobuf:"bytes,2,opt,name=order_flag_description,json=orderFlagDescription,proto3" json:"order_flag_description,omitempty"`
	OrderFlagAllowDuplicatesUnderSameCategory bool   `protobuf:"varint,3,opt,name=order_flag_allow_duplicates_under_same_category,json=orderFlagAllowDuplicatesUnderSameCategory,proto3" json:"order_flag_allow_duplicates_under_same_category,omitempty"`
	OrderFlagCategory                         string `protobuf:"bytes,4,opt,name=order_flag_category,json=orderFlagCategory,proto3" json:"order_flag_category,omitempty"`
	OrderFlagedBy                             string `protobuf:"bytes,5,opt,name=order_flaged_by,json=orderFlagedBy,proto3" json:"order_flaged_by,omitempty"`
}

func (x *AddOrderFlagRequest) Reset() {
	*x = AddOrderFlagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrderFlagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrderFlagRequest) ProtoMessage() {}

func (x *AddOrderFlagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrderFlagRequest.ProtoReflect.Descriptor instead.
func (*AddOrderFlagRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{11}
}

func (x *AddOrderFlagRequest) GetOrderFlagName() string {
	if x != nil {
		return x.OrderFlagName
	}
	return ""
}

func (x *AddOrderFlagRequest) GetOrderFlagDescription() string {
	if x != nil {
		return x.OrderFlagDescription
	}
	return ""
}

func (x *AddOrderFlagRequest) GetOrderFlagAllowDuplicatesUnderSameCategory() bool {
	if x != nil {
		return x.OrderFlagAllowDuplicatesUnderSameCategory
	}
	return false
}

func (x *AddOrderFlagRequest) GetOrderFlagCategory() string {
	if x != nil {
		return x.OrderFlagCategory
	}
	return ""
}

func (x *AddOrderFlagRequest) GetOrderFlagedBy() string {
	if x != nil {
		return x.OrderFlagedBy
	}
	return ""
}

type AddOrderFlagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderFlagId                               int32  `protobuf:"varint,1,opt,name=order_flag_id,json=orderFlagId,proto3" json:"order_flag_id,omitempty"`
	OrderFlagName                             string `protobuf:"bytes,2,opt,name=order_flag_name,json=orderFlagName,proto3" json:"order_flag_name,omitempty"`
	OrderFlagDescription                      string `protobuf:"bytes,3,opt,name=order_flag_description,json=orderFlagDescription,proto3" json:"order_flag_description,omitempty"`
	OrderFlagColor                            string `protobuf:"bytes,4,opt,name=order_flag_color,json=orderFlagColor,proto3" json:"order_flag_color,omitempty"`
	OrderFlagIsActive                         bool   `protobuf:"varint,5,opt,name=order_flag_is_active,json=orderFlagIsActive,proto3" json:"order_flag_is_active,omitempty"`
	OrderFlagCreatedAt                        string `protobuf:"bytes,6,opt,name=order_flag_created_at,json=orderFlagCreatedAt,proto3" json:"order_flag_created_at,omitempty"`
	OrderFlagAllowDuplicatesUnderSameCategory bool   `protobuf:"varint,7,opt,name=order_flag_allow_duplicates_under_same_category,json=orderFlagAllowDuplicatesUnderSameCategory,proto3" json:"order_flag_allow_duplicates_under_same_category,omitempty"`
	OrderFlagCategory                         string `protobuf:"bytes,8,opt,name=order_flag_category,json=orderFlagCategory,proto3" json:"order_flag_category,omitempty"`
	OrderFlagedBy                             string `protobuf:"bytes,9,opt,name=order_flaged_by,json=orderFlagedBy,proto3" json:"order_flaged_by,omitempty"`
}

func (x *AddOrderFlagResponse) Reset() {
	*x = AddOrderFlagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrderFlagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrderFlagResponse) ProtoMessage() {}

func (x *AddOrderFlagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrderFlagResponse.ProtoReflect.Descriptor instead.
func (*AddOrderFlagResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{12}
}

func (x *AddOrderFlagResponse) GetOrderFlagId() int32 {
	if x != nil {
		return x.OrderFlagId
	}
	return 0
}

func (x *AddOrderFlagResponse) GetOrderFlagName() string {
	if x != nil {
		return x.OrderFlagName
	}
	return ""
}

func (x *AddOrderFlagResponse) GetOrderFlagDescription() string {
	if x != nil {
		return x.OrderFlagDescription
	}
	return ""
}

func (x *AddOrderFlagResponse) GetOrderFlagColor() string {
	if x != nil {
		return x.OrderFlagColor
	}
	return ""
}

func (x *AddOrderFlagResponse) GetOrderFlagIsActive() bool {
	if x != nil {
		return x.OrderFlagIsActive
	}
	return false
}

func (x *AddOrderFlagResponse) GetOrderFlagCreatedAt() string {
	if x != nil {
		return x.OrderFlagCreatedAt
	}
	return ""
}

func (x *AddOrderFlagResponse) GetOrderFlagAllowDuplicatesUnderSameCategory() bool {
	if x != nil {
		return x.OrderFlagAllowDuplicatesUnderSameCategory
	}
	return false
}

func (x *AddOrderFlagResponse) GetOrderFlagCategory() string {
	if x != nil {
		return x.OrderFlagCategory
	}
	return ""
}

func (x *AddOrderFlagResponse) GetOrderFlagedBy() string {
	if x != nil {
		return x.OrderFlagedBy
	}
	return ""
}

type FlagOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId        string   `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderFlagNames []string `protobuf:"bytes,2,rep,name=order_flag_names,json=orderFlagNames,proto3" json:"order_flag_names,omitempty"`
}

func (x *FlagOrderRequest) Reset() {
	*x = FlagOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagOrderRequest) ProtoMessage() {}

func (x *FlagOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagOrderRequest.ProtoReflect.Descriptor instead.
func (*FlagOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{13}
}

func (x *FlagOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *FlagOrderRequest) GetOrderFlagNames() []string {
	if x != nil {
		return x.OrderFlagNames
	}
	return nil
}

type UnflagOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId        string   `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderFlagNames []string `protobuf:"bytes,2,rep,name=order_flag_names,json=orderFlagNames,proto3" json:"order_flag_names,omitempty"`
}

func (x *UnflagOrderRequest) Reset() {
	*x = UnflagOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnflagOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnflagOrderRequest) ProtoMessage() {}

func (x *UnflagOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnflagOrderRequest.ProtoReflect.Descriptor instead.
func (*UnflagOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{14}
}

func (x *UnflagOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *UnflagOrderRequest) GetOrderFlagNames() []string {
	if x != nil {
		return x.OrderFlagNames
	}
	return nil
}

type UnflagOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId          string        `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderFlagged     bool          `protobuf:"varint,2,opt,name=order_flagged,json=orderFlagged,proto3" json:"order_flagged,omitempty"`
	OrderFlags       []*OrderFlags `protobuf:"bytes,3,rep,name=order_flags,json=orderFlags,proto3" json:"order_flags,omitempty"`
	OrderTitle       string        `protobuf:"bytes,4,opt,name=order_title,json=orderTitle,proto3" json:"order_title,omitempty"`
	OrderDescription string        `protobuf:"bytes,5,opt,name=order_description,json=orderDescription,proto3" json:"order_description,omitempty"`
	OrderCreateTime  string        `protobuf:"bytes,6,opt,name=order_create_time,json=orderCreateTime,proto3" json:"order_create_time,omitempty"`
}

func (x *UnflagOrderResponse) Reset() {
	*x = UnflagOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnflagOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnflagOrderResponse) ProtoMessage() {}

func (x *UnflagOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnflagOrderResponse.ProtoReflect.Descriptor instead.
func (*UnflagOrderResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{15}
}

func (x *UnflagOrderResponse) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *UnflagOrderResponse) GetOrderFlagged() bool {
	if x != nil {
		return x.OrderFlagged
	}
	return false
}

func (x *UnflagOrderResponse) GetOrderFlags() []*OrderFlags {
	if x != nil {
		return x.OrderFlags
	}
	return nil
}

func (x *UnflagOrderResponse) GetOrderTitle() string {
	if x != nil {
		return x.OrderTitle
	}
	return ""
}

func (x *UnflagOrderResponse) GetOrderDescription() string {
	if x != nil {
		return x.OrderDescription
	}
	return ""
}

func (x *UnflagOrderResponse) GetOrderCreateTime() string {
	if x != nil {
		return x.OrderCreateTime
	}
	return ""
}

type FlagOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId          string        `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderFlagged     bool          `protobuf:"varint,2,opt,name=order_flagged,json=orderFlagged,proto3" json:"order_flagged,omitempty"`
	OrderFlags       []*OrderFlags `protobuf:"bytes,3,rep,name=order_flags,json=orderFlags,proto3" json:"order_flags,omitempty"`
	OrderTitle       string        `protobuf:"bytes,4,opt,name=order_title,json=orderTitle,proto3" json:"order_title,omitempty"`
	OrderDescription string        `protobuf:"bytes,5,opt,name=order_description,json=orderDescription,proto3" json:"order_description,omitempty"`
	OrderCreateTime  string        `protobuf:"bytes,6,opt,name=order_create_time,json=orderCreateTime,proto3" json:"order_create_time,omitempty"`
}

func (x *FlagOrderResponse) Reset() {
	*x = FlagOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagOrderResponse) ProtoMessage() {}

func (x *FlagOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagOrderResponse.ProtoReflect.Descriptor instead.
func (*FlagOrderResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{16}
}

func (x *FlagOrderResponse) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *FlagOrderResponse) GetOrderFlagged() bool {
	if x != nil {
		return x.OrderFlagged
	}
	return false
}

func (x *FlagOrderResponse) GetOrderFlags() []*OrderFlags {
	if x != nil {
		return x.OrderFlags
	}
	return nil
}

func (x *FlagOrderResponse) GetOrderTitle() string {
	if x != nil {
		return x.OrderTitle
	}
	return ""
}

func (x *FlagOrderResponse) GetOrderDescription() string {
	if x != nil {
		return x.OrderDescription
	}
	return ""
}

func (x *FlagOrderResponse) GetOrderCreateTime() string {
	if x != nil {
		return x.OrderCreateTime
	}
	return ""
}

type ListOrderFlagTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *ListOrderFlagTypesRequest) Reset() {
	*x = ListOrderFlagTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrderFlagTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrderFlagTypesRequest) ProtoMessage() {}

func (x *ListOrderFlagTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrderFlagTypesRequest.ProtoReflect.Descriptor instead.
func (*ListOrderFlagTypesRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListOrderFlagTypesRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

type ListOrderFlagTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderFlags []*AddOrderFlagResponse `protobuf:"bytes,1,rep,name=order_flags,json=orderFlags,proto3" json:"order_flags,omitempty"`
}

func (x *ListOrderFlagTypesResponse) Reset() {
	*x = ListOrderFlagTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrderFlagTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrderFlagTypesResponse) ProtoMessage() {}

func (x *ListOrderFlagTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrderFlagTypesResponse.ProtoReflect.Descriptor instead.
func (*ListOrderFlagTypesResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{18}
}

func (x *ListOrderFlagTypesResponse) GetOrderFlags() []*AddOrderFlagResponse {
	if x != nil {
		return x.OrderFlags
	}
	return nil
}

type OrderFlagDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderFlagName        string `protobuf:"bytes,1,opt,name=order_flag_name,json=orderFlagName,proto3" json:"order_flag_name,omitempty"`
	OrderFlagDisplayName string `protobuf:"bytes,2,opt,name=order_flag_display_name,json=orderFlagDisplayName,proto3" json:"order_flag_display_name,omitempty"`
}

func (x *OrderFlagDisplay) Reset() {
	*x = OrderFlagDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderFlagDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderFlagDisplay) ProtoMessage() {}

func (x *OrderFlagDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderFlagDisplay.ProtoReflect.Descriptor instead.
func (*OrderFlagDisplay) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{19}
}

func (x *OrderFlagDisplay) GetOrderFlagName() string {
	if x != nil {
		return x.OrderFlagName
	}
	return ""
}

func (x *OrderFlagDisplay) GetOrderFlagDisplayName() string {
	if x != nil {
		return x.OrderFlagDisplayName
	}
	return ""
}

type PatientFlagDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatientFlagName        string `protobuf:"bytes,1,opt,name=patient_flag_name,json=patientFlagName,proto3" json:"patient_flag_name,omitempty"`
	PatientFlagDisplayName string `protobuf:"bytes,2,opt,name=patient_flag_display_name,json=patientFlagDisplayName,proto3" json:"patient_flag_display_name,omitempty"`
}

func (x *PatientFlagDisplay) Reset() {
	*x = PatientFlagDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientFlagDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientFlagDisplay) ProtoMessage() {}

func (x *PatientFlagDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientFlagDisplay.ProtoReflect.Descriptor instead.
func (*PatientFlagDisplay) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{20}
}

func (x *PatientFlagDisplay) GetPatientFlagName() string {
	if x != nil {
		return x.PatientFlagName
	}
	return ""
}

func (x *PatientFlagDisplay) GetPatientFlagDisplayName() string {
	if x != nil {
		return x.PatientFlagDisplayName
	}
	return ""
}

type GetOrderStatusDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrderStatusDisplay) Reset() {
	*x = GetOrderStatusDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderStatusDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderStatusDisplay) ProtoMessage() {}

func (x *GetOrderStatusDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderStatusDisplay.ProtoReflect.Descriptor instead.
func (*GetOrderStatusDisplay) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetOrderStatusDisplay) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type GetOrderStatusDisplayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderFlag   []*OrderFlagDisplay   `protobuf:"bytes,1,rep,name=order_flag,json=orderFlag,proto3" json:"order_flag,omitempty"`
	PatientFlag []*PatientFlagDisplay `protobuf:"bytes,2,rep,name=patient_flag,json=patientFlag,proto3" json:"patient_flag,omitempty"`
}

func (x *GetOrderStatusDisplayResponse) Reset() {
	*x = GetOrderStatusDisplayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderStatusDisplayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderStatusDisplayResponse) ProtoMessage() {}

func (x *GetOrderStatusDisplayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderStatusDisplayResponse.ProtoReflect.Descriptor instead.
func (*GetOrderStatusDisplayResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{22}
}

func (x *GetOrderStatusDisplayResponse) GetOrderFlag() []*OrderFlagDisplay {
	if x != nil {
		return x.OrderFlag
	}
	return nil
}

func (x *GetOrderStatusDisplayResponse) GetPatientFlag() []*PatientFlagDisplay {
	if x != nil {
		return x.PatientFlag
	}
	return nil
}

type RestoreOrderStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JwtToken string `protobuf:"bytes,1,opt,name=jwt_token,json=jwtToken,proto3" json:"jwt_token,omitempty"`
	SampleId string `protobuf:"bytes,2,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
}

func (x *RestoreOrderStatusRequest) Reset() {
	*x = RestoreOrderStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreOrderStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreOrderStatusRequest) ProtoMessage() {}

func (x *RestoreOrderStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreOrderStatusRequest.ProtoReflect.Descriptor instead.
func (*RestoreOrderStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{23}
}

func (x *RestoreOrderStatusRequest) GetJwtToken() string {
	if x != nil {
		return x.JwtToken
	}
	return ""
}

func (x *RestoreOrderStatusRequest) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

type RestoreOrderStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RestoreOrderStatusResponse) Reset() {
	*x = RestoreOrderStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreOrderStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreOrderStatusResponse) ProtoMessage() {}

func (x *RestoreOrderStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreOrderStatusResponse.ProtoReflect.Descriptor instead.
func (*RestoreOrderStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{24}
}

func (x *RestoreOrderStatusResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RestoreOrderStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateOrderKitStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessionId string `protobuf:"bytes,1,opt,name=accession_id,json=accessionId,proto3" json:"accession_id,omitempty"`
	KitStatus   string `protobuf:"bytes,2,opt,name=kit_status,json=kitStatus,proto3" json:"kit_status,omitempty"`
}

func (x *UpdateOrderKitStatusRequest) Reset() {
	*x = UpdateOrderKitStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderKitStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderKitStatusRequest) ProtoMessage() {}

func (x *UpdateOrderKitStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderKitStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrderKitStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_service_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateOrderKitStatusRequest) GetAccessionId() string {
	if x != nil {
		return x.AccessionId
	}
	return ""
}

func (x *UpdateOrderKitStatusRequest) GetKitStatus() string {
	if x != nil {
		return x.KitStatus
	}
	return ""
}

var File_proto_order_service_proto protoreflect.FileDescriptor

var file_proto_order_service_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x51, 0x0a, 0x17, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x73, 0x22, 0x73, 0x0a, 0x18, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x22, 0x4d, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd8, 0x03, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x19, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x68, 0x61, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x49, 0x64, 0x22, 0xfc, 0x03, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x23, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0xf2, 0x04, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x22, 0xb3, 0x0a, 0x0a, 0x1e,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4b, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x6e, 0x70, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6e, 0x70,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a,
	0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x2b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x27, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x79, 0x5f, 0x77, 0x61, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x79, 0x57, 0x61, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x5f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xc5, 0x09, 0x0a, 0x05, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x07, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4b, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a,
	0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6e, 0x70, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x6e, 0x70, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3d, 0x0a, 0x1b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44,
	0x0a, 0x1f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x5c,
	0x0a, 0x2b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x27, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x20,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x79, 0x5f, 0x77, 0x61, 0x69, 0x76, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x79, 0x57,
	0x61, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xd2, 0x03, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xaf, 0x02, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c,
	0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61,
	0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x2f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x29, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x65, 0x64, 0x42, 0x79, 0x22, 0xe2, 0x03, 0x0a, 0x14, 0x41, 0x64, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46,
	0x6c, 0x61, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2f, 0x0a,
	0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x31,
	0x0a, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x62, 0x0a, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x29, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x46, 0x6c, 0x61, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x65, 0x64, 0x42, 0x79, 0x22, 0x57, 0x0a,
	0x10, 0x46, 0x6c, 0x61, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x12, 0x55, 0x6e, 0x66, 0x6c, 0x61, 0x67,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x91, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x66, 0x6c, 0x61, 0x67, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x11, 0x46, 0x6c, 0x61, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22,
	0x73, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x14, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xb5, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x4c, 0x0a, 0x0c, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x0b, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x55, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x77, 0x74, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x77, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x4a, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5f, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6b, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6b, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x80, 0x09, 0x0a,
	0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x14, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x65, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x09, 0x46, 0x6c, 0x61, 0x67,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0b, 0x55, 0x6e, 0x66, 0x6c, 0x61, 0x67,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x66, 0x6c,
	0x61, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x66, 0x6c, 0x61, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x1a, 0x32, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x10, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x72, 0x75, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x72, 0x75,
	0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_order_service_proto_rawDescOnce sync.Once
	file_proto_order_service_proto_rawDescData = file_proto_order_service_proto_rawDesc
)

func file_proto_order_service_proto_rawDescGZIP() []byte {
	file_proto_order_service_proto_rawDescOnce.Do(func() {
		file_proto_order_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_order_service_proto_rawDescData)
	})
	return file_proto_order_service_proto_rawDescData
}

var file_proto_order_service_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_proto_order_service_proto_goTypes = []interface{}{
	(*RerunSampleTestsRequest)(nil),        // 0: coresamples_service.RerunSampleTestsRequest
	(*RerunSampleTestsResponse)(nil),       // 1: coresamples_service.RerunSampleTestsResponse
	(*ChangeOrderStatusRequest)(nil),       // 2: coresamples_service.ChangeOrderStatusRequest
	(*CancelOrderResponse)(nil),            // 3: coresamples_service.CancelOrderResponse
	(*RestoreOrderResponse)(nil),           // 4: coresamples_service.RestoreOrderResponse
	(*OrderID)(nil),                        // 5: coresamples_service.OrderID
	(*OrderMinimum)(nil),                   // 6: coresamples_service.OrderMinimum
	(*InitialPatientPageOrderMinimum)(nil), // 7: coresamples_service.InitialPatientPageOrderMinimum
	(*OrderFlagsMinimum)(nil),              // 8: coresamples_service.OrderFlagsMinimum
	(*Order)(nil),                          // 9: coresamples_service.Order
	(*OrderSample)(nil),                    // 10: coresamples_service.OrderSample
	(*AddOrderFlagRequest)(nil),            // 11: coresamples_service.AddOrderFlagRequest
	(*AddOrderFlagResponse)(nil),           // 12: coresamples_service.AddOrderFlagResponse
	(*FlagOrderRequest)(nil),               // 13: coresamples_service.FlagOrderRequest
	(*UnflagOrderRequest)(nil),             // 14: coresamples_service.UnflagOrderRequest
	(*UnflagOrderResponse)(nil),            // 15: coresamples_service.UnflagOrderResponse
	(*FlagOrderResponse)(nil),              // 16: coresamples_service.FlagOrderResponse
	(*ListOrderFlagTypesRequest)(nil),      // 17: coresamples_service.ListOrderFlagTypesRequest
	(*ListOrderFlagTypesResponse)(nil),     // 18: coresamples_service.ListOrderFlagTypesResponse
	(*OrderFlagDisplay)(nil),               // 19: coresamples_service.order_flag_display
	(*PatientFlagDisplay)(nil),             // 20: coresamples_service.patient_flag_display
	(*GetOrderStatusDisplay)(nil),          // 21: coresamples_service.GetOrderStatusDisplay
	(*GetOrderStatusDisplayResponse)(nil),  // 22: coresamples_service.GetOrderStatusDisplayResponse
	(*RestoreOrderStatusRequest)(nil),      // 23: coresamples_service.RestoreOrderStatusRequest
	(*RestoreOrderStatusResponse)(nil),     // 24: coresamples_service.RestoreOrderStatusResponse
	(*UpdateOrderKitStatusRequest)(nil),    // 25: coresamples_service.UpdateOrderKitStatusRequest
	(*Samples)(nil),                        // 26: coresamples_service.samples
	(*OrderFlags)(nil),                     // 27: coresamples_service.OrderFlags
}
var file_proto_order_service_proto_depIdxs = []int32{
	26, // 0: coresamples_service.OrderMinimum.samples:type_name -> coresamples_service.samples
	8,  // 1: coresamples_service.OrderMinimum.order_flags:type_name -> coresamples_service.OrderFlagsMinimum
	26, // 2: coresamples_service.InitialPatientPageOrderMinimum.samples:type_name -> coresamples_service.samples
	26, // 3: coresamples_service.Order.samples:type_name -> coresamples_service.samples
	27, // 4: coresamples_service.Order.order_flags:type_name -> coresamples_service.OrderFlags
	27, // 5: coresamples_service.UnflagOrderResponse.order_flags:type_name -> coresamples_service.OrderFlags
	27, // 6: coresamples_service.FlagOrderResponse.order_flags:type_name -> coresamples_service.OrderFlags
	12, // 7: coresamples_service.ListOrderFlagTypesResponse.order_flags:type_name -> coresamples_service.AddOrderFlagResponse
	19, // 8: coresamples_service.GetOrderStatusDisplayResponse.order_flag:type_name -> coresamples_service.order_flag_display
	20, // 9: coresamples_service.GetOrderStatusDisplayResponse.patient_flag:type_name -> coresamples_service.patient_flag_display
	5,  // 10: coresamples_service.OrderService.GetOrder:input_type -> coresamples_service.OrderID
	5,  // 11: coresamples_service.OrderService.CancelOrder:input_type -> coresamples_service.OrderID
	5,  // 12: coresamples_service.OrderService.RestoreCanceledOrder:input_type -> coresamples_service.OrderID
	11, // 13: coresamples_service.OrderService.AddOrderFlag:input_type -> coresamples_service.AddOrderFlagRequest
	13, // 14: coresamples_service.OrderService.FlagOrder:input_type -> coresamples_service.FlagOrderRequest
	14, // 15: coresamples_service.OrderService.UnflagOrder:input_type -> coresamples_service.UnflagOrderRequest
	17, // 16: coresamples_service.OrderService.ListOrderFlagTypes:input_type -> coresamples_service.ListOrderFlagTypesRequest
	2,  // 17: coresamples_service.OrderService.ChangeOrderStatus:input_type -> coresamples_service.ChangeOrderStatusRequest
	21, // 18: coresamples_service.OrderService.GetOrderStatusForDisplay:input_type -> coresamples_service.GetOrderStatusDisplay
	0,  // 19: coresamples_service.OrderService.RerunSampleTests:input_type -> coresamples_service.RerunSampleTestsRequest
	23, // 20: coresamples_service.OrderService.RestoreOrderStatus:input_type -> coresamples_service.RestoreOrderStatusRequest
	9,  // 21: coresamples_service.OrderService.GetOrder:output_type -> coresamples_service.Order
	3,  // 22: coresamples_service.OrderService.CancelOrder:output_type -> coresamples_service.CancelOrderResponse
	4,  // 23: coresamples_service.OrderService.RestoreCanceledOrder:output_type -> coresamples_service.RestoreOrderResponse
	12, // 24: coresamples_service.OrderService.AddOrderFlag:output_type -> coresamples_service.AddOrderFlagResponse
	16, // 25: coresamples_service.OrderService.FlagOrder:output_type -> coresamples_service.FlagOrderResponse
	15, // 26: coresamples_service.OrderService.UnflagOrder:output_type -> coresamples_service.UnflagOrderResponse
	18, // 27: coresamples_service.OrderService.ListOrderFlagTypes:output_type -> coresamples_service.ListOrderFlagTypesResponse
	9,  // 28: coresamples_service.OrderService.ChangeOrderStatus:output_type -> coresamples_service.Order
	22, // 29: coresamples_service.OrderService.GetOrderStatusForDisplay:output_type -> coresamples_service.GetOrderStatusDisplayResponse
	1,  // 30: coresamples_service.OrderService.RerunSampleTests:output_type -> coresamples_service.RerunSampleTestsResponse
	24, // 31: coresamples_service.OrderService.RestoreOrderStatus:output_type -> coresamples_service.RestoreOrderStatusResponse
	21, // [21:32] is the sub-list for method output_type
	10, // [10:21] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_proto_order_service_proto_init() }
func file_proto_order_service_proto_init() {
	if File_proto_order_service_proto != nil {
		return
	}
	file_proto_sample_service_proto_init()
	file_proto_panel_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_order_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RerunSampleTestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RerunSampleTestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeOrderStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderMinimum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialPatientPageOrderMinimum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderFlagsMinimum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrderFlagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrderFlagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnflagOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnflagOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrderFlagTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrderFlagTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderFlagDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientFlagDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderStatusDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderStatusDisplayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreOrderStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreOrderStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderKitStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_order_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_order_service_proto_goTypes,
		DependencyIndexes: file_proto_order_service_proto_depIdxs,
		MessageInfos:      file_proto_order_service_proto_msgTypes,
	}.Build()
	File_proto_order_service_proto = out.File
	file_proto_order_service_proto_rawDesc = nil
	file_proto_order_service_proto_goTypes = nil
	file_proto_order_service_proto_depIdxs = nil
}
