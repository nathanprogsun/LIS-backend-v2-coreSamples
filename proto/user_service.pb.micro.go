// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user_service.proto

package coresamples_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	LogIn(ctx context.Context, in *LogInRequest, opts ...client.CallOption) (*LogInResponse, error)
	GetUserInfoByRole(ctx context.Context, in *GetUserInfoByRoleRequest, opts ...client.CallOption) (*GetUserInfoByRoleResponse, error)
	UpdatePasswordByOldPassword(ctx context.Context, in *UpdatePasswordByOldPasswordRequest, opts ...client.CallOption) (*UpdateUserPasswordResponse, error)
	TransferLISTokenToPortal(ctx context.Context, in *TransferLISTokenToPortalRequest, opts ...client.CallOption) (*TransferLISTokenToPortalResponse, error)
	// 2FA
	Send2FATokenRequest(ctx context.Context, in *Send2FATokenRequestMessage, opts ...client.CallOption) (*Send2FATokenResponse, error)
	// ForgetPassword
	ForgetPasswordRequest(ctx context.Context, in *ForgetPasswordRequestRequest, opts ...client.CallOption) (*ForgetPasswordRequestResponse, error)
	ForgetPassword(ctx context.Context, in *ForgetPasswordRequestMessage, opts ...client.CallOption) (*ForgetPasswordVerifyResponse, error)
	TransferCustomerClinic(ctx context.Context, in *TransferCustomerClinicRequest, opts ...client.CallOption) (*TransferCustomerClinicResponse, error)
	SetUpEmailRequest(ctx context.Context, in *SetUpLoginEmailRequestRequest, opts ...client.CallOption) (*SetUpLoginEmailRequestResponse, error)
	VerifySetUpUserEmailLogIn(ctx context.Context, in *VerifySetUpUserEmailLogInRequest, opts ...client.CallOption) (*VerifySetUpUserEmailLogInResponse, error)
	IsEmailUsedAsLoginId(ctx context.Context, in *EmailRequest, opts ...client.CallOption) (*IsEmailUsedAsLoginIdResponse, error)
	InitialForgetPassword(ctx context.Context, in *InitialForgetPasswordRequest, opts ...client.CallOption) (*ForgetPasswordResponse, error)
	// Setting Page Enable 2FA
	SendVerify2FASetUpContactInfo(ctx context.Context, in *SendVerify2FASetUpContactInfoRequest, opts ...client.CallOption) (*SendVerify2FASetUpContactInfoResponse, error)
	Verify2FASetUpContactInfo(ctx context.Context, in *Verify2FASetUpContactRequest, opts ...client.CallOption) (*Verify2FASetUpContactResponse, error)
	TurnOn2FASettingPage(ctx context.Context, in *TurnOn2FASettingPageRequest, opts ...client.CallOption) (*TurnOn2FASettingPageResponse, error)
	Send2FAVerificationCode(ctx context.Context, in *Send2FAVerificationCodeRequest, opts ...client.CallOption) (*Send2FAVerificationCodeResponse, error)
	Verify2FAVerificationCode(ctx context.Context, in *Verify2FAVerificationCodeRequest, opts ...client.CallOption) (*Verify2FAVerificationResponse, error)
	TurnOff2FASettingPage(ctx context.Context, in *TurnOff2FASettingPageRequest, opts ...client.CallOption) (*TurnOff2FASettingPageResponse, error)
	GetUserInformation(ctx context.Context, in *GetUserInformationRequest, opts ...client.CallOption) (*GetUserInformationResponse, error)
	GetUser2FAContactInfo(ctx context.Context, in *GetUser2FAContactInfoRequest, opts ...client.CallOption) (*GetUser2FAContactInfoResponse, error)
	// Change Email
	ChangeUserEmailLogInID(ctx context.Context, in *UserChangeEmailRequest, opts ...client.CallOption) (*UserChangeEmailResponse, error)
	AdminUserLoginSearch(ctx context.Context, in *AdminLoginSearchRequest, opts ...client.CallOption) (*AdminLoginSearchResponse, error)
	AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...client.CallOption) (*AdminLoginResponse, error)
	RenewToken(ctx context.Context, in *RenewTokenRequest, opts ...client.CallOption) (*RenewTokenResponse, error)
	LISLogin(ctx context.Context, in *LogInRequest, opts ...client.CallOption) (*LogInResponse, error)
	CreateUserLogInForInvitedCustomer(ctx context.Context, in *CreateUserLogForInvitedCustomerRequest, opts ...client.CallOption) (*CreateUserLogForInvitedCustomerResponse, error)
	CheckWhetherEmailIsUsedAsLoginId(ctx context.Context, in *CheckWhetherEmailIsUsedAsLoginIdRequest, opts ...client.CallOption) (*CheckWhetherEmailIsUsedAsLoginIdResponse, error)
	CannySSO(ctx context.Context, in *CannySSORequest, opts ...client.CallOption) (*CannySSOResponse, error)
	ForceChangeLoginEmailInternal(ctx context.Context, in *ForceChangeLoginEmailInternalRequest, opts ...client.CallOption) (*ForceChangeLoginEmailInternalResponse, error)
	UpdateUserInvitationRecord(ctx context.Context, in *UpdateUserInvitationRecordRequest, opts ...client.CallOption) (*UpdateUserInvitationRecordResponse, error)
	GetLoginHistory(ctx context.Context, in *GetLoginHistoryRequest, opts ...client.CallOption) (*GetLoginHistoryResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) LogIn(ctx context.Context, in *LogInRequest, opts ...client.CallOption) (*LogInResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.LogIn", in)
	out := new(LogInResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserInfoByRole(ctx context.Context, in *GetUserInfoByRoleRequest, opts ...client.CallOption) (*GetUserInfoByRoleResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserInfoByRole", in)
	out := new(GetUserInfoByRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdatePasswordByOldPassword(ctx context.Context, in *UpdatePasswordByOldPasswordRequest, opts ...client.CallOption) (*UpdateUserPasswordResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdatePasswordByOldPassword", in)
	out := new(UpdateUserPasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) TransferLISTokenToPortal(ctx context.Context, in *TransferLISTokenToPortalRequest, opts ...client.CallOption) (*TransferLISTokenToPortalResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.TransferLISTokenToPortal", in)
	out := new(TransferLISTokenToPortalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Send2FATokenRequest(ctx context.Context, in *Send2FATokenRequestMessage, opts ...client.CallOption) (*Send2FATokenResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Send2FATokenRequest", in)
	out := new(Send2FATokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ForgetPasswordRequest(ctx context.Context, in *ForgetPasswordRequestRequest, opts ...client.CallOption) (*ForgetPasswordRequestResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.ForgetPasswordRequest", in)
	out := new(ForgetPasswordRequestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ForgetPassword(ctx context.Context, in *ForgetPasswordRequestMessage, opts ...client.CallOption) (*ForgetPasswordVerifyResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.ForgetPassword", in)
	out := new(ForgetPasswordVerifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) TransferCustomerClinic(ctx context.Context, in *TransferCustomerClinicRequest, opts ...client.CallOption) (*TransferCustomerClinicResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.TransferCustomerClinic", in)
	out := new(TransferCustomerClinicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SetUpEmailRequest(ctx context.Context, in *SetUpLoginEmailRequestRequest, opts ...client.CallOption) (*SetUpLoginEmailRequestResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.SetUpEmailRequest", in)
	out := new(SetUpLoginEmailRequestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) VerifySetUpUserEmailLogIn(ctx context.Context, in *VerifySetUpUserEmailLogInRequest, opts ...client.CallOption) (*VerifySetUpUserEmailLogInResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.VerifySetUpUserEmailLogIn", in)
	out := new(VerifySetUpUserEmailLogInResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) IsEmailUsedAsLoginId(ctx context.Context, in *EmailRequest, opts ...client.CallOption) (*IsEmailUsedAsLoginIdResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.IsEmailUsedAsLoginId", in)
	out := new(IsEmailUsedAsLoginIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) InitialForgetPassword(ctx context.Context, in *InitialForgetPasswordRequest, opts ...client.CallOption) (*ForgetPasswordResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.InitialForgetPassword", in)
	out := new(ForgetPasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SendVerify2FASetUpContactInfo(ctx context.Context, in *SendVerify2FASetUpContactInfoRequest, opts ...client.CallOption) (*SendVerify2FASetUpContactInfoResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.SendVerify2FASetUpContactInfo", in)
	out := new(SendVerify2FASetUpContactInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Verify2FASetUpContactInfo(ctx context.Context, in *Verify2FASetUpContactRequest, opts ...client.CallOption) (*Verify2FASetUpContactResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Verify2FASetUpContactInfo", in)
	out := new(Verify2FASetUpContactResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) TurnOn2FASettingPage(ctx context.Context, in *TurnOn2FASettingPageRequest, opts ...client.CallOption) (*TurnOn2FASettingPageResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.TurnOn2FASettingPage", in)
	out := new(TurnOn2FASettingPageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Send2FAVerificationCode(ctx context.Context, in *Send2FAVerificationCodeRequest, opts ...client.CallOption) (*Send2FAVerificationCodeResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Send2FAVerificationCode", in)
	out := new(Send2FAVerificationCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Verify2FAVerificationCode(ctx context.Context, in *Verify2FAVerificationCodeRequest, opts ...client.CallOption) (*Verify2FAVerificationResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Verify2FAVerificationCode", in)
	out := new(Verify2FAVerificationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) TurnOff2FASettingPage(ctx context.Context, in *TurnOff2FASettingPageRequest, opts ...client.CallOption) (*TurnOff2FASettingPageResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.TurnOff2FASettingPage", in)
	out := new(TurnOff2FASettingPageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserInformation(ctx context.Context, in *GetUserInformationRequest, opts ...client.CallOption) (*GetUserInformationResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserInformation", in)
	out := new(GetUserInformationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUser2FAContactInfo(ctx context.Context, in *GetUser2FAContactInfoRequest, opts ...client.CallOption) (*GetUser2FAContactInfoResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUser2FAContactInfo", in)
	out := new(GetUser2FAContactInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ChangeUserEmailLogInID(ctx context.Context, in *UserChangeEmailRequest, opts ...client.CallOption) (*UserChangeEmailResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.ChangeUserEmailLogInID", in)
	out := new(UserChangeEmailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminUserLoginSearch(ctx context.Context, in *AdminLoginSearchRequest, opts ...client.CallOption) (*AdminLoginSearchResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminUserLoginSearch", in)
	out := new(AdminLoginSearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...client.CallOption) (*AdminLoginResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AdminLogin", in)
	out := new(AdminLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RenewToken(ctx context.Context, in *RenewTokenRequest, opts ...client.CallOption) (*RenewTokenResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.RenewToken", in)
	out := new(RenewTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) LISLogin(ctx context.Context, in *LogInRequest, opts ...client.CallOption) (*LogInResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.LISLogin", in)
	out := new(LogInResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CreateUserLogInForInvitedCustomer(ctx context.Context, in *CreateUserLogForInvitedCustomerRequest, opts ...client.CallOption) (*CreateUserLogForInvitedCustomerResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CreateUserLogInForInvitedCustomer", in)
	out := new(CreateUserLogForInvitedCustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CheckWhetherEmailIsUsedAsLoginId(ctx context.Context, in *CheckWhetherEmailIsUsedAsLoginIdRequest, opts ...client.CallOption) (*CheckWhetherEmailIsUsedAsLoginIdResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CheckWhetherEmailIsUsedAsLoginId", in)
	out := new(CheckWhetherEmailIsUsedAsLoginIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CannySSO(ctx context.Context, in *CannySSORequest, opts ...client.CallOption) (*CannySSOResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CannySSO", in)
	out := new(CannySSOResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ForceChangeLoginEmailInternal(ctx context.Context, in *ForceChangeLoginEmailInternalRequest, opts ...client.CallOption) (*ForceChangeLoginEmailInternalResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.ForceChangeLoginEmailInternal", in)
	out := new(ForceChangeLoginEmailInternalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserInvitationRecord(ctx context.Context, in *UpdateUserInvitationRecordRequest, opts ...client.CallOption) (*UpdateUserInvitationRecordResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateUserInvitationRecord", in)
	out := new(UpdateUserInvitationRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetLoginHistory(ctx context.Context, in *GetLoginHistoryRequest, opts ...client.CallOption) (*GetLoginHistoryResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetLoginHistory", in)
	out := new(GetLoginHistoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	LogIn(context.Context, *LogInRequest, *LogInResponse) error
	GetUserInfoByRole(context.Context, *GetUserInfoByRoleRequest, *GetUserInfoByRoleResponse) error
	UpdatePasswordByOldPassword(context.Context, *UpdatePasswordByOldPasswordRequest, *UpdateUserPasswordResponse) error
	TransferLISTokenToPortal(context.Context, *TransferLISTokenToPortalRequest, *TransferLISTokenToPortalResponse) error
	// 2FA
	Send2FATokenRequest(context.Context, *Send2FATokenRequestMessage, *Send2FATokenResponse) error
	// ForgetPassword
	ForgetPasswordRequest(context.Context, *ForgetPasswordRequestRequest, *ForgetPasswordRequestResponse) error
	ForgetPassword(context.Context, *ForgetPasswordRequestMessage, *ForgetPasswordVerifyResponse) error
	TransferCustomerClinic(context.Context, *TransferCustomerClinicRequest, *TransferCustomerClinicResponse) error
	SetUpEmailRequest(context.Context, *SetUpLoginEmailRequestRequest, *SetUpLoginEmailRequestResponse) error
	VerifySetUpUserEmailLogIn(context.Context, *VerifySetUpUserEmailLogInRequest, *VerifySetUpUserEmailLogInResponse) error
	IsEmailUsedAsLoginId(context.Context, *EmailRequest, *IsEmailUsedAsLoginIdResponse) error
	InitialForgetPassword(context.Context, *InitialForgetPasswordRequest, *ForgetPasswordResponse) error
	// Setting Page Enable 2FA
	SendVerify2FASetUpContactInfo(context.Context, *SendVerify2FASetUpContactInfoRequest, *SendVerify2FASetUpContactInfoResponse) error
	Verify2FASetUpContactInfo(context.Context, *Verify2FASetUpContactRequest, *Verify2FASetUpContactResponse) error
	TurnOn2FASettingPage(context.Context, *TurnOn2FASettingPageRequest, *TurnOn2FASettingPageResponse) error
	Send2FAVerificationCode(context.Context, *Send2FAVerificationCodeRequest, *Send2FAVerificationCodeResponse) error
	Verify2FAVerificationCode(context.Context, *Verify2FAVerificationCodeRequest, *Verify2FAVerificationResponse) error
	TurnOff2FASettingPage(context.Context, *TurnOff2FASettingPageRequest, *TurnOff2FASettingPageResponse) error
	GetUserInformation(context.Context, *GetUserInformationRequest, *GetUserInformationResponse) error
	GetUser2FAContactInfo(context.Context, *GetUser2FAContactInfoRequest, *GetUser2FAContactInfoResponse) error
	// Change Email
	ChangeUserEmailLogInID(context.Context, *UserChangeEmailRequest, *UserChangeEmailResponse) error
	AdminUserLoginSearch(context.Context, *AdminLoginSearchRequest, *AdminLoginSearchResponse) error
	AdminLogin(context.Context, *AdminLoginRequest, *AdminLoginResponse) error
	RenewToken(context.Context, *RenewTokenRequest, *RenewTokenResponse) error
	LISLogin(context.Context, *LogInRequest, *LogInResponse) error
	CreateUserLogInForInvitedCustomer(context.Context, *CreateUserLogForInvitedCustomerRequest, *CreateUserLogForInvitedCustomerResponse) error
	CheckWhetherEmailIsUsedAsLoginId(context.Context, *CheckWhetherEmailIsUsedAsLoginIdRequest, *CheckWhetherEmailIsUsedAsLoginIdResponse) error
	CannySSO(context.Context, *CannySSORequest, *CannySSOResponse) error
	ForceChangeLoginEmailInternal(context.Context, *ForceChangeLoginEmailInternalRequest, *ForceChangeLoginEmailInternalResponse) error
	UpdateUserInvitationRecord(context.Context, *UpdateUserInvitationRecordRequest, *UpdateUserInvitationRecordResponse) error
	GetLoginHistory(context.Context, *GetLoginHistoryRequest, *GetLoginHistoryResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		LogIn(ctx context.Context, in *LogInRequest, out *LogInResponse) error
		GetUserInfoByRole(ctx context.Context, in *GetUserInfoByRoleRequest, out *GetUserInfoByRoleResponse) error
		UpdatePasswordByOldPassword(ctx context.Context, in *UpdatePasswordByOldPasswordRequest, out *UpdateUserPasswordResponse) error
		TransferLISTokenToPortal(ctx context.Context, in *TransferLISTokenToPortalRequest, out *TransferLISTokenToPortalResponse) error
		Send2FATokenRequest(ctx context.Context, in *Send2FATokenRequestMessage, out *Send2FATokenResponse) error
		ForgetPasswordRequest(ctx context.Context, in *ForgetPasswordRequestRequest, out *ForgetPasswordRequestResponse) error
		ForgetPassword(ctx context.Context, in *ForgetPasswordRequestMessage, out *ForgetPasswordVerifyResponse) error
		TransferCustomerClinic(ctx context.Context, in *TransferCustomerClinicRequest, out *TransferCustomerClinicResponse) error
		SetUpEmailRequest(ctx context.Context, in *SetUpLoginEmailRequestRequest, out *SetUpLoginEmailRequestResponse) error
		VerifySetUpUserEmailLogIn(ctx context.Context, in *VerifySetUpUserEmailLogInRequest, out *VerifySetUpUserEmailLogInResponse) error
		IsEmailUsedAsLoginId(ctx context.Context, in *EmailRequest, out *IsEmailUsedAsLoginIdResponse) error
		InitialForgetPassword(ctx context.Context, in *InitialForgetPasswordRequest, out *ForgetPasswordResponse) error
		SendVerify2FASetUpContactInfo(ctx context.Context, in *SendVerify2FASetUpContactInfoRequest, out *SendVerify2FASetUpContactInfoResponse) error
		Verify2FASetUpContactInfo(ctx context.Context, in *Verify2FASetUpContactRequest, out *Verify2FASetUpContactResponse) error
		TurnOn2FASettingPage(ctx context.Context, in *TurnOn2FASettingPageRequest, out *TurnOn2FASettingPageResponse) error
		Send2FAVerificationCode(ctx context.Context, in *Send2FAVerificationCodeRequest, out *Send2FAVerificationCodeResponse) error
		Verify2FAVerificationCode(ctx context.Context, in *Verify2FAVerificationCodeRequest, out *Verify2FAVerificationResponse) error
		TurnOff2FASettingPage(ctx context.Context, in *TurnOff2FASettingPageRequest, out *TurnOff2FASettingPageResponse) error
		GetUserInformation(ctx context.Context, in *GetUserInformationRequest, out *GetUserInformationResponse) error
		GetUser2FAContactInfo(ctx context.Context, in *GetUser2FAContactInfoRequest, out *GetUser2FAContactInfoResponse) error
		ChangeUserEmailLogInID(ctx context.Context, in *UserChangeEmailRequest, out *UserChangeEmailResponse) error
		AdminUserLoginSearch(ctx context.Context, in *AdminLoginSearchRequest, out *AdminLoginSearchResponse) error
		AdminLogin(ctx context.Context, in *AdminLoginRequest, out *AdminLoginResponse) error
		RenewToken(ctx context.Context, in *RenewTokenRequest, out *RenewTokenResponse) error
		LISLogin(ctx context.Context, in *LogInRequest, out *LogInResponse) error
		CreateUserLogInForInvitedCustomer(ctx context.Context, in *CreateUserLogForInvitedCustomerRequest, out *CreateUserLogForInvitedCustomerResponse) error
		CheckWhetherEmailIsUsedAsLoginId(ctx context.Context, in *CheckWhetherEmailIsUsedAsLoginIdRequest, out *CheckWhetherEmailIsUsedAsLoginIdResponse) error
		CannySSO(ctx context.Context, in *CannySSORequest, out *CannySSOResponse) error
		ForceChangeLoginEmailInternal(ctx context.Context, in *ForceChangeLoginEmailInternalRequest, out *ForceChangeLoginEmailInternalResponse) error
		UpdateUserInvitationRecord(ctx context.Context, in *UpdateUserInvitationRecordRequest, out *UpdateUserInvitationRecordResponse) error
		GetLoginHistory(ctx context.Context, in *GetLoginHistoryRequest, out *GetLoginHistoryResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) LogIn(ctx context.Context, in *LogInRequest, out *LogInResponse) error {
	return h.UserServiceHandler.LogIn(ctx, in, out)
}

func (h *userServiceHandler) GetUserInfoByRole(ctx context.Context, in *GetUserInfoByRoleRequest, out *GetUserInfoByRoleResponse) error {
	return h.UserServiceHandler.GetUserInfoByRole(ctx, in, out)
}

func (h *userServiceHandler) UpdatePasswordByOldPassword(ctx context.Context, in *UpdatePasswordByOldPasswordRequest, out *UpdateUserPasswordResponse) error {
	return h.UserServiceHandler.UpdatePasswordByOldPassword(ctx, in, out)
}

func (h *userServiceHandler) TransferLISTokenToPortal(ctx context.Context, in *TransferLISTokenToPortalRequest, out *TransferLISTokenToPortalResponse) error {
	return h.UserServiceHandler.TransferLISTokenToPortal(ctx, in, out)
}

func (h *userServiceHandler) Send2FATokenRequest(ctx context.Context, in *Send2FATokenRequestMessage, out *Send2FATokenResponse) error {
	return h.UserServiceHandler.Send2FATokenRequest(ctx, in, out)
}

func (h *userServiceHandler) ForgetPasswordRequest(ctx context.Context, in *ForgetPasswordRequestRequest, out *ForgetPasswordRequestResponse) error {
	return h.UserServiceHandler.ForgetPasswordRequest(ctx, in, out)
}

func (h *userServiceHandler) ForgetPassword(ctx context.Context, in *ForgetPasswordRequestMessage, out *ForgetPasswordVerifyResponse) error {
	return h.UserServiceHandler.ForgetPassword(ctx, in, out)
}

func (h *userServiceHandler) TransferCustomerClinic(ctx context.Context, in *TransferCustomerClinicRequest, out *TransferCustomerClinicResponse) error {
	return h.UserServiceHandler.TransferCustomerClinic(ctx, in, out)
}

func (h *userServiceHandler) SetUpEmailRequest(ctx context.Context, in *SetUpLoginEmailRequestRequest, out *SetUpLoginEmailRequestResponse) error {
	return h.UserServiceHandler.SetUpEmailRequest(ctx, in, out)
}

func (h *userServiceHandler) VerifySetUpUserEmailLogIn(ctx context.Context, in *VerifySetUpUserEmailLogInRequest, out *VerifySetUpUserEmailLogInResponse) error {
	return h.UserServiceHandler.VerifySetUpUserEmailLogIn(ctx, in, out)
}

func (h *userServiceHandler) IsEmailUsedAsLoginId(ctx context.Context, in *EmailRequest, out *IsEmailUsedAsLoginIdResponse) error {
	return h.UserServiceHandler.IsEmailUsedAsLoginId(ctx, in, out)
}

func (h *userServiceHandler) InitialForgetPassword(ctx context.Context, in *InitialForgetPasswordRequest, out *ForgetPasswordResponse) error {
	return h.UserServiceHandler.InitialForgetPassword(ctx, in, out)
}

func (h *userServiceHandler) SendVerify2FASetUpContactInfo(ctx context.Context, in *SendVerify2FASetUpContactInfoRequest, out *SendVerify2FASetUpContactInfoResponse) error {
	return h.UserServiceHandler.SendVerify2FASetUpContactInfo(ctx, in, out)
}

func (h *userServiceHandler) Verify2FASetUpContactInfo(ctx context.Context, in *Verify2FASetUpContactRequest, out *Verify2FASetUpContactResponse) error {
	return h.UserServiceHandler.Verify2FASetUpContactInfo(ctx, in, out)
}

func (h *userServiceHandler) TurnOn2FASettingPage(ctx context.Context, in *TurnOn2FASettingPageRequest, out *TurnOn2FASettingPageResponse) error {
	return h.UserServiceHandler.TurnOn2FASettingPage(ctx, in, out)
}

func (h *userServiceHandler) Send2FAVerificationCode(ctx context.Context, in *Send2FAVerificationCodeRequest, out *Send2FAVerificationCodeResponse) error {
	return h.UserServiceHandler.Send2FAVerificationCode(ctx, in, out)
}

func (h *userServiceHandler) Verify2FAVerificationCode(ctx context.Context, in *Verify2FAVerificationCodeRequest, out *Verify2FAVerificationResponse) error {
	return h.UserServiceHandler.Verify2FAVerificationCode(ctx, in, out)
}

func (h *userServiceHandler) TurnOff2FASettingPage(ctx context.Context, in *TurnOff2FASettingPageRequest, out *TurnOff2FASettingPageResponse) error {
	return h.UserServiceHandler.TurnOff2FASettingPage(ctx, in, out)
}

func (h *userServiceHandler) GetUserInformation(ctx context.Context, in *GetUserInformationRequest, out *GetUserInformationResponse) error {
	return h.UserServiceHandler.GetUserInformation(ctx, in, out)
}

func (h *userServiceHandler) GetUser2FAContactInfo(ctx context.Context, in *GetUser2FAContactInfoRequest, out *GetUser2FAContactInfoResponse) error {
	return h.UserServiceHandler.GetUser2FAContactInfo(ctx, in, out)
}

func (h *userServiceHandler) ChangeUserEmailLogInID(ctx context.Context, in *UserChangeEmailRequest, out *UserChangeEmailResponse) error {
	return h.UserServiceHandler.ChangeUserEmailLogInID(ctx, in, out)
}

func (h *userServiceHandler) AdminUserLoginSearch(ctx context.Context, in *AdminLoginSearchRequest, out *AdminLoginSearchResponse) error {
	return h.UserServiceHandler.AdminUserLoginSearch(ctx, in, out)
}

func (h *userServiceHandler) AdminLogin(ctx context.Context, in *AdminLoginRequest, out *AdminLoginResponse) error {
	return h.UserServiceHandler.AdminLogin(ctx, in, out)
}

func (h *userServiceHandler) RenewToken(ctx context.Context, in *RenewTokenRequest, out *RenewTokenResponse) error {
	return h.UserServiceHandler.RenewToken(ctx, in, out)
}

func (h *userServiceHandler) LISLogin(ctx context.Context, in *LogInRequest, out *LogInResponse) error {
	return h.UserServiceHandler.LISLogin(ctx, in, out)
}

func (h *userServiceHandler) CreateUserLogInForInvitedCustomer(ctx context.Context, in *CreateUserLogForInvitedCustomerRequest, out *CreateUserLogForInvitedCustomerResponse) error {
	return h.UserServiceHandler.CreateUserLogInForInvitedCustomer(ctx, in, out)
}

func (h *userServiceHandler) CheckWhetherEmailIsUsedAsLoginId(ctx context.Context, in *CheckWhetherEmailIsUsedAsLoginIdRequest, out *CheckWhetherEmailIsUsedAsLoginIdResponse) error {
	return h.UserServiceHandler.CheckWhetherEmailIsUsedAsLoginId(ctx, in, out)
}

func (h *userServiceHandler) CannySSO(ctx context.Context, in *CannySSORequest, out *CannySSOResponse) error {
	return h.UserServiceHandler.CannySSO(ctx, in, out)
}

func (h *userServiceHandler) ForceChangeLoginEmailInternal(ctx context.Context, in *ForceChangeLoginEmailInternalRequest, out *ForceChangeLoginEmailInternalResponse) error {
	return h.UserServiceHandler.ForceChangeLoginEmailInternal(ctx, in, out)
}

func (h *userServiceHandler) UpdateUserInvitationRecord(ctx context.Context, in *UpdateUserInvitationRecordRequest, out *UpdateUserInvitationRecordResponse) error {
	return h.UserServiceHandler.UpdateUserInvitationRecord(ctx, in, out)
}

func (h *userServiceHandler) GetLoginHistory(ctx context.Context, in *GetLoginHistoryRequest, out *GetLoginHistoryResponse) error {
	return h.UserServiceHandler.GetLoginHistory(ctx, in, out)
}
