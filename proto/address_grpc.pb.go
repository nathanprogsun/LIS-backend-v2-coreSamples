// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/address.proto

package coresamples_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AddressService_GetAddress_FullMethodName                 = "/coresamples_service.AddressService/GetAddress"
	AddressService_UpdateAddress_FullMethodName              = "/coresamples_service.AddressService/UpdateAddress"
	AddressService_CreateAddress_FullMethodName              = "/coresamples_service.AddressService/CreateAddress"
	AddressService_UpdateGroupAddress_FullMethodName         = "/coresamples_service.AddressService/UpdateGroupAddress"
	AddressService_CreateOrUpdateGroupAddress_FullMethodName = "/coresamples_service.AddressService/CreateOrUpdateGroupAddress"
	AddressService_ShowCustomerAddress_FullMethodName        = "/coresamples_service.AddressService/ShowCustomerAddress"
	AddressService_ShowClinicAddress_FullMethodName          = "/coresamples_service.AddressService/ShowClinicAddress"
)

// AddressServiceClient is the client API for AddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressServiceClient interface {
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*Address, error)
	UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*Address, error)
	CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*Address, error)
	UpdateGroupAddress(ctx context.Context, in *UpdateGroupAddressRequest, opts ...grpc.CallOption) (*CreateOrUpdateGroupAddressResponse, error)
	CreateOrUpdateGroupAddress(ctx context.Context, in *CreateOrUpdateGroupAddressRequest, opts ...grpc.CallOption) (*CreateOrUpdateGroupAddressResponse, error)
	ShowCustomerAddress(ctx context.Context, in *ShowCustomerAddressRequest, opts ...grpc.CallOption) (*ShowCustomerAddressResponse, error)
	ShowClinicAddress(ctx context.Context, in *ShowClinicAddressRequest, opts ...grpc.CallOption) (*ShowCustomerAddressResponse, error)
}

type addressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressServiceClient(cc grpc.ClientConnInterface) AddressServiceClient {
	return &addressServiceClient{cc}
}

func (c *addressServiceClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, AddressService_GetAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, AddressService_UpdateAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, AddressService_CreateAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) UpdateGroupAddress(ctx context.Context, in *UpdateGroupAddressRequest, opts ...grpc.CallOption) (*CreateOrUpdateGroupAddressResponse, error) {
	out := new(CreateOrUpdateGroupAddressResponse)
	err := c.cc.Invoke(ctx, AddressService_UpdateGroupAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) CreateOrUpdateGroupAddress(ctx context.Context, in *CreateOrUpdateGroupAddressRequest, opts ...grpc.CallOption) (*CreateOrUpdateGroupAddressResponse, error) {
	out := new(CreateOrUpdateGroupAddressResponse)
	err := c.cc.Invoke(ctx, AddressService_CreateOrUpdateGroupAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) ShowCustomerAddress(ctx context.Context, in *ShowCustomerAddressRequest, opts ...grpc.CallOption) (*ShowCustomerAddressResponse, error) {
	out := new(ShowCustomerAddressResponse)
	err := c.cc.Invoke(ctx, AddressService_ShowCustomerAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) ShowClinicAddress(ctx context.Context, in *ShowClinicAddressRequest, opts ...grpc.CallOption) (*ShowCustomerAddressResponse, error) {
	out := new(ShowCustomerAddressResponse)
	err := c.cc.Invoke(ctx, AddressService_ShowClinicAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressServiceServer is the server API for AddressService service.
// All implementations must embed UnimplementedAddressServiceServer
// for forward compatibility
type AddressServiceServer interface {
	GetAddress(context.Context, *GetAddressRequest) (*Address, error)
	UpdateAddress(context.Context, *UpdateAddressRequest) (*Address, error)
	CreateAddress(context.Context, *CreateAddressRequest) (*Address, error)
	UpdateGroupAddress(context.Context, *UpdateGroupAddressRequest) (*CreateOrUpdateGroupAddressResponse, error)
	CreateOrUpdateGroupAddress(context.Context, *CreateOrUpdateGroupAddressRequest) (*CreateOrUpdateGroupAddressResponse, error)
	ShowCustomerAddress(context.Context, *ShowCustomerAddressRequest) (*ShowCustomerAddressResponse, error)
	ShowClinicAddress(context.Context, *ShowClinicAddressRequest) (*ShowCustomerAddressResponse, error)
	mustEmbedUnimplementedAddressServiceServer()
}

// UnimplementedAddressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAddressServiceServer struct {
}

func (UnimplementedAddressServiceServer) GetAddress(context.Context, *GetAddressRequest) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedAddressServiceServer) UpdateAddress(context.Context, *UpdateAddressRequest) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedAddressServiceServer) CreateAddress(context.Context, *CreateAddressRequest) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (UnimplementedAddressServiceServer) UpdateGroupAddress(context.Context, *UpdateGroupAddressRequest) (*CreateOrUpdateGroupAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupAddress not implemented")
}
func (UnimplementedAddressServiceServer) CreateOrUpdateGroupAddress(context.Context, *CreateOrUpdateGroupAddressRequest) (*CreateOrUpdateGroupAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateGroupAddress not implemented")
}
func (UnimplementedAddressServiceServer) ShowCustomerAddress(context.Context, *ShowCustomerAddressRequest) (*ShowCustomerAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCustomerAddress not implemented")
}
func (UnimplementedAddressServiceServer) ShowClinicAddress(context.Context, *ShowClinicAddressRequest) (*ShowCustomerAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowClinicAddress not implemented")
}
func (UnimplementedAddressServiceServer) mustEmbedUnimplementedAddressServiceServer() {}

// UnsafeAddressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressServiceServer will
// result in compilation errors.
type UnsafeAddressServiceServer interface {
	mustEmbedUnimplementedAddressServiceServer()
}

func RegisterAddressServiceServer(s grpc.ServiceRegistrar, srv AddressServiceServer) {
	s.RegisterService(&AddressService_ServiceDesc, srv)
}

func _AddressService_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_UpdateAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).UpdateAddress(ctx, req.(*UpdateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_CreateAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).CreateAddress(ctx, req.(*CreateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_UpdateGroupAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).UpdateGroupAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_UpdateGroupAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).UpdateGroupAddress(ctx, req.(*UpdateGroupAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_CreateOrUpdateGroupAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateGroupAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).CreateOrUpdateGroupAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_CreateOrUpdateGroupAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).CreateOrUpdateGroupAddress(ctx, req.(*CreateOrUpdateGroupAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_ShowCustomerAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCustomerAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).ShowCustomerAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_ShowCustomerAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).ShowCustomerAddress(ctx, req.(*ShowCustomerAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_ShowClinicAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowClinicAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).ShowClinicAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_ShowClinicAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).ShowClinicAddress(ctx, req.(*ShowClinicAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressService_ServiceDesc is the grpc.ServiceDesc for AddressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coresamples_service.AddressService",
	HandlerType: (*AddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAddress",
			Handler:    _AddressService_GetAddress_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _AddressService_UpdateAddress_Handler,
		},
		{
			MethodName: "CreateAddress",
			Handler:    _AddressService_CreateAddress_Handler,
		},
		{
			MethodName: "UpdateGroupAddress",
			Handler:    _AddressService_UpdateGroupAddress_Handler,
		},
		{
			MethodName: "CreateOrUpdateGroupAddress",
			Handler:    _AddressService_CreateOrUpdateGroupAddress_Handler,
		},
		{
			MethodName: "ShowCustomerAddress",
			Handler:    _AddressService_ShowCustomerAddress_Handler,
		},
		{
			MethodName: "ShowClinicAddress",
			Handler:    _AddressService_ShowClinicAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/address.proto",
}
