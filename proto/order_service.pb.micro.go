// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/order_service.proto

package coresamples_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OrderService service

func NewOrderServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OrderService service

type OrderService interface {
	GetOrder(ctx context.Context, in *OrderID, opts ...client.CallOption) (*Order, error)
	CancelOrder(ctx context.Context, in *OrderID, opts ...client.CallOption) (*CancelOrderResponse, error)
	RestoreCanceledOrder(ctx context.Context, in *OrderID, opts ...client.CallOption) (*RestoreOrderResponse, error)
	AddOrderFlag(ctx context.Context, in *AddOrderFlagRequest, opts ...client.CallOption) (*AddOrderFlagResponse, error)
	FlagOrder(ctx context.Context, in *FlagOrderRequest, opts ...client.CallOption) (*FlagOrderResponse, error)
	UnflagOrder(ctx context.Context, in *UnflagOrderRequest, opts ...client.CallOption) (*UnflagOrderResponse, error)
	ListOrderFlagTypes(ctx context.Context, in *ListOrderFlagTypesRequest, opts ...client.CallOption) (*ListOrderFlagTypesResponse, error)
	// VA Portal
	ChangeOrderStatus(ctx context.Context, in *ChangeOrderStatusRequest, opts ...client.CallOption) (*Order, error)
	GetOrderStatusForDisplay(ctx context.Context, in *GetOrderStatusDisplay, opts ...client.CallOption) (*GetOrderStatusDisplayResponse, error)
	RerunSampleTests(ctx context.Context, in *RerunSampleTestsRequest, opts ...client.CallOption) (*RerunSampleTestsResponse, error)
	RestoreOrderStatus(ctx context.Context, in *RestoreOrderStatusRequest, opts ...client.CallOption) (*RestoreOrderStatusResponse, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) GetOrder(ctx context.Context, in *OrderID, opts ...client.CallOption) (*Order, error) {
	req := c.c.NewRequest(c.name, "OrderService.GetOrder", in)
	out := new(Order)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CancelOrder(ctx context.Context, in *OrderID, opts ...client.CallOption) (*CancelOrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.CancelOrder", in)
	out := new(CancelOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) RestoreCanceledOrder(ctx context.Context, in *OrderID, opts ...client.CallOption) (*RestoreOrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.RestoreCanceledOrder", in)
	out := new(RestoreOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) AddOrderFlag(ctx context.Context, in *AddOrderFlagRequest, opts ...client.CallOption) (*AddOrderFlagResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.AddOrderFlag", in)
	out := new(AddOrderFlagResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) FlagOrder(ctx context.Context, in *FlagOrderRequest, opts ...client.CallOption) (*FlagOrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.FlagOrder", in)
	out := new(FlagOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) UnflagOrder(ctx context.Context, in *UnflagOrderRequest, opts ...client.CallOption) (*UnflagOrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.UnflagOrder", in)
	out := new(UnflagOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) ListOrderFlagTypes(ctx context.Context, in *ListOrderFlagTypesRequest, opts ...client.CallOption) (*ListOrderFlagTypesResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.ListOrderFlagTypes", in)
	out := new(ListOrderFlagTypesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) ChangeOrderStatus(ctx context.Context, in *ChangeOrderStatusRequest, opts ...client.CallOption) (*Order, error) {
	req := c.c.NewRequest(c.name, "OrderService.ChangeOrderStatus", in)
	out := new(Order)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) GetOrderStatusForDisplay(ctx context.Context, in *GetOrderStatusDisplay, opts ...client.CallOption) (*GetOrderStatusDisplayResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.GetOrderStatusForDisplay", in)
	out := new(GetOrderStatusDisplayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) RerunSampleTests(ctx context.Context, in *RerunSampleTestsRequest, opts ...client.CallOption) (*RerunSampleTestsResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.RerunSampleTests", in)
	out := new(RerunSampleTestsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) RestoreOrderStatus(ctx context.Context, in *RestoreOrderStatusRequest, opts ...client.CallOption) (*RestoreOrderStatusResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.RestoreOrderStatus", in)
	out := new(RestoreOrderStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderService service

type OrderServiceHandler interface {
	GetOrder(context.Context, *OrderID, *Order) error
	CancelOrder(context.Context, *OrderID, *CancelOrderResponse) error
	RestoreCanceledOrder(context.Context, *OrderID, *RestoreOrderResponse) error
	AddOrderFlag(context.Context, *AddOrderFlagRequest, *AddOrderFlagResponse) error
	FlagOrder(context.Context, *FlagOrderRequest, *FlagOrderResponse) error
	UnflagOrder(context.Context, *UnflagOrderRequest, *UnflagOrderResponse) error
	ListOrderFlagTypes(context.Context, *ListOrderFlagTypesRequest, *ListOrderFlagTypesResponse) error
	// VA Portal
	ChangeOrderStatus(context.Context, *ChangeOrderStatusRequest, *Order) error
	GetOrderStatusForDisplay(context.Context, *GetOrderStatusDisplay, *GetOrderStatusDisplayResponse) error
	RerunSampleTests(context.Context, *RerunSampleTestsRequest, *RerunSampleTestsResponse) error
	RestoreOrderStatus(context.Context, *RestoreOrderStatusRequest, *RestoreOrderStatusResponse) error
}

func RegisterOrderServiceHandler(s server.Server, hdlr OrderServiceHandler, opts ...server.HandlerOption) error {
	type orderService interface {
		GetOrder(ctx context.Context, in *OrderID, out *Order) error
		CancelOrder(ctx context.Context, in *OrderID, out *CancelOrderResponse) error
		RestoreCanceledOrder(ctx context.Context, in *OrderID, out *RestoreOrderResponse) error
		AddOrderFlag(ctx context.Context, in *AddOrderFlagRequest, out *AddOrderFlagResponse) error
		FlagOrder(ctx context.Context, in *FlagOrderRequest, out *FlagOrderResponse) error
		UnflagOrder(ctx context.Context, in *UnflagOrderRequest, out *UnflagOrderResponse) error
		ListOrderFlagTypes(ctx context.Context, in *ListOrderFlagTypesRequest, out *ListOrderFlagTypesResponse) error
		ChangeOrderStatus(ctx context.Context, in *ChangeOrderStatusRequest, out *Order) error
		GetOrderStatusForDisplay(ctx context.Context, in *GetOrderStatusDisplay, out *GetOrderStatusDisplayResponse) error
		RerunSampleTests(ctx context.Context, in *RerunSampleTestsRequest, out *RerunSampleTestsResponse) error
		RestoreOrderStatus(ctx context.Context, in *RestoreOrderStatusRequest, out *RestoreOrderStatusResponse) error
	}
	type OrderService struct {
		orderService
	}
	h := &orderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderService{h}, opts...))
}

type orderServiceHandler struct {
	OrderServiceHandler
}

func (h *orderServiceHandler) GetOrder(ctx context.Context, in *OrderID, out *Order) error {
	return h.OrderServiceHandler.GetOrder(ctx, in, out)
}

func (h *orderServiceHandler) CancelOrder(ctx context.Context, in *OrderID, out *CancelOrderResponse) error {
	return h.OrderServiceHandler.CancelOrder(ctx, in, out)
}

func (h *orderServiceHandler) RestoreCanceledOrder(ctx context.Context, in *OrderID, out *RestoreOrderResponse) error {
	return h.OrderServiceHandler.RestoreCanceledOrder(ctx, in, out)
}

func (h *orderServiceHandler) AddOrderFlag(ctx context.Context, in *AddOrderFlagRequest, out *AddOrderFlagResponse) error {
	return h.OrderServiceHandler.AddOrderFlag(ctx, in, out)
}

func (h *orderServiceHandler) FlagOrder(ctx context.Context, in *FlagOrderRequest, out *FlagOrderResponse) error {
	return h.OrderServiceHandler.FlagOrder(ctx, in, out)
}

func (h *orderServiceHandler) UnflagOrder(ctx context.Context, in *UnflagOrderRequest, out *UnflagOrderResponse) error {
	return h.OrderServiceHandler.UnflagOrder(ctx, in, out)
}

func (h *orderServiceHandler) ListOrderFlagTypes(ctx context.Context, in *ListOrderFlagTypesRequest, out *ListOrderFlagTypesResponse) error {
	return h.OrderServiceHandler.ListOrderFlagTypes(ctx, in, out)
}

func (h *orderServiceHandler) ChangeOrderStatus(ctx context.Context, in *ChangeOrderStatusRequest, out *Order) error {
	return h.OrderServiceHandler.ChangeOrderStatus(ctx, in, out)
}

func (h *orderServiceHandler) GetOrderStatusForDisplay(ctx context.Context, in *GetOrderStatusDisplay, out *GetOrderStatusDisplayResponse) error {
	return h.OrderServiceHandler.GetOrderStatusForDisplay(ctx, in, out)
}

func (h *orderServiceHandler) RerunSampleTests(ctx context.Context, in *RerunSampleTestsRequest, out *RerunSampleTestsResponse) error {
	return h.OrderServiceHandler.RerunSampleTests(ctx, in, out)
}

func (h *orderServiceHandler) RestoreOrderStatus(ctx context.Context, in *RestoreOrderStatusRequest, out *RestoreOrderStatusResponse) error {
	return h.OrderServiceHandler.RestoreOrderStatus(ctx, in, out)
}
