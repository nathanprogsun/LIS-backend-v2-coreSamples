// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: proto/setting.proto

package coresamples_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetSettingByCustomerClinicSettingGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId       int32  `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	ClinicId         int32  `protobuf:"varint,2,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	SettingGroupName string `protobuf:"bytes,3,opt,name=setting_group_name,json=settingGroupName,proto3" json:"setting_group_name,omitempty"`
}

func (x *GetSettingByCustomerClinicSettingGroupRequest) Reset() {
	*x = GetSettingByCustomerClinicSettingGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingByCustomerClinicSettingGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingByCustomerClinicSettingGroupRequest) ProtoMessage() {}

func (x *GetSettingByCustomerClinicSettingGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingByCustomerClinicSettingGroupRequest.ProtoReflect.Descriptor instead.
func (*GetSettingByCustomerClinicSettingGroupRequest) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{0}
}

func (x *GetSettingByCustomerClinicSettingGroupRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *GetSettingByCustomerClinicSettingGroupRequest) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *GetSettingByCustomerClinicSettingGroupRequest) GetSettingGroupName() string {
	if x != nil {
		return x.SettingGroupName
	}
	return ""
}

type GetIDbySettingResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingResultList []string `protobuf:"bytes,1,rep,name=settingResultList,proto3" json:"settingResultList,omitempty"`
}

func (x *GetIDbySettingResultRequest) Reset() {
	*x = GetIDbySettingResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIDbySettingResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIDbySettingResultRequest) ProtoMessage() {}

func (x *GetIDbySettingResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIDbySettingResultRequest.ProtoReflect.Descriptor instead.
func (*GetIDbySettingResultRequest) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{1}
}

func (x *GetIDbySettingResultRequest) GetSettingResultList() []string {
	if x != nil {
		return x.SettingResultList
	}
	return nil
}

type CustomerInClinic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	ClinicId   string `protobuf:"bytes,2,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
}

func (x *CustomerInClinic) Reset() {
	*x = CustomerInClinic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerInClinic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerInClinic) ProtoMessage() {}

func (x *CustomerInClinic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerInClinic.ProtoReflect.Descriptor instead.
func (*CustomerInClinic) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{2}
}

func (x *CustomerInClinic) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *CustomerInClinic) GetClinicId() string {
	if x != nil {
		return x.ClinicId
	}
	return ""
}

type GetCustomerIDbySettingResultResonse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerInClinic []*CustomerInClinic `protobuf:"bytes,1,rep,name=customer_in_clinic,json=customerInClinic,proto3" json:"customer_in_clinic,omitempty"`
}

func (x *GetCustomerIDbySettingResultResonse) Reset() {
	*x = GetCustomerIDbySettingResultResonse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerIDbySettingResultResonse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerIDbySettingResultResonse) ProtoMessage() {}

func (x *GetCustomerIDbySettingResultResonse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerIDbySettingResultResonse.ProtoReflect.Descriptor instead.
func (*GetCustomerIDbySettingResultResonse) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{3}
}

func (x *GetCustomerIDbySettingResultResonse) GetCustomerInClinic() []*CustomerInClinic {
	if x != nil {
		return x.CustomerInClinic
	}
	return nil
}

type GetClinicIDbySettingResultResonse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicId []string `protobuf:"bytes,1,rep,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
}

func (x *GetClinicIDbySettingResultResonse) Reset() {
	*x = GetClinicIDbySettingResultResonse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClinicIDbySettingResultResonse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClinicIDbySettingResultResonse) ProtoMessage() {}

func (x *GetClinicIDbySettingResultResonse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClinicIDbySettingResultResonse.ProtoReflect.Descriptor instead.
func (*GetClinicIDbySettingResultResonse) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{4}
}

func (x *GetClinicIDbySettingResultResonse) GetClinicId() []string {
	if x != nil {
		return x.ClinicId
	}
	return nil
}

type UpdateMemberSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingId          int32  `protobuf:"varint,1,opt,name=setting_id,json=settingId,proto3" json:"setting_id,omitempty"`
	SettingName        string `protobuf:"bytes,2,opt,name=setting_name,json=settingName,proto3" json:"setting_name,omitempty"`
	SettingGroup       string `protobuf:"bytes,3,opt,name=setting_group,json=settingGroup,proto3" json:"setting_group,omitempty"`
	SettingDescription string `protobuf:"bytes,4,opt,name=setting_description,json=settingDescription,proto3" json:"setting_description,omitempty"`
	SettingValue       string `protobuf:"bytes,5,opt,name=setting_value,json=settingValue,proto3" json:"setting_value,omitempty"`
	SettingType        string `protobuf:"bytes,6,opt,name=setting_type,json=settingType,proto3" json:"setting_type,omitempty"`
	IsActive           bool   `protobuf:"varint,7,opt,name=isActive,proto3" json:"isActive,omitempty"`
	HasGroupSetting    bool   `protobuf:"varint,8,opt,name=hasGroupSetting,proto3" json:"hasGroupSetting,omitempty"`
	IsGroupSetting     bool   `protobuf:"varint,9,opt,name=isGroupSetting,proto3" json:"isGroupSetting,omitempty"`
	UseGroupSetting    bool   `protobuf:"varint,10,opt,name=useGroupSetting,proto3" json:"useGroupSetting,omitempty"`
	IsRequiredSetting  bool   `protobuf:"varint,11,opt,name=isRequiredSetting,proto3" json:"isRequiredSetting,omitempty"`
	SettingLevel       int32  `protobuf:"varint,12,opt,name=setting_level,json=settingLevel,proto3" json:"setting_level,omitempty"`
	SettingLevelName   string `protobuf:"bytes,13,opt,name=setting_level_name,json=settingLevelName,proto3" json:"setting_level_name,omitempty"`
}

func (x *UpdateMemberSettingRequest) Reset() {
	*x = UpdateMemberSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMemberSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemberSettingRequest) ProtoMessage() {}

func (x *UpdateMemberSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemberSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateMemberSettingRequest) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateMemberSettingRequest) GetSettingId() int32 {
	if x != nil {
		return x.SettingId
	}
	return 0
}

func (x *UpdateMemberSettingRequest) GetSettingName() string {
	if x != nil {
		return x.SettingName
	}
	return ""
}

func (x *UpdateMemberSettingRequest) GetSettingGroup() string {
	if x != nil {
		return x.SettingGroup
	}
	return ""
}

func (x *UpdateMemberSettingRequest) GetSettingDescription() string {
	if x != nil {
		return x.SettingDescription
	}
	return ""
}

func (x *UpdateMemberSettingRequest) GetSettingValue() string {
	if x != nil {
		return x.SettingValue
	}
	return ""
}

func (x *UpdateMemberSettingRequest) GetSettingType() string {
	if x != nil {
		return x.SettingType
	}
	return ""
}

func (x *UpdateMemberSettingRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *UpdateMemberSettingRequest) GetHasGroupSetting() bool {
	if x != nil {
		return x.HasGroupSetting
	}
	return false
}

func (x *UpdateMemberSettingRequest) GetIsGroupSetting() bool {
	if x != nil {
		return x.IsGroupSetting
	}
	return false
}

func (x *UpdateMemberSettingRequest) GetUseGroupSetting() bool {
	if x != nil {
		return x.UseGroupSetting
	}
	return false
}

func (x *UpdateMemberSettingRequest) GetIsRequiredSetting() bool {
	if x != nil {
		return x.IsRequiredSetting
	}
	return false
}

func (x *UpdateMemberSettingRequest) GetSettingLevel() int32 {
	if x != nil {
		return x.SettingLevel
	}
	return 0
}

func (x *UpdateMemberSettingRequest) GetSettingLevelName() string {
	if x != nil {
		return x.SettingLevelName
	}
	return ""
}

type GetSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  []*FullSetting `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetSettingResponse) Reset() {
	*x = GetSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingResponse) ProtoMessage() {}

func (x *GetSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingResponse.ProtoReflect.Descriptor instead.
func (*GetSettingResponse) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{6}
}

func (x *GetSettingResponse) GetResult() []*FullSetting {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GetSettingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetSettingResponseUpdateMemberSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *FullSetting `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GetSettingResponseUpdateMemberSetting) Reset() {
	*x = GetSettingResponseUpdateMemberSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingResponseUpdateMemberSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingResponseUpdateMemberSetting) ProtoMessage() {}

func (x *GetSettingResponseUpdateMemberSetting) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingResponseUpdateMemberSetting.ProtoReflect.Descriptor instead.
func (*GetSettingResponseUpdateMemberSetting) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{7}
}

func (x *GetSettingResponseUpdateMemberSetting) GetResult() *FullSetting {
	if x != nil {
		return x.Result
	}
	return nil
}

type FullSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingId               int32        `protobuf:"varint,1,opt,name=setting_id,json=settingId,proto3" json:"setting_id,omitempty"`
	SettingName             string       `protobuf:"bytes,2,opt,name=setting_name,json=settingName,proto3" json:"setting_name,omitempty"`
	SettingGroup            string       `protobuf:"bytes,3,opt,name=setting_group,json=settingGroup,proto3" json:"setting_group,omitempty"`
	SettingDescription      string       `protobuf:"bytes,4,opt,name=setting_description,json=settingDescription,proto3" json:"setting_description,omitempty"`
	SettingValue            string       `protobuf:"bytes,5,opt,name=setting_value,json=settingValue,proto3" json:"setting_value,omitempty"`
	SettingType             string       `protobuf:"bytes,6,opt,name=setting_type,json=settingType,proto3" json:"setting_type,omitempty"`
	SettingValueUpdatedTime string       `protobuf:"bytes,7,opt,name=setting_value_updated_time,json=settingValueUpdatedTime,proto3" json:"setting_value_updated_time,omitempty"`
	IsActive                bool         `protobuf:"varint,8,opt,name=isActive,proto3" json:"isActive,omitempty"`
	HasGroupSetting         bool         `protobuf:"varint,9,opt,name=hasGroupSetting,proto3" json:"hasGroupSetting,omitempty"`
	IsGroupSetting          bool         `protobuf:"varint,10,opt,name=isGroupSetting,proto3" json:"isGroupSetting,omitempty"`
	UseGroupSetting         bool         `protobuf:"varint,11,opt,name=useGroupSetting,proto3" json:"useGroupSetting,omitempty"`
	IsRequiredSetting       bool         `protobuf:"varint,12,opt,name=isRequiredSetting,proto3" json:"isRequiredSetting,omitempty"`
	SettingLevel            int32        `protobuf:"varint,13,opt,name=setting_level,json=settingLevel,proto3" json:"setting_level,omitempty"`
	SettingLevelName        string       `protobuf:"bytes,14,opt,name=setting_level_name,json=settingLevelName,proto3" json:"setting_level_name,omitempty"`
	GroupSettingId          int32        `protobuf:"varint,15,opt,name=group_setting_id,json=groupSettingId,proto3" json:"group_setting_id,omitempty"`
	ApplyToAllGroupMember   bool         `protobuf:"varint,16,opt,name=applyToAllGroupMember,proto3" json:"applyToAllGroupMember,omitempty"`
	UseAsDefaultCreateValue bool         `protobuf:"varint,17,opt,name=useAsDefaultCreateValue,proto3" json:"useAsDefaultCreateValue,omitempty"`
	GroupSetting            *FullSetting `protobuf:"bytes,18,opt,name=group_setting,json=groupSetting,proto3" json:"group_setting,omitempty"`
}

func (x *FullSetting) Reset() {
	*x = FullSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullSetting) ProtoMessage() {}

func (x *FullSetting) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullSetting.ProtoReflect.Descriptor instead.
func (*FullSetting) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{8}
}

func (x *FullSetting) GetSettingId() int32 {
	if x != nil {
		return x.SettingId
	}
	return 0
}

func (x *FullSetting) GetSettingName() string {
	if x != nil {
		return x.SettingName
	}
	return ""
}

func (x *FullSetting) GetSettingGroup() string {
	if x != nil {
		return x.SettingGroup
	}
	return ""
}

func (x *FullSetting) GetSettingDescription() string {
	if x != nil {
		return x.SettingDescription
	}
	return ""
}

func (x *FullSetting) GetSettingValue() string {
	if x != nil {
		return x.SettingValue
	}
	return ""
}

func (x *FullSetting) GetSettingType() string {
	if x != nil {
		return x.SettingType
	}
	return ""
}

func (x *FullSetting) GetSettingValueUpdatedTime() string {
	if x != nil {
		return x.SettingValueUpdatedTime
	}
	return ""
}

func (x *FullSetting) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *FullSetting) GetHasGroupSetting() bool {
	if x != nil {
		return x.HasGroupSetting
	}
	return false
}

func (x *FullSetting) GetIsGroupSetting() bool {
	if x != nil {
		return x.IsGroupSetting
	}
	return false
}

func (x *FullSetting) GetUseGroupSetting() bool {
	if x != nil {
		return x.UseGroupSetting
	}
	return false
}

func (x *FullSetting) GetIsRequiredSetting() bool {
	if x != nil {
		return x.IsRequiredSetting
	}
	return false
}

func (x *FullSetting) GetSettingLevel() int32 {
	if x != nil {
		return x.SettingLevel
	}
	return 0
}

func (x *FullSetting) GetSettingLevelName() string {
	if x != nil {
		return x.SettingLevelName
	}
	return ""
}

func (x *FullSetting) GetGroupSettingId() int32 {
	if x != nil {
		return x.GroupSettingId
	}
	return 0
}

func (x *FullSetting) GetApplyToAllGroupMember() bool {
	if x != nil {
		return x.ApplyToAllGroupMember
	}
	return false
}

func (x *FullSetting) GetUseAsDefaultCreateValue() bool {
	if x != nil {
		return x.UseAsDefaultCreateValue
	}
	return false
}

func (x *FullSetting) GetGroupSetting() *FullSetting {
	if x != nil {
		return x.GroupSetting
	}
	return nil
}

type GetClinicSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicId     int32   `protobuf:"varint,1,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	SettingGroup *string `protobuf:"bytes,2,opt,name=setting_group,json=settingGroup,proto3,oneof" json:"setting_group,omitempty"`
}

func (x *GetClinicSettingRequest) Reset() {
	*x = GetClinicSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClinicSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClinicSettingRequest) ProtoMessage() {}

func (x *GetClinicSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClinicSettingRequest.ProtoReflect.Descriptor instead.
func (*GetClinicSettingRequest) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{9}
}

func (x *GetClinicSettingRequest) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *GetClinicSettingRequest) GetSettingGroup() string {
	if x != nil && x.SettingGroup != nil {
		return *x.SettingGroup
	}
	return ""
}

type GetAllSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId int32 `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *GetAllSettingRequest) Reset() {
	*x = GetAllSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSettingRequest) ProtoMessage() {}

func (x *GetAllSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSettingRequest.ProtoReflect.Descriptor instead.
func (*GetAllSettingRequest) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{10}
}

func (x *GetAllSettingRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

type GetSettingByCustomerClinicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId int32 `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	ClinicId   int32 `protobuf:"varint,2,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
}

func (x *GetSettingByCustomerClinicRequest) Reset() {
	*x = GetSettingByCustomerClinicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingByCustomerClinicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingByCustomerClinicRequest) ProtoMessage() {}

func (x *GetSettingByCustomerClinicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingByCustomerClinicRequest.ProtoReflect.Descriptor instead.
func (*GetSettingByCustomerClinicRequest) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{11}
}

func (x *GetSettingByCustomerClinicRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *GetSettingByCustomerClinicRequest) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

type CreateClinicSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicSetting *CreateClinicSettingBody `protobuf:"bytes,1,opt,name=clinic_setting,json=clinicSetting,proto3" json:"clinic_setting,omitempty"`
	ClinicId      string                   `protobuf:"bytes,2,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	UserId        string                   `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CreateClinicSettingRequest) Reset() {
	*x = CreateClinicSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClinicSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClinicSettingRequest) ProtoMessage() {}

func (x *CreateClinicSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClinicSettingRequest.ProtoReflect.Descriptor instead.
func (*CreateClinicSettingRequest) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{12}
}

func (x *CreateClinicSettingRequest) GetClinicSetting() *CreateClinicSettingBody {
	if x != nil {
		return x.ClinicSetting
	}
	return nil
}

func (x *CreateClinicSettingRequest) GetClinicId() string {
	if x != nil {
		return x.ClinicId
	}
	return ""
}

func (x *CreateClinicSettingRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CreateClinicSettingBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingName             string `protobuf:"bytes,1,opt,name=setting_name,json=settingName,proto3" json:"setting_name,omitempty"`
	SettingDescription      string `protobuf:"bytes,2,opt,name=setting_description,json=settingDescription,proto3" json:"setting_description,omitempty"`
	SettingValue            string `protobuf:"bytes,3,opt,name=setting_value,json=settingValue,proto3" json:"setting_value,omitempty"`
	SettingType             string `protobuf:"bytes,4,opt,name=setting_type,json=settingType,proto3" json:"setting_type,omitempty"`
	HasGroupSetting         bool   `protobuf:"varint,5,opt,name=hasGroupSetting,proto3" json:"hasGroupSetting,omitempty"`
	IsGroupSetting          bool   `protobuf:"varint,6,opt,name=isGroupSetting,proto3" json:"isGroupSetting,omitempty"`
	UseGroupSetting         bool   `protobuf:"varint,7,opt,name=useGroupSetting,proto3" json:"useGroupSetting,omitempty"`
	IsRequiredSetting       bool   `protobuf:"varint,8,opt,name=isRequiredSetting,proto3" json:"isRequiredSetting,omitempty"`
	ApplyToAllGroupMember   bool   `protobuf:"varint,9,opt,name=applyToAllGroupMember,proto3" json:"applyToAllGroupMember,omitempty"`
	UseAsDefaultCreateValue bool   `protobuf:"varint,10,opt,name=useAsDefaultCreateValue,proto3" json:"useAsDefaultCreateValue,omitempty"`
	SettingGroup            string `protobuf:"bytes,11,opt,name=setting_group,json=settingGroup,proto3" json:"setting_group,omitempty"`
}

func (x *CreateClinicSettingBody) Reset() {
	*x = CreateClinicSettingBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClinicSettingBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClinicSettingBody) ProtoMessage() {}

func (x *CreateClinicSettingBody) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClinicSettingBody.ProtoReflect.Descriptor instead.
func (*CreateClinicSettingBody) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{13}
}

func (x *CreateClinicSettingBody) GetSettingName() string {
	if x != nil {
		return x.SettingName
	}
	return ""
}

func (x *CreateClinicSettingBody) GetSettingDescription() string {
	if x != nil {
		return x.SettingDescription
	}
	return ""
}

func (x *CreateClinicSettingBody) GetSettingValue() string {
	if x != nil {
		return x.SettingValue
	}
	return ""
}

func (x *CreateClinicSettingBody) GetSettingType() string {
	if x != nil {
		return x.SettingType
	}
	return ""
}

func (x *CreateClinicSettingBody) GetHasGroupSetting() bool {
	if x != nil {
		return x.HasGroupSetting
	}
	return false
}

func (x *CreateClinicSettingBody) GetIsGroupSetting() bool {
	if x != nil {
		return x.IsGroupSetting
	}
	return false
}

func (x *CreateClinicSettingBody) GetUseGroupSetting() bool {
	if x != nil {
		return x.UseGroupSetting
	}
	return false
}

func (x *CreateClinicSettingBody) GetIsRequiredSetting() bool {
	if x != nil {
		return x.IsRequiredSetting
	}
	return false
}

func (x *CreateClinicSettingBody) GetApplyToAllGroupMember() bool {
	if x != nil {
		return x.ApplyToAllGroupMember
	}
	return false
}

func (x *CreateClinicSettingBody) GetUseAsDefaultCreateValue() bool {
	if x != nil {
		return x.UseAsDefaultCreateValue
	}
	return false
}

func (x *CreateClinicSettingBody) GetSettingGroup() string {
	if x != nil {
		return x.SettingGroup
	}
	return ""
}

type CreateClinicSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingId               int32  `protobuf:"varint,1,opt,name=setting_id,json=settingId,proto3" json:"setting_id,omitempty"`
	SettingName             string `protobuf:"bytes,2,opt,name=setting_name,json=settingName,proto3" json:"setting_name,omitempty"`
	SettingGroup            string `protobuf:"bytes,3,opt,name=setting_group,json=settingGroup,proto3" json:"setting_group,omitempty"`
	SettingDescription      string `protobuf:"bytes,4,opt,name=setting_description,json=settingDescription,proto3" json:"setting_description,omitempty"`
	SettingValue            string `protobuf:"bytes,5,opt,name=setting_value,json=settingValue,proto3" json:"setting_value,omitempty"`
	SettingType             string `protobuf:"bytes,6,opt,name=setting_type,json=settingType,proto3" json:"setting_type,omitempty"`
	SettingValueUpdatedTime string `protobuf:"bytes,7,opt,name=setting_value_updated_time,json=settingValueUpdatedTime,proto3" json:"setting_value_updated_time,omitempty"`
	IsActive                bool   `protobuf:"varint,8,opt,name=isActive,proto3" json:"isActive,omitempty"`
	HasGroupSetting         bool   `protobuf:"varint,9,opt,name=hasGroupSetting,proto3" json:"hasGroupSetting,omitempty"`
	IsGroupSetting          bool   `protobuf:"varint,10,opt,name=isGroupSetting,proto3" json:"isGroupSetting,omitempty"`
	UseGroupSetting         bool   `protobuf:"varint,11,opt,name=useGroupSetting,proto3" json:"useGroupSetting,omitempty"`
	IsRequiredSetting       bool   `protobuf:"varint,12,opt,name=isRequiredSetting,proto3" json:"isRequiredSetting,omitempty"`
	SettingLevel            int32  `protobuf:"varint,13,opt,name=setting_level,json=settingLevel,proto3" json:"setting_level,omitempty"`
	SettingLevelName        string `protobuf:"bytes,14,opt,name=setting_level_name,json=settingLevelName,proto3" json:"setting_level_name,omitempty"`
	GroupSettingId          int32  `protobuf:"varint,15,opt,name=group_setting_id,json=groupSettingId,proto3" json:"group_setting_id,omitempty"`
	ApplyToAllGroupMember   bool   `protobuf:"varint,16,opt,name=applyToAllGroupMember,proto3" json:"applyToAllGroupMember,omitempty"`
	UseAsDefaultCreateValue bool   `protobuf:"varint,17,opt,name=useAsDefaultCreateValue,proto3" json:"useAsDefaultCreateValue,omitempty"`
}

func (x *CreateClinicSettingResponse) Reset() {
	*x = CreateClinicSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClinicSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClinicSettingResponse) ProtoMessage() {}

func (x *CreateClinicSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClinicSettingResponse.ProtoReflect.Descriptor instead.
func (*CreateClinicSettingResponse) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{14}
}

func (x *CreateClinicSettingResponse) GetSettingId() int32 {
	if x != nil {
		return x.SettingId
	}
	return 0
}

func (x *CreateClinicSettingResponse) GetSettingName() string {
	if x != nil {
		return x.SettingName
	}
	return ""
}

func (x *CreateClinicSettingResponse) GetSettingGroup() string {
	if x != nil {
		return x.SettingGroup
	}
	return ""
}

func (x *CreateClinicSettingResponse) GetSettingDescription() string {
	if x != nil {
		return x.SettingDescription
	}
	return ""
}

func (x *CreateClinicSettingResponse) GetSettingValue() string {
	if x != nil {
		return x.SettingValue
	}
	return ""
}

func (x *CreateClinicSettingResponse) GetSettingType() string {
	if x != nil {
		return x.SettingType
	}
	return ""
}

func (x *CreateClinicSettingResponse) GetSettingValueUpdatedTime() string {
	if x != nil {
		return x.SettingValueUpdatedTime
	}
	return ""
}

func (x *CreateClinicSettingResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *CreateClinicSettingResponse) GetHasGroupSetting() bool {
	if x != nil {
		return x.HasGroupSetting
	}
	return false
}

func (x *CreateClinicSettingResponse) GetIsGroupSetting() bool {
	if x != nil {
		return x.IsGroupSetting
	}
	return false
}

func (x *CreateClinicSettingResponse) GetUseGroupSetting() bool {
	if x != nil {
		return x.UseGroupSetting
	}
	return false
}

func (x *CreateClinicSettingResponse) GetIsRequiredSetting() bool {
	if x != nil {
		return x.IsRequiredSetting
	}
	return false
}

func (x *CreateClinicSettingResponse) GetSettingLevel() int32 {
	if x != nil {
		return x.SettingLevel
	}
	return 0
}

func (x *CreateClinicSettingResponse) GetSettingLevelName() string {
	if x != nil {
		return x.SettingLevelName
	}
	return ""
}

func (x *CreateClinicSettingResponse) GetGroupSettingId() int32 {
	if x != nil {
		return x.GroupSettingId
	}
	return 0
}

func (x *CreateClinicSettingResponse) GetApplyToAllGroupMember() bool {
	if x != nil {
		return x.ApplyToAllGroupMember
	}
	return false
}

func (x *CreateClinicSettingResponse) GetUseAsDefaultCreateValue() bool {
	if x != nil {
		return x.UseAsDefaultCreateValue
	}
	return false
}

type Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingId          int32  `protobuf:"varint,1,opt,name=setting_id,json=settingId,proto3" json:"setting_id,omitempty"`
	SettingName        string `protobuf:"bytes,2,opt,name=setting_name,json=settingName,proto3" json:"setting_name,omitempty"`
	SettingDescription string `protobuf:"bytes,3,opt,name=setting_description,json=settingDescription,proto3" json:"setting_description,omitempty"`
	SettingValue       string `protobuf:"bytes,4,opt,name=setting_value,json=settingValue,proto3" json:"setting_value,omitempty"`
	SettingType        string `protobuf:"bytes,5,opt,name=setting_type,json=settingType,proto3" json:"setting_type,omitempty"`
}

func (x *Setting) Reset() {
	*x = Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{15}
}

func (x *Setting) GetSettingId() int32 {
	if x != nil {
		return x.SettingId
	}
	return 0
}

func (x *Setting) GetSettingName() string {
	if x != nil {
		return x.SettingName
	}
	return ""
}

func (x *Setting) GetSettingDescription() string {
	if x != nil {
		return x.SettingDescription
	}
	return ""
}

func (x *Setting) GetSettingValue() string {
	if x != nil {
		return x.SettingValue
	}
	return ""
}

func (x *Setting) GetSettingType() string {
	if x != nil {
		return x.SettingType
	}
	return ""
}

type SettingDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId           string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	ClinicId             string `protobuf:"bytes,2,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	SettingName          string `protobuf:"bytes,3,opt,name=setting_name,json=settingName,proto3" json:"setting_name,omitempty"`
	SettingValue         string `protobuf:"bytes,4,opt,name=setting_value,json=settingValue,proto3" json:"setting_value,omitempty"`
	IsActive             bool   `protobuf:"varint,5,opt,name=isActive,proto3" json:"isActive,omitempty"`
	HasGroupSetting      bool   `protobuf:"varint,6,opt,name=hasGroupSetting,proto3" json:"hasGroupSetting,omitempty"`
	IsGroupSetting       bool   `protobuf:"varint,7,opt,name=isGroupSetting,proto3" json:"isGroupSetting,omitempty"`
	UseGroupSetting      bool   `protobuf:"varint,8,opt,name=useGroupSetting,proto3" json:"useGroupSetting,omitempty"`
	IsRequiredSetting    bool   `protobuf:"varint,9,opt,name=isRequiredSetting,proto3" json:"isRequiredSetting,omitempty"`
	ClinicGroupSettingId int32  `protobuf:"varint,10,opt,name=clinic_group_setting_id,json=clinicGroupSettingId,proto3" json:"clinic_group_setting_id,omitempty"`
	SettingGroup         string `protobuf:"bytes,11,opt,name=setting_group,json=settingGroup,proto3" json:"setting_group,omitempty"`
}

func (x *SettingDetail) Reset() {
	*x = SettingDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingDetail) ProtoMessage() {}

func (x *SettingDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingDetail.ProtoReflect.Descriptor instead.
func (*SettingDetail) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{16}
}

func (x *SettingDetail) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *SettingDetail) GetClinicId() string {
	if x != nil {
		return x.ClinicId
	}
	return ""
}

func (x *SettingDetail) GetSettingName() string {
	if x != nil {
		return x.SettingName
	}
	return ""
}

func (x *SettingDetail) GetSettingValue() string {
	if x != nil {
		return x.SettingValue
	}
	return ""
}

func (x *SettingDetail) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *SettingDetail) GetHasGroupSetting() bool {
	if x != nil {
		return x.HasGroupSetting
	}
	return false
}

func (x *SettingDetail) GetIsGroupSetting() bool {
	if x != nil {
		return x.IsGroupSetting
	}
	return false
}

func (x *SettingDetail) GetUseGroupSetting() bool {
	if x != nil {
		return x.UseGroupSetting
	}
	return false
}

func (x *SettingDetail) GetIsRequiredSetting() bool {
	if x != nil {
		return x.IsRequiredSetting
	}
	return false
}

func (x *SettingDetail) GetClinicGroupSettingId() int32 {
	if x != nil {
		return x.ClinicGroupSettingId
	}
	return 0
}

func (x *SettingDetail) GetSettingGroup() string {
	if x != nil {
		return x.SettingGroup
	}
	return ""
}

type EditCustomerClinicSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings    []*SettingDetail `protobuf:"bytes,1,rep,name=settings,proto3" json:"settings,omitempty"` // Array of setting details
	UserId      string           `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ServiceName string           `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *EditCustomerClinicSettingsRequest) Reset() {
	*x = EditCustomerClinicSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditCustomerClinicSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditCustomerClinicSettingsRequest) ProtoMessage() {}

func (x *EditCustomerClinicSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditCustomerClinicSettingsRequest.ProtoReflect.Descriptor instead.
func (*EditCustomerClinicSettingsRequest) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{17}
}

func (x *EditCustomerClinicSettingsRequest) GetSettings() []*SettingDetail {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *EditCustomerClinicSettingsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EditCustomerClinicSettingsRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type EditCustomerClinicSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           string             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	SettingResponses []*SettingResponse `protobuf:"bytes,2,rep,name=settingResponses,proto3" json:"settingResponses,omitempty"`
}

func (x *EditCustomerClinicSettingsResponse) Reset() {
	*x = EditCustomerClinicSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditCustomerClinicSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditCustomerClinicSettingsResponse) ProtoMessage() {}

func (x *EditCustomerClinicSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditCustomerClinicSettingsResponse.ProtoReflect.Descriptor instead.
func (*EditCustomerClinicSettingsResponse) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{18}
}

func (x *EditCustomerClinicSettingsResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *EditCustomerClinicSettingsResponse) GetSettingResponses() []*SettingResponse {
	if x != nil {
		return x.SettingResponses
	}
	return nil
}

type SettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId   string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	ClinicId     string `protobuf:"bytes,2,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	SettingId    string `protobuf:"bytes,3,opt,name=setting_id,json=settingId,proto3" json:"setting_id,omitempty"`
	Status       string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`                                 // "SUCCESS", "FAILED"
	ErrorMessage string `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Optional, included only when status is "FAILED"
}

func (x *SettingResponse) Reset() {
	*x = SettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_setting_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingResponse) ProtoMessage() {}

func (x *SettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_setting_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingResponse.ProtoReflect.Descriptor instead.
func (*SettingResponse) Descriptor() ([]byte, []int) {
	return file_proto_setting_proto_rawDescGZIP(), []int{19}
}

func (x *SettingResponse) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *SettingResponse) GetClinicId() string {
	if x != nil {
		return x.ClinicId
	}
	return ""
}

func (x *SettingResponse) GetSettingId() string {
	if x != nil {
		return x.SettingId
	}
	return ""
}

func (x *SettingResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SettingResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_proto_setting_proto protoreflect.FileDescriptor

var file_proto_setting_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x2d,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x49, 0x44, 0x62, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x6e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x62, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x63,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x43, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x43, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x22, 0x40, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x49, 0x44, 0x62, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x22, 0x95, 0x04, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2f, 0x0a, 0x13,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x69,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a,
	0x11, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x68,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa4, 0x06, 0x0a, 0x0b,
	0x46, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68,
	0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x38, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65, 0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x22, 0x72, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x37, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x61, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf4, 0x03, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68,
	0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x34,
	0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x41, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65, 0x41, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0xed, 0x05, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x68, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28,
	0x0a, 0x0f, 0x75, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x75, 0x73, 0x65,
	0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65, 0x41,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb7, 0x03, 0x0a, 0x0d, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x68, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x9f, 0x01, 0x0a, 0x21, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x22, 0x45, 0x64, 0x69, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xb7, 0x09, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x62, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x44, 0x62, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x62,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x44, 0x62, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x44, 0x62, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x44, 0x62, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x12, 0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x1a, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x42, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_setting_proto_rawDescOnce sync.Once
	file_proto_setting_proto_rawDescData = file_proto_setting_proto_rawDesc
)

func file_proto_setting_proto_rawDescGZIP() []byte {
	file_proto_setting_proto_rawDescOnce.Do(func() {
		file_proto_setting_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_setting_proto_rawDescData)
	})
	return file_proto_setting_proto_rawDescData
}

var file_proto_setting_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_proto_setting_proto_goTypes = []interface{}{
	(*GetSettingByCustomerClinicSettingGroupRequest)(nil), // 0: coresamples_service.GetSettingByCustomerClinicSettingGroupRequest
	(*GetIDbySettingResultRequest)(nil),                   // 1: coresamples_service.GetIDbySettingResultRequest
	(*CustomerInClinic)(nil),                              // 2: coresamples_service.CustomerInClinic
	(*GetCustomerIDbySettingResultResonse)(nil),           // 3: coresamples_service.GetCustomerIDbySettingResultResonse
	(*GetClinicIDbySettingResultResonse)(nil),             // 4: coresamples_service.GetClinicIDbySettingResultResonse
	(*UpdateMemberSettingRequest)(nil),                    // 5: coresamples_service.UpdateMemberSettingRequest
	(*GetSettingResponse)(nil),                            // 6: coresamples_service.GetSettingResponse
	(*GetSettingResponseUpdateMemberSetting)(nil),         // 7: coresamples_service.GetSettingResponseUpdateMemberSetting
	(*FullSetting)(nil),                                   // 8: coresamples_service.FullSetting
	(*GetClinicSettingRequest)(nil),                       // 9: coresamples_service.GetClinicSettingRequest
	(*GetAllSettingRequest)(nil),                          // 10: coresamples_service.GetAllSettingRequest
	(*GetSettingByCustomerClinicRequest)(nil),             // 11: coresamples_service.GetSettingByCustomerClinicRequest
	(*CreateClinicSettingRequest)(nil),                    // 12: coresamples_service.CreateClinicSettingRequest
	(*CreateClinicSettingBody)(nil),                       // 13: coresamples_service.CreateClinicSettingBody
	(*CreateClinicSettingResponse)(nil),                   // 14: coresamples_service.CreateClinicSettingResponse
	(*Setting)(nil),                                       // 15: coresamples_service.setting
	(*SettingDetail)(nil),                                 // 16: coresamples_service.SettingDetail
	(*EditCustomerClinicSettingsRequest)(nil),             // 17: coresamples_service.EditCustomerClinicSettingsRequest
	(*EditCustomerClinicSettingsResponse)(nil),            // 18: coresamples_service.EditCustomerClinicSettingsResponse
	(*SettingResponse)(nil),                               // 19: coresamples_service.SettingResponse
}
var file_proto_setting_proto_depIdxs = []int32{
	2,  // 0: coresamples_service.GetCustomerIDbySettingResultResonse.customer_in_clinic:type_name -> coresamples_service.CustomerInClinic
	8,  // 1: coresamples_service.GetSettingResponse.result:type_name -> coresamples_service.FullSetting
	8,  // 2: coresamples_service.GetSettingResponseUpdateMemberSetting.result:type_name -> coresamples_service.FullSetting
	8,  // 3: coresamples_service.FullSetting.group_setting:type_name -> coresamples_service.FullSetting
	13, // 4: coresamples_service.CreateClinicSettingRequest.clinic_setting:type_name -> coresamples_service.CreateClinicSettingBody
	16, // 5: coresamples_service.EditCustomerClinicSettingsRequest.settings:type_name -> coresamples_service.SettingDetail
	19, // 6: coresamples_service.EditCustomerClinicSettingsResponse.settingResponses:type_name -> coresamples_service.SettingResponse
	12, // 7: coresamples_service.SettingService.CreateOrUpdateClinicSetting:input_type -> coresamples_service.CreateClinicSettingRequest
	9,  // 8: coresamples_service.SettingService.GetClinicSetting:input_type -> coresamples_service.GetClinicSettingRequest
	10, // 9: coresamples_service.SettingService.GetAllSetting:input_type -> coresamples_service.GetAllSettingRequest
	5,  // 10: coresamples_service.SettingService.UpdateMemberSetting:input_type -> coresamples_service.UpdateMemberSettingRequest
	1,  // 11: coresamples_service.SettingService.GetCustomerIDbySettingResult:input_type -> coresamples_service.GetIDbySettingResultRequest
	1,  // 12: coresamples_service.SettingService.GetClinicIDbySettingResult:input_type -> coresamples_service.GetIDbySettingResultRequest
	11, // 13: coresamples_service.SettingService.GetSettingByCustomerClinic:input_type -> coresamples_service.GetSettingByCustomerClinicRequest
	17, // 14: coresamples_service.SettingService.EditCustomerClinicSettings:input_type -> coresamples_service.EditCustomerClinicSettingsRequest
	0,  // 15: coresamples_service.SettingService.GetSettingByCustomerClinicSettingGroup:input_type -> coresamples_service.GetSettingByCustomerClinicSettingGroupRequest
	14, // 16: coresamples_service.SettingService.CreateOrUpdateClinicSetting:output_type -> coresamples_service.CreateClinicSettingResponse
	6,  // 17: coresamples_service.SettingService.GetClinicSetting:output_type -> coresamples_service.GetSettingResponse
	6,  // 18: coresamples_service.SettingService.GetAllSetting:output_type -> coresamples_service.GetSettingResponse
	7,  // 19: coresamples_service.SettingService.UpdateMemberSetting:output_type -> coresamples_service.GetSettingResponseUpdateMemberSetting
	3,  // 20: coresamples_service.SettingService.GetCustomerIDbySettingResult:output_type -> coresamples_service.GetCustomerIDbySettingResultResonse
	4,  // 21: coresamples_service.SettingService.GetClinicIDbySettingResult:output_type -> coresamples_service.GetClinicIDbySettingResultResonse
	6,  // 22: coresamples_service.SettingService.GetSettingByCustomerClinic:output_type -> coresamples_service.GetSettingResponse
	18, // 23: coresamples_service.SettingService.EditCustomerClinicSettings:output_type -> coresamples_service.EditCustomerClinicSettingsResponse
	6,  // 24: coresamples_service.SettingService.GetSettingByCustomerClinicSettingGroup:output_type -> coresamples_service.GetSettingResponse
	16, // [16:25] is the sub-list for method output_type
	7,  // [7:16] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_proto_setting_proto_init() }
func file_proto_setting_proto_init() {
	if File_proto_setting_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_setting_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingByCustomerClinicSettingGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIDbySettingResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerInClinic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerIDbySettingResultResonse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClinicIDbySettingResultResonse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMemberSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingResponseUpdateMemberSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClinicSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingByCustomerClinicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClinicSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClinicSettingBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClinicSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditCustomerClinicSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditCustomerClinicSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_setting_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_setting_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_setting_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_setting_proto_goTypes,
		DependencyIndexes: file_proto_setting_proto_depIdxs,
		MessageInfos:      file_proto_setting_proto_msgTypes,
	}.Build()
	File_proto_setting_proto = out.File
	file_proto_setting_proto_rawDesc = nil
	file_proto_setting_proto_goTypes = nil
	file_proto_setting_proto_depIdxs = nil
}
