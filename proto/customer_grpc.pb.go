// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/customer.proto

package coresamples_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CustomerService_CreateCustomer_FullMethodName                              = "/coresamples_service.CustomerService/CreateCustomer"
	CustomerService_ListCustomers_FullMethodName                               = "/coresamples_service.CustomerService/ListCustomers"
	CustomerService_GetCustomer_FullMethodName                                 = "/coresamples_service.CustomerService/GetCustomer"
	CustomerService_GetSalesCustomers_FullMethodName                           = "/coresamples_service.CustomerService/GetSalesCustomers"
	CustomerService_GetClinicSalesSamples_FullMethodName                       = "/coresamples_service.CustomerService/GetClinicSalesSamples"
	CustomerService_GetCustomerSetting_FullMethodName                          = "/coresamples_service.CustomerService/GetCustomerSetting"
	CustomerService_GetCustomerSales_FullMethodName                            = "/coresamples_service.CustomerService/GetCustomerSales"
	CustomerService_UpdateCustomerSetting_FullMethodName                       = "/coresamples_service.CustomerService/UpdateCustomerSetting"
	CustomerService_UpdateCustomer_FullMethodName                              = "/coresamples_service.CustomerService/UpdateCustomer"
	CustomerService_CreatePatientInternalNotes_FullMethodName                  = "/coresamples_service.CustomerService/CreatePatientInternalNotes"
	CustomerService_ModifyPatientInternalNotes_FullMethodName                  = "/coresamples_service.CustomerService/ModifyPatientInternalNotes"
	CustomerService_DeletePatientInternalNotes_FullMethodName                  = "/coresamples_service.CustomerService/DeletePatientInternalNotes"
	CustomerService_IsNewCustomer_FullMethodName                               = "/coresamples_service.CustomerService/IsNewCustomer"
	CustomerService_UpdateCustomerNPI_FullMethodName                           = "/coresamples_service.CustomerService/UpdateCustomerNPI"
	CustomerService_UpdateCustomerSettingFull_FullMethodName                   = "/coresamples_service.CustomerService/UpdateCustomerSettingFull"
	CustomerService_EditCustomerSettingProperties_FullMethodName               = "/coresamples_service.CustomerService/EditCustomerSettingProperties"
	CustomerService_EditCustomerProfileOnSettingPage_FullMethodName            = "/coresamples_service.CustomerService/EditCustomerProfileOnSettingPage"
	CustomerService_RemoveCustomerFromClinic_FullMethodName                    = "/coresamples_service.CustomerService/RemoveCustomerFromClinic"
	CustomerService_JoinCustomerToClinic_FullMethodName                        = "/coresamples_service.CustomerService/JoinCustomerToClinic"
	CustomerService_GetCustomerByIDs_FullMethodName                            = "/coresamples_service.CustomerService/GetCustomerByIDs"
	CustomerService_CheckCustomerNPINumber_FullMethodName                      = "/coresamples_service.CustomerService/CheckCustomerNPINumber"
	CustomerService_GetCustomer2FAContact_FullMethodName                       = "/coresamples_service.CustomerService/GetCustomer2FAContact"
	CustomerService_SignUpCustomer_FullMethodName                              = "/coresamples_service.CustomerService/SignUpCustomer"
	CustomerService_SearchClientsByName_FullMethodName                         = "/coresamples_service.CustomerService/SearchClientsByName"
	CustomerService_ListCustomerAllClinics_FullMethodName                      = "/coresamples_service.CustomerService/ListCustomerAllClinics"
	CustomerService_GetStatementData_FullMethodName                            = "/coresamples_service.CustomerService/GetStatementData"
	CustomerService_CheckClientAttributes_FullMethodName                       = "/coresamples_service.CustomerService/CheckClientAttributes"
	CustomerService_NewEditCustomerProfileOnSettingPage_FullMethodName         = "/coresamples_service.CustomerService/NewEditCustomerProfileOnSettingPage"
	CustomerService_AddCustomerWithNPINumber_FullMethodName                    = "/coresamples_service.CustomerService/AddCustomerWithNPINumber"
	CustomerService_V2_EditCustomerProfileOnSettingPage_FullMethodName         = "/coresamples_service.CustomerService/V2_EditCustomerProfileOnSettingPage"
	CustomerService_CheckCustomerOnboardingQuestionnaireStatus_FullMethodName  = "/coresamples_service.CustomerService/CheckCustomerOnboardingQuestionnaireStatus"
	CustomerService_UpdateCustomerOnboardingQuestionnaireStatus_FullMethodName = "/coresamples_service.CustomerService/UpdateCustomerOnboardingQuestionnaireStatus"
	CustomerService_AddCustomerWithNPINumberNative_FullMethodName              = "/coresamples_service.CustomerService/AddCustomerWithNPINumberNative"
	CustomerService_SignUpCustomerV2_FullMethodName                            = "/coresamples_service.CustomerService/SignUpCustomerV2"
	CustomerService_FuzzySearchCustomers_FullMethodName                        = "/coresamples_service.CustomerService/FuzzySearchCustomers"
	CustomerService_GetCustomerByNPINumber_FullMethodName                      = "/coresamples_service.CustomerService/GetCustomerByNPINumber"
	CustomerService_ReinviteNPICheck_FullMethodName                            = "/coresamples_service.CustomerService/ReinviteNPICheck"
	CustomerService_FuzzySearchCustomerClinicName_FullMethodName               = "/coresamples_service.CustomerService/FuzzySearchCustomerClinicName"
	CustomerService_FetchCustomerBetaProgramsForClinic_FullMethodName          = "/coresamples_service.CustomerService/FetchCustomerBetaProgramsForClinic"
)

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServiceClient interface {
	// Version 0.7
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*Customer, error)
	ListCustomers(ctx context.Context, in *CustomerPage, opts ...grpc.CallOption) (*ListCustomersResponse, error)
	GetCustomer(ctx context.Context, in *CustomerID, opts ...grpc.CallOption) (*FullCustomer, error)
	GetSalesCustomers(ctx context.Context, in *SalesInfo, opts ...grpc.CallOption) (*FullCustomerList, error)
	GetClinicSalesSamples(ctx context.Context, in *GetSampleDataByPracticeAndSalesRequest, opts ...grpc.CallOption) (*SampleDataByPracticeAndSalesResponse, error)
	GetCustomerSetting(ctx context.Context, in *GetCustomerSettingRequest, opts ...grpc.CallOption) (*GetCustomerSettingResponse, error)
	GetCustomerSales(ctx context.Context, in *GetCustomerSalesRequest, opts ...grpc.CallOption) (*ListSalesCustomerResponseV7, error)
	// Version 0.7.1
	UpdateCustomerSetting(ctx context.Context, in *UpdateCustomerSettingRequest, opts ...grpc.CallOption) (*UpdateCustomerSettingResponse, error)
	UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error)
	// Version 0.7.3.5
	CreatePatientInternalNotes(ctx context.Context, in *CreatePatientInternalNotesRequest, opts ...grpc.CallOption) (*CreatePatientInternalNotesResponse, error)
	ModifyPatientInternalNotes(ctx context.Context, in *ModifyPatientInternalNotesRequest, opts ...grpc.CallOption) (*ModifyPatientInternalNotesResponse, error)
	DeletePatientInternalNotes(ctx context.Context, in *DeletePatientInternalNotesRequest, opts ...grpc.CallOption) (*DeletePatientInternalNotesResponse, error)
	// Version 0.7.3.7
	IsNewCustomer(ctx context.Context, in *CustomerID, opts ...grpc.CallOption) (*GetIsNewCustomerResponse, error)
	// Version 0.7.3.9
	UpdateCustomerNPI(ctx context.Context, in *UpdateCustomerNPIRequest, opts ...grpc.CallOption) (*Customer, error)
	UpdateCustomerSettingFull(ctx context.Context, in *UpdateCustomerSettingFullRequest, opts ...grpc.CallOption) (*UpdateCustomerSettingResponse, error)
	EditCustomerSettingProperties(ctx context.Context, in *EditCustomerSettingPropertiesequest, opts ...grpc.CallOption) (*UpdateCustomerSettingResponse, error)
	EditCustomerProfileOnSettingPage(ctx context.Context, in *EditCustomerProfileOnSettingPageRequest, opts ...grpc.CallOption) (*EditCustomerProfileOnSettingPageResponse, error)
	RemoveCustomerFromClinic(ctx context.Context, in *RemoveCustomerFromClinicRequest, opts ...grpc.CallOption) (*EditCustomerProfileOnSettingPageResponse, error)
	JoinCustomerToClinic(ctx context.Context, in *JoinCustomerFromClinicRequest, opts ...grpc.CallOption) (*EditCustomerProfileOnSettingPageResponse, error)
	GetCustomerByIDs(ctx context.Context, in *GetCustomerByIDsRequest, opts ...grpc.CallOption) (*GetCustomerByIDsResponse, error)
	// Version 0.7.4
	CheckCustomerNPINumber(ctx context.Context, in *CheckCustomerNPINumberRequest, opts ...grpc.CallOption) (*NPICheckResult, error)
	GetCustomer2FAContact(ctx context.Context, in *GetCustomer2FAContactRequest, opts ...grpc.CallOption) (*GetCustomer2FAContactResponse, error)
	SignUpCustomer(ctx context.Context, in *CustomerSignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	SearchClientsByName(ctx context.Context, in *SearchcliensNameRequest, opts ...grpc.CallOption) (*SearchclientsInfoResponse, error)
	ListCustomerAllClinics(ctx context.Context, in *ListCustomerAllClinicsRequest, opts ...grpc.CallOption) (*ListCustomerAllClinicsResponse, error)
	GetStatementData(ctx context.Context, in *GetStatementRequest, opts ...grpc.CallOption) (*GetStatementResponse, error)
	CheckClientAttributes(ctx context.Context, in *CheckClientAttributesRequest, opts ...grpc.CallOption) (*CheckClientAttributesResponse, error)
	NewEditCustomerProfileOnSettingPage(ctx context.Context, in *NewEditCustomerProfileOnSettingPageRequest, opts ...grpc.CallOption) (*NewEditCustomerProfileOnSettingPageResponse, error)
	AddCustomerWithNPINumber(ctx context.Context, in *AddCustomerWithNPINumberRequest, opts ...grpc.CallOption) (*AddCustomerWithNPINumberResponse, error)
	// Version 2
	V2_EditCustomerProfileOnSettingPage(ctx context.Context, in *V2_EditCustomerProfileOnSettingPageRequest, opts ...grpc.CallOption) (*V2_EditCustomerProfileOnSettingPageResponse, error)
	// VP-4964 OnboardingQuestionnair Check
	CheckCustomerOnboardingQuestionnaireStatus(ctx context.Context, in *CheckCustomerOnboardingQuestionnaireStatusRequest, opts ...grpc.CallOption) (*CheckCustomerOnboardingQuestionnaireStatusResponse, error)
	UpdateCustomerOnboardingQuestionnaireStatus(ctx context.Context, in *UpdateCustomerOnboardingQuestionnaireStatusRequest, opts ...grpc.CallOption) (*UpdateCustomerOnboardingQuestionnaireStatusResponse, error)
	// Add Native Method of Creating Customer
	AddCustomerWithNPINumberNative(ctx context.Context, in *AddCustomerWithNPINumberRequest, opts ...grpc.CallOption) (*AddCustomerWithNPINumberResponse, error)
	SignUpCustomerV2(ctx context.Context, in *CustomerSignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	FuzzySearchCustomers(ctx context.Context, in *FuzzySearchCustomersRequest, opts ...grpc.CallOption) (*SearchclientsInfoResponse, error)
	GetCustomerByNPINumber(ctx context.Context, in *NPINumber, opts ...grpc.CallOption) (*GetCustomerByNPINumberResponse, error)
	ReinviteNPICheck(ctx context.Context, in *ReinviteNPICheckRequest, opts ...grpc.CallOption) (*ReinviteNPICheckResponse, error)
	FuzzySearchCustomerClinicName(ctx context.Context, in *FuzzySearchRequest, opts ...grpc.CallOption) (*FuzzySearchResponse, error)
	FetchCustomerBetaProgramsForClinic(ctx context.Context, in *FetchCustomerBetaProgramsForClinicInput, opts ...grpc.CallOption) (*FetchCustomerBetaProgramsForClinicResponse, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, CustomerService_CreateCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) ListCustomers(ctx context.Context, in *CustomerPage, opts ...grpc.CallOption) (*ListCustomersResponse, error) {
	out := new(ListCustomersResponse)
	err := c.cc.Invoke(ctx, CustomerService_ListCustomers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomer(ctx context.Context, in *CustomerID, opts ...grpc.CallOption) (*FullCustomer, error) {
	out := new(FullCustomer)
	err := c.cc.Invoke(ctx, CustomerService_GetCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetSalesCustomers(ctx context.Context, in *SalesInfo, opts ...grpc.CallOption) (*FullCustomerList, error) {
	out := new(FullCustomerList)
	err := c.cc.Invoke(ctx, CustomerService_GetSalesCustomers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetClinicSalesSamples(ctx context.Context, in *GetSampleDataByPracticeAndSalesRequest, opts ...grpc.CallOption) (*SampleDataByPracticeAndSalesResponse, error) {
	out := new(SampleDataByPracticeAndSalesResponse)
	err := c.cc.Invoke(ctx, CustomerService_GetClinicSalesSamples_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomerSetting(ctx context.Context, in *GetCustomerSettingRequest, opts ...grpc.CallOption) (*GetCustomerSettingResponse, error) {
	out := new(GetCustomerSettingResponse)
	err := c.cc.Invoke(ctx, CustomerService_GetCustomerSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomerSales(ctx context.Context, in *GetCustomerSalesRequest, opts ...grpc.CallOption) (*ListSalesCustomerResponseV7, error) {
	out := new(ListSalesCustomerResponseV7)
	err := c.cc.Invoke(ctx, CustomerService_GetCustomerSales_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomerSetting(ctx context.Context, in *UpdateCustomerSettingRequest, opts ...grpc.CallOption) (*UpdateCustomerSettingResponse, error) {
	out := new(UpdateCustomerSettingResponse)
	err := c.cc.Invoke(ctx, CustomerService_UpdateCustomerSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error) {
	out := new(UpdateCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerService_UpdateCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CreatePatientInternalNotes(ctx context.Context, in *CreatePatientInternalNotesRequest, opts ...grpc.CallOption) (*CreatePatientInternalNotesResponse, error) {
	out := new(CreatePatientInternalNotesResponse)
	err := c.cc.Invoke(ctx, CustomerService_CreatePatientInternalNotes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) ModifyPatientInternalNotes(ctx context.Context, in *ModifyPatientInternalNotesRequest, opts ...grpc.CallOption) (*ModifyPatientInternalNotesResponse, error) {
	out := new(ModifyPatientInternalNotesResponse)
	err := c.cc.Invoke(ctx, CustomerService_ModifyPatientInternalNotes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) DeletePatientInternalNotes(ctx context.Context, in *DeletePatientInternalNotesRequest, opts ...grpc.CallOption) (*DeletePatientInternalNotesResponse, error) {
	out := new(DeletePatientInternalNotesResponse)
	err := c.cc.Invoke(ctx, CustomerService_DeletePatientInternalNotes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) IsNewCustomer(ctx context.Context, in *CustomerID, opts ...grpc.CallOption) (*GetIsNewCustomerResponse, error) {
	out := new(GetIsNewCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerService_IsNewCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomerNPI(ctx context.Context, in *UpdateCustomerNPIRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, CustomerService_UpdateCustomerNPI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomerSettingFull(ctx context.Context, in *UpdateCustomerSettingFullRequest, opts ...grpc.CallOption) (*UpdateCustomerSettingResponse, error) {
	out := new(UpdateCustomerSettingResponse)
	err := c.cc.Invoke(ctx, CustomerService_UpdateCustomerSettingFull_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) EditCustomerSettingProperties(ctx context.Context, in *EditCustomerSettingPropertiesequest, opts ...grpc.CallOption) (*UpdateCustomerSettingResponse, error) {
	out := new(UpdateCustomerSettingResponse)
	err := c.cc.Invoke(ctx, CustomerService_EditCustomerSettingProperties_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) EditCustomerProfileOnSettingPage(ctx context.Context, in *EditCustomerProfileOnSettingPageRequest, opts ...grpc.CallOption) (*EditCustomerProfileOnSettingPageResponse, error) {
	out := new(EditCustomerProfileOnSettingPageResponse)
	err := c.cc.Invoke(ctx, CustomerService_EditCustomerProfileOnSettingPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) RemoveCustomerFromClinic(ctx context.Context, in *RemoveCustomerFromClinicRequest, opts ...grpc.CallOption) (*EditCustomerProfileOnSettingPageResponse, error) {
	out := new(EditCustomerProfileOnSettingPageResponse)
	err := c.cc.Invoke(ctx, CustomerService_RemoveCustomerFromClinic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) JoinCustomerToClinic(ctx context.Context, in *JoinCustomerFromClinicRequest, opts ...grpc.CallOption) (*EditCustomerProfileOnSettingPageResponse, error) {
	out := new(EditCustomerProfileOnSettingPageResponse)
	err := c.cc.Invoke(ctx, CustomerService_JoinCustomerToClinic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomerByIDs(ctx context.Context, in *GetCustomerByIDsRequest, opts ...grpc.CallOption) (*GetCustomerByIDsResponse, error) {
	out := new(GetCustomerByIDsResponse)
	err := c.cc.Invoke(ctx, CustomerService_GetCustomerByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CheckCustomerNPINumber(ctx context.Context, in *CheckCustomerNPINumberRequest, opts ...grpc.CallOption) (*NPICheckResult, error) {
	out := new(NPICheckResult)
	err := c.cc.Invoke(ctx, CustomerService_CheckCustomerNPINumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomer2FAContact(ctx context.Context, in *GetCustomer2FAContactRequest, opts ...grpc.CallOption) (*GetCustomer2FAContactResponse, error) {
	out := new(GetCustomer2FAContactResponse)
	err := c.cc.Invoke(ctx, CustomerService_GetCustomer2FAContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) SignUpCustomer(ctx context.Context, in *CustomerSignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, CustomerService_SignUpCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) SearchClientsByName(ctx context.Context, in *SearchcliensNameRequest, opts ...grpc.CallOption) (*SearchclientsInfoResponse, error) {
	out := new(SearchclientsInfoResponse)
	err := c.cc.Invoke(ctx, CustomerService_SearchClientsByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) ListCustomerAllClinics(ctx context.Context, in *ListCustomerAllClinicsRequest, opts ...grpc.CallOption) (*ListCustomerAllClinicsResponse, error) {
	out := new(ListCustomerAllClinicsResponse)
	err := c.cc.Invoke(ctx, CustomerService_ListCustomerAllClinics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetStatementData(ctx context.Context, in *GetStatementRequest, opts ...grpc.CallOption) (*GetStatementResponse, error) {
	out := new(GetStatementResponse)
	err := c.cc.Invoke(ctx, CustomerService_GetStatementData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CheckClientAttributes(ctx context.Context, in *CheckClientAttributesRequest, opts ...grpc.CallOption) (*CheckClientAttributesResponse, error) {
	out := new(CheckClientAttributesResponse)
	err := c.cc.Invoke(ctx, CustomerService_CheckClientAttributes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) NewEditCustomerProfileOnSettingPage(ctx context.Context, in *NewEditCustomerProfileOnSettingPageRequest, opts ...grpc.CallOption) (*NewEditCustomerProfileOnSettingPageResponse, error) {
	out := new(NewEditCustomerProfileOnSettingPageResponse)
	err := c.cc.Invoke(ctx, CustomerService_NewEditCustomerProfileOnSettingPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) AddCustomerWithNPINumber(ctx context.Context, in *AddCustomerWithNPINumberRequest, opts ...grpc.CallOption) (*AddCustomerWithNPINumberResponse, error) {
	out := new(AddCustomerWithNPINumberResponse)
	err := c.cc.Invoke(ctx, CustomerService_AddCustomerWithNPINumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) V2_EditCustomerProfileOnSettingPage(ctx context.Context, in *V2_EditCustomerProfileOnSettingPageRequest, opts ...grpc.CallOption) (*V2_EditCustomerProfileOnSettingPageResponse, error) {
	out := new(V2_EditCustomerProfileOnSettingPageResponse)
	err := c.cc.Invoke(ctx, CustomerService_V2_EditCustomerProfileOnSettingPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CheckCustomerOnboardingQuestionnaireStatus(ctx context.Context, in *CheckCustomerOnboardingQuestionnaireStatusRequest, opts ...grpc.CallOption) (*CheckCustomerOnboardingQuestionnaireStatusResponse, error) {
	out := new(CheckCustomerOnboardingQuestionnaireStatusResponse)
	err := c.cc.Invoke(ctx, CustomerService_CheckCustomerOnboardingQuestionnaireStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomerOnboardingQuestionnaireStatus(ctx context.Context, in *UpdateCustomerOnboardingQuestionnaireStatusRequest, opts ...grpc.CallOption) (*UpdateCustomerOnboardingQuestionnaireStatusResponse, error) {
	out := new(UpdateCustomerOnboardingQuestionnaireStatusResponse)
	err := c.cc.Invoke(ctx, CustomerService_UpdateCustomerOnboardingQuestionnaireStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) AddCustomerWithNPINumberNative(ctx context.Context, in *AddCustomerWithNPINumberRequest, opts ...grpc.CallOption) (*AddCustomerWithNPINumberResponse, error) {
	out := new(AddCustomerWithNPINumberResponse)
	err := c.cc.Invoke(ctx, CustomerService_AddCustomerWithNPINumberNative_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) SignUpCustomerV2(ctx context.Context, in *CustomerSignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, CustomerService_SignUpCustomerV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) FuzzySearchCustomers(ctx context.Context, in *FuzzySearchCustomersRequest, opts ...grpc.CallOption) (*SearchclientsInfoResponse, error) {
	out := new(SearchclientsInfoResponse)
	err := c.cc.Invoke(ctx, CustomerService_FuzzySearchCustomers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomerByNPINumber(ctx context.Context, in *NPINumber, opts ...grpc.CallOption) (*GetCustomerByNPINumberResponse, error) {
	out := new(GetCustomerByNPINumberResponse)
	err := c.cc.Invoke(ctx, CustomerService_GetCustomerByNPINumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) ReinviteNPICheck(ctx context.Context, in *ReinviteNPICheckRequest, opts ...grpc.CallOption) (*ReinviteNPICheckResponse, error) {
	out := new(ReinviteNPICheckResponse)
	err := c.cc.Invoke(ctx, CustomerService_ReinviteNPICheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) FuzzySearchCustomerClinicName(ctx context.Context, in *FuzzySearchRequest, opts ...grpc.CallOption) (*FuzzySearchResponse, error) {
	out := new(FuzzySearchResponse)
	err := c.cc.Invoke(ctx, CustomerService_FuzzySearchCustomerClinicName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) FetchCustomerBetaProgramsForClinic(ctx context.Context, in *FetchCustomerBetaProgramsForClinicInput, opts ...grpc.CallOption) (*FetchCustomerBetaProgramsForClinicResponse, error) {
	out := new(FetchCustomerBetaProgramsForClinicResponse)
	err := c.cc.Invoke(ctx, CustomerService_FetchCustomerBetaProgramsForClinic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
// All implementations must embed UnimplementedCustomerServiceServer
// for forward compatibility
type CustomerServiceServer interface {
	// Version 0.7
	CreateCustomer(context.Context, *CreateCustomerRequest) (*Customer, error)
	ListCustomers(context.Context, *CustomerPage) (*ListCustomersResponse, error)
	GetCustomer(context.Context, *CustomerID) (*FullCustomer, error)
	GetSalesCustomers(context.Context, *SalesInfo) (*FullCustomerList, error)
	GetClinicSalesSamples(context.Context, *GetSampleDataByPracticeAndSalesRequest) (*SampleDataByPracticeAndSalesResponse, error)
	GetCustomerSetting(context.Context, *GetCustomerSettingRequest) (*GetCustomerSettingResponse, error)
	GetCustomerSales(context.Context, *GetCustomerSalesRequest) (*ListSalesCustomerResponseV7, error)
	// Version 0.7.1
	UpdateCustomerSetting(context.Context, *UpdateCustomerSettingRequest) (*UpdateCustomerSettingResponse, error)
	UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error)
	// Version 0.7.3.5
	CreatePatientInternalNotes(context.Context, *CreatePatientInternalNotesRequest) (*CreatePatientInternalNotesResponse, error)
	ModifyPatientInternalNotes(context.Context, *ModifyPatientInternalNotesRequest) (*ModifyPatientInternalNotesResponse, error)
	DeletePatientInternalNotes(context.Context, *DeletePatientInternalNotesRequest) (*DeletePatientInternalNotesResponse, error)
	// Version 0.7.3.7
	IsNewCustomer(context.Context, *CustomerID) (*GetIsNewCustomerResponse, error)
	// Version 0.7.3.9
	UpdateCustomerNPI(context.Context, *UpdateCustomerNPIRequest) (*Customer, error)
	UpdateCustomerSettingFull(context.Context, *UpdateCustomerSettingFullRequest) (*UpdateCustomerSettingResponse, error)
	EditCustomerSettingProperties(context.Context, *EditCustomerSettingPropertiesequest) (*UpdateCustomerSettingResponse, error)
	EditCustomerProfileOnSettingPage(context.Context, *EditCustomerProfileOnSettingPageRequest) (*EditCustomerProfileOnSettingPageResponse, error)
	RemoveCustomerFromClinic(context.Context, *RemoveCustomerFromClinicRequest) (*EditCustomerProfileOnSettingPageResponse, error)
	JoinCustomerToClinic(context.Context, *JoinCustomerFromClinicRequest) (*EditCustomerProfileOnSettingPageResponse, error)
	GetCustomerByIDs(context.Context, *GetCustomerByIDsRequest) (*GetCustomerByIDsResponse, error)
	// Version 0.7.4
	CheckCustomerNPINumber(context.Context, *CheckCustomerNPINumberRequest) (*NPICheckResult, error)
	GetCustomer2FAContact(context.Context, *GetCustomer2FAContactRequest) (*GetCustomer2FAContactResponse, error)
	SignUpCustomer(context.Context, *CustomerSignUpRequest) (*SignUpResponse, error)
	SearchClientsByName(context.Context, *SearchcliensNameRequest) (*SearchclientsInfoResponse, error)
	ListCustomerAllClinics(context.Context, *ListCustomerAllClinicsRequest) (*ListCustomerAllClinicsResponse, error)
	GetStatementData(context.Context, *GetStatementRequest) (*GetStatementResponse, error)
	CheckClientAttributes(context.Context, *CheckClientAttributesRequest) (*CheckClientAttributesResponse, error)
	NewEditCustomerProfileOnSettingPage(context.Context, *NewEditCustomerProfileOnSettingPageRequest) (*NewEditCustomerProfileOnSettingPageResponse, error)
	AddCustomerWithNPINumber(context.Context, *AddCustomerWithNPINumberRequest) (*AddCustomerWithNPINumberResponse, error)
	// Version 2
	V2_EditCustomerProfileOnSettingPage(context.Context, *V2_EditCustomerProfileOnSettingPageRequest) (*V2_EditCustomerProfileOnSettingPageResponse, error)
	// VP-4964 OnboardingQuestionnair Check
	CheckCustomerOnboardingQuestionnaireStatus(context.Context, *CheckCustomerOnboardingQuestionnaireStatusRequest) (*CheckCustomerOnboardingQuestionnaireStatusResponse, error)
	UpdateCustomerOnboardingQuestionnaireStatus(context.Context, *UpdateCustomerOnboardingQuestionnaireStatusRequest) (*UpdateCustomerOnboardingQuestionnaireStatusResponse, error)
	// Add Native Method of Creating Customer
	AddCustomerWithNPINumberNative(context.Context, *AddCustomerWithNPINumberRequest) (*AddCustomerWithNPINumberResponse, error)
	SignUpCustomerV2(context.Context, *CustomerSignUpRequest) (*SignUpResponse, error)
	FuzzySearchCustomers(context.Context, *FuzzySearchCustomersRequest) (*SearchclientsInfoResponse, error)
	GetCustomerByNPINumber(context.Context, *NPINumber) (*GetCustomerByNPINumberResponse, error)
	ReinviteNPICheck(context.Context, *ReinviteNPICheckRequest) (*ReinviteNPICheckResponse, error)
	FuzzySearchCustomerClinicName(context.Context, *FuzzySearchRequest) (*FuzzySearchResponse, error)
	FetchCustomerBetaProgramsForClinic(context.Context, *FetchCustomerBetaProgramsForClinicInput) (*FetchCustomerBetaProgramsForClinicResponse, error)
	mustEmbedUnimplementedCustomerServiceServer()
}

// UnimplementedCustomerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (UnimplementedCustomerServiceServer) CreateCustomer(context.Context, *CreateCustomerRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) ListCustomers(context.Context, *CustomerPage) (*ListCustomersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomers not implemented")
}
func (UnimplementedCustomerServiceServer) GetCustomer(context.Context, *CustomerID) (*FullCustomer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) GetSalesCustomers(context.Context, *SalesInfo) (*FullCustomerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesCustomers not implemented")
}
func (UnimplementedCustomerServiceServer) GetClinicSalesSamples(context.Context, *GetSampleDataByPracticeAndSalesRequest) (*SampleDataByPracticeAndSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClinicSalesSamples not implemented")
}
func (UnimplementedCustomerServiceServer) GetCustomerSetting(context.Context, *GetCustomerSettingRequest) (*GetCustomerSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerSetting not implemented")
}
func (UnimplementedCustomerServiceServer) GetCustomerSales(context.Context, *GetCustomerSalesRequest) (*ListSalesCustomerResponseV7, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerSales not implemented")
}
func (UnimplementedCustomerServiceServer) UpdateCustomerSetting(context.Context, *UpdateCustomerSettingRequest) (*UpdateCustomerSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerSetting not implemented")
}
func (UnimplementedCustomerServiceServer) UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) CreatePatientInternalNotes(context.Context, *CreatePatientInternalNotesRequest) (*CreatePatientInternalNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePatientInternalNotes not implemented")
}
func (UnimplementedCustomerServiceServer) ModifyPatientInternalNotes(context.Context, *ModifyPatientInternalNotesRequest) (*ModifyPatientInternalNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPatientInternalNotes not implemented")
}
func (UnimplementedCustomerServiceServer) DeletePatientInternalNotes(context.Context, *DeletePatientInternalNotesRequest) (*DeletePatientInternalNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePatientInternalNotes not implemented")
}
func (UnimplementedCustomerServiceServer) IsNewCustomer(context.Context, *CustomerID) (*GetIsNewCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsNewCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) UpdateCustomerNPI(context.Context, *UpdateCustomerNPIRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerNPI not implemented")
}
func (UnimplementedCustomerServiceServer) UpdateCustomerSettingFull(context.Context, *UpdateCustomerSettingFullRequest) (*UpdateCustomerSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerSettingFull not implemented")
}
func (UnimplementedCustomerServiceServer) EditCustomerSettingProperties(context.Context, *EditCustomerSettingPropertiesequest) (*UpdateCustomerSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCustomerSettingProperties not implemented")
}
func (UnimplementedCustomerServiceServer) EditCustomerProfileOnSettingPage(context.Context, *EditCustomerProfileOnSettingPageRequest) (*EditCustomerProfileOnSettingPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCustomerProfileOnSettingPage not implemented")
}
func (UnimplementedCustomerServiceServer) RemoveCustomerFromClinic(context.Context, *RemoveCustomerFromClinicRequest) (*EditCustomerProfileOnSettingPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCustomerFromClinic not implemented")
}
func (UnimplementedCustomerServiceServer) JoinCustomerToClinic(context.Context, *JoinCustomerFromClinicRequest) (*EditCustomerProfileOnSettingPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCustomerToClinic not implemented")
}
func (UnimplementedCustomerServiceServer) GetCustomerByIDs(context.Context, *GetCustomerByIDsRequest) (*GetCustomerByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerByIDs not implemented")
}
func (UnimplementedCustomerServiceServer) CheckCustomerNPINumber(context.Context, *CheckCustomerNPINumberRequest) (*NPICheckResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCustomerNPINumber not implemented")
}
func (UnimplementedCustomerServiceServer) GetCustomer2FAContact(context.Context, *GetCustomer2FAContactRequest) (*GetCustomer2FAContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer2FAContact not implemented")
}
func (UnimplementedCustomerServiceServer) SignUpCustomer(context.Context, *CustomerSignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) SearchClientsByName(context.Context, *SearchcliensNameRequest) (*SearchclientsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchClientsByName not implemented")
}
func (UnimplementedCustomerServiceServer) ListCustomerAllClinics(context.Context, *ListCustomerAllClinicsRequest) (*ListCustomerAllClinicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomerAllClinics not implemented")
}
func (UnimplementedCustomerServiceServer) GetStatementData(context.Context, *GetStatementRequest) (*GetStatementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatementData not implemented")
}
func (UnimplementedCustomerServiceServer) CheckClientAttributes(context.Context, *CheckClientAttributesRequest) (*CheckClientAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckClientAttributes not implemented")
}
func (UnimplementedCustomerServiceServer) NewEditCustomerProfileOnSettingPage(context.Context, *NewEditCustomerProfileOnSettingPageRequest) (*NewEditCustomerProfileOnSettingPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewEditCustomerProfileOnSettingPage not implemented")
}
func (UnimplementedCustomerServiceServer) AddCustomerWithNPINumber(context.Context, *AddCustomerWithNPINumberRequest) (*AddCustomerWithNPINumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomerWithNPINumber not implemented")
}
func (UnimplementedCustomerServiceServer) V2_EditCustomerProfileOnSettingPage(context.Context, *V2_EditCustomerProfileOnSettingPageRequest) (*V2_EditCustomerProfileOnSettingPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2_EditCustomerProfileOnSettingPage not implemented")
}
func (UnimplementedCustomerServiceServer) CheckCustomerOnboardingQuestionnaireStatus(context.Context, *CheckCustomerOnboardingQuestionnaireStatusRequest) (*CheckCustomerOnboardingQuestionnaireStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCustomerOnboardingQuestionnaireStatus not implemented")
}
func (UnimplementedCustomerServiceServer) UpdateCustomerOnboardingQuestionnaireStatus(context.Context, *UpdateCustomerOnboardingQuestionnaireStatusRequest) (*UpdateCustomerOnboardingQuestionnaireStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerOnboardingQuestionnaireStatus not implemented")
}
func (UnimplementedCustomerServiceServer) AddCustomerWithNPINumberNative(context.Context, *AddCustomerWithNPINumberRequest) (*AddCustomerWithNPINumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomerWithNPINumberNative not implemented")
}
func (UnimplementedCustomerServiceServer) SignUpCustomerV2(context.Context, *CustomerSignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpCustomerV2 not implemented")
}
func (UnimplementedCustomerServiceServer) FuzzySearchCustomers(context.Context, *FuzzySearchCustomersRequest) (*SearchclientsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuzzySearchCustomers not implemented")
}
func (UnimplementedCustomerServiceServer) GetCustomerByNPINumber(context.Context, *NPINumber) (*GetCustomerByNPINumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerByNPINumber not implemented")
}
func (UnimplementedCustomerServiceServer) ReinviteNPICheck(context.Context, *ReinviteNPICheckRequest) (*ReinviteNPICheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReinviteNPICheck not implemented")
}
func (UnimplementedCustomerServiceServer) FuzzySearchCustomerClinicName(context.Context, *FuzzySearchRequest) (*FuzzySearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuzzySearchCustomerClinicName not implemented")
}
func (UnimplementedCustomerServiceServer) FetchCustomerBetaProgramsForClinic(context.Context, *FetchCustomerBetaProgramsForClinicInput) (*FetchCustomerBetaProgramsForClinicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCustomerBetaProgramsForClinic not implemented")
}
func (UnimplementedCustomerServiceServer) mustEmbedUnimplementedCustomerServiceServer() {}

// UnsafeCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceServer will
// result in compilation errors.
type UnsafeCustomerServiceServer interface {
	mustEmbedUnimplementedCustomerServiceServer()
}

func RegisterCustomerServiceServer(s grpc.ServiceRegistrar, srv CustomerServiceServer) {
	s.RegisterService(&CustomerService_ServiceDesc, srv)
}

func _CustomerService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_CreateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CreateCustomer(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_ListCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).ListCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_ListCustomers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).ListCustomers(ctx, req.(*CustomerPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_GetCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomer(ctx, req.(*CustomerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetSalesCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalesInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetSalesCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_GetSalesCustomers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetSalesCustomers(ctx, req.(*SalesInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetClinicSalesSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSampleDataByPracticeAndSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetClinicSalesSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_GetClinicSalesSamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetClinicSalesSamples(ctx, req.(*GetSampleDataByPracticeAndSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomerSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_GetCustomerSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerSetting(ctx, req.(*GetCustomerSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomerSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_GetCustomerSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerSales(ctx, req.(*GetCustomerSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomerSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomerSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_UpdateCustomerSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomerSetting(ctx, req.(*UpdateCustomerSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_UpdateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomer(ctx, req.(*UpdateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CreatePatientInternalNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePatientInternalNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CreatePatientInternalNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_CreatePatientInternalNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CreatePatientInternalNotes(ctx, req.(*CreatePatientInternalNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_ModifyPatientInternalNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyPatientInternalNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).ModifyPatientInternalNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_ModifyPatientInternalNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).ModifyPatientInternalNotes(ctx, req.(*ModifyPatientInternalNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_DeletePatientInternalNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePatientInternalNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).DeletePatientInternalNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_DeletePatientInternalNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).DeletePatientInternalNotes(ctx, req.(*DeletePatientInternalNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_IsNewCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).IsNewCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_IsNewCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).IsNewCustomer(ctx, req.(*CustomerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomerNPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerNPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomerNPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_UpdateCustomerNPI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomerNPI(ctx, req.(*UpdateCustomerNPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomerSettingFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerSettingFullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomerSettingFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_UpdateCustomerSettingFull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomerSettingFull(ctx, req.(*UpdateCustomerSettingFullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_EditCustomerSettingProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCustomerSettingPropertiesequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).EditCustomerSettingProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_EditCustomerSettingProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).EditCustomerSettingProperties(ctx, req.(*EditCustomerSettingPropertiesequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_EditCustomerProfileOnSettingPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCustomerProfileOnSettingPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).EditCustomerProfileOnSettingPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_EditCustomerProfileOnSettingPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).EditCustomerProfileOnSettingPage(ctx, req.(*EditCustomerProfileOnSettingPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_RemoveCustomerFromClinic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCustomerFromClinicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).RemoveCustomerFromClinic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_RemoveCustomerFromClinic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).RemoveCustomerFromClinic(ctx, req.(*RemoveCustomerFromClinicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_JoinCustomerToClinic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinCustomerFromClinicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).JoinCustomerToClinic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_JoinCustomerToClinic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).JoinCustomerToClinic(ctx, req.(*JoinCustomerFromClinicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomerByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_GetCustomerByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerByIDs(ctx, req.(*GetCustomerByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CheckCustomerNPINumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCustomerNPINumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CheckCustomerNPINumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_CheckCustomerNPINumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CheckCustomerNPINumber(ctx, req.(*CheckCustomerNPINumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomer2FAContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomer2FAContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomer2FAContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_GetCustomer2FAContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomer2FAContact(ctx, req.(*GetCustomer2FAContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_SignUpCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerSignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).SignUpCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_SignUpCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).SignUpCustomer(ctx, req.(*CustomerSignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_SearchClientsByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchcliensNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).SearchClientsByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_SearchClientsByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).SearchClientsByName(ctx, req.(*SearchcliensNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_ListCustomerAllClinics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomerAllClinicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).ListCustomerAllClinics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_ListCustomerAllClinics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).ListCustomerAllClinics(ctx, req.(*ListCustomerAllClinicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetStatementData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetStatementData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_GetStatementData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetStatementData(ctx, req.(*GetStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CheckClientAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckClientAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CheckClientAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_CheckClientAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CheckClientAttributes(ctx, req.(*CheckClientAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_NewEditCustomerProfileOnSettingPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEditCustomerProfileOnSettingPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).NewEditCustomerProfileOnSettingPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_NewEditCustomerProfileOnSettingPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).NewEditCustomerProfileOnSettingPage(ctx, req.(*NewEditCustomerProfileOnSettingPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_AddCustomerWithNPINumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomerWithNPINumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).AddCustomerWithNPINumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_AddCustomerWithNPINumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).AddCustomerWithNPINumber(ctx, req.(*AddCustomerWithNPINumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_V2_EditCustomerProfileOnSettingPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(V2_EditCustomerProfileOnSettingPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).V2_EditCustomerProfileOnSettingPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_V2_EditCustomerProfileOnSettingPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).V2_EditCustomerProfileOnSettingPage(ctx, req.(*V2_EditCustomerProfileOnSettingPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CheckCustomerOnboardingQuestionnaireStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCustomerOnboardingQuestionnaireStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CheckCustomerOnboardingQuestionnaireStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_CheckCustomerOnboardingQuestionnaireStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CheckCustomerOnboardingQuestionnaireStatus(ctx, req.(*CheckCustomerOnboardingQuestionnaireStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomerOnboardingQuestionnaireStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerOnboardingQuestionnaireStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomerOnboardingQuestionnaireStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_UpdateCustomerOnboardingQuestionnaireStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomerOnboardingQuestionnaireStatus(ctx, req.(*UpdateCustomerOnboardingQuestionnaireStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_AddCustomerWithNPINumberNative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomerWithNPINumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).AddCustomerWithNPINumberNative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_AddCustomerWithNPINumberNative_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).AddCustomerWithNPINumberNative(ctx, req.(*AddCustomerWithNPINumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_SignUpCustomerV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerSignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).SignUpCustomerV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_SignUpCustomerV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).SignUpCustomerV2(ctx, req.(*CustomerSignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_FuzzySearchCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuzzySearchCustomersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).FuzzySearchCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_FuzzySearchCustomers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).FuzzySearchCustomers(ctx, req.(*FuzzySearchCustomersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomerByNPINumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NPINumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerByNPINumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_GetCustomerByNPINumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerByNPINumber(ctx, req.(*NPINumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_ReinviteNPICheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReinviteNPICheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).ReinviteNPICheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_ReinviteNPICheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).ReinviteNPICheck(ctx, req.(*ReinviteNPICheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_FuzzySearchCustomerClinicName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuzzySearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).FuzzySearchCustomerClinicName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_FuzzySearchCustomerClinicName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).FuzzySearchCustomerClinicName(ctx, req.(*FuzzySearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_FetchCustomerBetaProgramsForClinic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchCustomerBetaProgramsForClinicInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).FetchCustomerBetaProgramsForClinic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_FetchCustomerBetaProgramsForClinic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).FetchCustomerBetaProgramsForClinic(ctx, req.(*FetchCustomerBetaProgramsForClinicInput))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerService_ServiceDesc is the grpc.ServiceDesc for CustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coresamples_service.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    _CustomerService_CreateCustomer_Handler,
		},
		{
			MethodName: "ListCustomers",
			Handler:    _CustomerService_ListCustomers_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _CustomerService_GetCustomer_Handler,
		},
		{
			MethodName: "GetSalesCustomers",
			Handler:    _CustomerService_GetSalesCustomers_Handler,
		},
		{
			MethodName: "GetClinicSalesSamples",
			Handler:    _CustomerService_GetClinicSalesSamples_Handler,
		},
		{
			MethodName: "GetCustomerSetting",
			Handler:    _CustomerService_GetCustomerSetting_Handler,
		},
		{
			MethodName: "GetCustomerSales",
			Handler:    _CustomerService_GetCustomerSales_Handler,
		},
		{
			MethodName: "UpdateCustomerSetting",
			Handler:    _CustomerService_UpdateCustomerSetting_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _CustomerService_UpdateCustomer_Handler,
		},
		{
			MethodName: "CreatePatientInternalNotes",
			Handler:    _CustomerService_CreatePatientInternalNotes_Handler,
		},
		{
			MethodName: "ModifyPatientInternalNotes",
			Handler:    _CustomerService_ModifyPatientInternalNotes_Handler,
		},
		{
			MethodName: "DeletePatientInternalNotes",
			Handler:    _CustomerService_DeletePatientInternalNotes_Handler,
		},
		{
			MethodName: "IsNewCustomer",
			Handler:    _CustomerService_IsNewCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomerNPI",
			Handler:    _CustomerService_UpdateCustomerNPI_Handler,
		},
		{
			MethodName: "UpdateCustomerSettingFull",
			Handler:    _CustomerService_UpdateCustomerSettingFull_Handler,
		},
		{
			MethodName: "EditCustomerSettingProperties",
			Handler:    _CustomerService_EditCustomerSettingProperties_Handler,
		},
		{
			MethodName: "EditCustomerProfileOnSettingPage",
			Handler:    _CustomerService_EditCustomerProfileOnSettingPage_Handler,
		},
		{
			MethodName: "RemoveCustomerFromClinic",
			Handler:    _CustomerService_RemoveCustomerFromClinic_Handler,
		},
		{
			MethodName: "JoinCustomerToClinic",
			Handler:    _CustomerService_JoinCustomerToClinic_Handler,
		},
		{
			MethodName: "GetCustomerByIDs",
			Handler:    _CustomerService_GetCustomerByIDs_Handler,
		},
		{
			MethodName: "CheckCustomerNPINumber",
			Handler:    _CustomerService_CheckCustomerNPINumber_Handler,
		},
		{
			MethodName: "GetCustomer2FAContact",
			Handler:    _CustomerService_GetCustomer2FAContact_Handler,
		},
		{
			MethodName: "SignUpCustomer",
			Handler:    _CustomerService_SignUpCustomer_Handler,
		},
		{
			MethodName: "SearchClientsByName",
			Handler:    _CustomerService_SearchClientsByName_Handler,
		},
		{
			MethodName: "ListCustomerAllClinics",
			Handler:    _CustomerService_ListCustomerAllClinics_Handler,
		},
		{
			MethodName: "GetStatementData",
			Handler:    _CustomerService_GetStatementData_Handler,
		},
		{
			MethodName: "CheckClientAttributes",
			Handler:    _CustomerService_CheckClientAttributes_Handler,
		},
		{
			MethodName: "NewEditCustomerProfileOnSettingPage",
			Handler:    _CustomerService_NewEditCustomerProfileOnSettingPage_Handler,
		},
		{
			MethodName: "AddCustomerWithNPINumber",
			Handler:    _CustomerService_AddCustomerWithNPINumber_Handler,
		},
		{
			MethodName: "V2_EditCustomerProfileOnSettingPage",
			Handler:    _CustomerService_V2_EditCustomerProfileOnSettingPage_Handler,
		},
		{
			MethodName: "CheckCustomerOnboardingQuestionnaireStatus",
			Handler:    _CustomerService_CheckCustomerOnboardingQuestionnaireStatus_Handler,
		},
		{
			MethodName: "UpdateCustomerOnboardingQuestionnaireStatus",
			Handler:    _CustomerService_UpdateCustomerOnboardingQuestionnaireStatus_Handler,
		},
		{
			MethodName: "AddCustomerWithNPINumberNative",
			Handler:    _CustomerService_AddCustomerWithNPINumberNative_Handler,
		},
		{
			MethodName: "SignUpCustomerV2",
			Handler:    _CustomerService_SignUpCustomerV2_Handler,
		},
		{
			MethodName: "FuzzySearchCustomers",
			Handler:    _CustomerService_FuzzySearchCustomers_Handler,
		},
		{
			MethodName: "GetCustomerByNPINumber",
			Handler:    _CustomerService_GetCustomerByNPINumber_Handler,
		},
		{
			MethodName: "ReinviteNPICheck",
			Handler:    _CustomerService_ReinviteNPICheck_Handler,
		},
		{
			MethodName: "FuzzySearchCustomerClinicName",
			Handler:    _CustomerService_FuzzySearchCustomerClinicName_Handler,
		},
		{
			MethodName: "FetchCustomerBetaProgramsForClinic",
			Handler:    _CustomerService_FetchCustomerBetaProgramsForClinic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/customer.proto",
}
