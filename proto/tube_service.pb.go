// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: proto/tube_service.proto

package coresamples_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequiredTubeVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestIds []int32 `protobuf:"varint,1,rep,packed,name=test_ids,json=testIds,proto3" json:"test_ids,omitempty"`
}

func (x *RequiredTubeVolumeRequest) Reset() {
	*x = RequiredTubeVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tube_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequiredTubeVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequiredTubeVolumeRequest) ProtoMessage() {}

func (x *RequiredTubeVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tube_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequiredTubeVolumeRequest.ProtoReflect.Descriptor instead.
func (*RequiredTubeVolumeRequest) Descriptor() ([]byte, []int) {
	return file_proto_tube_service_proto_rawDescGZIP(), []int{0}
}

func (x *RequiredTubeVolumeRequest) GetTestIds() []int32 {
	if x != nil {
		return x.TestIds
	}
	return nil
}

type BloodType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blood bool `protobuf:"varint,1,opt,name=blood,proto3" json:"blood,omitempty"`
}

func (x *BloodType) Reset() {
	*x = BloodType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tube_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BloodType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BloodType) ProtoMessage() {}

func (x *BloodType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tube_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BloodType.ProtoReflect.Descriptor instead.
func (*BloodType) Descriptor() ([]byte, []int) {
	return file_proto_tube_service_proto_rawDescGZIP(), []int{1}
}

func (x *BloodType) GetBlood() bool {
	if x != nil {
		return x.Blood
	}
	return false
}

type TestIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestIds []int32 `protobuf:"varint,1,rep,packed,name=test_ids,json=testIds,proto3" json:"test_ids,omitempty"`
}

func (x *TestIDs) Reset() {
	*x = TestIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tube_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestIDs) ProtoMessage() {}

func (x *TestIDs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tube_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestIDs.ProtoReflect.Descriptor instead.
func (*TestIDs) Descriptor() ([]byte, []int) {
	return file_proto_tube_service_proto_rawDescGZIP(), []int{2}
}

func (x *TestIDs) GetTestIds() []int32 {
	if x != nil {
		return x.TestIds
	}
	return nil
}

type TubeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortOrder           int32  `protobuf:"varint,1,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	TubeInstructions    string `protobuf:"bytes,2,opt,name=tube_instructions,json=tubeInstructions,proto3" json:"tube_instructions,omitempty"`
	TubeName            string `protobuf:"bytes,3,opt,name=tube_name,json=tubeName,proto3" json:"tube_name,omitempty"`
	ShippingBox         string `protobuf:"bytes,4,opt,name=shipping_box,json=shippingBox,proto3" json:"shipping_box,omitempty"`
	TransferTubesToSend string `protobuf:"bytes,5,opt,name=transfer_tubes_to_send,json=transferTubesToSend,proto3" json:"transfer_tubes_to_send,omitempty"`
	BloodType           bool   `protobuf:"varint,6,opt,name=blood_type,json=bloodType,proto3" json:"blood_type,omitempty"`
}

func (x *TubeInfo) Reset() {
	*x = TubeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tube_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TubeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TubeInfo) ProtoMessage() {}

func (x *TubeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tube_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TubeInfo.ProtoReflect.Descriptor instead.
func (*TubeInfo) Descriptor() ([]byte, []int) {
	return file_proto_tube_service_proto_rawDescGZIP(), []int{3}
}

func (x *TubeInfo) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *TubeInfo) GetTubeInstructions() string {
	if x != nil {
		return x.TubeInstructions
	}
	return ""
}

func (x *TubeInfo) GetTubeName() string {
	if x != nil {
		return x.TubeName
	}
	return ""
}

func (x *TubeInfo) GetShippingBox() string {
	if x != nil {
		return x.ShippingBox
	}
	return ""
}

func (x *TubeInfo) GetTransferTubesToSend() string {
	if x != nil {
		return x.TransferTubesToSend
	}
	return ""
}

func (x *TubeInfo) GetBloodType() bool {
	if x != nil {
		return x.BloodType
	}
	return false
}

type RequiredTubeVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfTubes          map[string]int32     `protobuf:"bytes,1,rep,name=number_of_tubes,json=numberOfTubes,proto3" json:"number_of_tubes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	VolumeRequired         map[string]string    `protobuf:"bytes,2,rep,name=volume_required,json=volumeRequired,proto3" json:"volume_required,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // represent float volume as string to preserve precision
	NumberOf_DBSBloodTubes map[string]int32     `protobuf:"bytes,3,rep,name=number_of_DBS_blood_tubes,json=numberOfDBSBloodTubes,proto3" json:"number_of_DBS_blood_tubes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ActualNumberOfTubes    map[string]int32     `protobuf:"bytes,4,rep,name=actual_number_of_tubes,json=actualNumberOfTubes,proto3" json:"actual_number_of_tubes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ActualVolumeRequired   map[string]string    `protobuf:"bytes,5,rep,name=actual_volume_required,json=actualVolumeRequired,proto3" json:"actual_volume_required,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Message                string               `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	TubeOrder              map[string]int32     `protobuf:"bytes,7,rep,name=tube_order,json=tubeOrder,proto3" json:"tube_order,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TubeInformation        map[string]*TubeInfo `protobuf:"bytes,8,rep,name=tube_information,json=tubeInformation,proto3" json:"tube_information,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RequiredTubeVolumeResponse) Reset() {
	*x = RequiredTubeVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tube_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequiredTubeVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequiredTubeVolumeResponse) ProtoMessage() {}

func (x *RequiredTubeVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tube_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequiredTubeVolumeResponse.ProtoReflect.Descriptor instead.
func (*RequiredTubeVolumeResponse) Descriptor() ([]byte, []int) {
	return file_proto_tube_service_proto_rawDescGZIP(), []int{4}
}

func (x *RequiredTubeVolumeResponse) GetNumberOfTubes() map[string]int32 {
	if x != nil {
		return x.NumberOfTubes
	}
	return nil
}

func (x *RequiredTubeVolumeResponse) GetVolumeRequired() map[string]string {
	if x != nil {
		return x.VolumeRequired
	}
	return nil
}

func (x *RequiredTubeVolumeResponse) GetNumberOf_DBSBloodTubes() map[string]int32 {
	if x != nil {
		return x.NumberOf_DBSBloodTubes
	}
	return nil
}

func (x *RequiredTubeVolumeResponse) GetActualNumberOfTubes() map[string]int32 {
	if x != nil {
		return x.ActualNumberOfTubes
	}
	return nil
}

func (x *RequiredTubeVolumeResponse) GetActualVolumeRequired() map[string]string {
	if x != nil {
		return x.ActualVolumeRequired
	}
	return nil
}

func (x *RequiredTubeVolumeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RequiredTubeVolumeResponse) GetTubeOrder() map[string]int32 {
	if x != nil {
		return x.TubeOrder
	}
	return nil
}

func (x *RequiredTubeVolumeResponse) GetTubeInformation() map[string]*TubeInfo {
	if x != nil {
		return x.TubeInformation
	}
	return nil
}

type TubeTests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tests []*TubeSingleTest `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty"`
}

func (x *TubeTests) Reset() {
	*x = TubeTests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tube_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TubeTests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TubeTests) ProtoMessage() {}

func (x *TubeTests) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tube_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TubeTests.ProtoReflect.Descriptor instead.
func (*TubeTests) Descriptor() ([]byte, []int) {
	return file_proto_tube_service_proto_rawDescGZIP(), []int{5}
}

func (x *TubeTests) GetTests() []*TubeSingleTest {
	if x != nil {
		return x.Tests
	}
	return nil
}

type TubeSingleTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId                 int32  `protobuf:"varint,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	TestNames              string `protobuf:"bytes,2,opt,name=test_names,json=testNames,proto3" json:"test_names,omitempty"`
	TestCodes              string `protobuf:"bytes,3,opt,name=test_codes,json=testCodes,proto3" json:"test_codes,omitempty"`
	TestInstrument         string `protobuf:"bytes,4,opt,name=test_instrument,json=testInstrument,proto3" json:"test_instrument,omitempty"`
	TestType               string `protobuf:"bytes,5,opt,name=test_type,json=testType,proto3" json:"test_type,omitempty"`
	TestAssayName          string `protobuf:"bytes,6,opt,name=test_assay_name,json=testAssayName,proto3" json:"test_assay_name,omitempty"`
	TestDuplicateAssayName string `protobuf:"bytes,7,opt,name=test_duplicate_assay_name,json=testDuplicateAssayName,proto3" json:"test_duplicate_assay_name,omitempty"`
	TestGroupName          string `protobuf:"bytes,8,opt,name=test_group_name,json=testGroupName,proto3" json:"test_group_name,omitempty"`
}

func (x *TubeSingleTest) Reset() {
	*x = TubeSingleTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tube_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TubeSingleTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TubeSingleTest) ProtoMessage() {}

func (x *TubeSingleTest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tube_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TubeSingleTest.ProtoReflect.Descriptor instead.
func (*TubeSingleTest) Descriptor() ([]byte, []int) {
	return file_proto_tube_service_proto_rawDescGZIP(), []int{6}
}

func (x *TubeSingleTest) GetTestId() int32 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *TubeSingleTest) GetTestNames() string {
	if x != nil {
		return x.TestNames
	}
	return ""
}

func (x *TubeSingleTest) GetTestCodes() string {
	if x != nil {
		return x.TestCodes
	}
	return ""
}

func (x *TubeSingleTest) GetTestInstrument() string {
	if x != nil {
		return x.TestInstrument
	}
	return ""
}

func (x *TubeSingleTest) GetTestType() string {
	if x != nil {
		return x.TestType
	}
	return ""
}

func (x *TubeSingleTest) GetTestAssayName() string {
	if x != nil {
		return x.TestAssayName
	}
	return ""
}

func (x *TubeSingleTest) GetTestDuplicateAssayName() string {
	if x != nil {
		return x.TestDuplicateAssayName
	}
	return ""
}

func (x *TubeSingleTest) GetTestGroupName() string {
	if x != nil {
		return x.TestGroupName
	}
	return ""
}

type TubeID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TubeId string `protobuf:"bytes,1,opt,name=tube_id,json=tubeId,proto3" json:"tube_id,omitempty"`
}

func (x *TubeID) Reset() {
	*x = TubeID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tube_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TubeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TubeID) ProtoMessage() {}

func (x *TubeID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tube_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TubeID.ProtoReflect.Descriptor instead.
func (*TubeID) Descriptor() ([]byte, []int) {
	return file_proto_tube_service_proto_rawDescGZIP(), []int{7}
}

func (x *TubeID) GetTubeId() string {
	if x != nil {
		return x.TubeId
	}
	return ""
}

type Tube struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TubeId             string      `protobuf:"bytes,1,opt,name=tube_id,json=tubeId,proto3" json:"tube_id,omitempty"`
	SampleId           int32       `protobuf:"varint,2,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	TubeStorage        string      `protobuf:"bytes,3,opt,name=tube_storage,json=tubeStorage,proto3" json:"tube_storage,omitempty"`
	TubeReceiveTime    string      `protobuf:"bytes,4,opt,name=tube_receive_time,json=tubeReceiveTime,proto3" json:"tube_receive_time,omitempty"`
	TubeCollectionTime string      `protobuf:"bytes,5,opt,name=tube_collection_time,json=tubeCollectionTime,proto3" json:"tube_collection_time,omitempty"`
	TubeStability      int32       `protobuf:"varint,6,opt,name=tube_stability,json=tubeStability,proto3" json:"tube_stability,omitempty"`
	IsActive           bool        `protobuf:"varint,7,opt,name=isActive,proto3" json:"isActive,omitempty"`
	TurnaroundTime     int32       `protobuf:"varint,8,opt,name=turnaround_time,json=turnaroundTime,proto3" json:"turnaround_time,omitempty"`
	TubeTypes          []*TubeType `protobuf:"bytes,9,rep,name=tube_types,json=tubeTypes,proto3" json:"tube_types,omitempty"`
}

func (x *Tube) Reset() {
	*x = Tube{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tube_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tube) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tube) ProtoMessage() {}

func (x *Tube) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tube_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tube.ProtoReflect.Descriptor instead.
func (*Tube) Descriptor() ([]byte, []int) {
	return file_proto_tube_service_proto_rawDescGZIP(), []int{8}
}

func (x *Tube) GetTubeId() string {
	if x != nil {
		return x.TubeId
	}
	return ""
}

func (x *Tube) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *Tube) GetTubeStorage() string {
	if x != nil {
		return x.TubeStorage
	}
	return ""
}

func (x *Tube) GetTubeReceiveTime() string {
	if x != nil {
		return x.TubeReceiveTime
	}
	return ""
}

func (x *Tube) GetTubeCollectionTime() string {
	if x != nil {
		return x.TubeCollectionTime
	}
	return ""
}

func (x *Tube) GetTubeStability() int32 {
	if x != nil {
		return x.TubeStability
	}
	return 0
}

func (x *Tube) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Tube) GetTurnaroundTime() int32 {
	if x != nil {
		return x.TurnaroundTime
	}
	return 0
}

func (x *Tube) GetTubeTypes() []*TubeType {
	if x != nil {
		return x.TubeTypes
	}
	return nil
}

type TubeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TubeType       string `protobuf:"bytes,1,opt,name=tube_type,json=tubeType,proto3" json:"tube_type,omitempty"`
	TubeTypeSymbol string `protobuf:"bytes,2,opt,name=tube_type_symbol,json=tubeTypeSymbol,proto3" json:"tube_type_symbol,omitempty"`
}

func (x *TubeType) Reset() {
	*x = TubeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tube_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TubeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TubeType) ProtoMessage() {}

func (x *TubeType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tube_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TubeType.ProtoReflect.Descriptor instead.
func (*TubeType) Descriptor() ([]byte, []int) {
	return file_proto_tube_service_proto_rawDescGZIP(), []int{9}
}

func (x *TubeType) GetTubeType() string {
	if x != nil {
		return x.TubeType
	}
	return ""
}

func (x *TubeType) GetTubeTypeSymbol() string {
	if x != nil {
		return x.TubeTypeSymbol
	}
	return ""
}

var File_proto_tube_service_proto protoreflect.FileDescriptor

var file_proto_tube_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x36, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x75, 0x62, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x22, 0x21, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x22, 0x24, 0x0a, 0x07, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73,
	0x22, 0xea, 0x01, 0x0a, 0x08, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11,
	0x74, 0x75, 0x62, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x62,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75,
	0x62, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x62, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x75, 0x62, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe8, 0x0a,
	0x0a, 0x1a, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x75, 0x62, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x75, 0x62, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x54, 0x75, 0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54,
	0x75, 0x62, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x54, 0x75, 0x62, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x54, 0x75, 0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x44, 0x42, 0x53, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x74,
	0x75, 0x62, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x75, 0x62, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x44, 0x42, 0x53, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x75, 0x62, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x44, 0x42, 0x53, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x75, 0x62, 0x65, 0x73, 0x12, 0x7d, 0x0a,
	0x16, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x74, 0x75, 0x62, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x75, 0x62, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x75, 0x62,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x75, 0x62, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x16,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x75, 0x62, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x0a, 0x74, 0x75, 0x62, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x75, 0x62, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x75, 0x62,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x75, 0x62,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x10, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54,
	0x75, 0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x74, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x40, 0x0a, 0x12, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x54, 0x75, 0x62, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x1a,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x44, 0x42, 0x53, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x54, 0x75, 0x62, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x75, 0x62, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47,
	0x0a, 0x19, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x54, 0x75, 0x62, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x61, 0x0a, 0x14, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x09, 0x54, 0x75, 0x62, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x22, 0xb8, 0x02, 0x0a, 0x0e, 0x54, 0x75, 0x62, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x41,
	0x73, 0x73, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x65, 0x73,
	0x74, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x21, 0x0a, 0x06, 0x54,
	0x75, 0x62, 0x65, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x75, 0x62, 0x65, 0x49, 0x64, 0x22, 0xe7,
	0x02, 0x0a, 0x04, 0x54, 0x75, 0x62, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x75, 0x62, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x75, 0x62, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x75, 0x62, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x75, 0x62,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x75, 0x62, 0x65,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x75, 0x62, 0x65, 0x53, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x75, 0x72, 0x6e,
	0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x75,
	0x62, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74,
	0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x08, 0x54, 0x75, 0x62, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x75, 0x62,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x32, 0xf4, 0x02, 0x0a, 0x0b,
	0x54, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7a, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x75, 0x62, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x54, 0x75, 0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x54, 0x75, 0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x1c,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x44, 0x73, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x75, 0x62, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x75, 0x62, 0x65, 0x49, 0x44, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x62,
	0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x75, 0x62, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x49, 0x44,
	0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x22, 0x00, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_tube_service_proto_rawDescOnce sync.Once
	file_proto_tube_service_proto_rawDescData = file_proto_tube_service_proto_rawDesc
)

func file_proto_tube_service_proto_rawDescGZIP() []byte {
	file_proto_tube_service_proto_rawDescOnce.Do(func() {
		file_proto_tube_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_tube_service_proto_rawDescData)
	})
	return file_proto_tube_service_proto_rawDescData
}

var file_proto_tube_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_proto_tube_service_proto_goTypes = []interface{}{
	(*RequiredTubeVolumeRequest)(nil),  // 0: coresamples_service.RequiredTubeVolumeRequest
	(*BloodType)(nil),                  // 1: coresamples_service.BloodType
	(*TestIDs)(nil),                    // 2: coresamples_service.TestIDs
	(*TubeInfo)(nil),                   // 3: coresamples_service.TubeInfo
	(*RequiredTubeVolumeResponse)(nil), // 4: coresamples_service.RequiredTubeVolumeResponse
	(*TubeTests)(nil),                  // 5: coresamples_service.TubeTests
	(*TubeSingleTest)(nil),             // 6: coresamples_service.TubeSingleTest
	(*TubeID)(nil),                     // 7: coresamples_service.TubeID
	(*Tube)(nil),                       // 8: coresamples_service.Tube
	(*TubeType)(nil),                   // 9: coresamples_service.TubeType
	nil,                                // 10: coresamples_service.RequiredTubeVolumeResponse.NumberOfTubesEntry
	nil,                                // 11: coresamples_service.RequiredTubeVolumeResponse.VolumeRequiredEntry
	nil,                                // 12: coresamples_service.RequiredTubeVolumeResponse.NumberOfDBSBloodTubesEntry
	nil,                                // 13: coresamples_service.RequiredTubeVolumeResponse.ActualNumberOfTubesEntry
	nil,                                // 14: coresamples_service.RequiredTubeVolumeResponse.ActualVolumeRequiredEntry
	nil,                                // 15: coresamples_service.RequiredTubeVolumeResponse.TubeOrderEntry
	nil,                                // 16: coresamples_service.RequiredTubeVolumeResponse.TubeInformationEntry
}
var file_proto_tube_service_proto_depIdxs = []int32{
	10, // 0: coresamples_service.RequiredTubeVolumeResponse.number_of_tubes:type_name -> coresamples_service.RequiredTubeVolumeResponse.NumberOfTubesEntry
	11, // 1: coresamples_service.RequiredTubeVolumeResponse.volume_required:type_name -> coresamples_service.RequiredTubeVolumeResponse.VolumeRequiredEntry
	12, // 2: coresamples_service.RequiredTubeVolumeResponse.number_of_DBS_blood_tubes:type_name -> coresamples_service.RequiredTubeVolumeResponse.NumberOfDBSBloodTubesEntry
	13, // 3: coresamples_service.RequiredTubeVolumeResponse.actual_number_of_tubes:type_name -> coresamples_service.RequiredTubeVolumeResponse.ActualNumberOfTubesEntry
	14, // 4: coresamples_service.RequiredTubeVolumeResponse.actual_volume_required:type_name -> coresamples_service.RequiredTubeVolumeResponse.ActualVolumeRequiredEntry
	15, // 5: coresamples_service.RequiredTubeVolumeResponse.tube_order:type_name -> coresamples_service.RequiredTubeVolumeResponse.TubeOrderEntry
	16, // 6: coresamples_service.RequiredTubeVolumeResponse.tube_information:type_name -> coresamples_service.RequiredTubeVolumeResponse.TubeInformationEntry
	6,  // 7: coresamples_service.TubeTests.tests:type_name -> coresamples_service.TubeSingleTest
	9,  // 8: coresamples_service.Tube.tube_types:type_name -> coresamples_service.TubeType
	3,  // 9: coresamples_service.RequiredTubeVolumeResponse.TubeInformationEntry.value:type_name -> coresamples_service.TubeInfo
	0,  // 10: coresamples_service.TubeService.GetRequiredTubeVolume:input_type -> coresamples_service.RequiredTubeVolumeRequest
	1,  // 11: coresamples_service.TubeService.GetTestsByBloodType:input_type -> coresamples_service.BloodType
	7,  // 12: coresamples_service.TubeService.GetTube:input_type -> coresamples_service.TubeID
	7,  // 13: coresamples_service.TubeService.GetTubeTests:input_type -> coresamples_service.TubeID
	4,  // 14: coresamples_service.TubeService.GetRequiredTubeVolume:output_type -> coresamples_service.RequiredTubeVolumeResponse
	2,  // 15: coresamples_service.TubeService.GetTestsByBloodType:output_type -> coresamples_service.TestIDs
	8,  // 16: coresamples_service.TubeService.GetTube:output_type -> coresamples_service.Tube
	5,  // 17: coresamples_service.TubeService.GetTubeTests:output_type -> coresamples_service.TubeTests
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_proto_tube_service_proto_init() }
func file_proto_tube_service_proto_init() {
	if File_proto_tube_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_tube_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequiredTubeVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tube_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BloodType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tube_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tube_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TubeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tube_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequiredTubeVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tube_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TubeTests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tube_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TubeSingleTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tube_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TubeID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tube_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tube); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tube_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TubeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_tube_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_tube_service_proto_goTypes,
		DependencyIndexes: file_proto_tube_service_proto_depIdxs,
		MessageInfos:      file_proto_tube_service_proto_msgTypes,
	}.Build()
	File_proto_tube_service_proto = out.File
	file_proto_tube_service_proto_rawDesc = nil
	file_proto_tube_service_proto_goTypes = nil
	file_proto_tube_service_proto_depIdxs = nil
}
