// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/rbac_service.proto

package coresamples_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RBACService service

func NewRBACServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RBACService service

type RBACService interface {
	CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...client.CallOption) (*CheckPermissionResponse, error)
	CheckCreateRolePermission(ctx context.Context, in *CheckCreateRoleRequest, opts ...client.CallOption) (*CheckPermissionResponse, error)
	CheckDeleteRolePermission(ctx context.Context, in *CheckDeleteRoleRequest, opts ...client.CallOption) (*CheckPermissionResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...client.CallOption) (*SimpleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error)
	CheckAddPermissionPermission(ctx context.Context, in *CheckEditRolePermissionRequest, opts ...client.CallOption) (*CheckPermissionResponse, error)
	CheckDeletePermissionPermission(ctx context.Context, in *CheckEditRolePermissionRequest, opts ...client.CallOption) (*CheckPermissionResponse, error)
	AddPermissionToRole(ctx context.Context, in *AddPermissionToRoleRequest, opts ...client.CallOption) (*SimpleResponse, error)
	AddPermissionToUser(ctx context.Context, in *AddPermissionToUserRequest, opts ...client.CallOption) (*SimpleResponse, error)
	DeletePermissionFromRole(ctx context.Context, in *DeletePermissionFromRoleRequest, opts ...client.CallOption) (*SimpleResponse, error)
	DeletePermissionFromUser(ctx context.Context, in *DeletePermissionFromUserRequest, opts ...client.CallOption) (*SimpleResponse, error)
	GetAccountRoleInternalNames(ctx context.Context, in *GetAccountRoleInternalNamesRequest, opts ...client.CallOption) (*GetAccountRoleInternalNamesResponse, error)
	GetAccountRoles(ctx context.Context, in *GetAccountRolesRequest, opts ...client.CallOption) (*GetRolesResponse, error)
	GetAccountPermissions(ctx context.Context, in *GetAccountPermissionsRequest, opts ...client.CallOption) (*GetPermissionsResponse, error)
	GetRolePermissions(ctx context.Context, in *GetRolePermissionsRequest, opts ...client.CallOption) (*GetPermissionsResponse, error)
	GetNonPrivateRoles(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetRolesResponse, error)
	GetRolesByType(ctx context.Context, in *GetRolesByTypeRequest, opts ...client.CallOption) (*GetRolesResponse, error)
	GetRoleTypeByInternalName(ctx context.Context, in *GetRoleTypeByInternalNameRequest, opts ...client.CallOption) (*GetRoleTypeByInternalNameResponse, error)
	CheckAssignRolePermission(ctx context.Context, in *CheckAssignRolePermissionRequest, opts ...client.CallOption) (*CheckPermissionResponse, error)
	CheckRemoveRolePermission(ctx context.Context, in *CheckRemoveRolePermissionRequest, opts ...client.CallOption) (*CheckPermissionResponse, error)
	AssignRoleToAccount(ctx context.Context, in *AssignRoleToAccountRequest, opts ...client.CallOption) (*SimpleResponse, error)
	RemoveRoleFromAccount(ctx context.Context, in *RemoveRoleFromAccountRequest, opts ...client.CallOption) (*SimpleResponse, error)
	CheckResourcePermission(ctx context.Context, in *CheckResourcePermissionRequest, opts ...client.CallOption) (*CheckPermissionResponse, error)
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...client.CallOption) (*SimpleResponse, error)
	DeleteResourceByName(ctx context.Context, in *DeleteResourceByNameRequest, opts ...client.CallOption) (*DeleteResourceResponse, error)
	DeleteResourceById(ctx context.Context, in *DeleteResourceByIdRequest, opts ...client.CallOption) (*DeleteResourceResponse, error)
	GetResources(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetResourcesResponse, error)
	GetResourceById(ctx context.Context, in *GetResourceByIdRequest, opts ...client.CallOption) (*GetResourceResponse, error)
	GetResourceDescription(ctx context.Context, in *GetResourceDescriptionRequest, opts ...client.CallOption) (*GetResourceDescriptionResponse, error)
	UpdateResourceDescription(ctx context.Context, in *UpdateResourceDescriptionRequest, opts ...client.CallOption) (*SimpleResponse, error)
	CheckActionPermission(ctx context.Context, in *CheckActionRequest, opts ...client.CallOption) (*CheckPermissionResponse, error)
	CreateAction(ctx context.Context, in *ActionRequest, opts ...client.CallOption) (*SimpleResponse, error)
	DeleteAction(ctx context.Context, in *ActionRequest, opts ...client.CallOption) (*SimpleResponse, error)
	GetActions(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetActionsResponse, error)
	GetDefaultPermissions(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetDefaultPermissionsResponse, error)
}

type rBACService struct {
	c    client.Client
	name string
}

func NewRBACService(name string, c client.Client) RBACService {
	return &rBACService{
		c:    c,
		name: name,
	}
}

func (c *rBACService) CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...client.CallOption) (*CheckPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.CheckPermission", in)
	out := new(CheckPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) CheckCreateRolePermission(ctx context.Context, in *CheckCreateRoleRequest, opts ...client.CallOption) (*CheckPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.CheckCreateRolePermission", in)
	out := new(CheckPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) CheckDeleteRolePermission(ctx context.Context, in *CheckDeleteRoleRequest, opts ...client.CallOption) (*CheckPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.CheckDeleteRolePermission", in)
	out := new(CheckPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.CreateRole", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.DeleteRole", in)
	out := new(DeleteRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) CheckAddPermissionPermission(ctx context.Context, in *CheckEditRolePermissionRequest, opts ...client.CallOption) (*CheckPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.CheckAddPermissionPermission", in)
	out := new(CheckPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) CheckDeletePermissionPermission(ctx context.Context, in *CheckEditRolePermissionRequest, opts ...client.CallOption) (*CheckPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.CheckDeletePermissionPermission", in)
	out := new(CheckPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) AddPermissionToRole(ctx context.Context, in *AddPermissionToRoleRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.AddPermissionToRole", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) AddPermissionToUser(ctx context.Context, in *AddPermissionToUserRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.AddPermissionToUser", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) DeletePermissionFromRole(ctx context.Context, in *DeletePermissionFromRoleRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.DeletePermissionFromRole", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) DeletePermissionFromUser(ctx context.Context, in *DeletePermissionFromUserRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.DeletePermissionFromUser", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) GetAccountRoleInternalNames(ctx context.Context, in *GetAccountRoleInternalNamesRequest, opts ...client.CallOption) (*GetAccountRoleInternalNamesResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.GetAccountRoleInternalNames", in)
	out := new(GetAccountRoleInternalNamesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) GetAccountRoles(ctx context.Context, in *GetAccountRolesRequest, opts ...client.CallOption) (*GetRolesResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.GetAccountRoles", in)
	out := new(GetRolesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) GetAccountPermissions(ctx context.Context, in *GetAccountPermissionsRequest, opts ...client.CallOption) (*GetPermissionsResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.GetAccountPermissions", in)
	out := new(GetPermissionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) GetRolePermissions(ctx context.Context, in *GetRolePermissionsRequest, opts ...client.CallOption) (*GetPermissionsResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.GetRolePermissions", in)
	out := new(GetPermissionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) GetNonPrivateRoles(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetRolesResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.GetNonPrivateRoles", in)
	out := new(GetRolesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) GetRolesByType(ctx context.Context, in *GetRolesByTypeRequest, opts ...client.CallOption) (*GetRolesResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.GetRolesByType", in)
	out := new(GetRolesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) GetRoleTypeByInternalName(ctx context.Context, in *GetRoleTypeByInternalNameRequest, opts ...client.CallOption) (*GetRoleTypeByInternalNameResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.GetRoleTypeByInternalName", in)
	out := new(GetRoleTypeByInternalNameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) CheckAssignRolePermission(ctx context.Context, in *CheckAssignRolePermissionRequest, opts ...client.CallOption) (*CheckPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.CheckAssignRolePermission", in)
	out := new(CheckPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) CheckRemoveRolePermission(ctx context.Context, in *CheckRemoveRolePermissionRequest, opts ...client.CallOption) (*CheckPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.CheckRemoveRolePermission", in)
	out := new(CheckPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) AssignRoleToAccount(ctx context.Context, in *AssignRoleToAccountRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.AssignRoleToAccount", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) RemoveRoleFromAccount(ctx context.Context, in *RemoveRoleFromAccountRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.RemoveRoleFromAccount", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) CheckResourcePermission(ctx context.Context, in *CheckResourcePermissionRequest, opts ...client.CallOption) (*CheckPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.CheckResourcePermission", in)
	out := new(CheckPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.CreateResource", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) DeleteResourceByName(ctx context.Context, in *DeleteResourceByNameRequest, opts ...client.CallOption) (*DeleteResourceResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.DeleteResourceByName", in)
	out := new(DeleteResourceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) DeleteResourceById(ctx context.Context, in *DeleteResourceByIdRequest, opts ...client.CallOption) (*DeleteResourceResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.DeleteResourceById", in)
	out := new(DeleteResourceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) GetResources(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetResourcesResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.GetResources", in)
	out := new(GetResourcesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) GetResourceById(ctx context.Context, in *GetResourceByIdRequest, opts ...client.CallOption) (*GetResourceResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.GetResourceById", in)
	out := new(GetResourceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) GetResourceDescription(ctx context.Context, in *GetResourceDescriptionRequest, opts ...client.CallOption) (*GetResourceDescriptionResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.GetResourceDescription", in)
	out := new(GetResourceDescriptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) UpdateResourceDescription(ctx context.Context, in *UpdateResourceDescriptionRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.UpdateResourceDescription", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) CheckActionPermission(ctx context.Context, in *CheckActionRequest, opts ...client.CallOption) (*CheckPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.CheckActionPermission", in)
	out := new(CheckPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) CreateAction(ctx context.Context, in *ActionRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.CreateAction", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) DeleteAction(ctx context.Context, in *ActionRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.DeleteAction", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) GetActions(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetActionsResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.GetActions", in)
	out := new(GetActionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) GetDefaultPermissions(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetDefaultPermissionsResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.GetDefaultPermissions", in)
	out := new(GetDefaultPermissionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RBACService service

type RBACServiceHandler interface {
	CheckPermission(context.Context, *CheckPermissionRequest, *CheckPermissionResponse) error
	CheckCreateRolePermission(context.Context, *CheckCreateRoleRequest, *CheckPermissionResponse) error
	CheckDeleteRolePermission(context.Context, *CheckDeleteRoleRequest, *CheckPermissionResponse) error
	CreateRole(context.Context, *CreateRoleRequest, *SimpleResponse) error
	DeleteRole(context.Context, *DeleteRoleRequest, *DeleteRoleResponse) error
	CheckAddPermissionPermission(context.Context, *CheckEditRolePermissionRequest, *CheckPermissionResponse) error
	CheckDeletePermissionPermission(context.Context, *CheckEditRolePermissionRequest, *CheckPermissionResponse) error
	AddPermissionToRole(context.Context, *AddPermissionToRoleRequest, *SimpleResponse) error
	AddPermissionToUser(context.Context, *AddPermissionToUserRequest, *SimpleResponse) error
	DeletePermissionFromRole(context.Context, *DeletePermissionFromRoleRequest, *SimpleResponse) error
	DeletePermissionFromUser(context.Context, *DeletePermissionFromUserRequest, *SimpleResponse) error
	GetAccountRoleInternalNames(context.Context, *GetAccountRoleInternalNamesRequest, *GetAccountRoleInternalNamesResponse) error
	GetAccountRoles(context.Context, *GetAccountRolesRequest, *GetRolesResponse) error
	GetAccountPermissions(context.Context, *GetAccountPermissionsRequest, *GetPermissionsResponse) error
	GetRolePermissions(context.Context, *GetRolePermissionsRequest, *GetPermissionsResponse) error
	GetNonPrivateRoles(context.Context, *emptypb.Empty, *GetRolesResponse) error
	GetRolesByType(context.Context, *GetRolesByTypeRequest, *GetRolesResponse) error
	GetRoleTypeByInternalName(context.Context, *GetRoleTypeByInternalNameRequest, *GetRoleTypeByInternalNameResponse) error
	CheckAssignRolePermission(context.Context, *CheckAssignRolePermissionRequest, *CheckPermissionResponse) error
	CheckRemoveRolePermission(context.Context, *CheckRemoveRolePermissionRequest, *CheckPermissionResponse) error
	AssignRoleToAccount(context.Context, *AssignRoleToAccountRequest, *SimpleResponse) error
	RemoveRoleFromAccount(context.Context, *RemoveRoleFromAccountRequest, *SimpleResponse) error
	CheckResourcePermission(context.Context, *CheckResourcePermissionRequest, *CheckPermissionResponse) error
	CreateResource(context.Context, *CreateResourceRequest, *SimpleResponse) error
	DeleteResourceByName(context.Context, *DeleteResourceByNameRequest, *DeleteResourceResponse) error
	DeleteResourceById(context.Context, *DeleteResourceByIdRequest, *DeleteResourceResponse) error
	GetResources(context.Context, *emptypb.Empty, *GetResourcesResponse) error
	GetResourceById(context.Context, *GetResourceByIdRequest, *GetResourceResponse) error
	GetResourceDescription(context.Context, *GetResourceDescriptionRequest, *GetResourceDescriptionResponse) error
	UpdateResourceDescription(context.Context, *UpdateResourceDescriptionRequest, *SimpleResponse) error
	CheckActionPermission(context.Context, *CheckActionRequest, *CheckPermissionResponse) error
	CreateAction(context.Context, *ActionRequest, *SimpleResponse) error
	DeleteAction(context.Context, *ActionRequest, *SimpleResponse) error
	GetActions(context.Context, *emptypb.Empty, *GetActionsResponse) error
	GetDefaultPermissions(context.Context, *emptypb.Empty, *GetDefaultPermissionsResponse) error
}

func RegisterRBACServiceHandler(s server.Server, hdlr RBACServiceHandler, opts ...server.HandlerOption) error {
	type rBACService interface {
		CheckPermission(ctx context.Context, in *CheckPermissionRequest, out *CheckPermissionResponse) error
		CheckCreateRolePermission(ctx context.Context, in *CheckCreateRoleRequest, out *CheckPermissionResponse) error
		CheckDeleteRolePermission(ctx context.Context, in *CheckDeleteRoleRequest, out *CheckPermissionResponse) error
		CreateRole(ctx context.Context, in *CreateRoleRequest, out *SimpleResponse) error
		DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *DeleteRoleResponse) error
		CheckAddPermissionPermission(ctx context.Context, in *CheckEditRolePermissionRequest, out *CheckPermissionResponse) error
		CheckDeletePermissionPermission(ctx context.Context, in *CheckEditRolePermissionRequest, out *CheckPermissionResponse) error
		AddPermissionToRole(ctx context.Context, in *AddPermissionToRoleRequest, out *SimpleResponse) error
		AddPermissionToUser(ctx context.Context, in *AddPermissionToUserRequest, out *SimpleResponse) error
		DeletePermissionFromRole(ctx context.Context, in *DeletePermissionFromRoleRequest, out *SimpleResponse) error
		DeletePermissionFromUser(ctx context.Context, in *DeletePermissionFromUserRequest, out *SimpleResponse) error
		GetAccountRoleInternalNames(ctx context.Context, in *GetAccountRoleInternalNamesRequest, out *GetAccountRoleInternalNamesResponse) error
		GetAccountRoles(ctx context.Context, in *GetAccountRolesRequest, out *GetRolesResponse) error
		GetAccountPermissions(ctx context.Context, in *GetAccountPermissionsRequest, out *GetPermissionsResponse) error
		GetRolePermissions(ctx context.Context, in *GetRolePermissionsRequest, out *GetPermissionsResponse) error
		GetNonPrivateRoles(ctx context.Context, in *emptypb.Empty, out *GetRolesResponse) error
		GetRolesByType(ctx context.Context, in *GetRolesByTypeRequest, out *GetRolesResponse) error
		GetRoleTypeByInternalName(ctx context.Context, in *GetRoleTypeByInternalNameRequest, out *GetRoleTypeByInternalNameResponse) error
		CheckAssignRolePermission(ctx context.Context, in *CheckAssignRolePermissionRequest, out *CheckPermissionResponse) error
		CheckRemoveRolePermission(ctx context.Context, in *CheckRemoveRolePermissionRequest, out *CheckPermissionResponse) error
		AssignRoleToAccount(ctx context.Context, in *AssignRoleToAccountRequest, out *SimpleResponse) error
		RemoveRoleFromAccount(ctx context.Context, in *RemoveRoleFromAccountRequest, out *SimpleResponse) error
		CheckResourcePermission(ctx context.Context, in *CheckResourcePermissionRequest, out *CheckPermissionResponse) error
		CreateResource(ctx context.Context, in *CreateResourceRequest, out *SimpleResponse) error
		DeleteResourceByName(ctx context.Context, in *DeleteResourceByNameRequest, out *DeleteResourceResponse) error
		DeleteResourceById(ctx context.Context, in *DeleteResourceByIdRequest, out *DeleteResourceResponse) error
		GetResources(ctx context.Context, in *emptypb.Empty, out *GetResourcesResponse) error
		GetResourceById(ctx context.Context, in *GetResourceByIdRequest, out *GetResourceResponse) error
		GetResourceDescription(ctx context.Context, in *GetResourceDescriptionRequest, out *GetResourceDescriptionResponse) error
		UpdateResourceDescription(ctx context.Context, in *UpdateResourceDescriptionRequest, out *SimpleResponse) error
		CheckActionPermission(ctx context.Context, in *CheckActionRequest, out *CheckPermissionResponse) error
		CreateAction(ctx context.Context, in *ActionRequest, out *SimpleResponse) error
		DeleteAction(ctx context.Context, in *ActionRequest, out *SimpleResponse) error
		GetActions(ctx context.Context, in *emptypb.Empty, out *GetActionsResponse) error
		GetDefaultPermissions(ctx context.Context, in *emptypb.Empty, out *GetDefaultPermissionsResponse) error
	}
	type RBACService struct {
		rBACService
	}
	h := &rBACServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RBACService{h}, opts...))
}

type rBACServiceHandler struct {
	RBACServiceHandler
}

func (h *rBACServiceHandler) CheckPermission(ctx context.Context, in *CheckPermissionRequest, out *CheckPermissionResponse) error {
	return h.RBACServiceHandler.CheckPermission(ctx, in, out)
}

func (h *rBACServiceHandler) CheckCreateRolePermission(ctx context.Context, in *CheckCreateRoleRequest, out *CheckPermissionResponse) error {
	return h.RBACServiceHandler.CheckCreateRolePermission(ctx, in, out)
}

func (h *rBACServiceHandler) CheckDeleteRolePermission(ctx context.Context, in *CheckDeleteRoleRequest, out *CheckPermissionResponse) error {
	return h.RBACServiceHandler.CheckDeleteRolePermission(ctx, in, out)
}

func (h *rBACServiceHandler) CreateRole(ctx context.Context, in *CreateRoleRequest, out *SimpleResponse) error {
	return h.RBACServiceHandler.CreateRole(ctx, in, out)
}

func (h *rBACServiceHandler) DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *DeleteRoleResponse) error {
	return h.RBACServiceHandler.DeleteRole(ctx, in, out)
}

func (h *rBACServiceHandler) CheckAddPermissionPermission(ctx context.Context, in *CheckEditRolePermissionRequest, out *CheckPermissionResponse) error {
	return h.RBACServiceHandler.CheckAddPermissionPermission(ctx, in, out)
}

func (h *rBACServiceHandler) CheckDeletePermissionPermission(ctx context.Context, in *CheckEditRolePermissionRequest, out *CheckPermissionResponse) error {
	return h.RBACServiceHandler.CheckDeletePermissionPermission(ctx, in, out)
}

func (h *rBACServiceHandler) AddPermissionToRole(ctx context.Context, in *AddPermissionToRoleRequest, out *SimpleResponse) error {
	return h.RBACServiceHandler.AddPermissionToRole(ctx, in, out)
}

func (h *rBACServiceHandler) AddPermissionToUser(ctx context.Context, in *AddPermissionToUserRequest, out *SimpleResponse) error {
	return h.RBACServiceHandler.AddPermissionToUser(ctx, in, out)
}

func (h *rBACServiceHandler) DeletePermissionFromRole(ctx context.Context, in *DeletePermissionFromRoleRequest, out *SimpleResponse) error {
	return h.RBACServiceHandler.DeletePermissionFromRole(ctx, in, out)
}

func (h *rBACServiceHandler) DeletePermissionFromUser(ctx context.Context, in *DeletePermissionFromUserRequest, out *SimpleResponse) error {
	return h.RBACServiceHandler.DeletePermissionFromUser(ctx, in, out)
}

func (h *rBACServiceHandler) GetAccountRoleInternalNames(ctx context.Context, in *GetAccountRoleInternalNamesRequest, out *GetAccountRoleInternalNamesResponse) error {
	return h.RBACServiceHandler.GetAccountRoleInternalNames(ctx, in, out)
}

func (h *rBACServiceHandler) GetAccountRoles(ctx context.Context, in *GetAccountRolesRequest, out *GetRolesResponse) error {
	return h.RBACServiceHandler.GetAccountRoles(ctx, in, out)
}

func (h *rBACServiceHandler) GetAccountPermissions(ctx context.Context, in *GetAccountPermissionsRequest, out *GetPermissionsResponse) error {
	return h.RBACServiceHandler.GetAccountPermissions(ctx, in, out)
}

func (h *rBACServiceHandler) GetRolePermissions(ctx context.Context, in *GetRolePermissionsRequest, out *GetPermissionsResponse) error {
	return h.RBACServiceHandler.GetRolePermissions(ctx, in, out)
}

func (h *rBACServiceHandler) GetNonPrivateRoles(ctx context.Context, in *emptypb.Empty, out *GetRolesResponse) error {
	return h.RBACServiceHandler.GetNonPrivateRoles(ctx, in, out)
}

func (h *rBACServiceHandler) GetRolesByType(ctx context.Context, in *GetRolesByTypeRequest, out *GetRolesResponse) error {
	return h.RBACServiceHandler.GetRolesByType(ctx, in, out)
}

func (h *rBACServiceHandler) GetRoleTypeByInternalName(ctx context.Context, in *GetRoleTypeByInternalNameRequest, out *GetRoleTypeByInternalNameResponse) error {
	return h.RBACServiceHandler.GetRoleTypeByInternalName(ctx, in, out)
}

func (h *rBACServiceHandler) CheckAssignRolePermission(ctx context.Context, in *CheckAssignRolePermissionRequest, out *CheckPermissionResponse) error {
	return h.RBACServiceHandler.CheckAssignRolePermission(ctx, in, out)
}

func (h *rBACServiceHandler) CheckRemoveRolePermission(ctx context.Context, in *CheckRemoveRolePermissionRequest, out *CheckPermissionResponse) error {
	return h.RBACServiceHandler.CheckRemoveRolePermission(ctx, in, out)
}

func (h *rBACServiceHandler) AssignRoleToAccount(ctx context.Context, in *AssignRoleToAccountRequest, out *SimpleResponse) error {
	return h.RBACServiceHandler.AssignRoleToAccount(ctx, in, out)
}

func (h *rBACServiceHandler) RemoveRoleFromAccount(ctx context.Context, in *RemoveRoleFromAccountRequest, out *SimpleResponse) error {
	return h.RBACServiceHandler.RemoveRoleFromAccount(ctx, in, out)
}

func (h *rBACServiceHandler) CheckResourcePermission(ctx context.Context, in *CheckResourcePermissionRequest, out *CheckPermissionResponse) error {
	return h.RBACServiceHandler.CheckResourcePermission(ctx, in, out)
}

func (h *rBACServiceHandler) CreateResource(ctx context.Context, in *CreateResourceRequest, out *SimpleResponse) error {
	return h.RBACServiceHandler.CreateResource(ctx, in, out)
}

func (h *rBACServiceHandler) DeleteResourceByName(ctx context.Context, in *DeleteResourceByNameRequest, out *DeleteResourceResponse) error {
	return h.RBACServiceHandler.DeleteResourceByName(ctx, in, out)
}

func (h *rBACServiceHandler) DeleteResourceById(ctx context.Context, in *DeleteResourceByIdRequest, out *DeleteResourceResponse) error {
	return h.RBACServiceHandler.DeleteResourceById(ctx, in, out)
}

func (h *rBACServiceHandler) GetResources(ctx context.Context, in *emptypb.Empty, out *GetResourcesResponse) error {
	return h.RBACServiceHandler.GetResources(ctx, in, out)
}

func (h *rBACServiceHandler) GetResourceById(ctx context.Context, in *GetResourceByIdRequest, out *GetResourceResponse) error {
	return h.RBACServiceHandler.GetResourceById(ctx, in, out)
}

func (h *rBACServiceHandler) GetResourceDescription(ctx context.Context, in *GetResourceDescriptionRequest, out *GetResourceDescriptionResponse) error {
	return h.RBACServiceHandler.GetResourceDescription(ctx, in, out)
}

func (h *rBACServiceHandler) UpdateResourceDescription(ctx context.Context, in *UpdateResourceDescriptionRequest, out *SimpleResponse) error {
	return h.RBACServiceHandler.UpdateResourceDescription(ctx, in, out)
}

func (h *rBACServiceHandler) CheckActionPermission(ctx context.Context, in *CheckActionRequest, out *CheckPermissionResponse) error {
	return h.RBACServiceHandler.CheckActionPermission(ctx, in, out)
}

func (h *rBACServiceHandler) CreateAction(ctx context.Context, in *ActionRequest, out *SimpleResponse) error {
	return h.RBACServiceHandler.CreateAction(ctx, in, out)
}

func (h *rBACServiceHandler) DeleteAction(ctx context.Context, in *ActionRequest, out *SimpleResponse) error {
	return h.RBACServiceHandler.DeleteAction(ctx, in, out)
}

func (h *rBACServiceHandler) GetActions(ctx context.Context, in *emptypb.Empty, out *GetActionsResponse) error {
	return h.RBACServiceHandler.GetActions(ctx, in, out)
}

func (h *rBACServiceHandler) GetDefaultPermissions(ctx context.Context, in *emptypb.Empty, out *GetDefaultPermissionsResponse) error {
	return h.RBACServiceHandler.GetDefaultPermissions(ctx, in, out)
}
