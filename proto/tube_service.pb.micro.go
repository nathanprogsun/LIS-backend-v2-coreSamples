// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/tube_service.proto

package coresamples_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TubeService service

func NewTubeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TubeService service

type TubeService interface {
	GetRequiredTubeVolume(ctx context.Context, in *RequiredTubeVolumeRequest, opts ...client.CallOption) (*RequiredTubeVolumeResponse, error)
	GetTestsByBloodType(ctx context.Context, in *BloodType, opts ...client.CallOption) (*TestIDs, error)
	GetTube(ctx context.Context, in *TubeID, opts ...client.CallOption) (*Tube, error)
	GetTubeTests(ctx context.Context, in *TubeID, opts ...client.CallOption) (*TubeTests, error)
}

type tubeService struct {
	c    client.Client
	name string
}

func NewTubeService(name string, c client.Client) TubeService {
	return &tubeService{
		c:    c,
		name: name,
	}
}

func (c *tubeService) GetRequiredTubeVolume(ctx context.Context, in *RequiredTubeVolumeRequest, opts ...client.CallOption) (*RequiredTubeVolumeResponse, error) {
	req := c.c.NewRequest(c.name, "TubeService.GetRequiredTubeVolume", in)
	out := new(RequiredTubeVolumeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tubeService) GetTestsByBloodType(ctx context.Context, in *BloodType, opts ...client.CallOption) (*TestIDs, error) {
	req := c.c.NewRequest(c.name, "TubeService.GetTestsByBloodType", in)
	out := new(TestIDs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tubeService) GetTube(ctx context.Context, in *TubeID, opts ...client.CallOption) (*Tube, error) {
	req := c.c.NewRequest(c.name, "TubeService.GetTube", in)
	out := new(Tube)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tubeService) GetTubeTests(ctx context.Context, in *TubeID, opts ...client.CallOption) (*TubeTests, error) {
	req := c.c.NewRequest(c.name, "TubeService.GetTubeTests", in)
	out := new(TubeTests)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TubeService service

type TubeServiceHandler interface {
	GetRequiredTubeVolume(context.Context, *RequiredTubeVolumeRequest, *RequiredTubeVolumeResponse) error
	GetTestsByBloodType(context.Context, *BloodType, *TestIDs) error
	GetTube(context.Context, *TubeID, *Tube) error
	GetTubeTests(context.Context, *TubeID, *TubeTests) error
}

func RegisterTubeServiceHandler(s server.Server, hdlr TubeServiceHandler, opts ...server.HandlerOption) error {
	type tubeService interface {
		GetRequiredTubeVolume(ctx context.Context, in *RequiredTubeVolumeRequest, out *RequiredTubeVolumeResponse) error
		GetTestsByBloodType(ctx context.Context, in *BloodType, out *TestIDs) error
		GetTube(ctx context.Context, in *TubeID, out *Tube) error
		GetTubeTests(ctx context.Context, in *TubeID, out *TubeTests) error
	}
	type TubeService struct {
		tubeService
	}
	h := &tubeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TubeService{h}, opts...))
}

type tubeServiceHandler struct {
	TubeServiceHandler
}

func (h *tubeServiceHandler) GetRequiredTubeVolume(ctx context.Context, in *RequiredTubeVolumeRequest, out *RequiredTubeVolumeResponse) error {
	return h.TubeServiceHandler.GetRequiredTubeVolume(ctx, in, out)
}

func (h *tubeServiceHandler) GetTestsByBloodType(ctx context.Context, in *BloodType, out *TestIDs) error {
	return h.TubeServiceHandler.GetTestsByBloodType(ctx, in, out)
}

func (h *tubeServiceHandler) GetTube(ctx context.Context, in *TubeID, out *Tube) error {
	return h.TubeServiceHandler.GetTube(ctx, in, out)
}

func (h *tubeServiceHandler) GetTubeTests(ctx context.Context, in *TubeID, out *TubeTests) error {
	return h.TubeServiceHandler.GetTubeTests(ctx, in, out)
}
