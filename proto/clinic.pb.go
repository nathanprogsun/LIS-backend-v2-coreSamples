// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: proto/clinic.proto

package coresamples_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetFirstCustomerOfClinicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicId string `protobuf:"bytes,1,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
}

func (x *GetFirstCustomerOfClinicRequest) Reset() {
	*x = GetFirstCustomerOfClinicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFirstCustomerOfClinicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFirstCustomerOfClinicRequest) ProtoMessage() {}

func (x *GetFirstCustomerOfClinicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFirstCustomerOfClinicRequest.ProtoReflect.Descriptor instead.
func (*GetFirstCustomerOfClinicRequest) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{0}
}

func (x *GetFirstCustomerOfClinicRequest) GetClinicId() string {
	if x != nil {
		return x.ClinicId
	}
	return ""
}

type GetFirstCustomerOfClinicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId         int32  `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	UserId             int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CustomerFirstName  string `protobuf:"bytes,3,opt,name=customer_first_name,json=customerFirstName,proto3" json:"customer_first_name,omitempty"`
	CustomerLastName   string `protobuf:"bytes,4,opt,name=customer_last_name,json=customerLastName,proto3" json:"customer_last_name,omitempty"`
	CustomerMiddleName string `protobuf:"bytes,5,opt,name=customer_middle_name,json=customerMiddleName,proto3" json:"customer_middle_name,omitempty"`
	CustomerSuffix     string `protobuf:"bytes,6,opt,name=customer_suffix,json=customerSuffix,proto3" json:"customer_suffix,omitempty"`
	IsActive           bool   `protobuf:"varint,7,opt,name=isActive,proto3" json:"isActive,omitempty"`
}

func (x *GetFirstCustomerOfClinicResponse) Reset() {
	*x = GetFirstCustomerOfClinicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFirstCustomerOfClinicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFirstCustomerOfClinicResponse) ProtoMessage() {}

func (x *GetFirstCustomerOfClinicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFirstCustomerOfClinicResponse.ProtoReflect.Descriptor instead.
func (*GetFirstCustomerOfClinicResponse) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{1}
}

func (x *GetFirstCustomerOfClinicResponse) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *GetFirstCustomerOfClinicResponse) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFirstCustomerOfClinicResponse) GetCustomerFirstName() string {
	if x != nil {
		return x.CustomerFirstName
	}
	return ""
}

func (x *GetFirstCustomerOfClinicResponse) GetCustomerLastName() string {
	if x != nil {
		return x.CustomerLastName
	}
	return ""
}

func (x *GetFirstCustomerOfClinicResponse) GetCustomerMiddleName() string {
	if x != nil {
		return x.CustomerMiddleName
	}
	return ""
}

func (x *GetFirstCustomerOfClinicResponse) GetCustomerSuffix() string {
	if x != nil {
		return x.CustomerSuffix
	}
	return ""
}

func (x *GetFirstCustomerOfClinicResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

// Request protobuf for Clinic Attribute Value Check
type CheckClinicAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicId string `protobuf:"bytes,1,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
}

func (x *CheckClinicAttributesRequest) Reset() {
	*x = CheckClinicAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckClinicAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckClinicAttributesRequest) ProtoMessage() {}

func (x *CheckClinicAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckClinicAttributesRequest.ProtoReflect.Descriptor instead.
func (*CheckClinicAttributesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{2}
}

func (x *CheckClinicAttributesRequest) GetClinicId() string {
	if x != nil {
		return x.ClinicId
	}
	return ""
}

// Response protobuf for Clinic Attribute Value Check
type CheckClinicAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicAttributeValueExists bool `protobuf:"varint,1,opt,name=clinic_attribute_value_exists,json=clinicAttributeValueExists,proto3" json:"clinic_attribute_value_exists,omitempty"`
}

func (x *CheckClinicAttributesResponse) Reset() {
	*x = CheckClinicAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckClinicAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckClinicAttributesResponse) ProtoMessage() {}

func (x *CheckClinicAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckClinicAttributesResponse.ProtoReflect.Descriptor instead.
func (*CheckClinicAttributesResponse) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{3}
}

func (x *CheckClinicAttributesResponse) GetClinicAttributeValueExists() bool {
	if x != nil {
		return x.ClinicAttributeValueExists
	}
	return false
}

type SignUpClinicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token           string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ClinicName      string `protobuf:"bytes,2,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
	ClinicAddress   string `protobuf:"bytes,3,opt,name=clinic_address,json=clinicAddress,proto3" json:"clinic_address,omitempty"`
	ClinicCity      string `protobuf:"bytes,4,opt,name=clinic_city,json=clinicCity,proto3" json:"clinic_city,omitempty"`
	ClinicState     string `protobuf:"bytes,5,opt,name=clinic_state,json=clinicState,proto3" json:"clinic_state,omitempty"`
	ClinicZip       string `protobuf:"bytes,6,opt,name=clinic_zip,json=clinicZip,proto3" json:"clinic_zip,omitempty"`
	ClinicCountry   string `protobuf:"bytes,7,opt,name=clinic_country,json=clinicCountry,proto3" json:"clinic_country,omitempty"`
	ClinicPhone     string `protobuf:"bytes,8,opt,name=clinic_phone,json=clinicPhone,proto3" json:"clinic_phone,omitempty"`
	ClinicEmail     string `protobuf:"bytes,9,opt,name=clinic_email,json=clinicEmail,proto3" json:"clinic_email,omitempty"`
	ClinicWebsite   string `protobuf:"bytes,10,opt,name=clinic_website,json=clinicWebsite,proto3" json:"clinic_website,omitempty"`
	ClinicFax       string `protobuf:"bytes,11,opt,name=clinic_fax,json=clinicFax,proto3" json:"clinic_fax,omitempty"`
	ClinicNpiNumber string `protobuf:"bytes,12,opt,name=clinic_npi_number,json=clinicNpiNumber,proto3" json:"clinic_npi_number,omitempty"`
}

func (x *SignUpClinicRequest) Reset() {
	*x = SignUpClinicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUpClinicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUpClinicRequest) ProtoMessage() {}

func (x *SignUpClinicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUpClinicRequest.ProtoReflect.Descriptor instead.
func (*SignUpClinicRequest) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{4}
}

func (x *SignUpClinicRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SignUpClinicRequest) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

func (x *SignUpClinicRequest) GetClinicAddress() string {
	if x != nil {
		return x.ClinicAddress
	}
	return ""
}

func (x *SignUpClinicRequest) GetClinicCity() string {
	if x != nil {
		return x.ClinicCity
	}
	return ""
}

func (x *SignUpClinicRequest) GetClinicState() string {
	if x != nil {
		return x.ClinicState
	}
	return ""
}

func (x *SignUpClinicRequest) GetClinicZip() string {
	if x != nil {
		return x.ClinicZip
	}
	return ""
}

func (x *SignUpClinicRequest) GetClinicCountry() string {
	if x != nil {
		return x.ClinicCountry
	}
	return ""
}

func (x *SignUpClinicRequest) GetClinicPhone() string {
	if x != nil {
		return x.ClinicPhone
	}
	return ""
}

func (x *SignUpClinicRequest) GetClinicEmail() string {
	if x != nil {
		return x.ClinicEmail
	}
	return ""
}

func (x *SignUpClinicRequest) GetClinicWebsite() string {
	if x != nil {
		return x.ClinicWebsite
	}
	return ""
}

func (x *SignUpClinicRequest) GetClinicFax() string {
	if x != nil {
		return x.ClinicFax
	}
	return ""
}

func (x *SignUpClinicRequest) GetClinicNpiNumber() string {
	if x != nil {
		return x.ClinicNpiNumber
	}
	return ""
}

// Response DTO
type SignUpClinicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ClinicId int32  `protobuf:"varint,3,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
}

func (x *SignUpClinicResponse) Reset() {
	*x = SignUpClinicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUpClinicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUpClinicResponse) ProtoMessage() {}

func (x *SignUpClinicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUpClinicResponse.ProtoReflect.Descriptor instead.
func (*SignUpClinicResponse) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{5}
}

func (x *SignUpClinicResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SignUpClinicResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SignUpClinicResponse) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

// Request protobuf for Search Clinics by Name
type SearchClinicsNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicsName string `protobuf:"bytes,1,opt,name=clinics_name,json=clinicsName,proto3" json:"clinics_name,omitempty"`
}

func (x *SearchClinicsNameRequest) Reset() {
	*x = SearchClinicsNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchClinicsNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchClinicsNameRequest) ProtoMessage() {}

func (x *SearchClinicsNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchClinicsNameRequest.ProtoReflect.Descriptor instead.
func (*SearchClinicsNameRequest) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{6}
}

func (x *SearchClinicsNameRequest) GetClinicsName() string {
	if x != nil {
		return x.ClinicsName
	}
	return ""
}

type ClinicsObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicId   string `protobuf:"bytes,1,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	ClinicName string `protobuf:"bytes,2,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
}

func (x *ClinicsObject) Reset() {
	*x = ClinicsObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicsObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicsObject) ProtoMessage() {}

func (x *ClinicsObject) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicsObject.ProtoReflect.Descriptor instead.
func (*ClinicsObject) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{7}
}

func (x *ClinicsObject) GetClinicId() string {
	if x != nil {
		return x.ClinicId
	}
	return ""
}

func (x *ClinicsObject) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

// Response protobuf for Search Clinics by Name
type SearchClinicsInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clinics []*ClinicsObject `protobuf:"bytes,1,rep,name=clinics,proto3" json:"clinics,omitempty"`
}

func (x *SearchClinicsInfoResponse) Reset() {
	*x = SearchClinicsInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchClinicsInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchClinicsInfoResponse) ProtoMessage() {}

func (x *SearchClinicsInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchClinicsInfoResponse.ProtoReflect.Descriptor instead.
func (*SearchClinicsInfoResponse) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{8}
}

func (x *SearchClinicsInfoResponse) GetClinics() []*ClinicsObject {
	if x != nil {
		return x.Clinics
	}
	return nil
}

type ListClinicCustomersByClinicIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicId string `protobuf:"bytes,1,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
}

func (x *ListClinicCustomersByClinicIDRequest) Reset() {
	*x = ListClinicCustomersByClinicIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClinicCustomersByClinicIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClinicCustomersByClinicIDRequest) ProtoMessage() {}

func (x *ListClinicCustomersByClinicIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClinicCustomersByClinicIDRequest.ProtoReflect.Descriptor instead.
func (*ListClinicCustomersByClinicIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{9}
}

func (x *ListClinicCustomersByClinicIDRequest) GetClinicId() string {
	if x != nil {
		return x.ClinicId
	}
	return ""
}

type GetClinicsClinicAccountIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicAccountIds []string `protobuf:"bytes,1,rep,name=clinic_account_ids,json=clinicAccountIds,proto3" json:"clinic_account_ids,omitempty"`
}

func (x *GetClinicsClinicAccountIDsRequest) Reset() {
	*x = GetClinicsClinicAccountIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClinicsClinicAccountIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClinicsClinicAccountIDsRequest) ProtoMessage() {}

func (x *GetClinicsClinicAccountIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClinicsClinicAccountIDsRequest.ProtoReflect.Descriptor instead.
func (*GetClinicsClinicAccountIDsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{10}
}

func (x *GetClinicsClinicAccountIDsRequest) GetClinicAccountIds() []string {
	if x != nil {
		return x.ClinicAccountIds
	}
	return nil
}

type EditClinicNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicId   string `protobuf:"bytes,1,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	ClinicName string `protobuf:"bytes,2,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
}

func (x *EditClinicNameRequest) Reset() {
	*x = EditClinicNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditClinicNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditClinicNameRequest) ProtoMessage() {}

func (x *EditClinicNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditClinicNameRequest.ProtoReflect.Descriptor instead.
func (*EditClinicNameRequest) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{11}
}

func (x *EditClinicNameRequest) GetClinicId() string {
	if x != nil {
		return x.ClinicId
	}
	return ""
}

func (x *EditClinicNameRequest) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

type ModifyClinicNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JwtToken   string `protobuf:"bytes,1,opt,name=jwt_token,json=jwtToken,proto3" json:"jwt_token,omitempty"`
	ClinicId   string `protobuf:"bytes,2,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	ClinicName string `protobuf:"bytes,3,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
}

func (x *ModifyClinicNamesRequest) Reset() {
	*x = ModifyClinicNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyClinicNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyClinicNamesRequest) ProtoMessage() {}

func (x *ModifyClinicNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyClinicNamesRequest.ProtoReflect.Descriptor instead.
func (*ModifyClinicNamesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{12}
}

func (x *ModifyClinicNamesRequest) GetJwtToken() string {
	if x != nil {
		return x.JwtToken
	}
	return ""
}

func (x *ModifyClinicNamesRequest) GetClinicId() string {
	if x != nil {
		return x.ClinicId
	}
	return ""
}

func (x *ModifyClinicNamesRequest) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

type UpdateClinicNPINumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicId        string `protobuf:"bytes,1,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	ClinicNpiNumber string `protobuf:"bytes,2,opt,name=clinic_npi_number,json=clinicNpiNumber,proto3" json:"clinic_npi_number,omitempty"`
}

func (x *UpdateClinicNPINumberRequest) Reset() {
	*x = UpdateClinicNPINumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClinicNPINumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClinicNPINumberRequest) ProtoMessage() {}

func (x *UpdateClinicNPINumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClinicNPINumberRequest.ProtoReflect.Descriptor instead.
func (*UpdateClinicNPINumberRequest) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateClinicNPINumberRequest) GetClinicId() string {
	if x != nil {
		return x.ClinicId
	}
	return ""
}

func (x *UpdateClinicNPINumberRequest) GetClinicNpiNumber() string {
	if x != nil {
		return x.ClinicNpiNumber
	}
	return ""
}

type ListClinicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListClinicRequest) Reset() {
	*x = ListClinicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClinicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClinicRequest) ProtoMessage() {}

func (x *ListClinicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClinicRequest.ProtoReflect.Descriptor instead.
func (*ListClinicRequest) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{14}
}

func (x *ListClinicRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListClinicRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetClinicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicName string `protobuf:"bytes,1,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
}

func (x *GetClinicRequest) Reset() {
	*x = GetClinicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClinicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClinicRequest) ProtoMessage() {}

func (x *GetClinicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClinicRequest.ProtoReflect.Descriptor instead.
func (*GetClinicRequest) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{15}
}

func (x *GetClinicRequest) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

type CreateClinicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicName string `protobuf:"bytes,1,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
}

func (x *CreateClinicRequest) Reset() {
	*x = CreateClinicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClinicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClinicRequest) ProtoMessage() {}

func (x *CreateClinicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClinicRequest.ProtoReflect.Descriptor instead.
func (*CreateClinicRequest) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{16}
}

func (x *CreateClinicRequest) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

type ListClinicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*ListClinicResponse `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *ListClinicResponse) Reset() {
	*x = ListClinicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClinicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClinicResponse) ProtoMessage() {}

func (x *ListClinicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClinicResponse.ProtoReflect.Descriptor instead.
func (*ListClinicResponse) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{17}
}

func (x *ListClinicResponse) GetResponse() []*ListClinicResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type GetClinicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*FullClinic `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *GetClinicResponse) Reset() {
	*x = GetClinicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClinicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClinicResponse) ProtoMessage() {}

func (x *GetClinicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClinicResponse.ProtoReflect.Descriptor instead.
func (*GetClinicResponse) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{18}
}

func (x *GetClinicResponse) GetResponse() []*FullClinic {
	if x != nil {
		return x.Response
	}
	return nil
}

type FullClinic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicId        int32  `protobuf:"varint,1,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	ClinicName      string `protobuf:"bytes,2,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
	UserId          int32  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ClinicType      string `protobuf:"bytes,4,opt,name=clinic_type,json=clinicType,proto3" json:"clinic_type,omitempty"`
	IsActive        bool   `protobuf:"varint,5,opt,name=isActive,proto3" json:"isActive,omitempty"`
	ClinicNpiNumber string `protobuf:"bytes,6,opt,name=clinic_npi_number,json=clinicNpiNumber,proto3" json:"clinic_npi_number,omitempty"`
	ClinicAccountId int32  `protobuf:"varint,7,opt,name=clinic_account_id,json=clinicAccountId,proto3" json:"clinic_account_id,omitempty"`
}

func (x *FullClinic) Reset() {
	*x = FullClinic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullClinic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullClinic) ProtoMessage() {}

func (x *FullClinic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullClinic.ProtoReflect.Descriptor instead.
func (*FullClinic) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{19}
}

func (x *FullClinic) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *FullClinic) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

func (x *FullClinic) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FullClinic) GetClinicType() string {
	if x != nil {
		return x.ClinicType
	}
	return ""
}

func (x *FullClinic) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *FullClinic) GetClinicNpiNumber() string {
	if x != nil {
		return x.ClinicNpiNumber
	}
	return ""
}

func (x *FullClinic) GetClinicAccountId() int32 {
	if x != nil {
		return x.ClinicAccountId
	}
	return 0
}

type GetCustomerClinicNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *GetCustomerClinicNamesRequest) Reset() {
	*x = GetCustomerClinicNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerClinicNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerClinicNamesRequest) ProtoMessage() {}

func (x *GetCustomerClinicNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerClinicNamesRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerClinicNamesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{20}
}

func (x *GetCustomerClinicNamesRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

type GetCustomerClinicNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *ClinicNames `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetCustomerClinicNamesResponse) Reset() {
	*x = GetCustomerClinicNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerClinicNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerClinicNamesResponse) ProtoMessage() {}

func (x *GetCustomerClinicNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerClinicNamesResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerClinicNamesResponse) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{21}
}

func (x *GetCustomerClinicNamesResponse) GetResponse() *ClinicNames {
	if x != nil {
		return x.Response
	}
	return nil
}

type ClinicNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clinics []*ListClinicCustomerRequest `protobuf:"bytes,1,rep,name=clinics,proto3" json:"clinics,omitempty"`
}

func (x *ClinicNames) Reset() {
	*x = ClinicNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicNames) ProtoMessage() {}

func (x *ClinicNames) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicNames.ProtoReflect.Descriptor instead.
func (*ClinicNames) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{22}
}

func (x *ClinicNames) GetClinics() []*ListClinicCustomerRequest {
	if x != nil {
		return x.Clinics
	}
	return nil
}

type ListClinicCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicName string `protobuf:"bytes,1,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
}

func (x *ListClinicCustomerRequest) Reset() {
	*x = ListClinicCustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClinicCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClinicCustomerRequest) ProtoMessage() {}

func (x *ListClinicCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClinicCustomerRequest.ProtoReflect.Descriptor instead.
func (*ListClinicCustomerRequest) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{23}
}

func (x *ListClinicCustomerRequest) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

type ListClinicCustomerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicCustomers []*ClinicCustomers `protobuf:"bytes,1,rep,name=clinic_customers,json=clinicCustomers,proto3" json:"clinic_customers,omitempty"`
}

func (x *ListClinicCustomerResponse) Reset() {
	*x = ListClinicCustomerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClinicCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClinicCustomerResponse) ProtoMessage() {}

func (x *ListClinicCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClinicCustomerResponse.ProtoReflect.Descriptor instead.
func (*ListClinicCustomerResponse) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{24}
}

func (x *ListClinicCustomerResponse) GetClinicCustomers() []*ClinicCustomers {
	if x != nil {
		return x.ClinicCustomers
	}
	return nil
}

type ListClinicCustomerByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicCustomers *ClinicCustomers `protobuf:"bytes,1,opt,name=clinic_customers,json=clinicCustomers,proto3" json:"clinic_customers,omitempty"`
}

func (x *ListClinicCustomerByIDResponse) Reset() {
	*x = ListClinicCustomerByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClinicCustomerByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClinicCustomerByIDResponse) ProtoMessage() {}

func (x *ListClinicCustomerByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClinicCustomerByIDResponse.ProtoReflect.Descriptor instead.
func (*ListClinicCustomerByIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{25}
}

func (x *ListClinicCustomerByIDResponse) GetClinicCustomers() *ClinicCustomers {
	if x != nil {
		return x.ClinicCustomers
	}
	return nil
}

type ClinicCustomers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicName string          `protobuf:"bytes,1,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
	Customers  []*FullCustomer `protobuf:"bytes,2,rep,name=customers,proto3" json:"customers,omitempty"`
}

func (x *ClinicCustomers) Reset() {
	*x = ClinicCustomers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicCustomers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicCustomers) ProtoMessage() {}

func (x *ClinicCustomers) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicCustomers.ProtoReflect.Descriptor instead.
func (*ClinicCustomers) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{26}
}

func (x *ClinicCustomers) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

func (x *ClinicCustomers) GetCustomers() []*FullCustomer {
	if x != nil {
		return x.Customers
	}
	return nil
}

type ClinicCustomerIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *ClinicCustomerIds) Reset() {
	*x = ClinicCustomerIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicCustomerIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicCustomerIds) ProtoMessage() {}

func (x *ClinicCustomerIds) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicCustomerIds.ProtoReflect.Descriptor instead.
func (*ClinicCustomerIds) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{27}
}

func (x *ClinicCustomerIds) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

type ClinicID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicId int32 `protobuf:"varint,1,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
}

func (x *ClinicID) Reset() {
	*x = ClinicID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicID) ProtoMessage() {}

func (x *ClinicID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicID.ProtoReflect.Descriptor instead.
func (*ClinicID) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{28}
}

func (x *ClinicID) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

type Clinic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicId   int32  `protobuf:"varint,1,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	ClinicName string `protobuf:"bytes,2,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
}

func (x *Clinic) Reset() {
	*x = Clinic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clinic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clinic) ProtoMessage() {}

func (x *Clinic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clinic.ProtoReflect.Descriptor instead.
func (*Clinic) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{29}
}

func (x *Clinic) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *Clinic) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

type FuzzySearchClinicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicSearchInput string `protobuf:"bytes,1,opt,name=clinic_search_input,json=clinicSearchInput,proto3" json:"clinic_search_input,omitempty"`
	CustomerId        string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"` // Optional
}

func (x *FuzzySearchClinicsRequest) Reset() {
	*x = FuzzySearchClinicsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzySearchClinicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzySearchClinicsRequest) ProtoMessage() {}

func (x *FuzzySearchClinicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzySearchClinicsRequest.ProtoReflect.Descriptor instead.
func (*FuzzySearchClinicsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{30}
}

func (x *FuzzySearchClinicsRequest) GetClinicSearchInput() string {
	if x != nil {
		return x.ClinicSearchInput
	}
	return ""
}

func (x *FuzzySearchClinicsRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

type ClinicAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressId        int32  `protobuf:"varint,1,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	AddressType      string `protobuf:"bytes,2,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	StreetAddress    string `protobuf:"bytes,3,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	AptPo            string `protobuf:"bytes,4,opt,name=apt_po,json=aptPo,proto3" json:"apt_po,omitempty"`
	City             string `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	State            string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Zipcode          string `protobuf:"bytes,7,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	Country          string `protobuf:"bytes,8,opt,name=country,proto3" json:"country,omitempty"`
	AddressConfirmed bool   `protobuf:"varint,9,opt,name=address_confirmed,json=addressConfirmed,proto3" json:"address_confirmed,omitempty"`
	IsPrimaryAddress bool   `protobuf:"varint,10,opt,name=is_primary_address,json=isPrimaryAddress,proto3" json:"is_primary_address,omitempty"`
}

func (x *ClinicAddress) Reset() {
	*x = ClinicAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicAddress) ProtoMessage() {}

func (x *ClinicAddress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicAddress.ProtoReflect.Descriptor instead.
func (*ClinicAddress) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{31}
}

func (x *ClinicAddress) GetAddressId() int32 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *ClinicAddress) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *ClinicAddress) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

func (x *ClinicAddress) GetAptPo() string {
	if x != nil {
		return x.AptPo
	}
	return ""
}

func (x *ClinicAddress) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ClinicAddress) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ClinicAddress) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *ClinicAddress) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ClinicAddress) GetAddressConfirmed() bool {
	if x != nil {
		return x.AddressConfirmed
	}
	return false
}

func (x *ClinicAddress) GetIsPrimaryAddress() bool {
	if x != nil {
		return x.IsPrimaryAddress
	}
	return false
}

type GetClinicAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicAddresses []*ClinicAddress `protobuf:"bytes,1,rep,name=clinic_addresses,json=clinicAddresses,proto3" json:"clinic_addresses,omitempty"`
}

func (x *GetClinicAddressResponse) Reset() {
	*x = GetClinicAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clinic_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClinicAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClinicAddressResponse) ProtoMessage() {}

func (x *GetClinicAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clinic_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClinicAddressResponse.ProtoReflect.Descriptor instead.
func (*GetClinicAddressResponse) Descriptor() ([]byte, []int) {
	return file_proto_clinic_proto_rawDescGZIP(), []int{32}
}

func (x *GetClinicAddressResponse) GetClinicAddresses() []*ClinicAddress {
	if x != nil {
		return x.ClinicAddresses
	}
	return nil
}

var File_proto_clinic_proto protoreflect.FileDescriptor

var file_proto_clinic_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x3e, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x22,
	0xb1, 0x02, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64,
	0x22, 0x62, 0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x22, 0xb5, 0x03, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x7a, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5a, 0x69, 0x70, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x66, 0x61, 0x78, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x46, 0x61, 0x78,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x70, 0x69, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x4e, 0x70, 0x69, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x14,
	0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x22,
	0x3d, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4d,
	0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a,
	0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x07, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x22, 0x43, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x42,
	0x79, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x22, 0x51, 0x0a,
	0x21, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x43, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x22, 0x55, 0x0a, 0x15, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x18, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x77, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x77, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x67,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x50,
	0x49, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x70, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x70,
	0x69, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x33, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x36, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x0a, 0x46, 0x75, 0x6c, 0x6c,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x70, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x70, 0x69,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x40, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x22, 0x3c, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6d, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x63, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x22, 0x71, 0x0a, 0x1e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x63, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x22, 0x73, 0x0a,
	0x0f, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x73, 0x22, 0x34, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49,
	0x64, 0x22, 0x46, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x19, 0x46, 0x75, 0x7a,
	0x7a, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc8, 0x02, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x74, 0x5f, 0x70, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x74, 0x50, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x69, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x10, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x63, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x32, 0xb1, 0x0f,
	0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x12,
	0x28, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x83, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x73, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x73, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x73, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x42, 0x79,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x44, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x73, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1d, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x44, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x22, 0x00, 0x12, 0x74, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x50, 0x49,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x50, 0x49, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x13, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x75, 0x0a, 0x1e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x43, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4f, 0x66, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f,
	0x66, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x12, 0x46, 0x75, 0x7a, 0x7a, 0x79,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x60, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x49, 0x44, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_clinic_proto_rawDescOnce sync.Once
	file_proto_clinic_proto_rawDescData = file_proto_clinic_proto_rawDesc
)

func file_proto_clinic_proto_rawDescGZIP() []byte {
	file_proto_clinic_proto_rawDescOnce.Do(func() {
		file_proto_clinic_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_clinic_proto_rawDescData)
	})
	return file_proto_clinic_proto_rawDescData
}

var file_proto_clinic_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_proto_clinic_proto_goTypes = []interface{}{
	(*GetFirstCustomerOfClinicRequest)(nil),      // 0: coresamples_service.GetFirstCustomerOfClinicRequest
	(*GetFirstCustomerOfClinicResponse)(nil),     // 1: coresamples_service.GetFirstCustomerOfClinicResponse
	(*CheckClinicAttributesRequest)(nil),         // 2: coresamples_service.CheckClinicAttributesRequest
	(*CheckClinicAttributesResponse)(nil),        // 3: coresamples_service.CheckClinicAttributesResponse
	(*SignUpClinicRequest)(nil),                  // 4: coresamples_service.SignUpClinicRequest
	(*SignUpClinicResponse)(nil),                 // 5: coresamples_service.SignUpClinicResponse
	(*SearchClinicsNameRequest)(nil),             // 6: coresamples_service.SearchClinicsNameRequest
	(*ClinicsObject)(nil),                        // 7: coresamples_service.ClinicsObject
	(*SearchClinicsInfoResponse)(nil),            // 8: coresamples_service.SearchClinicsInfoResponse
	(*ListClinicCustomersByClinicIDRequest)(nil), // 9: coresamples_service.ListClinicCustomersByClinicIDRequest
	(*GetClinicsClinicAccountIDsRequest)(nil),    // 10: coresamples_service.GetClinicsClinicAccountIDsRequest
	(*EditClinicNameRequest)(nil),                // 11: coresamples_service.EditClinicNameRequest
	(*ModifyClinicNamesRequest)(nil),             // 12: coresamples_service.modifyClinicNamesRequest
	(*UpdateClinicNPINumberRequest)(nil),         // 13: coresamples_service.UpdateClinicNPINumberRequest
	(*ListClinicRequest)(nil),                    // 14: coresamples_service.ListClinicRequest
	(*GetClinicRequest)(nil),                     // 15: coresamples_service.GetClinicRequest
	(*CreateClinicRequest)(nil),                  // 16: coresamples_service.CreateClinicRequest
	(*ListClinicResponse)(nil),                   // 17: coresamples_service.ListClinicResponse
	(*GetClinicResponse)(nil),                    // 18: coresamples_service.GetClinicResponse
	(*FullClinic)(nil),                           // 19: coresamples_service.FullClinic
	(*GetCustomerClinicNamesRequest)(nil),        // 20: coresamples_service.GetCustomerClinicNamesRequest
	(*GetCustomerClinicNamesResponse)(nil),       // 21: coresamples_service.GetCustomerClinicNamesResponse
	(*ClinicNames)(nil),                          // 22: coresamples_service.ClinicNames
	(*ListClinicCustomerRequest)(nil),            // 23: coresamples_service.ListClinicCustomerRequest
	(*ListClinicCustomerResponse)(nil),           // 24: coresamples_service.ListClinicCustomerResponse
	(*ListClinicCustomerByIDResponse)(nil),       // 25: coresamples_service.ListClinicCustomerByIDResponse
	(*ClinicCustomers)(nil),                      // 26: coresamples_service.ClinicCustomers
	(*ClinicCustomerIds)(nil),                    // 27: coresamples_service.ClinicCustomerIds
	(*ClinicID)(nil),                             // 28: coresamples_service.ClinicID
	(*Clinic)(nil),                               // 29: coresamples_service.Clinic
	(*FuzzySearchClinicsRequest)(nil),            // 30: coresamples_service.FuzzySearchClinicsRequest
	(*ClinicAddress)(nil),                        // 31: coresamples_service.ClinicAddress
	(*GetClinicAddressResponse)(nil),             // 32: coresamples_service.GetClinicAddressResponse
	(*FullCustomer)(nil),                         // 33: coresamples_service.FullCustomer
}
var file_proto_clinic_proto_depIdxs = []int32{
	7,  // 0: coresamples_service.SearchClinicsInfoResponse.clinics:type_name -> coresamples_service.ClinicsObject
	17, // 1: coresamples_service.ListClinicResponse.response:type_name -> coresamples_service.ListClinicResponse
	19, // 2: coresamples_service.GetClinicResponse.response:type_name -> coresamples_service.FullClinic
	22, // 3: coresamples_service.GetCustomerClinicNamesResponse.response:type_name -> coresamples_service.ClinicNames
	23, // 4: coresamples_service.ClinicNames.clinics:type_name -> coresamples_service.ListClinicCustomerRequest
	26, // 5: coresamples_service.ListClinicCustomerResponse.clinic_customers:type_name -> coresamples_service.ClinicCustomers
	26, // 6: coresamples_service.ListClinicCustomerByIDResponse.clinic_customers:type_name -> coresamples_service.ClinicCustomers
	33, // 7: coresamples_service.ClinicCustomers.customers:type_name -> coresamples_service.FullCustomer
	31, // 8: coresamples_service.GetClinicAddressResponse.clinic_addresses:type_name -> coresamples_service.ClinicAddress
	16, // 9: coresamples_service.ClinicService.CreateClinic:input_type -> coresamples_service.CreateClinicRequest
	15, // 10: coresamples_service.ClinicService.GetClinic:input_type -> coresamples_service.GetClinicRequest
	14, // 11: coresamples_service.ClinicService.ListClinic:input_type -> coresamples_service.ListClinicRequest
	23, // 12: coresamples_service.ClinicService.ListClinicCustomers:input_type -> coresamples_service.ListClinicCustomerRequest
	20, // 13: coresamples_service.ClinicService.GetCustomerClinicNames:input_type -> coresamples_service.GetCustomerClinicNamesRequest
	10, // 14: coresamples_service.ClinicService.GetClinicsClinicAccountIDs:input_type -> coresamples_service.GetClinicsClinicAccountIDsRequest
	9,  // 15: coresamples_service.ClinicService.ListClinicCustomersByClinicID:input_type -> coresamples_service.ListClinicCustomersByClinicIDRequest
	28, // 16: coresamples_service.ClinicService.GetClinicByID:input_type -> coresamples_service.ClinicID
	13, // 17: coresamples_service.ClinicService.UpdateClinicNPINumber:input_type -> coresamples_service.UpdateClinicNPINumberRequest
	11, // 18: coresamples_service.ClinicService.EditClinicName:input_type -> coresamples_service.EditClinicNameRequest
	12, // 19: coresamples_service.ClinicService.modifyClinicNames:input_type -> coresamples_service.modifyClinicNamesRequest
	6,  // 20: coresamples_service.ClinicService.SearchClinicsByName:input_type -> coresamples_service.SearchClinicsNameRequest
	4,  // 21: coresamples_service.ClinicService.SignUpClinicForExistingAccount:input_type -> coresamples_service.SignUpClinicRequest
	2,  // 22: coresamples_service.ClinicService.CheckClinicAttributes:input_type -> coresamples_service.CheckClinicAttributesRequest
	0,  // 23: coresamples_service.ClinicService.GetFirstCustomerOfClinic:input_type -> coresamples_service.GetFirstCustomerOfClinicRequest
	30, // 24: coresamples_service.ClinicService.FuzzySearchClinics:input_type -> coresamples_service.FuzzySearchClinicsRequest
	28, // 25: coresamples_service.ClinicService.GetClinicAddress:input_type -> coresamples_service.ClinicID
	29, // 26: coresamples_service.ClinicService.CreateClinic:output_type -> coresamples_service.Clinic
	18, // 27: coresamples_service.ClinicService.GetClinic:output_type -> coresamples_service.GetClinicResponse
	18, // 28: coresamples_service.ClinicService.ListClinic:output_type -> coresamples_service.GetClinicResponse
	24, // 29: coresamples_service.ClinicService.ListClinicCustomers:output_type -> coresamples_service.ListClinicCustomerResponse
	21, // 30: coresamples_service.ClinicService.GetCustomerClinicNames:output_type -> coresamples_service.GetCustomerClinicNamesResponse
	18, // 31: coresamples_service.ClinicService.GetClinicsClinicAccountIDs:output_type -> coresamples_service.GetClinicResponse
	25, // 32: coresamples_service.ClinicService.ListClinicCustomersByClinicID:output_type -> coresamples_service.ListClinicCustomerByIDResponse
	19, // 33: coresamples_service.ClinicService.GetClinicByID:output_type -> coresamples_service.FullClinic
	18, // 34: coresamples_service.ClinicService.UpdateClinicNPINumber:output_type -> coresamples_service.GetClinicResponse
	18, // 35: coresamples_service.ClinicService.EditClinicName:output_type -> coresamples_service.GetClinicResponse
	18, // 36: coresamples_service.ClinicService.modifyClinicNames:output_type -> coresamples_service.GetClinicResponse
	8,  // 37: coresamples_service.ClinicService.SearchClinicsByName:output_type -> coresamples_service.SearchClinicsInfoResponse
	5,  // 38: coresamples_service.ClinicService.SignUpClinicForExistingAccount:output_type -> coresamples_service.SignUpClinicResponse
	3,  // 39: coresamples_service.ClinicService.CheckClinicAttributes:output_type -> coresamples_service.CheckClinicAttributesResponse
	1,  // 40: coresamples_service.ClinicService.GetFirstCustomerOfClinic:output_type -> coresamples_service.GetFirstCustomerOfClinicResponse
	8,  // 41: coresamples_service.ClinicService.FuzzySearchClinics:output_type -> coresamples_service.SearchClinicsInfoResponse
	32, // 42: coresamples_service.ClinicService.GetClinicAddress:output_type -> coresamples_service.GetClinicAddressResponse
	26, // [26:43] is the sub-list for method output_type
	9,  // [9:26] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_clinic_proto_init() }
func file_proto_clinic_proto_init() {
	if File_proto_clinic_proto != nil {
		return
	}
	file_proto_customer_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_clinic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFirstCustomerOfClinicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFirstCustomerOfClinicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckClinicAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckClinicAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignUpClinicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignUpClinicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchClinicsNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicsObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchClinicsInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClinicCustomersByClinicIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClinicsClinicAccountIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditClinicNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyClinicNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClinicNPINumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClinicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClinicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClinicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClinicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClinicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullClinic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerClinicNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerClinicNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClinicCustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClinicCustomerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClinicCustomerByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicCustomers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicCustomerIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clinic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzySearchClinicsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clinic_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClinicAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_clinic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_clinic_proto_goTypes,
		DependencyIndexes: file_proto_clinic_proto_depIdxs,
		MessageInfos:      file_proto_clinic_proto_msgTypes,
	}.Build()
	File_proto_clinic_proto = out.File
	file_proto_clinic_proto_rawDesc = nil
	file_proto_clinic_proto_goTypes = nil
	file_proto_clinic_proto_depIdxs = nil
}
