// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/tube_service.proto

package coresamples_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TubeService_GetRequiredTubeVolume_FullMethodName = "/coresamples_service.TubeService/GetRequiredTubeVolume"
	TubeService_GetTestsByBloodType_FullMethodName   = "/coresamples_service.TubeService/GetTestsByBloodType"
	TubeService_GetTube_FullMethodName               = "/coresamples_service.TubeService/GetTube"
	TubeService_GetTubeTests_FullMethodName          = "/coresamples_service.TubeService/GetTubeTests"
)

// TubeServiceClient is the client API for TubeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TubeServiceClient interface {
	GetRequiredTubeVolume(ctx context.Context, in *RequiredTubeVolumeRequest, opts ...grpc.CallOption) (*RequiredTubeVolumeResponse, error)
	GetTestsByBloodType(ctx context.Context, in *BloodType, opts ...grpc.CallOption) (*TestIDs, error)
	GetTube(ctx context.Context, in *TubeID, opts ...grpc.CallOption) (*Tube, error)
	GetTubeTests(ctx context.Context, in *TubeID, opts ...grpc.CallOption) (*TubeTests, error)
}

type tubeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTubeServiceClient(cc grpc.ClientConnInterface) TubeServiceClient {
	return &tubeServiceClient{cc}
}

func (c *tubeServiceClient) GetRequiredTubeVolume(ctx context.Context, in *RequiredTubeVolumeRequest, opts ...grpc.CallOption) (*RequiredTubeVolumeResponse, error) {
	out := new(RequiredTubeVolumeResponse)
	err := c.cc.Invoke(ctx, TubeService_GetRequiredTubeVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tubeServiceClient) GetTestsByBloodType(ctx context.Context, in *BloodType, opts ...grpc.CallOption) (*TestIDs, error) {
	out := new(TestIDs)
	err := c.cc.Invoke(ctx, TubeService_GetTestsByBloodType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tubeServiceClient) GetTube(ctx context.Context, in *TubeID, opts ...grpc.CallOption) (*Tube, error) {
	out := new(Tube)
	err := c.cc.Invoke(ctx, TubeService_GetTube_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tubeServiceClient) GetTubeTests(ctx context.Context, in *TubeID, opts ...grpc.CallOption) (*TubeTests, error) {
	out := new(TubeTests)
	err := c.cc.Invoke(ctx, TubeService_GetTubeTests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TubeServiceServer is the server API for TubeService service.
// All implementations must embed UnimplementedTubeServiceServer
// for forward compatibility
type TubeServiceServer interface {
	GetRequiredTubeVolume(context.Context, *RequiredTubeVolumeRequest) (*RequiredTubeVolumeResponse, error)
	GetTestsByBloodType(context.Context, *BloodType) (*TestIDs, error)
	GetTube(context.Context, *TubeID) (*Tube, error)
	GetTubeTests(context.Context, *TubeID) (*TubeTests, error)
	mustEmbedUnimplementedTubeServiceServer()
}

// UnimplementedTubeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTubeServiceServer struct {
}

func (UnimplementedTubeServiceServer) GetRequiredTubeVolume(context.Context, *RequiredTubeVolumeRequest) (*RequiredTubeVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequiredTubeVolume not implemented")
}
func (UnimplementedTubeServiceServer) GetTestsByBloodType(context.Context, *BloodType) (*TestIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestsByBloodType not implemented")
}
func (UnimplementedTubeServiceServer) GetTube(context.Context, *TubeID) (*Tube, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTube not implemented")
}
func (UnimplementedTubeServiceServer) GetTubeTests(context.Context, *TubeID) (*TubeTests, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTubeTests not implemented")
}
func (UnimplementedTubeServiceServer) mustEmbedUnimplementedTubeServiceServer() {}

// UnsafeTubeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TubeServiceServer will
// result in compilation errors.
type UnsafeTubeServiceServer interface {
	mustEmbedUnimplementedTubeServiceServer()
}

func RegisterTubeServiceServer(s grpc.ServiceRegistrar, srv TubeServiceServer) {
	s.RegisterService(&TubeService_ServiceDesc, srv)
}

func _TubeService_GetRequiredTubeVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequiredTubeVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TubeServiceServer).GetRequiredTubeVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TubeService_GetRequiredTubeVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TubeServiceServer).GetRequiredTubeVolume(ctx, req.(*RequiredTubeVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TubeService_GetTestsByBloodType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BloodType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TubeServiceServer).GetTestsByBloodType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TubeService_GetTestsByBloodType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TubeServiceServer).GetTestsByBloodType(ctx, req.(*BloodType))
	}
	return interceptor(ctx, in, info, handler)
}

func _TubeService_GetTube_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TubeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TubeServiceServer).GetTube(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TubeService_GetTube_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TubeServiceServer).GetTube(ctx, req.(*TubeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TubeService_GetTubeTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TubeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TubeServiceServer).GetTubeTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TubeService_GetTubeTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TubeServiceServer).GetTubeTests(ctx, req.(*TubeID))
	}
	return interceptor(ctx, in, info, handler)
}

// TubeService_ServiceDesc is the grpc.ServiceDesc for TubeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TubeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coresamples_service.TubeService",
	HandlerType: (*TubeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRequiredTubeVolume",
			Handler:    _TubeService_GetRequiredTubeVolume_Handler,
		},
		{
			MethodName: "GetTestsByBloodType",
			Handler:    _TubeService_GetTestsByBloodType_Handler,
		},
		{
			MethodName: "GetTube",
			Handler:    _TubeService_GetTube_Handler,
		},
		{
			MethodName: "GetTubeTests",
			Handler:    _TubeService_GetTubeTests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tube_service.proto",
}
