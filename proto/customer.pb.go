// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: proto/customer.proto

package coresamples_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateCustomerOnboardingQuestionnaireStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *UpdateCustomerOnboardingQuestionnaireStatusRequest) Reset() {
	*x = UpdateCustomerOnboardingQuestionnaireStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerOnboardingQuestionnaireStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerOnboardingQuestionnaireStatusRequest) ProtoMessage() {}

func (x *UpdateCustomerOnboardingQuestionnaireStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerOnboardingQuestionnaireStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomerOnboardingQuestionnaireStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateCustomerOnboardingQuestionnaireStatusRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

type UpdateCustomerOnboardingQuestionnaireStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId int32  `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Status     string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateCustomerOnboardingQuestionnaireStatusResponse) Reset() {
	*x = UpdateCustomerOnboardingQuestionnaireStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerOnboardingQuestionnaireStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerOnboardingQuestionnaireStatusResponse) ProtoMessage() {}

func (x *UpdateCustomerOnboardingQuestionnaireStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerOnboardingQuestionnaireStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateCustomerOnboardingQuestionnaireStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateCustomerOnboardingQuestionnaireStatusResponse) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *UpdateCustomerOnboardingQuestionnaireStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CheckCustomerOnboardingQuestionnaireStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *CheckCustomerOnboardingQuestionnaireStatusRequest) Reset() {
	*x = CheckCustomerOnboardingQuestionnaireStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCustomerOnboardingQuestionnaireStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCustomerOnboardingQuestionnaireStatusRequest) ProtoMessage() {}

func (x *CheckCustomerOnboardingQuestionnaireStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCustomerOnboardingQuestionnaireStatusRequest.ProtoReflect.Descriptor instead.
func (*CheckCustomerOnboardingQuestionnaireStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{2}
}

func (x *CheckCustomerOnboardingQuestionnaireStatusRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

type CheckCustomerOnboardingQuestionnaireStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId                      int32  `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	IsOnboardingQuestionnaireFilled bool   `protobuf:"varint,2,opt,name=is_onboarding_questionnaire_filled,json=isOnboardingQuestionnaireFilled,proto3" json:"is_onboarding_questionnaire_filled,omitempty"`
	OnboardingQuestionnaireFilledOn string `protobuf:"bytes,3,opt,name=onboarding_questionnaire_filled_on,json=onboardingQuestionnaireFilledOn,proto3" json:"onboarding_questionnaire_filled_on,omitempty"`
}

func (x *CheckCustomerOnboardingQuestionnaireStatusResponse) Reset() {
	*x = CheckCustomerOnboardingQuestionnaireStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCustomerOnboardingQuestionnaireStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCustomerOnboardingQuestionnaireStatusResponse) ProtoMessage() {}

func (x *CheckCustomerOnboardingQuestionnaireStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCustomerOnboardingQuestionnaireStatusResponse.ProtoReflect.Descriptor instead.
func (*CheckCustomerOnboardingQuestionnaireStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{3}
}

func (x *CheckCustomerOnboardingQuestionnaireStatusResponse) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CheckCustomerOnboardingQuestionnaireStatusResponse) GetIsOnboardingQuestionnaireFilled() bool {
	if x != nil {
		return x.IsOnboardingQuestionnaireFilled
	}
	return false
}

func (x *CheckCustomerOnboardingQuestionnaireStatusResponse) GetOnboardingQuestionnaireFilledOn() string {
	if x != nil {
		return x.OnboardingQuestionnaireFilledOn
	}
	return ""
}

type AddCustomerWithNPINumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Customer Basic Info
	CustomerFirstName         string `protobuf:"bytes,1,opt,name=customer_first_name,json=customerFirstName,proto3" json:"customer_first_name,omitempty"`
	CustomerLastName          string `protobuf:"bytes,2,opt,name=customer_last_name,json=customerLastName,proto3" json:"customer_last_name,omitempty"`
	CustomerNpiNumber         string `protobuf:"bytes,3,opt,name=customer_npi_number,json=customerNpiNumber,proto3" json:"customer_npi_number,omitempty"`
	CustomerLoginEmail        string `protobuf:"bytes,4,opt,name=customer_login_email,json=customerLoginEmail,proto3" json:"customer_login_email,omitempty"`
	CustomerNotificationEmail string `protobuf:"bytes,5,opt,name=customer_notification_email,json=customerNotificationEmail,proto3" json:"customer_notification_email,omitempty"`
	CustomerPhone             string `protobuf:"bytes,6,opt,name=customer_phone,json=customerPhone,proto3" json:"customer_phone,omitempty"`
	// Customer Address
	CustomerAddressLine_1 string `protobuf:"bytes,7,opt,name=customer_address_line_1,json=customerAddressLine1,proto3" json:"customer_address_line_1,omitempty"`
	CustomerAddressLine_2 string `protobuf:"bytes,8,opt,name=customer_address_line_2,json=customerAddressLine2,proto3" json:"customer_address_line_2,omitempty"`
	CustomerCity          string `protobuf:"bytes,9,opt,name=customer_city,json=customerCity,proto3" json:"customer_city,omitempty"`
	CustomerState         string `protobuf:"bytes,10,opt,name=customer_state,json=customerState,proto3" json:"customer_state,omitempty"`
	CustomerZipcode       string `protobuf:"bytes,11,opt,name=customer_zipcode,json=customerZipcode,proto3" json:"customer_zipcode,omitempty"`
	CustomerCountry       string `protobuf:"bytes,12,opt,name=customer_country,json=customerCountry,proto3" json:"customer_country,omitempty"`
	// Customer Role In Clinic
	CustomerRole string `protobuf:"bytes,13,opt,name=customer_role,json=customerRole,proto3" json:"customer_role,omitempty"`
	ClinicId     string `protobuf:"bytes,14,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	// Invitation from
	InvitedFromCustomer string `protobuf:"bytes,15,opt,name=invited_from_customer,json=invitedFromCustomer,proto3" json:"invited_from_customer,omitempty"`
	// Customer Invitation Link
	CustomerInvitationLink string   `protobuf:"bytes,16,opt,name=customer_invitation_link,json=customerInvitationLink,proto3" json:"customer_invitation_link,omitempty"`
	CustomerSuffix         string   `protobuf:"bytes,17,opt,name=customer_suffix,json=customerSuffix,proto3" json:"customer_suffix,omitempty"`
	CustomerRoles          []string `protobuf:"bytes,18,rep,name=customer_roles,json=customerRoles,proto3" json:"customer_roles,omitempty"`
}

func (x *AddCustomerWithNPINumberRequest) Reset() {
	*x = AddCustomerWithNPINumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCustomerWithNPINumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCustomerWithNPINumberRequest) ProtoMessage() {}

func (x *AddCustomerWithNPINumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCustomerWithNPINumberRequest.ProtoReflect.Descriptor instead.
func (*AddCustomerWithNPINumberRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{4}
}

func (x *AddCustomerWithNPINumberRequest) GetCustomerFirstName() string {
	if x != nil {
		return x.CustomerFirstName
	}
	return ""
}

func (x *AddCustomerWithNPINumberRequest) GetCustomerLastName() string {
	if x != nil {
		return x.CustomerLastName
	}
	return ""
}

func (x *AddCustomerWithNPINumberRequest) GetCustomerNpiNumber() string {
	if x != nil {
		return x.CustomerNpiNumber
	}
	return ""
}

func (x *AddCustomerWithNPINumberRequest) GetCustomerLoginEmail() string {
	if x != nil {
		return x.CustomerLoginEmail
	}
	return ""
}

func (x *AddCustomerWithNPINumberRequest) GetCustomerNotificationEmail() string {
	if x != nil {
		return x.CustomerNotificationEmail
	}
	return ""
}

func (x *AddCustomerWithNPINumberRequest) GetCustomerPhone() string {
	if x != nil {
		return x.CustomerPhone
	}
	return ""
}

func (x *AddCustomerWithNPINumberRequest) GetCustomerAddressLine_1() string {
	if x != nil {
		return x.CustomerAddressLine_1
	}
	return ""
}

func (x *AddCustomerWithNPINumberRequest) GetCustomerAddressLine_2() string {
	if x != nil {
		return x.CustomerAddressLine_2
	}
	return ""
}

func (x *AddCustomerWithNPINumberRequest) GetCustomerCity() string {
	if x != nil {
		return x.CustomerCity
	}
	return ""
}

func (x *AddCustomerWithNPINumberRequest) GetCustomerState() string {
	if x != nil {
		return x.CustomerState
	}
	return ""
}

func (x *AddCustomerWithNPINumberRequest) GetCustomerZipcode() string {
	if x != nil {
		return x.CustomerZipcode
	}
	return ""
}

func (x *AddCustomerWithNPINumberRequest) GetCustomerCountry() string {
	if x != nil {
		return x.CustomerCountry
	}
	return ""
}

func (x *AddCustomerWithNPINumberRequest) GetCustomerRole() string {
	if x != nil {
		return x.CustomerRole
	}
	return ""
}

func (x *AddCustomerWithNPINumberRequest) GetClinicId() string {
	if x != nil {
		return x.ClinicId
	}
	return ""
}

func (x *AddCustomerWithNPINumberRequest) GetInvitedFromCustomer() string {
	if x != nil {
		return x.InvitedFromCustomer
	}
	return ""
}

func (x *AddCustomerWithNPINumberRequest) GetCustomerInvitationLink() string {
	if x != nil {
		return x.CustomerInvitationLink
	}
	return ""
}

func (x *AddCustomerWithNPINumberRequest) GetCustomerSuffix() string {
	if x != nil {
		return x.CustomerSuffix
	}
	return ""
}

func (x *AddCustomerWithNPINumberRequest) GetCustomerRoles() []string {
	if x != nil {
		return x.CustomerRoles
	}
	return nil
}

type AddCustomerWithNPINumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CustomerId   int32  `protobuf:"varint,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *AddCustomerWithNPINumberResponse) Reset() {
	*x = AddCustomerWithNPINumberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCustomerWithNPINumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCustomerWithNPINumberResponse) ProtoMessage() {}

func (x *AddCustomerWithNPINumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCustomerWithNPINumberResponse.ProtoReflect.Descriptor instead.
func (*AddCustomerWithNPINumberResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{5}
}

func (x *AddCustomerWithNPINumberResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AddCustomerWithNPINumberResponse) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *AddCustomerWithNPINumberResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Request protobuf for Clinic Attribute Value Check
type CheckClientAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *CheckClientAttributesRequest) Reset() {
	*x = CheckClientAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckClientAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckClientAttributesRequest) ProtoMessage() {}

func (x *CheckClientAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckClientAttributesRequest.ProtoReflect.Descriptor instead.
func (*CheckClientAttributesRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{6}
}

func (x *CheckClientAttributesRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

// Response protobuf for Clinic Attribute Value Check
type CheckClientAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerAttributeValueExists bool `protobuf:"varint,1,opt,name=customer_attribute_value_exists,json=customerAttributeValueExists,proto3" json:"customer_attribute_value_exists,omitempty"`
}

func (x *CheckClientAttributesResponse) Reset() {
	*x = CheckClientAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckClientAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckClientAttributesResponse) ProtoMessage() {}

func (x *CheckClientAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckClientAttributesResponse.ProtoReflect.Descriptor instead.
func (*CheckClientAttributesResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{7}
}

func (x *CheckClientAttributesResponse) GetCustomerAttributeValueExists() bool {
	if x != nil {
		return x.CustomerAttributeValueExists
	}
	return false
}

type ListCustomerAllClinicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerIds []string `protobuf:"bytes,1,rep,name=customer_ids,json=customerIds,proto3" json:"customer_ids,omitempty"`
}

func (x *ListCustomerAllClinicsRequest) Reset() {
	*x = ListCustomerAllClinicsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCustomerAllClinicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCustomerAllClinicsRequest) ProtoMessage() {}

func (x *ListCustomerAllClinicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCustomerAllClinicsRequest.ProtoReflect.Descriptor instead.
func (*ListCustomerAllClinicsRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{8}
}

func (x *ListCustomerAllClinicsRequest) GetCustomerIds() []string {
	if x != nil {
		return x.CustomerIds
	}
	return nil
}

type GetStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerIdList []string `protobuf:"bytes,1,rep,name=customerIdList,proto3" json:"customerIdList,omitempty"`
	Start          string   `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End            string   `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	Limit          int32    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetStatementRequest) Reset() {
	*x = GetStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatementRequest) ProtoMessage() {}

func (x *GetStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatementRequest.ProtoReflect.Descriptor instead.
func (*GetStatementRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{9}
}

func (x *GetStatementRequest) GetCustomerIdList() []string {
	if x != nil {
		return x.CustomerIdList
	}
	return nil
}

func (x *GetStatementRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *GetStatementRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *GetStatementRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetStatementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statements []*StatementData `protobuf:"bytes,1,rep,name=statements,proto3" json:"statements,omitempty"`
}

func (x *GetStatementResponse) Reset() {
	*x = GetStatementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatementResponse) ProtoMessage() {}

func (x *GetStatementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatementResponse.ProtoReflect.Descriptor instead.
func (*GetStatementResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{10}
}

func (x *GetStatementResponse) GetStatements() []*StatementData {
	if x != nil {
		return x.Statements
	}
	return nil
}

type StatementData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId       int32  `protobuf:"varint,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	AccessionId    string `protobuf:"bytes,2,opt,name=accession_id,json=accessionId,proto3" json:"accession_id,omitempty"`
	CustomerId     int32  `protobuf:"varint,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	PatientId      int32  `protobuf:"varint,4,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	CreatedTime    string `protobuf:"bytes,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	CustomerName   string `protobuf:"bytes,6,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	PatientName    string `protobuf:"bytes,7,opt,name=patient_name,json=patientName,proto3" json:"patient_name,omitempty"`
	PatientDob     string `protobuf:"bytes,8,opt,name=patient_dob,json=patientDob,proto3" json:"patient_dob,omitempty"`
	ClinicId       int32  `protobuf:"varint,9,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	ClinicName     string `protobuf:"bytes,10,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
	BillingOrderId string `protobuf:"bytes,11,opt,name=billing_order_id,json=billingOrderId,proto3" json:"billing_order_id,omitempty"`
}

func (x *StatementData) Reset() {
	*x = StatementData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatementData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatementData) ProtoMessage() {}

func (x *StatementData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatementData.ProtoReflect.Descriptor instead.
func (*StatementData) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{11}
}

func (x *StatementData) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *StatementData) GetAccessionId() string {
	if x != nil {
		return x.AccessionId
	}
	return ""
}

func (x *StatementData) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *StatementData) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *StatementData) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *StatementData) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *StatementData) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *StatementData) GetPatientDob() string {
	if x != nil {
		return x.PatientDob
	}
	return ""
}

func (x *StatementData) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *StatementData) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

func (x *StatementData) GetBillingOrderId() string {
	if x != nil {
		return x.BillingOrderId
	}
	return ""
}

type ListCustomerAllClinicsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerClinics []*CustomerBasicInfoWithClinic `protobuf:"bytes,1,rep,name=customer_clinics,json=customerClinics,proto3" json:"customer_clinics,omitempty"`
}

func (x *ListCustomerAllClinicsResponse) Reset() {
	*x = ListCustomerAllClinicsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCustomerAllClinicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCustomerAllClinicsResponse) ProtoMessage() {}

func (x *ListCustomerAllClinicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCustomerAllClinicsResponse.ProtoReflect.Descriptor instead.
func (*ListCustomerAllClinicsResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{12}
}

func (x *ListCustomerAllClinicsResponse) GetCustomerClinics() []*CustomerBasicInfoWithClinic {
	if x != nil {
		return x.CustomerClinics
	}
	return nil
}

type CustomerBasicInfoWithClinic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId         int32             `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerFirstName  string            `protobuf:"bytes,2,opt,name=customer_first_name,json=customerFirstName,proto3" json:"customer_first_name,omitempty"`
	CustomerLastName   string            `protobuf:"bytes,3,opt,name=customer_last_name,json=customerLastName,proto3" json:"customer_last_name,omitempty"`
	CustomerMiddleName string            `protobuf:"bytes,4,opt,name=customer_middle_name,json=customerMiddleName,proto3" json:"customer_middle_name,omitempty"`
	Clinics            []*CustomerClinic `protobuf:"bytes,5,rep,name=clinics,proto3" json:"clinics,omitempty"`
}

func (x *CustomerBasicInfoWithClinic) Reset() {
	*x = CustomerBasicInfoWithClinic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerBasicInfoWithClinic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerBasicInfoWithClinic) ProtoMessage() {}

func (x *CustomerBasicInfoWithClinic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerBasicInfoWithClinic.ProtoReflect.Descriptor instead.
func (*CustomerBasicInfoWithClinic) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{13}
}

func (x *CustomerBasicInfoWithClinic) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CustomerBasicInfoWithClinic) GetCustomerFirstName() string {
	if x != nil {
		return x.CustomerFirstName
	}
	return ""
}

func (x *CustomerBasicInfoWithClinic) GetCustomerLastName() string {
	if x != nil {
		return x.CustomerLastName
	}
	return ""
}

func (x *CustomerBasicInfoWithClinic) GetCustomerMiddleName() string {
	if x != nil {
		return x.CustomerMiddleName
	}
	return ""
}

func (x *CustomerBasicInfoWithClinic) GetClinics() []*CustomerClinic {
	if x != nil {
		return x.Clinics
	}
	return nil
}

// Request protobuf for Search client by Name
type SearchcliensNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientName string `protobuf:"bytes,1,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
}

func (x *SearchcliensNameRequest) Reset() {
	*x = SearchcliensNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchcliensNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchcliensNameRequest) ProtoMessage() {}

func (x *SearchcliensNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchcliensNameRequest.ProtoReflect.Descriptor instead.
func (*SearchcliensNameRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{14}
}

func (x *SearchcliensNameRequest) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

type ClientsObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId int64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// int64 customer_id = 1;
	ClientName string `protobuf:"bytes,2,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
}

func (x *ClientsObject) Reset() {
	*x = ClientsObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientsObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientsObject) ProtoMessage() {}

func (x *ClientsObject) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientsObject.ProtoReflect.Descriptor instead.
func (*ClientsObject) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{15}
}

func (x *ClientsObject) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *ClientsObject) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

// Response protobuf for Search client by Name
type SearchclientsInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clients []*ClientsObject `protobuf:"bytes,1,rep,name=clients,proto3" json:"clients,omitempty"`
}

func (x *SearchclientsInfoResponse) Reset() {
	*x = SearchclientsInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchclientsInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchclientsInfoResponse) ProtoMessage() {}

func (x *SearchclientsInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchclientsInfoResponse.ProtoReflect.Descriptor instead.
func (*SearchclientsInfoResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{16}
}

func (x *SearchclientsInfoResponse) GetClients() []*ClientsObject {
	if x != nil {
		return x.Clients
	}
	return nil
}

type CustomerSignUpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsUsCustomer             bool     `protobuf:"varint,1,opt,name=is_us_customer,json=isUsCustomer,proto3" json:"is_us_customer,omitempty"`
	CustomerNpiNumber        string   `protobuf:"bytes,2,opt,name=customer_npi_number,json=customerNpiNumber,proto3" json:"customer_npi_number,omitempty"`
	Credentials              string   `protobuf:"bytes,3,opt,name=credentials,proto3" json:"credentials,omitempty"`
	FirstName                string   `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName                 string   `protobuf:"bytes,5,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	UsePracticeId            bool     `protobuf:"varint,6,opt,name=use_practice_id,json=usePracticeId,proto3" json:"use_practice_id,omitempty"`
	PracticeName             string   `protobuf:"bytes,7,opt,name=practice_name,json=practiceName,proto3" json:"practice_name,omitempty"`
	ExistingClientId         string   `protobuf:"bytes,8,opt,name=existing_client_id,json=existingClientId,proto3" json:"existing_client_id,omitempty"`
	AddressStreet            string   `protobuf:"bytes,9,opt,name=address_street,json=addressStreet,proto3" json:"address_street,omitempty"`
	AddressApo               string   `protobuf:"bytes,10,opt,name=address_apo,json=addressApo,proto3" json:"address_apo,omitempty"`
	AddressCity              string   `protobuf:"bytes,11,opt,name=address_city,json=addressCity,proto3" json:"address_city,omitempty"`
	AddressState             string   `protobuf:"bytes,12,opt,name=address_state,json=addressState,proto3" json:"address_state,omitempty"`
	AddressZipcode           string   `protobuf:"bytes,13,opt,name=address_zipcode,json=addressZipcode,proto3" json:"address_zipcode,omitempty"`
	AddressCountry           string   `protobuf:"bytes,14,opt,name=address_country,json=addressCountry,proto3" json:"address_country,omitempty"`
	ContactPhone             string   `protobuf:"bytes,15,opt,name=contact_phone,json=contactPhone,proto3" json:"contact_phone,omitempty"`
	ContactEmail             string   `protobuf:"bytes,16,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	ContactNotificationEmail string   `protobuf:"bytes,17,opt,name=contact_notification_email,json=contactNotificationEmail,proto3" json:"contact_notification_email,omitempty"`
	ContactFax               string   `protobuf:"bytes,18,opt,name=contact_fax,json=contactFax,proto3" json:"contact_fax,omitempty"`
	ContactWebsite           string   `protobuf:"bytes,19,opt,name=contact_website,json=contactWebsite,proto3" json:"contact_website,omitempty"`
	ReferenalSource          string   `protobuf:"bytes,20,opt,name=referenal_source,json=referenalSource,proto3" json:"referenal_source,omitempty"`
	InterestTests            []string `protobuf:"bytes,21,rep,name=interest_tests,json=interestTests,proto3" json:"interest_tests,omitempty"`
	// Add more fields as needed (for Clinic Level Info, User Info, etc.)
	UserLoginEmail          string   `protobuf:"bytes,22,opt,name=user_login_email,json=userLoginEmail,proto3" json:"user_login_email,omitempty"`
	UserPassword            string   `protobuf:"bytes,23,opt,name=user_password,json=userPassword,proto3" json:"user_password,omitempty"`
	SignUpWithoutInvitation bool     `protobuf:"varint,24,opt,name=sign_up_without_invitation,json=signUpWithoutInvitation,proto3" json:"sign_up_without_invitation,omitempty"`
	CustomerRole            string   `protobuf:"bytes,25,opt,name=customer_role,json=customerRole,proto3" json:"customer_role,omitempty"`
	InvitedFromClinicId     string   `protobuf:"bytes,26,opt,name=invited_from_clinic_id,json=invitedFromClinicId,proto3" json:"invited_from_clinic_id,omitempty"`
	CustomerRoles           []string `protobuf:"bytes,27,rep,name=customer_roles,json=customerRoles,proto3" json:"customer_roles,omitempty"`
}

func (x *CustomerSignUpRequest) Reset() {
	*x = CustomerSignUpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerSignUpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerSignUpRequest) ProtoMessage() {}

func (x *CustomerSignUpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerSignUpRequest.ProtoReflect.Descriptor instead.
func (*CustomerSignUpRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{17}
}

func (x *CustomerSignUpRequest) GetIsUsCustomer() bool {
	if x != nil {
		return x.IsUsCustomer
	}
	return false
}

func (x *CustomerSignUpRequest) GetCustomerNpiNumber() string {
	if x != nil {
		return x.CustomerNpiNumber
	}
	return ""
}

func (x *CustomerSignUpRequest) GetCredentials() string {
	if x != nil {
		return x.Credentials
	}
	return ""
}

func (x *CustomerSignUpRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CustomerSignUpRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CustomerSignUpRequest) GetUsePracticeId() bool {
	if x != nil {
		return x.UsePracticeId
	}
	return false
}

func (x *CustomerSignUpRequest) GetPracticeName() string {
	if x != nil {
		return x.PracticeName
	}
	return ""
}

func (x *CustomerSignUpRequest) GetExistingClientId() string {
	if x != nil {
		return x.ExistingClientId
	}
	return ""
}

func (x *CustomerSignUpRequest) GetAddressStreet() string {
	if x != nil {
		return x.AddressStreet
	}
	return ""
}

func (x *CustomerSignUpRequest) GetAddressApo() string {
	if x != nil {
		return x.AddressApo
	}
	return ""
}

func (x *CustomerSignUpRequest) GetAddressCity() string {
	if x != nil {
		return x.AddressCity
	}
	return ""
}

func (x *CustomerSignUpRequest) GetAddressState() string {
	if x != nil {
		return x.AddressState
	}
	return ""
}

func (x *CustomerSignUpRequest) GetAddressZipcode() string {
	if x != nil {
		return x.AddressZipcode
	}
	return ""
}

func (x *CustomerSignUpRequest) GetAddressCountry() string {
	if x != nil {
		return x.AddressCountry
	}
	return ""
}

func (x *CustomerSignUpRequest) GetContactPhone() string {
	if x != nil {
		return x.ContactPhone
	}
	return ""
}

func (x *CustomerSignUpRequest) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *CustomerSignUpRequest) GetContactNotificationEmail() string {
	if x != nil {
		return x.ContactNotificationEmail
	}
	return ""
}

func (x *CustomerSignUpRequest) GetContactFax() string {
	if x != nil {
		return x.ContactFax
	}
	return ""
}

func (x *CustomerSignUpRequest) GetContactWebsite() string {
	if x != nil {
		return x.ContactWebsite
	}
	return ""
}

func (x *CustomerSignUpRequest) GetReferenalSource() string {
	if x != nil {
		return x.ReferenalSource
	}
	return ""
}

func (x *CustomerSignUpRequest) GetInterestTests() []string {
	if x != nil {
		return x.InterestTests
	}
	return nil
}

func (x *CustomerSignUpRequest) GetUserLoginEmail() string {
	if x != nil {
		return x.UserLoginEmail
	}
	return ""
}

func (x *CustomerSignUpRequest) GetUserPassword() string {
	if x != nil {
		return x.UserPassword
	}
	return ""
}

func (x *CustomerSignUpRequest) GetSignUpWithoutInvitation() bool {
	if x != nil {
		return x.SignUpWithoutInvitation
	}
	return false
}

func (x *CustomerSignUpRequest) GetCustomerRole() string {
	if x != nil {
		return x.CustomerRole
	}
	return ""
}

func (x *CustomerSignUpRequest) GetInvitedFromClinicId() string {
	if x != nil {
		return x.InvitedFromClinicId
	}
	return ""
}

func (x *CustomerSignUpRequest) GetCustomerRoles() []string {
	if x != nil {
		return x.CustomerRoles
	}
	return nil
}

type SignUpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	CustomerId int32  `protobuf:"varint,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"` // Using int64 for safety in case of large IDs
	LogInEmail string `protobuf:"bytes,4,opt,name=log_in_email,json=logInEmail,proto3" json:"log_in_email,omitempty"`
	Token      string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SignUpResponse) Reset() {
	*x = SignUpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUpResponse) ProtoMessage() {}

func (x *SignUpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUpResponse.ProtoReflect.Descriptor instead.
func (*SignUpResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{18}
}

func (x *SignUpResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SignUpResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SignUpResponse) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *SignUpResponse) GetLogInEmail() string {
	if x != nil {
		return x.LogInEmail
	}
	return ""
}

func (x *SignUpResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetCustomer2FAContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *GetCustomer2FAContactRequest) Reset() {
	*x = GetCustomer2FAContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomer2FAContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomer2FAContactRequest) ProtoMessage() {}

func (x *GetCustomer2FAContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomer2FAContactRequest.ProtoReflect.Descriptor instead.
func (*GetCustomer2FAContactRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{19}
}

func (x *GetCustomer2FAContactRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

type GetCustomer2FAContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contacts []*Contact2FAList `protobuf:"bytes,1,rep,name=contacts,proto3" json:"contacts,omitempty"`
}

func (x *GetCustomer2FAContactResponse) Reset() {
	*x = GetCustomer2FAContactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomer2FAContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomer2FAContactResponse) ProtoMessage() {}

func (x *GetCustomer2FAContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomer2FAContactResponse.ProtoReflect.Descriptor instead.
func (*GetCustomer2FAContactResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{20}
}

func (x *GetCustomer2FAContactResponse) GetContacts() []*Contact2FAList {
	if x != nil {
		return x.Contacts
	}
	return nil
}

type Contact2FAList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactId                 int32  `protobuf:"varint,1,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	ContactDescription        string `protobuf:"bytes,2,opt,name=contact_description,json=contactDescription,proto3" json:"contact_description,omitempty"`
	ContactDetails            string `protobuf:"bytes,3,opt,name=contact_details,json=contactDetails,proto3" json:"contact_details,omitempty"`
	ContactType               string `protobuf:"bytes,4,opt,name=contact_type,json=contactType,proto3" json:"contact_type,omitempty"`
	IsPrimaryContact          bool   `protobuf:"varint,5,opt,name=is_primary_contact,json=isPrimaryContact,proto3" json:"is_primary_contact,omitempty"`
	Is_2FaContact             bool   `protobuf:"varint,6,opt,name=is_2fa_contact,json=is2faContact,proto3" json:"is_2fa_contact,omitempty"`
	CustomerId                int32  `protobuf:"varint,7,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	PatientId                 int32  `protobuf:"varint,8,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	ClinicId                  int32  `protobuf:"varint,9,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	InternalUserId            int32  `protobuf:"varint,10,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
	ApplyToAllGroupMember     bool   `protobuf:"varint,11,opt,name=applyToAllGroupMember,proto3" json:"applyToAllGroupMember,omitempty"`
	ContactLevel              int32  `protobuf:"varint,12,opt,name=contact_level,json=contactLevel,proto3" json:"contact_level,omitempty"`
	ContactLevelName          string `protobuf:"bytes,13,opt,name=contact_level_name,json=contactLevelName,proto3" json:"contact_level_name,omitempty"`
	GroupContactId            int32  `protobuf:"varint,14,opt,name=group_contact_id,json=groupContactId,proto3" json:"group_contact_id,omitempty"`
	HasGroupContact           bool   `protobuf:"varint,15,opt,name=hasGroupContact,proto3" json:"hasGroupContact,omitempty"`
	IsGroupContact            bool   `protobuf:"varint,16,opt,name=isGroupContact,proto3" json:"isGroupContact,omitempty"`
	UseAsDefaultCreateContact bool   `protobuf:"varint,17,opt,name=useAsDefaultCreateContact,proto3" json:"useAsDefaultCreateContact,omitempty"`
	UseGroupContact           bool   `protobuf:"varint,18,opt,name=useGroupContact,proto3" json:"useGroupContact,omitempty"`
}

func (x *Contact2FAList) Reset() {
	*x = Contact2FAList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact2FAList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact2FAList) ProtoMessage() {}

func (x *Contact2FAList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact2FAList.ProtoReflect.Descriptor instead.
func (*Contact2FAList) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{21}
}

func (x *Contact2FAList) GetContactId() int32 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *Contact2FAList) GetContactDescription() string {
	if x != nil {
		return x.ContactDescription
	}
	return ""
}

func (x *Contact2FAList) GetContactDetails() string {
	if x != nil {
		return x.ContactDetails
	}
	return ""
}

func (x *Contact2FAList) GetContactType() string {
	if x != nil {
		return x.ContactType
	}
	return ""
}

func (x *Contact2FAList) GetIsPrimaryContact() bool {
	if x != nil {
		return x.IsPrimaryContact
	}
	return false
}

func (x *Contact2FAList) GetIs_2FaContact() bool {
	if x != nil {
		return x.Is_2FaContact
	}
	return false
}

func (x *Contact2FAList) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *Contact2FAList) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *Contact2FAList) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *Contact2FAList) GetInternalUserId() int32 {
	if x != nil {
		return x.InternalUserId
	}
	return 0
}

func (x *Contact2FAList) GetApplyToAllGroupMember() bool {
	if x != nil {
		return x.ApplyToAllGroupMember
	}
	return false
}

func (x *Contact2FAList) GetContactLevel() int32 {
	if x != nil {
		return x.ContactLevel
	}
	return 0
}

func (x *Contact2FAList) GetContactLevelName() string {
	if x != nil {
		return x.ContactLevelName
	}
	return ""
}

func (x *Contact2FAList) GetGroupContactId() int32 {
	if x != nil {
		return x.GroupContactId
	}
	return 0
}

func (x *Contact2FAList) GetHasGroupContact() bool {
	if x != nil {
		return x.HasGroupContact
	}
	return false
}

func (x *Contact2FAList) GetIsGroupContact() bool {
	if x != nil {
		return x.IsGroupContact
	}
	return false
}

func (x *Contact2FAList) GetUseAsDefaultCreateContact() bool {
	if x != nil {
		return x.UseAsDefaultCreateContact
	}
	return false
}

func (x *Contact2FAList) GetUseGroupContact() bool {
	if x != nil {
		return x.UseGroupContact
	}
	return false
}

type NPINumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NpiNumber string `protobuf:"bytes,1,opt,name=npi_number,json=npiNumber,proto3" json:"npi_number,omitempty"`
}

func (x *NPINumber) Reset() {
	*x = NPINumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NPINumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NPINumber) ProtoMessage() {}

func (x *NPINumber) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NPINumber.ProtoReflect.Descriptor instead.
func (*NPINumber) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{22}
}

func (x *NPINumber) GetNpiNumber() string {
	if x != nil {
		return x.NpiNumber
	}
	return ""
}

type CheckCustomerNPINumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NpiNumber  string   `protobuf:"bytes,1,opt,name=npi_number,json=npiNumber,proto3" json:"npi_number,omitempty"`
	ClinicId   *string  `protobuf:"bytes,2,opt,name=clinic_id,json=clinicId,proto3,oneof" json:"clinic_id,omitempty"`
	CustomerId *string  `protobuf:"bytes,3,opt,name=customer_id,json=customerId,proto3,oneof" json:"customer_id,omitempty"`
	Roles      []string `protobuf:"bytes,4,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *CheckCustomerNPINumberRequest) Reset() {
	*x = CheckCustomerNPINumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCustomerNPINumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCustomerNPINumberRequest) ProtoMessage() {}

func (x *CheckCustomerNPINumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCustomerNPINumberRequest.ProtoReflect.Descriptor instead.
func (*CheckCustomerNPINumberRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{23}
}

func (x *CheckCustomerNPINumberRequest) GetNpiNumber() string {
	if x != nil {
		return x.NpiNumber
	}
	return ""
}

func (x *CheckCustomerNPINumberRequest) GetClinicId() string {
	if x != nil && x.ClinicId != nil {
		return *x.ClinicId
	}
	return ""
}

func (x *CheckCustomerNPINumberRequest) GetCustomerId() string {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return ""
}

func (x *CheckCustomerNPINumberRequest) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type NPICheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NPI_Check string `protobuf:"bytes,1,opt,name=NPI_Check,json=NPICheck,proto3" json:"NPI_Check,omitempty"`
}

func (x *NPICheckResult) Reset() {
	*x = NPICheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NPICheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NPICheckResult) ProtoMessage() {}

func (x *NPICheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NPICheckResult.ProtoReflect.Descriptor instead.
func (*NPICheckResult) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{24}
}

func (x *NPICheckResult) GetNPI_Check() string {
	if x != nil {
		return x.NPI_Check
	}
	return ""
}

type GetCustomerByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerIds []string `protobuf:"bytes,1,rep,name=customer_ids,json=customerIds,proto3" json:"customer_ids,omitempty"`
}

func (x *GetCustomerByIDsRequest) Reset() {
	*x = GetCustomerByIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerByIDsRequest) ProtoMessage() {}

func (x *GetCustomerByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerByIDsRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerByIDsRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{25}
}

func (x *GetCustomerByIDsRequest) GetCustomerIds() []string {
	if x != nil {
		return x.CustomerIds
	}
	return nil
}

type GetCustomerByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customers []*CustomerBasicInfo `protobuf:"bytes,1,rep,name=customers,proto3" json:"customers,omitempty"`
}

func (x *GetCustomerByIDsResponse) Reset() {
	*x = GetCustomerByIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerByIDsResponse) ProtoMessage() {}

func (x *GetCustomerByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerByIDsResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerByIDsResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{26}
}

func (x *GetCustomerByIDsResponse) GetCustomers() []*CustomerBasicInfo {
	if x != nil {
		return x.Customers
	}
	return nil
}

type CustomerBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId                int32      `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	UserId                    int32      `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CustomerType              string     `protobuf:"bytes,3,opt,name=customer_type,json=customerType,proto3" json:"customer_type,omitempty"`
	CustomerFirstName         string     `protobuf:"bytes,4,opt,name=customer_first_name,json=customerFirstName,proto3" json:"customer_first_name,omitempty"`
	CustomerLastName          string     `protobuf:"bytes,5,opt,name=customer_last_name,json=customerLastName,proto3" json:"customer_last_name,omitempty"`
	CustomerMiddleName        string     `protobuf:"bytes,6,opt,name=customer_middle_name,json=customerMiddleName,proto3" json:"customer_middle_name,omitempty"`
	CustomerTypeId            string     `protobuf:"bytes,7,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
	CustomerSuffix            string     `protobuf:"bytes,8,opt,name=customer_suffix,json=customerSuffix,proto3" json:"customer_suffix,omitempty"`
	CustomerSamplesReceived   int32      `protobuf:"varint,9,opt,name=customer_samples_received,json=customerSamplesReceived,proto3" json:"customer_samples_received,omitempty"`
	CustomerRequestSubmitTime string     `protobuf:"bytes,10,opt,name=customer_request_submit_time,json=customerRequestSubmitTime,proto3" json:"customer_request_submit_time,omitempty"`
	CustomerPaymentMethod     string     `protobuf:"bytes,11,opt,name=customer_payment_method,json=customerPaymentMethod,proto3" json:"customer_payment_method,omitempty"`
	IsActive                  bool       `protobuf:"varint,12,opt,name=isActive,proto3" json:"isActive,omitempty"`
	SalesId                   int32      `protobuf:"varint,13,opt,name=sales_id,json=salesId,proto3" json:"sales_id,omitempty"`
	CustomerNpiNumber         string     `protobuf:"bytes,14,opt,name=customer_npi_number,json=customerNpiNumber,proto3" json:"customer_npi_number,omitempty"`
	CustomerPermission        string     `protobuf:"bytes,15,opt,name=customer_permission,json=customerPermission,proto3" json:"customer_permission,omitempty"`
	CustomerAddress           []*Address `protobuf:"bytes,16,rep,name=customer_address,json=customerAddress,proto3" json:"customer_address,omitempty"`
	CustomerContact           []*Contact `protobuf:"bytes,17,rep,name=customer_contact,json=customerContact,proto3" json:"customer_contact,omitempty"`
}

func (x *CustomerBasicInfo) Reset() {
	*x = CustomerBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerBasicInfo) ProtoMessage() {}

func (x *CustomerBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerBasicInfo.ProtoReflect.Descriptor instead.
func (*CustomerBasicInfo) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{27}
}

func (x *CustomerBasicInfo) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CustomerBasicInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CustomerBasicInfo) GetCustomerType() string {
	if x != nil {
		return x.CustomerType
	}
	return ""
}

func (x *CustomerBasicInfo) GetCustomerFirstName() string {
	if x != nil {
		return x.CustomerFirstName
	}
	return ""
}

func (x *CustomerBasicInfo) GetCustomerLastName() string {
	if x != nil {
		return x.CustomerLastName
	}
	return ""
}

func (x *CustomerBasicInfo) GetCustomerMiddleName() string {
	if x != nil {
		return x.CustomerMiddleName
	}
	return ""
}

func (x *CustomerBasicInfo) GetCustomerTypeId() string {
	if x != nil {
		return x.CustomerTypeId
	}
	return ""
}

func (x *CustomerBasicInfo) GetCustomerSuffix() string {
	if x != nil {
		return x.CustomerSuffix
	}
	return ""
}

func (x *CustomerBasicInfo) GetCustomerSamplesReceived() int32 {
	if x != nil {
		return x.CustomerSamplesReceived
	}
	return 0
}

func (x *CustomerBasicInfo) GetCustomerRequestSubmitTime() string {
	if x != nil {
		return x.CustomerRequestSubmitTime
	}
	return ""
}

func (x *CustomerBasicInfo) GetCustomerPaymentMethod() string {
	if x != nil {
		return x.CustomerPaymentMethod
	}
	return ""
}

func (x *CustomerBasicInfo) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *CustomerBasicInfo) GetSalesId() int32 {
	if x != nil {
		return x.SalesId
	}
	return 0
}

func (x *CustomerBasicInfo) GetCustomerNpiNumber() string {
	if x != nil {
		return x.CustomerNpiNumber
	}
	return ""
}

func (x *CustomerBasicInfo) GetCustomerPermission() string {
	if x != nil {
		return x.CustomerPermission
	}
	return ""
}

func (x *CustomerBasicInfo) GetCustomerAddress() []*Address {
	if x != nil {
		return x.CustomerAddress
	}
	return nil
}

func (x *CustomerBasicInfo) GetCustomerContact() []*Contact {
	if x != nil {
		return x.CustomerContact
	}
	return nil
}

type RemoveCustomerFromClinicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	ClinicId   string `protobuf:"bytes,2,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
}

func (x *RemoveCustomerFromClinicRequest) Reset() {
	*x = RemoveCustomerFromClinicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCustomerFromClinicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCustomerFromClinicRequest) ProtoMessage() {}

func (x *RemoveCustomerFromClinicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCustomerFromClinicRequest.ProtoReflect.Descriptor instead.
func (*RemoveCustomerFromClinicRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{28}
}

func (x *RemoveCustomerFromClinicRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *RemoveCustomerFromClinicRequest) GetClinicId() string {
	if x != nil {
		return x.ClinicId
	}
	return ""
}

type JoinCustomerFromClinicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string   `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	ClinicId   string   `protobuf:"bytes,2,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	Role       string   `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	Roles      []string `protobuf:"bytes,4,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *JoinCustomerFromClinicRequest) Reset() {
	*x = JoinCustomerFromClinicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinCustomerFromClinicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinCustomerFromClinicRequest) ProtoMessage() {}

func (x *JoinCustomerFromClinicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinCustomerFromClinicRequest.ProtoReflect.Descriptor instead.
func (*JoinCustomerFromClinicRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{29}
}

func (x *JoinCustomerFromClinicRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *JoinCustomerFromClinicRequest) GetClinicId() string {
	if x != nil {
		return x.ClinicId
	}
	return ""
}

func (x *JoinCustomerFromClinicRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *JoinCustomerFromClinicRequest) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type EditCustomerProfileOnSettingPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId                  string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerSuffix              string `protobuf:"bytes,2,opt,name=customer_suffix,json=customerSuffix,proto3" json:"customer_suffix,omitempty"`
	CustomerFirstname           string `protobuf:"bytes,3,opt,name=customer_firstname,json=customerFirstname,proto3" json:"customer_firstname,omitempty"`
	CustomerLastname            string `protobuf:"bytes,4,opt,name=customer_lastname,json=customerLastname,proto3" json:"customer_lastname,omitempty"`
	CustomerOfficePhone         string `protobuf:"bytes,5,opt,name=customer_office_phone,json=customerOfficePhone,proto3" json:"customer_office_phone,omitempty"`
	CustomerPrimaryContactEmail string `protobuf:"bytes,6,opt,name=customer_primary_contact_email,json=customerPrimaryContactEmail,proto3" json:"customer_primary_contact_email,omitempty"`
}

func (x *EditCustomerProfileOnSettingPageRequest) Reset() {
	*x = EditCustomerProfileOnSettingPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditCustomerProfileOnSettingPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditCustomerProfileOnSettingPageRequest) ProtoMessage() {}

func (x *EditCustomerProfileOnSettingPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditCustomerProfileOnSettingPageRequest.ProtoReflect.Descriptor instead.
func (*EditCustomerProfileOnSettingPageRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{30}
}

func (x *EditCustomerProfileOnSettingPageRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *EditCustomerProfileOnSettingPageRequest) GetCustomerSuffix() string {
	if x != nil {
		return x.CustomerSuffix
	}
	return ""
}

func (x *EditCustomerProfileOnSettingPageRequest) GetCustomerFirstname() string {
	if x != nil {
		return x.CustomerFirstname
	}
	return ""
}

func (x *EditCustomerProfileOnSettingPageRequest) GetCustomerLastname() string {
	if x != nil {
		return x.CustomerLastname
	}
	return ""
}

func (x *EditCustomerProfileOnSettingPageRequest) GetCustomerOfficePhone() string {
	if x != nil {
		return x.CustomerOfficePhone
	}
	return ""
}

func (x *EditCustomerProfileOnSettingPageRequest) GetCustomerPrimaryContactEmail() string {
	if x != nil {
		return x.CustomerPrimaryContactEmail
	}
	return ""
}

type EditCustomerProfileOnSettingPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateStatus string `protobuf:"bytes,1,opt,name=update_status,json=updateStatus,proto3" json:"update_status,omitempty"`
	ErrorLog     string `protobuf:"bytes,2,opt,name=error_log,json=errorLog,proto3" json:"error_log,omitempty"`
	Code         int32  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *EditCustomerProfileOnSettingPageResponse) Reset() {
	*x = EditCustomerProfileOnSettingPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditCustomerProfileOnSettingPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditCustomerProfileOnSettingPageResponse) ProtoMessage() {}

func (x *EditCustomerProfileOnSettingPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditCustomerProfileOnSettingPageResponse.ProtoReflect.Descriptor instead.
func (*EditCustomerProfileOnSettingPageResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{31}
}

func (x *EditCustomerProfileOnSettingPageResponse) GetUpdateStatus() string {
	if x != nil {
		return x.UpdateStatus
	}
	return ""
}

func (x *EditCustomerProfileOnSettingPageResponse) GetErrorLog() string {
	if x != nil {
		return x.ErrorLog
	}
	return ""
}

func (x *EditCustomerProfileOnSettingPageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type EditCustomerSettingPropertiesequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId          string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerSettingName string `protobuf:"bytes,2,opt,name=customer_setting_name,json=customerSettingName,proto3" json:"customer_setting_name,omitempty"`
	UseGroupSetting     bool   `protobuf:"varint,3,opt,name=useGroupSetting,proto3" json:"useGroupSetting,omitempty"`
}

func (x *EditCustomerSettingPropertiesequest) Reset() {
	*x = EditCustomerSettingPropertiesequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditCustomerSettingPropertiesequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditCustomerSettingPropertiesequest) ProtoMessage() {}

func (x *EditCustomerSettingPropertiesequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditCustomerSettingPropertiesequest.ProtoReflect.Descriptor instead.
func (*EditCustomerSettingPropertiesequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{32}
}

func (x *EditCustomerSettingPropertiesequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *EditCustomerSettingPropertiesequest) GetCustomerSettingName() string {
	if x != nil {
		return x.CustomerSettingName
	}
	return ""
}

func (x *EditCustomerSettingPropertiesequest) GetUseGroupSetting() bool {
	if x != nil {
		return x.UseGroupSetting
	}
	return false
}

type UpdateCustomerNPIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId        string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerNpiNumber string `protobuf:"bytes,2,opt,name=customer_npi_number,json=customerNpiNumber,proto3" json:"customer_npi_number,omitempty"`
}

func (x *UpdateCustomerNPIRequest) Reset() {
	*x = UpdateCustomerNPIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerNPIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerNPIRequest) ProtoMessage() {}

func (x *UpdateCustomerNPIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerNPIRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomerNPIRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateCustomerNPIRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *UpdateCustomerNPIRequest) GetCustomerNpiNumber() string {
	if x != nil {
		return x.CustomerNpiNumber
	}
	return ""
}

type GetIsNewCustomerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewCustomer string `protobuf:"bytes,1,opt,name=newCustomer,proto3" json:"newCustomer,omitempty"`
}

func (x *GetIsNewCustomerResponse) Reset() {
	*x = GetIsNewCustomerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIsNewCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIsNewCustomerResponse) ProtoMessage() {}

func (x *GetIsNewCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIsNewCustomerResponse.ProtoReflect.Descriptor instead.
func (*GetIsNewCustomerResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{34}
}

func (x *GetIsNewCustomerResponse) GetNewCustomer() string {
	if x != nil {
		return x.NewCustomer
	}
	return ""
}

type DeletePatientInternalNotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalNoteId int32 `protobuf:"varint,1,opt,name=internal_note_id,json=internalNoteId,proto3" json:"internal_note_id,omitempty"`
}

func (x *DeletePatientInternalNotesRequest) Reset() {
	*x = DeletePatientInternalNotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePatientInternalNotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePatientInternalNotesRequest) ProtoMessage() {}

func (x *DeletePatientInternalNotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePatientInternalNotesRequest.ProtoReflect.Descriptor instead.
func (*DeletePatientInternalNotesRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{35}
}

func (x *DeletePatientInternalNotesRequest) GetInternalNoteId() int32 {
	if x != nil {
		return x.InternalNoteId
	}
	return 0
}

type DeletePatientInternalNotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalNoteId int32 `protobuf:"varint,1,opt,name=internal_note_id,json=internalNoteId,proto3" json:"internal_note_id,omitempty"`
}

func (x *DeletePatientInternalNotesResponse) Reset() {
	*x = DeletePatientInternalNotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePatientInternalNotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePatientInternalNotesResponse) ProtoMessage() {}

func (x *DeletePatientInternalNotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePatientInternalNotesResponse.ProtoReflect.Descriptor instead.
func (*DeletePatientInternalNotesResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{36}
}

func (x *DeletePatientInternalNotesResponse) GetInternalNoteId() int32 {
	if x != nil {
		return x.InternalNoteId
	}
	return 0
}

type ModifyPatientInternalNotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalNoteId         int32  `protobuf:"varint,1,opt,name=internal_note_id,json=internalNoteId,proto3" json:"internal_note_id,omitempty"`
	Note                   string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	ModifiedBy             string `protobuf:"bytes,3,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	InternalNoteReadStatus string `protobuf:"bytes,4,opt,name=internal_note_read_status,json=internalNoteReadStatus,proto3" json:"internal_note_read_status,omitempty"`
	InternalNoteColor      string `protobuf:"bytes,5,opt,name=internal_note_color,json=internalNoteColor,proto3" json:"internal_note_color,omitempty"`
	InternalNoteType       string `protobuf:"bytes,6,opt,name=internal_note_type,json=internalNoteType,proto3" json:"internal_note_type,omitempty"`
	InternalNoteIcon       string `protobuf:"bytes,7,opt,name=internal_note_icon,json=internalNoteIcon,proto3" json:"internal_note_icon,omitempty"`
}

func (x *ModifyPatientInternalNotesRequest) Reset() {
	*x = ModifyPatientInternalNotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyPatientInternalNotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPatientInternalNotesRequest) ProtoMessage() {}

func (x *ModifyPatientInternalNotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPatientInternalNotesRequest.ProtoReflect.Descriptor instead.
func (*ModifyPatientInternalNotesRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{37}
}

func (x *ModifyPatientInternalNotesRequest) GetInternalNoteId() int32 {
	if x != nil {
		return x.InternalNoteId
	}
	return 0
}

func (x *ModifyPatientInternalNotesRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *ModifyPatientInternalNotesRequest) GetModifiedBy() string {
	if x != nil {
		return x.ModifiedBy
	}
	return ""
}

func (x *ModifyPatientInternalNotesRequest) GetInternalNoteReadStatus() string {
	if x != nil {
		return x.InternalNoteReadStatus
	}
	return ""
}

func (x *ModifyPatientInternalNotesRequest) GetInternalNoteColor() string {
	if x != nil {
		return x.InternalNoteColor
	}
	return ""
}

func (x *ModifyPatientInternalNotesRequest) GetInternalNoteType() string {
	if x != nil {
		return x.InternalNoteType
	}
	return ""
}

func (x *ModifyPatientInternalNotesRequest) GetInternalNoteIcon() string {
	if x != nil {
		return x.InternalNoteIcon
	}
	return ""
}

type ModifyPatientInternalNotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalNoteId         int32  `protobuf:"varint,1,opt,name=internal_note_id,json=internalNoteId,proto3" json:"internal_note_id,omitempty"`
	Note                   string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	PatientId              int32  `protobuf:"varint,3,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	CreatedByCustomerId    int32  `protobuf:"varint,4,opt,name=created_by_customer_id,json=createdByCustomerId,proto3" json:"created_by_customer_id,omitempty"`
	CreatedTime            string `protobuf:"bytes,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	InternalNoteReadStatus string `protobuf:"bytes,6,opt,name=internal_note_read_status,json=internalNoteReadStatus,proto3" json:"internal_note_read_status,omitempty"`
	ModifiedBy             string `protobuf:"bytes,7,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	ModifiedTime           string `protobuf:"bytes,8,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`
	InternalNoteColor      string `protobuf:"bytes,9,opt,name=internal_note_color,json=internalNoteColor,proto3" json:"internal_note_color,omitempty"`
	InternalNoteType       string `protobuf:"bytes,10,opt,name=internal_note_type,json=internalNoteType,proto3" json:"internal_note_type,omitempty"`
	InternalNoteIcon       string `protobuf:"bytes,11,opt,name=internal_note_icon,json=internalNoteIcon,proto3" json:"internal_note_icon,omitempty"`
	IsActive               bool   `protobuf:"varint,12,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *ModifyPatientInternalNotesResponse) Reset() {
	*x = ModifyPatientInternalNotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyPatientInternalNotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPatientInternalNotesResponse) ProtoMessage() {}

func (x *ModifyPatientInternalNotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPatientInternalNotesResponse.ProtoReflect.Descriptor instead.
func (*ModifyPatientInternalNotesResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{38}
}

func (x *ModifyPatientInternalNotesResponse) GetInternalNoteId() int32 {
	if x != nil {
		return x.InternalNoteId
	}
	return 0
}

func (x *ModifyPatientInternalNotesResponse) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *ModifyPatientInternalNotesResponse) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *ModifyPatientInternalNotesResponse) GetCreatedByCustomerId() int32 {
	if x != nil {
		return x.CreatedByCustomerId
	}
	return 0
}

func (x *ModifyPatientInternalNotesResponse) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *ModifyPatientInternalNotesResponse) GetInternalNoteReadStatus() string {
	if x != nil {
		return x.InternalNoteReadStatus
	}
	return ""
}

func (x *ModifyPatientInternalNotesResponse) GetModifiedBy() string {
	if x != nil {
		return x.ModifiedBy
	}
	return ""
}

func (x *ModifyPatientInternalNotesResponse) GetModifiedTime() string {
	if x != nil {
		return x.ModifiedTime
	}
	return ""
}

func (x *ModifyPatientInternalNotesResponse) GetInternalNoteColor() string {
	if x != nil {
		return x.InternalNoteColor
	}
	return ""
}

func (x *ModifyPatientInternalNotesResponse) GetInternalNoteType() string {
	if x != nil {
		return x.InternalNoteType
	}
	return ""
}

func (x *ModifyPatientInternalNotesResponse) GetInternalNoteIcon() string {
	if x != nil {
		return x.InternalNoteIcon
	}
	return ""
}

func (x *ModifyPatientInternalNotesResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type CreatePatientInternalNotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note                string `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	PatientId           int32  `protobuf:"varint,2,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	CreatedByCustomerId int32  `protobuf:"varint,3,opt,name=created_by_customer_id,json=createdByCustomerId,proto3" json:"created_by_customer_id,omitempty"`
	ModifiedBy          string `protobuf:"bytes,4,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
}

func (x *CreatePatientInternalNotesRequest) Reset() {
	*x = CreatePatientInternalNotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePatientInternalNotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePatientInternalNotesRequest) ProtoMessage() {}

func (x *CreatePatientInternalNotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePatientInternalNotesRequest.ProtoReflect.Descriptor instead.
func (*CreatePatientInternalNotesRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{39}
}

func (x *CreatePatientInternalNotesRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreatePatientInternalNotesRequest) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *CreatePatientInternalNotesRequest) GetCreatedByCustomerId() int32 {
	if x != nil {
		return x.CreatedByCustomerId
	}
	return 0
}

func (x *CreatePatientInternalNotesRequest) GetModifiedBy() string {
	if x != nil {
		return x.ModifiedBy
	}
	return ""
}

type CreatePatientInternalNotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalNoteId         int32  `protobuf:"varint,1,opt,name=internal_note_id,json=internalNoteId,proto3" json:"internal_note_id,omitempty"`
	Note                   string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	PatientId              int32  `protobuf:"varint,3,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	CreatedByCustomerId    int32  `protobuf:"varint,4,opt,name=created_by_customer_id,json=createdByCustomerId,proto3" json:"created_by_customer_id,omitempty"`
	CreatedTime            string `protobuf:"bytes,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	InternalNoteReadStatus string `protobuf:"bytes,6,opt,name=internal_note_read_status,json=internalNoteReadStatus,proto3" json:"internal_note_read_status,omitempty"`
	ModifiedBy             string `protobuf:"bytes,7,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	ModifiedTime           string `protobuf:"bytes,8,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`
	InternalNoteColor      string `protobuf:"bytes,9,opt,name=internal_note_color,json=internalNoteColor,proto3" json:"internal_note_color,omitempty"`
	InternalNoteType       string `protobuf:"bytes,10,opt,name=internal_note_type,json=internalNoteType,proto3" json:"internal_note_type,omitempty"`
	InternalNoteIcon       string `protobuf:"bytes,11,opt,name=internal_note_icon,json=internalNoteIcon,proto3" json:"internal_note_icon,omitempty"`
	IsActive               bool   `protobuf:"varint,12,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *CreatePatientInternalNotesResponse) Reset() {
	*x = CreatePatientInternalNotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePatientInternalNotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePatientInternalNotesResponse) ProtoMessage() {}

func (x *CreatePatientInternalNotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePatientInternalNotesResponse.ProtoReflect.Descriptor instead.
func (*CreatePatientInternalNotesResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{40}
}

func (x *CreatePatientInternalNotesResponse) GetInternalNoteId() int32 {
	if x != nil {
		return x.InternalNoteId
	}
	return 0
}

func (x *CreatePatientInternalNotesResponse) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreatePatientInternalNotesResponse) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *CreatePatientInternalNotesResponse) GetCreatedByCustomerId() int32 {
	if x != nil {
		return x.CreatedByCustomerId
	}
	return 0
}

func (x *CreatePatientInternalNotesResponse) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *CreatePatientInternalNotesResponse) GetInternalNoteReadStatus() string {
	if x != nil {
		return x.InternalNoteReadStatus
	}
	return ""
}

func (x *CreatePatientInternalNotesResponse) GetModifiedBy() string {
	if x != nil {
		return x.ModifiedBy
	}
	return ""
}

func (x *CreatePatientInternalNotesResponse) GetModifiedTime() string {
	if x != nil {
		return x.ModifiedTime
	}
	return ""
}

func (x *CreatePatientInternalNotesResponse) GetInternalNoteColor() string {
	if x != nil {
		return x.InternalNoteColor
	}
	return ""
}

func (x *CreatePatientInternalNotesResponse) GetInternalNoteType() string {
	if x != nil {
		return x.InternalNoteType
	}
	return ""
}

func (x *CreatePatientInternalNotesResponse) GetInternalNoteIcon() string {
	if x != nil {
		return x.InternalNoteIcon
	}
	return ""
}

func (x *CreatePatientInternalNotesResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type UpdateCustomerSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId           string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerSettingName  string `protobuf:"bytes,2,opt,name=customer_setting_name,json=customerSettingName,proto3" json:"customer_setting_name,omitempty"`
	CustomerSettingValue string `protobuf:"bytes,3,opt,name=customer_setting_value,json=customerSettingValue,proto3" json:"customer_setting_value,omitempty"`
}

func (x *UpdateCustomerSettingRequest) Reset() {
	*x = UpdateCustomerSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerSettingRequest) ProtoMessage() {}

func (x *UpdateCustomerSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomerSettingRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateCustomerSettingRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *UpdateCustomerSettingRequest) GetCustomerSettingName() string {
	if x != nil {
		return x.CustomerSettingName
	}
	return ""
}

func (x *UpdateCustomerSettingRequest) GetCustomerSettingValue() string {
	if x != nil {
		return x.CustomerSettingValue
	}
	return ""
}

type UpdateCustomerSettingFullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId           string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerSettingName  string `protobuf:"bytes,2,opt,name=customer_setting_name,json=customerSettingName,proto3" json:"customer_setting_name,omitempty"`
	CustomerSettingValue string `protobuf:"bytes,3,opt,name=customer_setting_value,json=customerSettingValue,proto3" json:"customer_setting_value,omitempty"`
	IsActive             bool   `protobuf:"varint,4,opt,name=isActive,proto3" json:"isActive,omitempty"`
	HasGroupSetting      bool   `protobuf:"varint,5,opt,name=hasGroupSetting,proto3" json:"hasGroupSetting,omitempty"`
	IsGroupSetting       bool   `protobuf:"varint,6,opt,name=isGroupSetting,proto3" json:"isGroupSetting,omitempty"`
	UseGroupSetting      bool   `protobuf:"varint,7,opt,name=useGroupSetting,proto3" json:"useGroupSetting,omitempty"`
	IsRequiredSetting    bool   `protobuf:"varint,8,opt,name=isRequiredSetting,proto3" json:"isRequiredSetting,omitempty"`
	ClinicGroupSettingId int32  `protobuf:"varint,9,opt,name=clinic_group_setting_id,json=clinicGroupSettingId,proto3" json:"clinic_group_setting_id,omitempty"`
	UserId               string `protobuf:"bytes,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UpdateCustomerSettingFullRequest) Reset() {
	*x = UpdateCustomerSettingFullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerSettingFullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerSettingFullRequest) ProtoMessage() {}

func (x *UpdateCustomerSettingFullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerSettingFullRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomerSettingFullRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateCustomerSettingFullRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *UpdateCustomerSettingFullRequest) GetCustomerSettingName() string {
	if x != nil {
		return x.CustomerSettingName
	}
	return ""
}

func (x *UpdateCustomerSettingFullRequest) GetCustomerSettingValue() string {
	if x != nil {
		return x.CustomerSettingValue
	}
	return ""
}

func (x *UpdateCustomerSettingFullRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *UpdateCustomerSettingFullRequest) GetHasGroupSetting() bool {
	if x != nil {
		return x.HasGroupSetting
	}
	return false
}

func (x *UpdateCustomerSettingFullRequest) GetIsGroupSetting() bool {
	if x != nil {
		return x.IsGroupSetting
	}
	return false
}

func (x *UpdateCustomerSettingFullRequest) GetUseGroupSetting() bool {
	if x != nil {
		return x.UseGroupSetting
	}
	return false
}

func (x *UpdateCustomerSettingFullRequest) GetIsRequiredSetting() bool {
	if x != nil {
		return x.IsRequiredSetting
	}
	return false
}

func (x *UpdateCustomerSettingFullRequest) GetClinicGroupSettingId() int32 {
	if x != nil {
		return x.ClinicGroupSettingId
	}
	return 0
}

func (x *UpdateCustomerSettingFullRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UpdateCustomerSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	SettingId string `protobuf:"bytes,2,opt,name=setting_id,json=settingId,proto3" json:"setting_id,omitempty"`
}

func (x *UpdateCustomerSettingResponse) Reset() {
	*x = UpdateCustomerSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerSettingResponse) ProtoMessage() {}

func (x *UpdateCustomerSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerSettingResponse.ProtoReflect.Descriptor instead.
func (*UpdateCustomerSettingResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateCustomerSettingResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateCustomerSettingResponse) GetSettingId() string {
	if x != nil {
		return x.SettingId
	}
	return ""
}

type UpdateCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId                int32  `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerFirstName         string `protobuf:"bytes,3,opt,name=customer_first_name,json=customerFirstName,proto3" json:"customer_first_name,omitempty"`
	CustomerLastName          string `protobuf:"bytes,4,opt,name=customer_last_name,json=customerLastName,proto3" json:"customer_last_name,omitempty"`
	CustomerMiddleName        string `protobuf:"bytes,5,opt,name=customer_middle_name,json=customerMiddleName,proto3" json:"customer_middle_name,omitempty"`
	CustomerTypeId            string `protobuf:"bytes,6,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
	CustomerSuffix            string `protobuf:"bytes,7,opt,name=customer_suffix,json=customerSuffix,proto3" json:"customer_suffix,omitempty"`
	CustomerSamplesReceived   string `protobuf:"bytes,8,opt,name=customer_samples_received,json=customerSamplesReceived,proto3" json:"customer_samples_received,omitempty"`
	CustomerRequestSubmitTime string `protobuf:"bytes,9,opt,name=customer_request_submit_time,json=customerRequestSubmitTime,proto3" json:"customer_request_submit_time,omitempty"`
	CustomerPaymentMethod     string `protobuf:"bytes,10,opt,name=customer_payment_method,json=customerPaymentMethod,proto3" json:"customer_payment_method,omitempty"`
	IsActive                  bool   `protobuf:"varint,11,opt,name=isActive,proto3" json:"isActive,omitempty"`
}

func (x *UpdateCustomerRequest) Reset() {
	*x = UpdateCustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerRequest) ProtoMessage() {}

func (x *UpdateCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomerRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{44}
}

func (x *UpdateCustomerRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *UpdateCustomerRequest) GetCustomerFirstName() string {
	if x != nil {
		return x.CustomerFirstName
	}
	return ""
}

func (x *UpdateCustomerRequest) GetCustomerLastName() string {
	if x != nil {
		return x.CustomerLastName
	}
	return ""
}

func (x *UpdateCustomerRequest) GetCustomerMiddleName() string {
	if x != nil {
		return x.CustomerMiddleName
	}
	return ""
}

func (x *UpdateCustomerRequest) GetCustomerTypeId() string {
	if x != nil {
		return x.CustomerTypeId
	}
	return ""
}

func (x *UpdateCustomerRequest) GetCustomerSuffix() string {
	if x != nil {
		return x.CustomerSuffix
	}
	return ""
}

func (x *UpdateCustomerRequest) GetCustomerSamplesReceived() string {
	if x != nil {
		return x.CustomerSamplesReceived
	}
	return ""
}

func (x *UpdateCustomerRequest) GetCustomerRequestSubmitTime() string {
	if x != nil {
		return x.CustomerRequestSubmitTime
	}
	return ""
}

func (x *UpdateCustomerRequest) GetCustomerPaymentMethod() string {
	if x != nil {
		return x.CustomerPaymentMethod
	}
	return ""
}

func (x *UpdateCustomerRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type UpdateCustomerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId                int32  `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerFirstName         string `protobuf:"bytes,3,opt,name=customer_first_name,json=customerFirstName,proto3" json:"customer_first_name,omitempty"`
	CustomerLastName          string `protobuf:"bytes,4,opt,name=customer_last_name,json=customerLastName,proto3" json:"customer_last_name,omitempty"`
	CustomerMiddleName        string `protobuf:"bytes,5,opt,name=customer_middle_name,json=customerMiddleName,proto3" json:"customer_middle_name,omitempty"`
	CustomerTypeId            string `protobuf:"bytes,6,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
	CustomerSuffix            string `protobuf:"bytes,7,opt,name=customer_suffix,json=customerSuffix,proto3" json:"customer_suffix,omitempty"`
	CustomerSamplesReceived   string `protobuf:"bytes,8,opt,name=customer_samples_received,json=customerSamplesReceived,proto3" json:"customer_samples_received,omitempty"`
	CustomerRequestSubmitTime string `protobuf:"bytes,9,opt,name=customer_request_submit_time,json=customerRequestSubmitTime,proto3" json:"customer_request_submit_time,omitempty"`
	CustomerPaymentMethod     string `protobuf:"bytes,10,opt,name=customer_payment_method,json=customerPaymentMethod,proto3" json:"customer_payment_method,omitempty"`
	IsActive                  bool   `protobuf:"varint,11,opt,name=isActive,proto3" json:"isActive,omitempty"`
}

func (x *UpdateCustomerResponse) Reset() {
	*x = UpdateCustomerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerResponse) ProtoMessage() {}

func (x *UpdateCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerResponse.ProtoReflect.Descriptor instead.
func (*UpdateCustomerResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateCustomerResponse) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *UpdateCustomerResponse) GetCustomerFirstName() string {
	if x != nil {
		return x.CustomerFirstName
	}
	return ""
}

func (x *UpdateCustomerResponse) GetCustomerLastName() string {
	if x != nil {
		return x.CustomerLastName
	}
	return ""
}

func (x *UpdateCustomerResponse) GetCustomerMiddleName() string {
	if x != nil {
		return x.CustomerMiddleName
	}
	return ""
}

func (x *UpdateCustomerResponse) GetCustomerTypeId() string {
	if x != nil {
		return x.CustomerTypeId
	}
	return ""
}

func (x *UpdateCustomerResponse) GetCustomerSuffix() string {
	if x != nil {
		return x.CustomerSuffix
	}
	return ""
}

func (x *UpdateCustomerResponse) GetCustomerSamplesReceived() string {
	if x != nil {
		return x.CustomerSamplesReceived
	}
	return ""
}

func (x *UpdateCustomerResponse) GetCustomerRequestSubmitTime() string {
	if x != nil {
		return x.CustomerRequestSubmitTime
	}
	return ""
}

func (x *UpdateCustomerResponse) GetCustomerPaymentMethod() string {
	if x != nil {
		return x.CustomerPaymentMethod
	}
	return ""
}

func (x *UpdateCustomerResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type Customerinfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId   int32  `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerName string `protobuf:"bytes,2,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	Phone        string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Email        string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Jwt          string `protobuf:"bytes,5,opt,name=jwt,proto3" json:"jwt,omitempty"`
}

func (x *Customerinfo) Reset() {
	*x = Customerinfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Customerinfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customerinfo) ProtoMessage() {}

func (x *Customerinfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customerinfo.ProtoReflect.Descriptor instead.
func (*Customerinfo) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{46}
}

func (x *Customerinfo) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *Customerinfo) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *Customerinfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Customerinfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Customerinfo) GetJwt() string {
	if x != nil {
		return x.Jwt
	}
	return ""
}

type CustomerID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId int32 `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *CustomerID) Reset() {
	*x = CustomerID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerID) ProtoMessage() {}

func (x *CustomerID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerID.ProtoReflect.Descriptor instead.
func (*CustomerID) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{47}
}

func (x *CustomerID) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

type AllCustomer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllCustomer) Reset() {
	*x = AllCustomer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllCustomer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllCustomer) ProtoMessage() {}

func (x *AllCustomer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllCustomer.ProtoReflect.Descriptor instead.
func (*AllCustomer) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{48}
}

type CustomerPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       string `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage    string `protobuf:"bytes,2,opt,name=perPage,proto3" json:"perPage,omitempty"`
	CustomerId int32  `protobuf:"varint,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *CustomerPage) Reset() {
	*x = CustomerPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerPage) ProtoMessage() {}

func (x *CustomerPage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerPage.ProtoReflect.Descriptor instead.
func (*CustomerPage) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{49}
}

func (x *CustomerPage) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *CustomerPage) GetPerPage() string {
	if x != nil {
		return x.PerPage
	}
	return ""
}

func (x *CustomerPage) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

type CustomerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer []*Customer `protobuf:"bytes,1,rep,name=Customer,proto3" json:"Customer,omitempty"`
}

func (x *CustomerList) Reset() {
	*x = CustomerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerList) ProtoMessage() {}

func (x *CustomerList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerList.ProtoReflect.Descriptor instead.
func (*CustomerList) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{50}
}

func (x *CustomerList) GetCustomer() []*Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

type CustomerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicId          int32  `protobuf:"varint,1,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	CustomerFirstName string `protobuf:"bytes,2,opt,name=customer_first_name,json=customerFirstName,proto3" json:"customer_first_name,omitempty"`
}

func (x *CustomerInfo) Reset() {
	*x = CustomerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerInfo) ProtoMessage() {}

func (x *CustomerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerInfo.ProtoReflect.Descriptor instead.
func (*CustomerInfo) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{51}
}

func (x *CustomerInfo) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *CustomerInfo) GetCustomerFirstName() string {
	if x != nil {
		return x.CustomerFirstName
	}
	return ""
}

type Customer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId                int32  `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	UserId                    int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CustomerFirstName         string `protobuf:"bytes,3,opt,name=customer_first_name,json=customerFirstName,proto3" json:"customer_first_name,omitempty"`
	CustomerLastName          string `protobuf:"bytes,4,opt,name=customer_last_name,json=customerLastName,proto3" json:"customer_last_name,omitempty"`
	CustomerMiddleName        string `protobuf:"bytes,5,opt,name=customer_middle_name,json=customerMiddleName,proto3" json:"customer_middle_name,omitempty"`
	CustomerTypeId            string `protobuf:"bytes,6,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
	CustomerSuffix            string `protobuf:"bytes,7,opt,name=customer_suffix,json=customerSuffix,proto3" json:"customer_suffix,omitempty"`
	CustomerSamplesReceived   string `protobuf:"bytes,8,opt,name=customer_samples_received,json=customerSamplesReceived,proto3" json:"customer_samples_received,omitempty"`
	CustomerRequestSubmitTime string `protobuf:"bytes,9,opt,name=customer_request_submit_time,json=customerRequestSubmitTime,proto3" json:"customer_request_submit_time,omitempty"`
	CustomerPaymentMethod     string `protobuf:"bytes,10,opt,name=customer_payment_method,json=customerPaymentMethod,proto3" json:"customer_payment_method,omitempty"`
	IsActive                  bool   `protobuf:"varint,11,opt,name=isActive,proto3" json:"isActive,omitempty"`
	CustomerNpiNumber         string `protobuf:"bytes,12,opt,name=customer_npi_number,json=customerNpiNumber,proto3" json:"customer_npi_number,omitempty"`
}

func (x *Customer) Reset() {
	*x = Customer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customer) ProtoMessage() {}

func (x *Customer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customer.ProtoReflect.Descriptor instead.
func (*Customer) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{52}
}

func (x *Customer) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *Customer) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Customer) GetCustomerFirstName() string {
	if x != nil {
		return x.CustomerFirstName
	}
	return ""
}

func (x *Customer) GetCustomerLastName() string {
	if x != nil {
		return x.CustomerLastName
	}
	return ""
}

func (x *Customer) GetCustomerMiddleName() string {
	if x != nil {
		return x.CustomerMiddleName
	}
	return ""
}

func (x *Customer) GetCustomerTypeId() string {
	if x != nil {
		return x.CustomerTypeId
	}
	return ""
}

func (x *Customer) GetCustomerSuffix() string {
	if x != nil {
		return x.CustomerSuffix
	}
	return ""
}

func (x *Customer) GetCustomerSamplesReceived() string {
	if x != nil {
		return x.CustomerSamplesReceived
	}
	return ""
}

func (x *Customer) GetCustomerRequestSubmitTime() string {
	if x != nil {
		return x.CustomerRequestSubmitTime
	}
	return ""
}

func (x *Customer) GetCustomerPaymentMethod() string {
	if x != nil {
		return x.CustomerPaymentMethod
	}
	return ""
}

func (x *Customer) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Customer) GetCustomerNpiNumber() string {
	if x != nil {
		return x.CustomerNpiNumber
	}
	return ""
}

type CreateCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerFirstName         string `protobuf:"bytes,3,opt,name=customer_first_name,json=customerFirstName,proto3" json:"customer_first_name,omitempty"`
	CustomerLastName          string `protobuf:"bytes,4,opt,name=customer_last_name,json=customerLastName,proto3" json:"customer_last_name,omitempty"`
	CustomerMiddleName        string `protobuf:"bytes,5,opt,name=customer_middle_name,json=customerMiddleName,proto3" json:"customer_middle_name,omitempty"`
	CustomerTypeId            string `protobuf:"bytes,6,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
	CustomerSuffix            string `protobuf:"bytes,7,opt,name=customer_suffix,json=customerSuffix,proto3" json:"customer_suffix,omitempty"`
	CustomerSamplesReceived   string `protobuf:"bytes,8,opt,name=customer_samples_received,json=customerSamplesReceived,proto3" json:"customer_samples_received,omitempty"`
	CustomerRequestSubmitTime string `protobuf:"bytes,9,opt,name=customer_request_submit_time,json=customerRequestSubmitTime,proto3" json:"customer_request_submit_time,omitempty"`
	CustomerPaymentMethod     string `protobuf:"bytes,10,opt,name=customer_payment_method,json=customerPaymentMethod,proto3" json:"customer_payment_method,omitempty"`
}

func (x *CreateCustomerRequest) Reset() {
	*x = CreateCustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomerRequest) ProtoMessage() {}

func (x *CreateCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomerRequest.ProtoReflect.Descriptor instead.
func (*CreateCustomerRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{53}
}

func (x *CreateCustomerRequest) GetCustomerFirstName() string {
	if x != nil {
		return x.CustomerFirstName
	}
	return ""
}

func (x *CreateCustomerRequest) GetCustomerLastName() string {
	if x != nil {
		return x.CustomerLastName
	}
	return ""
}

func (x *CreateCustomerRequest) GetCustomerMiddleName() string {
	if x != nil {
		return x.CustomerMiddleName
	}
	return ""
}

func (x *CreateCustomerRequest) GetCustomerTypeId() string {
	if x != nil {
		return x.CustomerTypeId
	}
	return ""
}

func (x *CreateCustomerRequest) GetCustomerSuffix() string {
	if x != nil {
		return x.CustomerSuffix
	}
	return ""
}

func (x *CreateCustomerRequest) GetCustomerSamplesReceived() string {
	if x != nil {
		return x.CustomerSamplesReceived
	}
	return ""
}

func (x *CreateCustomerRequest) GetCustomerRequestSubmitTime() string {
	if x != nil {
		return x.CustomerRequestSubmitTime
	}
	return ""
}

func (x *CreateCustomerRequest) GetCustomerPaymentMethod() string {
	if x != nil {
		return x.CustomerPaymentMethod
	}
	return ""
}

type FullCustomer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId                int32             `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	UserId                    int32             `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CustomerFirstName         string            `protobuf:"bytes,3,opt,name=customer_first_name,json=customerFirstName,proto3" json:"customer_first_name,omitempty"`
	CustomerLastName          string            `protobuf:"bytes,4,opt,name=customer_last_name,json=customerLastName,proto3" json:"customer_last_name,omitempty"`
	CustomerMiddleName        string            `protobuf:"bytes,5,opt,name=customer_middle_name,json=customerMiddleName,proto3" json:"customer_middle_name,omitempty"`
	CustomerTypeId            string            `protobuf:"bytes,6,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
	CustomerSuffix            string            `protobuf:"bytes,7,opt,name=customer_suffix,json=customerSuffix,proto3" json:"customer_suffix,omitempty"`
	CustomerSamplesReceived   string            `protobuf:"bytes,8,opt,name=customer_samples_received,json=customerSamplesReceived,proto3" json:"customer_samples_received,omitempty"`
	CustomerRequestSubmitTime string            `protobuf:"bytes,9,opt,name=customer_request_submit_time,json=customerRequestSubmitTime,proto3" json:"customer_request_submit_time,omitempty"`
	PaymentMethod             string            `protobuf:"bytes,10,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	IsActive                  bool              `protobuf:"varint,11,opt,name=isActive,proto3" json:"isActive,omitempty"`
	CustomerAddress           []*Address        `protobuf:"bytes,12,rep,name=customer_address,json=customerAddress,proto3" json:"customer_address,omitempty"`
	CustomerContact           []*Contact        `protobuf:"bytes,13,rep,name=customer_contact,json=customerContact,proto3" json:"customer_contact,omitempty"`
	CustomerSettings          []*Setting        `protobuf:"bytes,14,rep,name=customer_settings,json=customerSettings,proto3" json:"customer_settings,omitempty"`
	Clinics                   []*CustomerClinic `protobuf:"bytes,15,rep,name=clinics,proto3" json:"clinics,omitempty"`
	CustomerNpiNumber         string            `protobuf:"bytes,16,opt,name=customer_npi_number,json=customerNpiNumber,proto3" json:"customer_npi_number,omitempty"`
	SalesId                   int32             `protobuf:"varint,17,opt,name=sales_id,json=salesId,proto3" json:"sales_id,omitempty"`
	CustomerSignupTime        string            `protobuf:"bytes,18,opt,name=customer_signup_time,json=customerSignupTime,proto3" json:"customer_signup_time,omitempty"`
}

func (x *FullCustomer) Reset() {
	*x = FullCustomer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullCustomer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullCustomer) ProtoMessage() {}

func (x *FullCustomer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullCustomer.ProtoReflect.Descriptor instead.
func (*FullCustomer) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{54}
}

func (x *FullCustomer) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *FullCustomer) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FullCustomer) GetCustomerFirstName() string {
	if x != nil {
		return x.CustomerFirstName
	}
	return ""
}

func (x *FullCustomer) GetCustomerLastName() string {
	if x != nil {
		return x.CustomerLastName
	}
	return ""
}

func (x *FullCustomer) GetCustomerMiddleName() string {
	if x != nil {
		return x.CustomerMiddleName
	}
	return ""
}

func (x *FullCustomer) GetCustomerTypeId() string {
	if x != nil {
		return x.CustomerTypeId
	}
	return ""
}

func (x *FullCustomer) GetCustomerSuffix() string {
	if x != nil {
		return x.CustomerSuffix
	}
	return ""
}

func (x *FullCustomer) GetCustomerSamplesReceived() string {
	if x != nil {
		return x.CustomerSamplesReceived
	}
	return ""
}

func (x *FullCustomer) GetCustomerRequestSubmitTime() string {
	if x != nil {
		return x.CustomerRequestSubmitTime
	}
	return ""
}

func (x *FullCustomer) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *FullCustomer) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *FullCustomer) GetCustomerAddress() []*Address {
	if x != nil {
		return x.CustomerAddress
	}
	return nil
}

func (x *FullCustomer) GetCustomerContact() []*Contact {
	if x != nil {
		return x.CustomerContact
	}
	return nil
}

func (x *FullCustomer) GetCustomerSettings() []*Setting {
	if x != nil {
		return x.CustomerSettings
	}
	return nil
}

func (x *FullCustomer) GetClinics() []*CustomerClinic {
	if x != nil {
		return x.Clinics
	}
	return nil
}

func (x *FullCustomer) GetCustomerNpiNumber() string {
	if x != nil {
		return x.CustomerNpiNumber
	}
	return ""
}

func (x *FullCustomer) GetSalesId() int32 {
	if x != nil {
		return x.SalesId
	}
	return 0
}

func (x *FullCustomer) GetCustomerSignupTime() string {
	if x != nil {
		return x.CustomerSignupTime
	}
	return ""
}

type CustomerClinic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicId          int32      `protobuf:"varint,1,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	ClinicName        string     `protobuf:"bytes,2,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
	UserId            int32      `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ClinicType        string     `protobuf:"bytes,4,opt,name=clinic_type,json=clinicType,proto3" json:"clinic_type,omitempty"`
	IsActive          bool       `protobuf:"varint,5,opt,name=isActive,proto3" json:"isActive,omitempty"`
	ClinicNpiNumber   string     `protobuf:"bytes,6,opt,name=clinic_npi_number,json=clinicNpiNumber,proto3" json:"clinic_npi_number,omitempty"`
	ClinicAccountId   int32      `protobuf:"varint,7,opt,name=clinic_account_id,json=clinicAccountId,proto3" json:"clinic_account_id,omitempty"`
	CustomerRoles     []string   `protobuf:"bytes,8,rep,name=customer_roles,json=customerRoles,proto3" json:"customer_roles,omitempty"`
	CustomerAddresses []*Address `protobuf:"bytes,9,rep,name=customer_addresses,json=customerAddresses,proto3" json:"customer_addresses,omitempty"`
	CustomerContacts  []*Contact `protobuf:"bytes,10,rep,name=customer_contacts,json=customerContacts,proto3" json:"customer_contacts,omitempty"`
}

func (x *CustomerClinic) Reset() {
	*x = CustomerClinic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerClinic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerClinic) ProtoMessage() {}

func (x *CustomerClinic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerClinic.ProtoReflect.Descriptor instead.
func (*CustomerClinic) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{55}
}

func (x *CustomerClinic) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *CustomerClinic) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

func (x *CustomerClinic) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CustomerClinic) GetClinicType() string {
	if x != nil {
		return x.ClinicType
	}
	return ""
}

func (x *CustomerClinic) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *CustomerClinic) GetClinicNpiNumber() string {
	if x != nil {
		return x.ClinicNpiNumber
	}
	return ""
}

func (x *CustomerClinic) GetClinicAccountId() int32 {
	if x != nil {
		return x.ClinicAccountId
	}
	return 0
}

func (x *CustomerClinic) GetCustomerRoles() []string {
	if x != nil {
		return x.CustomerRoles
	}
	return nil
}

func (x *CustomerClinic) GetCustomerAddresses() []*Address {
	if x != nil {
		return x.CustomerAddresses
	}
	return nil
}

func (x *CustomerClinic) GetCustomerContacts() []*Contact {
	if x != nil {
		return x.CustomerContacts
	}
	return nil
}

type ListCustomersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customers   []*FullCustomer `protobuf:"bytes,1,rep,name=customers,proto3" json:"customers,omitempty"`
	HasNextPage bool            `protobuf:"varint,2,opt,name=has_next_page,json=hasNextPage,proto3" json:"has_next_page,omitempty"`
	Total       int32           `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListCustomersResponse) Reset() {
	*x = ListCustomersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCustomersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCustomersResponse) ProtoMessage() {}

func (x *ListCustomersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCustomersResponse.ProtoReflect.Descriptor instead.
func (*ListCustomersResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{56}
}

func (x *ListCustomersResponse) GetCustomers() []*FullCustomer {
	if x != nil {
		return x.Customers
	}
	return nil
}

func (x *ListCustomersResponse) GetHasNextPage() bool {
	if x != nil {
		return x.HasNextPage
	}
	return false
}

func (x *ListCustomersResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type FullCustomerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customers []*FullCustomer `protobuf:"bytes,1,rep,name=customers,proto3" json:"customers,omitempty"`
}

func (x *FullCustomerList) Reset() {
	*x = FullCustomerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullCustomerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullCustomerList) ProtoMessage() {}

func (x *FullCustomerList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullCustomerList.ProtoReflect.Descriptor instead.
func (*FullCustomerList) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{57}
}

func (x *FullCustomerList) GetCustomers() []*FullCustomer {
	if x != nil {
		return x.Customers
	}
	return nil
}

type CustomerIDList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerIds []string `protobuf:"bytes,1,rep,name=customer_ids,json=customerIds,proto3" json:"customer_ids,omitempty"`
}

func (x *CustomerIDList) Reset() {
	*x = CustomerIDList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerIDList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerIDList) ProtoMessage() {}

func (x *CustomerIDList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerIDList.ProtoReflect.Descriptor instead.
func (*CustomerIDList) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{58}
}

func (x *CustomerIDList) GetCustomerIds() []string {
	if x != nil {
		return x.CustomerIds
	}
	return nil
}

type CustomerNameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerNames []string `protobuf:"bytes,1,rep,name=customer_names,json=customerNames,proto3" json:"customer_names,omitempty"`
}

func (x *CustomerNameList) Reset() {
	*x = CustomerNameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerNameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerNameList) ProtoMessage() {}

func (x *CustomerNameList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerNameList.ProtoReflect.Descriptor instead.
func (*CustomerNameList) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{59}
}

func (x *CustomerNameList) GetCustomerNames() []string {
	if x != nil {
		return x.CustomerNames
	}
	return nil
}

type GetCustomerSalesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerNames []string `protobuf:"bytes,1,rep,name=customer_names,json=customerNames,proto3" json:"customer_names,omitempty"`
	CustomerIds   []string `protobuf:"bytes,2,rep,name=customer_ids,json=customerIds,proto3" json:"customer_ids,omitempty"`
}

func (x *GetCustomerSalesRequest) Reset() {
	*x = GetCustomerSalesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerSalesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerSalesRequest) ProtoMessage() {}

func (x *GetCustomerSalesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerSalesRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerSalesRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{60}
}

func (x *GetCustomerSalesRequest) GetCustomerNames() []string {
	if x != nil {
		return x.CustomerNames
	}
	return nil
}

func (x *GetCustomerSalesRequest) GetCustomerIds() []string {
	if x != nil {
		return x.CustomerIds
	}
	return nil
}

type GetCustomerSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId      int32    `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	SettingNameList []string `protobuf:"bytes,2,rep,name=settingNameList,proto3" json:"settingNameList,omitempty"`
}

func (x *GetCustomerSettingRequest) Reset() {
	*x = GetCustomerSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerSettingRequest) ProtoMessage() {}

func (x *GetCustomerSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerSettingRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerSettingRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{61}
}

func (x *GetCustomerSettingRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *GetCustomerSettingRequest) GetSettingNameList() []string {
	if x != nil {
		return x.SettingNameList
	}
	return nil
}

type GetCustomerSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId       int32      `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerSettings []*Setting `protobuf:"bytes,2,rep,name=customer_settings,json=customerSettings,proto3" json:"customer_settings,omitempty"`
}

func (x *GetCustomerSettingResponse) Reset() {
	*x = GetCustomerSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerSettingResponse) ProtoMessage() {}

func (x *GetCustomerSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerSettingResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerSettingResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{62}
}

func (x *GetCustomerSettingResponse) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *GetCustomerSettingResponse) GetCustomerSettings() []*Setting {
	if x != nil {
		return x.CustomerSettings
	}
	return nil
}

type GetSampleDataByPracticeAndSalesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesNames   []string `protobuf:"bytes,1,rep,name=sales_names,json=salesNames,proto3" json:"sales_names,omitempty"`
	PracticeName string   `protobuf:"bytes,2,opt,name=practice_name,json=practiceName,proto3" json:"practice_name,omitempty"`
}

func (x *GetSampleDataByPracticeAndSalesRequest) Reset() {
	*x = GetSampleDataByPracticeAndSalesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSampleDataByPracticeAndSalesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSampleDataByPracticeAndSalesRequest) ProtoMessage() {}

func (x *GetSampleDataByPracticeAndSalesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSampleDataByPracticeAndSalesRequest.ProtoReflect.Descriptor instead.
func (*GetSampleDataByPracticeAndSalesRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{63}
}

func (x *GetSampleDataByPracticeAndSalesRequest) GetSalesNames() []string {
	if x != nil {
		return x.SalesNames
	}
	return nil
}

func (x *GetSampleDataByPracticeAndSalesRequest) GetPracticeName() string {
	if x != nil {
		return x.PracticeName
	}
	return ""
}

type SampleDataByPracticeAndSalesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sample []*PracticeAndSale `protobuf:"bytes,1,rep,name=Sample,proto3" json:"Sample,omitempty"`
}

func (x *SampleDataByPracticeAndSalesResponse) Reset() {
	*x = SampleDataByPracticeAndSalesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleDataByPracticeAndSalesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleDataByPracticeAndSalesResponse) ProtoMessage() {}

func (x *SampleDataByPracticeAndSalesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleDataByPracticeAndSalesResponse.ProtoReflect.Descriptor instead.
func (*SampleDataByPracticeAndSalesResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{64}
}

func (x *SampleDataByPracticeAndSalesResponse) GetSample() []*PracticeAndSale {
	if x != nil {
		return x.Sample
	}
	return nil
}

type PracticeAndSale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleResult []*PracticeAndSalea `protobuf:"bytes,1,rep,name=SampleResult,proto3" json:"SampleResult,omitempty"`
}

func (x *PracticeAndSale) Reset() {
	*x = PracticeAndSale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PracticeAndSale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PracticeAndSale) ProtoMessage() {}

func (x *PracticeAndSale) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PracticeAndSale.ProtoReflect.Descriptor instead.
func (*PracticeAndSale) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{65}
}

func (x *PracticeAndSale) GetSampleResult() []*PracticeAndSalea {
	if x != nil {
		return x.SampleResult
	}
	return nil
}

type PracticeAndSalea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinList []*PracticeAndSaleac `protobuf:"bytes,1,rep,name=fin_list,json=finList,proto3" json:"fin_list,omitempty"`
}

func (x *PracticeAndSalea) Reset() {
	*x = PracticeAndSalea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PracticeAndSalea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PracticeAndSalea) ProtoMessage() {}

func (x *PracticeAndSalea) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PracticeAndSalea.ProtoReflect.Descriptor instead.
func (*PracticeAndSalea) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{66}
}

func (x *PracticeAndSalea) GetFinList() []*PracticeAndSaleac {
	if x != nil {
		return x.FinList
	}
	return nil
}

type PracticeAndSaleac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesId      int32                 `protobuf:"varint,1,opt,name=sales_id,json=salesId,proto3" json:"sales_id,omitempty"`
	CustomerInfo *PracticeAndSaleCus   `protobuf:"bytes,2,opt,name=customer_info,json=customerInfo,proto3" json:"customer_info,omitempty"`
	Samples      []*PracticeAndSaleSam `protobuf:"bytes,3,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *PracticeAndSaleac) Reset() {
	*x = PracticeAndSaleac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PracticeAndSaleac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PracticeAndSaleac) ProtoMessage() {}

func (x *PracticeAndSaleac) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PracticeAndSaleac.ProtoReflect.Descriptor instead.
func (*PracticeAndSaleac) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{67}
}

func (x *PracticeAndSaleac) GetSalesId() int32 {
	if x != nil {
		return x.SalesId
	}
	return 0
}

func (x *PracticeAndSaleac) GetCustomerInfo() *PracticeAndSaleCus {
	if x != nil {
		return x.CustomerInfo
	}
	return nil
}

func (x *PracticeAndSaleac) GetSamples() []*PracticeAndSaleSam {
	if x != nil {
		return x.Samples
	}
	return nil
}

type PracticeAndSaleCus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId         int32  `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerFirstName  string `protobuf:"bytes,2,opt,name=customer_first_name,json=customerFirstName,proto3" json:"customer_first_name,omitempty"`
	CustomerLastName   string `protobuf:"bytes,3,opt,name=customer_last_name,json=customerLastName,proto3" json:"customer_last_name,omitempty"`
	CustomerMiddleName string `protobuf:"bytes,4,opt,name=customer_middle_name,json=customerMiddleName,proto3" json:"customer_middle_name,omitempty"`
}

func (x *PracticeAndSaleCus) Reset() {
	*x = PracticeAndSaleCus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PracticeAndSaleCus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PracticeAndSaleCus) ProtoMessage() {}

func (x *PracticeAndSaleCus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PracticeAndSaleCus.ProtoReflect.Descriptor instead.
func (*PracticeAndSaleCus) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{68}
}

func (x *PracticeAndSaleCus) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *PracticeAndSaleCus) GetCustomerFirstName() string {
	if x != nil {
		return x.CustomerFirstName
	}
	return ""
}

func (x *PracticeAndSaleCus) GetCustomerLastName() string {
	if x != nil {
		return x.CustomerLastName
	}
	return ""
}

func (x *PracticeAndSaleCus) GetCustomerMiddleName() string {
	if x != nil {
		return x.CustomerMiddleName
	}
	return ""
}

type PracticeAndSaleSam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId           int32      `protobuf:"varint,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	SampleReceivedTime string     `protobuf:"bytes,2,opt,name=sample_received_time,json=sampleReceivedTime,proto3" json:"sample_received_time,omitempty"`
	AccessionId        string     `protobuf:"bytes,3,opt,name=accession_id,json=accessionId,proto3" json:"accession_id,omitempty"`
	Order              *OrderTime `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *PracticeAndSaleSam) Reset() {
	*x = PracticeAndSaleSam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PracticeAndSaleSam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PracticeAndSaleSam) ProtoMessage() {}

func (x *PracticeAndSaleSam) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PracticeAndSaleSam.ProtoReflect.Descriptor instead.
func (*PracticeAndSaleSam) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{69}
}

func (x *PracticeAndSaleSam) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *PracticeAndSaleSam) GetSampleReceivedTime() string {
	if x != nil {
		return x.SampleReceivedTime
	}
	return ""
}

func (x *PracticeAndSaleSam) GetAccessionId() string {
	if x != nil {
		return x.AccessionId
	}
	return ""
}

func (x *PracticeAndSaleSam) GetOrder() *OrderTime {
	if x != nil {
		return x.Order
	}
	return nil
}

type OrderTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderCreateTime string `protobuf:"bytes,1,opt,name=order_create_time,json=orderCreateTime,proto3" json:"order_create_time,omitempty"`
}

func (x *OrderTime) Reset() {
	*x = OrderTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTime) ProtoMessage() {}

func (x *OrderTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTime.ProtoReflect.Descriptor instead.
func (*OrderTime) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{70}
}

func (x *OrderTime) GetOrderCreateTime() string {
	if x != nil {
		return x.OrderCreateTime
	}
	return ""
}

type NewEditCustomerProfileOnSettingPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicId                    int32  `protobuf:"varint,1,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	CustomerId                  string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerSuffix              string `protobuf:"bytes,3,opt,name=customer_suffix,json=customerSuffix,proto3" json:"customer_suffix,omitempty"`
	CustomerFirstname           string `protobuf:"bytes,4,opt,name=customer_firstname,json=customerFirstname,proto3" json:"customer_firstname,omitempty"`
	CustomerLastname            string `protobuf:"bytes,5,opt,name=customer_lastname,json=customerLastname,proto3" json:"customer_lastname,omitempty"`
	CustomerOfficePhone         string `protobuf:"bytes,6,opt,name=customer_office_phone,json=customerOfficePhone,proto3" json:"customer_office_phone,omitempty"`
	CustomerPrimaryContactEmail string `protobuf:"bytes,7,opt,name=customer_primary_contact_email,json=customerPrimaryContactEmail,proto3" json:"customer_primary_contact_email,omitempty"`
	CustomerNewRole             string `protobuf:"bytes,8,opt,name=customer_new_role,json=customerNewRole,proto3" json:"customer_new_role,omitempty"`
}

func (x *NewEditCustomerProfileOnSettingPageRequest) Reset() {
	*x = NewEditCustomerProfileOnSettingPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewEditCustomerProfileOnSettingPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewEditCustomerProfileOnSettingPageRequest) ProtoMessage() {}

func (x *NewEditCustomerProfileOnSettingPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewEditCustomerProfileOnSettingPageRequest.ProtoReflect.Descriptor instead.
func (*NewEditCustomerProfileOnSettingPageRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{71}
}

func (x *NewEditCustomerProfileOnSettingPageRequest) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *NewEditCustomerProfileOnSettingPageRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *NewEditCustomerProfileOnSettingPageRequest) GetCustomerSuffix() string {
	if x != nil {
		return x.CustomerSuffix
	}
	return ""
}

func (x *NewEditCustomerProfileOnSettingPageRequest) GetCustomerFirstname() string {
	if x != nil {
		return x.CustomerFirstname
	}
	return ""
}

func (x *NewEditCustomerProfileOnSettingPageRequest) GetCustomerLastname() string {
	if x != nil {
		return x.CustomerLastname
	}
	return ""
}

func (x *NewEditCustomerProfileOnSettingPageRequest) GetCustomerOfficePhone() string {
	if x != nil {
		return x.CustomerOfficePhone
	}
	return ""
}

func (x *NewEditCustomerProfileOnSettingPageRequest) GetCustomerPrimaryContactEmail() string {
	if x != nil {
		return x.CustomerPrimaryContactEmail
	}
	return ""
}

func (x *NewEditCustomerProfileOnSettingPageRequest) GetCustomerNewRole() string {
	if x != nil {
		return x.CustomerNewRole
	}
	return ""
}

type NewEditCustomerProfileOnSettingPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateStatus string `protobuf:"bytes,1,opt,name=update_status,json=updateStatus,proto3" json:"update_status,omitempty"`
	ErrorLog     string `protobuf:"bytes,2,opt,name=error_log,json=errorLog,proto3" json:"error_log,omitempty"`
	Code         int32  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *NewEditCustomerProfileOnSettingPageResponse) Reset() {
	*x = NewEditCustomerProfileOnSettingPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewEditCustomerProfileOnSettingPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewEditCustomerProfileOnSettingPageResponse) ProtoMessage() {}

func (x *NewEditCustomerProfileOnSettingPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewEditCustomerProfileOnSettingPageResponse.ProtoReflect.Descriptor instead.
func (*NewEditCustomerProfileOnSettingPageResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{72}
}

func (x *NewEditCustomerProfileOnSettingPageResponse) GetUpdateStatus() string {
	if x != nil {
		return x.UpdateStatus
	}
	return ""
}

func (x *NewEditCustomerProfileOnSettingPageResponse) GetErrorLog() string {
	if x != nil {
		return x.ErrorLog
	}
	return ""
}

func (x *NewEditCustomerProfileOnSettingPageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type V2_EditCustomerProfileOnSettingPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicId             int32    `protobuf:"varint,1,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	CustomerId           string   `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerSuffix       string   `protobuf:"bytes,3,opt,name=customer_suffix,json=customerSuffix,proto3" json:"customer_suffix,omitempty"`
	CustomerProvider_NPI string   `protobuf:"bytes,4,opt,name=customer_provider_NPI,json=customerProviderNPI,proto3" json:"customer_provider_NPI,omitempty"`
	CustomerFirstname    string   `protobuf:"bytes,5,opt,name=customer_firstname,json=customerFirstname,proto3" json:"customer_firstname,omitempty"`
	CustomerLastname     string   `protobuf:"bytes,6,opt,name=customer_lastname,json=customerLastname,proto3" json:"customer_lastname,omitempty"`
	CustomerOfficePhone  string   `protobuf:"bytes,7,opt,name=customer_office_phone,json=customerOfficePhone,proto3" json:"customer_office_phone,omitempty"`
	NotificationEmail    string   `protobuf:"bytes,8,opt,name=notification_email,json=notificationEmail,proto3" json:"notification_email,omitempty"`
	CustomerStreet       string   `protobuf:"bytes,9,opt,name=customer_street,json=customerStreet,proto3" json:"customer_street,omitempty"`
	AptPo                string   `protobuf:"bytes,10,opt,name=apt_po,json=aptPo,proto3" json:"apt_po,omitempty"`
	CustomerCity         string   `protobuf:"bytes,11,opt,name=customer_city,json=customerCity,proto3" json:"customer_city,omitempty"`
	CustomerState        string   `protobuf:"bytes,12,opt,name=customer_state,json=customerState,proto3" json:"customer_state,omitempty"`
	CountryName          string   `protobuf:"bytes,13,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`
	CustomerZipcode      string   `protobuf:"bytes,14,opt,name=customer_zipcode,json=customerZipcode,proto3" json:"customer_zipcode,omitempty"`
	CustomerNewRole      string   `protobuf:"bytes,15,opt,name=customer_new_role,json=customerNewRole,proto3" json:"customer_new_role,omitempty"`
	CustomerNewRoles     []string `protobuf:"bytes,16,rep,name=customer_new_roles,json=customerNewRoles,proto3" json:"customer_new_roles,omitempty"`
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) Reset() {
	*x = V2_EditCustomerProfileOnSettingPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2_EditCustomerProfileOnSettingPageRequest) ProtoMessage() {}

func (x *V2_EditCustomerProfileOnSettingPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2_EditCustomerProfileOnSettingPageRequest.ProtoReflect.Descriptor instead.
func (*V2_EditCustomerProfileOnSettingPageRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{73}
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) GetCustomerSuffix() string {
	if x != nil {
		return x.CustomerSuffix
	}
	return ""
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) GetCustomerProvider_NPI() string {
	if x != nil {
		return x.CustomerProvider_NPI
	}
	return ""
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) GetCustomerFirstname() string {
	if x != nil {
		return x.CustomerFirstname
	}
	return ""
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) GetCustomerLastname() string {
	if x != nil {
		return x.CustomerLastname
	}
	return ""
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) GetCustomerOfficePhone() string {
	if x != nil {
		return x.CustomerOfficePhone
	}
	return ""
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) GetNotificationEmail() string {
	if x != nil {
		return x.NotificationEmail
	}
	return ""
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) GetCustomerStreet() string {
	if x != nil {
		return x.CustomerStreet
	}
	return ""
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) GetAptPo() string {
	if x != nil {
		return x.AptPo
	}
	return ""
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) GetCustomerCity() string {
	if x != nil {
		return x.CustomerCity
	}
	return ""
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) GetCustomerState() string {
	if x != nil {
		return x.CustomerState
	}
	return ""
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) GetCustomerZipcode() string {
	if x != nil {
		return x.CustomerZipcode
	}
	return ""
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) GetCustomerNewRole() string {
	if x != nil {
		return x.CustomerNewRole
	}
	return ""
}

func (x *V2_EditCustomerProfileOnSettingPageRequest) GetCustomerNewRoles() []string {
	if x != nil {
		return x.CustomerNewRoles
	}
	return nil
}

type V2_EditCustomerProfileOnSettingPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateStatus string `protobuf:"bytes,1,opt,name=update_status,json=updateStatus,proto3" json:"update_status,omitempty"`
	ErrorLog     string `protobuf:"bytes,2,opt,name=error_log,json=errorLog,proto3" json:"error_log,omitempty"`
	Code         int32  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *V2_EditCustomerProfileOnSettingPageResponse) Reset() {
	*x = V2_EditCustomerProfileOnSettingPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2_EditCustomerProfileOnSettingPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2_EditCustomerProfileOnSettingPageResponse) ProtoMessage() {}

func (x *V2_EditCustomerProfileOnSettingPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2_EditCustomerProfileOnSettingPageResponse.ProtoReflect.Descriptor instead.
func (*V2_EditCustomerProfileOnSettingPageResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{74}
}

func (x *V2_EditCustomerProfileOnSettingPageResponse) GetUpdateStatus() string {
	if x != nil {
		return x.UpdateStatus
	}
	return ""
}

func (x *V2_EditCustomerProfileOnSettingPageResponse) GetErrorLog() string {
	if x != nil {
		return x.ErrorLog
	}
	return ""
}

func (x *V2_EditCustomerProfileOnSettingPageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type FuzzySearchCustomersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerSearchInput string `protobuf:"bytes,1,opt,name=customer_search_input,json=customerSearchInput,proto3" json:"customer_search_input,omitempty"`
	ClinicId            string `protobuf:"bytes,2,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"` // Optional
}

func (x *FuzzySearchCustomersRequest) Reset() {
	*x = FuzzySearchCustomersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzySearchCustomersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzySearchCustomersRequest) ProtoMessage() {}

func (x *FuzzySearchCustomersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzySearchCustomersRequest.ProtoReflect.Descriptor instead.
func (*FuzzySearchCustomersRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{75}
}

func (x *FuzzySearchCustomersRequest) GetCustomerSearchInput() string {
	if x != nil {
		return x.CustomerSearchInput
	}
	return ""
}

func (x *FuzzySearchCustomersRequest) GetClinicId() string {
	if x != nil {
		return x.ClinicId
	}
	return ""
}

type GetCustomerByNPINumberCustomerIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId int32 `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *GetCustomerByNPINumberCustomerIDResponse) Reset() {
	*x = GetCustomerByNPINumberCustomerIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerByNPINumberCustomerIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerByNPINumberCustomerIDResponse) ProtoMessage() {}

func (x *GetCustomerByNPINumberCustomerIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerByNPINumberCustomerIDResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerByNPINumberCustomerIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{76}
}

func (x *GetCustomerByNPINumberCustomerIDResponse) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

type GetCustomerByNPINumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*GetCustomerByNPINumberCustomerIDResponse `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetCustomerByNPINumberResponse) Reset() {
	*x = GetCustomerByNPINumberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerByNPINumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerByNPINumberResponse) ProtoMessage() {}

func (x *GetCustomerByNPINumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerByNPINumberResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerByNPINumberResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{77}
}

func (x *GetCustomerByNPINumberResponse) GetResult() []*GetCustomerByNPINumberCustomerIDResponse {
	if x != nil {
		return x.Result
	}
	return nil
}

type NPINumberV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NpiNumber  string   `protobuf:"bytes,1,opt,name=npi_number,json=npiNumber,proto3" json:"npi_number,omitempty"`
	ClinicId   *string  `protobuf:"bytes,2,opt,name=clinic_id,json=clinicId,proto3,oneof" json:"clinic_id,omitempty"`
	CustomerId *string  `protobuf:"bytes,3,opt,name=customer_id,json=customerId,proto3,oneof" json:"customer_id,omitempty"`
	Roles      []string `protobuf:"bytes,4,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *NPINumberV2) Reset() {
	*x = NPINumberV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NPINumberV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NPINumberV2) ProtoMessage() {}

func (x *NPINumberV2) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NPINumberV2.ProtoReflect.Descriptor instead.
func (*NPINumberV2) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{78}
}

func (x *NPINumberV2) GetNpiNumber() string {
	if x != nil {
		return x.NpiNumber
	}
	return ""
}

func (x *NPINumberV2) GetClinicId() string {
	if x != nil && x.ClinicId != nil {
		return *x.ClinicId
	}
	return ""
}

func (x *NPINumberV2) GetCustomerId() string {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return ""
}

func (x *NPINumberV2) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type ReinviteNPICheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerNpiNumber string   `protobuf:"bytes,1,opt,name=customer_npi_number,json=customerNpiNumber,proto3" json:"customer_npi_number,omitempty"`
	CustomerRoles     []string `protobuf:"bytes,2,rep,name=customer_roles,json=customerRoles,proto3" json:"customer_roles,omitempty"`
}

func (x *ReinviteNPICheckRequest) Reset() {
	*x = ReinviteNPICheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReinviteNPICheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReinviteNPICheckRequest) ProtoMessage() {}

func (x *ReinviteNPICheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReinviteNPICheckRequest.ProtoReflect.Descriptor instead.
func (*ReinviteNPICheckRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{79}
}

func (x *ReinviteNPICheckRequest) GetCustomerNpiNumber() string {
	if x != nil {
		return x.CustomerNpiNumber
	}
	return ""
}

func (x *ReinviteNPICheckRequest) GetCustomerRoles() []string {
	if x != nil {
		return x.CustomerRoles
	}
	return nil
}

type ReinviteNPICheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ReinviteNPICheckResponse) Reset() {
	*x = ReinviteNPICheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReinviteNPICheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReinviteNPICheckResponse) ProtoMessage() {}

func (x *ReinviteNPICheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReinviteNPICheckResponse.ProtoReflect.Descriptor instead.
func (*ReinviteNPICheckResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{80}
}

func (x *ReinviteNPICheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReinviteNPICheckResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type FuzzySearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerSearchInput string `protobuf:"bytes,1,opt,name=customer_search_input,json=customerSearchInput,proto3" json:"customer_search_input,omitempty"`
}

func (x *FuzzySearchRequest) Reset() {
	*x = FuzzySearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzySearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzySearchRequest) ProtoMessage() {}

func (x *FuzzySearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzySearchRequest.ProtoReflect.Descriptor instead.
func (*FuzzySearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{81}
}

func (x *FuzzySearchRequest) GetCustomerSearchInput() string {
	if x != nil {
		return x.CustomerSearchInput
	}
	return ""
}

type FuzzySearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CustomerClinicData `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *FuzzySearchResponse) Reset() {
	*x = FuzzySearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzySearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzySearchResponse) ProtoMessage() {}

func (x *FuzzySearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzySearchResponse.ProtoReflect.Descriptor instead.
func (*FuzzySearchResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{82}
}

func (x *FuzzySearchResponse) GetResults() []*CustomerClinicData {
	if x != nil {
		return x.Results
	}
	return nil
}

type CustomerClinicData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId   int32  `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerName string `protobuf:"bytes,2,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	ClinicName   string `protobuf:"bytes,3,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
}

func (x *CustomerClinicData) Reset() {
	*x = CustomerClinicData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerClinicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerClinicData) ProtoMessage() {}

func (x *CustomerClinicData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerClinicData.ProtoReflect.Descriptor instead.
func (*CustomerClinicData) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{83}
}

func (x *CustomerClinicData) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CustomerClinicData) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *CustomerClinicData) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

type FetchCustomerBetaProgramsForClinicInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId int32 `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	ClinicId   int32 `protobuf:"varint,2,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
}

func (x *FetchCustomerBetaProgramsForClinicInput) Reset() {
	*x = FetchCustomerBetaProgramsForClinicInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchCustomerBetaProgramsForClinicInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCustomerBetaProgramsForClinicInput) ProtoMessage() {}

func (x *FetchCustomerBetaProgramsForClinicInput) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCustomerBetaProgramsForClinicInput.ProtoReflect.Descriptor instead.
func (*FetchCustomerBetaProgramsForClinicInput) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{84}
}

func (x *FetchCustomerBetaProgramsForClinicInput) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *FetchCustomerBetaProgramsForClinicInput) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

type FetchCustomerBetaProgramsForClinicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of customer beta program data
	Result []*CustomerBetaProgram `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	// Error message if any
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *FetchCustomerBetaProgramsForClinicResponse) Reset() {
	*x = FetchCustomerBetaProgramsForClinicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchCustomerBetaProgramsForClinicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCustomerBetaProgramsForClinicResponse) ProtoMessage() {}

func (x *FetchCustomerBetaProgramsForClinicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCustomerBetaProgramsForClinicResponse.ProtoReflect.Descriptor instead.
func (*FetchCustomerBetaProgramsForClinicResponse) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{85}
}

func (x *FetchCustomerBetaProgramsForClinicResponse) GetResult() []*CustomerBetaProgram {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *FetchCustomerBetaProgramsForClinicResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Customer Beta Program data
type CustomerBetaProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId int32 `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	ClinicId   int32 `protobuf:"varint,2,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	// A list of beta program names the customer is participating in
	BetaPrograms []string `protobuf:"bytes,3,rep,name=beta_programs,json=betaPrograms,proto3" json:"beta_programs,omitempty"`
}

func (x *CustomerBetaProgram) Reset() {
	*x = CustomerBetaProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerBetaProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerBetaProgram) ProtoMessage() {}

func (x *CustomerBetaProgram) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerBetaProgram.ProtoReflect.Descriptor instead.
func (*CustomerBetaProgram) Descriptor() ([]byte, []int) {
	return file_proto_customer_proto_rawDescGZIP(), []int{86}
}

func (x *CustomerBetaProgram) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CustomerBetaProgram) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *CustomerBetaProgram) GetBetaPrograms() []string {
	if x != nil {
		return x.BetaPrograms
	}
	return nil
}

var File_proto_customer_proto protoreflect.FileDescriptor

var file_proto_customer_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x55,
	0x0a, 0x32, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x33, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x54, 0x0a, 0x31, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0xef, 0x01, 0x0a, 0x32,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x22, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1f, 0x69, 0x73, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x12, 0x4b, 0x0a, 0x22, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x6f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x6e, 0x22, 0xd8, 0x06,
	0x0a, 0x1f, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x4e, 0x50, 0x49, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x70, 0x69, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x70, 0x69, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x12,
	0x35, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x7a,
	0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x20, 0x41, 0x64, 0x64,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x50, 0x49, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x1c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x1d,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x1f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x22, 0x42, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x7b, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5a, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x83, 0x03, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x62, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x62, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x1b, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x07, 0x63,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x22, 0x3a, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x59, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd9, 0x08, 0x0a,
	0x15, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x55, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x70, 0x69, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x70, 0x69, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73,
	0x65, 0x5f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x70, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x70, 0x6f, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x69, 0x74, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x61, 0x78, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x61, 0x78,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x61, 0x6c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x75, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x73, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x16,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x0e, 0x53, 0x69, 0x67,
	0x6e, 0x55, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x6f,
	0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x3f, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x32, 0x46, 0x41, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x32, 0x46, 0x41, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x32, 0x46, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x22, 0xf4, 0x05, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x32, 0x46, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x32, 0x66, 0x61, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x32, 0x66,
	0x61, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x41, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x75, 0x73, 0x65, 0x41, 0x73, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x2a, 0x0a, 0x09,
	0x4e, 0x50, 0x49, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x70, 0x69,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x70, 0x69, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xba, 0x01, 0x0a, 0x1d, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x50, 0x49, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x70,
	0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x70, 0x69, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x0e, 0x4e, 0x50, 0x49, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x4e, 0x50, 0x49, 0x5f, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x50, 0x49, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x22, 0x3c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x22, 0x60, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x73, 0x22, 0xb4, 0x06, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x3a, 0x0a, 0x19,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x70, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x70, 0x69, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x5f, 0x0a, 0x1f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a,
	0x1d, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0xc8, 0x02, 0x0a, 0x27, 0x45, 0x64, 0x69, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x2d, 0x0a, 0x12,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x1e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x80, 0x01, 0x0a, 0x28, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x23, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x6b, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x50, 0x49,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x70, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x70, 0x69, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x49,
	0x73, 0x4e, 0x65, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e,
	0x6f, 0x74, 0x65, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e,
	0x6f, 0x74, 0x65, 0x49, 0x64, 0x22, 0xc9, 0x02, 0x0a, 0x21, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e,
	0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x63, 0x6f,
	0x6e, 0x22, 0x83, 0x04, 0x0a, 0x22, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x22, 0x83, 0x04, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xa9, 0x01, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc3, 0x03, 0x0a, 0x20, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68,
	0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x35,
	0x0a, 0x17, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x56,
	0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0xec, 0x03, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xed, 0x03, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x77, 0x74, 0x22, 0x2d, 0x0a, 0x0a, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x0d, 0x0a, 0x0b, 0x41, 0x6c, 0x6c,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x22, 0x5b, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xa8, 0x04, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x70, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x70, 0x69, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xaf, 0x03, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x84, 0x07, 0x0a,
	0x0c, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x49, 0x0a, 0x11,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x07, 0x63,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x6e, 0x70, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x70, 0x69,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xbb, 0x03, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x70, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x70, 0x69,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x22, 0x92, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x53, 0x0a, 0x10, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x22, 0x33, 0x0a, 0x0e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x22, 0x39, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x22, 0x66, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x6e, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x41, 0x6e,
	0x64, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x24, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x79, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6c,
	0x65, 0x52, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x5c, 0x0a, 0x0f, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x0c,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63,
	0x65, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x61, 0x52, 0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x55, 0x0a, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x61, 0x12, 0x41, 0x0a, 0x08, 0x66,
	0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x53,
	0x61, 0x6c, 0x65, 0x61, 0x63, 0x52, 0x07, 0x66, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xbf,
	0x01, 0x0a, 0x11, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x61,
	0x6c, 0x65, 0x61, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x52,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a,
	0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64,
	0x53, 0x61, 0x6c, 0x65, 0x53, 0x61, 0x6d, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x22, 0xc5, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64,
	0x53, 0x61, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x61, 0x6d, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x37, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x94, 0x03, 0x0a, 0x2a, 0x4e, 0x65, 0x77, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x2b, 0x4e, 0x65, 0x77, 0x45,
	0x64, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xba, 0x05,
	0x0a, 0x2a, 0x56, 0x32, 0x5f, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x4e, 0x50, 0x49, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4e, 0x50, 0x49, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x74, 0x5f, 0x70, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x74, 0x50, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x2b, 0x56,
	0x32, 0x5f, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x6e, 0x0a, 0x1b, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64,
	0x22, 0x4b, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42,
	0x79, 0x4e, 0x50, 0x49, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x77, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x50,
	0x49, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x42, 0x79, 0x4e, 0x50, 0x49, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x0b, 0x4e, 0x50, 0x49, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x56, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x70, 0x69, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x70, 0x69, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x22, 0x70, 0x0a, 0x17, 0x52, 0x65, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e, 0x50, 0x49,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x70, 0x69, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x70, 0x69, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x18, 0x52, 0x65, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e,
	0x50, 0x49, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x48, 0x0a, 0x12,
	0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x58, 0x0a, 0x13, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x7b, 0x0a, 0x12, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x67, 0x0a,
	0x27, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x65,
	0x74, 0x61, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x2a, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x65, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x42, 0x65, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x78, 0x0a, 0x13, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x65, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x74, 0x61, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x32, 0xe9, 0x27, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x1a, 0x2a, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x91, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x41,
	0x6e, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x77, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x2c,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x37, 0x22, 0x00,
	0x12, 0x80, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8f, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x1a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0d, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x50, 0x49, 0x12, 0x2d,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x00, 0x12, 0x88,
	0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x1d, 0x45, 0x64,
	0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa1, 0x01, 0x0a, 0x20,
	0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x3c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x91, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x12, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x12, 0x32, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x44, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x71, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x50, 0x49, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x50, 0x49, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x50, 0x49, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x7e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x32, 0x46, 0x41, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x31,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x32, 0x46, 0x41, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x32, 0x46, 0x41, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x83, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x41, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x6c, 0x6c,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x41, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x80, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xaa, 0x01, 0x0a, 0x23, 0x4e, 0x65, 0x77, 0x45, 0x64, 0x69, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4e, 0x65, 0x77, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x89, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x4e, 0x50, 0x49, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x4e, 0x50, 0x49, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x50, 0x49, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaa, 0x01, 0x0a,
	0x23, 0x56, 0x32, 0x5f, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x32, 0x5f, 0x45, 0x64,
	0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x32, 0x5f, 0x45,
	0x64, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xbf, 0x01, 0x0a, 0x2a, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x47, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc2, 0x01, 0x0a, 0x2b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8f, 0x01, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x4e, 0x50, 0x49, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x50, 0x49, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4e,
	0x50, 0x49, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x56, 0x32, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x14, 0x46, 0x75, 0x7a, 0x7a, 0x79,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x12,
	0x30, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x42, 0x79, 0x4e, 0x50, 0x49, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4e, 0x50, 0x49, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x33, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42,
	0x79, 0x4e, 0x50, 0x49, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x10, 0x52, 0x65, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x4e, 0x50, 0x49, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e, 0x50, 0x49, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e, 0x50, 0x49, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x1d, 0x46, 0x75, 0x7a, 0x7a, 0x79,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46,
	0x75, 0x7a, 0x7a, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x22,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x65, 0x74,
	0x61, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x12, 0x3c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x65, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x42, 0x65, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73,
	0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_customer_proto_rawDescOnce sync.Once
	file_proto_customer_proto_rawDescData = file_proto_customer_proto_rawDesc
)

func file_proto_customer_proto_rawDescGZIP() []byte {
	file_proto_customer_proto_rawDescOnce.Do(func() {
		file_proto_customer_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_customer_proto_rawDescData)
	})
	return file_proto_customer_proto_rawDescData
}

var file_proto_customer_proto_msgTypes = make([]protoimpl.MessageInfo, 87)
var file_proto_customer_proto_goTypes = []interface{}{
	(*UpdateCustomerOnboardingQuestionnaireStatusRequest)(nil),  // 0: coresamples_service.UpdateCustomerOnboardingQuestionnaireStatusRequest
	(*UpdateCustomerOnboardingQuestionnaireStatusResponse)(nil), // 1: coresamples_service.UpdateCustomerOnboardingQuestionnaireStatusResponse
	(*CheckCustomerOnboardingQuestionnaireStatusRequest)(nil),   // 2: coresamples_service.CheckCustomerOnboardingQuestionnaireStatusRequest
	(*CheckCustomerOnboardingQuestionnaireStatusResponse)(nil),  // 3: coresamples_service.CheckCustomerOnboardingQuestionnaireStatusResponse
	(*AddCustomerWithNPINumberRequest)(nil),                     // 4: coresamples_service.AddCustomerWithNPINumberRequest
	(*AddCustomerWithNPINumberResponse)(nil),                    // 5: coresamples_service.AddCustomerWithNPINumberResponse
	(*CheckClientAttributesRequest)(nil),                        // 6: coresamples_service.CheckClientAttributesRequest
	(*CheckClientAttributesResponse)(nil),                       // 7: coresamples_service.CheckClientAttributesResponse
	(*ListCustomerAllClinicsRequest)(nil),                       // 8: coresamples_service.ListCustomerAllClinicsRequest
	(*GetStatementRequest)(nil),                                 // 9: coresamples_service.getStatementRequest
	(*GetStatementResponse)(nil),                                // 10: coresamples_service.getStatementResponse
	(*StatementData)(nil),                                       // 11: coresamples_service.StatementData
	(*ListCustomerAllClinicsResponse)(nil),                      // 12: coresamples_service.ListCustomerAllClinicsResponse
	(*CustomerBasicInfoWithClinic)(nil),                         // 13: coresamples_service.CustomerBasicInfoWithClinic
	(*SearchcliensNameRequest)(nil),                             // 14: coresamples_service.SearchcliensNameRequest
	(*ClientsObject)(nil),                                       // 15: coresamples_service.ClientsObject
	(*SearchclientsInfoResponse)(nil),                           // 16: coresamples_service.SearchclientsInfoResponse
	(*CustomerSignUpRequest)(nil),                               // 17: coresamples_service.CustomerSignUpRequest
	(*SignUpResponse)(nil),                                      // 18: coresamples_service.SignUpResponse
	(*GetCustomer2FAContactRequest)(nil),                        // 19: coresamples_service.GetCustomer2FAContactRequest
	(*GetCustomer2FAContactResponse)(nil),                       // 20: coresamples_service.GetCustomer2FAContactResponse
	(*Contact2FAList)(nil),                                      // 21: coresamples_service.Contact2FAList
	(*NPINumber)(nil),                                           // 22: coresamples_service.NPINumber
	(*CheckCustomerNPINumberRequest)(nil),                       // 23: coresamples_service.CheckCustomerNPINumberRequest
	(*NPICheckResult)(nil),                                      // 24: coresamples_service.NPICheckResult
	(*GetCustomerByIDsRequest)(nil),                             // 25: coresamples_service.GetCustomerByIDsRequest
	(*GetCustomerByIDsResponse)(nil),                            // 26: coresamples_service.GetCustomerByIDsResponse
	(*CustomerBasicInfo)(nil),                                   // 27: coresamples_service.CustomerBasicInfo
	(*RemoveCustomerFromClinicRequest)(nil),                     // 28: coresamples_service.RemoveCustomerFromClinicRequest
	(*JoinCustomerFromClinicRequest)(nil),                       // 29: coresamples_service.JoinCustomerFromClinicRequest
	(*EditCustomerProfileOnSettingPageRequest)(nil),             // 30: coresamples_service.EditCustomerProfileOnSettingPageRequest
	(*EditCustomerProfileOnSettingPageResponse)(nil),            // 31: coresamples_service.EditCustomerProfileOnSettingPageResponse
	(*EditCustomerSettingPropertiesequest)(nil),                 // 32: coresamples_service.EditCustomerSettingPropertiesequest
	(*UpdateCustomerNPIRequest)(nil),                            // 33: coresamples_service.UpdateCustomerNPIRequest
	(*GetIsNewCustomerResponse)(nil),                            // 34: coresamples_service.GetIsNewCustomerResponse
	(*DeletePatientInternalNotesRequest)(nil),                   // 35: coresamples_service.DeletePatientInternalNotesRequest
	(*DeletePatientInternalNotesResponse)(nil),                  // 36: coresamples_service.DeletePatientInternalNotesResponse
	(*ModifyPatientInternalNotesRequest)(nil),                   // 37: coresamples_service.ModifyPatientInternalNotesRequest
	(*ModifyPatientInternalNotesResponse)(nil),                  // 38: coresamples_service.ModifyPatientInternalNotesResponse
	(*CreatePatientInternalNotesRequest)(nil),                   // 39: coresamples_service.CreatePatientInternalNotesRequest
	(*CreatePatientInternalNotesResponse)(nil),                  // 40: coresamples_service.CreatePatientInternalNotesResponse
	(*UpdateCustomerSettingRequest)(nil),                        // 41: coresamples_service.UpdateCustomerSettingRequest
	(*UpdateCustomerSettingFullRequest)(nil),                    // 42: coresamples_service.UpdateCustomerSettingFullRequest
	(*UpdateCustomerSettingResponse)(nil),                       // 43: coresamples_service.UpdateCustomerSettingResponse
	(*UpdateCustomerRequest)(nil),                               // 44: coresamples_service.UpdateCustomerRequest
	(*UpdateCustomerResponse)(nil),                              // 45: coresamples_service.UpdateCustomerResponse
	(*Customerinfo)(nil),                                        // 46: coresamples_service.customerinfo
	(*CustomerID)(nil),                                          // 47: coresamples_service.CustomerID
	(*AllCustomer)(nil),                                         // 48: coresamples_service.AllCustomer
	(*CustomerPage)(nil),                                        // 49: coresamples_service.CustomerPage
	(*CustomerList)(nil),                                        // 50: coresamples_service.CustomerList
	(*CustomerInfo)(nil),                                        // 51: coresamples_service.CustomerInfo
	(*Customer)(nil),                                            // 52: coresamples_service.Customer
	(*CreateCustomerRequest)(nil),                               // 53: coresamples_service.CreateCustomerRequest
	(*FullCustomer)(nil),                                        // 54: coresamples_service.FullCustomer
	(*CustomerClinic)(nil),                                      // 55: coresamples_service.CustomerClinic
	(*ListCustomersResponse)(nil),                               // 56: coresamples_service.ListCustomersResponse
	(*FullCustomerList)(nil),                                    // 57: coresamples_service.FullCustomerList
	(*CustomerIDList)(nil),                                      // 58: coresamples_service.CustomerIDList
	(*CustomerNameList)(nil),                                    // 59: coresamples_service.CustomerNameList
	(*GetCustomerSalesRequest)(nil),                             // 60: coresamples_service.GetCustomerSalesRequest
	(*GetCustomerSettingRequest)(nil),                           // 61: coresamples_service.GetCustomerSettingRequest
	(*GetCustomerSettingResponse)(nil),                          // 62: coresamples_service.GetCustomerSettingResponse
	(*GetSampleDataByPracticeAndSalesRequest)(nil),              // 63: coresamples_service.GetSampleDataByPracticeAndSalesRequest
	(*SampleDataByPracticeAndSalesResponse)(nil),                // 64: coresamples_service.SampleDataByPracticeAndSalesResponse
	(*PracticeAndSale)(nil),                                     // 65: coresamples_service.PracticeAndSale
	(*PracticeAndSalea)(nil),                                    // 66: coresamples_service.PracticeAndSalea
	(*PracticeAndSaleac)(nil),                                   // 67: coresamples_service.PracticeAndSaleac
	(*PracticeAndSaleCus)(nil),                                  // 68: coresamples_service.PracticeAndSaleCus
	(*PracticeAndSaleSam)(nil),                                  // 69: coresamples_service.PracticeAndSaleSam
	(*OrderTime)(nil),                                           // 70: coresamples_service.OrderTime
	(*NewEditCustomerProfileOnSettingPageRequest)(nil),          // 71: coresamples_service.NewEditCustomerProfileOnSettingPageRequest
	(*NewEditCustomerProfileOnSettingPageResponse)(nil),         // 72: coresamples_service.NewEditCustomerProfileOnSettingPageResponse
	(*V2_EditCustomerProfileOnSettingPageRequest)(nil),          // 73: coresamples_service.V2_EditCustomerProfileOnSettingPageRequest
	(*V2_EditCustomerProfileOnSettingPageResponse)(nil),         // 74: coresamples_service.V2_EditCustomerProfileOnSettingPageResponse
	(*FuzzySearchCustomersRequest)(nil),                         // 75: coresamples_service.FuzzySearchCustomersRequest
	(*GetCustomerByNPINumberCustomerIDResponse)(nil),            // 76: coresamples_service.GetCustomerByNPINumberCustomerIDResponse
	(*GetCustomerByNPINumberResponse)(nil),                      // 77: coresamples_service.GetCustomerByNPINumberResponse
	(*NPINumberV2)(nil),                                         // 78: coresamples_service.NPINumberV2
	(*ReinviteNPICheckRequest)(nil),                             // 79: coresamples_service.ReinviteNPICheckRequest
	(*ReinviteNPICheckResponse)(nil),                            // 80: coresamples_service.ReinviteNPICheckResponse
	(*FuzzySearchRequest)(nil),                                  // 81: coresamples_service.FuzzySearchRequest
	(*FuzzySearchResponse)(nil),                                 // 82: coresamples_service.FuzzySearchResponse
	(*CustomerClinicData)(nil),                                  // 83: coresamples_service.CustomerClinicData
	(*FetchCustomerBetaProgramsForClinicInput)(nil),             // 84: coresamples_service.FetchCustomerBetaProgramsForClinicInput
	(*FetchCustomerBetaProgramsForClinicResponse)(nil),          // 85: coresamples_service.FetchCustomerBetaProgramsForClinicResponse
	(*CustomerBetaProgram)(nil),                                 // 86: coresamples_service.CustomerBetaProgram
	(*Address)(nil),                                             // 87: coresamples_service.Address
	(*Contact)(nil),                                             // 88: coresamples_service.Contact
	(*Setting)(nil),                                             // 89: coresamples_service.setting
	(*SalesInfo)(nil),                                           // 90: coresamples_service.SalesInfo
	(*ListSalesCustomerResponseV7)(nil),                         // 91: coresamples_service.ListSalesCustomerResponseV7
}
var file_proto_customer_proto_depIdxs = []int32{
	11, // 0: coresamples_service.getStatementResponse.statements:type_name -> coresamples_service.StatementData
	13, // 1: coresamples_service.ListCustomerAllClinicsResponse.customer_clinics:type_name -> coresamples_service.CustomerBasicInfoWithClinic
	55, // 2: coresamples_service.CustomerBasicInfoWithClinic.clinics:type_name -> coresamples_service.CustomerClinic
	15, // 3: coresamples_service.SearchclientsInfoResponse.clients:type_name -> coresamples_service.ClientsObject
	21, // 4: coresamples_service.GetCustomer2FAContactResponse.contacts:type_name -> coresamples_service.Contact2FAList
	27, // 5: coresamples_service.GetCustomerByIDsResponse.customers:type_name -> coresamples_service.CustomerBasicInfo
	87, // 6: coresamples_service.CustomerBasicInfo.customer_address:type_name -> coresamples_service.Address
	88, // 7: coresamples_service.CustomerBasicInfo.customer_contact:type_name -> coresamples_service.Contact
	52, // 8: coresamples_service.CustomerList.Customer:type_name -> coresamples_service.Customer
	87, // 9: coresamples_service.FullCustomer.customer_address:type_name -> coresamples_service.Address
	88, // 10: coresamples_service.FullCustomer.customer_contact:type_name -> coresamples_service.Contact
	89, // 11: coresamples_service.FullCustomer.customer_settings:type_name -> coresamples_service.setting
	55, // 12: coresamples_service.FullCustomer.clinics:type_name -> coresamples_service.CustomerClinic
	87, // 13: coresamples_service.CustomerClinic.customer_addresses:type_name -> coresamples_service.Address
	88, // 14: coresamples_service.CustomerClinic.customer_contacts:type_name -> coresamples_service.Contact
	54, // 15: coresamples_service.ListCustomersResponse.customers:type_name -> coresamples_service.FullCustomer
	54, // 16: coresamples_service.FullCustomerList.customers:type_name -> coresamples_service.FullCustomer
	89, // 17: coresamples_service.GetCustomerSettingResponse.customer_settings:type_name -> coresamples_service.setting
	65, // 18: coresamples_service.SampleDataByPracticeAndSalesResponse.Sample:type_name -> coresamples_service.PracticeAndSale
	66, // 19: coresamples_service.PracticeAndSale.SampleResult:type_name -> coresamples_service.PracticeAndSalea
	67, // 20: coresamples_service.PracticeAndSalea.fin_list:type_name -> coresamples_service.PracticeAndSaleac
	68, // 21: coresamples_service.PracticeAndSaleac.customer_info:type_name -> coresamples_service.PracticeAndSaleCus
	69, // 22: coresamples_service.PracticeAndSaleac.samples:type_name -> coresamples_service.PracticeAndSaleSam
	70, // 23: coresamples_service.PracticeAndSaleSam.order:type_name -> coresamples_service.OrderTime
	76, // 24: coresamples_service.GetCustomerByNPINumberResponse.result:type_name -> coresamples_service.GetCustomerByNPINumberCustomerIDResponse
	83, // 25: coresamples_service.FuzzySearchResponse.results:type_name -> coresamples_service.CustomerClinicData
	86, // 26: coresamples_service.FetchCustomerBetaProgramsForClinicResponse.result:type_name -> coresamples_service.CustomerBetaProgram
	53, // 27: coresamples_service.CustomerService.CreateCustomer:input_type -> coresamples_service.CreateCustomerRequest
	49, // 28: coresamples_service.CustomerService.ListCustomers:input_type -> coresamples_service.CustomerPage
	47, // 29: coresamples_service.CustomerService.GetCustomer:input_type -> coresamples_service.CustomerID
	90, // 30: coresamples_service.CustomerService.GetSalesCustomers:input_type -> coresamples_service.SalesInfo
	63, // 31: coresamples_service.CustomerService.GetClinicSalesSamples:input_type -> coresamples_service.GetSampleDataByPracticeAndSalesRequest
	61, // 32: coresamples_service.CustomerService.GetCustomerSetting:input_type -> coresamples_service.GetCustomerSettingRequest
	60, // 33: coresamples_service.CustomerService.GetCustomerSales:input_type -> coresamples_service.GetCustomerSalesRequest
	41, // 34: coresamples_service.CustomerService.UpdateCustomerSetting:input_type -> coresamples_service.UpdateCustomerSettingRequest
	44, // 35: coresamples_service.CustomerService.UpdateCustomer:input_type -> coresamples_service.UpdateCustomerRequest
	39, // 36: coresamples_service.CustomerService.CreatePatientInternalNotes:input_type -> coresamples_service.CreatePatientInternalNotesRequest
	37, // 37: coresamples_service.CustomerService.ModifyPatientInternalNotes:input_type -> coresamples_service.ModifyPatientInternalNotesRequest
	35, // 38: coresamples_service.CustomerService.DeletePatientInternalNotes:input_type -> coresamples_service.DeletePatientInternalNotesRequest
	47, // 39: coresamples_service.CustomerService.IsNewCustomer:input_type -> coresamples_service.CustomerID
	33, // 40: coresamples_service.CustomerService.UpdateCustomerNPI:input_type -> coresamples_service.UpdateCustomerNPIRequest
	42, // 41: coresamples_service.CustomerService.UpdateCustomerSettingFull:input_type -> coresamples_service.UpdateCustomerSettingFullRequest
	32, // 42: coresamples_service.CustomerService.EditCustomerSettingProperties:input_type -> coresamples_service.EditCustomerSettingPropertiesequest
	30, // 43: coresamples_service.CustomerService.EditCustomerProfileOnSettingPage:input_type -> coresamples_service.EditCustomerProfileOnSettingPageRequest
	28, // 44: coresamples_service.CustomerService.RemoveCustomerFromClinic:input_type -> coresamples_service.RemoveCustomerFromClinicRequest
	29, // 45: coresamples_service.CustomerService.JoinCustomerToClinic:input_type -> coresamples_service.JoinCustomerFromClinicRequest
	25, // 46: coresamples_service.CustomerService.GetCustomerByIDs:input_type -> coresamples_service.GetCustomerByIDsRequest
	23, // 47: coresamples_service.CustomerService.CheckCustomerNPINumber:input_type -> coresamples_service.CheckCustomerNPINumberRequest
	19, // 48: coresamples_service.CustomerService.GetCustomer2FAContact:input_type -> coresamples_service.GetCustomer2FAContactRequest
	17, // 49: coresamples_service.CustomerService.SignUpCustomer:input_type -> coresamples_service.CustomerSignUpRequest
	14, // 50: coresamples_service.CustomerService.SearchClientsByName:input_type -> coresamples_service.SearchcliensNameRequest
	8,  // 51: coresamples_service.CustomerService.ListCustomerAllClinics:input_type -> coresamples_service.ListCustomerAllClinicsRequest
	9,  // 52: coresamples_service.CustomerService.GetStatementData:input_type -> coresamples_service.getStatementRequest
	6,  // 53: coresamples_service.CustomerService.CheckClientAttributes:input_type -> coresamples_service.CheckClientAttributesRequest
	71, // 54: coresamples_service.CustomerService.NewEditCustomerProfileOnSettingPage:input_type -> coresamples_service.NewEditCustomerProfileOnSettingPageRequest
	4,  // 55: coresamples_service.CustomerService.AddCustomerWithNPINumber:input_type -> coresamples_service.AddCustomerWithNPINumberRequest
	73, // 56: coresamples_service.CustomerService.V2_EditCustomerProfileOnSettingPage:input_type -> coresamples_service.V2_EditCustomerProfileOnSettingPageRequest
	2,  // 57: coresamples_service.CustomerService.CheckCustomerOnboardingQuestionnaireStatus:input_type -> coresamples_service.CheckCustomerOnboardingQuestionnaireStatusRequest
	0,  // 58: coresamples_service.CustomerService.UpdateCustomerOnboardingQuestionnaireStatus:input_type -> coresamples_service.UpdateCustomerOnboardingQuestionnaireStatusRequest
	4,  // 59: coresamples_service.CustomerService.AddCustomerWithNPINumberNative:input_type -> coresamples_service.AddCustomerWithNPINumberRequest
	17, // 60: coresamples_service.CustomerService.SignUpCustomerV2:input_type -> coresamples_service.CustomerSignUpRequest
	75, // 61: coresamples_service.CustomerService.FuzzySearchCustomers:input_type -> coresamples_service.FuzzySearchCustomersRequest
	22, // 62: coresamples_service.CustomerService.GetCustomerByNPINumber:input_type -> coresamples_service.NPINumber
	79, // 63: coresamples_service.CustomerService.ReinviteNPICheck:input_type -> coresamples_service.ReinviteNPICheckRequest
	81, // 64: coresamples_service.CustomerService.FuzzySearchCustomerClinicName:input_type -> coresamples_service.FuzzySearchRequest
	84, // 65: coresamples_service.CustomerService.FetchCustomerBetaProgramsForClinic:input_type -> coresamples_service.FetchCustomerBetaProgramsForClinicInput
	52, // 66: coresamples_service.CustomerService.CreateCustomer:output_type -> coresamples_service.Customer
	56, // 67: coresamples_service.CustomerService.ListCustomers:output_type -> coresamples_service.ListCustomersResponse
	54, // 68: coresamples_service.CustomerService.GetCustomer:output_type -> coresamples_service.FullCustomer
	57, // 69: coresamples_service.CustomerService.GetSalesCustomers:output_type -> coresamples_service.FullCustomerList
	64, // 70: coresamples_service.CustomerService.GetClinicSalesSamples:output_type -> coresamples_service.SampleDataByPracticeAndSalesResponse
	62, // 71: coresamples_service.CustomerService.GetCustomerSetting:output_type -> coresamples_service.GetCustomerSettingResponse
	91, // 72: coresamples_service.CustomerService.GetCustomerSales:output_type -> coresamples_service.ListSalesCustomerResponseV7
	43, // 73: coresamples_service.CustomerService.UpdateCustomerSetting:output_type -> coresamples_service.UpdateCustomerSettingResponse
	45, // 74: coresamples_service.CustomerService.UpdateCustomer:output_type -> coresamples_service.UpdateCustomerResponse
	40, // 75: coresamples_service.CustomerService.CreatePatientInternalNotes:output_type -> coresamples_service.CreatePatientInternalNotesResponse
	38, // 76: coresamples_service.CustomerService.ModifyPatientInternalNotes:output_type -> coresamples_service.ModifyPatientInternalNotesResponse
	36, // 77: coresamples_service.CustomerService.DeletePatientInternalNotes:output_type -> coresamples_service.DeletePatientInternalNotesResponse
	34, // 78: coresamples_service.CustomerService.IsNewCustomer:output_type -> coresamples_service.GetIsNewCustomerResponse
	52, // 79: coresamples_service.CustomerService.UpdateCustomerNPI:output_type -> coresamples_service.Customer
	43, // 80: coresamples_service.CustomerService.UpdateCustomerSettingFull:output_type -> coresamples_service.UpdateCustomerSettingResponse
	43, // 81: coresamples_service.CustomerService.EditCustomerSettingProperties:output_type -> coresamples_service.UpdateCustomerSettingResponse
	31, // 82: coresamples_service.CustomerService.EditCustomerProfileOnSettingPage:output_type -> coresamples_service.EditCustomerProfileOnSettingPageResponse
	31, // 83: coresamples_service.CustomerService.RemoveCustomerFromClinic:output_type -> coresamples_service.EditCustomerProfileOnSettingPageResponse
	31, // 84: coresamples_service.CustomerService.JoinCustomerToClinic:output_type -> coresamples_service.EditCustomerProfileOnSettingPageResponse
	26, // 85: coresamples_service.CustomerService.GetCustomerByIDs:output_type -> coresamples_service.GetCustomerByIDsResponse
	24, // 86: coresamples_service.CustomerService.CheckCustomerNPINumber:output_type -> coresamples_service.NPICheckResult
	20, // 87: coresamples_service.CustomerService.GetCustomer2FAContact:output_type -> coresamples_service.GetCustomer2FAContactResponse
	18, // 88: coresamples_service.CustomerService.SignUpCustomer:output_type -> coresamples_service.SignUpResponse
	16, // 89: coresamples_service.CustomerService.SearchClientsByName:output_type -> coresamples_service.SearchclientsInfoResponse
	12, // 90: coresamples_service.CustomerService.ListCustomerAllClinics:output_type -> coresamples_service.ListCustomerAllClinicsResponse
	10, // 91: coresamples_service.CustomerService.GetStatementData:output_type -> coresamples_service.getStatementResponse
	7,  // 92: coresamples_service.CustomerService.CheckClientAttributes:output_type -> coresamples_service.CheckClientAttributesResponse
	72, // 93: coresamples_service.CustomerService.NewEditCustomerProfileOnSettingPage:output_type -> coresamples_service.NewEditCustomerProfileOnSettingPageResponse
	5,  // 94: coresamples_service.CustomerService.AddCustomerWithNPINumber:output_type -> coresamples_service.AddCustomerWithNPINumberResponse
	74, // 95: coresamples_service.CustomerService.V2_EditCustomerProfileOnSettingPage:output_type -> coresamples_service.V2_EditCustomerProfileOnSettingPageResponse
	3,  // 96: coresamples_service.CustomerService.CheckCustomerOnboardingQuestionnaireStatus:output_type -> coresamples_service.CheckCustomerOnboardingQuestionnaireStatusResponse
	1,  // 97: coresamples_service.CustomerService.UpdateCustomerOnboardingQuestionnaireStatus:output_type -> coresamples_service.UpdateCustomerOnboardingQuestionnaireStatusResponse
	5,  // 98: coresamples_service.CustomerService.AddCustomerWithNPINumberNative:output_type -> coresamples_service.AddCustomerWithNPINumberResponse
	18, // 99: coresamples_service.CustomerService.SignUpCustomerV2:output_type -> coresamples_service.SignUpResponse
	16, // 100: coresamples_service.CustomerService.FuzzySearchCustomers:output_type -> coresamples_service.SearchclientsInfoResponse
	77, // 101: coresamples_service.CustomerService.GetCustomerByNPINumber:output_type -> coresamples_service.GetCustomerByNPINumberResponse
	80, // 102: coresamples_service.CustomerService.ReinviteNPICheck:output_type -> coresamples_service.ReinviteNPICheckResponse
	82, // 103: coresamples_service.CustomerService.FuzzySearchCustomerClinicName:output_type -> coresamples_service.FuzzySearchResponse
	85, // 104: coresamples_service.CustomerService.FetchCustomerBetaProgramsForClinic:output_type -> coresamples_service.FetchCustomerBetaProgramsForClinicResponse
	66, // [66:105] is the sub-list for method output_type
	27, // [27:66] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_proto_customer_proto_init() }
func file_proto_customer_proto_init() {
	if File_proto_customer_proto != nil {
		return
	}
	file_proto_sales_proto_init()
	file_proto_setting_proto_init()
	file_proto_address_proto_init()
	file_proto_contact_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_customer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerOnboardingQuestionnaireStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerOnboardingQuestionnaireStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCustomerOnboardingQuestionnaireStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCustomerOnboardingQuestionnaireStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCustomerWithNPINumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCustomerWithNPINumberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckClientAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckClientAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCustomerAllClinicsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatementData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCustomerAllClinicsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerBasicInfoWithClinic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchcliensNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientsObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchclientsInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerSignUpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignUpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomer2FAContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomer2FAContactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact2FAList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NPINumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCustomerNPINumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NPICheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerByIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerByIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCustomerFromClinicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinCustomerFromClinicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditCustomerProfileOnSettingPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditCustomerProfileOnSettingPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditCustomerSettingPropertiesequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerNPIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIsNewCustomerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePatientInternalNotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePatientInternalNotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyPatientInternalNotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyPatientInternalNotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePatientInternalNotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePatientInternalNotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerSettingFullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Customerinfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllCustomer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Customer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullCustomer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerClinic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCustomersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullCustomerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerIDList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerNameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerSalesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSampleDataByPracticeAndSalesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleDataByPracticeAndSalesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PracticeAndSale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PracticeAndSalea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PracticeAndSaleac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PracticeAndSaleCus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PracticeAndSaleSam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewEditCustomerProfileOnSettingPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewEditCustomerProfileOnSettingPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2_EditCustomerProfileOnSettingPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2_EditCustomerProfileOnSettingPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzySearchCustomersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerByNPINumberCustomerIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerByNPINumberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NPINumberV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReinviteNPICheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReinviteNPICheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzySearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzySearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerClinicData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchCustomerBetaProgramsForClinicInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchCustomerBetaProgramsForClinicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerBetaProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_customer_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_proto_customer_proto_msgTypes[78].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_customer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   87,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_customer_proto_goTypes,
		DependencyIndexes: file_proto_customer_proto_depIdxs,
		MessageInfos:      file_proto_customer_proto_msgTypes,
	}.Build()
	File_proto_customer_proto = out.File
	file_proto_customer_proto_rawDesc = nil
	file_proto_customer_proto_goTypes = nil
	file_proto_customer_proto_depIdxs = nil
}
