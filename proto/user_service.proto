syntax = "proto3";
package coresamples_service;

option go_package = "./proto;coresamples_service";

service UserService{
    rpc LogIn (LogInRequest) returns (LogInResponse){}
    rpc GetUserInfoByRole(GetUserInfoByRoleRequest) returns (GetUserInfoByRoleResponse){}
    rpc UpdatePasswordByOldPassword(UpdatePasswordByOldPasswordRequest) returns(UpdateUserPasswordResponse){}
    rpc TransferLISTokenToPortal(TransferLISTokenToPortalRequest) returns(TransferLISTokenToPortalResponse){}

    // 2FA
    rpc Send2FATokenRequest (Send2FATokenRequestMessage) returns (Send2FATokenResponse) {}

    // ForgetPassword
    rpc ForgetPasswordRequest (ForgetPasswordRequestRequest) returns (ForgetPasswordRequestResponse) {}
    rpc ForgetPassword (ForgetPasswordRequestMessage) returns (ForgetPasswordVerifyResponse) {}
    rpc TransferCustomerClinic(TransferCustomerClinicRequest) returns (TransferCustomerClinicResponse);

    // Set Up Sign In Email

    rpc SetUpEmailRequest(SetUpLoginEmailRequestRequest) returns (SetUpLoginEmailRequestResponse);
    rpc VerifySetUpUserEmailLogIn(VerifySetUpUserEmailLogInRequest) returns (VerifySetUpUserEmailLogInResponse);
    rpc IsEmailUsedAsLoginId(EmailRequest) returns (IsEmailUsedAsLoginIdResponse);
    rpc InitialForgetPassword(InitialForgetPasswordRequest) returns (ForgetPasswordResponse);

    // Setting Page Enable 2FA
    rpc SendVerify2FASetUpContactInfo(SendVerify2FASetUpContactInfoRequest) returns (SendVerify2FASetUpContactInfoResponse);
    rpc Verify2FASetUpContactInfo(Verify2FASetUpContactRequest) returns (Verify2FASetUpContactResponse);
    rpc TurnOn2FASettingPage(TurnOn2FASettingPageRequest) returns (TurnOn2FASettingPageResponse);

    rpc Send2FAVerificationCode(Send2FAVerificationCodeRequest) returns (Send2FAVerificationCodeResponse);
    rpc Verify2FAVerificationCode(Verify2FAVerificationCodeRequest) returns (Verify2FAVerificationResponse);
    rpc TurnOff2FASettingPage(TurnOff2FASettingPageRequest) returns (TurnOff2FASettingPageResponse);

    rpc GetUserInformation(GetUserInformationRequest) returns (GetUserInformationResponse);
    rpc GetUser2FAContactInfo(GetUser2FAContactInfoRequest) returns (GetUser2FAContactInfoResponse);

    // Change Email
    rpc ChangeUserEmailLogInID(UserChangeEmailRequest) returns (UserChangeEmailResponse);
    rpc AdminUserLoginSearch(AdminLoginSearchRequest) returns (AdminLoginSearchResponse);
    rpc AdminLogin(AdminLoginRequest) returns (AdminLoginResponse);

    rpc RenewToken(RenewTokenRequest) returns (RenewTokenResponse);
    rpc LISLogin (LogInRequest) returns (LogInResponse){}
    // Version 0.7.5

    rpc CreateUserLogInForInvitedCustomer(CreateUserLogForInvitedCustomerRequest) returns (CreateUserLogForInvitedCustomerResponse);
    rpc CheckWhetherEmailIsUsedAsLoginId(CheckWhetherEmailIsUsedAsLoginIdRequest) returns (CheckWhetherEmailIsUsedAsLoginIdResponse);
    rpc CannySSO(CannySSORequest) returns (CannySSOResponse);
    rpc ForceChangeLoginEmailInternal(ForceChangeLoginEmailInternalRequest) returns (ForceChangeLoginEmailInternalResponse);
    rpc UpdateUserInvitationRecord (UpdateUserInvitationRecordRequest) returns (UpdateUserInvitationRecordResponse);

    rpc GetLoginHistory(GetLoginHistoryRequest) returns (GetLoginHistoryResponse);
}

message UpdateUserInvitationRecordRequest {
    int32 customer_id = 1;
    string invitation_link = 2;
}

message UpdateUserInvitationRecordResponse {
    int32 code = 1;
    string message = 2;
    string errorMessage = 3;
}


message ForceChangeLoginEmailInternalRequest{
    string token = 1;
    string user_id = 2;
    string email_login_id = 3;
}

message ForceChangeLoginEmailInternalResponse{
    int32 code = 1;
    string message = 2;
    string error_message = 3;
}

message CannySSORequest{
    string login_token  =  1;
}
message CannySSOResponse{
    int32 code = 1;
    string message = 2;
    string canny_token = 3;
}

message CheckWhetherEmailIsUsedAsLoginIdRequest{
    string email = 1;
    string clinic_id =2;
}

message CheckWhetherEmailIsUsedAsLoginIdResponse{
    bool existing_user = 1;
    string message = 2;
}

message CreateUserLogForInvitedCustomerRequest{
    string invitation_link = 1;
    string email_login_id = 2;
    string password = 3;
    string customer_fax_number = 4;
    string customer_website = 5;
    string referenal_source = 6;
    repeated string interest_tests = 7;
    string customer_phone = 8;
}

message CreateUserLogForInvitedCustomerResponse{
    int32 code = 1;
    string message = 2;
}
message RenewTokenRequest {
    string jwt_token = 1;
}

message RenewTokenResponse {
    int32 code = 1;
    string message = 2;
    string token = 3; // This will be empty/null when code is 400
    string expiration_time = 4;
}


// Request
message AdminLoginRequest {
    string jwt_token = 1;
    string role = 2;
    string customer_id = 3;
    string clinic_id = 4;
}

// Response
message AdminLoginResponse {
    int32 code = 1;
    string message = 2;
    string token = 3;
}


message GetUser2FAContactInfoResponse {
    repeated User2FAContact contacts = 1;
}

message User2FAContact {
    int32 contact_id = 1;
    string contact_description = 2;
    string contact_details = 3;
    string contact_type = 4;
    bool is_primary_contact = 5;
    bool is_2fa_contact = 6;
    int32 customer_id = 7;
    int32 patient_id = 8;
    int32 clinic_id = 9;
    int32 internal_user_id = 10;
    bool applyToAllGroupMember = 11;
    int32 contact_level = 12;
    string contact_level_name = 13;
    int32 group_contact_id = 14;
    bool hasGroupContact = 15;
    bool isGroupContact = 16;
    bool useAsDefaultCreateContact = 17;
    bool useGroupContact = 18;
}


message GetUser2FAContactInfoRequest {
    string token = 1;
}

message GetUserInformationRequest {
    string user_id = 1;  // The user_id to look up the user.
  }
  
  // Message for the getUserInformation response.
  message GetUserInformationResponse {
    int32 user_id = 1;   
    string username = 2;
    string email_user_id = 3;
    bool isTwoFactorAuthenticationEnabled = 4;
    string user_permission = 5;   // This is a string here, but you may want to use an enum or another message type if it's more complex in your actual data model.
    bool isActive = 6;
    bool imported_user_with_salt_password = 7;  // Assuming it's a boolean from your TypeScript function.
    GetUserInfoCustomer customer = 8;
  }

  message GetUserInfoCustomer{
    int32 customer_id = 1;
    string customer_first_name = 2;
    string customer_last_name = 3;
  }

// Message for the TurnOff2FASettingPage request.
message TurnOff2FASettingPageRequest {
    string username = 1;
    string token = 2;
  }
  
  // Message for the TurnOff2FASettingPage response.
  message TurnOff2FASettingPageResponse {
    int32 code = 1;
    string message = 2;
  }
  




message Verify2FAVerificationResponse {
    int32 code = 1;
    string message = 2;
}

message Verify2FAVerificationCodeRequest {
    string username = 1;
    string verification_code = 2;
    string email_address = 3; // Optional
    string phone_number = 4; // Optional
}

message Send2FAVerificationCodeResponse {
    int32 code = 1;
    string message = 2;
}


message Send2FAVerificationCodeRequest {
    string username = 1;
    string email_address = 2; // Optional
    string phone_number = 3; // Optional
}


message TurnOn2FASettingPageRequest {
    string username = 1;
    string email_2fa_address = 2;
    string phone_2fa_number = 3;
    string token = 4;
}

message TurnOn2FASettingPageResponse {
    int32 code = 1;
    string message = 2;
    string otpauthUrl = 3;  // If needed, This is Future Feature(QR Code)
}


message Verify2FASetUpContactRequest {
    string username = 1;
    string verification_code = 2;
    string email_address = 3; // Optional
    string phone_number = 4; // Optional
}

message Verify2FASetUpContactResponse {
    int32 code = 1;
    string message = 2;
}

message SendVerify2FASetUpContactInfoRequest {
    string username = 1;
    string email_address = 2; // Optional
    string phone_number = 3; // Optional
}

message SendVerify2FASetUpContactInfoResponse {
    int32 code = 1;
    string message = 2;
}




message InitialForgetPasswordRequest {
    string email_address = 1;
}

// Response message
message ForgetPasswordResponse {
    int32 code = 1;
    string message = 2;
    // You can expand this to include more data if needed.
}
// Request message
message EmailRequest {
    string email = 1;
}

// Response message
message IsEmailUsedAsLoginIdResponse {
    bool used_as_email_log_id = 1;
    string message = 2;
    int32 user_id = 3; // consider making this 'optional' if using proto2 syntax
}

message VerifySetUpUserEmailLogInRequest {
    string token = 1;
    string log_in_user_email = 2;
    string verification_code = 3;
}

// The response message
message VerifySetUpUserEmailLogInResponse {
    int32 code = 1;
    string message = 2;
}


// Message for the input to the setUpEmailRequest function
message SetUpLoginEmailRequestRequest {
    string token = 1;             // Field for the token
    string log_in_user_email = 2; // Field for the user's email
}

// Message for the output of the setUpEmailRequest function
message SetUpLoginEmailRequestResponse {
    int32 code = 1;      // Field for the status code
    string message = 2;  // Field for the corresponding message
}


message TransferCustomerClinicRequest {
    string token = 1;
    string clinic_id = 2;
}

// Response for transferring customer's clinic
message TransferCustomerClinicResponse {
    string token = 1;
    string status_code = 2;
}


message ForgetPasswordRequestRequest {
    string username = 1;
    string request_method = 2;
    string request_target = 3;
}

message ForgetPasswordRequestResponse {
    int32 code = 1;
    string message = 2;
}

message ForgetPasswordRequestMessage {
    string username = 1;
    string verification_code = 2;
    string new_password = 3;
}

message ForgetPasswordVerifyResponse {
    int32 code = 1;
    string message = 2;
}

message ForgetPasswordRequestCheckRequest {
    string username = 1;
    string request_target = 2;
}

message ForgetPasswordCheckRequestResponse {
    int32 code = 1;
    string message = 2;
}

message Send2FATokenRequestMessage {
    string username = 1;
    string request_method = 2;
    string request_target = 3;
}

message Send2FATokenResponse {
    int32 code = 1;
    string message = 2;
}

message TransferLISTokenToPortalRequest{
    string jwt_token = 1;
    string customer_id = 2;
    string clinic_id = 3;
    string role = 4;

}

message TransferLISTokenToPortalResponse{
    string status_code = 1;
    string token = 2;
}

message UpdatePasswordByOldPasswordRequest{
    string user_id = 1;
    string old_password = 2;
    string new_password = 3;
    string twofa_code = 4;
}

message UpdateUserPasswordResponse{
    int32 code = 1;
    string token = 2;
    string message = 3;
}

message GetUserInfoByRoleRequest{
    string user_id = 1;
    string user_role = 2;
}

message GetUserInfoByRoleResponse{
    int32 user_id = 1;
    string username = 2;
    string user_group = 3;
    string user_permission = 4;
    bool isActive = 5;
    UserCustomer customer = 6;
    UserClinic clinic = 7;
    UserInternal internal = 8;
    UserPatient patient = 9;
    string requested_by = 10;
}

message UserCustomer{
    int32 customer_id = 1;
    string customer_first_name = 2;
    string customer_last_name = 3;
    string customer_middle_name = 4;
}
message UserClinic{
    int32 clinic_id = 1;
    string clinic_name = 2;
}
message UserInternal{
    int32 internal_user_id = 1;
    string internal_user_role = 2;
    int32 internal_user_role_id = 3;
    string internal_user_firstname = 4;
    string internal_user_lastname = 5;
    string internal_user_middlename = 6;
}

message UserPatient{
    int32 patient_id = 1;
    string patient_first_name = 2;
    string patient_last_name = 3;
    string patient_middle_name = 4;
}

message LogInRequest{
    string username = 1;
    string password = 2;
    bool remember_me = 3;
    string two_factor_code = 4;
    string login_ip = 5;
    string login_device_id = 6;
}

message LogInResponse{
    string token = 1;
    string message = 2;
    string code = 3;
    string customer_id = 4;
    bool is_email_id_set_up = 5;
    repeated User2FAContact user_2fa_contact = 6;
    string expiration_time = 7;
    bool hasAdminPanelAccess = 8;
}

message UserChangeEmailRequest {
    string user_id = 1;
    string new_email_user_id = 2;
    string verification_code = 3;
  }
  
  // Response message for userChangeEmailLogInID
  message UserChangeEmailResponse {
    int32 code = 1;
    string message = 2;
  }

  message AdminLoginSearchResponse {
    repeated User users = 1;
    string errorMessage = 2;

    message User {
        int32 user_id = 1;
        string username = 2;
        string email_user_id = 3;
        bool isTwoFactorAuthenticationEnabled = 4;
        bool isInternalAdminUser = 5;
        string user_group = 6; // optional
        string user_permission = 7; // optional
        bool isActive = 8;
        int32 customer_id = 9;
        string customer_type = 10;
        string customer_first_name = 11;
        string customer_last_name = 12;
        string customer_middle_name = 13;
        string customer_type_id = 14;
        string customer_suffix = 15;
        int32 sales_id = 16;
        string customer_npi_number = 17;
        string customer_permission = 18;
        repeated Address customer_address = 19;

        message Address {
            int32 address_id = 1;
            string address_type = 2;
            string street_address = 3;
            string apt_po = 4; // optional
            string city = 5;
            string state = 6;
            string zipcode = 7;
            string country = 8;
            bool address_confirmed = 9;
            bool is_primary_address = 10;
            int32 customer_id = 11;
            int32 patient_id = 12; // optional
            int32 clinic_id = 13; // optional
            int32 internal_user_id = 14; // optional
            int32 address_level = 15;
            string address_level_name = 16;
            bool applyToAllGroupMember = 17;
            int32 group_address_id = 18; // optional
            bool hasGroupAddress = 19;
            bool isGroupAddress = 20;
            bool useAsDefaultCreateAddress = 21;
            bool useGroupAddress = 22;
        }

        int32 clinic_id = 20;
        string clinic_name = 21;
        string clinic_type = 22;
        int32 clinic_account_id = 23;
        string clinic_npi_number = 24; // optional
        string clinic_permission = 25; // optional
        string clinic_name_old_system = 26; // optional
        string customer_role = 27;
    }
}


  message AdminLoginSearchRequest {
    string jwt_token = 1;
    // int32 page = 2;
    // int32 perPage = 3;
    string username = 2; // These are optional fields in the function
    string sample_id = 3;
    string customer_id = 4;
    string customer_name = 5;
    string clinic_id = 6;
    string clinic_name = 7;
}

message CustomerOfficeAddress {
    int32 address_id = 1;
    string address_type = 2;
    string street_address = 3;
    string apt_po = 4;
    string city = 5;
    string state = 6;
    string zipcode = 7;
    string country = 8;
    bool address_confirmed = 9;
    bool is_primary_address = 10;
    int32 customer_id = 11;
    int32 patient_id = 12;
    int32 clinic_id = 13;
    int32 internal_user_id = 14;
    int32 address_level = 15;
    string address_level_name = 16;
    bool applyToAllGroupMember = 17;
    int32 group_address_id = 18;
    bool hasGroupAddress = 19;
    bool isGroupAddress = 20;
    bool useAsDefaultCreateAddress = 21;
    bool useGroupAddress = 22;
}

message AdminCustomer {
    int32 customer_id = 1;
    int32 user_id = 2;
    string customer_type = 3;
    string customer_first_name = 4;
    string customer_last_name = 5;
    string customer_middle_name = 6;
    string customer_type_id = 7;
    string customer_suffix = 8;
    string customer_samples_received = 9;
    string customer_request_submit_time = 10;
    string customer_payment_method = 11;
    bool isActive = 12;
    int32 sales_id = 13;
    string customer_npi_number = 14;
    string customer_permission = 15;
    string referral_source = 16;
    repeated CustomerOfficeAddress customer_address = 17;
}

message GetLoginHistoryRequest {
  string customer_id = 1;
  string user_id = 2;
  string start_time = 3; // Format: "yyyy-MM-dd HH:mm:ss"
  string end_time = 4; // Format: "yyyy-MM-dd HH:mm:ss"
  int32 perPage = 5; // Default: 100
  int32 page = 6; // Default: 1
}

message GetLoginHistoryResponse {
  repeated LoginHistory login_history = 1;
  int32 total_count = 2;
}

message LoginHistory {
  int32 id = 1;
  string username = 2;
  string login_time = 3;
  string login_ip = 4;
  bool login_successfully = 5;
  string failure_reason = 6; 
  string login_portal = 7; 
}