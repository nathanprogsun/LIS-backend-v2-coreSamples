// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/serviceship_service.proto

package coresamples_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ServiceshipService service

func NewServiceshipServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ServiceshipService service

type ServiceshipService interface {
	SubscriptionAllowed(ctx context.Context, in *ClinicName, opts ...client.CallOption) (*CheckPermissionResponse, error)
	// rpc CreateMembership(CreateMembershipRequest) returns (coresamples_service.SimpleResponse) {}
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*SimpleResponse, error)
	GetAccountSubscriptions(ctx context.Context, in *GetAccountSubscriptionsRequest, opts ...client.CallOption) (*AccountSubscriptionsInfo, error)
	GetChargingSubscription(ctx context.Context, in *GetChargingSubscriptionRequest, opts ...client.CallOption) (*ChargingSubscriptionInfo, error)
	AddBillingPlan(ctx context.Context, in *AddBillingPlanRequest, opts ...client.CallOption) (*SimpleResponse, error)
	CreateBillingPlanSet(ctx context.Context, in *CreateBillingPlanSetRequest, opts ...client.CallOption) (*SimpleResponse, error)
	GetLatestBillingPlanSet(ctx context.Context, in *ServiceshipID, opts ...client.CallOption) (*MembershipBillingPlansInfo, error)
	GetBillingPlanByID(ctx context.Context, in *BillingPlanID, opts ...client.CallOption) (*MembershipBillingPlanInfo, error)
	GetBillingPlanBySubscriptionID(ctx context.Context, in *SubscriptionID, opts ...client.CallOption) (*MembershipBillingPlanInfo, error)
	GetPaymentMethods(ctx context.Context, in *AccountID, opts ...client.CallOption) (*PaymentMethodsInfo, error)
	CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...client.CallOption) (*CreatePaymentMethodResponse, error)
	UpdateSubscriptionPaymentMethod(ctx context.Context, in *UpdateSubscriptionPaymentMethodRequest, opts ...client.CallOption) (*SimpleResponse, error)
	DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, opts ...client.CallOption) (*SimpleResponse, error)
	PauseAutoRenew(ctx context.Context, in *PauseAutoRenewRequest, opts ...client.CallOption) (*SimpleResponse, error)
	ResumeAutoRenew(ctx context.Context, in *ResumeAutoRenewRequest, opts ...client.CallOption) (*SimpleResponse, error)
	UpdateSubscriptionBillingPlan(ctx context.Context, in *UpdateSubscriptionBillingPlanRequest, opts ...client.CallOption) (*SimpleResponse, error)
	UpdateSubscriptionEmail(ctx context.Context, in *UpdateSubscriptionEmailRequest, opts ...client.CallOption) (*SimpleResponse, error)
	UpdateAllSubscriptionEmail(ctx context.Context, in *UpdateAllSubscriptionEmailRequest, opts ...client.CallOption) (*SimpleResponse, error)
	GetSubscriptionTransactionInfos(ctx context.Context, in *GetSubscriptionTransactionInfosRequest, opts ...client.CallOption) (*GetSubscriptionTransactionInfosResponse, error)
}

type serviceshipService struct {
	c    client.Client
	name string
}

func NewServiceshipService(name string, c client.Client) ServiceshipService {
	return &serviceshipService{
		c:    c,
		name: name,
	}
}

func (c *serviceshipService) SubscriptionAllowed(ctx context.Context, in *ClinicName, opts ...client.CallOption) (*CheckPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.SubscriptionAllowed", in)
	out := new(CheckPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.Subscribe", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) GetAccountSubscriptions(ctx context.Context, in *GetAccountSubscriptionsRequest, opts ...client.CallOption) (*AccountSubscriptionsInfo, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.GetAccountSubscriptions", in)
	out := new(AccountSubscriptionsInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) GetChargingSubscription(ctx context.Context, in *GetChargingSubscriptionRequest, opts ...client.CallOption) (*ChargingSubscriptionInfo, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.GetChargingSubscription", in)
	out := new(ChargingSubscriptionInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) AddBillingPlan(ctx context.Context, in *AddBillingPlanRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.AddBillingPlan", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) CreateBillingPlanSet(ctx context.Context, in *CreateBillingPlanSetRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.CreateBillingPlanSet", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) GetLatestBillingPlanSet(ctx context.Context, in *ServiceshipID, opts ...client.CallOption) (*MembershipBillingPlansInfo, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.GetLatestBillingPlanSet", in)
	out := new(MembershipBillingPlansInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) GetBillingPlanByID(ctx context.Context, in *BillingPlanID, opts ...client.CallOption) (*MembershipBillingPlanInfo, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.GetBillingPlanByID", in)
	out := new(MembershipBillingPlanInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) GetBillingPlanBySubscriptionID(ctx context.Context, in *SubscriptionID, opts ...client.CallOption) (*MembershipBillingPlanInfo, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.GetBillingPlanBySubscriptionID", in)
	out := new(MembershipBillingPlanInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) GetPaymentMethods(ctx context.Context, in *AccountID, opts ...client.CallOption) (*PaymentMethodsInfo, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.GetPaymentMethods", in)
	out := new(PaymentMethodsInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...client.CallOption) (*CreatePaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.CreatePaymentMethod", in)
	out := new(CreatePaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) UpdateSubscriptionPaymentMethod(ctx context.Context, in *UpdateSubscriptionPaymentMethodRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.UpdateSubscriptionPaymentMethod", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.DeletePaymentMethod", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) PauseAutoRenew(ctx context.Context, in *PauseAutoRenewRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.PauseAutoRenew", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) ResumeAutoRenew(ctx context.Context, in *ResumeAutoRenewRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.ResumeAutoRenew", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) UpdateSubscriptionBillingPlan(ctx context.Context, in *UpdateSubscriptionBillingPlanRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.UpdateSubscriptionBillingPlan", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) UpdateSubscriptionEmail(ctx context.Context, in *UpdateSubscriptionEmailRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.UpdateSubscriptionEmail", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) UpdateAllSubscriptionEmail(ctx context.Context, in *UpdateAllSubscriptionEmailRequest, opts ...client.CallOption) (*SimpleResponse, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.UpdateAllSubscriptionEmail", in)
	out := new(SimpleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipService) GetSubscriptionTransactionInfos(ctx context.Context, in *GetSubscriptionTransactionInfosRequest, opts ...client.CallOption) (*GetSubscriptionTransactionInfosResponse, error) {
	req := c.c.NewRequest(c.name, "ServiceshipService.GetSubscriptionTransactionInfos", in)
	out := new(GetSubscriptionTransactionInfosResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceshipService service

type ServiceshipServiceHandler interface {
	SubscriptionAllowed(context.Context, *ClinicName, *CheckPermissionResponse) error
	// rpc CreateMembership(CreateMembershipRequest) returns (coresamples_service.SimpleResponse) {}
	Subscribe(context.Context, *SubscribeRequest, *SimpleResponse) error
	GetAccountSubscriptions(context.Context, *GetAccountSubscriptionsRequest, *AccountSubscriptionsInfo) error
	GetChargingSubscription(context.Context, *GetChargingSubscriptionRequest, *ChargingSubscriptionInfo) error
	AddBillingPlan(context.Context, *AddBillingPlanRequest, *SimpleResponse) error
	CreateBillingPlanSet(context.Context, *CreateBillingPlanSetRequest, *SimpleResponse) error
	GetLatestBillingPlanSet(context.Context, *ServiceshipID, *MembershipBillingPlansInfo) error
	GetBillingPlanByID(context.Context, *BillingPlanID, *MembershipBillingPlanInfo) error
	GetBillingPlanBySubscriptionID(context.Context, *SubscriptionID, *MembershipBillingPlanInfo) error
	GetPaymentMethods(context.Context, *AccountID, *PaymentMethodsInfo) error
	CreatePaymentMethod(context.Context, *CreatePaymentMethodRequest, *CreatePaymentMethodResponse) error
	UpdateSubscriptionPaymentMethod(context.Context, *UpdateSubscriptionPaymentMethodRequest, *SimpleResponse) error
	DeletePaymentMethod(context.Context, *DeletePaymentMethodRequest, *SimpleResponse) error
	PauseAutoRenew(context.Context, *PauseAutoRenewRequest, *SimpleResponse) error
	ResumeAutoRenew(context.Context, *ResumeAutoRenewRequest, *SimpleResponse) error
	UpdateSubscriptionBillingPlan(context.Context, *UpdateSubscriptionBillingPlanRequest, *SimpleResponse) error
	UpdateSubscriptionEmail(context.Context, *UpdateSubscriptionEmailRequest, *SimpleResponse) error
	UpdateAllSubscriptionEmail(context.Context, *UpdateAllSubscriptionEmailRequest, *SimpleResponse) error
	GetSubscriptionTransactionInfos(context.Context, *GetSubscriptionTransactionInfosRequest, *GetSubscriptionTransactionInfosResponse) error
}

func RegisterServiceshipServiceHandler(s server.Server, hdlr ServiceshipServiceHandler, opts ...server.HandlerOption) error {
	type serviceshipService interface {
		SubscriptionAllowed(ctx context.Context, in *ClinicName, out *CheckPermissionResponse) error
		Subscribe(ctx context.Context, in *SubscribeRequest, out *SimpleResponse) error
		GetAccountSubscriptions(ctx context.Context, in *GetAccountSubscriptionsRequest, out *AccountSubscriptionsInfo) error
		GetChargingSubscription(ctx context.Context, in *GetChargingSubscriptionRequest, out *ChargingSubscriptionInfo) error
		AddBillingPlan(ctx context.Context, in *AddBillingPlanRequest, out *SimpleResponse) error
		CreateBillingPlanSet(ctx context.Context, in *CreateBillingPlanSetRequest, out *SimpleResponse) error
		GetLatestBillingPlanSet(ctx context.Context, in *ServiceshipID, out *MembershipBillingPlansInfo) error
		GetBillingPlanByID(ctx context.Context, in *BillingPlanID, out *MembershipBillingPlanInfo) error
		GetBillingPlanBySubscriptionID(ctx context.Context, in *SubscriptionID, out *MembershipBillingPlanInfo) error
		GetPaymentMethods(ctx context.Context, in *AccountID, out *PaymentMethodsInfo) error
		CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, out *CreatePaymentMethodResponse) error
		UpdateSubscriptionPaymentMethod(ctx context.Context, in *UpdateSubscriptionPaymentMethodRequest, out *SimpleResponse) error
		DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, out *SimpleResponse) error
		PauseAutoRenew(ctx context.Context, in *PauseAutoRenewRequest, out *SimpleResponse) error
		ResumeAutoRenew(ctx context.Context, in *ResumeAutoRenewRequest, out *SimpleResponse) error
		UpdateSubscriptionBillingPlan(ctx context.Context, in *UpdateSubscriptionBillingPlanRequest, out *SimpleResponse) error
		UpdateSubscriptionEmail(ctx context.Context, in *UpdateSubscriptionEmailRequest, out *SimpleResponse) error
		UpdateAllSubscriptionEmail(ctx context.Context, in *UpdateAllSubscriptionEmailRequest, out *SimpleResponse) error
		GetSubscriptionTransactionInfos(ctx context.Context, in *GetSubscriptionTransactionInfosRequest, out *GetSubscriptionTransactionInfosResponse) error
	}
	type ServiceshipService struct {
		serviceshipService
	}
	h := &serviceshipServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ServiceshipService{h}, opts...))
}

type serviceshipServiceHandler struct {
	ServiceshipServiceHandler
}

func (h *serviceshipServiceHandler) SubscriptionAllowed(ctx context.Context, in *ClinicName, out *CheckPermissionResponse) error {
	return h.ServiceshipServiceHandler.SubscriptionAllowed(ctx, in, out)
}

func (h *serviceshipServiceHandler) Subscribe(ctx context.Context, in *SubscribeRequest, out *SimpleResponse) error {
	return h.ServiceshipServiceHandler.Subscribe(ctx, in, out)
}

func (h *serviceshipServiceHandler) GetAccountSubscriptions(ctx context.Context, in *GetAccountSubscriptionsRequest, out *AccountSubscriptionsInfo) error {
	return h.ServiceshipServiceHandler.GetAccountSubscriptions(ctx, in, out)
}

func (h *serviceshipServiceHandler) GetChargingSubscription(ctx context.Context, in *GetChargingSubscriptionRequest, out *ChargingSubscriptionInfo) error {
	return h.ServiceshipServiceHandler.GetChargingSubscription(ctx, in, out)
}

func (h *serviceshipServiceHandler) AddBillingPlan(ctx context.Context, in *AddBillingPlanRequest, out *SimpleResponse) error {
	return h.ServiceshipServiceHandler.AddBillingPlan(ctx, in, out)
}

func (h *serviceshipServiceHandler) CreateBillingPlanSet(ctx context.Context, in *CreateBillingPlanSetRequest, out *SimpleResponse) error {
	return h.ServiceshipServiceHandler.CreateBillingPlanSet(ctx, in, out)
}

func (h *serviceshipServiceHandler) GetLatestBillingPlanSet(ctx context.Context, in *ServiceshipID, out *MembershipBillingPlansInfo) error {
	return h.ServiceshipServiceHandler.GetLatestBillingPlanSet(ctx, in, out)
}

func (h *serviceshipServiceHandler) GetBillingPlanByID(ctx context.Context, in *BillingPlanID, out *MembershipBillingPlanInfo) error {
	return h.ServiceshipServiceHandler.GetBillingPlanByID(ctx, in, out)
}

func (h *serviceshipServiceHandler) GetBillingPlanBySubscriptionID(ctx context.Context, in *SubscriptionID, out *MembershipBillingPlanInfo) error {
	return h.ServiceshipServiceHandler.GetBillingPlanBySubscriptionID(ctx, in, out)
}

func (h *serviceshipServiceHandler) GetPaymentMethods(ctx context.Context, in *AccountID, out *PaymentMethodsInfo) error {
	return h.ServiceshipServiceHandler.GetPaymentMethods(ctx, in, out)
}

func (h *serviceshipServiceHandler) CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, out *CreatePaymentMethodResponse) error {
	return h.ServiceshipServiceHandler.CreatePaymentMethod(ctx, in, out)
}

func (h *serviceshipServiceHandler) UpdateSubscriptionPaymentMethod(ctx context.Context, in *UpdateSubscriptionPaymentMethodRequest, out *SimpleResponse) error {
	return h.ServiceshipServiceHandler.UpdateSubscriptionPaymentMethod(ctx, in, out)
}

func (h *serviceshipServiceHandler) DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, out *SimpleResponse) error {
	return h.ServiceshipServiceHandler.DeletePaymentMethod(ctx, in, out)
}

func (h *serviceshipServiceHandler) PauseAutoRenew(ctx context.Context, in *PauseAutoRenewRequest, out *SimpleResponse) error {
	return h.ServiceshipServiceHandler.PauseAutoRenew(ctx, in, out)
}

func (h *serviceshipServiceHandler) ResumeAutoRenew(ctx context.Context, in *ResumeAutoRenewRequest, out *SimpleResponse) error {
	return h.ServiceshipServiceHandler.ResumeAutoRenew(ctx, in, out)
}

func (h *serviceshipServiceHandler) UpdateSubscriptionBillingPlan(ctx context.Context, in *UpdateSubscriptionBillingPlanRequest, out *SimpleResponse) error {
	return h.ServiceshipServiceHandler.UpdateSubscriptionBillingPlan(ctx, in, out)
}

func (h *serviceshipServiceHandler) UpdateSubscriptionEmail(ctx context.Context, in *UpdateSubscriptionEmailRequest, out *SimpleResponse) error {
	return h.ServiceshipServiceHandler.UpdateSubscriptionEmail(ctx, in, out)
}

func (h *serviceshipServiceHandler) UpdateAllSubscriptionEmail(ctx context.Context, in *UpdateAllSubscriptionEmailRequest, out *SimpleResponse) error {
	return h.ServiceshipServiceHandler.UpdateAllSubscriptionEmail(ctx, in, out)
}

func (h *serviceshipServiceHandler) GetSubscriptionTransactionInfos(ctx context.Context, in *GetSubscriptionTransactionInfosRequest, out *GetSubscriptionTransactionInfosResponse) error {
	return h.ServiceshipServiceHandler.GetSubscriptionTransactionInfos(ctx, in, out)
}
