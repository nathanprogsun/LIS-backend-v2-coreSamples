// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: proto/panel.proto

package coresamples_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetAllPanels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanelId int32 `protobuf:"varint,1,opt,name=panel_id,json=panelId,proto3" json:"panel_id,omitempty"`
}

func (x *GetAllPanels) Reset() {
	*x = GetAllPanels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_panel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPanels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPanels) ProtoMessage() {}

func (x *GetAllPanels) ProtoReflect() protoreflect.Message {
	mi := &file_proto_panel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPanels.ProtoReflect.Descriptor instead.
func (*GetAllPanels) Descriptor() ([]byte, []int) {
	return file_proto_panel_proto_rawDescGZIP(), []int{0}
}

func (x *GetAllPanels) GetPanelId() int32 {
	if x != nil {
		return x.PanelId
	}
	return 0
}

type PanelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanelId   int32  `protobuf:"varint,1,opt,name=panel_id,json=panelId,proto3" json:"panel_id,omitempty"`
	PanelName string `protobuf:"bytes,2,opt,name=panel_name,json=panelName,proto3" json:"panel_name,omitempty"`
}

func (x *PanelInfo) Reset() {
	*x = PanelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_panel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PanelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PanelInfo) ProtoMessage() {}

func (x *PanelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_panel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PanelInfo.ProtoReflect.Descriptor instead.
func (*PanelInfo) Descriptor() ([]byte, []int) {
	return file_proto_panel_proto_rawDescGZIP(), []int{1}
}

func (x *PanelInfo) GetPanelId() int32 {
	if x != nil {
		return x.PanelId
	}
	return 0
}

func (x *PanelInfo) GetPanelName() string {
	if x != nil {
		return x.PanelName
	}
	return ""
}

type AllPanelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PanelInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AllPanelInfo) Reset() {
	*x = AllPanelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_panel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllPanelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllPanelInfo) ProtoMessage() {}

func (x *AllPanelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_panel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllPanelInfo.ProtoReflect.Descriptor instead.
func (*AllPanelInfo) Descriptor() ([]byte, []int) {
	return file_proto_panel_proto_rawDescGZIP(), []int{2}
}

func (x *AllPanelInfo) GetData() []*PanelInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreatePanelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanelName         string `protobuf:"bytes,1,opt,name=panel_name,json=panelName,proto3" json:"panel_name,omitempty"`
	PanelDisplayName  string `protobuf:"bytes,2,opt,name=panel_display_name,json=panelDisplayName,proto3" json:"panel_display_name,omitempty"`
	PanelCode         string `protobuf:"bytes,3,opt,name=panel_code,json=panelCode,proto3" json:"panel_code,omitempty"`
	Category          string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Description       string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	OrderableTestName string `protobuf:"bytes,6,opt,name=orderable_test_name,json=orderableTestName,proto3" json:"orderable_test_name,omitempty"`
	IsActive          bool   `protobuf:"varint,7,opt,name=isActive,proto3" json:"isActive,omitempty"`
}

func (x *CreatePanelRequest) Reset() {
	*x = CreatePanelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_panel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePanelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePanelRequest) ProtoMessage() {}

func (x *CreatePanelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_panel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePanelRequest.ProtoReflect.Descriptor instead.
func (*CreatePanelRequest) Descriptor() ([]byte, []int) {
	return file_proto_panel_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePanelRequest) GetPanelName() string {
	if x != nil {
		return x.PanelName
	}
	return ""
}

func (x *CreatePanelRequest) GetPanelDisplayName() string {
	if x != nil {
		return x.PanelDisplayName
	}
	return ""
}

func (x *CreatePanelRequest) GetPanelCode() string {
	if x != nil {
		return x.PanelCode
	}
	return ""
}

func (x *CreatePanelRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *CreatePanelRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePanelRequest) GetOrderableTestName() string {
	if x != nil {
		return x.OrderableTestName
	}
	return ""
}

func (x *CreatePanelRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type Panel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanelId           int32  `protobuf:"varint,1,opt,name=panel_id,json=panelId,proto3" json:"panel_id,omitempty"`
	PanelName         string `protobuf:"bytes,2,opt,name=panel_name,json=panelName,proto3" json:"panel_name,omitempty"`
	PanelDisplayName  string `protobuf:"bytes,3,opt,name=panel_display_name,json=panelDisplayName,proto3" json:"panel_display_name,omitempty"`
	PanelCode         string `protobuf:"bytes,4,opt,name=panel_code,json=panelCode,proto3" json:"panel_code,omitempty"`
	Category          string `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	Description       string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	OrderableTestName string `protobuf:"bytes,7,opt,name=orderable_test_name,json=orderableTestName,proto3" json:"orderable_test_name,omitempty"`
	IsActive          bool   `protobuf:"varint,8,opt,name=isActive,proto3" json:"isActive,omitempty"`
	CreatedTime       string `protobuf:"bytes,9,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdatedTime       string `protobuf:"bytes,10,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
}

func (x *Panel) Reset() {
	*x = Panel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_panel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Panel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Panel) ProtoMessage() {}

func (x *Panel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_panel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Panel.ProtoReflect.Descriptor instead.
func (*Panel) Descriptor() ([]byte, []int) {
	return file_proto_panel_proto_rawDescGZIP(), []int{4}
}

func (x *Panel) GetPanelId() int32 {
	if x != nil {
		return x.PanelId
	}
	return 0
}

func (x *Panel) GetPanelName() string {
	if x != nil {
		return x.PanelName
	}
	return ""
}

func (x *Panel) GetPanelDisplayName() string {
	if x != nil {
		return x.PanelDisplayName
	}
	return ""
}

func (x *Panel) GetPanelCode() string {
	if x != nil {
		return x.PanelCode
	}
	return ""
}

func (x *Panel) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Panel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Panel) GetOrderableTestName() string {
	if x != nil {
		return x.OrderableTestName
	}
	return ""
}

func (x *Panel) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Panel) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *Panel) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

var File_proto_panel_proto protoreflect.FileDescriptor

var file_proto_panel_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x09, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x0c, 0x61,
	0x6c, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x8a, 0x02, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xde, 0x02, 0x0a,
	0x05, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x64, 0x0a,
	0x0c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x27, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x22, 0x00, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_panel_proto_rawDescOnce sync.Once
	file_proto_panel_proto_rawDescData = file_proto_panel_proto_rawDesc
)

func file_proto_panel_proto_rawDescGZIP() []byte {
	file_proto_panel_proto_rawDescOnce.Do(func() {
		file_proto_panel_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_panel_proto_rawDescData)
	})
	return file_proto_panel_proto_rawDescData
}

var file_proto_panel_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_panel_proto_goTypes = []interface{}{
	(*GetAllPanels)(nil),       // 0: coresamples_service.GetAllPanels
	(*PanelInfo)(nil),          // 1: coresamples_service.PanelInfo
	(*AllPanelInfo)(nil),       // 2: coresamples_service.allPanelInfo
	(*CreatePanelRequest)(nil), // 3: coresamples_service.CreatePanelRequest
	(*Panel)(nil),              // 4: coresamples_service.Panel
}
var file_proto_panel_proto_depIdxs = []int32{
	1, // 0: coresamples_service.allPanelInfo.data:type_name -> coresamples_service.PanelInfo
	3, // 1: coresamples_service.PanelService.CreatePanel:input_type -> coresamples_service.CreatePanelRequest
	4, // 2: coresamples_service.PanelService.CreatePanel:output_type -> coresamples_service.Panel
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_panel_proto_init() }
func file_proto_panel_proto_init() {
	if File_proto_panel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_panel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPanels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_panel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PanelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_panel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllPanelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_panel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePanelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_panel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Panel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_panel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_panel_proto_goTypes,
		DependencyIndexes: file_proto_panel_proto_depIdxs,
		MessageInfos:      file_proto_panel_proto_msgTypes,
	}.Build()
	File_proto_panel_proto = out.File
	file_proto_panel_proto_rawDesc = nil
	file_proto_panel_proto_goTypes = nil
	file_proto_panel_proto_depIdxs = nil
}
