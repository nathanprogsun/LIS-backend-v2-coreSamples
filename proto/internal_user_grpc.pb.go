// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/internal_user.proto

package coresamples_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InternalUserService_CreateInternalUser_FullMethodName         = "/coresamples_service.InternalUserService/CreateInternalUser"
	InternalUserService_GetSalesClinics_FullMethodName            = "/coresamples_service.InternalUserService/GetSalesClinics"
	InternalUserService_GetInternalUser_FullMethodName            = "/coresamples_service.InternalUserService/GetInternalUser"
	InternalUserService_TransferSalesCustomer_FullMethodName      = "/coresamples_service.InternalUserService/TransferSalesCustomer"
	InternalUserService_GetLowerLevelInternalUsers_FullMethodName = "/coresamples_service.InternalUserService/GetLowerLevelInternalUsers"
	InternalUserService_SetLowerLevelInternalUsers_FullMethodName = "/coresamples_service.InternalUserService/SetLowerLevelInternalUsers"
	InternalUserService_CreateSampleNavigatorNote_FullMethodName  = "/coresamples_service.InternalUserService/CreateSampleNavigatorNote"
	InternalUserService_ModifySampleNavigatorNote_FullMethodName  = "/coresamples_service.InternalUserService/ModifySampleNavigatorNote"
	InternalUserService_DeleteSampleNavigatorNote_FullMethodName  = "/coresamples_service.InternalUserService/DeleteSampleNavigatorNote"
	InternalUserService_GetInternalUserByid_FullMethodName        = "/coresamples_service.InternalUserService/GetInternalUserByid"
	InternalUserService_CheckCustomerNavigator_FullMethodName     = "/coresamples_service.InternalUserService/CheckCustomerNavigator"
)

// InternalUserServiceClient is the client API for InternalUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalUserServiceClient interface {
	CreateInternalUser(ctx context.Context, in *CreateInternalUserRequest, opts ...grpc.CallOption) (*InternalUser, error)
	GetSalesClinics(ctx context.Context, in *ListSalesNameRequest, opts ...grpc.CallOption) (*ListCustomerPracticeResponse, error)
	GetInternalUser(ctx context.Context, in *GetInternalUserRequest, opts ...grpc.CallOption) (*GetInternalUserResponse, error)
	TransferSalesCustomer(ctx context.Context, in *TransferSalesCustomerRequest, opts ...grpc.CallOption) (*TransferSalesCustomerResponse, error)
	GetLowerLevelInternalUsers(ctx context.Context, in *GetLowerLevelInternalUsersRequest, opts ...grpc.CallOption) (*GetLowerLevelInternalUsersResponse, error)
	SetLowerLevelInternalUsers(ctx context.Context, in *SetLowerLevelInternalUsersRequest, opts ...grpc.CallOption) (*SetLowerLevelInternalUsersResponse, error)
	CreateSampleNavigatorNote(ctx context.Context, in *CreateSampleNavigatorNoteRequest, opts ...grpc.CallOption) (*CreateSampleNavigatorNoteResponse, error)
	ModifySampleNavigatorNote(ctx context.Context, in *ModifySampleNavigatorNoteRequest, opts ...grpc.CallOption) (*ModifySampleNavigatorNoteResponse, error)
	DeleteSampleNavigatorNote(ctx context.Context, in *DeleteSampleNavigatorNoteRequest, opts ...grpc.CallOption) (*DeleteSampleNavigatorNoteResponse, error)
	GetInternalUserByid(ctx context.Context, in *GetInternalUserByidRequest, opts ...grpc.CallOption) (*GetInternalUserByidResponse, error)
	CheckCustomerNavigator(ctx context.Context, in *CheckNavigatorCustomerRequest, opts ...grpc.CallOption) (*CheckNavigatorCustomerResponse, error)
}

type internalUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalUserServiceClient(cc grpc.ClientConnInterface) InternalUserServiceClient {
	return &internalUserServiceClient{cc}
}

func (c *internalUserServiceClient) CreateInternalUser(ctx context.Context, in *CreateInternalUserRequest, opts ...grpc.CallOption) (*InternalUser, error) {
	out := new(InternalUser)
	err := c.cc.Invoke(ctx, InternalUserService_CreateInternalUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserServiceClient) GetSalesClinics(ctx context.Context, in *ListSalesNameRequest, opts ...grpc.CallOption) (*ListCustomerPracticeResponse, error) {
	out := new(ListCustomerPracticeResponse)
	err := c.cc.Invoke(ctx, InternalUserService_GetSalesClinics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserServiceClient) GetInternalUser(ctx context.Context, in *GetInternalUserRequest, opts ...grpc.CallOption) (*GetInternalUserResponse, error) {
	out := new(GetInternalUserResponse)
	err := c.cc.Invoke(ctx, InternalUserService_GetInternalUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserServiceClient) TransferSalesCustomer(ctx context.Context, in *TransferSalesCustomerRequest, opts ...grpc.CallOption) (*TransferSalesCustomerResponse, error) {
	out := new(TransferSalesCustomerResponse)
	err := c.cc.Invoke(ctx, InternalUserService_TransferSalesCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserServiceClient) GetLowerLevelInternalUsers(ctx context.Context, in *GetLowerLevelInternalUsersRequest, opts ...grpc.CallOption) (*GetLowerLevelInternalUsersResponse, error) {
	out := new(GetLowerLevelInternalUsersResponse)
	err := c.cc.Invoke(ctx, InternalUserService_GetLowerLevelInternalUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserServiceClient) SetLowerLevelInternalUsers(ctx context.Context, in *SetLowerLevelInternalUsersRequest, opts ...grpc.CallOption) (*SetLowerLevelInternalUsersResponse, error) {
	out := new(SetLowerLevelInternalUsersResponse)
	err := c.cc.Invoke(ctx, InternalUserService_SetLowerLevelInternalUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserServiceClient) CreateSampleNavigatorNote(ctx context.Context, in *CreateSampleNavigatorNoteRequest, opts ...grpc.CallOption) (*CreateSampleNavigatorNoteResponse, error) {
	out := new(CreateSampleNavigatorNoteResponse)
	err := c.cc.Invoke(ctx, InternalUserService_CreateSampleNavigatorNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserServiceClient) ModifySampleNavigatorNote(ctx context.Context, in *ModifySampleNavigatorNoteRequest, opts ...grpc.CallOption) (*ModifySampleNavigatorNoteResponse, error) {
	out := new(ModifySampleNavigatorNoteResponse)
	err := c.cc.Invoke(ctx, InternalUserService_ModifySampleNavigatorNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserServiceClient) DeleteSampleNavigatorNote(ctx context.Context, in *DeleteSampleNavigatorNoteRequest, opts ...grpc.CallOption) (*DeleteSampleNavigatorNoteResponse, error) {
	out := new(DeleteSampleNavigatorNoteResponse)
	err := c.cc.Invoke(ctx, InternalUserService_DeleteSampleNavigatorNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserServiceClient) GetInternalUserByid(ctx context.Context, in *GetInternalUserByidRequest, opts ...grpc.CallOption) (*GetInternalUserByidResponse, error) {
	out := new(GetInternalUserByidResponse)
	err := c.cc.Invoke(ctx, InternalUserService_GetInternalUserByid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserServiceClient) CheckCustomerNavigator(ctx context.Context, in *CheckNavigatorCustomerRequest, opts ...grpc.CallOption) (*CheckNavigatorCustomerResponse, error) {
	out := new(CheckNavigatorCustomerResponse)
	err := c.cc.Invoke(ctx, InternalUserService_CheckCustomerNavigator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalUserServiceServer is the server API for InternalUserService service.
// All implementations must embed UnimplementedInternalUserServiceServer
// for forward compatibility
type InternalUserServiceServer interface {
	CreateInternalUser(context.Context, *CreateInternalUserRequest) (*InternalUser, error)
	GetSalesClinics(context.Context, *ListSalesNameRequest) (*ListCustomerPracticeResponse, error)
	GetInternalUser(context.Context, *GetInternalUserRequest) (*GetInternalUserResponse, error)
	TransferSalesCustomer(context.Context, *TransferSalesCustomerRequest) (*TransferSalesCustomerResponse, error)
	GetLowerLevelInternalUsers(context.Context, *GetLowerLevelInternalUsersRequest) (*GetLowerLevelInternalUsersResponse, error)
	SetLowerLevelInternalUsers(context.Context, *SetLowerLevelInternalUsersRequest) (*SetLowerLevelInternalUsersResponse, error)
	CreateSampleNavigatorNote(context.Context, *CreateSampleNavigatorNoteRequest) (*CreateSampleNavigatorNoteResponse, error)
	ModifySampleNavigatorNote(context.Context, *ModifySampleNavigatorNoteRequest) (*ModifySampleNavigatorNoteResponse, error)
	DeleteSampleNavigatorNote(context.Context, *DeleteSampleNavigatorNoteRequest) (*DeleteSampleNavigatorNoteResponse, error)
	GetInternalUserByid(context.Context, *GetInternalUserByidRequest) (*GetInternalUserByidResponse, error)
	CheckCustomerNavigator(context.Context, *CheckNavigatorCustomerRequest) (*CheckNavigatorCustomerResponse, error)
	mustEmbedUnimplementedInternalUserServiceServer()
}

// UnimplementedInternalUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInternalUserServiceServer struct {
}

func (UnimplementedInternalUserServiceServer) CreateInternalUser(context.Context, *CreateInternalUserRequest) (*InternalUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInternalUser not implemented")
}
func (UnimplementedInternalUserServiceServer) GetSalesClinics(context.Context, *ListSalesNameRequest) (*ListCustomerPracticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesClinics not implemented")
}
func (UnimplementedInternalUserServiceServer) GetInternalUser(context.Context, *GetInternalUserRequest) (*GetInternalUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInternalUser not implemented")
}
func (UnimplementedInternalUserServiceServer) TransferSalesCustomer(context.Context, *TransferSalesCustomerRequest) (*TransferSalesCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferSalesCustomer not implemented")
}
func (UnimplementedInternalUserServiceServer) GetLowerLevelInternalUsers(context.Context, *GetLowerLevelInternalUsersRequest) (*GetLowerLevelInternalUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLowerLevelInternalUsers not implemented")
}
func (UnimplementedInternalUserServiceServer) SetLowerLevelInternalUsers(context.Context, *SetLowerLevelInternalUsersRequest) (*SetLowerLevelInternalUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLowerLevelInternalUsers not implemented")
}
func (UnimplementedInternalUserServiceServer) CreateSampleNavigatorNote(context.Context, *CreateSampleNavigatorNoteRequest) (*CreateSampleNavigatorNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSampleNavigatorNote not implemented")
}
func (UnimplementedInternalUserServiceServer) ModifySampleNavigatorNote(context.Context, *ModifySampleNavigatorNoteRequest) (*ModifySampleNavigatorNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySampleNavigatorNote not implemented")
}
func (UnimplementedInternalUserServiceServer) DeleteSampleNavigatorNote(context.Context, *DeleteSampleNavigatorNoteRequest) (*DeleteSampleNavigatorNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSampleNavigatorNote not implemented")
}
func (UnimplementedInternalUserServiceServer) GetInternalUserByid(context.Context, *GetInternalUserByidRequest) (*GetInternalUserByidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInternalUserByid not implemented")
}
func (UnimplementedInternalUserServiceServer) CheckCustomerNavigator(context.Context, *CheckNavigatorCustomerRequest) (*CheckNavigatorCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCustomerNavigator not implemented")
}
func (UnimplementedInternalUserServiceServer) mustEmbedUnimplementedInternalUserServiceServer() {}

// UnsafeInternalUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalUserServiceServer will
// result in compilation errors.
type UnsafeInternalUserServiceServer interface {
	mustEmbedUnimplementedInternalUserServiceServer()
}

func RegisterInternalUserServiceServer(s grpc.ServiceRegistrar, srv InternalUserServiceServer) {
	s.RegisterService(&InternalUserService_ServiceDesc, srv)
}

func _InternalUserService_CreateInternalUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInternalUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalUserServiceServer).CreateInternalUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalUserService_CreateInternalUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalUserServiceServer).CreateInternalUser(ctx, req.(*CreateInternalUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalUserService_GetSalesClinics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSalesNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalUserServiceServer).GetSalesClinics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalUserService_GetSalesClinics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalUserServiceServer).GetSalesClinics(ctx, req.(*ListSalesNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalUserService_GetInternalUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInternalUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalUserServiceServer).GetInternalUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalUserService_GetInternalUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalUserServiceServer).GetInternalUser(ctx, req.(*GetInternalUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalUserService_TransferSalesCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferSalesCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalUserServiceServer).TransferSalesCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalUserService_TransferSalesCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalUserServiceServer).TransferSalesCustomer(ctx, req.(*TransferSalesCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalUserService_GetLowerLevelInternalUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLowerLevelInternalUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalUserServiceServer).GetLowerLevelInternalUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalUserService_GetLowerLevelInternalUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalUserServiceServer).GetLowerLevelInternalUsers(ctx, req.(*GetLowerLevelInternalUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalUserService_SetLowerLevelInternalUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLowerLevelInternalUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalUserServiceServer).SetLowerLevelInternalUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalUserService_SetLowerLevelInternalUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalUserServiceServer).SetLowerLevelInternalUsers(ctx, req.(*SetLowerLevelInternalUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalUserService_CreateSampleNavigatorNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSampleNavigatorNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalUserServiceServer).CreateSampleNavigatorNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalUserService_CreateSampleNavigatorNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalUserServiceServer).CreateSampleNavigatorNote(ctx, req.(*CreateSampleNavigatorNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalUserService_ModifySampleNavigatorNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifySampleNavigatorNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalUserServiceServer).ModifySampleNavigatorNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalUserService_ModifySampleNavigatorNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalUserServiceServer).ModifySampleNavigatorNote(ctx, req.(*ModifySampleNavigatorNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalUserService_DeleteSampleNavigatorNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSampleNavigatorNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalUserServiceServer).DeleteSampleNavigatorNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalUserService_DeleteSampleNavigatorNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalUserServiceServer).DeleteSampleNavigatorNote(ctx, req.(*DeleteSampleNavigatorNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalUserService_GetInternalUserByid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInternalUserByidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalUserServiceServer).GetInternalUserByid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalUserService_GetInternalUserByid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalUserServiceServer).GetInternalUserByid(ctx, req.(*GetInternalUserByidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalUserService_CheckCustomerNavigator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckNavigatorCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalUserServiceServer).CheckCustomerNavigator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalUserService_CheckCustomerNavigator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalUserServiceServer).CheckCustomerNavigator(ctx, req.(*CheckNavigatorCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalUserService_ServiceDesc is the grpc.ServiceDesc for InternalUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coresamples_service.InternalUserService",
	HandlerType: (*InternalUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInternalUser",
			Handler:    _InternalUserService_CreateInternalUser_Handler,
		},
		{
			MethodName: "GetSalesClinics",
			Handler:    _InternalUserService_GetSalesClinics_Handler,
		},
		{
			MethodName: "GetInternalUser",
			Handler:    _InternalUserService_GetInternalUser_Handler,
		},
		{
			MethodName: "TransferSalesCustomer",
			Handler:    _InternalUserService_TransferSalesCustomer_Handler,
		},
		{
			MethodName: "GetLowerLevelInternalUsers",
			Handler:    _InternalUserService_GetLowerLevelInternalUsers_Handler,
		},
		{
			MethodName: "SetLowerLevelInternalUsers",
			Handler:    _InternalUserService_SetLowerLevelInternalUsers_Handler,
		},
		{
			MethodName: "CreateSampleNavigatorNote",
			Handler:    _InternalUserService_CreateSampleNavigatorNote_Handler,
		},
		{
			MethodName: "ModifySampleNavigatorNote",
			Handler:    _InternalUserService_ModifySampleNavigatorNote_Handler,
		},
		{
			MethodName: "DeleteSampleNavigatorNote",
			Handler:    _InternalUserService_DeleteSampleNavigatorNote_Handler,
		},
		{
			MethodName: "GetInternalUserByid",
			Handler:    _InternalUserService_GetInternalUserByid_Handler,
		},
		{
			MethodName: "CheckCustomerNavigator",
			Handler:    _InternalUserService_CheckCustomerNavigator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/internal_user.proto",
}
