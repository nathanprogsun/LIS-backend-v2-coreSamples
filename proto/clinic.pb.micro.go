// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/clinic.proto

package coresamples_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ClinicService service

func NewClinicServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ClinicService service

type ClinicService interface {
	CreateClinic(ctx context.Context, in *CreateClinicRequest, opts ...client.CallOption) (*Clinic, error)
	GetClinic(ctx context.Context, in *GetClinicRequest, opts ...client.CallOption) (*GetClinicResponse, error)
	ListClinic(ctx context.Context, in *ListClinicRequest, opts ...client.CallOption) (*GetClinicResponse, error)
	ListClinicCustomers(ctx context.Context, in *ListClinicCustomerRequest, opts ...client.CallOption) (*ListClinicCustomerResponse, error)
	GetCustomerClinicNames(ctx context.Context, in *GetCustomerClinicNamesRequest, opts ...client.CallOption) (*GetCustomerClinicNamesResponse, error)
	GetClinicsClinicAccountIDs(ctx context.Context, in *GetClinicsClinicAccountIDsRequest, opts ...client.CallOption) (*GetClinicResponse, error)
	ListClinicCustomersByClinicID(ctx context.Context, in *ListClinicCustomersByClinicIDRequest, opts ...client.CallOption) (*ListClinicCustomerByIDResponse, error)
	// Version 0.7.3.7
	GetClinicByID(ctx context.Context, in *ClinicID, opts ...client.CallOption) (*FullClinic, error)
	// Version 0.7.3.9
	UpdateClinicNPINumber(ctx context.Context, in *UpdateClinicNPINumberRequest, opts ...client.CallOption) (*GetClinicResponse, error)
	EditClinicName(ctx context.Context, in *EditClinicNameRequest, opts ...client.CallOption) (*GetClinicResponse, error)
	ModifyClinicNames(ctx context.Context, in *ModifyClinicNamesRequest, opts ...client.CallOption) (*GetClinicResponse, error)
	SearchClinicsByName(ctx context.Context, in *SearchClinicsNameRequest, opts ...client.CallOption) (*SearchClinicsInfoResponse, error)
	SignUpClinicForExistingAccount(ctx context.Context, in *SignUpClinicRequest, opts ...client.CallOption) (*SignUpClinicResponse, error)
	CheckClinicAttributes(ctx context.Context, in *CheckClinicAttributesRequest, opts ...client.CallOption) (*CheckClinicAttributesResponse, error)
	// VP-4965
	GetFirstCustomerOfClinic(ctx context.Context, in *GetFirstCustomerOfClinicRequest, opts ...client.CallOption) (*GetFirstCustomerOfClinicResponse, error)
	FuzzySearchClinics(ctx context.Context, in *FuzzySearchClinicsRequest, opts ...client.CallOption) (*SearchClinicsInfoResponse, error)
	GetClinicAddress(ctx context.Context, in *ClinicID, opts ...client.CallOption) (*GetClinicAddressResponse, error)
}

type clinicService struct {
	c    client.Client
	name string
}

func NewClinicService(name string, c client.Client) ClinicService {
	return &clinicService{
		c:    c,
		name: name,
	}
}

func (c *clinicService) CreateClinic(ctx context.Context, in *CreateClinicRequest, opts ...client.CallOption) (*Clinic, error) {
	req := c.c.NewRequest(c.name, "ClinicService.CreateClinic", in)
	out := new(Clinic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicService) GetClinic(ctx context.Context, in *GetClinicRequest, opts ...client.CallOption) (*GetClinicResponse, error) {
	req := c.c.NewRequest(c.name, "ClinicService.GetClinic", in)
	out := new(GetClinicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicService) ListClinic(ctx context.Context, in *ListClinicRequest, opts ...client.CallOption) (*GetClinicResponse, error) {
	req := c.c.NewRequest(c.name, "ClinicService.ListClinic", in)
	out := new(GetClinicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicService) ListClinicCustomers(ctx context.Context, in *ListClinicCustomerRequest, opts ...client.CallOption) (*ListClinicCustomerResponse, error) {
	req := c.c.NewRequest(c.name, "ClinicService.ListClinicCustomers", in)
	out := new(ListClinicCustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicService) GetCustomerClinicNames(ctx context.Context, in *GetCustomerClinicNamesRequest, opts ...client.CallOption) (*GetCustomerClinicNamesResponse, error) {
	req := c.c.NewRequest(c.name, "ClinicService.GetCustomerClinicNames", in)
	out := new(GetCustomerClinicNamesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicService) GetClinicsClinicAccountIDs(ctx context.Context, in *GetClinicsClinicAccountIDsRequest, opts ...client.CallOption) (*GetClinicResponse, error) {
	req := c.c.NewRequest(c.name, "ClinicService.GetClinicsClinicAccountIDs", in)
	out := new(GetClinicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicService) ListClinicCustomersByClinicID(ctx context.Context, in *ListClinicCustomersByClinicIDRequest, opts ...client.CallOption) (*ListClinicCustomerByIDResponse, error) {
	req := c.c.NewRequest(c.name, "ClinicService.ListClinicCustomersByClinicID", in)
	out := new(ListClinicCustomerByIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicService) GetClinicByID(ctx context.Context, in *ClinicID, opts ...client.CallOption) (*FullClinic, error) {
	req := c.c.NewRequest(c.name, "ClinicService.GetClinicByID", in)
	out := new(FullClinic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicService) UpdateClinicNPINumber(ctx context.Context, in *UpdateClinicNPINumberRequest, opts ...client.CallOption) (*GetClinicResponse, error) {
	req := c.c.NewRequest(c.name, "ClinicService.UpdateClinicNPINumber", in)
	out := new(GetClinicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicService) EditClinicName(ctx context.Context, in *EditClinicNameRequest, opts ...client.CallOption) (*GetClinicResponse, error) {
	req := c.c.NewRequest(c.name, "ClinicService.EditClinicName", in)
	out := new(GetClinicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicService) ModifyClinicNames(ctx context.Context, in *ModifyClinicNamesRequest, opts ...client.CallOption) (*GetClinicResponse, error) {
	req := c.c.NewRequest(c.name, "ClinicService.modifyClinicNames", in)
	out := new(GetClinicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicService) SearchClinicsByName(ctx context.Context, in *SearchClinicsNameRequest, opts ...client.CallOption) (*SearchClinicsInfoResponse, error) {
	req := c.c.NewRequest(c.name, "ClinicService.SearchClinicsByName", in)
	out := new(SearchClinicsInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicService) SignUpClinicForExistingAccount(ctx context.Context, in *SignUpClinicRequest, opts ...client.CallOption) (*SignUpClinicResponse, error) {
	req := c.c.NewRequest(c.name, "ClinicService.SignUpClinicForExistingAccount", in)
	out := new(SignUpClinicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicService) CheckClinicAttributes(ctx context.Context, in *CheckClinicAttributesRequest, opts ...client.CallOption) (*CheckClinicAttributesResponse, error) {
	req := c.c.NewRequest(c.name, "ClinicService.CheckClinicAttributes", in)
	out := new(CheckClinicAttributesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicService) GetFirstCustomerOfClinic(ctx context.Context, in *GetFirstCustomerOfClinicRequest, opts ...client.CallOption) (*GetFirstCustomerOfClinicResponse, error) {
	req := c.c.NewRequest(c.name, "ClinicService.GetFirstCustomerOfClinic", in)
	out := new(GetFirstCustomerOfClinicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicService) FuzzySearchClinics(ctx context.Context, in *FuzzySearchClinicsRequest, opts ...client.CallOption) (*SearchClinicsInfoResponse, error) {
	req := c.c.NewRequest(c.name, "ClinicService.FuzzySearchClinics", in)
	out := new(SearchClinicsInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicService) GetClinicAddress(ctx context.Context, in *ClinicID, opts ...client.CallOption) (*GetClinicAddressResponse, error) {
	req := c.c.NewRequest(c.name, "ClinicService.GetClinicAddress", in)
	out := new(GetClinicAddressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClinicService service

type ClinicServiceHandler interface {
	CreateClinic(context.Context, *CreateClinicRequest, *Clinic) error
	GetClinic(context.Context, *GetClinicRequest, *GetClinicResponse) error
	ListClinic(context.Context, *ListClinicRequest, *GetClinicResponse) error
	ListClinicCustomers(context.Context, *ListClinicCustomerRequest, *ListClinicCustomerResponse) error
	GetCustomerClinicNames(context.Context, *GetCustomerClinicNamesRequest, *GetCustomerClinicNamesResponse) error
	GetClinicsClinicAccountIDs(context.Context, *GetClinicsClinicAccountIDsRequest, *GetClinicResponse) error
	ListClinicCustomersByClinicID(context.Context, *ListClinicCustomersByClinicIDRequest, *ListClinicCustomerByIDResponse) error
	// Version 0.7.3.7
	GetClinicByID(context.Context, *ClinicID, *FullClinic) error
	// Version 0.7.3.9
	UpdateClinicNPINumber(context.Context, *UpdateClinicNPINumberRequest, *GetClinicResponse) error
	EditClinicName(context.Context, *EditClinicNameRequest, *GetClinicResponse) error
	ModifyClinicNames(context.Context, *ModifyClinicNamesRequest, *GetClinicResponse) error
	SearchClinicsByName(context.Context, *SearchClinicsNameRequest, *SearchClinicsInfoResponse) error
	SignUpClinicForExistingAccount(context.Context, *SignUpClinicRequest, *SignUpClinicResponse) error
	CheckClinicAttributes(context.Context, *CheckClinicAttributesRequest, *CheckClinicAttributesResponse) error
	// VP-4965
	GetFirstCustomerOfClinic(context.Context, *GetFirstCustomerOfClinicRequest, *GetFirstCustomerOfClinicResponse) error
	FuzzySearchClinics(context.Context, *FuzzySearchClinicsRequest, *SearchClinicsInfoResponse) error
	GetClinicAddress(context.Context, *ClinicID, *GetClinicAddressResponse) error
}

func RegisterClinicServiceHandler(s server.Server, hdlr ClinicServiceHandler, opts ...server.HandlerOption) error {
	type clinicService interface {
		CreateClinic(ctx context.Context, in *CreateClinicRequest, out *Clinic) error
		GetClinic(ctx context.Context, in *GetClinicRequest, out *GetClinicResponse) error
		ListClinic(ctx context.Context, in *ListClinicRequest, out *GetClinicResponse) error
		ListClinicCustomers(ctx context.Context, in *ListClinicCustomerRequest, out *ListClinicCustomerResponse) error
		GetCustomerClinicNames(ctx context.Context, in *GetCustomerClinicNamesRequest, out *GetCustomerClinicNamesResponse) error
		GetClinicsClinicAccountIDs(ctx context.Context, in *GetClinicsClinicAccountIDsRequest, out *GetClinicResponse) error
		ListClinicCustomersByClinicID(ctx context.Context, in *ListClinicCustomersByClinicIDRequest, out *ListClinicCustomerByIDResponse) error
		GetClinicByID(ctx context.Context, in *ClinicID, out *FullClinic) error
		UpdateClinicNPINumber(ctx context.Context, in *UpdateClinicNPINumberRequest, out *GetClinicResponse) error
		EditClinicName(ctx context.Context, in *EditClinicNameRequest, out *GetClinicResponse) error
		ModifyClinicNames(ctx context.Context, in *ModifyClinicNamesRequest, out *GetClinicResponse) error
		SearchClinicsByName(ctx context.Context, in *SearchClinicsNameRequest, out *SearchClinicsInfoResponse) error
		SignUpClinicForExistingAccount(ctx context.Context, in *SignUpClinicRequest, out *SignUpClinicResponse) error
		CheckClinicAttributes(ctx context.Context, in *CheckClinicAttributesRequest, out *CheckClinicAttributesResponse) error
		GetFirstCustomerOfClinic(ctx context.Context, in *GetFirstCustomerOfClinicRequest, out *GetFirstCustomerOfClinicResponse) error
		FuzzySearchClinics(ctx context.Context, in *FuzzySearchClinicsRequest, out *SearchClinicsInfoResponse) error
		GetClinicAddress(ctx context.Context, in *ClinicID, out *GetClinicAddressResponse) error
	}
	type ClinicService struct {
		clinicService
	}
	h := &clinicServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ClinicService{h}, opts...))
}

type clinicServiceHandler struct {
	ClinicServiceHandler
}

func (h *clinicServiceHandler) CreateClinic(ctx context.Context, in *CreateClinicRequest, out *Clinic) error {
	return h.ClinicServiceHandler.CreateClinic(ctx, in, out)
}

func (h *clinicServiceHandler) GetClinic(ctx context.Context, in *GetClinicRequest, out *GetClinicResponse) error {
	return h.ClinicServiceHandler.GetClinic(ctx, in, out)
}

func (h *clinicServiceHandler) ListClinic(ctx context.Context, in *ListClinicRequest, out *GetClinicResponse) error {
	return h.ClinicServiceHandler.ListClinic(ctx, in, out)
}

func (h *clinicServiceHandler) ListClinicCustomers(ctx context.Context, in *ListClinicCustomerRequest, out *ListClinicCustomerResponse) error {
	return h.ClinicServiceHandler.ListClinicCustomers(ctx, in, out)
}

func (h *clinicServiceHandler) GetCustomerClinicNames(ctx context.Context, in *GetCustomerClinicNamesRequest, out *GetCustomerClinicNamesResponse) error {
	return h.ClinicServiceHandler.GetCustomerClinicNames(ctx, in, out)
}

func (h *clinicServiceHandler) GetClinicsClinicAccountIDs(ctx context.Context, in *GetClinicsClinicAccountIDsRequest, out *GetClinicResponse) error {
	return h.ClinicServiceHandler.GetClinicsClinicAccountIDs(ctx, in, out)
}

func (h *clinicServiceHandler) ListClinicCustomersByClinicID(ctx context.Context, in *ListClinicCustomersByClinicIDRequest, out *ListClinicCustomerByIDResponse) error {
	return h.ClinicServiceHandler.ListClinicCustomersByClinicID(ctx, in, out)
}

func (h *clinicServiceHandler) GetClinicByID(ctx context.Context, in *ClinicID, out *FullClinic) error {
	return h.ClinicServiceHandler.GetClinicByID(ctx, in, out)
}

func (h *clinicServiceHandler) UpdateClinicNPINumber(ctx context.Context, in *UpdateClinicNPINumberRequest, out *GetClinicResponse) error {
	return h.ClinicServiceHandler.UpdateClinicNPINumber(ctx, in, out)
}

func (h *clinicServiceHandler) EditClinicName(ctx context.Context, in *EditClinicNameRequest, out *GetClinicResponse) error {
	return h.ClinicServiceHandler.EditClinicName(ctx, in, out)
}

func (h *clinicServiceHandler) ModifyClinicNames(ctx context.Context, in *ModifyClinicNamesRequest, out *GetClinicResponse) error {
	return h.ClinicServiceHandler.ModifyClinicNames(ctx, in, out)
}

func (h *clinicServiceHandler) SearchClinicsByName(ctx context.Context, in *SearchClinicsNameRequest, out *SearchClinicsInfoResponse) error {
	return h.ClinicServiceHandler.SearchClinicsByName(ctx, in, out)
}

func (h *clinicServiceHandler) SignUpClinicForExistingAccount(ctx context.Context, in *SignUpClinicRequest, out *SignUpClinicResponse) error {
	return h.ClinicServiceHandler.SignUpClinicForExistingAccount(ctx, in, out)
}

func (h *clinicServiceHandler) CheckClinicAttributes(ctx context.Context, in *CheckClinicAttributesRequest, out *CheckClinicAttributesResponse) error {
	return h.ClinicServiceHandler.CheckClinicAttributes(ctx, in, out)
}

func (h *clinicServiceHandler) GetFirstCustomerOfClinic(ctx context.Context, in *GetFirstCustomerOfClinicRequest, out *GetFirstCustomerOfClinicResponse) error {
	return h.ClinicServiceHandler.GetFirstCustomerOfClinic(ctx, in, out)
}

func (h *clinicServiceHandler) FuzzySearchClinics(ctx context.Context, in *FuzzySearchClinicsRequest, out *SearchClinicsInfoResponse) error {
	return h.ClinicServiceHandler.FuzzySearchClinics(ctx, in, out)
}

func (h *clinicServiceHandler) GetClinicAddress(ctx context.Context, in *ClinicID, out *GetClinicAddressResponse) error {
	return h.ClinicServiceHandler.GetClinicAddress(ctx, in, out)
}
