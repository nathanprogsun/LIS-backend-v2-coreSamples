// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: proto/address.proto

package coresamples_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShowClinicAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicId int32 `protobuf:"varint,1,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
}

func (x *ShowClinicAddressRequest) Reset() {
	*x = ShowClinicAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_address_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowClinicAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowClinicAddressRequest) ProtoMessage() {}

func (x *ShowClinicAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_address_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowClinicAddressRequest.ProtoReflect.Descriptor instead.
func (*ShowClinicAddressRequest) Descriptor() ([]byte, []int) {
	return file_proto_address_proto_rawDescGZIP(), []int{0}
}

func (x *ShowClinicAddressRequest) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

type ShowCustomerAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId int32 `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *ShowCustomerAddressRequest) Reset() {
	*x = ShowCustomerAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_address_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowCustomerAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowCustomerAddressRequest) ProtoMessage() {}

func (x *ShowCustomerAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_address_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowCustomerAddressRequest.ProtoReflect.Descriptor instead.
func (*ShowCustomerAddressRequest) Descriptor() ([]byte, []int) {
	return file_proto_address_proto_rawDescGZIP(), []int{1}
}

func (x *ShowCustomerAddressRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

type ShowCustomerAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*CustomerAddress `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ShowCustomerAddressResponse) Reset() {
	*x = ShowCustomerAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_address_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowCustomerAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowCustomerAddressResponse) ProtoMessage() {}

func (x *ShowCustomerAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_address_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowCustomerAddressResponse.ProtoReflect.Descriptor instead.
func (*ShowCustomerAddressResponse) Descriptor() ([]byte, []int) {
	return file_proto_address_proto_rawDescGZIP(), []int{2}
}

func (x *ShowCustomerAddressResponse) GetResult() []*CustomerAddress {
	if x != nil {
		return x.Result
	}
	return nil
}

type CustomerAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressId                 int32            `protobuf:"varint,1,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	AddressType               string           `protobuf:"bytes,2,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	StreetAddress             string           `protobuf:"bytes,3,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	AptPo                     string           `protobuf:"bytes,4,opt,name=apt_po,json=aptPo,proto3" json:"apt_po,omitempty"`
	City                      string           `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	State                     string           `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Zipcode                   string           `protobuf:"bytes,7,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	Country                   string           `protobuf:"bytes,8,opt,name=country,proto3" json:"country,omitempty"`
	AddressConfirmed          bool             `protobuf:"varint,9,opt,name=address_confirmed,json=addressConfirmed,proto3" json:"address_confirmed,omitempty"`
	IsPrimaryAddress          bool             `protobuf:"varint,10,opt,name=is_primary_address,json=isPrimaryAddress,proto3" json:"is_primary_address,omitempty"`
	HasGroupAddress           bool             `protobuf:"varint,11,opt,name=hasGroupAddress,proto3" json:"hasGroupAddress,omitempty"`
	IsGroupAddress            bool             `protobuf:"varint,12,opt,name=isGroupAddress,proto3" json:"isGroupAddress,omitempty"`
	AddressLevel              int32            `protobuf:"varint,13,opt,name=address_level,json=addressLevel,proto3" json:"address_level,omitempty"`
	AddressLevelName          string           `protobuf:"bytes,14,opt,name=address_level_name,json=addressLevelName,proto3" json:"address_level_name,omitempty"`
	GroupAddressId            int32            `protobuf:"varint,15,opt,name=group_address_id,json=groupAddressId,proto3" json:"group_address_id,omitempty"`
	ApplyToAllGroupMember     bool             `protobuf:"varint,16,opt,name=applyToAllGroupMember,proto3" json:"applyToAllGroupMember,omitempty"`
	UseAsDefaultCreateAddress bool             `protobuf:"varint,17,opt,name=useAsDefaultCreateAddress,proto3" json:"useAsDefaultCreateAddress,omitempty"`
	CustomerId                int32            `protobuf:"varint,18,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	PatientId                 int32            `protobuf:"varint,19,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	ClinicId                  int32            `protobuf:"varint,20,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	InternalUserId            int32            `protobuf:"varint,21,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
	GroupAddress              *CustomerAddress `protobuf:"bytes,22,opt,name=group_address,json=groupAddress,proto3" json:"group_address,omitempty"`
	UseGroupAddress           bool             `protobuf:"varint,23,opt,name=useGroupAddress,proto3" json:"useGroupAddress,omitempty"`
}

func (x *CustomerAddress) Reset() {
	*x = CustomerAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_address_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerAddress) ProtoMessage() {}

func (x *CustomerAddress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_address_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerAddress.ProtoReflect.Descriptor instead.
func (*CustomerAddress) Descriptor() ([]byte, []int) {
	return file_proto_address_proto_rawDescGZIP(), []int{3}
}

func (x *CustomerAddress) GetAddressId() int32 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *CustomerAddress) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *CustomerAddress) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

func (x *CustomerAddress) GetAptPo() string {
	if x != nil {
		return x.AptPo
	}
	return ""
}

func (x *CustomerAddress) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CustomerAddress) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CustomerAddress) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *CustomerAddress) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CustomerAddress) GetAddressConfirmed() bool {
	if x != nil {
		return x.AddressConfirmed
	}
	return false
}

func (x *CustomerAddress) GetIsPrimaryAddress() bool {
	if x != nil {
		return x.IsPrimaryAddress
	}
	return false
}

func (x *CustomerAddress) GetHasGroupAddress() bool {
	if x != nil {
		return x.HasGroupAddress
	}
	return false
}

func (x *CustomerAddress) GetIsGroupAddress() bool {
	if x != nil {
		return x.IsGroupAddress
	}
	return false
}

func (x *CustomerAddress) GetAddressLevel() int32 {
	if x != nil {
		return x.AddressLevel
	}
	return 0
}

func (x *CustomerAddress) GetAddressLevelName() string {
	if x != nil {
		return x.AddressLevelName
	}
	return ""
}

func (x *CustomerAddress) GetGroupAddressId() int32 {
	if x != nil {
		return x.GroupAddressId
	}
	return 0
}

func (x *CustomerAddress) GetApplyToAllGroupMember() bool {
	if x != nil {
		return x.ApplyToAllGroupMember
	}
	return false
}

func (x *CustomerAddress) GetUseAsDefaultCreateAddress() bool {
	if x != nil {
		return x.UseAsDefaultCreateAddress
	}
	return false
}

func (x *CustomerAddress) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CustomerAddress) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *CustomerAddress) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *CustomerAddress) GetInternalUserId() int32 {
	if x != nil {
		return x.InternalUserId
	}
	return 0
}

func (x *CustomerAddress) GetGroupAddress() *CustomerAddress {
	if x != nil {
		return x.GroupAddress
	}
	return nil
}

func (x *CustomerAddress) GetUseGroupAddress() bool {
	if x != nil {
		return x.UseGroupAddress
	}
	return false
}

type CreateOrUpdateGroupAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressId                 int32                                 `protobuf:"varint,1,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	AddressType               string                                `protobuf:"bytes,2,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	StreetAddress             string                                `protobuf:"bytes,3,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	AptPo                     string                                `protobuf:"bytes,4,opt,name=apt_po,json=aptPo,proto3" json:"apt_po,omitempty"`
	City                      string                                `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	State                     string                                `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Zipcode                   string                                `protobuf:"bytes,7,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	Country                   string                                `protobuf:"bytes,8,opt,name=country,proto3" json:"country,omitempty"`
	AddressConfirmed          bool                                  `protobuf:"varint,9,opt,name=address_confirmed,json=addressConfirmed,proto3" json:"address_confirmed,omitempty"`
	IsPrimaryAddress          bool                                  `protobuf:"varint,10,opt,name=is_primary_address,json=isPrimaryAddress,proto3" json:"is_primary_address,omitempty"`
	HasGroupAddress           bool                                  `protobuf:"varint,11,opt,name=hasGroupAddress,proto3" json:"hasGroupAddress,omitempty"`
	IsGroupAddress            bool                                  `protobuf:"varint,12,opt,name=isGroupAddress,proto3" json:"isGroupAddress,omitempty"`
	AddressLevel              int32                                 `protobuf:"varint,13,opt,name=address_level,json=addressLevel,proto3" json:"address_level,omitempty"`
	AddressLevelName          string                                `protobuf:"bytes,14,opt,name=address_level_name,json=addressLevelName,proto3" json:"address_level_name,omitempty"`
	GroupAddressId            int32                                 `protobuf:"varint,15,opt,name=group_address_id,json=groupAddressId,proto3" json:"group_address_id,omitempty"`
	MemberAddresses           []*CreateOrUpdateGroupAddressResponse `protobuf:"bytes,16,rep,name=member_addresses,json=memberAddresses,proto3" json:"member_addresses,omitempty"`
	ApplyToAllGroupMember     bool                                  `protobuf:"varint,17,opt,name=applyToAllGroupMember,proto3" json:"applyToAllGroupMember,omitempty"`
	UseAsDefaultCreateAddress bool                                  `protobuf:"varint,18,opt,name=useAsDefaultCreateAddress,proto3" json:"useAsDefaultCreateAddress,omitempty"`
	CustomerId                int32                                 `protobuf:"varint,19,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	PatientId                 int32                                 `protobuf:"varint,20,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	ClinicId                  int32                                 `protobuf:"varint,21,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	InternalUserId            int32                                 `protobuf:"varint,22,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
}

func (x *CreateOrUpdateGroupAddressResponse) Reset() {
	*x = CreateOrUpdateGroupAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_address_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateGroupAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateGroupAddressResponse) ProtoMessage() {}

func (x *CreateOrUpdateGroupAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_address_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateGroupAddressResponse.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateGroupAddressResponse) Descriptor() ([]byte, []int) {
	return file_proto_address_proto_rawDescGZIP(), []int{4}
}

func (x *CreateOrUpdateGroupAddressResponse) GetAddressId() int32 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *CreateOrUpdateGroupAddressResponse) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *CreateOrUpdateGroupAddressResponse) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

func (x *CreateOrUpdateGroupAddressResponse) GetAptPo() string {
	if x != nil {
		return x.AptPo
	}
	return ""
}

func (x *CreateOrUpdateGroupAddressResponse) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateOrUpdateGroupAddressResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CreateOrUpdateGroupAddressResponse) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *CreateOrUpdateGroupAddressResponse) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CreateOrUpdateGroupAddressResponse) GetAddressConfirmed() bool {
	if x != nil {
		return x.AddressConfirmed
	}
	return false
}

func (x *CreateOrUpdateGroupAddressResponse) GetIsPrimaryAddress() bool {
	if x != nil {
		return x.IsPrimaryAddress
	}
	return false
}

func (x *CreateOrUpdateGroupAddressResponse) GetHasGroupAddress() bool {
	if x != nil {
		return x.HasGroupAddress
	}
	return false
}

func (x *CreateOrUpdateGroupAddressResponse) GetIsGroupAddress() bool {
	if x != nil {
		return x.IsGroupAddress
	}
	return false
}

func (x *CreateOrUpdateGroupAddressResponse) GetAddressLevel() int32 {
	if x != nil {
		return x.AddressLevel
	}
	return 0
}

func (x *CreateOrUpdateGroupAddressResponse) GetAddressLevelName() string {
	if x != nil {
		return x.AddressLevelName
	}
	return ""
}

func (x *CreateOrUpdateGroupAddressResponse) GetGroupAddressId() int32 {
	if x != nil {
		return x.GroupAddressId
	}
	return 0
}

func (x *CreateOrUpdateGroupAddressResponse) GetMemberAddresses() []*CreateOrUpdateGroupAddressResponse {
	if x != nil {
		return x.MemberAddresses
	}
	return nil
}

func (x *CreateOrUpdateGroupAddressResponse) GetApplyToAllGroupMember() bool {
	if x != nil {
		return x.ApplyToAllGroupMember
	}
	return false
}

func (x *CreateOrUpdateGroupAddressResponse) GetUseAsDefaultCreateAddress() bool {
	if x != nil {
		return x.UseAsDefaultCreateAddress
	}
	return false
}

func (x *CreateOrUpdateGroupAddressResponse) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CreateOrUpdateGroupAddressResponse) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *CreateOrUpdateGroupAddressResponse) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *CreateOrUpdateGroupAddressResponse) GetInternalUserId() int32 {
	if x != nil {
		return x.InternalUserId
	}
	return 0
}

type CreateOrUpdateGroupAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressInfo *GroupAddressCreateOrUpdate `protobuf:"bytes,1,opt,name=address_info,json=addressInfo,proto3" json:"address_info,omitempty"`
}

func (x *CreateOrUpdateGroupAddressRequest) Reset() {
	*x = CreateOrUpdateGroupAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_address_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateGroupAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateGroupAddressRequest) ProtoMessage() {}

func (x *CreateOrUpdateGroupAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_address_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateGroupAddressRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateGroupAddressRequest) Descriptor() ([]byte, []int) {
	return file_proto_address_proto_rawDescGZIP(), []int{5}
}

func (x *CreateOrUpdateGroupAddressRequest) GetAddressInfo() *GroupAddressCreateOrUpdate {
	if x != nil {
		return x.AddressInfo
	}
	return nil
}

type UpdateGroupAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressType               string `protobuf:"bytes,1,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	StreetAddress             string `protobuf:"bytes,2,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	AptPo                     string `protobuf:"bytes,3,opt,name=apt_po,json=aptPo,proto3" json:"apt_po,omitempty"`
	City                      string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	State                     string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Zipcode                   string `protobuf:"bytes,6,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	Country                   string `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	AddressConfirmed          bool   `protobuf:"varint,8,opt,name=address_confirmed,json=addressConfirmed,proto3" json:"address_confirmed,omitempty"`
	IsPrimaryAddress          bool   `protobuf:"varint,9,opt,name=is_primary_address,json=isPrimaryAddress,proto3" json:"is_primary_address,omitempty"`
	HasGroupAddress           bool   `protobuf:"varint,10,opt,name=hasGroupAddress,proto3" json:"hasGroupAddress,omitempty"`
	IsGroupAddress            bool   `protobuf:"varint,11,opt,name=isGroupAddress,proto3" json:"isGroupAddress,omitempty"`
	AddressLevel              int32  `protobuf:"varint,12,opt,name=address_level,json=addressLevel,proto3" json:"address_level,omitempty"`
	AddressLevelName          string `protobuf:"bytes,13,opt,name=address_level_name,json=addressLevelName,proto3" json:"address_level_name,omitempty"`
	GroupAddressId            int32  `protobuf:"varint,14,opt,name=group_address_id,json=groupAddressId,proto3" json:"group_address_id,omitempty"`
	ApplyToAllGroupMember     bool   `protobuf:"varint,15,opt,name=applyToAllGroupMember,proto3" json:"applyToAllGroupMember,omitempty"`
	UseAsDefaultCreateAddress bool   `protobuf:"varint,16,opt,name=useAsDefaultCreateAddress,proto3" json:"useAsDefaultCreateAddress,omitempty"`
	ClinicId                  int32  `protobuf:"varint,17,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	AddressId                 int32  `protobuf:"varint,18,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
}

func (x *UpdateGroupAddressRequest) Reset() {
	*x = UpdateGroupAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_address_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupAddressRequest) ProtoMessage() {}

func (x *UpdateGroupAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_address_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupAddressRequest.ProtoReflect.Descriptor instead.
func (*UpdateGroupAddressRequest) Descriptor() ([]byte, []int) {
	return file_proto_address_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateGroupAddressRequest) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *UpdateGroupAddressRequest) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

func (x *UpdateGroupAddressRequest) GetAptPo() string {
	if x != nil {
		return x.AptPo
	}
	return ""
}

func (x *UpdateGroupAddressRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateGroupAddressRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *UpdateGroupAddressRequest) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *UpdateGroupAddressRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UpdateGroupAddressRequest) GetAddressConfirmed() bool {
	if x != nil {
		return x.AddressConfirmed
	}
	return false
}

func (x *UpdateGroupAddressRequest) GetIsPrimaryAddress() bool {
	if x != nil {
		return x.IsPrimaryAddress
	}
	return false
}

func (x *UpdateGroupAddressRequest) GetHasGroupAddress() bool {
	if x != nil {
		return x.HasGroupAddress
	}
	return false
}

func (x *UpdateGroupAddressRequest) GetIsGroupAddress() bool {
	if x != nil {
		return x.IsGroupAddress
	}
	return false
}

func (x *UpdateGroupAddressRequest) GetAddressLevel() int32 {
	if x != nil {
		return x.AddressLevel
	}
	return 0
}

func (x *UpdateGroupAddressRequest) GetAddressLevelName() string {
	if x != nil {
		return x.AddressLevelName
	}
	return ""
}

func (x *UpdateGroupAddressRequest) GetGroupAddressId() int32 {
	if x != nil {
		return x.GroupAddressId
	}
	return 0
}

func (x *UpdateGroupAddressRequest) GetApplyToAllGroupMember() bool {
	if x != nil {
		return x.ApplyToAllGroupMember
	}
	return false
}

func (x *UpdateGroupAddressRequest) GetUseAsDefaultCreateAddress() bool {
	if x != nil {
		return x.UseAsDefaultCreateAddress
	}
	return false
}

func (x *UpdateGroupAddressRequest) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *UpdateGroupAddressRequest) GetAddressId() int32 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

type GroupAddressCreateOrUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressType               string `protobuf:"bytes,1,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	StreetAddress             string `protobuf:"bytes,2,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	AptPo                     string `protobuf:"bytes,3,opt,name=apt_po,json=aptPo,proto3" json:"apt_po,omitempty"`
	City                      string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	State                     string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Zipcode                   string `protobuf:"bytes,6,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	Country                   string `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	AddressConfirmed          bool   `protobuf:"varint,8,opt,name=address_confirmed,json=addressConfirmed,proto3" json:"address_confirmed,omitempty"`
	IsPrimaryAddress          bool   `protobuf:"varint,9,opt,name=is_primary_address,json=isPrimaryAddress,proto3" json:"is_primary_address,omitempty"`
	HasGroupAddress           bool   `protobuf:"varint,10,opt,name=hasGroupAddress,proto3" json:"hasGroupAddress,omitempty"`
	IsGroupAddress            bool   `protobuf:"varint,11,opt,name=isGroupAddress,proto3" json:"isGroupAddress,omitempty"`
	AddressLevel              int32  `protobuf:"varint,12,opt,name=address_level,json=addressLevel,proto3" json:"address_level,omitempty"`
	AddressLevelName          string `protobuf:"bytes,13,opt,name=address_level_name,json=addressLevelName,proto3" json:"address_level_name,omitempty"`
	GroupAddressId            int32  `protobuf:"varint,14,opt,name=group_address_id,json=groupAddressId,proto3" json:"group_address_id,omitempty"`
	ApplyToAllGroupMember     bool   `protobuf:"varint,15,opt,name=applyToAllGroupMember,proto3" json:"applyToAllGroupMember,omitempty"`
	UseAsDefaultCreateAddress bool   `protobuf:"varint,16,opt,name=useAsDefaultCreateAddress,proto3" json:"useAsDefaultCreateAddress,omitempty"`
	ClinicId                  int32  `protobuf:"varint,17,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
}

func (x *GroupAddressCreateOrUpdate) Reset() {
	*x = GroupAddressCreateOrUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_address_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupAddressCreateOrUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAddressCreateOrUpdate) ProtoMessage() {}

func (x *GroupAddressCreateOrUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_address_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAddressCreateOrUpdate.ProtoReflect.Descriptor instead.
func (*GroupAddressCreateOrUpdate) Descriptor() ([]byte, []int) {
	return file_proto_address_proto_rawDescGZIP(), []int{7}
}

func (x *GroupAddressCreateOrUpdate) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *GroupAddressCreateOrUpdate) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

func (x *GroupAddressCreateOrUpdate) GetAptPo() string {
	if x != nil {
		return x.AptPo
	}
	return ""
}

func (x *GroupAddressCreateOrUpdate) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *GroupAddressCreateOrUpdate) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GroupAddressCreateOrUpdate) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *GroupAddressCreateOrUpdate) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GroupAddressCreateOrUpdate) GetAddressConfirmed() bool {
	if x != nil {
		return x.AddressConfirmed
	}
	return false
}

func (x *GroupAddressCreateOrUpdate) GetIsPrimaryAddress() bool {
	if x != nil {
		return x.IsPrimaryAddress
	}
	return false
}

func (x *GroupAddressCreateOrUpdate) GetHasGroupAddress() bool {
	if x != nil {
		return x.HasGroupAddress
	}
	return false
}

func (x *GroupAddressCreateOrUpdate) GetIsGroupAddress() bool {
	if x != nil {
		return x.IsGroupAddress
	}
	return false
}

func (x *GroupAddressCreateOrUpdate) GetAddressLevel() int32 {
	if x != nil {
		return x.AddressLevel
	}
	return 0
}

func (x *GroupAddressCreateOrUpdate) GetAddressLevelName() string {
	if x != nil {
		return x.AddressLevelName
	}
	return ""
}

func (x *GroupAddressCreateOrUpdate) GetGroupAddressId() int32 {
	if x != nil {
		return x.GroupAddressId
	}
	return 0
}

func (x *GroupAddressCreateOrUpdate) GetApplyToAllGroupMember() bool {
	if x != nil {
		return x.ApplyToAllGroupMember
	}
	return false
}

func (x *GroupAddressCreateOrUpdate) GetUseAsDefaultCreateAddress() bool {
	if x != nil {
		return x.UseAsDefaultCreateAddress
	}
	return false
}

func (x *GroupAddressCreateOrUpdate) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

type GroupAddressUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressType               string `protobuf:"bytes,1,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	StreetAddress             string `protobuf:"bytes,2,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	AptPo                     string `protobuf:"bytes,3,opt,name=apt_po,json=aptPo,proto3" json:"apt_po,omitempty"`
	City                      string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	State                     string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Zipcode                   string `protobuf:"bytes,6,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	Country                   string `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	AddressConfirmed          bool   `protobuf:"varint,8,opt,name=address_confirmed,json=addressConfirmed,proto3" json:"address_confirmed,omitempty"`
	IsPrimaryAddress          bool   `protobuf:"varint,9,opt,name=is_primary_address,json=isPrimaryAddress,proto3" json:"is_primary_address,omitempty"`
	HasGroupAddress           bool   `protobuf:"varint,10,opt,name=hasGroupAddress,proto3" json:"hasGroupAddress,omitempty"`
	IsGroupAddress            bool   `protobuf:"varint,11,opt,name=isGroupAddress,proto3" json:"isGroupAddress,omitempty"`
	AddressLevel              int32  `protobuf:"varint,12,opt,name=address_level,json=addressLevel,proto3" json:"address_level,omitempty"`
	AddressLevelName          string `protobuf:"bytes,13,opt,name=address_level_name,json=addressLevelName,proto3" json:"address_level_name,omitempty"`
	GroupAddressId            int32  `protobuf:"varint,14,opt,name=group_address_id,json=groupAddressId,proto3" json:"group_address_id,omitempty"`
	ApplyToAllGroupMember     bool   `protobuf:"varint,15,opt,name=applyToAllGroupMember,proto3" json:"applyToAllGroupMember,omitempty"`
	UseAsDefaultCreateAddress bool   `protobuf:"varint,16,opt,name=useAsDefaultCreateAddress,proto3" json:"useAsDefaultCreateAddress,omitempty"`
	ClinicId                  int32  `protobuf:"varint,17,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	AddressId                 int32  `protobuf:"varint,18,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
}

func (x *GroupAddressUpdate) Reset() {
	*x = GroupAddressUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_address_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupAddressUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAddressUpdate) ProtoMessage() {}

func (x *GroupAddressUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_address_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAddressUpdate.ProtoReflect.Descriptor instead.
func (*GroupAddressUpdate) Descriptor() ([]byte, []int) {
	return file_proto_address_proto_rawDescGZIP(), []int{8}
}

func (x *GroupAddressUpdate) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *GroupAddressUpdate) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

func (x *GroupAddressUpdate) GetAptPo() string {
	if x != nil {
		return x.AptPo
	}
	return ""
}

func (x *GroupAddressUpdate) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *GroupAddressUpdate) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GroupAddressUpdate) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *GroupAddressUpdate) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GroupAddressUpdate) GetAddressConfirmed() bool {
	if x != nil {
		return x.AddressConfirmed
	}
	return false
}

func (x *GroupAddressUpdate) GetIsPrimaryAddress() bool {
	if x != nil {
		return x.IsPrimaryAddress
	}
	return false
}

func (x *GroupAddressUpdate) GetHasGroupAddress() bool {
	if x != nil {
		return x.HasGroupAddress
	}
	return false
}

func (x *GroupAddressUpdate) GetIsGroupAddress() bool {
	if x != nil {
		return x.IsGroupAddress
	}
	return false
}

func (x *GroupAddressUpdate) GetAddressLevel() int32 {
	if x != nil {
		return x.AddressLevel
	}
	return 0
}

func (x *GroupAddressUpdate) GetAddressLevelName() string {
	if x != nil {
		return x.AddressLevelName
	}
	return ""
}

func (x *GroupAddressUpdate) GetGroupAddressId() int32 {
	if x != nil {
		return x.GroupAddressId
	}
	return 0
}

func (x *GroupAddressUpdate) GetApplyToAllGroupMember() bool {
	if x != nil {
		return x.ApplyToAllGroupMember
	}
	return false
}

func (x *GroupAddressUpdate) GetUseAsDefaultCreateAddress() bool {
	if x != nil {
		return x.UseAsDefaultCreateAddress
	}
	return false
}

func (x *GroupAddressUpdate) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *GroupAddressUpdate) GetAddressId() int32 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

type GetAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressId string `protobuf:"bytes,1,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
}

func (x *GetAddressRequest) Reset() {
	*x = GetAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_address_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressRequest) ProtoMessage() {}

func (x *GetAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_address_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressRequest.ProtoReflect.Descriptor instead.
func (*GetAddressRequest) Descriptor() ([]byte, []int) {
	return file_proto_address_proto_rawDescGZIP(), []int{9}
}

func (x *GetAddressRequest) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

type CreateAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressType    string `protobuf:"bytes,1,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	StreetAddress  string `protobuf:"bytes,2,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	AptPo          string `protobuf:"bytes,3,opt,name=apt_po,json=aptPo,proto3" json:"apt_po,omitempty"`
	City           string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	State          string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Zipcode        string `protobuf:"bytes,6,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	Country        string `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	CustomerId     int32  `protobuf:"varint,11,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	PatientId      int32  `protobuf:"varint,12,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	ClinicId       int32  `protobuf:"varint,13,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	InternalUserId int32  `protobuf:"varint,14,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
}

func (x *CreateAddressRequest) Reset() {
	*x = CreateAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_address_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressRequest) ProtoMessage() {}

func (x *CreateAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_address_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressRequest.ProtoReflect.Descriptor instead.
func (*CreateAddressRequest) Descriptor() ([]byte, []int) {
	return file_proto_address_proto_rawDescGZIP(), []int{10}
}

func (x *CreateAddressRequest) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *CreateAddressRequest) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

func (x *CreateAddressRequest) GetAptPo() string {
	if x != nil {
		return x.AptPo
	}
	return ""
}

func (x *CreateAddressRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateAddressRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CreateAddressRequest) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *CreateAddressRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CreateAddressRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CreateAddressRequest) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *CreateAddressRequest) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *CreateAddressRequest) GetInternalUserId() int32 {
	if x != nil {
		return x.InternalUserId
	}
	return 0
}

type UpdateAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressId        string `protobuf:"bytes,1,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	AddressType      string `protobuf:"bytes,2,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	StreetAddress    string `protobuf:"bytes,3,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	AptPo            string `protobuf:"bytes,4,opt,name=apt_po,json=aptPo,proto3" json:"apt_po,omitempty"`
	City             string `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	State            string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Zipcode          string `protobuf:"bytes,7,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	Country          string `protobuf:"bytes,8,opt,name=country,proto3" json:"country,omitempty"`
	AddressConfirmed bool   `protobuf:"varint,9,opt,name=address_confirmed,json=addressConfirmed,proto3" json:"address_confirmed,omitempty"`
	IsPrimaryAddress bool   `protobuf:"varint,10,opt,name=is_primary_address,json=isPrimaryAddress,proto3" json:"is_primary_address,omitempty"`
	UseGroupAddress  bool   `protobuf:"varint,11,opt,name=useGroupAddress,proto3" json:"useGroupAddress,omitempty"` // string address_change_role = 12;
}

func (x *UpdateAddressRequest) Reset() {
	*x = UpdateAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_address_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddressRequest) ProtoMessage() {}

func (x *UpdateAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_address_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddressRequest.ProtoReflect.Descriptor instead.
func (*UpdateAddressRequest) Descriptor() ([]byte, []int) {
	return file_proto_address_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateAddressRequest) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

func (x *UpdateAddressRequest) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *UpdateAddressRequest) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

func (x *UpdateAddressRequest) GetAptPo() string {
	if x != nil {
		return x.AptPo
	}
	return ""
}

func (x *UpdateAddressRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateAddressRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *UpdateAddressRequest) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *UpdateAddressRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UpdateAddressRequest) GetAddressConfirmed() bool {
	if x != nil {
		return x.AddressConfirmed
	}
	return false
}

func (x *UpdateAddressRequest) GetIsPrimaryAddress() bool {
	if x != nil {
		return x.IsPrimaryAddress
	}
	return false
}

func (x *UpdateAddressRequest) GetUseGroupAddress() bool {
	if x != nil {
		return x.UseGroupAddress
	}
	return false
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressId        int32  `protobuf:"varint,1,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	AddressType      string `protobuf:"bytes,2,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	StreetAddress    string `protobuf:"bytes,3,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	AptPo            string `protobuf:"bytes,4,opt,name=apt_po,json=aptPo,proto3" json:"apt_po,omitempty"`
	City             string `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	State            string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Zipcode          string `protobuf:"bytes,7,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	Country          string `protobuf:"bytes,8,opt,name=country,proto3" json:"country,omitempty"`
	AddressConfirmed bool   `protobuf:"varint,9,opt,name=address_confirmed,json=addressConfirmed,proto3" json:"address_confirmed,omitempty"`
	IsPrimaryAddress bool   `protobuf:"varint,10,opt,name=is_primary_address,json=isPrimaryAddress,proto3" json:"is_primary_address,omitempty"`
	CustomerId       int32  `protobuf:"varint,11,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	PatientId        int32  `protobuf:"varint,12,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	ClinicId         int32  `protobuf:"varint,13,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	InternalUserId   int32  `protobuf:"varint,14,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_address_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_proto_address_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_proto_address_proto_rawDescGZIP(), []int{12}
}

func (x *Address) GetAddressId() int32 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *Address) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *Address) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

func (x *Address) GetAptPo() string {
	if x != nil {
		return x.AptPo
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Address) GetAddressConfirmed() bool {
	if x != nil {
		return x.AddressConfirmed
	}
	return false
}

func (x *Address) GetIsPrimaryAddress() bool {
	if x != nil {
		return x.IsPrimaryAddress
	}
	return false
}

func (x *Address) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *Address) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *Address) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *Address) GetInternalUserId() int32 {
	if x != nil {
		return x.InternalUserId
	}
	return 0
}

var File_proto_address_proto protoreflect.FileDescriptor

var file_proto_address_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x18, 0x53,
	0x68, 0x6f, 0x77, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x1a, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x1b, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x89, 0x07, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x74, 0x5f, 0x70, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x74, 0x50, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x68, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x75, 0x73, 0x65, 0x41, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8b, 0x07, 0x0a,
	0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x74, 0x5f, 0x70, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x74, 0x50, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x68, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x10, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x41, 0x73, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x75, 0x73, 0x65, 0x41, 0x73, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x21, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x52, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xb4, 0x05, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x74, 0x5f, 0x70, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x74,
	0x50, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a,
	0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x68,
	0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x75, 0x73, 0x65, 0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x96, 0x05, 0x0a, 0x1a, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x74, 0x5f, 0x70, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x74, 0x50, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x41,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x75, 0x73, 0x65,
	0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x49, 0x64, 0x22, 0xad, 0x05, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x74, 0x5f, 0x70, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x74, 0x50, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68,
	0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x19, 0x75, 0x73, 0x65,
	0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x75, 0x73,
	0x65, 0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0xdc, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x74, 0x5f, 0x70, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x74, 0x50,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x7a,
	0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69,
	0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf9, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x74, 0x5f,
	0x70, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x74, 0x50, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x7a, 0x69, 0x70,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xc9, 0x03, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x74, 0x5f, 0x70,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x74, 0x50, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x7a, 0x69, 0x70, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x32, 0xa5,
	0x06, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x54, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x26, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12,
	0x7f, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8f, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7a, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x68, 0x6f, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76,
	0x0a, 0x11, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x3b, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_address_proto_rawDescOnce sync.Once
	file_proto_address_proto_rawDescData = file_proto_address_proto_rawDesc
)

func file_proto_address_proto_rawDescGZIP() []byte {
	file_proto_address_proto_rawDescOnce.Do(func() {
		file_proto_address_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_address_proto_rawDescData)
	})
	return file_proto_address_proto_rawDescData
}

var file_proto_address_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_address_proto_goTypes = []interface{}{
	(*ShowClinicAddressRequest)(nil),           // 0: coresamples_service.ShowClinicAddressRequest
	(*ShowCustomerAddressRequest)(nil),         // 1: coresamples_service.ShowCustomerAddressRequest
	(*ShowCustomerAddressResponse)(nil),        // 2: coresamples_service.ShowCustomerAddressResponse
	(*CustomerAddress)(nil),                    // 3: coresamples_service.CustomerAddress
	(*CreateOrUpdateGroupAddressResponse)(nil), // 4: coresamples_service.CreateOrUpdateGroupAddressResponse
	(*CreateOrUpdateGroupAddressRequest)(nil),  // 5: coresamples_service.CreateOrUpdateGroupAddressRequest
	(*UpdateGroupAddressRequest)(nil),          // 6: coresamples_service.UpdateGroupAddressRequest
	(*GroupAddressCreateOrUpdate)(nil),         // 7: coresamples_service.GroupAddressCreateOrUpdate
	(*GroupAddressUpdate)(nil),                 // 8: coresamples_service.GroupAddressUpdate
	(*GetAddressRequest)(nil),                  // 9: coresamples_service.GetAddressRequest
	(*CreateAddressRequest)(nil),               // 10: coresamples_service.CreateAddressRequest
	(*UpdateAddressRequest)(nil),               // 11: coresamples_service.UpdateAddressRequest
	(*Address)(nil),                            // 12: coresamples_service.Address
}
var file_proto_address_proto_depIdxs = []int32{
	3,  // 0: coresamples_service.ShowCustomerAddressResponse.result:type_name -> coresamples_service.CustomerAddress
	3,  // 1: coresamples_service.CustomerAddress.group_address:type_name -> coresamples_service.CustomerAddress
	4,  // 2: coresamples_service.CreateOrUpdateGroupAddressResponse.member_addresses:type_name -> coresamples_service.CreateOrUpdateGroupAddressResponse
	7,  // 3: coresamples_service.CreateOrUpdateGroupAddressRequest.address_info:type_name -> coresamples_service.GroupAddressCreateOrUpdate
	9,  // 4: coresamples_service.AddressService.GetAddress:input_type -> coresamples_service.GetAddressRequest
	11, // 5: coresamples_service.AddressService.UpdateAddress:input_type -> coresamples_service.UpdateAddressRequest
	10, // 6: coresamples_service.AddressService.CreateAddress:input_type -> coresamples_service.CreateAddressRequest
	6,  // 7: coresamples_service.AddressService.UpdateGroupAddress:input_type -> coresamples_service.UpdateGroupAddressRequest
	5,  // 8: coresamples_service.AddressService.CreateOrUpdateGroupAddress:input_type -> coresamples_service.CreateOrUpdateGroupAddressRequest
	1,  // 9: coresamples_service.AddressService.ShowCustomerAddress:input_type -> coresamples_service.ShowCustomerAddressRequest
	0,  // 10: coresamples_service.AddressService.ShowClinicAddress:input_type -> coresamples_service.ShowClinicAddressRequest
	12, // 11: coresamples_service.AddressService.GetAddress:output_type -> coresamples_service.Address
	12, // 12: coresamples_service.AddressService.UpdateAddress:output_type -> coresamples_service.Address
	12, // 13: coresamples_service.AddressService.CreateAddress:output_type -> coresamples_service.Address
	4,  // 14: coresamples_service.AddressService.UpdateGroupAddress:output_type -> coresamples_service.CreateOrUpdateGroupAddressResponse
	4,  // 15: coresamples_service.AddressService.CreateOrUpdateGroupAddress:output_type -> coresamples_service.CreateOrUpdateGroupAddressResponse
	2,  // 16: coresamples_service.AddressService.ShowCustomerAddress:output_type -> coresamples_service.ShowCustomerAddressResponse
	2,  // 17: coresamples_service.AddressService.ShowClinicAddress:output_type -> coresamples_service.ShowCustomerAddressResponse
	11, // [11:18] is the sub-list for method output_type
	4,  // [4:11] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_address_proto_init() }
func file_proto_address_proto_init() {
	if File_proto_address_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_address_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowClinicAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_address_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowCustomerAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_address_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowCustomerAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_address_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_address_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateGroupAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_address_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateGroupAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_address_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_address_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupAddressCreateOrUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_address_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupAddressUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_address_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_address_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_address_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_address_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_address_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_address_proto_goTypes,
		DependencyIndexes: file_proto_address_proto_depIdxs,
		MessageInfos:      file_proto_address_proto_msgTypes,
	}.Build()
	File_proto_address_proto = out.File
	file_proto_address_proto_rawDesc = nil
	file_proto_address_proto_goTypes = nil
	file_proto_address_proto_depIdxs = nil
}
