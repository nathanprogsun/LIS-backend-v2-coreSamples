// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/test_service.proto

package coresamples_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TestService service

func NewTestServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TestService service

type TestService interface {
	GetTest(ctx context.Context, in *GetTestRequest, opts ...client.CallOption) (*GetTestResponse, error)
	GetTestField(ctx context.Context, in *GetTestFieldRequest, opts ...client.CallOption) (*GetTestResponse, error)
	CreateTest(ctx context.Context, in *CreateTestRequest, opts ...client.CallOption) (*CreateTestResponse, error)
	// TODO: implement this
	GetTestTubeTypes(ctx context.Context, in *GetTestTubeTypesRequest, opts ...client.CallOption) (*GetTestTubeTypesResponse, error)
	GetTestIDsFromTestCodes(ctx context.Context, in *GetTestIDsFromTestCodesRequest, opts ...client.CallOption) (*GetTestIDsFromTestCodesResponse, error)
	GetDuplicateAssayGroupTest(ctx context.Context, in *GetDuplicateAssayGroupTestRequest, opts ...client.CallOption) (*GetDuplicateAssayGroupTestResponse, error)
}

type testService struct {
	c    client.Client
	name string
}

func NewTestService(name string, c client.Client) TestService {
	return &testService{
		c:    c,
		name: name,
	}
}

func (c *testService) GetTest(ctx context.Context, in *GetTestRequest, opts ...client.CallOption) (*GetTestResponse, error) {
	req := c.c.NewRequest(c.name, "TestService.GetTest", in)
	out := new(GetTestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService) GetTestField(ctx context.Context, in *GetTestFieldRequest, opts ...client.CallOption) (*GetTestResponse, error) {
	req := c.c.NewRequest(c.name, "TestService.GetTestField", in)
	out := new(GetTestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService) CreateTest(ctx context.Context, in *CreateTestRequest, opts ...client.CallOption) (*CreateTestResponse, error) {
	req := c.c.NewRequest(c.name, "TestService.CreateTest", in)
	out := new(CreateTestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService) GetTestTubeTypes(ctx context.Context, in *GetTestTubeTypesRequest, opts ...client.CallOption) (*GetTestTubeTypesResponse, error) {
	req := c.c.NewRequest(c.name, "TestService.GetTestTubeTypes", in)
	out := new(GetTestTubeTypesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService) GetTestIDsFromTestCodes(ctx context.Context, in *GetTestIDsFromTestCodesRequest, opts ...client.CallOption) (*GetTestIDsFromTestCodesResponse, error) {
	req := c.c.NewRequest(c.name, "TestService.GetTestIDsFromTestCodes", in)
	out := new(GetTestIDsFromTestCodesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService) GetDuplicateAssayGroupTest(ctx context.Context, in *GetDuplicateAssayGroupTestRequest, opts ...client.CallOption) (*GetDuplicateAssayGroupTestResponse, error) {
	req := c.c.NewRequest(c.name, "TestService.GetDuplicateAssayGroupTest", in)
	out := new(GetDuplicateAssayGroupTestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestService service

type TestServiceHandler interface {
	GetTest(context.Context, *GetTestRequest, *GetTestResponse) error
	GetTestField(context.Context, *GetTestFieldRequest, *GetTestResponse) error
	CreateTest(context.Context, *CreateTestRequest, *CreateTestResponse) error
	// TODO: implement this
	GetTestTubeTypes(context.Context, *GetTestTubeTypesRequest, *GetTestTubeTypesResponse) error
	GetTestIDsFromTestCodes(context.Context, *GetTestIDsFromTestCodesRequest, *GetTestIDsFromTestCodesResponse) error
	GetDuplicateAssayGroupTest(context.Context, *GetDuplicateAssayGroupTestRequest, *GetDuplicateAssayGroupTestResponse) error
}

func RegisterTestServiceHandler(s server.Server, hdlr TestServiceHandler, opts ...server.HandlerOption) error {
	type testService interface {
		GetTest(ctx context.Context, in *GetTestRequest, out *GetTestResponse) error
		GetTestField(ctx context.Context, in *GetTestFieldRequest, out *GetTestResponse) error
		CreateTest(ctx context.Context, in *CreateTestRequest, out *CreateTestResponse) error
		GetTestTubeTypes(ctx context.Context, in *GetTestTubeTypesRequest, out *GetTestTubeTypesResponse) error
		GetTestIDsFromTestCodes(ctx context.Context, in *GetTestIDsFromTestCodesRequest, out *GetTestIDsFromTestCodesResponse) error
		GetDuplicateAssayGroupTest(ctx context.Context, in *GetDuplicateAssayGroupTestRequest, out *GetDuplicateAssayGroupTestResponse) error
	}
	type TestService struct {
		testService
	}
	h := &testServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TestService{h}, opts...))
}

type testServiceHandler struct {
	TestServiceHandler
}

func (h *testServiceHandler) GetTest(ctx context.Context, in *GetTestRequest, out *GetTestResponse) error {
	return h.TestServiceHandler.GetTest(ctx, in, out)
}

func (h *testServiceHandler) GetTestField(ctx context.Context, in *GetTestFieldRequest, out *GetTestResponse) error {
	return h.TestServiceHandler.GetTestField(ctx, in, out)
}

func (h *testServiceHandler) CreateTest(ctx context.Context, in *CreateTestRequest, out *CreateTestResponse) error {
	return h.TestServiceHandler.CreateTest(ctx, in, out)
}

func (h *testServiceHandler) GetTestTubeTypes(ctx context.Context, in *GetTestTubeTypesRequest, out *GetTestTubeTypesResponse) error {
	return h.TestServiceHandler.GetTestTubeTypes(ctx, in, out)
}

func (h *testServiceHandler) GetTestIDsFromTestCodes(ctx context.Context, in *GetTestIDsFromTestCodesRequest, out *GetTestIDsFromTestCodesResponse) error {
	return h.TestServiceHandler.GetTestIDsFromTestCodes(ctx, in, out)
}

func (h *testServiceHandler) GetDuplicateAssayGroupTest(ctx context.Context, in *GetDuplicateAssayGroupTestRequest, out *GetDuplicateAssayGroupTestResponse) error {
	return h.TestServiceHandler.GetDuplicateAssayGroupTest(ctx, in, out)
}
