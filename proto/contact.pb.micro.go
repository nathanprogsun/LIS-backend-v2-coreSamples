// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/contact.proto

package coresamples_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ContactService service

func NewContactServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ContactService service

type ContactService interface {
	UpdateContact(ctx context.Context, in *UpdateContactRequest, opts ...client.CallOption) (*Contact, error)
	CreateContact(ctx context.Context, in *CreateContactRequest, opts ...client.CallOption) (*Contact, error)
	UpdateGroupContact(ctx context.Context, in *UpdateGroupContactRequest, opts ...client.CallOption) (*CreateOrUpdateGroupContactResponse, error)
	CreateOrUpdateGroupContact(ctx context.Context, in *CreateOrUpdateGroupContactRequest, opts ...client.CallOption) (*CreateOrUpdateGroupContactResponse, error)
	ShowCustomerContact(ctx context.Context, in *ShowCustomerContactRequest, opts ...client.CallOption) (*ShowCustomerContactResponse, error)
	ShowClinicContact(ctx context.Context, in *ShowClinicContactRequest, opts ...client.CallOption) (*ShowCustomerContactResponse, error)
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...client.CallOption) (*DeleteContactResponse, error)
}

type contactService struct {
	c    client.Client
	name string
}

func NewContactService(name string, c client.Client) ContactService {
	return &contactService{
		c:    c,
		name: name,
	}
}

func (c *contactService) UpdateContact(ctx context.Context, in *UpdateContactRequest, opts ...client.CallOption) (*Contact, error) {
	req := c.c.NewRequest(c.name, "ContactService.UpdateContact", in)
	out := new(Contact)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactService) CreateContact(ctx context.Context, in *CreateContactRequest, opts ...client.CallOption) (*Contact, error) {
	req := c.c.NewRequest(c.name, "ContactService.CreateContact", in)
	out := new(Contact)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactService) UpdateGroupContact(ctx context.Context, in *UpdateGroupContactRequest, opts ...client.CallOption) (*CreateOrUpdateGroupContactResponse, error) {
	req := c.c.NewRequest(c.name, "ContactService.UpdateGroupContact", in)
	out := new(CreateOrUpdateGroupContactResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactService) CreateOrUpdateGroupContact(ctx context.Context, in *CreateOrUpdateGroupContactRequest, opts ...client.CallOption) (*CreateOrUpdateGroupContactResponse, error) {
	req := c.c.NewRequest(c.name, "ContactService.CreateOrUpdateGroupContact", in)
	out := new(CreateOrUpdateGroupContactResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactService) ShowCustomerContact(ctx context.Context, in *ShowCustomerContactRequest, opts ...client.CallOption) (*ShowCustomerContactResponse, error) {
	req := c.c.NewRequest(c.name, "ContactService.ShowCustomerContact", in)
	out := new(ShowCustomerContactResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactService) ShowClinicContact(ctx context.Context, in *ShowClinicContactRequest, opts ...client.CallOption) (*ShowCustomerContactResponse, error) {
	req := c.c.NewRequest(c.name, "ContactService.ShowClinicContact", in)
	out := new(ShowCustomerContactResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactService) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...client.CallOption) (*DeleteContactResponse, error) {
	req := c.c.NewRequest(c.name, "ContactService.DeleteContact", in)
	out := new(DeleteContactResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContactService service

type ContactServiceHandler interface {
	UpdateContact(context.Context, *UpdateContactRequest, *Contact) error
	CreateContact(context.Context, *CreateContactRequest, *Contact) error
	UpdateGroupContact(context.Context, *UpdateGroupContactRequest, *CreateOrUpdateGroupContactResponse) error
	CreateOrUpdateGroupContact(context.Context, *CreateOrUpdateGroupContactRequest, *CreateOrUpdateGroupContactResponse) error
	ShowCustomerContact(context.Context, *ShowCustomerContactRequest, *ShowCustomerContactResponse) error
	ShowClinicContact(context.Context, *ShowClinicContactRequest, *ShowCustomerContactResponse) error
	DeleteContact(context.Context, *DeleteContactRequest, *DeleteContactResponse) error
}

func RegisterContactServiceHandler(s server.Server, hdlr ContactServiceHandler, opts ...server.HandlerOption) error {
	type contactService interface {
		UpdateContact(ctx context.Context, in *UpdateContactRequest, out *Contact) error
		CreateContact(ctx context.Context, in *CreateContactRequest, out *Contact) error
		UpdateGroupContact(ctx context.Context, in *UpdateGroupContactRequest, out *CreateOrUpdateGroupContactResponse) error
		CreateOrUpdateGroupContact(ctx context.Context, in *CreateOrUpdateGroupContactRequest, out *CreateOrUpdateGroupContactResponse) error
		ShowCustomerContact(ctx context.Context, in *ShowCustomerContactRequest, out *ShowCustomerContactResponse) error
		ShowClinicContact(ctx context.Context, in *ShowClinicContactRequest, out *ShowCustomerContactResponse) error
		DeleteContact(ctx context.Context, in *DeleteContactRequest, out *DeleteContactResponse) error
	}
	type ContactService struct {
		contactService
	}
	h := &contactServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ContactService{h}, opts...))
}

type contactServiceHandler struct {
	ContactServiceHandler
}

func (h *contactServiceHandler) UpdateContact(ctx context.Context, in *UpdateContactRequest, out *Contact) error {
	return h.ContactServiceHandler.UpdateContact(ctx, in, out)
}

func (h *contactServiceHandler) CreateContact(ctx context.Context, in *CreateContactRequest, out *Contact) error {
	return h.ContactServiceHandler.CreateContact(ctx, in, out)
}

func (h *contactServiceHandler) UpdateGroupContact(ctx context.Context, in *UpdateGroupContactRequest, out *CreateOrUpdateGroupContactResponse) error {
	return h.ContactServiceHandler.UpdateGroupContact(ctx, in, out)
}

func (h *contactServiceHandler) CreateOrUpdateGroupContact(ctx context.Context, in *CreateOrUpdateGroupContactRequest, out *CreateOrUpdateGroupContactResponse) error {
	return h.ContactServiceHandler.CreateOrUpdateGroupContact(ctx, in, out)
}

func (h *contactServiceHandler) ShowCustomerContact(ctx context.Context, in *ShowCustomerContactRequest, out *ShowCustomerContactResponse) error {
	return h.ContactServiceHandler.ShowCustomerContact(ctx, in, out)
}

func (h *contactServiceHandler) ShowClinicContact(ctx context.Context, in *ShowClinicContactRequest, out *ShowCustomerContactResponse) error {
	return h.ContactServiceHandler.ShowClinicContact(ctx, in, out)
}

func (h *contactServiceHandler) DeleteContact(ctx context.Context, in *DeleteContactRequest, out *DeleteContactResponse) error {
	return h.ContactServiceHandler.DeleteContact(ctx, in, out)
}
