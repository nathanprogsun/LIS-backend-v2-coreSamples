// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: proto/pubsub.proto

package coresamples_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GeneralEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId                 string            `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventName               string            `protobuf:"bytes,2,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	EventTime               string            `protobuf:"bytes,3,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	EventProvider           string            `protobuf:"bytes,4,opt,name=event_provider,json=eventProvider,proto3" json:"event_provider,omitempty"`
	EventAction             string            `protobuf:"bytes,5,opt,name=event_action,json=eventAction,proto3" json:"event_action,omitempty"`
	EventComment            string            `protobuf:"bytes,6,opt,name=event_comment,json=eventComment,proto3" json:"event_comment,omitempty"`
	TubeTypes               []string          `protobuf:"bytes,8,rep,name=tube_types,json=tubeTypes,proto3" json:"tube_types,omitempty"`
	TestIds                 []string          `protobuf:"bytes,9,rep,name=test_ids,json=testIds,proto3" json:"test_ids,omitempty"`
	Products                []string          `protobuf:"bytes,10,rep,name=products,proto3" json:"products,omitempty"`
	InternalUserId          int32             `protobuf:"varint,11,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
	SampleId                int32             `protobuf:"varint,12,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	AccessionId             string            `protobuf:"bytes,13,opt,name=accession_id,json=accessionId,proto3" json:"accession_id,omitempty"`
	CustomerId              int32             `protobuf:"varint,14,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	PatientId               int32             `protobuf:"varint,15,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	ClinicId                int32             `protobuf:"varint,16,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	OrderId                 int32             `protobuf:"varint,17,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderConfirmationNumber string            `protobuf:"bytes,18,opt,name=order_confirmation_number,json=orderConfirmationNumber,proto3" json:"order_confirmation_number,omitempty"`
	SampleTypes             []string          `protobuf:"bytes,19,rep,name=sample_types,json=sampleTypes,proto3" json:"sample_types,omitempty"`
	AddonColumn             *EventAddonColumn `protobuf:"bytes,20,opt,name=addon_column,json=addonColumn,proto3" json:"addon_column,omitempty"`
	UserId                  int32             `protobuf:"varint,21,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GeneralEvent) Reset() {
	*x = GeneralEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralEvent) ProtoMessage() {}

func (x *GeneralEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralEvent.ProtoReflect.Descriptor instead.
func (*GeneralEvent) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{0}
}

func (x *GeneralEvent) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *GeneralEvent) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *GeneralEvent) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *GeneralEvent) GetEventProvider() string {
	if x != nil {
		return x.EventProvider
	}
	return ""
}

func (x *GeneralEvent) GetEventAction() string {
	if x != nil {
		return x.EventAction
	}
	return ""
}

func (x *GeneralEvent) GetEventComment() string {
	if x != nil {
		return x.EventComment
	}
	return ""
}

func (x *GeneralEvent) GetTubeTypes() []string {
	if x != nil {
		return x.TubeTypes
	}
	return nil
}

func (x *GeneralEvent) GetTestIds() []string {
	if x != nil {
		return x.TestIds
	}
	return nil
}

func (x *GeneralEvent) GetProducts() []string {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *GeneralEvent) GetInternalUserId() int32 {
	if x != nil {
		return x.InternalUserId
	}
	return 0
}

func (x *GeneralEvent) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *GeneralEvent) GetAccessionId() string {
	if x != nil {
		return x.AccessionId
	}
	return ""
}

func (x *GeneralEvent) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *GeneralEvent) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *GeneralEvent) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *GeneralEvent) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *GeneralEvent) GetOrderConfirmationNumber() string {
	if x != nil {
		return x.OrderConfirmationNumber
	}
	return ""
}

func (x *GeneralEvent) GetSampleTypes() []string {
	if x != nil {
		return x.SampleTypes
	}
	return nil
}

func (x *GeneralEvent) GetAddonColumn() *EventAddonColumn {
	if x != nil {
		return x.AddonColumn
	}
	return nil
}

func (x *GeneralEvent) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type EventAddonColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderStatus  string        `protobuf:"bytes,1,opt,name=orderStatus,proto3" json:"orderStatus,omitempty"`
	PatientId    string        `protobuf:"bytes,2,opt,name=patientId,proto3" json:"patientId,omitempty"`
	ClinicId     string        `protobuf:"bytes,3,opt,name=clinicId,proto3" json:"clinicId,omitempty"`
	OrderId      int64         `protobuf:"varint,4,opt,name=orderId,proto3" json:"orderId,omitempty"`
	CustomerId   string        `protobuf:"bytes,5,opt,name=customerId,proto3" json:"customerId,omitempty"`
	Amount       float32       `protobuf:"fixed32,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Status       string        `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	ChargeType   string        `protobuf:"bytes,8,opt,name=charge_type,json=chargeType,proto3" json:"charge_type,omitempty"`
	ChargeTypeId string        `protobuf:"bytes,9,opt,name=charge_type_id,json=chargeTypeId,proto3" json:"charge_type_id,omitempty"`
	AccountType  string        `protobuf:"bytes,10,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
	AccountId    string        `protobuf:"bytes,11,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TubeDetails  []*TubeDetail `protobuf:"bytes,12,rep,name=tube_details,json=tubeDetails,proto3" json:"tube_details,omitempty"`
	ReceivedBy   string        `protobuf:"bytes,13,opt,name=received_by,json=receivedBy,proto3" json:"received_by,omitempty"`
	ReceivedTime string        `protobuf:"bytes,14,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	IsRedraw     bool          `protobuf:"varint,15,opt,name=is_redraw,json=isRedraw,proto3" json:"is_redraw,omitempty"`
	IssueIds     []int64       `protobuf:"varint,16,rep,packed,name=issue_ids,json=issueIds,proto3" json:"issue_ids,omitempty"`
	BetaPrograms []string      `protobuf:"bytes,17,rep,name=beta_programs,json=betaPrograms,proto3" json:"beta_programs,omitempty"`
}

func (x *EventAddonColumn) Reset() {
	*x = EventAddonColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAddonColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAddonColumn) ProtoMessage() {}

func (x *EventAddonColumn) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAddonColumn.ProtoReflect.Descriptor instead.
func (*EventAddonColumn) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{1}
}

func (x *EventAddonColumn) GetOrderStatus() string {
	if x != nil {
		return x.OrderStatus
	}
	return ""
}

func (x *EventAddonColumn) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *EventAddonColumn) GetClinicId() string {
	if x != nil {
		return x.ClinicId
	}
	return ""
}

func (x *EventAddonColumn) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *EventAddonColumn) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *EventAddonColumn) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *EventAddonColumn) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *EventAddonColumn) GetChargeType() string {
	if x != nil {
		return x.ChargeType
	}
	return ""
}

func (x *EventAddonColumn) GetChargeTypeId() string {
	if x != nil {
		return x.ChargeTypeId
	}
	return ""
}

func (x *EventAddonColumn) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *EventAddonColumn) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *EventAddonColumn) GetTubeDetails() []*TubeDetail {
	if x != nil {
		return x.TubeDetails
	}
	return nil
}

func (x *EventAddonColumn) GetReceivedBy() string {
	if x != nil {
		return x.ReceivedBy
	}
	return ""
}

func (x *EventAddonColumn) GetReceivedTime() string {
	if x != nil {
		return x.ReceivedTime
	}
	return ""
}

func (x *EventAddonColumn) GetIsRedraw() bool {
	if x != nil {
		return x.IsRedraw
	}
	return false
}

func (x *EventAddonColumn) GetIssueIds() []int64 {
	if x != nil {
		return x.IssueIds
	}
	return nil
}

func (x *EventAddonColumn) GetBetaPrograms() []string {
	if x != nil {
		return x.BetaPrograms
	}
	return nil
}

type SubscriptionConfirmationEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID     string                                 `protobuf:"bytes,1,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
	Tag           string                                 `protobuf:"bytes,2,opt,name=Tag,proto3" json:"Tag,omitempty"`
	From          string                                 `protobuf:"bytes,3,opt,name=From,proto3" json:"From,omitempty"`
	To            string                                 `protobuf:"bytes,4,opt,name=To,proto3" json:"To,omitempty"`
	Cc            string                                 `protobuf:"bytes,5,opt,name=Cc,proto3" json:"Cc,omitempty"`
	Bcc           string                                 `protobuf:"bytes,6,opt,name=Bcc,proto3" json:"Bcc,omitempty"`
	Subject       string                                 `protobuf:"bytes,7,opt,name=Subject,proto3" json:"Subject,omitempty"`
	TemplateId    int32                                  `protobuf:"varint,8,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`
	TemplateModel *SubscriptionConfirmationEmailTemplate `protobuf:"bytes,9,opt,name=TemplateModel,proto3" json:"TemplateModel,omitempty"`
	Delay         int32                                  `protobuf:"varint,10,opt,name=Delay,proto3" json:"Delay,omitempty"`
	MessageStream string                                 `protobuf:"bytes,11,opt,name=MessageStream,proto3" json:"MessageStream,omitempty"`
	Type          string                                 `protobuf:"bytes,12,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *SubscriptionConfirmationEmail) Reset() {
	*x = SubscriptionConfirmationEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionConfirmationEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionConfirmationEmail) ProtoMessage() {}

func (x *SubscriptionConfirmationEmail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionConfirmationEmail.ProtoReflect.Descriptor instead.
func (*SubscriptionConfirmationEmail) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{2}
}

func (x *SubscriptionConfirmationEmail) GetMessageID() string {
	if x != nil {
		return x.MessageID
	}
	return ""
}

func (x *SubscriptionConfirmationEmail) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *SubscriptionConfirmationEmail) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SubscriptionConfirmationEmail) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SubscriptionConfirmationEmail) GetCc() string {
	if x != nil {
		return x.Cc
	}
	return ""
}

func (x *SubscriptionConfirmationEmail) GetBcc() string {
	if x != nil {
		return x.Bcc
	}
	return ""
}

func (x *SubscriptionConfirmationEmail) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SubscriptionConfirmationEmail) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *SubscriptionConfirmationEmail) GetTemplateModel() *SubscriptionConfirmationEmailTemplate {
	if x != nil {
		return x.TemplateModel
	}
	return nil
}

func (x *SubscriptionConfirmationEmail) GetDelay() int32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *SubscriptionConfirmationEmail) GetMessageStream() string {
	if x != nil {
		return x.MessageStream
	}
	return ""
}

func (x *SubscriptionConfirmationEmail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type SubscriptionConfirmationEmailTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderName   string `protobuf:"bytes,1,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	AccountName    string `protobuf:"bytes,2,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	InvoiceNumber  string `protobuf:"bytes,3,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	PurchasedDate  string `protobuf:"bytes,4,opt,name=purchased_date,json=purchasedDate,proto3" json:"purchased_date,omitempty"`
	ActiveTillDate string `protobuf:"bytes,5,opt,name=active_till_date,json=activeTillDate,proto3" json:"active_till_date,omitempty"`
	RenewalDate    string `protobuf:"bytes,6,opt,name=renewal_date,json=renewalDate,proto3" json:"renewal_date,omitempty"`
	Charge         string `protobuf:"bytes,7,opt,name=charge,proto3" json:"charge,omitempty"`
	Subtotal       string `protobuf:"bytes,8,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Payable        string `protobuf:"bytes,10,opt,name=payable,proto3" json:"payable,omitempty"`
	Payment        string `protobuf:"bytes,11,opt,name=payment,proto3" json:"payment,omitempty"`
	IsHalfYear     string `protobuf:"bytes,12,opt,name=is_half_year,json=isHalfYear,proto3" json:"is_half_year,omitempty"`
	IsAnnual       string `protobuf:"bytes,13,opt,name=is_annual,json=isAnnual,proto3" json:"is_annual,omitempty"`
	IsMonthly      string `protobuf:"bytes,14,opt,name=is_monthly,json=isMonthly,proto3" json:"is_monthly,omitempty"`
}

func (x *SubscriptionConfirmationEmailTemplate) Reset() {
	*x = SubscriptionConfirmationEmailTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionConfirmationEmailTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionConfirmationEmailTemplate) ProtoMessage() {}

func (x *SubscriptionConfirmationEmailTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionConfirmationEmailTemplate.ProtoReflect.Descriptor instead.
func (*SubscriptionConfirmationEmailTemplate) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{3}
}

func (x *SubscriptionConfirmationEmailTemplate) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *SubscriptionConfirmationEmailTemplate) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *SubscriptionConfirmationEmailTemplate) GetInvoiceNumber() string {
	if x != nil {
		return x.InvoiceNumber
	}
	return ""
}

func (x *SubscriptionConfirmationEmailTemplate) GetPurchasedDate() string {
	if x != nil {
		return x.PurchasedDate
	}
	return ""
}

func (x *SubscriptionConfirmationEmailTemplate) GetActiveTillDate() string {
	if x != nil {
		return x.ActiveTillDate
	}
	return ""
}

func (x *SubscriptionConfirmationEmailTemplate) GetRenewalDate() string {
	if x != nil {
		return x.RenewalDate
	}
	return ""
}

func (x *SubscriptionConfirmationEmailTemplate) GetCharge() string {
	if x != nil {
		return x.Charge
	}
	return ""
}

func (x *SubscriptionConfirmationEmailTemplate) GetSubtotal() string {
	if x != nil {
		return x.Subtotal
	}
	return ""
}

func (x *SubscriptionConfirmationEmailTemplate) GetPayable() string {
	if x != nil {
		return x.Payable
	}
	return ""
}

func (x *SubscriptionConfirmationEmailTemplate) GetPayment() string {
	if x != nil {
		return x.Payment
	}
	return ""
}

func (x *SubscriptionConfirmationEmailTemplate) GetIsHalfYear() string {
	if x != nil {
		return x.IsHalfYear
	}
	return ""
}

func (x *SubscriptionConfirmationEmailTemplate) GetIsAnnual() string {
	if x != nil {
		return x.IsAnnual
	}
	return ""
}

func (x *SubscriptionConfirmationEmailTemplate) GetIsMonthly() string {
	if x != nil {
		return x.IsMonthly
	}
	return ""
}

type SubscriptionCancellationEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID     string                                 `protobuf:"bytes,1,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
	Tag           string                                 `protobuf:"bytes,2,opt,name=Tag,proto3" json:"Tag,omitempty"`
	From          string                                 `protobuf:"bytes,3,opt,name=From,proto3" json:"From,omitempty"`
	To            string                                 `protobuf:"bytes,4,opt,name=To,proto3" json:"To,omitempty"`
	Cc            string                                 `protobuf:"bytes,5,opt,name=Cc,proto3" json:"Cc,omitempty"`
	Bcc           string                                 `protobuf:"bytes,6,opt,name=Bcc,proto3" json:"Bcc,omitempty"`
	Subject       string                                 `protobuf:"bytes,7,opt,name=Subject,proto3" json:"Subject,omitempty"`
	TemplateId    int32                                  `protobuf:"varint,8,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`
	TemplateModel *SubscriptionCancellationEmailTemplate `protobuf:"bytes,9,opt,name=TemplateModel,proto3" json:"TemplateModel,omitempty"`
	Delay         int32                                  `protobuf:"varint,10,opt,name=Delay,proto3" json:"Delay,omitempty"`
	MessageStream string                                 `protobuf:"bytes,11,opt,name=MessageStream,proto3" json:"MessageStream,omitempty"`
	Type          string                                 `protobuf:"bytes,12,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *SubscriptionCancellationEmail) Reset() {
	*x = SubscriptionCancellationEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionCancellationEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionCancellationEmail) ProtoMessage() {}

func (x *SubscriptionCancellationEmail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionCancellationEmail.ProtoReflect.Descriptor instead.
func (*SubscriptionCancellationEmail) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{4}
}

func (x *SubscriptionCancellationEmail) GetMessageID() string {
	if x != nil {
		return x.MessageID
	}
	return ""
}

func (x *SubscriptionCancellationEmail) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *SubscriptionCancellationEmail) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SubscriptionCancellationEmail) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SubscriptionCancellationEmail) GetCc() string {
	if x != nil {
		return x.Cc
	}
	return ""
}

func (x *SubscriptionCancellationEmail) GetBcc() string {
	if x != nil {
		return x.Bcc
	}
	return ""
}

func (x *SubscriptionCancellationEmail) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SubscriptionCancellationEmail) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *SubscriptionCancellationEmail) GetTemplateModel() *SubscriptionCancellationEmailTemplate {
	if x != nil {
		return x.TemplateModel
	}
	return nil
}

func (x *SubscriptionCancellationEmail) GetDelay() int32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *SubscriptionCancellationEmail) GetMessageStream() string {
	if x != nil {
		return x.MessageStream
	}
	return ""
}

func (x *SubscriptionCancellationEmail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type SubscriptionCancellationEmailTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderName string `protobuf:"bytes,1,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	CancelDate   string `protobuf:"bytes,2,opt,name=cancel_date,json=cancelDate,proto3" json:"cancel_date,omitempty"`
}

func (x *SubscriptionCancellationEmailTemplate) Reset() {
	*x = SubscriptionCancellationEmailTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionCancellationEmailTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionCancellationEmailTemplate) ProtoMessage() {}

func (x *SubscriptionCancellationEmailTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionCancellationEmailTemplate.ProtoReflect.Descriptor instead.
func (*SubscriptionCancellationEmailTemplate) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{5}
}

func (x *SubscriptionCancellationEmailTemplate) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *SubscriptionCancellationEmailTemplate) GetCancelDate() string {
	if x != nil {
		return x.CancelDate
	}
	return ""
}

type PaymentUpdateEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID     string                      `protobuf:"bytes,1,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
	Tag           string                      `protobuf:"bytes,2,opt,name=Tag,proto3" json:"Tag,omitempty"`
	From          string                      `protobuf:"bytes,3,opt,name=From,proto3" json:"From,omitempty"`
	To            string                      `protobuf:"bytes,4,opt,name=To,proto3" json:"To,omitempty"`
	Cc            string                      `protobuf:"bytes,5,opt,name=Cc,proto3" json:"Cc,omitempty"`
	Bcc           string                      `protobuf:"bytes,6,opt,name=Bcc,proto3" json:"Bcc,omitempty"`
	Subject       string                      `protobuf:"bytes,7,opt,name=Subject,proto3" json:"Subject,omitempty"`
	TemplateId    int32                       `protobuf:"varint,8,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`
	TemplateModel *PaymentUpdateEmailTemplate `protobuf:"bytes,9,opt,name=TemplateModel,proto3" json:"TemplateModel,omitempty"`
	Delay         int32                       `protobuf:"varint,10,opt,name=Delay,proto3" json:"Delay,omitempty"`
	MessageStream string                      `protobuf:"bytes,11,opt,name=MessageStream,proto3" json:"MessageStream,omitempty"`
	Type          string                      `protobuf:"bytes,12,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *PaymentUpdateEmail) Reset() {
	*x = PaymentUpdateEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentUpdateEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentUpdateEmail) ProtoMessage() {}

func (x *PaymentUpdateEmail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentUpdateEmail.ProtoReflect.Descriptor instead.
func (*PaymentUpdateEmail) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{6}
}

func (x *PaymentUpdateEmail) GetMessageID() string {
	if x != nil {
		return x.MessageID
	}
	return ""
}

func (x *PaymentUpdateEmail) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *PaymentUpdateEmail) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *PaymentUpdateEmail) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *PaymentUpdateEmail) GetCc() string {
	if x != nil {
		return x.Cc
	}
	return ""
}

func (x *PaymentUpdateEmail) GetBcc() string {
	if x != nil {
		return x.Bcc
	}
	return ""
}

func (x *PaymentUpdateEmail) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *PaymentUpdateEmail) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *PaymentUpdateEmail) GetTemplateModel() *PaymentUpdateEmailTemplate {
	if x != nil {
		return x.TemplateModel
	}
	return nil
}

func (x *PaymentUpdateEmail) GetDelay() int32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *PaymentUpdateEmail) GetMessageStream() string {
	if x != nil {
		return x.MessageStream
	}
	return ""
}

func (x *PaymentUpdateEmail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type PaymentUpdateEmailTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderName string `protobuf:"bytes,1,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
}

func (x *PaymentUpdateEmailTemplate) Reset() {
	*x = PaymentUpdateEmailTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentUpdateEmailTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentUpdateEmailTemplate) ProtoMessage() {}

func (x *PaymentUpdateEmailTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentUpdateEmailTemplate.ProtoReflect.Descriptor instead.
func (*PaymentUpdateEmailTemplate) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{7}
}

func (x *PaymentUpdateEmailTemplate) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

type PostOrderEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderClinicId           int32                    `protobuf:"varint,1,opt,name=orderClinicId,proto3" json:"orderClinicId,omitempty"`
	ClinicId                int32                    `protobuf:"varint,2,opt,name=clinicId,proto3" json:"clinicId,omitempty"`
	OrderConfirmationNumber string                   `protobuf:"bytes,3,opt,name=orderConfirmationNumber,proto3" json:"orderConfirmationNumber,omitempty"`
	SampleId                string                   `protobuf:"bytes,4,opt,name=sampleId,proto3" json:"sampleId,omitempty"`
	CustomerId              string                   `protobuf:"bytes,5,opt,name=customerId,proto3" json:"customerId,omitempty"`
	TubeInfo                *PostOrderEvent_TubeInfo `protobuf:"bytes,6,opt,name=tubeInfo,proto3" json:"tubeInfo,omitempty"`
	OrderContents           *OrderContents           `protobuf:"bytes,7,opt,name=orderContents,proto3" json:"orderContents,omitempty"`
	OrderInfo               *OrderInfo               `protobuf:"bytes,8,opt,name=orderInfo,proto3" json:"orderInfo,omitempty"`
}

func (x *PostOrderEvent) Reset() {
	*x = PostOrderEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostOrderEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostOrderEvent) ProtoMessage() {}

func (x *PostOrderEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostOrderEvent.ProtoReflect.Descriptor instead.
func (*PostOrderEvent) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{8}
}

func (x *PostOrderEvent) GetOrderClinicId() int32 {
	if x != nil {
		return x.OrderClinicId
	}
	return 0
}

func (x *PostOrderEvent) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *PostOrderEvent) GetOrderConfirmationNumber() string {
	if x != nil {
		return x.OrderConfirmationNumber
	}
	return ""
}

func (x *PostOrderEvent) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *PostOrderEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *PostOrderEvent) GetTubeInfo() *PostOrderEvent_TubeInfo {
	if x != nil {
		return x.TubeInfo
	}
	return nil
}

func (x *PostOrderEvent) GetOrderContents() *OrderContents {
	if x != nil {
		return x.OrderContents
	}
	return nil
}

func (x *PostOrderEvent) GetOrderInfo() *OrderInfo {
	if x != nil {
		return x.OrderInfo
	}
	return nil
}

type OrderContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomPanels   []int32           `protobuf:"varint,1,rep,packed,name=customPanels,proto3" json:"customPanels,omitempty"`
	PaymentChoice  map[string]string `protobuf:"bytes,2,rep,name=paymentChoice,proto3" json:"paymentChoice,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tests          []int32           `protobuf:"varint,3,rep,packed,name=tests,proto3" json:"tests,omitempty"`
	TestGroups     []int32           `protobuf:"varint,4,rep,packed,name=testGroups,proto3" json:"testGroups,omitempty"`
	SpecialTests   []*SpecialTest    `protobuf:"bytes,5,rep,name=specialTests,proto3" json:"specialTests,omitempty"`
	DiscountPanels []int32           `protobuf:"varint,6,rep,packed,name=discountPanels,proto3" json:"discountPanels,omitempty"`
}

func (x *OrderContents) Reset() {
	*x = OrderContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderContents) ProtoMessage() {}

func (x *OrderContents) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderContents.ProtoReflect.Descriptor instead.
func (*OrderContents) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{9}
}

func (x *OrderContents) GetCustomPanels() []int32 {
	if x != nil {
		return x.CustomPanels
	}
	return nil
}

func (x *OrderContents) GetPaymentChoice() map[string]string {
	if x != nil {
		return x.PaymentChoice
	}
	return nil
}

func (x *OrderContents) GetTests() []int32 {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *OrderContents) GetTestGroups() []int32 {
	if x != nil {
		return x.TestGroups
	}
	return nil
}

func (x *OrderContents) GetSpecialTests() []*SpecialTest {
	if x != nil {
		return x.SpecialTests
	}
	return nil
}

func (x *OrderContents) GetDiscountPanels() []int32 {
	if x != nil {
		return x.DiscountPanels
	}
	return nil
}

type OrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatientId                 int32        `protobuf:"varint,1,opt,name=patientId,proto3" json:"patientId,omitempty"`
	Total                     float32      `protobuf:"fixed32,2,opt,name=total,proto3" json:"total,omitempty"`
	ChargeMethod              string       `protobuf:"bytes,3,opt,name=chargeMethod,proto3" json:"chargeMethod,omitempty"`
	OriginalPrice             float32      `protobuf:"fixed32,4,opt,name=original_price,json=originalPrice,proto3" json:"original_price,omitempty"`
	ActualPrice               float32      `protobuf:"fixed32,5,opt,name=actual_price,json=actualPrice,proto3" json:"actual_price,omitempty"`
	DiscountAmount            float32      `protobuf:"fixed32,6,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	Email                     string       `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	CellPhone                 string       `protobuf:"bytes,8,opt,name=cell_phone,json=cellPhone,proto3" json:"cell_phone,omitempty"`
	SendText                  bool         `protobuf:"varint,9,opt,name=send_text,json=sendText,proto3" json:"send_text,omitempty"`
	BloodKitDeliveryMethod    string       `protobuf:"bytes,10,opt,name=bloodKitDeliveryMethod,proto3" json:"bloodKitDeliveryMethod,omitempty"`
	NonBloodKitDeliveryMethod string       `protobuf:"bytes,11,opt,name=nonBloodKitDeliveryMethod,proto3" json:"nonBloodKitDeliveryMethod,omitempty"`
	DryIceKitDeliveryMethod   string       `protobuf:"bytes,12,opt,name=dryIceKitDeliveryMethod,proto3" json:"dryIceKitDeliveryMethod,omitempty"`
	SendDate                  string       `protobuf:"bytes,13,opt,name=send_date,json=sendDate,proto3" json:"send_date,omitempty"`
	NoteToPatient             string       `protobuf:"bytes,14,opt,name=note_to_patient,json=noteToPatient,proto3" json:"note_to_patient,omitempty"`
	PaymentId                 string       `protobuf:"bytes,15,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	Dbs                       bool         `protobuf:"varint,16,opt,name=dbs,proto3" json:"dbs,omitempty"`
	Coupon                    string       `protobuf:"bytes,17,opt,name=coupon,proto3" json:"coupon,omitempty"`
	InternationalShippingFee  string       `protobuf:"bytes,18,opt,name=international_shipping_fee,json=internationalShippingFee,proto3" json:"international_shipping_fee,omitempty"`
	OrderItems                []*OrderItem `protobuf:"bytes,19,rep,name=orderItems,proto3" json:"orderItems,omitempty"`
	JulienBarcode             uint64       `protobuf:"varint,20,opt,name=julienBarcode,proto3" json:"julienBarcode,omitempty"`
}

func (x *OrderInfo) Reset() {
	*x = OrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderInfo) ProtoMessage() {}

func (x *OrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderInfo.ProtoReflect.Descriptor instead.
func (*OrderInfo) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{10}
}

func (x *OrderInfo) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *OrderInfo) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OrderInfo) GetChargeMethod() string {
	if x != nil {
		return x.ChargeMethod
	}
	return ""
}

func (x *OrderInfo) GetOriginalPrice() float32 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *OrderInfo) GetActualPrice() float32 {
	if x != nil {
		return x.ActualPrice
	}
	return 0
}

func (x *OrderInfo) GetDiscountAmount() float32 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *OrderInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *OrderInfo) GetCellPhone() string {
	if x != nil {
		return x.CellPhone
	}
	return ""
}

func (x *OrderInfo) GetSendText() bool {
	if x != nil {
		return x.SendText
	}
	return false
}

func (x *OrderInfo) GetBloodKitDeliveryMethod() string {
	if x != nil {
		return x.BloodKitDeliveryMethod
	}
	return ""
}

func (x *OrderInfo) GetNonBloodKitDeliveryMethod() string {
	if x != nil {
		return x.NonBloodKitDeliveryMethod
	}
	return ""
}

func (x *OrderInfo) GetDryIceKitDeliveryMethod() string {
	if x != nil {
		return x.DryIceKitDeliveryMethod
	}
	return ""
}

func (x *OrderInfo) GetSendDate() string {
	if x != nil {
		return x.SendDate
	}
	return ""
}

func (x *OrderInfo) GetNoteToPatient() string {
	if x != nil {
		return x.NoteToPatient
	}
	return ""
}

func (x *OrderInfo) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *OrderInfo) GetDbs() bool {
	if x != nil {
		return x.Dbs
	}
	return false
}

func (x *OrderInfo) GetCoupon() string {
	if x != nil {
		return x.Coupon
	}
	return ""
}

func (x *OrderInfo) GetInternationalShippingFee() string {
	if x != nil {
		return x.InternationalShippingFee
	}
	return ""
}

func (x *OrderInfo) GetOrderItems() []*OrderItem {
	if x != nil {
		return x.OrderItems
	}
	return nil
}

func (x *OrderInfo) GetJulienBarcode() uint64 {
	if x != nil {
		return x.JulienBarcode
	}
	return 0
}

type SpecialTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SplTestId    int32 `protobuf:"varint,1,opt,name=splTestId,proto3" json:"splTestId,omitempty"`
	SelPackageId int32 `protobuf:"varint,2,opt,name=selPackageId,proto3" json:"selPackageId,omitempty"`
}

func (x *SpecialTest) Reset() {
	*x = SpecialTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialTest) ProtoMessage() {}

func (x *SpecialTest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialTest.ProtoReflect.Descriptor instead.
func (*SpecialTest) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{11}
}

func (x *SpecialTest) GetSplTestId() int32 {
	if x != nil {
		return x.SplTestId
	}
	return 0
}

func (x *SpecialTest) GetSelPackageId() int32 {
	if x != nil {
		return x.SelPackageId
	}
	return 0
}

type OrderItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId        int32   `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ItemType      string  `protobuf:"bytes,2,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`
	OriginalPrice float32 `protobuf:"fixed32,3,opt,name=original_price,json=originalPrice,proto3" json:"original_price,omitempty"`
	Total         float32 `protobuf:"fixed32,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *OrderItem) Reset() {
	*x = OrderItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderItem) ProtoMessage() {}

func (x *OrderItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderItem.ProtoReflect.Descriptor instead.
func (*OrderItem) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{12}
}

func (x *OrderItem) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *OrderItem) GetItemType() string {
	if x != nil {
		return x.ItemType
	}
	return ""
}

func (x *OrderItem) GetOriginalPrice() float32 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *OrderItem) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TubeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TubeType       string `protobuf:"bytes,1,opt,name=tube_type,json=tubeType,proto3" json:"tube_type,omitempty"`
	CollectionTime string `protobuf:"bytes,2,opt,name=collection_time,json=collectionTime,proto3" json:"collection_time,omitempty"`
	ReceiveCount   int32  `protobuf:"varint,3,opt,name=receive_count,json=receiveCount,proto3" json:"receive_count,omitempty"`
}

func (x *TubeDetail) Reset() {
	*x = TubeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TubeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TubeDetail) ProtoMessage() {}

func (x *TubeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TubeDetail.ProtoReflect.Descriptor instead.
func (*TubeDetail) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{13}
}

func (x *TubeDetail) GetTubeType() string {
	if x != nil {
		return x.TubeType
	}
	return ""
}

func (x *TubeDetail) GetCollectionTime() string {
	if x != nil {
		return x.CollectionTime
	}
	return ""
}

func (x *TubeDetail) GetReceiveCount() int32 {
	if x != nil {
		return x.ReceiveCount
	}
	return 0
}

type OrderMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId         int32   `protobuf:"varint,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	Action           string  `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	TestId           []int32 `protobuf:"varint,3,rep,packed,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	ReceiveTime      string  `protobuf:"bytes,4,opt,name=receive_time,json=receiveTime,proto3" json:"receive_time,omitempty"`
	CollectionTime   string  `protobuf:"bytes,5,opt,name=collection_time,json=collectionTime,proto3" json:"collection_time,omitempty"`
	IsRerun          bool    `protobuf:"varint,6,opt,name=is_rerun,json=isRerun,proto3" json:"is_rerun,omitempty"`
	IsRedraw         bool    `protobuf:"varint,7,opt,name=is_redraw,json=isRedraw,proto3" json:"is_redraw,omitempty"`
	IsLabDirectOrder bool    `protobuf:"varint,8,opt,name=is_lab_direct_order,json=isLabDirectOrder,proto3" json:"is_lab_direct_order,omitempty"`
	Destination      string  `protobuf:"bytes,9,opt,name=destination,proto3" json:"destination,omitempty"`
	IsAddon          bool    `protobuf:"varint,10,opt,name=is_addon,json=isAddon,proto3" json:"is_addon,omitempty"`
}

func (x *OrderMessage) Reset() {
	*x = OrderMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderMessage) ProtoMessage() {}

func (x *OrderMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderMessage.ProtoReflect.Descriptor instead.
func (*OrderMessage) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{14}
}

func (x *OrderMessage) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *OrderMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *OrderMessage) GetTestId() []int32 {
	if x != nil {
		return x.TestId
	}
	return nil
}

func (x *OrderMessage) GetReceiveTime() string {
	if x != nil {
		return x.ReceiveTime
	}
	return ""
}

func (x *OrderMessage) GetCollectionTime() string {
	if x != nil {
		return x.CollectionTime
	}
	return ""
}

func (x *OrderMessage) GetIsRerun() bool {
	if x != nil {
		return x.IsRerun
	}
	return false
}

func (x *OrderMessage) GetIsRedraw() bool {
	if x != nil {
		return x.IsRedraw
	}
	return false
}

func (x *OrderMessage) GetIsLabDirectOrder() bool {
	if x != nil {
		return x.IsLabDirectOrder
	}
	return false
}

func (x *OrderMessage) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *OrderMessage) GetIsAddon() bool {
	if x != nil {
		return x.IsAddon
	}
	return false
}

type CancelOrderEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId    int64 `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	SampleId   int32 `protobuf:"varint,2,opt,name=sampleId,proto3" json:"sampleId,omitempty"`
	PatientId  int32 `protobuf:"varint,3,opt,name=patientId,proto3" json:"patientId,omitempty"`
	CustomerId int32 `protobuf:"varint,4,opt,name=customerId,proto3" json:"customerId,omitempty"`
}

func (x *CancelOrderEvent) Reset() {
	*x = CancelOrderEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderEvent) ProtoMessage() {}

func (x *CancelOrderEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderEvent.ProtoReflect.Descriptor instead.
func (*CancelOrderEvent) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{15}
}

func (x *CancelOrderEvent) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *CancelOrderEvent) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *CancelOrderEvent) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *CancelOrderEvent) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

type ClientTransactionShippingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                  int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	PoNumber               int32  `protobuf:"varint,2,opt,name=po_number,json=poNumber,proto3" json:"po_number,omitempty"`
	TrackingId             string `protobuf:"bytes,3,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	TrackIdType            string `protobuf:"bytes,4,opt,name=track_id_type,json=trackIdType,proto3" json:"track_id_type,omitempty"`
	ShippingMethod         string `protobuf:"bytes,5,opt,name=shipping_method,json=shippingMethod,proto3" json:"shipping_method,omitempty"`
	CurrentStatus          string `protobuf:"bytes,6,opt,name=current_status,json=currentStatus,proto3" json:"current_status,omitempty"`
	LastUpdateTime         string `protobuf:"bytes,7,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	KitStatus              string `protobuf:"bytes,8,opt,name=kit_status,json=kitStatus,proto3" json:"kit_status,omitempty"`
	EstimatedDeliveryDate  string `protobuf:"bytes,9,opt,name=estimated_delivery_date,json=estimatedDeliveryDate,proto3" json:"estimated_delivery_date,omitempty"`
	DisplayEstDeliveryDate string `protobuf:"bytes,10,opt,name=display_est_delivery_date,json=displayEstDeliveryDate,proto3" json:"display_est_delivery_date,omitempty"`
	FedexDeliveryDate      string `protobuf:"bytes,11,opt,name=fedex_delivery_date,json=fedexDeliveryDate,proto3" json:"fedex_delivery_date,omitempty"`
	BoxReceiveTime         string `protobuf:"bytes,12,opt,name=box_receive_time,json=boxReceiveTime,proto3" json:"box_receive_time,omitempty"`
	BoxReceiveBy           string `protobuf:"bytes,13,opt,name=box_receive_by,json=boxReceiveBy,proto3" json:"box_receive_by,omitempty"`
	TrackIdDeleteTime      string `protobuf:"bytes,14,opt,name=track_id_delete_time,json=trackIdDeleteTime,proto3" json:"track_id_delete_time,omitempty"`
	TrackIdDeleteBy        string `protobuf:"bytes,15,opt,name=track_id_delete_by,json=trackIdDeleteBy,proto3" json:"track_id_delete_by,omitempty"`
	TrackIdDeleteReason    string `protobuf:"bytes,16,opt,name=track_id_delete_reason,json=trackIdDeleteReason,proto3" json:"track_id_delete_reason,omitempty"`
	ClientId               string `protobuf:"bytes,17,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	CustomerName           string `protobuf:"bytes,18,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	CustomerPracticeName   string `protobuf:"bytes,19,opt,name=customer_practice_name,json=customerPracticeName,proto3" json:"customer_practice_name,omitempty"`
	CustomerPhoneNumber    string `protobuf:"bytes,20,opt,name=customer_phone_number,json=customerPhoneNumber,proto3" json:"customer_phone_number,omitempty"`
	CustomerStreet         string `protobuf:"bytes,21,opt,name=customer_street,json=customerStreet,proto3" json:"customer_street,omitempty"`
	CustomerCity           string `protobuf:"bytes,22,opt,name=customer_city,json=customerCity,proto3" json:"customer_city,omitempty"`
	CustomerState          string `protobuf:"bytes,23,opt,name=customer_state,json=customerState,proto3" json:"customer_state,omitempty"`
	CustomerZipcode        string `protobuf:"bytes,24,opt,name=customer_zipcode,json=customerZipcode,proto3" json:"customer_zipcode,omitempty"`
	CustomerCountry        string `protobuf:"bytes,25,opt,name=customer_country,json=customerCountry,proto3" json:"customer_country,omitempty"`
	Comment                string `protobuf:"bytes,26,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *ClientTransactionShippingMessage) Reset() {
	*x = ClientTransactionShippingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientTransactionShippingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientTransactionShippingMessage) ProtoMessage() {}

func (x *ClientTransactionShippingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientTransactionShippingMessage.ProtoReflect.Descriptor instead.
func (*ClientTransactionShippingMessage) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{16}
}

func (x *ClientTransactionShippingMessage) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ClientTransactionShippingMessage) GetPoNumber() int32 {
	if x != nil {
		return x.PoNumber
	}
	return 0
}

func (x *ClientTransactionShippingMessage) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetTrackIdType() string {
	if x != nil {
		return x.TrackIdType
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetShippingMethod() string {
	if x != nil {
		return x.ShippingMethod
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetCurrentStatus() string {
	if x != nil {
		return x.CurrentStatus
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetLastUpdateTime() string {
	if x != nil {
		return x.LastUpdateTime
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetKitStatus() string {
	if x != nil {
		return x.KitStatus
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetEstimatedDeliveryDate() string {
	if x != nil {
		return x.EstimatedDeliveryDate
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetDisplayEstDeliveryDate() string {
	if x != nil {
		return x.DisplayEstDeliveryDate
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetFedexDeliveryDate() string {
	if x != nil {
		return x.FedexDeliveryDate
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetBoxReceiveTime() string {
	if x != nil {
		return x.BoxReceiveTime
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetBoxReceiveBy() string {
	if x != nil {
		return x.BoxReceiveBy
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetTrackIdDeleteTime() string {
	if x != nil {
		return x.TrackIdDeleteTime
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetTrackIdDeleteBy() string {
	if x != nil {
		return x.TrackIdDeleteBy
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetTrackIdDeleteReason() string {
	if x != nil {
		return x.TrackIdDeleteReason
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetCustomerPracticeName() string {
	if x != nil {
		return x.CustomerPracticeName
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetCustomerPhoneNumber() string {
	if x != nil {
		return x.CustomerPhoneNumber
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetCustomerStreet() string {
	if x != nil {
		return x.CustomerStreet
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetCustomerCity() string {
	if x != nil {
		return x.CustomerCity
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetCustomerState() string {
	if x != nil {
		return x.CustomerState
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetCustomerZipcode() string {
	if x != nil {
		return x.CustomerZipcode
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetCustomerCountry() string {
	if x != nil {
		return x.CustomerCountry
	}
	return ""
}

func (x *ClientTransactionShippingMessage) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type ClientTransactionShippingOldMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                  *int32  `protobuf:"varint,1,opt,name=index,proto3,oneof" json:"index,omitempty"`
	PoNumber               *int32  `protobuf:"varint,2,opt,name=po_number,json=poNumber,proto3,oneof" json:"po_number,omitempty"`
	TrackingId             *string `protobuf:"bytes,3,opt,name=tracking_id,json=trackingId,proto3,oneof" json:"tracking_id,omitempty"`
	TrackIdType            *string `protobuf:"bytes,4,opt,name=track_id_type,json=trackIdType,proto3,oneof" json:"track_id_type,omitempty"`
	ShippingMethod         *string `protobuf:"bytes,5,opt,name=shipping_method,json=shippingMethod,proto3,oneof" json:"shipping_method,omitempty"`
	CurrentStatus          *string `protobuf:"bytes,6,opt,name=current_status,json=currentStatus,proto3,oneof" json:"current_status,omitempty"`
	LastUpdateTime         *string `protobuf:"bytes,7,opt,name=last_update_time,json=lastUpdateTime,proto3,oneof" json:"last_update_time,omitempty"`
	KitStatus              *string `protobuf:"bytes,8,opt,name=kit_status,json=kitStatus,proto3,oneof" json:"kit_status,omitempty"`
	EstimatedDeliveryDate  *string `protobuf:"bytes,9,opt,name=estimated_delivery_date,json=estimatedDeliveryDate,proto3,oneof" json:"estimated_delivery_date,omitempty"`
	DisplayEstDeliveryDate *string `protobuf:"bytes,10,opt,name=display_est_delivery_date,json=displayEstDeliveryDate,proto3,oneof" json:"display_est_delivery_date,omitempty"`
	FedexDeliveryDate      *string `protobuf:"bytes,11,opt,name=fedex_delivery_date,json=fedexDeliveryDate,proto3,oneof" json:"fedex_delivery_date,omitempty"`
	BoxReceiveTime         *string `protobuf:"bytes,12,opt,name=box_receive_time,json=boxReceiveTime,proto3,oneof" json:"box_receive_time,omitempty"`
	BoxReceiveBy           *string `protobuf:"bytes,13,opt,name=box_receive_by,json=boxReceiveBy,proto3,oneof" json:"box_receive_by,omitempty"`
	TrackIdDeleteTime      *string `protobuf:"bytes,14,opt,name=track_id_delete_time,json=trackIdDeleteTime,proto3,oneof" json:"track_id_delete_time,omitempty"`
	TrackIdDeleteBy        *string `protobuf:"bytes,15,opt,name=track_id_delete_by,json=trackIdDeleteBy,proto3,oneof" json:"track_id_delete_by,omitempty"`
	TrackIdDeleteReason    *string `protobuf:"bytes,16,opt,name=track_id_delete_reason,json=trackIdDeleteReason,proto3,oneof" json:"track_id_delete_reason,omitempty"`
	ClientId               *string `protobuf:"bytes,17,opt,name=client_id,json=clientId,proto3,oneof" json:"client_id,omitempty"`
	CustomerName           *string `protobuf:"bytes,18,opt,name=customer_name,json=customerName,proto3,oneof" json:"customer_name,omitempty"`
	CustomerPracticeName   *string `protobuf:"bytes,19,opt,name=customer_practice_name,json=customerPracticeName,proto3,oneof" json:"customer_practice_name,omitempty"`
	CustomerPhoneNumber    *string `protobuf:"bytes,20,opt,name=customer_phone_number,json=customerPhoneNumber,proto3,oneof" json:"customer_phone_number,omitempty"`
	CustomerStreet         *string `protobuf:"bytes,21,opt,name=customer_street,json=customerStreet,proto3,oneof" json:"customer_street,omitempty"`
	CustomerCity           *string `protobuf:"bytes,22,opt,name=customer_city,json=customerCity,proto3,oneof" json:"customer_city,omitempty"`
	CustomerState          *string `protobuf:"bytes,23,opt,name=customer_state,json=customerState,proto3,oneof" json:"customer_state,omitempty"`
	CustomerZipcode        *string `protobuf:"bytes,24,opt,name=customer_zipcode,json=customerZipcode,proto3,oneof" json:"customer_zipcode,omitempty"`
	CustomerCountry        *string `protobuf:"bytes,25,opt,name=customer_country,json=customerCountry,proto3,oneof" json:"customer_country,omitempty"`
	Comment                *string `protobuf:"bytes,26,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
}

func (x *ClientTransactionShippingOldMessage) Reset() {
	*x = ClientTransactionShippingOldMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientTransactionShippingOldMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientTransactionShippingOldMessage) ProtoMessage() {}

func (x *ClientTransactionShippingOldMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientTransactionShippingOldMessage.ProtoReflect.Descriptor instead.
func (*ClientTransactionShippingOldMessage) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{17}
}

func (x *ClientTransactionShippingOldMessage) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *ClientTransactionShippingOldMessage) GetPoNumber() int32 {
	if x != nil && x.PoNumber != nil {
		return *x.PoNumber
	}
	return 0
}

func (x *ClientTransactionShippingOldMessage) GetTrackingId() string {
	if x != nil && x.TrackingId != nil {
		return *x.TrackingId
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetTrackIdType() string {
	if x != nil && x.TrackIdType != nil {
		return *x.TrackIdType
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetShippingMethod() string {
	if x != nil && x.ShippingMethod != nil {
		return *x.ShippingMethod
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetCurrentStatus() string {
	if x != nil && x.CurrentStatus != nil {
		return *x.CurrentStatus
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetLastUpdateTime() string {
	if x != nil && x.LastUpdateTime != nil {
		return *x.LastUpdateTime
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetKitStatus() string {
	if x != nil && x.KitStatus != nil {
		return *x.KitStatus
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetEstimatedDeliveryDate() string {
	if x != nil && x.EstimatedDeliveryDate != nil {
		return *x.EstimatedDeliveryDate
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetDisplayEstDeliveryDate() string {
	if x != nil && x.DisplayEstDeliveryDate != nil {
		return *x.DisplayEstDeliveryDate
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetFedexDeliveryDate() string {
	if x != nil && x.FedexDeliveryDate != nil {
		return *x.FedexDeliveryDate
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetBoxReceiveTime() string {
	if x != nil && x.BoxReceiveTime != nil {
		return *x.BoxReceiveTime
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetBoxReceiveBy() string {
	if x != nil && x.BoxReceiveBy != nil {
		return *x.BoxReceiveBy
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetTrackIdDeleteTime() string {
	if x != nil && x.TrackIdDeleteTime != nil {
		return *x.TrackIdDeleteTime
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetTrackIdDeleteBy() string {
	if x != nil && x.TrackIdDeleteBy != nil {
		return *x.TrackIdDeleteBy
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetTrackIdDeleteReason() string {
	if x != nil && x.TrackIdDeleteReason != nil {
		return *x.TrackIdDeleteReason
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetCustomerName() string {
	if x != nil && x.CustomerName != nil {
		return *x.CustomerName
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetCustomerPracticeName() string {
	if x != nil && x.CustomerPracticeName != nil {
		return *x.CustomerPracticeName
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetCustomerPhoneNumber() string {
	if x != nil && x.CustomerPhoneNumber != nil {
		return *x.CustomerPhoneNumber
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetCustomerStreet() string {
	if x != nil && x.CustomerStreet != nil {
		return *x.CustomerStreet
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetCustomerCity() string {
	if x != nil && x.CustomerCity != nil {
		return *x.CustomerCity
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetCustomerState() string {
	if x != nil && x.CustomerState != nil {
		return *x.CustomerState
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetCustomerZipcode() string {
	if x != nil && x.CustomerZipcode != nil {
		return *x.CustomerZipcode
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetCustomerCountry() string {
	if x != nil && x.CustomerCountry != nil {
		return *x.CustomerCountry
	}
	return ""
}

func (x *ClientTransactionShippingOldMessage) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type ClientTransactionShippingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ClientTransactionShippingMessage    `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Old  *ClientTransactionShippingOldMessage `protobuf:"bytes,2,opt,name=old,proto3" json:"old,omitempty"`
	Type string                               `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ClientTransactionShippingEvent) Reset() {
	*x = ClientTransactionShippingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientTransactionShippingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientTransactionShippingEvent) ProtoMessage() {}

func (x *ClientTransactionShippingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientTransactionShippingEvent.ProtoReflect.Descriptor instead.
func (*ClientTransactionShippingEvent) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{18}
}

func (x *ClientTransactionShippingEvent) GetData() *ClientTransactionShippingMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ClientTransactionShippingEvent) GetOld() *ClientTransactionShippingOldMessage {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *ClientTransactionShippingEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type RedrawOrderInfoEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database event metadata
	Database string                     `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Table    string                     `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Type     string                     `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Ts       int64                      `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	Xid      int64                      `protobuf:"varint,5,opt,name=xid,proto3" json:"xid,omitempty"`
	Commit   bool                       `protobuf:"varint,6,opt,name=commit,proto3" json:"commit,omitempty"`
	Data     *RedrawOrderInfoEvent_Data `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RedrawOrderInfoEvent) Reset() {
	*x = RedrawOrderInfoEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedrawOrderInfoEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedrawOrderInfoEvent) ProtoMessage() {}

func (x *RedrawOrderInfoEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedrawOrderInfoEvent.ProtoReflect.Descriptor instead.
func (*RedrawOrderInfoEvent) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{19}
}

func (x *RedrawOrderInfoEvent) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *RedrawOrderInfoEvent) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *RedrawOrderInfoEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RedrawOrderInfoEvent) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *RedrawOrderInfoEvent) GetXid() int64 {
	if x != nil {
		return x.Xid
	}
	return 0
}

func (x *RedrawOrderInfoEvent) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

func (x *RedrawOrderInfoEvent) GetData() *RedrawOrderInfoEvent_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type EditOrderEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId        string       `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	SampleId       int32        `protobuf:"varint,2,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	JulienBarcode  string       `protobuf:"bytes,3,opt,name=julien_barcode,json=julienBarcode,proto3" json:"julien_barcode,omitempty"`
	AddOnTestList  []int32      `protobuf:"varint,4,rep,packed,name=add_on_test_list,json=addOnTestList,proto3" json:"add_on_test_list,omitempty"`
	DeleteTestList []int32      `protobuf:"varint,5,rep,packed,name=delete_test_list,json=deleteTestList,proto3" json:"delete_test_list,omitempty"`
	NewTubeInfo    *NewTubeInfo `protobuf:"bytes,6,opt,name=new_tube_info,json=newTubeInfo,proto3" json:"new_tube_info,omitempty"`
}

func (x *EditOrderEvent) Reset() {
	*x = EditOrderEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditOrderEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditOrderEvent) ProtoMessage() {}

func (x *EditOrderEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditOrderEvent.ProtoReflect.Descriptor instead.
func (*EditOrderEvent) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{20}
}

func (x *EditOrderEvent) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *EditOrderEvent) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *EditOrderEvent) GetJulienBarcode() string {
	if x != nil {
		return x.JulienBarcode
	}
	return ""
}

func (x *EditOrderEvent) GetAddOnTestList() []int32 {
	if x != nil {
		return x.AddOnTestList
	}
	return nil
}

func (x *EditOrderEvent) GetDeleteTestList() []int32 {
	if x != nil {
		return x.DeleteTestList
	}
	return nil
}

func (x *EditOrderEvent) GetNewTubeInfo() *NewTubeInfo {
	if x != nil {
		return x.NewTubeInfo
	}
	return nil
}

type NewTubeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActualNumberOfTubes  map[string]int32  `protobuf:"bytes,1,rep,name=actual_number_of_tubes,json=actualNumberOfTubes,proto3" json:"actual_number_of_tubes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NoOfDbsBloodTubes    map[string]int32  `protobuf:"bytes,2,rep,name=noOfDbsBloodTubes,proto3" json:"noOfDbsBloodTubes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	VolumeRequired       map[string]int32  `protobuf:"bytes,3,rep,name=volumeRequired,proto3" json:"volumeRequired,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NoOfTubes            map[string]int32  `protobuf:"bytes,4,rep,name=noOfTubes,proto3" json:"noOfTubes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TubeOrderMap         map[string]int32  `protobuf:"bytes,5,rep,name=tube_order_map,json=tubeOrderMap,proto3" json:"tube_order_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ActualVolumeRequired map[string]string `protobuf:"bytes,6,rep,name=actual_volume_required,json=actualVolumeRequired,proto3" json:"actual_volume_required,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NewTubeInfo) Reset() {
	*x = NewTubeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTubeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTubeInfo) ProtoMessage() {}

func (x *NewTubeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTubeInfo.ProtoReflect.Descriptor instead.
func (*NewTubeInfo) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{21}
}

func (x *NewTubeInfo) GetActualNumberOfTubes() map[string]int32 {
	if x != nil {
		return x.ActualNumberOfTubes
	}
	return nil
}

func (x *NewTubeInfo) GetNoOfDbsBloodTubes() map[string]int32 {
	if x != nil {
		return x.NoOfDbsBloodTubes
	}
	return nil
}

func (x *NewTubeInfo) GetVolumeRequired() map[string]int32 {
	if x != nil {
		return x.VolumeRequired
	}
	return nil
}

func (x *NewTubeInfo) GetNoOfTubes() map[string]int32 {
	if x != nil {
		return x.NoOfTubes
	}
	return nil
}

func (x *NewTubeInfo) GetTubeOrderMap() map[string]int32 {
	if x != nil {
		return x.TubeOrderMap
	}
	return nil
}

func (x *NewTubeInfo) GetActualVolumeRequired() map[string]string {
	if x != nil {
		return x.ActualVolumeRequired
	}
	return nil
}

type HubspotEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       string               `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventProvider string               `protobuf:"bytes,2,opt,name=event_provider,json=eventProvider,proto3" json:"event_provider,omitempty"`
	EventName     string               `protobuf:"bytes,3,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	EventAction   string               `protobuf:"bytes,4,opt,name=event_action,json=eventAction,proto3" json:"event_action,omitempty"`
	EventComment  string               `protobuf:"bytes,5,opt,name=event_comment,json=eventComment,proto3" json:"event_comment,omitempty"`
	EventTime     string               `protobuf:"bytes,6,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	TableName     string               `protobuf:"bytes,7,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Schema        *HubspotEvent_Schema `protobuf:"bytes,8,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *HubspotEvent) Reset() {
	*x = HubspotEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HubspotEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HubspotEvent) ProtoMessage() {}

func (x *HubspotEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HubspotEvent.ProtoReflect.Descriptor instead.
func (*HubspotEvent) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{22}
}

func (x *HubspotEvent) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *HubspotEvent) GetEventProvider() string {
	if x != nil {
		return x.EventProvider
	}
	return ""
}

func (x *HubspotEvent) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *HubspotEvent) GetEventAction() string {
	if x != nil {
		return x.EventAction
	}
	return ""
}

func (x *HubspotEvent) GetEventComment() string {
	if x != nil {
		return x.EventComment
	}
	return ""
}

func (x *HubspotEvent) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *HubspotEvent) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *HubspotEvent) GetSchema() *HubspotEvent_Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type PostOrderEvent_TubeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoOfTubes         map[string]int32   `protobuf:"bytes,1,rep,name=noOfTubes,proto3" json:"noOfTubes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	VolumeRequired    map[string]float32 `protobuf:"bytes,2,rep,name=volumeRequired,proto3" json:"volumeRequired,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	NoOfDbsBloodTubes map[string]int32   `protobuf:"bytes,3,rep,name=noOfDbsBloodTubes,proto3" json:"noOfDbsBloodTubes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsDbsPossible     bool               `protobuf:"varint,4,opt,name=isDbsPossible,proto3" json:"isDbsPossible,omitempty"`
}

func (x *PostOrderEvent_TubeInfo) Reset() {
	*x = PostOrderEvent_TubeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostOrderEvent_TubeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostOrderEvent_TubeInfo) ProtoMessage() {}

func (x *PostOrderEvent_TubeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostOrderEvent_TubeInfo.ProtoReflect.Descriptor instead.
func (*PostOrderEvent_TubeInfo) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{8, 0}
}

func (x *PostOrderEvent_TubeInfo) GetNoOfTubes() map[string]int32 {
	if x != nil {
		return x.NoOfTubes
	}
	return nil
}

func (x *PostOrderEvent_TubeInfo) GetVolumeRequired() map[string]float32 {
	if x != nil {
		return x.VolumeRequired
	}
	return nil
}

func (x *PostOrderEvent_TubeInfo) GetNoOfDbsBloodTubes() map[string]int32 {
	if x != nil {
		return x.NoOfDbsBloodTubes
	}
	return nil
}

func (x *PostOrderEvent_TubeInfo) GetIsDbsPossible() bool {
	if x != nil {
		return x.IsDbsPossible
	}
	return false
}

// Event data
type RedrawOrderInfoEvent_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId              int32  `protobuf:"varint,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	RedrawId              int64  `protobuf:"varint,2,opt,name=redraw_id,json=redrawId,proto3" json:"redraw_id,omitempty"`
	OldSampleInfo         string `protobuf:"bytes,3,opt,name=old_sample_info,json=oldSampleInfo,proto3" json:"old_sample_info,omitempty"`
	ListOfTestsRunSuccess string `protobuf:"bytes,4,opt,name=list_of_tests_run_success,json=listOfTestsRunSuccess,proto3" json:"list_of_tests_run_success,omitempty"`
	TimeOfRequest         string `protobuf:"bytes,5,opt,name=time_of_request,json=timeOfRequest,proto3" json:"time_of_request,omitempty"`
}

func (x *RedrawOrderInfoEvent_Data) Reset() {
	*x = RedrawOrderInfoEvent_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedrawOrderInfoEvent_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedrawOrderInfoEvent_Data) ProtoMessage() {}

func (x *RedrawOrderInfoEvent_Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedrawOrderInfoEvent_Data.ProtoReflect.Descriptor instead.
func (*RedrawOrderInfoEvent_Data) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{19, 0}
}

func (x *RedrawOrderInfoEvent_Data) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *RedrawOrderInfoEvent_Data) GetRedrawId() int64 {
	if x != nil {
		return x.RedrawId
	}
	return 0
}

func (x *RedrawOrderInfoEvent_Data) GetOldSampleInfo() string {
	if x != nil {
		return x.OldSampleInfo
	}
	return ""
}

func (x *RedrawOrderInfoEvent_Data) GetListOfTestsRunSuccess() string {
	if x != nil {
		return x.ListOfTestsRunSuccess
	}
	return ""
}

func (x *RedrawOrderInfoEvent_Data) GetTimeOfRequest() string {
	if x != nil {
		return x.TimeOfRequest
	}
	return ""
}

type HubspotEvent_Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderId    string `protobuf:"bytes,1,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	CamName       string `protobuf:"bytes,2,opt,name=cam_name,json=camName,proto3" json:"cam_name,omitempty"`
	CamPhone      string `protobuf:"bytes,3,opt,name=cam_phone,json=camPhone,proto3" json:"cam_phone,omitempty"`
	CamEmail      string `protobuf:"bytes,4,opt,name=cam_email,json=camEmail,proto3" json:"cam_email,omitempty"`
	OwnerName     string `protobuf:"bytes,5,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	OwnerPhone    string `protobuf:"bytes,6,opt,name=owner_phone,json=ownerPhone,proto3" json:"owner_phone,omitempty"`
	OwnerEmail    string `protobuf:"bytes,7,opt,name=owner_email,json=ownerEmail,proto3" json:"owner_email,omitempty"`
	ChangeSource  string `protobuf:"bytes,8,opt,name=change_source,json=changeSource,proto3" json:"change_source,omitempty"`
	SourceId      string `protobuf:"bytes,9,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	PropertyName  string `protobuf:"bytes,10,opt,name=propertyName,proto3" json:"propertyName,omitempty"`
	PropertyValue string `protobuf:"bytes,11,opt,name=propertyValue,proto3" json:"propertyValue,omitempty"`
}

func (x *HubspotEvent_Schema) Reset() {
	*x = HubspotEvent_Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_pubsub_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HubspotEvent_Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HubspotEvent_Schema) ProtoMessage() {}

func (x *HubspotEvent_Schema) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pubsub_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HubspotEvent_Schema.ProtoReflect.Descriptor instead.
func (*HubspotEvent_Schema) Descriptor() ([]byte, []int) {
	return file_proto_pubsub_proto_rawDescGZIP(), []int{22, 0}
}

func (x *HubspotEvent_Schema) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *HubspotEvent_Schema) GetCamName() string {
	if x != nil {
		return x.CamName
	}
	return ""
}

func (x *HubspotEvent_Schema) GetCamPhone() string {
	if x != nil {
		return x.CamPhone
	}
	return ""
}

func (x *HubspotEvent_Schema) GetCamEmail() string {
	if x != nil {
		return x.CamEmail
	}
	return ""
}

func (x *HubspotEvent_Schema) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *HubspotEvent_Schema) GetOwnerPhone() string {
	if x != nil {
		return x.OwnerPhone
	}
	return ""
}

func (x *HubspotEvent_Schema) GetOwnerEmail() string {
	if x != nil {
		return x.OwnerEmail
	}
	return ""
}

func (x *HubspotEvent_Schema) GetChangeSource() string {
	if x != nil {
		return x.ChangeSource
	}
	return ""
}

func (x *HubspotEvent_Schema) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *HubspotEvent_Schema) GetPropertyName() string {
	if x != nil {
		return x.PropertyName
	}
	return ""
}

func (x *HubspotEvent_Schema) GetPropertyValue() string {
	if x != nil {
		return x.PropertyValue
	}
	return ""
}

var File_proto_pubsub_proto protoreflect.FileDescriptor

var file_proto_pubsub_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xd0, 0x05, 0x0a, 0x0c, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xca, 0x04, 0x0a,
	0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x42, 0x0a, 0x0c, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x62,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x74, 0x75, 0x62, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x42, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x74,
	0x61, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x81, 0x03, 0x0a, 0x1d, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x46,
	0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x54, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x43, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x43, 0x63, 0x12,
	0x10, 0x0a, 0x03, 0x42, 0x63, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x42, 0x63,
	0x63, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x0d, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0d,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd0, 0x03,
	0x0a, 0x25, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6e, 0x65, 0x77,
	0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x48, 0x61, 0x6c, 0x66,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x41, 0x6e, 0x6e, 0x75, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x22, 0x81, 0x03, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54,
	0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x43, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x43, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x63, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x42, 0x63, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x60, 0x0a, 0x0d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x6d, 0x0a, 0x25, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x22, 0xeb, 0x02, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72,
	0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x43, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x43, 0x63, 0x12, 0x10,
	0x0a, 0x03, 0x42, 0x63, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x42, 0x63, 0x63,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0d, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x0d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x41, 0x0a, 0x1a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcc, 0x07, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x48, 0x0a, 0x08, 0x74, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x74, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0xaf, 0x04, 0x0a, 0x08, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59,
	0x0a, 0x09, 0x6e, 0x6f, 0x4f, 0x66, 0x54, 0x75, 0x62, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x4e, 0x6f, 0x4f, 0x66, 0x54, 0x75, 0x62, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x6e, 0x6f, 0x4f, 0x66, 0x54, 0x75, 0x62, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x0e, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x71, 0x0a, 0x11, 0x6e, 0x6f, 0x4f, 0x66, 0x44, 0x62, 0x73, 0x42, 0x6c,
	0x6f, 0x6f, 0x64, 0x54, 0x75, 0x62, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x6f, 0x4f,
	0x66, 0x44, 0x62, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x75, 0x62, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x6e, 0x6f, 0x4f, 0x66, 0x44, 0x62, 0x73, 0x42, 0x6c, 0x6f, 0x6f,
	0x64, 0x54, 0x75, 0x62, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x44, 0x62, 0x73, 0x50,
	0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x44, 0x62, 0x73, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x1a, 0x3c, 0x0a, 0x0e,
	0x4e, 0x6f, 0x4f, 0x66, 0x54, 0x75, 0x62, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a,
	0x16, 0x4e, 0x6f, 0x4f, 0x66, 0x44, 0x62, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x75, 0x62,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xf6, 0x02, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x5b, 0x0a, 0x0d, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x44, 0x0a, 0x0c,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x06, 0x0a,
	0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x65, 0x6c, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x6c, 0x6f, 0x6f, 0x64,
	0x4b, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x4b, 0x69,
	0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x3c, 0x0a, 0x19, 0x6e, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x4b, 0x69, 0x74, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x6e, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x4b, 0x69, 0x74, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x38, 0x0a,
	0x17, 0x64, 0x72, 0x79, 0x49, 0x63, 0x65, 0x4b, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x64, 0x72, 0x79, 0x49, 0x63, 0x65, 0x4b, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x6f, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x62, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x64, 0x62, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x46, 0x65, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x75, 0x6c, 0x69, 0x65, 0x6e, 0x42, 0x61, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6a, 0x75, 0x6c, 0x69,
	0x65, 0x6e, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4f, 0x0a, 0x0b, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x6c, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x70, 0x6c,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65,
	0x6c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x09, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x77, 0x0a, 0x0a, 0x54, 0x75,
	0x62, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x62, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x62,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xcc, 0x02, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x72, 0x75, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x64, 0x72, 0x61, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x62,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x4c, 0x61, 0x62, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0xca, 0x08, 0x0a, 0x20,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x65, 0x64, 0x65, 0x78, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x66, 0x65, 0x64, 0x65, 0x78, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x62, 0x6f, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x62, 0x6f, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x42, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69,
	0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x69, 0x74,
	0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5a, 0x69, 0x70, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xdd, 0x0d, 0x0a, 0x23, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f, 0x6c, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x08, 0x70, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x6b, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x15, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x16, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x45, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x65, 0x64, 0x65, 0x78, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x11, 0x66, 0x65, 0x64, 0x65, 0x78, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x62,
	0x6f, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x62, 0x6f,
	0x78, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x0c, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69,
	0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a,
	0x16, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52,
	0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x11, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52,
	0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x14, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x1a, 0x0a, 0x18, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x65,
	0x64, 0x65, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x1e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x4f, 0x6c, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6f,
	0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa7, 0x03, 0x0a, 0x14, 0x52, 0x65, 0x64, 0x72, 0x61,
	0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x78, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0xca, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x64,
	0x72, 0x61, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65,
	0x64, 0x72, 0x61, 0x77, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x6c, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38,
	0x0a, 0x19, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x75,
	0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x88, 0x02, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6a,
	0x75, 0x6c, 0x69, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6a, 0x75, 0x6c, 0x69, 0x65, 0x6e, 0x42, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x64,
	0x64, 0x4f, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x75, 0x62,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x6e, 0x65, 0x77, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf6, 0x07, 0x0a, 0x0b,
	0x4e, 0x65, 0x77, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6e, 0x0a, 0x16, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x74, 0x75, 0x62, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x75, 0x62, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x75, 0x62, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x11, 0x6e,
	0x6f, 0x4f, 0x66, 0x44, 0x62, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x75, 0x62, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x77,
	0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x6f, 0x4f, 0x66, 0x44, 0x62, 0x73,
	0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x75, 0x62, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x11, 0x6e, 0x6f, 0x4f, 0x66, 0x44, 0x62, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x75, 0x62,
	0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4e, 0x65, 0x77, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x4d, 0x0a, 0x09, 0x6e, 0x6f, 0x4f, 0x66, 0x54, 0x75, 0x62, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x75, 0x62,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x6f, 0x4f, 0x66, 0x54, 0x75, 0x62, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6e, 0x6f, 0x4f, 0x66, 0x54, 0x75, 0x62, 0x65, 0x73, 0x12,
	0x58, 0x0a, 0x0e, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65,
	0x77, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x75, 0x62,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x70, 0x0a, 0x16, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4e, 0x65, 0x77, 0x54, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0x46, 0x0a, 0x18, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x75, 0x62,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4e, 0x6f, 0x4f, 0x66, 0x44, 0x62, 0x73, 0x42, 0x6c,
	0x6f, 0x6f, 0x64, 0x54, 0x75, 0x62, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e,
	0x4e, 0x6f, 0x4f, 0x66, 0x54, 0x75, 0x62, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x75,
	0x62, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x05, 0x0a, 0x0c, 0x48, 0x75, 0x62, 0x73, 0x70, 0x6f, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x48, 0x75, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0xeb,
	0x02, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1d, 0x5a, 0x1b,
	0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_pubsub_proto_rawDescOnce sync.Once
	file_proto_pubsub_proto_rawDescData = file_proto_pubsub_proto_rawDesc
)

func file_proto_pubsub_proto_rawDescGZIP() []byte {
	file_proto_pubsub_proto_rawDescOnce.Do(func() {
		file_proto_pubsub_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_pubsub_proto_rawDescData)
	})
	return file_proto_pubsub_proto_rawDescData
}

var file_proto_pubsub_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_proto_pubsub_proto_goTypes = []interface{}{
	(*GeneralEvent)(nil),                          // 0: coresamples_service.GeneralEvent
	(*EventAddonColumn)(nil),                      // 1: coresamples_service.EventAddonColumn
	(*SubscriptionConfirmationEmail)(nil),         // 2: coresamples_service.SubscriptionConfirmationEmail
	(*SubscriptionConfirmationEmailTemplate)(nil), // 3: coresamples_service.SubscriptionConfirmationEmailTemplate
	(*SubscriptionCancellationEmail)(nil),         // 4: coresamples_service.SubscriptionCancellationEmail
	(*SubscriptionCancellationEmailTemplate)(nil), // 5: coresamples_service.SubscriptionCancellationEmailTemplate
	(*PaymentUpdateEmail)(nil),                    // 6: coresamples_service.PaymentUpdateEmail
	(*PaymentUpdateEmailTemplate)(nil),            // 7: coresamples_service.PaymentUpdateEmailTemplate
	(*PostOrderEvent)(nil),                        // 8: coresamples_service.PostOrderEvent
	(*OrderContents)(nil),                         // 9: coresamples_service.OrderContents
	(*OrderInfo)(nil),                             // 10: coresamples_service.OrderInfo
	(*SpecialTest)(nil),                           // 11: coresamples_service.SpecialTest
	(*OrderItem)(nil),                             // 12: coresamples_service.OrderItem
	(*TubeDetail)(nil),                            // 13: coresamples_service.TubeDetail
	(*OrderMessage)(nil),                          // 14: coresamples_service.OrderMessage
	(*CancelOrderEvent)(nil),                      // 15: coresamples_service.CancelOrderEvent
	(*ClientTransactionShippingMessage)(nil),      // 16: coresamples_service.ClientTransactionShippingMessage
	(*ClientTransactionShippingOldMessage)(nil),   // 17: coresamples_service.ClientTransactionShippingOldMessage
	(*ClientTransactionShippingEvent)(nil),        // 18: coresamples_service.ClientTransactionShippingEvent
	(*RedrawOrderInfoEvent)(nil),                  // 19: coresamples_service.RedrawOrderInfoEvent
	(*EditOrderEvent)(nil),                        // 20: coresamples_service.EditOrderEvent
	(*NewTubeInfo)(nil),                           // 21: coresamples_service.NewTubeInfo
	(*HubspotEvent)(nil),                          // 22: coresamples_service.HubspotEvent
	(*PostOrderEvent_TubeInfo)(nil),               // 23: coresamples_service.PostOrderEvent.TubeInfo
	nil,                                           // 24: coresamples_service.PostOrderEvent.TubeInfo.NoOfTubesEntry
	nil,                                           // 25: coresamples_service.PostOrderEvent.TubeInfo.VolumeRequiredEntry
	nil,                                           // 26: coresamples_service.PostOrderEvent.TubeInfo.NoOfDbsBloodTubesEntry
	nil,                                           // 27: coresamples_service.OrderContents.PaymentChoiceEntry
	(*RedrawOrderInfoEvent_Data)(nil),             // 28: coresamples_service.RedrawOrderInfoEvent.Data
	nil,                                           // 29: coresamples_service.NewTubeInfo.ActualNumberOfTubesEntry
	nil,                                           // 30: coresamples_service.NewTubeInfo.NoOfDbsBloodTubesEntry
	nil,                                           // 31: coresamples_service.NewTubeInfo.VolumeRequiredEntry
	nil,                                           // 32: coresamples_service.NewTubeInfo.NoOfTubesEntry
	nil,                                           // 33: coresamples_service.NewTubeInfo.TubeOrderMapEntry
	nil,                                           // 34: coresamples_service.NewTubeInfo.ActualVolumeRequiredEntry
	(*HubspotEvent_Schema)(nil),                   // 35: coresamples_service.HubspotEvent.Schema
}
var file_proto_pubsub_proto_depIdxs = []int32{
	1,  // 0: coresamples_service.GeneralEvent.addon_column:type_name -> coresamples_service.EventAddonColumn
	13, // 1: coresamples_service.EventAddonColumn.tube_details:type_name -> coresamples_service.TubeDetail
	3,  // 2: coresamples_service.SubscriptionConfirmationEmail.TemplateModel:type_name -> coresamples_service.SubscriptionConfirmationEmailTemplate
	5,  // 3: coresamples_service.SubscriptionCancellationEmail.TemplateModel:type_name -> coresamples_service.SubscriptionCancellationEmailTemplate
	7,  // 4: coresamples_service.PaymentUpdateEmail.TemplateModel:type_name -> coresamples_service.PaymentUpdateEmailTemplate
	23, // 5: coresamples_service.PostOrderEvent.tubeInfo:type_name -> coresamples_service.PostOrderEvent.TubeInfo
	9,  // 6: coresamples_service.PostOrderEvent.orderContents:type_name -> coresamples_service.OrderContents
	10, // 7: coresamples_service.PostOrderEvent.orderInfo:type_name -> coresamples_service.OrderInfo
	27, // 8: coresamples_service.OrderContents.paymentChoice:type_name -> coresamples_service.OrderContents.PaymentChoiceEntry
	11, // 9: coresamples_service.OrderContents.specialTests:type_name -> coresamples_service.SpecialTest
	12, // 10: coresamples_service.OrderInfo.orderItems:type_name -> coresamples_service.OrderItem
	16, // 11: coresamples_service.ClientTransactionShippingEvent.data:type_name -> coresamples_service.ClientTransactionShippingMessage
	17, // 12: coresamples_service.ClientTransactionShippingEvent.old:type_name -> coresamples_service.ClientTransactionShippingOldMessage
	28, // 13: coresamples_service.RedrawOrderInfoEvent.data:type_name -> coresamples_service.RedrawOrderInfoEvent.Data
	21, // 14: coresamples_service.EditOrderEvent.new_tube_info:type_name -> coresamples_service.NewTubeInfo
	29, // 15: coresamples_service.NewTubeInfo.actual_number_of_tubes:type_name -> coresamples_service.NewTubeInfo.ActualNumberOfTubesEntry
	30, // 16: coresamples_service.NewTubeInfo.noOfDbsBloodTubes:type_name -> coresamples_service.NewTubeInfo.NoOfDbsBloodTubesEntry
	31, // 17: coresamples_service.NewTubeInfo.volumeRequired:type_name -> coresamples_service.NewTubeInfo.VolumeRequiredEntry
	32, // 18: coresamples_service.NewTubeInfo.noOfTubes:type_name -> coresamples_service.NewTubeInfo.NoOfTubesEntry
	33, // 19: coresamples_service.NewTubeInfo.tube_order_map:type_name -> coresamples_service.NewTubeInfo.TubeOrderMapEntry
	34, // 20: coresamples_service.NewTubeInfo.actual_volume_required:type_name -> coresamples_service.NewTubeInfo.ActualVolumeRequiredEntry
	35, // 21: coresamples_service.HubspotEvent.schema:type_name -> coresamples_service.HubspotEvent.Schema
	24, // 22: coresamples_service.PostOrderEvent.TubeInfo.noOfTubes:type_name -> coresamples_service.PostOrderEvent.TubeInfo.NoOfTubesEntry
	25, // 23: coresamples_service.PostOrderEvent.TubeInfo.volumeRequired:type_name -> coresamples_service.PostOrderEvent.TubeInfo.VolumeRequiredEntry
	26, // 24: coresamples_service.PostOrderEvent.TubeInfo.noOfDbsBloodTubes:type_name -> coresamples_service.PostOrderEvent.TubeInfo.NoOfDbsBloodTubesEntry
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_proto_pubsub_proto_init() }
func file_proto_pubsub_proto_init() {
	if File_proto_pubsub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_pubsub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAddonColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionConfirmationEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionConfirmationEmailTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionCancellationEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionCancellationEmailTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentUpdateEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentUpdateEmailTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostOrderEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TubeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientTransactionShippingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientTransactionShippingOldMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientTransactionShippingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedrawOrderInfoEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditOrderEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTubeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HubspotEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostOrderEvent_TubeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedrawOrderInfoEvent_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_pubsub_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HubspotEvent_Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_pubsub_proto_msgTypes[17].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_pubsub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_pubsub_proto_goTypes,
		DependencyIndexes: file_proto_pubsub_proto_depIdxs,
		MessageInfos:      file_proto_pubsub_proto_msgTypes,
	}.Build()
	File_proto_pubsub_proto = out.File
	file_proto_pubsub_proto_rawDesc = nil
	file_proto_pubsub_proto_goTypes = nil
	file_proto_pubsub_proto_depIdxs = nil
}
