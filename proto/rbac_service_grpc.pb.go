// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/rbac_service.proto

package coresamples_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RBACService_CheckPermission_FullMethodName                 = "/coresamples_service.RBACService/CheckPermission"
	RBACService_CheckCreateRolePermission_FullMethodName       = "/coresamples_service.RBACService/CheckCreateRolePermission"
	RBACService_CheckDeleteRolePermission_FullMethodName       = "/coresamples_service.RBACService/CheckDeleteRolePermission"
	RBACService_CreateRole_FullMethodName                      = "/coresamples_service.RBACService/CreateRole"
	RBACService_DeleteRole_FullMethodName                      = "/coresamples_service.RBACService/DeleteRole"
	RBACService_CheckAddPermissionPermission_FullMethodName    = "/coresamples_service.RBACService/CheckAddPermissionPermission"
	RBACService_CheckDeletePermissionPermission_FullMethodName = "/coresamples_service.RBACService/CheckDeletePermissionPermission"
	RBACService_AddPermissionToRole_FullMethodName             = "/coresamples_service.RBACService/AddPermissionToRole"
	RBACService_AddPermissionToUser_FullMethodName             = "/coresamples_service.RBACService/AddPermissionToUser"
	RBACService_DeletePermissionFromRole_FullMethodName        = "/coresamples_service.RBACService/DeletePermissionFromRole"
	RBACService_DeletePermissionFromUser_FullMethodName        = "/coresamples_service.RBACService/DeletePermissionFromUser"
	RBACService_GetAccountRoleInternalNames_FullMethodName     = "/coresamples_service.RBACService/GetAccountRoleInternalNames"
	RBACService_GetAccountRoles_FullMethodName                 = "/coresamples_service.RBACService/GetAccountRoles"
	RBACService_GetAccountPermissions_FullMethodName           = "/coresamples_service.RBACService/GetAccountPermissions"
	RBACService_GetRolePermissions_FullMethodName              = "/coresamples_service.RBACService/GetRolePermissions"
	RBACService_GetNonPrivateRoles_FullMethodName              = "/coresamples_service.RBACService/GetNonPrivateRoles"
	RBACService_GetRolesByType_FullMethodName                  = "/coresamples_service.RBACService/GetRolesByType"
	RBACService_GetRoleTypeByInternalName_FullMethodName       = "/coresamples_service.RBACService/GetRoleTypeByInternalName"
	RBACService_CheckAssignRolePermission_FullMethodName       = "/coresamples_service.RBACService/CheckAssignRolePermission"
	RBACService_CheckRemoveRolePermission_FullMethodName       = "/coresamples_service.RBACService/CheckRemoveRolePermission"
	RBACService_AssignRoleToAccount_FullMethodName             = "/coresamples_service.RBACService/AssignRoleToAccount"
	RBACService_RemoveRoleFromAccount_FullMethodName           = "/coresamples_service.RBACService/RemoveRoleFromAccount"
	RBACService_CheckResourcePermission_FullMethodName         = "/coresamples_service.RBACService/CheckResourcePermission"
	RBACService_CreateResource_FullMethodName                  = "/coresamples_service.RBACService/CreateResource"
	RBACService_DeleteResourceByName_FullMethodName            = "/coresamples_service.RBACService/DeleteResourceByName"
	RBACService_DeleteResourceById_FullMethodName              = "/coresamples_service.RBACService/DeleteResourceById"
	RBACService_GetResources_FullMethodName                    = "/coresamples_service.RBACService/GetResources"
	RBACService_GetResourceById_FullMethodName                 = "/coresamples_service.RBACService/GetResourceById"
	RBACService_GetResourceDescription_FullMethodName          = "/coresamples_service.RBACService/GetResourceDescription"
	RBACService_UpdateResourceDescription_FullMethodName       = "/coresamples_service.RBACService/UpdateResourceDescription"
	RBACService_CheckActionPermission_FullMethodName           = "/coresamples_service.RBACService/CheckActionPermission"
	RBACService_CreateAction_FullMethodName                    = "/coresamples_service.RBACService/CreateAction"
	RBACService_DeleteAction_FullMethodName                    = "/coresamples_service.RBACService/DeleteAction"
	RBACService_GetActions_FullMethodName                      = "/coresamples_service.RBACService/GetActions"
	RBACService_GetDefaultPermissions_FullMethodName           = "/coresamples_service.RBACService/GetDefaultPermissions"
)

// RBACServiceClient is the client API for RBACService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RBACServiceClient interface {
	CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
	CheckCreateRolePermission(ctx context.Context, in *CheckCreateRoleRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
	CheckDeleteRolePermission(ctx context.Context, in *CheckDeleteRoleRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	CheckAddPermissionPermission(ctx context.Context, in *CheckEditRolePermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
	CheckDeletePermissionPermission(ctx context.Context, in *CheckEditRolePermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
	AddPermissionToRole(ctx context.Context, in *AddPermissionToRoleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	AddPermissionToUser(ctx context.Context, in *AddPermissionToUserRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	DeletePermissionFromRole(ctx context.Context, in *DeletePermissionFromRoleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	DeletePermissionFromUser(ctx context.Context, in *DeletePermissionFromUserRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	GetAccountRoleInternalNames(ctx context.Context, in *GetAccountRoleInternalNamesRequest, opts ...grpc.CallOption) (*GetAccountRoleInternalNamesResponse, error)
	GetAccountRoles(ctx context.Context, in *GetAccountRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error)
	GetAccountPermissions(ctx context.Context, in *GetAccountPermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error)
	GetRolePermissions(ctx context.Context, in *GetRolePermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error)
	GetNonPrivateRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRolesResponse, error)
	GetRolesByType(ctx context.Context, in *GetRolesByTypeRequest, opts ...grpc.CallOption) (*GetRolesResponse, error)
	GetRoleTypeByInternalName(ctx context.Context, in *GetRoleTypeByInternalNameRequest, opts ...grpc.CallOption) (*GetRoleTypeByInternalNameResponse, error)
	CheckAssignRolePermission(ctx context.Context, in *CheckAssignRolePermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
	CheckRemoveRolePermission(ctx context.Context, in *CheckRemoveRolePermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
	AssignRoleToAccount(ctx context.Context, in *AssignRoleToAccountRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	RemoveRoleFromAccount(ctx context.Context, in *RemoveRoleFromAccountRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	CheckResourcePermission(ctx context.Context, in *CheckResourcePermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	DeleteResourceByName(ctx context.Context, in *DeleteResourceByNameRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error)
	DeleteResourceById(ctx context.Context, in *DeleteResourceByIdRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error)
	GetResources(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetResourcesResponse, error)
	GetResourceById(ctx context.Context, in *GetResourceByIdRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	GetResourceDescription(ctx context.Context, in *GetResourceDescriptionRequest, opts ...grpc.CallOption) (*GetResourceDescriptionResponse, error)
	UpdateResourceDescription(ctx context.Context, in *UpdateResourceDescriptionRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	CheckActionPermission(ctx context.Context, in *CheckActionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
	CreateAction(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	DeleteAction(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	GetActions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetActionsResponse, error)
	GetDefaultPermissions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDefaultPermissionsResponse, error)
}

type rBACServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRBACServiceClient(cc grpc.ClientConnInterface) RBACServiceClient {
	return &rBACServiceClient{cc}
}

func (c *rBACServiceClient) CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, RBACService_CheckPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) CheckCreateRolePermission(ctx context.Context, in *CheckCreateRoleRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, RBACService_CheckCreateRolePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) CheckDeleteRolePermission(ctx context.Context, in *CheckDeleteRoleRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, RBACService_CheckDeleteRolePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, RBACService_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, RBACService_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) CheckAddPermissionPermission(ctx context.Context, in *CheckEditRolePermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, RBACService_CheckAddPermissionPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) CheckDeletePermissionPermission(ctx context.Context, in *CheckEditRolePermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, RBACService_CheckDeletePermissionPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) AddPermissionToRole(ctx context.Context, in *AddPermissionToRoleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, RBACService_AddPermissionToRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) AddPermissionToUser(ctx context.Context, in *AddPermissionToUserRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, RBACService_AddPermissionToUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeletePermissionFromRole(ctx context.Context, in *DeletePermissionFromRoleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, RBACService_DeletePermissionFromRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeletePermissionFromUser(ctx context.Context, in *DeletePermissionFromUserRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, RBACService_DeletePermissionFromUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetAccountRoleInternalNames(ctx context.Context, in *GetAccountRoleInternalNamesRequest, opts ...grpc.CallOption) (*GetAccountRoleInternalNamesResponse, error) {
	out := new(GetAccountRoleInternalNamesResponse)
	err := c.cc.Invoke(ctx, RBACService_GetAccountRoleInternalNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetAccountRoles(ctx context.Context, in *GetAccountRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, RBACService_GetAccountRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetAccountPermissions(ctx context.Context, in *GetAccountPermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error) {
	out := new(GetPermissionsResponse)
	err := c.cc.Invoke(ctx, RBACService_GetAccountPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetRolePermissions(ctx context.Context, in *GetRolePermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error) {
	out := new(GetPermissionsResponse)
	err := c.cc.Invoke(ctx, RBACService_GetRolePermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetNonPrivateRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, RBACService_GetNonPrivateRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetRolesByType(ctx context.Context, in *GetRolesByTypeRequest, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, RBACService_GetRolesByType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetRoleTypeByInternalName(ctx context.Context, in *GetRoleTypeByInternalNameRequest, opts ...grpc.CallOption) (*GetRoleTypeByInternalNameResponse, error) {
	out := new(GetRoleTypeByInternalNameResponse)
	err := c.cc.Invoke(ctx, RBACService_GetRoleTypeByInternalName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) CheckAssignRolePermission(ctx context.Context, in *CheckAssignRolePermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, RBACService_CheckAssignRolePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) CheckRemoveRolePermission(ctx context.Context, in *CheckRemoveRolePermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, RBACService_CheckRemoveRolePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) AssignRoleToAccount(ctx context.Context, in *AssignRoleToAccountRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, RBACService_AssignRoleToAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) RemoveRoleFromAccount(ctx context.Context, in *RemoveRoleFromAccountRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, RBACService_RemoveRoleFromAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) CheckResourcePermission(ctx context.Context, in *CheckResourcePermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, RBACService_CheckResourcePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, RBACService_CreateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeleteResourceByName(ctx context.Context, in *DeleteResourceByNameRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error) {
	out := new(DeleteResourceResponse)
	err := c.cc.Invoke(ctx, RBACService_DeleteResourceByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeleteResourceById(ctx context.Context, in *DeleteResourceByIdRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error) {
	out := new(DeleteResourceResponse)
	err := c.cc.Invoke(ctx, RBACService_DeleteResourceById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetResources(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetResourcesResponse, error) {
	out := new(GetResourcesResponse)
	err := c.cc.Invoke(ctx, RBACService_GetResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetResourceById(ctx context.Context, in *GetResourceByIdRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, RBACService_GetResourceById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetResourceDescription(ctx context.Context, in *GetResourceDescriptionRequest, opts ...grpc.CallOption) (*GetResourceDescriptionResponse, error) {
	out := new(GetResourceDescriptionResponse)
	err := c.cc.Invoke(ctx, RBACService_GetResourceDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) UpdateResourceDescription(ctx context.Context, in *UpdateResourceDescriptionRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, RBACService_UpdateResourceDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) CheckActionPermission(ctx context.Context, in *CheckActionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, RBACService_CheckActionPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) CreateAction(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, RBACService_CreateAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeleteAction(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, RBACService_DeleteAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetActions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetActionsResponse, error) {
	out := new(GetActionsResponse)
	err := c.cc.Invoke(ctx, RBACService_GetActions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetDefaultPermissions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDefaultPermissionsResponse, error) {
	out := new(GetDefaultPermissionsResponse)
	err := c.cc.Invoke(ctx, RBACService_GetDefaultPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RBACServiceServer is the server API for RBACService service.
// All implementations must embed UnimplementedRBACServiceServer
// for forward compatibility
type RBACServiceServer interface {
	CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error)
	CheckCreateRolePermission(context.Context, *CheckCreateRoleRequest) (*CheckPermissionResponse, error)
	CheckDeleteRolePermission(context.Context, *CheckDeleteRoleRequest) (*CheckPermissionResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*SimpleResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	CheckAddPermissionPermission(context.Context, *CheckEditRolePermissionRequest) (*CheckPermissionResponse, error)
	CheckDeletePermissionPermission(context.Context, *CheckEditRolePermissionRequest) (*CheckPermissionResponse, error)
	AddPermissionToRole(context.Context, *AddPermissionToRoleRequest) (*SimpleResponse, error)
	AddPermissionToUser(context.Context, *AddPermissionToUserRequest) (*SimpleResponse, error)
	DeletePermissionFromRole(context.Context, *DeletePermissionFromRoleRequest) (*SimpleResponse, error)
	DeletePermissionFromUser(context.Context, *DeletePermissionFromUserRequest) (*SimpleResponse, error)
	GetAccountRoleInternalNames(context.Context, *GetAccountRoleInternalNamesRequest) (*GetAccountRoleInternalNamesResponse, error)
	GetAccountRoles(context.Context, *GetAccountRolesRequest) (*GetRolesResponse, error)
	GetAccountPermissions(context.Context, *GetAccountPermissionsRequest) (*GetPermissionsResponse, error)
	GetRolePermissions(context.Context, *GetRolePermissionsRequest) (*GetPermissionsResponse, error)
	GetNonPrivateRoles(context.Context, *emptypb.Empty) (*GetRolesResponse, error)
	GetRolesByType(context.Context, *GetRolesByTypeRequest) (*GetRolesResponse, error)
	GetRoleTypeByInternalName(context.Context, *GetRoleTypeByInternalNameRequest) (*GetRoleTypeByInternalNameResponse, error)
	CheckAssignRolePermission(context.Context, *CheckAssignRolePermissionRequest) (*CheckPermissionResponse, error)
	CheckRemoveRolePermission(context.Context, *CheckRemoveRolePermissionRequest) (*CheckPermissionResponse, error)
	AssignRoleToAccount(context.Context, *AssignRoleToAccountRequest) (*SimpleResponse, error)
	RemoveRoleFromAccount(context.Context, *RemoveRoleFromAccountRequest) (*SimpleResponse, error)
	CheckResourcePermission(context.Context, *CheckResourcePermissionRequest) (*CheckPermissionResponse, error)
	CreateResource(context.Context, *CreateResourceRequest) (*SimpleResponse, error)
	DeleteResourceByName(context.Context, *DeleteResourceByNameRequest) (*DeleteResourceResponse, error)
	DeleteResourceById(context.Context, *DeleteResourceByIdRequest) (*DeleteResourceResponse, error)
	GetResources(context.Context, *emptypb.Empty) (*GetResourcesResponse, error)
	GetResourceById(context.Context, *GetResourceByIdRequest) (*GetResourceResponse, error)
	GetResourceDescription(context.Context, *GetResourceDescriptionRequest) (*GetResourceDescriptionResponse, error)
	UpdateResourceDescription(context.Context, *UpdateResourceDescriptionRequest) (*SimpleResponse, error)
	CheckActionPermission(context.Context, *CheckActionRequest) (*CheckPermissionResponse, error)
	CreateAction(context.Context, *ActionRequest) (*SimpleResponse, error)
	DeleteAction(context.Context, *ActionRequest) (*SimpleResponse, error)
	GetActions(context.Context, *emptypb.Empty) (*GetActionsResponse, error)
	GetDefaultPermissions(context.Context, *emptypb.Empty) (*GetDefaultPermissionsResponse, error)
	mustEmbedUnimplementedRBACServiceServer()
}

// UnimplementedRBACServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRBACServiceServer struct {
}

func (UnimplementedRBACServiceServer) CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}
func (UnimplementedRBACServiceServer) CheckCreateRolePermission(context.Context, *CheckCreateRoleRequest) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCreateRolePermission not implemented")
}
func (UnimplementedRBACServiceServer) CheckDeleteRolePermission(context.Context, *CheckDeleteRoleRequest) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDeleteRolePermission not implemented")
}
func (UnimplementedRBACServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRBACServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRBACServiceServer) CheckAddPermissionPermission(context.Context, *CheckEditRolePermissionRequest) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAddPermissionPermission not implemented")
}
func (UnimplementedRBACServiceServer) CheckDeletePermissionPermission(context.Context, *CheckEditRolePermissionRequest) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDeletePermissionPermission not implemented")
}
func (UnimplementedRBACServiceServer) AddPermissionToRole(context.Context, *AddPermissionToRoleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionToRole not implemented")
}
func (UnimplementedRBACServiceServer) AddPermissionToUser(context.Context, *AddPermissionToUserRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionToUser not implemented")
}
func (UnimplementedRBACServiceServer) DeletePermissionFromRole(context.Context, *DeletePermissionFromRoleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissionFromRole not implemented")
}
func (UnimplementedRBACServiceServer) DeletePermissionFromUser(context.Context, *DeletePermissionFromUserRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissionFromUser not implemented")
}
func (UnimplementedRBACServiceServer) GetAccountRoleInternalNames(context.Context, *GetAccountRoleInternalNamesRequest) (*GetAccountRoleInternalNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountRoleInternalNames not implemented")
}
func (UnimplementedRBACServiceServer) GetAccountRoles(context.Context, *GetAccountRolesRequest) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountRoles not implemented")
}
func (UnimplementedRBACServiceServer) GetAccountPermissions(context.Context, *GetAccountPermissionsRequest) (*GetPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountPermissions not implemented")
}
func (UnimplementedRBACServiceServer) GetRolePermissions(context.Context, *GetRolePermissionsRequest) (*GetPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolePermissions not implemented")
}
func (UnimplementedRBACServiceServer) GetNonPrivateRoles(context.Context, *emptypb.Empty) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNonPrivateRoles not implemented")
}
func (UnimplementedRBACServiceServer) GetRolesByType(context.Context, *GetRolesByTypeRequest) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesByType not implemented")
}
func (UnimplementedRBACServiceServer) GetRoleTypeByInternalName(context.Context, *GetRoleTypeByInternalNameRequest) (*GetRoleTypeByInternalNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleTypeByInternalName not implemented")
}
func (UnimplementedRBACServiceServer) CheckAssignRolePermission(context.Context, *CheckAssignRolePermissionRequest) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAssignRolePermission not implemented")
}
func (UnimplementedRBACServiceServer) CheckRemoveRolePermission(context.Context, *CheckRemoveRolePermissionRequest) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRemoveRolePermission not implemented")
}
func (UnimplementedRBACServiceServer) AssignRoleToAccount(context.Context, *AssignRoleToAccountRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRoleToAccount not implemented")
}
func (UnimplementedRBACServiceServer) RemoveRoleFromAccount(context.Context, *RemoveRoleFromAccountRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleFromAccount not implemented")
}
func (UnimplementedRBACServiceServer) CheckResourcePermission(context.Context, *CheckResourcePermissionRequest) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckResourcePermission not implemented")
}
func (UnimplementedRBACServiceServer) CreateResource(context.Context, *CreateResourceRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedRBACServiceServer) DeleteResourceByName(context.Context, *DeleteResourceByNameRequest) (*DeleteResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceByName not implemented")
}
func (UnimplementedRBACServiceServer) DeleteResourceById(context.Context, *DeleteResourceByIdRequest) (*DeleteResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceById not implemented")
}
func (UnimplementedRBACServiceServer) GetResources(context.Context, *emptypb.Empty) (*GetResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResources not implemented")
}
func (UnimplementedRBACServiceServer) GetResourceById(context.Context, *GetResourceByIdRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceById not implemented")
}
func (UnimplementedRBACServiceServer) GetResourceDescription(context.Context, *GetResourceDescriptionRequest) (*GetResourceDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceDescription not implemented")
}
func (UnimplementedRBACServiceServer) UpdateResourceDescription(context.Context, *UpdateResourceDescriptionRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceDescription not implemented")
}
func (UnimplementedRBACServiceServer) CheckActionPermission(context.Context, *CheckActionRequest) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckActionPermission not implemented")
}
func (UnimplementedRBACServiceServer) CreateAction(context.Context, *ActionRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAction not implemented")
}
func (UnimplementedRBACServiceServer) DeleteAction(context.Context, *ActionRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAction not implemented")
}
func (UnimplementedRBACServiceServer) GetActions(context.Context, *emptypb.Empty) (*GetActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActions not implemented")
}
func (UnimplementedRBACServiceServer) GetDefaultPermissions(context.Context, *emptypb.Empty) (*GetDefaultPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPermissions not implemented")
}
func (UnimplementedRBACServiceServer) mustEmbedUnimplementedRBACServiceServer() {}

// UnsafeRBACServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RBACServiceServer will
// result in compilation errors.
type UnsafeRBACServiceServer interface {
	mustEmbedUnimplementedRBACServiceServer()
}

func RegisterRBACServiceServer(s grpc.ServiceRegistrar, srv RBACServiceServer) {
	s.RegisterService(&RBACService_ServiceDesc, srv)
}

func _RBACService_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CheckPermission(ctx, req.(*CheckPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_CheckCreateRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CheckCreateRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CheckCreateRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CheckCreateRolePermission(ctx, req.(*CheckCreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_CheckDeleteRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CheckDeleteRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CheckDeleteRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CheckDeleteRolePermission(ctx, req.(*CheckDeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_CheckAddPermissionPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEditRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CheckAddPermissionPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CheckAddPermissionPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CheckAddPermissionPermission(ctx, req.(*CheckEditRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_CheckDeletePermissionPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEditRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CheckDeletePermissionPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CheckDeletePermissionPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CheckDeletePermissionPermission(ctx, req.(*CheckEditRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_AddPermissionToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).AddPermissionToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_AddPermissionToRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).AddPermissionToRole(ctx, req.(*AddPermissionToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_AddPermissionToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).AddPermissionToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_AddPermissionToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).AddPermissionToUser(ctx, req.(*AddPermissionToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeletePermissionFromRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionFromRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeletePermissionFromRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeletePermissionFromRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeletePermissionFromRole(ctx, req.(*DeletePermissionFromRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeletePermissionFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeletePermissionFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeletePermissionFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeletePermissionFromUser(ctx, req.(*DeletePermissionFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetAccountRoleInternalNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRoleInternalNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetAccountRoleInternalNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetAccountRoleInternalNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetAccountRoleInternalNames(ctx, req.(*GetAccountRoleInternalNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetAccountRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetAccountRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetAccountRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetAccountRoles(ctx, req.(*GetAccountRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetAccountPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetAccountPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetAccountPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetAccountPermissions(ctx, req.(*GetAccountPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetRolePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetRolePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetRolePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetRolePermissions(ctx, req.(*GetRolePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetNonPrivateRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetNonPrivateRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetNonPrivateRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetNonPrivateRoles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetRolesByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetRolesByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetRolesByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetRolesByType(ctx, req.(*GetRolesByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetRoleTypeByInternalName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleTypeByInternalNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetRoleTypeByInternalName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetRoleTypeByInternalName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetRoleTypeByInternalName(ctx, req.(*GetRoleTypeByInternalNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_CheckAssignRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAssignRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CheckAssignRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CheckAssignRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CheckAssignRolePermission(ctx, req.(*CheckAssignRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_CheckRemoveRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRemoveRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CheckRemoveRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CheckRemoveRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CheckRemoveRolePermission(ctx, req.(*CheckRemoveRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_AssignRoleToAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRoleToAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).AssignRoleToAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_AssignRoleToAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).AssignRoleToAccount(ctx, req.(*AssignRoleToAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_RemoveRoleFromAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).RemoveRoleFromAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_RemoveRoleFromAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).RemoveRoleFromAccount(ctx, req.(*RemoveRoleFromAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_CheckResourcePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckResourcePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CheckResourcePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CheckResourcePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CheckResourcePermission(ctx, req.(*CheckResourcePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CreateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CreateResource(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeleteResourceByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeleteResourceByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeleteResourceByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeleteResourceByName(ctx, req.(*DeleteResourceByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeleteResourceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeleteResourceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeleteResourceById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeleteResourceById(ctx, req.(*DeleteResourceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetResources(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetResourceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetResourceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetResourceById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetResourceById(ctx, req.(*GetResourceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetResourceDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetResourceDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetResourceDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetResourceDescription(ctx, req.(*GetResourceDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_UpdateResourceDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).UpdateResourceDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_UpdateResourceDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).UpdateResourceDescription(ctx, req.(*UpdateResourceDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_CheckActionPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CheckActionPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CheckActionPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CheckActionPermission(ctx, req.(*CheckActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_CreateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CreateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CreateAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CreateAction(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeleteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeleteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeleteAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeleteAction(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetActions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetDefaultPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetDefaultPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetDefaultPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetDefaultPermissions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RBACService_ServiceDesc is the grpc.ServiceDesc for RBACService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RBACService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coresamples_service.RBACService",
	HandlerType: (*RBACServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckPermission",
			Handler:    _RBACService_CheckPermission_Handler,
		},
		{
			MethodName: "CheckCreateRolePermission",
			Handler:    _RBACService_CheckCreateRolePermission_Handler,
		},
		{
			MethodName: "CheckDeleteRolePermission",
			Handler:    _RBACService_CheckDeleteRolePermission_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _RBACService_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RBACService_DeleteRole_Handler,
		},
		{
			MethodName: "CheckAddPermissionPermission",
			Handler:    _RBACService_CheckAddPermissionPermission_Handler,
		},
		{
			MethodName: "CheckDeletePermissionPermission",
			Handler:    _RBACService_CheckDeletePermissionPermission_Handler,
		},
		{
			MethodName: "AddPermissionToRole",
			Handler:    _RBACService_AddPermissionToRole_Handler,
		},
		{
			MethodName: "AddPermissionToUser",
			Handler:    _RBACService_AddPermissionToUser_Handler,
		},
		{
			MethodName: "DeletePermissionFromRole",
			Handler:    _RBACService_DeletePermissionFromRole_Handler,
		},
		{
			MethodName: "DeletePermissionFromUser",
			Handler:    _RBACService_DeletePermissionFromUser_Handler,
		},
		{
			MethodName: "GetAccountRoleInternalNames",
			Handler:    _RBACService_GetAccountRoleInternalNames_Handler,
		},
		{
			MethodName: "GetAccountRoles",
			Handler:    _RBACService_GetAccountRoles_Handler,
		},
		{
			MethodName: "GetAccountPermissions",
			Handler:    _RBACService_GetAccountPermissions_Handler,
		},
		{
			MethodName: "GetRolePermissions",
			Handler:    _RBACService_GetRolePermissions_Handler,
		},
		{
			MethodName: "GetNonPrivateRoles",
			Handler:    _RBACService_GetNonPrivateRoles_Handler,
		},
		{
			MethodName: "GetRolesByType",
			Handler:    _RBACService_GetRolesByType_Handler,
		},
		{
			MethodName: "GetRoleTypeByInternalName",
			Handler:    _RBACService_GetRoleTypeByInternalName_Handler,
		},
		{
			MethodName: "CheckAssignRolePermission",
			Handler:    _RBACService_CheckAssignRolePermission_Handler,
		},
		{
			MethodName: "CheckRemoveRolePermission",
			Handler:    _RBACService_CheckRemoveRolePermission_Handler,
		},
		{
			MethodName: "AssignRoleToAccount",
			Handler:    _RBACService_AssignRoleToAccount_Handler,
		},
		{
			MethodName: "RemoveRoleFromAccount",
			Handler:    _RBACService_RemoveRoleFromAccount_Handler,
		},
		{
			MethodName: "CheckResourcePermission",
			Handler:    _RBACService_CheckResourcePermission_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _RBACService_CreateResource_Handler,
		},
		{
			MethodName: "DeleteResourceByName",
			Handler:    _RBACService_DeleteResourceByName_Handler,
		},
		{
			MethodName: "DeleteResourceById",
			Handler:    _RBACService_DeleteResourceById_Handler,
		},
		{
			MethodName: "GetResources",
			Handler:    _RBACService_GetResources_Handler,
		},
		{
			MethodName: "GetResourceById",
			Handler:    _RBACService_GetResourceById_Handler,
		},
		{
			MethodName: "GetResourceDescription",
			Handler:    _RBACService_GetResourceDescription_Handler,
		},
		{
			MethodName: "UpdateResourceDescription",
			Handler:    _RBACService_UpdateResourceDescription_Handler,
		},
		{
			MethodName: "CheckActionPermission",
			Handler:    _RBACService_CheckActionPermission_Handler,
		},
		{
			MethodName: "CreateAction",
			Handler:    _RBACService_CreateAction_Handler,
		},
		{
			MethodName: "DeleteAction",
			Handler:    _RBACService_DeleteAction_Handler,
		},
		{
			MethodName: "GetActions",
			Handler:    _RBACService_GetActions_Handler,
		},
		{
			MethodName: "GetDefaultPermissions",
			Handler:    _RBACService_GetDefaultPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rbac_service.proto",
}
