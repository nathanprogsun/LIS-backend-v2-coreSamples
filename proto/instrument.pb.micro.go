// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/instrument.proto

package coresamples_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for InstrumentService service

func NewInstrumentServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for InstrumentService service

type InstrumentService interface {
	GetInstrument(ctx context.Context, in *InstrumentID, opts ...client.CallOption) (*Instrument, error)
	CreateInstrument(ctx context.Context, in *CreateInstrumentRequest, opts ...client.CallOption) (*Instrument, error)
	UpdateInstrument(ctx context.Context, in *UpdateInstrumentRequest, opts ...client.CallOption) (*Instrument, error)
}

type instrumentService struct {
	c    client.Client
	name string
}

func NewInstrumentService(name string, c client.Client) InstrumentService {
	return &instrumentService{
		c:    c,
		name: name,
	}
}

func (c *instrumentService) GetInstrument(ctx context.Context, in *InstrumentID, opts ...client.CallOption) (*Instrument, error) {
	req := c.c.NewRequest(c.name, "InstrumentService.GetInstrument", in)
	out := new(Instrument)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentService) CreateInstrument(ctx context.Context, in *CreateInstrumentRequest, opts ...client.CallOption) (*Instrument, error) {
	req := c.c.NewRequest(c.name, "InstrumentService.CreateInstrument", in)
	out := new(Instrument)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentService) UpdateInstrument(ctx context.Context, in *UpdateInstrumentRequest, opts ...client.CallOption) (*Instrument, error) {
	req := c.c.NewRequest(c.name, "InstrumentService.UpdateInstrument", in)
	out := new(Instrument)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InstrumentService service

type InstrumentServiceHandler interface {
	GetInstrument(context.Context, *InstrumentID, *Instrument) error
	CreateInstrument(context.Context, *CreateInstrumentRequest, *Instrument) error
	UpdateInstrument(context.Context, *UpdateInstrumentRequest, *Instrument) error
}

func RegisterInstrumentServiceHandler(s server.Server, hdlr InstrumentServiceHandler, opts ...server.HandlerOption) error {
	type instrumentService interface {
		GetInstrument(ctx context.Context, in *InstrumentID, out *Instrument) error
		CreateInstrument(ctx context.Context, in *CreateInstrumentRequest, out *Instrument) error
		UpdateInstrument(ctx context.Context, in *UpdateInstrumentRequest, out *Instrument) error
	}
	type InstrumentService struct {
		instrumentService
	}
	h := &instrumentServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&InstrumentService{h}, opts...))
}

type instrumentServiceHandler struct {
	InstrumentServiceHandler
}

func (h *instrumentServiceHandler) GetInstrument(ctx context.Context, in *InstrumentID, out *Instrument) error {
	return h.InstrumentServiceHandler.GetInstrument(ctx, in, out)
}

func (h *instrumentServiceHandler) CreateInstrument(ctx context.Context, in *CreateInstrumentRequest, out *Instrument) error {
	return h.InstrumentServiceHandler.CreateInstrument(ctx, in, out)
}

func (h *instrumentServiceHandler) UpdateInstrument(ctx context.Context, in *UpdateInstrumentRequest, out *Instrument) error {
	return h.InstrumentServiceHandler.UpdateInstrument(ctx, in, out)
}
