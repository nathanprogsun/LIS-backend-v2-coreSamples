// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/contact.proto

package coresamples_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContactService_UpdateContact_FullMethodName              = "/coresamples_service.ContactService/UpdateContact"
	ContactService_CreateContact_FullMethodName              = "/coresamples_service.ContactService/CreateContact"
	ContactService_UpdateGroupContact_FullMethodName         = "/coresamples_service.ContactService/UpdateGroupContact"
	ContactService_CreateOrUpdateGroupContact_FullMethodName = "/coresamples_service.ContactService/CreateOrUpdateGroupContact"
	ContactService_ShowCustomerContact_FullMethodName        = "/coresamples_service.ContactService/ShowCustomerContact"
	ContactService_ShowClinicContact_FullMethodName          = "/coresamples_service.ContactService/ShowClinicContact"
	ContactService_DeleteContact_FullMethodName              = "/coresamples_service.ContactService/DeleteContact"
)

// ContactServiceClient is the client API for ContactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactServiceClient interface {
	UpdateContact(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*Contact, error)
	CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*Contact, error)
	UpdateGroupContact(ctx context.Context, in *UpdateGroupContactRequest, opts ...grpc.CallOption) (*CreateOrUpdateGroupContactResponse, error)
	CreateOrUpdateGroupContact(ctx context.Context, in *CreateOrUpdateGroupContactRequest, opts ...grpc.CallOption) (*CreateOrUpdateGroupContactResponse, error)
	ShowCustomerContact(ctx context.Context, in *ShowCustomerContactRequest, opts ...grpc.CallOption) (*ShowCustomerContactResponse, error)
	ShowClinicContact(ctx context.Context, in *ShowClinicContactRequest, opts ...grpc.CallOption) (*ShowCustomerContactResponse, error)
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactResponse, error)
}

type contactServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContactServiceClient(cc grpc.ClientConnInterface) ContactServiceClient {
	return &contactServiceClient{cc}
}

func (c *contactServiceClient) UpdateContact(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, ContactService_UpdateContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, ContactService_CreateContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) UpdateGroupContact(ctx context.Context, in *UpdateGroupContactRequest, opts ...grpc.CallOption) (*CreateOrUpdateGroupContactResponse, error) {
	out := new(CreateOrUpdateGroupContactResponse)
	err := c.cc.Invoke(ctx, ContactService_UpdateGroupContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) CreateOrUpdateGroupContact(ctx context.Context, in *CreateOrUpdateGroupContactRequest, opts ...grpc.CallOption) (*CreateOrUpdateGroupContactResponse, error) {
	out := new(CreateOrUpdateGroupContactResponse)
	err := c.cc.Invoke(ctx, ContactService_CreateOrUpdateGroupContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) ShowCustomerContact(ctx context.Context, in *ShowCustomerContactRequest, opts ...grpc.CallOption) (*ShowCustomerContactResponse, error) {
	out := new(ShowCustomerContactResponse)
	err := c.cc.Invoke(ctx, ContactService_ShowCustomerContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) ShowClinicContact(ctx context.Context, in *ShowClinicContactRequest, opts ...grpc.CallOption) (*ShowCustomerContactResponse, error) {
	out := new(ShowCustomerContactResponse)
	err := c.cc.Invoke(ctx, ContactService_ShowClinicContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactResponse, error) {
	out := new(DeleteContactResponse)
	err := c.cc.Invoke(ctx, ContactService_DeleteContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactServiceServer is the server API for ContactService service.
// All implementations must embed UnimplementedContactServiceServer
// for forward compatibility
type ContactServiceServer interface {
	UpdateContact(context.Context, *UpdateContactRequest) (*Contact, error)
	CreateContact(context.Context, *CreateContactRequest) (*Contact, error)
	UpdateGroupContact(context.Context, *UpdateGroupContactRequest) (*CreateOrUpdateGroupContactResponse, error)
	CreateOrUpdateGroupContact(context.Context, *CreateOrUpdateGroupContactRequest) (*CreateOrUpdateGroupContactResponse, error)
	ShowCustomerContact(context.Context, *ShowCustomerContactRequest) (*ShowCustomerContactResponse, error)
	ShowClinicContact(context.Context, *ShowClinicContactRequest) (*ShowCustomerContactResponse, error)
	DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactResponse, error)
	mustEmbedUnimplementedContactServiceServer()
}

// UnimplementedContactServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContactServiceServer struct {
}

func (UnimplementedContactServiceServer) UpdateContact(context.Context, *UpdateContactRequest) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContact not implemented")
}
func (UnimplementedContactServiceServer) CreateContact(context.Context, *CreateContactRequest) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (UnimplementedContactServiceServer) UpdateGroupContact(context.Context, *UpdateGroupContactRequest) (*CreateOrUpdateGroupContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupContact not implemented")
}
func (UnimplementedContactServiceServer) CreateOrUpdateGroupContact(context.Context, *CreateOrUpdateGroupContactRequest) (*CreateOrUpdateGroupContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateGroupContact not implemented")
}
func (UnimplementedContactServiceServer) ShowCustomerContact(context.Context, *ShowCustomerContactRequest) (*ShowCustomerContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCustomerContact not implemented")
}
func (UnimplementedContactServiceServer) ShowClinicContact(context.Context, *ShowClinicContactRequest) (*ShowCustomerContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowClinicContact not implemented")
}
func (UnimplementedContactServiceServer) DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedContactServiceServer) mustEmbedUnimplementedContactServiceServer() {}

// UnsafeContactServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactServiceServer will
// result in compilation errors.
type UnsafeContactServiceServer interface {
	mustEmbedUnimplementedContactServiceServer()
}

func RegisterContactServiceServer(s grpc.ServiceRegistrar, srv ContactServiceServer) {
	s.RegisterService(&ContactService_ServiceDesc, srv)
}

func _ContactService_UpdateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).UpdateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_UpdateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).UpdateContact(ctx, req.(*UpdateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_CreateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).CreateContact(ctx, req.(*CreateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_UpdateGroupContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).UpdateGroupContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_UpdateGroupContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).UpdateGroupContact(ctx, req.(*UpdateGroupContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_CreateOrUpdateGroupContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateGroupContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).CreateOrUpdateGroupContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_CreateOrUpdateGroupContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).CreateOrUpdateGroupContact(ctx, req.(*CreateOrUpdateGroupContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_ShowCustomerContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCustomerContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).ShowCustomerContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_ShowCustomerContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).ShowCustomerContact(ctx, req.(*ShowCustomerContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_ShowClinicContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowClinicContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).ShowClinicContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_ShowClinicContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).ShowClinicContact(ctx, req.(*ShowClinicContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_DeleteContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).DeleteContact(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactService_ServiceDesc is the grpc.ServiceDesc for ContactService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coresamples_service.ContactService",
	HandlerType: (*ContactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateContact",
			Handler:    _ContactService_UpdateContact_Handler,
		},
		{
			MethodName: "CreateContact",
			Handler:    _ContactService_CreateContact_Handler,
		},
		{
			MethodName: "UpdateGroupContact",
			Handler:    _ContactService_UpdateGroupContact_Handler,
		},
		{
			MethodName: "CreateOrUpdateGroupContact",
			Handler:    _ContactService_CreateOrUpdateGroupContact_Handler,
		},
		{
			MethodName: "ShowCustomerContact",
			Handler:    _ContactService_ShowCustomerContact_Handler,
		},
		{
			MethodName: "ShowClinicContact",
			Handler:    _ContactService_ShowClinicContact_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _ContactService_DeleteContact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/contact.proto",
}
