// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/internal_user.proto

package coresamples_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for InternalUserService service

func NewInternalUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for InternalUserService service

type InternalUserService interface {
	CreateInternalUser(ctx context.Context, in *CreateInternalUserRequest, opts ...client.CallOption) (*InternalUser, error)
	GetSalesClinics(ctx context.Context, in *ListSalesNameRequest, opts ...client.CallOption) (*ListCustomerPracticeResponse, error)
	GetInternalUser(ctx context.Context, in *GetInternalUserRequest, opts ...client.CallOption) (*GetInternalUserResponse, error)
	TransferSalesCustomer(ctx context.Context, in *TransferSalesCustomerRequest, opts ...client.CallOption) (*TransferSalesCustomerResponse, error)
	GetLowerLevelInternalUsers(ctx context.Context, in *GetLowerLevelInternalUsersRequest, opts ...client.CallOption) (*GetLowerLevelInternalUsersResponse, error)
	SetLowerLevelInternalUsers(ctx context.Context, in *SetLowerLevelInternalUsersRequest, opts ...client.CallOption) (*SetLowerLevelInternalUsersResponse, error)
	CreateSampleNavigatorNote(ctx context.Context, in *CreateSampleNavigatorNoteRequest, opts ...client.CallOption) (*CreateSampleNavigatorNoteResponse, error)
	ModifySampleNavigatorNote(ctx context.Context, in *ModifySampleNavigatorNoteRequest, opts ...client.CallOption) (*ModifySampleNavigatorNoteResponse, error)
	DeleteSampleNavigatorNote(ctx context.Context, in *DeleteSampleNavigatorNoteRequest, opts ...client.CallOption) (*DeleteSampleNavigatorNoteResponse, error)
	GetInternalUserByid(ctx context.Context, in *GetInternalUserByidRequest, opts ...client.CallOption) (*GetInternalUserByidResponse, error)
	CheckCustomerNavigator(ctx context.Context, in *CheckNavigatorCustomerRequest, opts ...client.CallOption) (*CheckNavigatorCustomerResponse, error)
}

type internalUserService struct {
	c    client.Client
	name string
}

func NewInternalUserService(name string, c client.Client) InternalUserService {
	return &internalUserService{
		c:    c,
		name: name,
	}
}

func (c *internalUserService) CreateInternalUser(ctx context.Context, in *CreateInternalUserRequest, opts ...client.CallOption) (*InternalUser, error) {
	req := c.c.NewRequest(c.name, "InternalUserService.CreateInternalUser", in)
	out := new(InternalUser)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserService) GetSalesClinics(ctx context.Context, in *ListSalesNameRequest, opts ...client.CallOption) (*ListCustomerPracticeResponse, error) {
	req := c.c.NewRequest(c.name, "InternalUserService.GetSalesClinics", in)
	out := new(ListCustomerPracticeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserService) GetInternalUser(ctx context.Context, in *GetInternalUserRequest, opts ...client.CallOption) (*GetInternalUserResponse, error) {
	req := c.c.NewRequest(c.name, "InternalUserService.GetInternalUser", in)
	out := new(GetInternalUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserService) TransferSalesCustomer(ctx context.Context, in *TransferSalesCustomerRequest, opts ...client.CallOption) (*TransferSalesCustomerResponse, error) {
	req := c.c.NewRequest(c.name, "InternalUserService.TransferSalesCustomer", in)
	out := new(TransferSalesCustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserService) GetLowerLevelInternalUsers(ctx context.Context, in *GetLowerLevelInternalUsersRequest, opts ...client.CallOption) (*GetLowerLevelInternalUsersResponse, error) {
	req := c.c.NewRequest(c.name, "InternalUserService.GetLowerLevelInternalUsers", in)
	out := new(GetLowerLevelInternalUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserService) SetLowerLevelInternalUsers(ctx context.Context, in *SetLowerLevelInternalUsersRequest, opts ...client.CallOption) (*SetLowerLevelInternalUsersResponse, error) {
	req := c.c.NewRequest(c.name, "InternalUserService.SetLowerLevelInternalUsers", in)
	out := new(SetLowerLevelInternalUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserService) CreateSampleNavigatorNote(ctx context.Context, in *CreateSampleNavigatorNoteRequest, opts ...client.CallOption) (*CreateSampleNavigatorNoteResponse, error) {
	req := c.c.NewRequest(c.name, "InternalUserService.CreateSampleNavigatorNote", in)
	out := new(CreateSampleNavigatorNoteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserService) ModifySampleNavigatorNote(ctx context.Context, in *ModifySampleNavigatorNoteRequest, opts ...client.CallOption) (*ModifySampleNavigatorNoteResponse, error) {
	req := c.c.NewRequest(c.name, "InternalUserService.ModifySampleNavigatorNote", in)
	out := new(ModifySampleNavigatorNoteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserService) DeleteSampleNavigatorNote(ctx context.Context, in *DeleteSampleNavigatorNoteRequest, opts ...client.CallOption) (*DeleteSampleNavigatorNoteResponse, error) {
	req := c.c.NewRequest(c.name, "InternalUserService.DeleteSampleNavigatorNote", in)
	out := new(DeleteSampleNavigatorNoteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserService) GetInternalUserByid(ctx context.Context, in *GetInternalUserByidRequest, opts ...client.CallOption) (*GetInternalUserByidResponse, error) {
	req := c.c.NewRequest(c.name, "InternalUserService.GetInternalUserByid", in)
	out := new(GetInternalUserByidResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalUserService) CheckCustomerNavigator(ctx context.Context, in *CheckNavigatorCustomerRequest, opts ...client.CallOption) (*CheckNavigatorCustomerResponse, error) {
	req := c.c.NewRequest(c.name, "InternalUserService.CheckCustomerNavigator", in)
	out := new(CheckNavigatorCustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InternalUserService service

type InternalUserServiceHandler interface {
	CreateInternalUser(context.Context, *CreateInternalUserRequest, *InternalUser) error
	GetSalesClinics(context.Context, *ListSalesNameRequest, *ListCustomerPracticeResponse) error
	GetInternalUser(context.Context, *GetInternalUserRequest, *GetInternalUserResponse) error
	TransferSalesCustomer(context.Context, *TransferSalesCustomerRequest, *TransferSalesCustomerResponse) error
	GetLowerLevelInternalUsers(context.Context, *GetLowerLevelInternalUsersRequest, *GetLowerLevelInternalUsersResponse) error
	SetLowerLevelInternalUsers(context.Context, *SetLowerLevelInternalUsersRequest, *SetLowerLevelInternalUsersResponse) error
	CreateSampleNavigatorNote(context.Context, *CreateSampleNavigatorNoteRequest, *CreateSampleNavigatorNoteResponse) error
	ModifySampleNavigatorNote(context.Context, *ModifySampleNavigatorNoteRequest, *ModifySampleNavigatorNoteResponse) error
	DeleteSampleNavigatorNote(context.Context, *DeleteSampleNavigatorNoteRequest, *DeleteSampleNavigatorNoteResponse) error
	GetInternalUserByid(context.Context, *GetInternalUserByidRequest, *GetInternalUserByidResponse) error
	CheckCustomerNavigator(context.Context, *CheckNavigatorCustomerRequest, *CheckNavigatorCustomerResponse) error
}

func RegisterInternalUserServiceHandler(s server.Server, hdlr InternalUserServiceHandler, opts ...server.HandlerOption) error {
	type internalUserService interface {
		CreateInternalUser(ctx context.Context, in *CreateInternalUserRequest, out *InternalUser) error
		GetSalesClinics(ctx context.Context, in *ListSalesNameRequest, out *ListCustomerPracticeResponse) error
		GetInternalUser(ctx context.Context, in *GetInternalUserRequest, out *GetInternalUserResponse) error
		TransferSalesCustomer(ctx context.Context, in *TransferSalesCustomerRequest, out *TransferSalesCustomerResponse) error
		GetLowerLevelInternalUsers(ctx context.Context, in *GetLowerLevelInternalUsersRequest, out *GetLowerLevelInternalUsersResponse) error
		SetLowerLevelInternalUsers(ctx context.Context, in *SetLowerLevelInternalUsersRequest, out *SetLowerLevelInternalUsersResponse) error
		CreateSampleNavigatorNote(ctx context.Context, in *CreateSampleNavigatorNoteRequest, out *CreateSampleNavigatorNoteResponse) error
		ModifySampleNavigatorNote(ctx context.Context, in *ModifySampleNavigatorNoteRequest, out *ModifySampleNavigatorNoteResponse) error
		DeleteSampleNavigatorNote(ctx context.Context, in *DeleteSampleNavigatorNoteRequest, out *DeleteSampleNavigatorNoteResponse) error
		GetInternalUserByid(ctx context.Context, in *GetInternalUserByidRequest, out *GetInternalUserByidResponse) error
		CheckCustomerNavigator(ctx context.Context, in *CheckNavigatorCustomerRequest, out *CheckNavigatorCustomerResponse) error
	}
	type InternalUserService struct {
		internalUserService
	}
	h := &internalUserServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&InternalUserService{h}, opts...))
}

type internalUserServiceHandler struct {
	InternalUserServiceHandler
}

func (h *internalUserServiceHandler) CreateInternalUser(ctx context.Context, in *CreateInternalUserRequest, out *InternalUser) error {
	return h.InternalUserServiceHandler.CreateInternalUser(ctx, in, out)
}

func (h *internalUserServiceHandler) GetSalesClinics(ctx context.Context, in *ListSalesNameRequest, out *ListCustomerPracticeResponse) error {
	return h.InternalUserServiceHandler.GetSalesClinics(ctx, in, out)
}

func (h *internalUserServiceHandler) GetInternalUser(ctx context.Context, in *GetInternalUserRequest, out *GetInternalUserResponse) error {
	return h.InternalUserServiceHandler.GetInternalUser(ctx, in, out)
}

func (h *internalUserServiceHandler) TransferSalesCustomer(ctx context.Context, in *TransferSalesCustomerRequest, out *TransferSalesCustomerResponse) error {
	return h.InternalUserServiceHandler.TransferSalesCustomer(ctx, in, out)
}

func (h *internalUserServiceHandler) GetLowerLevelInternalUsers(ctx context.Context, in *GetLowerLevelInternalUsersRequest, out *GetLowerLevelInternalUsersResponse) error {
	return h.InternalUserServiceHandler.GetLowerLevelInternalUsers(ctx, in, out)
}

func (h *internalUserServiceHandler) SetLowerLevelInternalUsers(ctx context.Context, in *SetLowerLevelInternalUsersRequest, out *SetLowerLevelInternalUsersResponse) error {
	return h.InternalUserServiceHandler.SetLowerLevelInternalUsers(ctx, in, out)
}

func (h *internalUserServiceHandler) CreateSampleNavigatorNote(ctx context.Context, in *CreateSampleNavigatorNoteRequest, out *CreateSampleNavigatorNoteResponse) error {
	return h.InternalUserServiceHandler.CreateSampleNavigatorNote(ctx, in, out)
}

func (h *internalUserServiceHandler) ModifySampleNavigatorNote(ctx context.Context, in *ModifySampleNavigatorNoteRequest, out *ModifySampleNavigatorNoteResponse) error {
	return h.InternalUserServiceHandler.ModifySampleNavigatorNote(ctx, in, out)
}

func (h *internalUserServiceHandler) DeleteSampleNavigatorNote(ctx context.Context, in *DeleteSampleNavigatorNoteRequest, out *DeleteSampleNavigatorNoteResponse) error {
	return h.InternalUserServiceHandler.DeleteSampleNavigatorNote(ctx, in, out)
}

func (h *internalUserServiceHandler) GetInternalUserByid(ctx context.Context, in *GetInternalUserByidRequest, out *GetInternalUserByidResponse) error {
	return h.InternalUserServiceHandler.GetInternalUserByid(ctx, in, out)
}

func (h *internalUserServiceHandler) CheckCustomerNavigator(ctx context.Context, in *CheckNavigatorCustomerRequest, out *CheckNavigatorCustomerResponse) error {
	return h.InternalUserServiceHandler.CheckCustomerNavigator(ctx, in, out)
}
