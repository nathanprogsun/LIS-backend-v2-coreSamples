// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/sample_service.proto

// import "google/protobuf/duration.proto";
// import "google/protobuf/timestamp.proto";

package coresamples_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SampleService_ListSampleTests_FullMethodName                           = "/coresamples_service.SampleService/ListSampleTests"
	SampleService_ListSamples_FullMethodName                               = "/coresamples_service.SampleService/ListSamples"
	SampleService_GetSampleTests_FullMethodName                            = "/coresamples_service.SampleService/GetSampleTests"
	SampleService_GetdailyCollectionSamples_FullMethodName                 = "/coresamples_service.SampleService/GetdailyCollectionSamples"
	SampleService_GetdailyCheckNonReceivedSamples_FullMethodName           = "/coresamples_service.SampleService/GetdailyCheckNonReceivedSamples"
	SampleService_GetSampleTubes_FullMethodName                            = "/coresamples_service.SampleService/GetSampleTubes"
	SampleService_GetSampleTubesCount_FullMethodName                       = "/coresamples_service.SampleService/GetSampleTubesCount"
	SampleService_GetMultiSampleTubesCount_FullMethodName                  = "/coresamples_service.SampleService/GetMultiSampleTubesCount"
	SampleService_ListSamplesAccessionID_FullMethodName                    = "/coresamples_service.SampleService/ListSamplesAccessionID"
	SampleService_GetSampleReceiveRecords_FullMethodName                   = "/coresamples_service.SampleService/GetSampleReceiveRecords"
	SampleService_GetSampleReceiveRecordsBatch_FullMethodName              = "/coresamples_service.SampleService/GetSampleReceiveRecordsBatch"
	SampleService_ModifySampleReceiveRecord_FullMethodName                 = "/coresamples_service.SampleService/ModifySampleReceiveRecord"
	SampleService_ReceiveSampleTubes_FullMethodName                        = "/coresamples_service.SampleService/ReceiveSampleTubes"
	SampleService_GetSampleTestsInstrument_FullMethodName                  = "/coresamples_service.SampleService/GetSampleTestsInstrument"
	SampleService_GetTubeSampleTypeInfoViaTubeTypeSymbol_FullMethodName    = "/coresamples_service.SampleService/GetTubeSampleTypeInfoViaTubeTypeSymbol"
	SampleService_GetSampleTubeTypeInfoViaSampleTypeCode_FullMethodName    = "/coresamples_service.SampleService/GetSampleTubeTypeInfoViaSampleTypeCode"
	SampleService_GetSampleTubeTypeInfoViaSampleEmunCode_FullMethodName    = "/coresamples_service.SampleService/GetSampleTubeTypeInfoViaSampleEmunCode"
	SampleService_ListSampleMininumInfo_FullMethodName                     = "/coresamples_service.SampleService/ListSampleMininumInfo"
	SampleService_GenerateSampleID_FullMethodName                          = "/coresamples_service.SampleService/GenerateSampleID"
	SampleService_GenerateBarcodeForSampleID_FullMethodName                = "/coresamples_service.SampleService/GenerateBarcodeForSampleID"
	SampleService_New_SearchSamples_FullMethodName                         = "/coresamples_service.SampleService/new_SearchSamples"
	SampleService_GetSampleEarilestCollectionAndReceiveTime_FullMethodName = "/coresamples_service.SampleService/GetSampleEarilestCollectionAndReceiveTime"
	SampleService_CheckSampleAttributes_FullMethodName                     = "/coresamples_service.SampleService/CheckSampleAttributes"
	SampleService_BatchCheckSampleAttributes_FullMethodName                = "/coresamples_service.SampleService/BatchCheckSampleAttributes"
	SampleService_New_BatchCheckSampleAttributes_FullMethodName            = "/coresamples_service.SampleService/new_BatchCheckSampleAttributes"
	SampleService_FuzzySearchPhlebotomists_FullMethodName                  = "/coresamples_service.SampleService/FuzzySearchPhlebotomists"
)

// SampleServiceClient is the client API for SampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SampleServiceClient interface {
	// rpc CreateSample(CreateSampleRequest) returns (samples){} deprecated
	ListSampleTests(ctx context.Context, in *SampleId, opts ...grpc.CallOption) (*SampleTestId, error)
	ListSamples(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*SampleList, error)
	GetSampleTests(ctx context.Context, in *SampleIdList, opts ...grpc.CallOption) (*SampleTestList, error)
	GetdailyCollectionSamples(ctx context.Context, in *SampleReceivedTime, opts ...grpc.CallOption) (*SampleCollectionList, error)
	GetdailyCheckNonReceivedSamples(ctx context.Context, in *SampleReceivedTime, opts ...grpc.CallOption) (*Sample_NonReceivedList, error)
	// New RPC method after version 0.7.2
	GetSampleTubes(ctx context.Context, in *SampleId, opts ...grpc.CallOption) (*Tubes, error)
	GetSampleTubesCount(ctx context.Context, in *SampleId, opts ...grpc.CallOption) (*Sample_Tubes_Counts_Response, error)
	GetMultiSampleTubesCount(ctx context.Context, in *SampleIdList, opts ...grpc.CallOption) (*GetMultiSampleTubesCountListResponse, error)
	ListSamplesAccessionID(ctx context.Context, in *AccessionIdsList, opts ...grpc.CallOption) (*SampleList, error)
	// TODO: implement this, after patient is in
	//
	//	rpc UpdatePatientBMI(PatientBMI) returns (samples){}
	//
	// New RPC method for PNS
	// TODO: implement this, after patient is in
	//
	//	rpc ListSamplePatient(sample_id_list) returns(ListSamplePatientResponse){}
	//
	// Received Sample Part, Compactable to the inventory service
	// rpc ReceiveSample(ReceiveSampleRequest) returns (ReceiveSampleResponse){}
	GetSampleReceiveRecords(ctx context.Context, in *GetSampleReceiveRecordsRequest, opts ...grpc.CallOption) (*GetSampleReceiveRecordsResponse, error)
	GetSampleReceiveRecordsBatch(ctx context.Context, in *GetSampleReceiveRecordsRequestList, opts ...grpc.CallOption) (*GetSampleReceiveRecordsResponseMap, error)
	ModifySampleReceiveRecord(ctx context.Context, in *ModifySampleReceiveRecordRequest, opts ...grpc.CallOption) (*ModifySampleReceiveRecordResponse, error)
	// TODO: implement this after navigator notes is in
	//
	//	rpc GetSampleNavigatorNotes(GetSampleNavigatorNotesRequest) returns (GetSampleNavigatorNotesResponse){}
	//
	// TODO: implement this, need to figure out the schema here
	//
	//	rpc ListSamplePhlebotomistID(sample_id_list) returns (GetSamplePhlebotomistIDResponse){}
	ReceiveSampleTubes(ctx context.Context, in *ReceiveSampleTubesRequestStaging, opts ...grpc.CallOption) (*ReceiveSampleTubesResponse, error)
	GetSampleTestsInstrument(ctx context.Context, in *SampleIdList, opts ...grpc.CallOption) (*SampleTestInstrumentList, error)
	GetTubeSampleTypeInfoViaTubeTypeSymbol(ctx context.Context, in *GetSampleTypeTubeTypeRequest, opts ...grpc.CallOption) (*GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage, error)
	GetSampleTubeTypeInfoViaSampleTypeCode(ctx context.Context, in *GetSampleTypeBySampleTypeCodeRequest, opts ...grpc.CallOption) (*SampleTybeDetailsWithTubes, error)
	GetSampleTubeTypeInfoViaSampleEmunCode(ctx context.Context, in *GetSampleTypeBySampleTypeEmunRequest, opts ...grpc.CallOption) (*SampleTybeDetailsWithTubes, error)
	// TODO: implement this after patient and customer is in
	//
	//	rpc GetSampleRelevantInfo(sample_id) returns (sampleReleventResponse){}
	ListSampleMininumInfo(ctx context.Context, in *AccessionIdsList, opts ...grpc.CallOption) (*SampleListMininum, error)
	GenerateSampleID(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GenerateSampleIdResponse, error)
	// TODO: save this one until generatesampleid is in and sorted
	GenerateBarcodeForSampleID(ctx context.Context, in *GenerateBarcodeForSampleIdRequest, opts ...grpc.CallOption) (*GenerateBarcodeForSampleIdResponse, error)
	// TODO: save this one later
	//
	//	rpc SearchSamples(SearchSamplesRequest) returns (SearchSamplesResponse){}
	//
	// New version search sample(3/2024)
	New_SearchSamples(ctx context.Context, in *New_SearchSamplesRequest, opts ...grpc.CallOption) (*New_SearchSamplesResponse, error)
	GetSampleEarilestCollectionAndReceiveTime(ctx context.Context, in *GetSampleEarilestCollectionAndReceiveTimeRequest, opts ...grpc.CallOption) (*GetSampleEarilestCollectionAndReceiveTimeResponse, error)
	// check
	CheckSampleAttributes(ctx context.Context, in *CheckSamplesAttributesRequest, opts ...grpc.CallOption) (*CheckSamplesAttributesResponse, error)
	BatchCheckSampleAttributes(ctx context.Context, in *BatchCheckSamplesAttributesRequest, opts ...grpc.CallOption) (*BatchCheckSamplesAttributesResponse, error)
	New_BatchCheckSampleAttributes(ctx context.Context, in *New_BatchCheckSamplesAttributesRequest, opts ...grpc.CallOption) (*New_BatchCheckSamplesAttributesResponse, error)
	// FuzzySearchPhlebotomists
	FuzzySearchPhlebotomists(ctx context.Context, in *FuzzySearchPhlebotomistsRequest, opts ...grpc.CallOption) (*PhlebotomistsResponse, error)
}

type sampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSampleServiceClient(cc grpc.ClientConnInterface) SampleServiceClient {
	return &sampleServiceClient{cc}
}

func (c *sampleServiceClient) ListSampleTests(ctx context.Context, in *SampleId, opts ...grpc.CallOption) (*SampleTestId, error) {
	out := new(SampleTestId)
	err := c.cc.Invoke(ctx, SampleService_ListSampleTests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) ListSamples(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*SampleList, error) {
	out := new(SampleList)
	err := c.cc.Invoke(ctx, SampleService_ListSamples_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) GetSampleTests(ctx context.Context, in *SampleIdList, opts ...grpc.CallOption) (*SampleTestList, error) {
	out := new(SampleTestList)
	err := c.cc.Invoke(ctx, SampleService_GetSampleTests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) GetdailyCollectionSamples(ctx context.Context, in *SampleReceivedTime, opts ...grpc.CallOption) (*SampleCollectionList, error) {
	out := new(SampleCollectionList)
	err := c.cc.Invoke(ctx, SampleService_GetdailyCollectionSamples_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) GetdailyCheckNonReceivedSamples(ctx context.Context, in *SampleReceivedTime, opts ...grpc.CallOption) (*Sample_NonReceivedList, error) {
	out := new(Sample_NonReceivedList)
	err := c.cc.Invoke(ctx, SampleService_GetdailyCheckNonReceivedSamples_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) GetSampleTubes(ctx context.Context, in *SampleId, opts ...grpc.CallOption) (*Tubes, error) {
	out := new(Tubes)
	err := c.cc.Invoke(ctx, SampleService_GetSampleTubes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) GetSampleTubesCount(ctx context.Context, in *SampleId, opts ...grpc.CallOption) (*Sample_Tubes_Counts_Response, error) {
	out := new(Sample_Tubes_Counts_Response)
	err := c.cc.Invoke(ctx, SampleService_GetSampleTubesCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) GetMultiSampleTubesCount(ctx context.Context, in *SampleIdList, opts ...grpc.CallOption) (*GetMultiSampleTubesCountListResponse, error) {
	out := new(GetMultiSampleTubesCountListResponse)
	err := c.cc.Invoke(ctx, SampleService_GetMultiSampleTubesCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) ListSamplesAccessionID(ctx context.Context, in *AccessionIdsList, opts ...grpc.CallOption) (*SampleList, error) {
	out := new(SampleList)
	err := c.cc.Invoke(ctx, SampleService_ListSamplesAccessionID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) GetSampleReceiveRecords(ctx context.Context, in *GetSampleReceiveRecordsRequest, opts ...grpc.CallOption) (*GetSampleReceiveRecordsResponse, error) {
	out := new(GetSampleReceiveRecordsResponse)
	err := c.cc.Invoke(ctx, SampleService_GetSampleReceiveRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) GetSampleReceiveRecordsBatch(ctx context.Context, in *GetSampleReceiveRecordsRequestList, opts ...grpc.CallOption) (*GetSampleReceiveRecordsResponseMap, error) {
	out := new(GetSampleReceiveRecordsResponseMap)
	err := c.cc.Invoke(ctx, SampleService_GetSampleReceiveRecordsBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) ModifySampleReceiveRecord(ctx context.Context, in *ModifySampleReceiveRecordRequest, opts ...grpc.CallOption) (*ModifySampleReceiveRecordResponse, error) {
	out := new(ModifySampleReceiveRecordResponse)
	err := c.cc.Invoke(ctx, SampleService_ModifySampleReceiveRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) ReceiveSampleTubes(ctx context.Context, in *ReceiveSampleTubesRequestStaging, opts ...grpc.CallOption) (*ReceiveSampleTubesResponse, error) {
	out := new(ReceiveSampleTubesResponse)
	err := c.cc.Invoke(ctx, SampleService_ReceiveSampleTubes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) GetSampleTestsInstrument(ctx context.Context, in *SampleIdList, opts ...grpc.CallOption) (*SampleTestInstrumentList, error) {
	out := new(SampleTestInstrumentList)
	err := c.cc.Invoke(ctx, SampleService_GetSampleTestsInstrument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) GetTubeSampleTypeInfoViaTubeTypeSymbol(ctx context.Context, in *GetSampleTypeTubeTypeRequest, opts ...grpc.CallOption) (*GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage, error) {
	out := new(GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage)
	err := c.cc.Invoke(ctx, SampleService_GetTubeSampleTypeInfoViaTubeTypeSymbol_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) GetSampleTubeTypeInfoViaSampleTypeCode(ctx context.Context, in *GetSampleTypeBySampleTypeCodeRequest, opts ...grpc.CallOption) (*SampleTybeDetailsWithTubes, error) {
	out := new(SampleTybeDetailsWithTubes)
	err := c.cc.Invoke(ctx, SampleService_GetSampleTubeTypeInfoViaSampleTypeCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) GetSampleTubeTypeInfoViaSampleEmunCode(ctx context.Context, in *GetSampleTypeBySampleTypeEmunRequest, opts ...grpc.CallOption) (*SampleTybeDetailsWithTubes, error) {
	out := new(SampleTybeDetailsWithTubes)
	err := c.cc.Invoke(ctx, SampleService_GetSampleTubeTypeInfoViaSampleEmunCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) ListSampleMininumInfo(ctx context.Context, in *AccessionIdsList, opts ...grpc.CallOption) (*SampleListMininum, error) {
	out := new(SampleListMininum)
	err := c.cc.Invoke(ctx, SampleService_ListSampleMininumInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) GenerateSampleID(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GenerateSampleIdResponse, error) {
	out := new(GenerateSampleIdResponse)
	err := c.cc.Invoke(ctx, SampleService_GenerateSampleID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) GenerateBarcodeForSampleID(ctx context.Context, in *GenerateBarcodeForSampleIdRequest, opts ...grpc.CallOption) (*GenerateBarcodeForSampleIdResponse, error) {
	out := new(GenerateBarcodeForSampleIdResponse)
	err := c.cc.Invoke(ctx, SampleService_GenerateBarcodeForSampleID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) New_SearchSamples(ctx context.Context, in *New_SearchSamplesRequest, opts ...grpc.CallOption) (*New_SearchSamplesResponse, error) {
	out := new(New_SearchSamplesResponse)
	err := c.cc.Invoke(ctx, SampleService_New_SearchSamples_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) GetSampleEarilestCollectionAndReceiveTime(ctx context.Context, in *GetSampleEarilestCollectionAndReceiveTimeRequest, opts ...grpc.CallOption) (*GetSampleEarilestCollectionAndReceiveTimeResponse, error) {
	out := new(GetSampleEarilestCollectionAndReceiveTimeResponse)
	err := c.cc.Invoke(ctx, SampleService_GetSampleEarilestCollectionAndReceiveTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) CheckSampleAttributes(ctx context.Context, in *CheckSamplesAttributesRequest, opts ...grpc.CallOption) (*CheckSamplesAttributesResponse, error) {
	out := new(CheckSamplesAttributesResponse)
	err := c.cc.Invoke(ctx, SampleService_CheckSampleAttributes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) BatchCheckSampleAttributes(ctx context.Context, in *BatchCheckSamplesAttributesRequest, opts ...grpc.CallOption) (*BatchCheckSamplesAttributesResponse, error) {
	out := new(BatchCheckSamplesAttributesResponse)
	err := c.cc.Invoke(ctx, SampleService_BatchCheckSampleAttributes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) New_BatchCheckSampleAttributes(ctx context.Context, in *New_BatchCheckSamplesAttributesRequest, opts ...grpc.CallOption) (*New_BatchCheckSamplesAttributesResponse, error) {
	out := new(New_BatchCheckSamplesAttributesResponse)
	err := c.cc.Invoke(ctx, SampleService_New_BatchCheckSampleAttributes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) FuzzySearchPhlebotomists(ctx context.Context, in *FuzzySearchPhlebotomistsRequest, opts ...grpc.CallOption) (*PhlebotomistsResponse, error) {
	out := new(PhlebotomistsResponse)
	err := c.cc.Invoke(ctx, SampleService_FuzzySearchPhlebotomists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SampleServiceServer is the server API for SampleService service.
// All implementations must embed UnimplementedSampleServiceServer
// for forward compatibility
type SampleServiceServer interface {
	// rpc CreateSample(CreateSampleRequest) returns (samples){} deprecated
	ListSampleTests(context.Context, *SampleId) (*SampleTestId, error)
	ListSamples(context.Context, *IdList) (*SampleList, error)
	GetSampleTests(context.Context, *SampleIdList) (*SampleTestList, error)
	GetdailyCollectionSamples(context.Context, *SampleReceivedTime) (*SampleCollectionList, error)
	GetdailyCheckNonReceivedSamples(context.Context, *SampleReceivedTime) (*Sample_NonReceivedList, error)
	// New RPC method after version 0.7.2
	GetSampleTubes(context.Context, *SampleId) (*Tubes, error)
	GetSampleTubesCount(context.Context, *SampleId) (*Sample_Tubes_Counts_Response, error)
	GetMultiSampleTubesCount(context.Context, *SampleIdList) (*GetMultiSampleTubesCountListResponse, error)
	ListSamplesAccessionID(context.Context, *AccessionIdsList) (*SampleList, error)
	// TODO: implement this, after patient is in
	//
	//	rpc UpdatePatientBMI(PatientBMI) returns (samples){}
	//
	// New RPC method for PNS
	// TODO: implement this, after patient is in
	//
	//	rpc ListSamplePatient(sample_id_list) returns(ListSamplePatientResponse){}
	//
	// Received Sample Part, Compactable to the inventory service
	// rpc ReceiveSample(ReceiveSampleRequest) returns (ReceiveSampleResponse){}
	GetSampleReceiveRecords(context.Context, *GetSampleReceiveRecordsRequest) (*GetSampleReceiveRecordsResponse, error)
	GetSampleReceiveRecordsBatch(context.Context, *GetSampleReceiveRecordsRequestList) (*GetSampleReceiveRecordsResponseMap, error)
	ModifySampleReceiveRecord(context.Context, *ModifySampleReceiveRecordRequest) (*ModifySampleReceiveRecordResponse, error)
	// TODO: implement this after navigator notes is in
	//
	//	rpc GetSampleNavigatorNotes(GetSampleNavigatorNotesRequest) returns (GetSampleNavigatorNotesResponse){}
	//
	// TODO: implement this, need to figure out the schema here
	//
	//	rpc ListSamplePhlebotomistID(sample_id_list) returns (GetSamplePhlebotomistIDResponse){}
	ReceiveSampleTubes(context.Context, *ReceiveSampleTubesRequestStaging) (*ReceiveSampleTubesResponse, error)
	GetSampleTestsInstrument(context.Context, *SampleIdList) (*SampleTestInstrumentList, error)
	GetTubeSampleTypeInfoViaTubeTypeSymbol(context.Context, *GetSampleTypeTubeTypeRequest) (*GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage, error)
	GetSampleTubeTypeInfoViaSampleTypeCode(context.Context, *GetSampleTypeBySampleTypeCodeRequest) (*SampleTybeDetailsWithTubes, error)
	GetSampleTubeTypeInfoViaSampleEmunCode(context.Context, *GetSampleTypeBySampleTypeEmunRequest) (*SampleTybeDetailsWithTubes, error)
	// TODO: implement this after patient and customer is in
	//
	//	rpc GetSampleRelevantInfo(sample_id) returns (sampleReleventResponse){}
	ListSampleMininumInfo(context.Context, *AccessionIdsList) (*SampleListMininum, error)
	GenerateSampleID(context.Context, *EmptyRequest) (*GenerateSampleIdResponse, error)
	// TODO: save this one until generatesampleid is in and sorted
	GenerateBarcodeForSampleID(context.Context, *GenerateBarcodeForSampleIdRequest) (*GenerateBarcodeForSampleIdResponse, error)
	// TODO: save this one later
	//
	//	rpc SearchSamples(SearchSamplesRequest) returns (SearchSamplesResponse){}
	//
	// New version search sample(3/2024)
	New_SearchSamples(context.Context, *New_SearchSamplesRequest) (*New_SearchSamplesResponse, error)
	GetSampleEarilestCollectionAndReceiveTime(context.Context, *GetSampleEarilestCollectionAndReceiveTimeRequest) (*GetSampleEarilestCollectionAndReceiveTimeResponse, error)
	// check
	CheckSampleAttributes(context.Context, *CheckSamplesAttributesRequest) (*CheckSamplesAttributesResponse, error)
	BatchCheckSampleAttributes(context.Context, *BatchCheckSamplesAttributesRequest) (*BatchCheckSamplesAttributesResponse, error)
	New_BatchCheckSampleAttributes(context.Context, *New_BatchCheckSamplesAttributesRequest) (*New_BatchCheckSamplesAttributesResponse, error)
	// FuzzySearchPhlebotomists
	FuzzySearchPhlebotomists(context.Context, *FuzzySearchPhlebotomistsRequest) (*PhlebotomistsResponse, error)
	mustEmbedUnimplementedSampleServiceServer()
}

// UnimplementedSampleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSampleServiceServer struct {
}

func (UnimplementedSampleServiceServer) ListSampleTests(context.Context, *SampleId) (*SampleTestId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSampleTests not implemented")
}
func (UnimplementedSampleServiceServer) ListSamples(context.Context, *IdList) (*SampleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSamples not implemented")
}
func (UnimplementedSampleServiceServer) GetSampleTests(context.Context, *SampleIdList) (*SampleTestList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleTests not implemented")
}
func (UnimplementedSampleServiceServer) GetdailyCollectionSamples(context.Context, *SampleReceivedTime) (*SampleCollectionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetdailyCollectionSamples not implemented")
}
func (UnimplementedSampleServiceServer) GetdailyCheckNonReceivedSamples(context.Context, *SampleReceivedTime) (*Sample_NonReceivedList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetdailyCheckNonReceivedSamples not implemented")
}
func (UnimplementedSampleServiceServer) GetSampleTubes(context.Context, *SampleId) (*Tubes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleTubes not implemented")
}
func (UnimplementedSampleServiceServer) GetSampleTubesCount(context.Context, *SampleId) (*Sample_Tubes_Counts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleTubesCount not implemented")
}
func (UnimplementedSampleServiceServer) GetMultiSampleTubesCount(context.Context, *SampleIdList) (*GetMultiSampleTubesCountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiSampleTubesCount not implemented")
}
func (UnimplementedSampleServiceServer) ListSamplesAccessionID(context.Context, *AccessionIdsList) (*SampleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSamplesAccessionID not implemented")
}
func (UnimplementedSampleServiceServer) GetSampleReceiveRecords(context.Context, *GetSampleReceiveRecordsRequest) (*GetSampleReceiveRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleReceiveRecords not implemented")
}
func (UnimplementedSampleServiceServer) GetSampleReceiveRecordsBatch(context.Context, *GetSampleReceiveRecordsRequestList) (*GetSampleReceiveRecordsResponseMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleReceiveRecordsBatch not implemented")
}
func (UnimplementedSampleServiceServer) ModifySampleReceiveRecord(context.Context, *ModifySampleReceiveRecordRequest) (*ModifySampleReceiveRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySampleReceiveRecord not implemented")
}
func (UnimplementedSampleServiceServer) ReceiveSampleTubes(context.Context, *ReceiveSampleTubesRequestStaging) (*ReceiveSampleTubesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveSampleTubes not implemented")
}
func (UnimplementedSampleServiceServer) GetSampleTestsInstrument(context.Context, *SampleIdList) (*SampleTestInstrumentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleTestsInstrument not implemented")
}
func (UnimplementedSampleServiceServer) GetTubeSampleTypeInfoViaTubeTypeSymbol(context.Context, *GetSampleTypeTubeTypeRequest) (*GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTubeSampleTypeInfoViaTubeTypeSymbol not implemented")
}
func (UnimplementedSampleServiceServer) GetSampleTubeTypeInfoViaSampleTypeCode(context.Context, *GetSampleTypeBySampleTypeCodeRequest) (*SampleTybeDetailsWithTubes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleTubeTypeInfoViaSampleTypeCode not implemented")
}
func (UnimplementedSampleServiceServer) GetSampleTubeTypeInfoViaSampleEmunCode(context.Context, *GetSampleTypeBySampleTypeEmunRequest) (*SampleTybeDetailsWithTubes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleTubeTypeInfoViaSampleEmunCode not implemented")
}
func (UnimplementedSampleServiceServer) ListSampleMininumInfo(context.Context, *AccessionIdsList) (*SampleListMininum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSampleMininumInfo not implemented")
}
func (UnimplementedSampleServiceServer) GenerateSampleID(context.Context, *EmptyRequest) (*GenerateSampleIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSampleID not implemented")
}
func (UnimplementedSampleServiceServer) GenerateBarcodeForSampleID(context.Context, *GenerateBarcodeForSampleIdRequest) (*GenerateBarcodeForSampleIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateBarcodeForSampleID not implemented")
}
func (UnimplementedSampleServiceServer) New_SearchSamples(context.Context, *New_SearchSamplesRequest) (*New_SearchSamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New_SearchSamples not implemented")
}
func (UnimplementedSampleServiceServer) GetSampleEarilestCollectionAndReceiveTime(context.Context, *GetSampleEarilestCollectionAndReceiveTimeRequest) (*GetSampleEarilestCollectionAndReceiveTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleEarilestCollectionAndReceiveTime not implemented")
}
func (UnimplementedSampleServiceServer) CheckSampleAttributes(context.Context, *CheckSamplesAttributesRequest) (*CheckSamplesAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSampleAttributes not implemented")
}
func (UnimplementedSampleServiceServer) BatchCheckSampleAttributes(context.Context, *BatchCheckSamplesAttributesRequest) (*BatchCheckSamplesAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCheckSampleAttributes not implemented")
}
func (UnimplementedSampleServiceServer) New_BatchCheckSampleAttributes(context.Context, *New_BatchCheckSamplesAttributesRequest) (*New_BatchCheckSamplesAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New_BatchCheckSampleAttributes not implemented")
}
func (UnimplementedSampleServiceServer) FuzzySearchPhlebotomists(context.Context, *FuzzySearchPhlebotomistsRequest) (*PhlebotomistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuzzySearchPhlebotomists not implemented")
}
func (UnimplementedSampleServiceServer) mustEmbedUnimplementedSampleServiceServer() {}

// UnsafeSampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SampleServiceServer will
// result in compilation errors.
type UnsafeSampleServiceServer interface {
	mustEmbedUnimplementedSampleServiceServer()
}

func RegisterSampleServiceServer(s grpc.ServiceRegistrar, srv SampleServiceServer) {
	s.RegisterService(&SampleService_ServiceDesc, srv)
}

func _SampleService_ListSampleTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).ListSampleTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_ListSampleTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).ListSampleTests(ctx, req.(*SampleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_ListSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).ListSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_ListSamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).ListSamples(ctx, req.(*IdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_GetSampleTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).GetSampleTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_GetSampleTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).GetSampleTests(ctx, req.(*SampleIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_GetdailyCollectionSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleReceivedTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).GetdailyCollectionSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_GetdailyCollectionSamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).GetdailyCollectionSamples(ctx, req.(*SampleReceivedTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_GetdailyCheckNonReceivedSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleReceivedTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).GetdailyCheckNonReceivedSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_GetdailyCheckNonReceivedSamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).GetdailyCheckNonReceivedSamples(ctx, req.(*SampleReceivedTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_GetSampleTubes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).GetSampleTubes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_GetSampleTubes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).GetSampleTubes(ctx, req.(*SampleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_GetSampleTubesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).GetSampleTubesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_GetSampleTubesCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).GetSampleTubesCount(ctx, req.(*SampleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_GetMultiSampleTubesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).GetMultiSampleTubesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_GetMultiSampleTubesCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).GetMultiSampleTubesCount(ctx, req.(*SampleIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_ListSamplesAccessionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessionIdsList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).ListSamplesAccessionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_ListSamplesAccessionID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).ListSamplesAccessionID(ctx, req.(*AccessionIdsList))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_GetSampleReceiveRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSampleReceiveRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).GetSampleReceiveRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_GetSampleReceiveRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).GetSampleReceiveRecords(ctx, req.(*GetSampleReceiveRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_GetSampleReceiveRecordsBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSampleReceiveRecordsRequestList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).GetSampleReceiveRecordsBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_GetSampleReceiveRecordsBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).GetSampleReceiveRecordsBatch(ctx, req.(*GetSampleReceiveRecordsRequestList))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_ModifySampleReceiveRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifySampleReceiveRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).ModifySampleReceiveRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_ModifySampleReceiveRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).ModifySampleReceiveRecord(ctx, req.(*ModifySampleReceiveRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_ReceiveSampleTubes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveSampleTubesRequestStaging)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).ReceiveSampleTubes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_ReceiveSampleTubes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).ReceiveSampleTubes(ctx, req.(*ReceiveSampleTubesRequestStaging))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_GetSampleTestsInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).GetSampleTestsInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_GetSampleTestsInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).GetSampleTestsInstrument(ctx, req.(*SampleIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_GetTubeSampleTypeInfoViaTubeTypeSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSampleTypeTubeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).GetTubeSampleTypeInfoViaTubeTypeSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_GetTubeSampleTypeInfoViaTubeTypeSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).GetTubeSampleTypeInfoViaTubeTypeSymbol(ctx, req.(*GetSampleTypeTubeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_GetSampleTubeTypeInfoViaSampleTypeCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSampleTypeBySampleTypeCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).GetSampleTubeTypeInfoViaSampleTypeCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_GetSampleTubeTypeInfoViaSampleTypeCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).GetSampleTubeTypeInfoViaSampleTypeCode(ctx, req.(*GetSampleTypeBySampleTypeCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_GetSampleTubeTypeInfoViaSampleEmunCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSampleTypeBySampleTypeEmunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).GetSampleTubeTypeInfoViaSampleEmunCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_GetSampleTubeTypeInfoViaSampleEmunCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).GetSampleTubeTypeInfoViaSampleEmunCode(ctx, req.(*GetSampleTypeBySampleTypeEmunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_ListSampleMininumInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessionIdsList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).ListSampleMininumInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_ListSampleMininumInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).ListSampleMininumInfo(ctx, req.(*AccessionIdsList))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_GenerateSampleID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).GenerateSampleID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_GenerateSampleID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).GenerateSampleID(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_GenerateBarcodeForSampleID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateBarcodeForSampleIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).GenerateBarcodeForSampleID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_GenerateBarcodeForSampleID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).GenerateBarcodeForSampleID(ctx, req.(*GenerateBarcodeForSampleIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_New_SearchSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(New_SearchSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).New_SearchSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_New_SearchSamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).New_SearchSamples(ctx, req.(*New_SearchSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_GetSampleEarilestCollectionAndReceiveTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSampleEarilestCollectionAndReceiveTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).GetSampleEarilestCollectionAndReceiveTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_GetSampleEarilestCollectionAndReceiveTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).GetSampleEarilestCollectionAndReceiveTime(ctx, req.(*GetSampleEarilestCollectionAndReceiveTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_CheckSampleAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSamplesAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).CheckSampleAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_CheckSampleAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).CheckSampleAttributes(ctx, req.(*CheckSamplesAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_BatchCheckSampleAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCheckSamplesAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).BatchCheckSampleAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_BatchCheckSampleAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).BatchCheckSampleAttributes(ctx, req.(*BatchCheckSamplesAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_New_BatchCheckSampleAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(New_BatchCheckSamplesAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).New_BatchCheckSampleAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_New_BatchCheckSampleAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).New_BatchCheckSampleAttributes(ctx, req.(*New_BatchCheckSamplesAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_FuzzySearchPhlebotomists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuzzySearchPhlebotomistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).FuzzySearchPhlebotomists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_FuzzySearchPhlebotomists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).FuzzySearchPhlebotomists(ctx, req.(*FuzzySearchPhlebotomistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SampleService_ServiceDesc is the grpc.ServiceDesc for SampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coresamples_service.SampleService",
	HandlerType: (*SampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSampleTests",
			Handler:    _SampleService_ListSampleTests_Handler,
		},
		{
			MethodName: "ListSamples",
			Handler:    _SampleService_ListSamples_Handler,
		},
		{
			MethodName: "GetSampleTests",
			Handler:    _SampleService_GetSampleTests_Handler,
		},
		{
			MethodName: "GetdailyCollectionSamples",
			Handler:    _SampleService_GetdailyCollectionSamples_Handler,
		},
		{
			MethodName: "GetdailyCheckNonReceivedSamples",
			Handler:    _SampleService_GetdailyCheckNonReceivedSamples_Handler,
		},
		{
			MethodName: "GetSampleTubes",
			Handler:    _SampleService_GetSampleTubes_Handler,
		},
		{
			MethodName: "GetSampleTubesCount",
			Handler:    _SampleService_GetSampleTubesCount_Handler,
		},
		{
			MethodName: "GetMultiSampleTubesCount",
			Handler:    _SampleService_GetMultiSampleTubesCount_Handler,
		},
		{
			MethodName: "ListSamplesAccessionID",
			Handler:    _SampleService_ListSamplesAccessionID_Handler,
		},
		{
			MethodName: "GetSampleReceiveRecords",
			Handler:    _SampleService_GetSampleReceiveRecords_Handler,
		},
		{
			MethodName: "GetSampleReceiveRecordsBatch",
			Handler:    _SampleService_GetSampleReceiveRecordsBatch_Handler,
		},
		{
			MethodName: "ModifySampleReceiveRecord",
			Handler:    _SampleService_ModifySampleReceiveRecord_Handler,
		},
		{
			MethodName: "ReceiveSampleTubes",
			Handler:    _SampleService_ReceiveSampleTubes_Handler,
		},
		{
			MethodName: "GetSampleTestsInstrument",
			Handler:    _SampleService_GetSampleTestsInstrument_Handler,
		},
		{
			MethodName: "GetTubeSampleTypeInfoViaTubeTypeSymbol",
			Handler:    _SampleService_GetTubeSampleTypeInfoViaTubeTypeSymbol_Handler,
		},
		{
			MethodName: "GetSampleTubeTypeInfoViaSampleTypeCode",
			Handler:    _SampleService_GetSampleTubeTypeInfoViaSampleTypeCode_Handler,
		},
		{
			MethodName: "GetSampleTubeTypeInfoViaSampleEmunCode",
			Handler:    _SampleService_GetSampleTubeTypeInfoViaSampleEmunCode_Handler,
		},
		{
			MethodName: "ListSampleMininumInfo",
			Handler:    _SampleService_ListSampleMininumInfo_Handler,
		},
		{
			MethodName: "GenerateSampleID",
			Handler:    _SampleService_GenerateSampleID_Handler,
		},
		{
			MethodName: "GenerateBarcodeForSampleID",
			Handler:    _SampleService_GenerateBarcodeForSampleID_Handler,
		},
		{
			MethodName: "new_SearchSamples",
			Handler:    _SampleService_New_SearchSamples_Handler,
		},
		{
			MethodName: "GetSampleEarilestCollectionAndReceiveTime",
			Handler:    _SampleService_GetSampleEarilestCollectionAndReceiveTime_Handler,
		},
		{
			MethodName: "CheckSampleAttributes",
			Handler:    _SampleService_CheckSampleAttributes_Handler,
		},
		{
			MethodName: "BatchCheckSampleAttributes",
			Handler:    _SampleService_BatchCheckSampleAttributes_Handler,
		},
		{
			MethodName: "new_BatchCheckSampleAttributes",
			Handler:    _SampleService_New_BatchCheckSampleAttributes_Handler,
		},
		{
			MethodName: "FuzzySearchPhlebotomists",
			Handler:    _SampleService_FuzzySearchPhlebotomists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sample_service.proto",
}
