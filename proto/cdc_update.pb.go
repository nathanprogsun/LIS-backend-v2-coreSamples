// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: proto/cdc_update.proto

package coresamples_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddressCDCUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database string                        `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"` // Database name
	Table    string                        `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`       // Table name
	Type     string                        `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`         // Change type: "insert", "update", or "delete"
	Ts       int64                         `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`            // Timestamp of the change
	Xid      int64                         `protobuf:"varint,5,opt,name=xid,proto3" json:"xid,omitempty"`          // Transaction ID
	Commit   bool                          `protobuf:"varint,6,opt,name=commit,proto3" json:"commit,omitempty"`    // Whether the transaction is committed
	Data     *AddressCDCUpdate_AddressData `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`         // New data (insert/update/delete)
	Old      *AddressCDCUpdate_AddressData `protobuf:"bytes,8,opt,name=old,proto3" json:"old,omitempty"`           // Previous data (for update events only)
}

func (x *AddressCDCUpdate) Reset() {
	*x = AddressCDCUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressCDCUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressCDCUpdate) ProtoMessage() {}

func (x *AddressCDCUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressCDCUpdate.ProtoReflect.Descriptor instead.
func (*AddressCDCUpdate) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{0}
}

func (x *AddressCDCUpdate) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *AddressCDCUpdate) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *AddressCDCUpdate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddressCDCUpdate) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *AddressCDCUpdate) GetXid() int64 {
	if x != nil {
		return x.Xid
	}
	return 0
}

func (x *AddressCDCUpdate) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

func (x *AddressCDCUpdate) GetData() *AddressCDCUpdate_AddressData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AddressCDCUpdate) GetOld() *AddressCDCUpdate_AddressData {
	if x != nil {
		return x.Old
	}
	return nil
}

type ClinicCDCUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database string                `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"` // Database name
	Table    string                `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`       // Table name
	Type     string                `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`         // Change type: "insert", "update", or "delete"
	Ts       int64                 `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`            // Timestamp of the change
	Xid      int64                 `protobuf:"varint,5,opt,name=xid,proto3" json:"xid,omitempty"`          // Transaction ID
	Commit   bool                  `protobuf:"varint,6,opt,name=commit,proto3" json:"commit,omitempty"`    // Whether the transaction is committed
	Data     *ClinicCDCUpdate_Data `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Old      *ClinicCDCUpdate_Data `protobuf:"bytes,8,opt,name=old,proto3" json:"old,omitempty"`
}

func (x *ClinicCDCUpdate) Reset() {
	*x = ClinicCDCUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicCDCUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicCDCUpdate) ProtoMessage() {}

func (x *ClinicCDCUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicCDCUpdate.ProtoReflect.Descriptor instead.
func (*ClinicCDCUpdate) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{1}
}

func (x *ClinicCDCUpdate) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ClinicCDCUpdate) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ClinicCDCUpdate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClinicCDCUpdate) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *ClinicCDCUpdate) GetXid() int64 {
	if x != nil {
		return x.Xid
	}
	return 0
}

func (x *ClinicCDCUpdate) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

func (x *ClinicCDCUpdate) GetData() *ClinicCDCUpdate_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ClinicCDCUpdate) GetOld() *ClinicCDCUpdate_Data {
	if x != nil {
		return x.Old
	}
	return nil
}

type ContactCDCUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database string                        `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Table    string                        `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Type     string                        `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Ts       uint64                        `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	Xid      uint64                        `protobuf:"varint,5,opt,name=xid,proto3" json:"xid,omitempty"`
	Commit   bool                          `protobuf:"varint,6,opt,name=commit,proto3" json:"commit,omitempty"`
	Data     *ContactCDCUpdate_ContactData `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Old      *ContactCDCUpdate_ContactData `protobuf:"bytes,8,opt,name=old,proto3" json:"old,omitempty"`
}

func (x *ContactCDCUpdate) Reset() {
	*x = ContactCDCUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactCDCUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactCDCUpdate) ProtoMessage() {}

func (x *ContactCDCUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactCDCUpdate.ProtoReflect.Descriptor instead.
func (*ContactCDCUpdate) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{2}
}

func (x *ContactCDCUpdate) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ContactCDCUpdate) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ContactCDCUpdate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ContactCDCUpdate) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *ContactCDCUpdate) GetXid() uint64 {
	if x != nil {
		return x.Xid
	}
	return 0
}

func (x *ContactCDCUpdate) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

func (x *ContactCDCUpdate) GetData() *ContactCDCUpdate_ContactData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ContactCDCUpdate) GetOld() *ContactCDCUpdate_ContactData {
	if x != nil {
		return x.Old
	}
	return nil
}

type CustomerCDCUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database string                  `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Table    string                  `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Type     string                  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Ts       uint64                  `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	Xid      uint64                  `protobuf:"varint,5,opt,name=xid,proto3" json:"xid,omitempty"`
	Commit   bool                    `protobuf:"varint,6,opt,name=commit,proto3" json:"commit,omitempty"`
	Data     *CustomerCDCUpdate_Data `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Old      *CustomerCDCUpdate_Data `protobuf:"bytes,8,opt,name=old,proto3" json:"old,omitempty"`
}

func (x *CustomerCDCUpdate) Reset() {
	*x = CustomerCDCUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerCDCUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerCDCUpdate) ProtoMessage() {}

func (x *CustomerCDCUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerCDCUpdate.ProtoReflect.Descriptor instead.
func (*CustomerCDCUpdate) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{3}
}

func (x *CustomerCDCUpdate) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *CustomerCDCUpdate) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *CustomerCDCUpdate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CustomerCDCUpdate) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *CustomerCDCUpdate) GetXid() uint64 {
	if x != nil {
		return x.Xid
	}
	return 0
}

func (x *CustomerCDCUpdate) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

func (x *CustomerCDCUpdate) GetData() *CustomerCDCUpdate_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CustomerCDCUpdate) GetOld() *CustomerCDCUpdate_Data {
	if x != nil {
		return x.Old
	}
	return nil
}

type InternalUserCDCUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database string                      `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Table    string                      `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Type     string                      `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Ts       uint64                      `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	Xid      uint64                      `protobuf:"varint,5,opt,name=xid,proto3" json:"xid,omitempty"`
	Commit   bool                        `protobuf:"varint,6,opt,name=commit,proto3" json:"commit,omitempty"`
	Data     *InternalUserCDCUpdate_Data `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Old      *InternalUserCDCUpdate_Data `protobuf:"bytes,8,opt,name=old,proto3" json:"old,omitempty"`
}

func (x *InternalUserCDCUpdate) Reset() {
	*x = InternalUserCDCUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalUserCDCUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalUserCDCUpdate) ProtoMessage() {}

func (x *InternalUserCDCUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalUserCDCUpdate.ProtoReflect.Descriptor instead.
func (*InternalUserCDCUpdate) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{4}
}

func (x *InternalUserCDCUpdate) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *InternalUserCDCUpdate) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *InternalUserCDCUpdate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *InternalUserCDCUpdate) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *InternalUserCDCUpdate) GetXid() uint64 {
	if x != nil {
		return x.Xid
	}
	return 0
}

func (x *InternalUserCDCUpdate) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

func (x *InternalUserCDCUpdate) GetData() *InternalUserCDCUpdate_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *InternalUserCDCUpdate) GetOld() *InternalUserCDCUpdate_Data {
	if x != nil {
		return x.Old
	}
	return nil
}

type PatientCDCUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database string                 `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"` // Database name
	Table    string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`       // Table name
	Type     string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`         // Change type: "insert", "update", or "delete"
	Ts       int64                  `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`            // Timestamp of the change
	Xid      int64                  `protobuf:"varint,5,opt,name=xid,proto3" json:"xid,omitempty"`          // Transaction ID
	Commit   bool                   `protobuf:"varint,6,opt,name=commit,proto3" json:"commit,omitempty"`    // Whether the transaction is committed
	Data     *PatientCDCUpdate_Data `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Old      *PatientCDCUpdate_Data `protobuf:"bytes,8,opt,name=old,proto3" json:"old,omitempty"`
}

func (x *PatientCDCUpdate) Reset() {
	*x = PatientCDCUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientCDCUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientCDCUpdate) ProtoMessage() {}

func (x *PatientCDCUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientCDCUpdate.ProtoReflect.Descriptor instead.
func (*PatientCDCUpdate) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{5}
}

func (x *PatientCDCUpdate) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *PatientCDCUpdate) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *PatientCDCUpdate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PatientCDCUpdate) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *PatientCDCUpdate) GetXid() int64 {
	if x != nil {
		return x.Xid
	}
	return 0
}

func (x *PatientCDCUpdate) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

func (x *PatientCDCUpdate) GetData() *PatientCDCUpdate_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PatientCDCUpdate) GetOld() *PatientCDCUpdate_Data {
	if x != nil {
		return x.Old
	}
	return nil
}

type SettingCDCUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database string                        `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"` // Database name
	Table    string                        `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`       // Table name
	Type     string                        `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`         // Change type: "insert", "update", or "delete"
	Ts       int64                         `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`            // Timestamp of the change
	Xid      int64                         `protobuf:"varint,5,opt,name=xid,proto3" json:"xid,omitempty"`          // Transaction ID
	Commit   bool                          `protobuf:"varint,6,opt,name=commit,proto3" json:"commit,omitempty"`    // Whether the transaction is committed
	Data     *SettingCDCUpdate_SettingData `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`         // New data (insert/update/delete)
	Old      *SettingCDCUpdate_SettingData `protobuf:"bytes,8,opt,name=old,proto3" json:"old,omitempty"`           // Previous data (for update events only)
}

func (x *SettingCDCUpdate) Reset() {
	*x = SettingCDCUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingCDCUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingCDCUpdate) ProtoMessage() {}

func (x *SettingCDCUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingCDCUpdate.ProtoReflect.Descriptor instead.
func (*SettingCDCUpdate) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{6}
}

func (x *SettingCDCUpdate) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *SettingCDCUpdate) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *SettingCDCUpdate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SettingCDCUpdate) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *SettingCDCUpdate) GetXid() int64 {
	if x != nil {
		return x.Xid
	}
	return 0
}

func (x *SettingCDCUpdate) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

func (x *SettingCDCUpdate) GetData() *SettingCDCUpdate_SettingData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SettingCDCUpdate) GetOld() *SettingCDCUpdate_SettingData {
	if x != nil {
		return x.Old
	}
	return nil
}

type UserCDCUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database string              `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Table    string              `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Type     string              `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Ts       uint64              `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	Xid      uint64              `protobuf:"varint,5,opt,name=xid,proto3" json:"xid,omitempty"`
	Commit   bool                `protobuf:"varint,6,opt,name=commit,proto3" json:"commit,omitempty"`
	Data     *UserCDCUpdate_Data `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Old      *UserCDCUpdate_Data `protobuf:"bytes,8,opt,name=old,proto3" json:"old,omitempty"`
}

func (x *UserCDCUpdate) Reset() {
	*x = UserCDCUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCDCUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCDCUpdate) ProtoMessage() {}

func (x *UserCDCUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCDCUpdate.ProtoReflect.Descriptor instead.
func (*UserCDCUpdate) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{7}
}

func (x *UserCDCUpdate) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *UserCDCUpdate) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *UserCDCUpdate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UserCDCUpdate) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *UserCDCUpdate) GetXid() uint64 {
	if x != nil {
		return x.Xid
	}
	return 0
}

func (x *UserCDCUpdate) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

func (x *UserCDCUpdate) GetData() *UserCDCUpdate_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UserCDCUpdate) GetOld() *UserCDCUpdate_Data {
	if x != nil {
		return x.Old
	}
	return nil
}

type CustomerToPatientCDCUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database string                           `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Table    string                           `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Type     string                           `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Ts       uint64                           `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	Xid      uint64                           `protobuf:"varint,5,opt,name=xid,proto3" json:"xid,omitempty"`
	Commit   bool                             `protobuf:"varint,6,opt,name=commit,proto3" json:"commit,omitempty"`
	Data     *CustomerToPatientCDCUpdate_Data `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Old      *CustomerToPatientCDCUpdate_Data `protobuf:"bytes,8,opt,name=old,proto3" json:"old,omitempty"`
}

func (x *CustomerToPatientCDCUpdate) Reset() {
	*x = CustomerToPatientCDCUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerToPatientCDCUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerToPatientCDCUpdate) ProtoMessage() {}

func (x *CustomerToPatientCDCUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerToPatientCDCUpdate.ProtoReflect.Descriptor instead.
func (*CustomerToPatientCDCUpdate) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{8}
}

func (x *CustomerToPatientCDCUpdate) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *CustomerToPatientCDCUpdate) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *CustomerToPatientCDCUpdate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CustomerToPatientCDCUpdate) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *CustomerToPatientCDCUpdate) GetXid() uint64 {
	if x != nil {
		return x.Xid
	}
	return 0
}

func (x *CustomerToPatientCDCUpdate) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

func (x *CustomerToPatientCDCUpdate) GetData() *CustomerToPatientCDCUpdate_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CustomerToPatientCDCUpdate) GetOld() *CustomerToPatientCDCUpdate_Data {
	if x != nil {
		return x.Old
	}
	return nil
}

type CustomerSettingOnClinicsCDCUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database string                                  `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"` // Database name
	Table    string                                  `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`       // Table name
	Type     string                                  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`         // Change type: "insert", "update", or "delete"
	Ts       int64                                   `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`            // Timestamp of the change
	Xid      int64                                   `protobuf:"varint,5,opt,name=xid,proto3" json:"xid,omitempty"`          // Transaction ID
	Commit   bool                                    `protobuf:"varint,6,opt,name=commit,proto3" json:"commit,omitempty"`    // Whether the transaction is committed
	Data     *CustomerSettingOnClinicsCDCUpdate_Data `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`         // New data (insert/update/delete)
	Old      *CustomerSettingOnClinicsCDCUpdate_Data `protobuf:"bytes,8,opt,name=old,proto3" json:"old,omitempty"`           // Previous data (for update events only)
}

func (x *CustomerSettingOnClinicsCDCUpdate) Reset() {
	*x = CustomerSettingOnClinicsCDCUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerSettingOnClinicsCDCUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerSettingOnClinicsCDCUpdate) ProtoMessage() {}

func (x *CustomerSettingOnClinicsCDCUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerSettingOnClinicsCDCUpdate.ProtoReflect.Descriptor instead.
func (*CustomerSettingOnClinicsCDCUpdate) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{9}
}

func (x *CustomerSettingOnClinicsCDCUpdate) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *CustomerSettingOnClinicsCDCUpdate) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *CustomerSettingOnClinicsCDCUpdate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CustomerSettingOnClinicsCDCUpdate) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *CustomerSettingOnClinicsCDCUpdate) GetXid() int64 {
	if x != nil {
		return x.Xid
	}
	return 0
}

func (x *CustomerSettingOnClinicsCDCUpdate) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

func (x *CustomerSettingOnClinicsCDCUpdate) GetData() *CustomerSettingOnClinicsCDCUpdate_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CustomerSettingOnClinicsCDCUpdate) GetOld() *CustomerSettingOnClinicsCDCUpdate_Data {
	if x != nil {
		return x.Old
	}
	return nil
}

type ClinicToCustomerCDCUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database string                          `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Table    string                          `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Type     string                          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Ts       int64                           `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	Xid      int64                           `protobuf:"varint,5,opt,name=xid,proto3" json:"xid,omitempty"`
	Commit   bool                            `protobuf:"varint,6,opt,name=commit,proto3" json:"commit,omitempty"`
	Data     *ClinicToCustomerCDCUpdate_Data `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Old      *ClinicToCustomerCDCUpdate_Data `protobuf:"bytes,8,opt,name=old,proto3" json:"old,omitempty"`
}

func (x *ClinicToCustomerCDCUpdate) Reset() {
	*x = ClinicToCustomerCDCUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicToCustomerCDCUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicToCustomerCDCUpdate) ProtoMessage() {}

func (x *ClinicToCustomerCDCUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicToCustomerCDCUpdate.ProtoReflect.Descriptor instead.
func (*ClinicToCustomerCDCUpdate) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{10}
}

func (x *ClinicToCustomerCDCUpdate) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ClinicToCustomerCDCUpdate) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ClinicToCustomerCDCUpdate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClinicToCustomerCDCUpdate) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *ClinicToCustomerCDCUpdate) GetXid() int64 {
	if x != nil {
		return x.Xid
	}
	return 0
}

func (x *ClinicToCustomerCDCUpdate) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

func (x *ClinicToCustomerCDCUpdate) GetData() *ClinicToCustomerCDCUpdate_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ClinicToCustomerCDCUpdate) GetOld() *ClinicToCustomerCDCUpdate_Data {
	if x != nil {
		return x.Old
	}
	return nil
}

type ClinicToPatientCDCUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database string                         `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"` // Database name
	Table    string                         `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`       // Table name
	Type     string                         `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`         // Change type: "insert", "update", or "delete"
	Ts       int64                          `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`            // Timestamp of the change
	Xid      int64                          `protobuf:"varint,5,opt,name=xid,proto3" json:"xid,omitempty"`          // Transaction ID
	Commit   bool                           `protobuf:"varint,6,opt,name=commit,proto3" json:"commit,omitempty"`    // Whether the transaction is committed
	Data     *ClinicToPatientCDCUpdate_Data `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Old      *ClinicToPatientCDCUpdate_Data `protobuf:"bytes,8,opt,name=old,proto3" json:"old,omitempty"`
}

func (x *ClinicToPatientCDCUpdate) Reset() {
	*x = ClinicToPatientCDCUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicToPatientCDCUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicToPatientCDCUpdate) ProtoMessage() {}

func (x *ClinicToPatientCDCUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicToPatientCDCUpdate.ProtoReflect.Descriptor instead.
func (*ClinicToPatientCDCUpdate) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{11}
}

func (x *ClinicToPatientCDCUpdate) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ClinicToPatientCDCUpdate) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ClinicToPatientCDCUpdate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClinicToPatientCDCUpdate) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *ClinicToPatientCDCUpdate) GetXid() int64 {
	if x != nil {
		return x.Xid
	}
	return 0
}

func (x *ClinicToPatientCDCUpdate) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

func (x *ClinicToPatientCDCUpdate) GetData() *ClinicToPatientCDCUpdate_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ClinicToPatientCDCUpdate) GetOld() *ClinicToPatientCDCUpdate_Data {
	if x != nil {
		return x.Old
	}
	return nil
}

type ClinicToSettingCDCUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database string                         `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"` // Database name
	Table    string                         `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`       // Table name
	Type     string                         `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`         // Change type: "insert", "update", or "delete"
	Ts       int64                          `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`            // Timestamp of the change
	Xid      int64                          `protobuf:"varint,5,opt,name=xid,proto3" json:"xid,omitempty"`          // Transaction ID
	Commit   bool                           `protobuf:"varint,6,opt,name=commit,proto3" json:"commit,omitempty"`    // Whether the transaction is committed
	Data     *ClinicToSettingCDCUpdate_Data `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`         // New data
	Old      *ClinicToSettingCDCUpdate_Data `protobuf:"bytes,8,opt,name=old,proto3" json:"old,omitempty"`           // Old data (for update events only)
}

func (x *ClinicToSettingCDCUpdate) Reset() {
	*x = ClinicToSettingCDCUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicToSettingCDCUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicToSettingCDCUpdate) ProtoMessage() {}

func (x *ClinicToSettingCDCUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicToSettingCDCUpdate.ProtoReflect.Descriptor instead.
func (*ClinicToSettingCDCUpdate) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{12}
}

func (x *ClinicToSettingCDCUpdate) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ClinicToSettingCDCUpdate) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ClinicToSettingCDCUpdate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClinicToSettingCDCUpdate) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *ClinicToSettingCDCUpdate) GetXid() int64 {
	if x != nil {
		return x.Xid
	}
	return 0
}

func (x *ClinicToSettingCDCUpdate) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

func (x *ClinicToSettingCDCUpdate) GetData() *ClinicToSettingCDCUpdate_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ClinicToSettingCDCUpdate) GetOld() *ClinicToSettingCDCUpdate_Data {
	if x != nil {
		return x.Old
	}
	return nil
}

// Address Data Schema
type AddressCDCUpdate_AddressData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressId                 int32  `protobuf:"varint,1,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`                                                        // Unique identifier for the address
	AddressType               string `protobuf:"bytes,2,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`                                                   // Type of the address (e.g., home, business)
	StreetAddress             string `protobuf:"bytes,3,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`                                             // Street address
	AptPo                     string `protobuf:"bytes,4,opt,name=apt_po,json=aptPo,proto3" json:"apt_po,omitempty"`                                                                     // Apartment or PO Box
	City                      string `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`                                                                                    // City
	Country                   string `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`                                                                              // Country
	AddressConfirmed          int32  `protobuf:"varint,7,opt,name=address_confirmed,json=addressConfirmed,proto3" json:"address_confirmed,omitempty"`                                   // Whether the address is confirmed
	IsPrimaryAddress          int32  `protobuf:"varint,8,opt,name=is_primary_address,json=isPrimaryAddress,proto3" json:"is_primary_address,omitempty"`                                 // Whether this is the primary address
	CustomerId                int32  `protobuf:"varint,9,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`                                                     // Associated Customer ID
	PatientId                 int32  `protobuf:"varint,10,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`                                                       // Associated Patient ID
	ClinicId                  int32  `protobuf:"varint,11,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`                                                          // Associated Clinic ID
	InternalUserId            int32  `protobuf:"varint,12,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`                                      // Associated Internal User ID
	AddressLevel              int32  `protobuf:"varint,13,opt,name=address_level,json=addressLevel,proto3" json:"address_level,omitempty"`                                              // Address hierarchy level
	AddressLevelName          string `protobuf:"bytes,14,opt,name=address_level_name,json=addressLevelName,proto3" json:"address_level_name,omitempty"`                                 // Address level name (e.g., "Customer")
	ApplyToAllGroupMember     int32  `protobuf:"varint,15,opt,name=apply_to_all_group_member,json=applyToAllGroupMember,proto3" json:"apply_to_all_group_member,omitempty"`             // Apply this setting to all group members
	GroupAddressId            int32  `protobuf:"varint,16,opt,name=group_address_id,json=groupAddressId,proto3" json:"group_address_id,omitempty"`                                      // ID for group address (if applicable)
	IsGroupAddress            int32  `protobuf:"varint,17,opt,name=is_group_address,json=isGroupAddress,proto3" json:"is_group_address,omitempty"`                                      // Whether it's a group address
	UseAsDefaultCreateAddress int32  `protobuf:"varint,18,opt,name=use_as_default_create_address,json=useAsDefaultCreateAddress,proto3" json:"use_as_default_create_address,omitempty"` // Use as default for new address creation
	UseGroupAddress           int32  `protobuf:"varint,19,opt,name=use_group_address,json=useGroupAddress,proto3" json:"use_group_address,omitempty"`                                   // Whether to use group address
}

func (x *AddressCDCUpdate_AddressData) Reset() {
	*x = AddressCDCUpdate_AddressData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressCDCUpdate_AddressData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressCDCUpdate_AddressData) ProtoMessage() {}

func (x *AddressCDCUpdate_AddressData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressCDCUpdate_AddressData.ProtoReflect.Descriptor instead.
func (*AddressCDCUpdate_AddressData) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AddressCDCUpdate_AddressData) GetAddressId() int32 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *AddressCDCUpdate_AddressData) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *AddressCDCUpdate_AddressData) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

func (x *AddressCDCUpdate_AddressData) GetAptPo() string {
	if x != nil {
		return x.AptPo
	}
	return ""
}

func (x *AddressCDCUpdate_AddressData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *AddressCDCUpdate_AddressData) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AddressCDCUpdate_AddressData) GetAddressConfirmed() int32 {
	if x != nil {
		return x.AddressConfirmed
	}
	return 0
}

func (x *AddressCDCUpdate_AddressData) GetIsPrimaryAddress() int32 {
	if x != nil {
		return x.IsPrimaryAddress
	}
	return 0
}

func (x *AddressCDCUpdate_AddressData) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *AddressCDCUpdate_AddressData) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *AddressCDCUpdate_AddressData) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *AddressCDCUpdate_AddressData) GetInternalUserId() int32 {
	if x != nil {
		return x.InternalUserId
	}
	return 0
}

func (x *AddressCDCUpdate_AddressData) GetAddressLevel() int32 {
	if x != nil {
		return x.AddressLevel
	}
	return 0
}

func (x *AddressCDCUpdate_AddressData) GetAddressLevelName() string {
	if x != nil {
		return x.AddressLevelName
	}
	return ""
}

func (x *AddressCDCUpdate_AddressData) GetApplyToAllGroupMember() int32 {
	if x != nil {
		return x.ApplyToAllGroupMember
	}
	return 0
}

func (x *AddressCDCUpdate_AddressData) GetGroupAddressId() int32 {
	if x != nil {
		return x.GroupAddressId
	}
	return 0
}

func (x *AddressCDCUpdate_AddressData) GetIsGroupAddress() int32 {
	if x != nil {
		return x.IsGroupAddress
	}
	return 0
}

func (x *AddressCDCUpdate_AddressData) GetUseAsDefaultCreateAddress() int32 {
	if x != nil {
		return x.UseAsDefaultCreateAddress
	}
	return 0
}

func (x *AddressCDCUpdate_AddressData) GetUseGroupAddress() int32 {
	if x != nil {
		return x.UseGroupAddress
	}
	return 0
}

type ClinicCDCUpdate_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicId            int32  `protobuf:"varint,1,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	ClinicName          string `protobuf:"bytes,2,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
	UserId              int32  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ClinicType          string `protobuf:"bytes,4,opt,name=clinic_type,json=clinicType,proto3" json:"clinic_type,omitempty"`
	IsActive            int32  `protobuf:"varint,5,opt,name=isActive,proto3" json:"isActive,omitempty"`
	ClinicAccountId     int32  `protobuf:"varint,6,opt,name=clinic_account_id,json=clinicAccountId,proto3" json:"clinic_account_id,omitempty"`
	ClinicNpiNumber     string `protobuf:"bytes,7,opt,name=clinic_npi_number,json=clinicNpiNumber,proto3" json:"clinic_npi_number,omitempty"`
	ClinicPermission    string `protobuf:"bytes,8,opt,name=clinic_permission,json=clinicPermission,proto3" json:"clinic_permission,omitempty"`
	ClinicNameOldSystem string `protobuf:"bytes,9,opt,name=clinic_name_old_system,json=clinicNameOldSystem,proto3" json:"clinic_name_old_system,omitempty"`
	ClinicSignupTime    string `protobuf:"bytes,10,opt,name=clinic_signup_time,json=clinicSignupTime,proto3" json:"clinic_signup_time,omitempty"`
	ClinicUpdatedTime   string `protobuf:"bytes,11,opt,name=clinic_updated_time,json=clinicUpdatedTime,proto3" json:"clinic_updated_time,omitempty"`
}

func (x *ClinicCDCUpdate_Data) Reset() {
	*x = ClinicCDCUpdate_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicCDCUpdate_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicCDCUpdate_Data) ProtoMessage() {}

func (x *ClinicCDCUpdate_Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicCDCUpdate_Data.ProtoReflect.Descriptor instead.
func (*ClinicCDCUpdate_Data) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ClinicCDCUpdate_Data) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *ClinicCDCUpdate_Data) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

func (x *ClinicCDCUpdate_Data) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ClinicCDCUpdate_Data) GetClinicType() string {
	if x != nil {
		return x.ClinicType
	}
	return ""
}

func (x *ClinicCDCUpdate_Data) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *ClinicCDCUpdate_Data) GetClinicAccountId() int32 {
	if x != nil {
		return x.ClinicAccountId
	}
	return 0
}

func (x *ClinicCDCUpdate_Data) GetClinicNpiNumber() string {
	if x != nil {
		return x.ClinicNpiNumber
	}
	return ""
}

func (x *ClinicCDCUpdate_Data) GetClinicPermission() string {
	if x != nil {
		return x.ClinicPermission
	}
	return ""
}

func (x *ClinicCDCUpdate_Data) GetClinicNameOldSystem() string {
	if x != nil {
		return x.ClinicNameOldSystem
	}
	return ""
}

func (x *ClinicCDCUpdate_Data) GetClinicSignupTime() string {
	if x != nil {
		return x.ClinicSignupTime
	}
	return ""
}

func (x *ClinicCDCUpdate_Data) GetClinicUpdatedTime() string {
	if x != nil {
		return x.ClinicUpdatedTime
	}
	return ""
}

type ContactCDCUpdate_ContactData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactId                 int32  `protobuf:"varint,1,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	ContactDescription        string `protobuf:"bytes,2,opt,name=contact_description,json=contactDescription,proto3" json:"contact_description,omitempty"`
	ContactDetails            string `protobuf:"bytes,3,opt,name=contact_details,json=contactDetails,proto3" json:"contact_details,omitempty"`
	ContactType               string `protobuf:"bytes,4,opt,name=contact_type,json=contactType,proto3" json:"contact_type,omitempty"`
	IsPrimaryContact          int32  `protobuf:"varint,5,opt,name=is_primary_contact,json=isPrimaryContact,proto3" json:"is_primary_contact,omitempty"`
	Is_2FaContact             int32  `protobuf:"varint,6,opt,name=is_2fa_contact,json=is2faContact,proto3" json:"is_2fa_contact,omitempty"`
	CustomerId                int32  `protobuf:"varint,7,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	PatientId                 int32  `protobuf:"varint,8,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	ClinicId                  int32  `protobuf:"varint,9,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	InternalUserId            int32  `protobuf:"varint,10,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
	UserId                    int32  `protobuf:"varint,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ApplyToAllGroupMember     int32  `protobuf:"varint,12,opt,name=applyToAllGroupMember,proto3" json:"applyToAllGroupMember,omitempty"`
	ContactLevel              int32  `protobuf:"varint,13,opt,name=contact_level,json=contactLevel,proto3" json:"contact_level,omitempty"`
	ContactLevelName          string `protobuf:"bytes,14,opt,name=contact_level_name,json=contactLevelName,proto3" json:"contact_level_name,omitempty"`
	GroupContactId            int32  `protobuf:"varint,15,opt,name=group_contact_id,json=groupContactId,proto3" json:"group_contact_id,omitempty"`
	HasGroupContact           int32  `protobuf:"varint,16,opt,name=hasGroupContact,proto3" json:"hasGroupContact,omitempty"`
	IsGroupContact            int32  `protobuf:"varint,17,opt,name=isGroupContact,proto3" json:"isGroupContact,omitempty"`
	UseAsDefaultCreateContact int32  `protobuf:"varint,18,opt,name=useAsDefaultCreateContact,proto3" json:"useAsDefaultCreateContact,omitempty"`
	UseGroupContact           int32  `protobuf:"varint,19,opt,name=useGroupContact,proto3" json:"useGroupContact,omitempty"`
}

func (x *ContactCDCUpdate_ContactData) Reset() {
	*x = ContactCDCUpdate_ContactData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactCDCUpdate_ContactData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactCDCUpdate_ContactData) ProtoMessage() {}

func (x *ContactCDCUpdate_ContactData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactCDCUpdate_ContactData.ProtoReflect.Descriptor instead.
func (*ContactCDCUpdate_ContactData) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ContactCDCUpdate_ContactData) GetContactId() int32 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *ContactCDCUpdate_ContactData) GetContactDescription() string {
	if x != nil {
		return x.ContactDescription
	}
	return ""
}

func (x *ContactCDCUpdate_ContactData) GetContactDetails() string {
	if x != nil {
		return x.ContactDetails
	}
	return ""
}

func (x *ContactCDCUpdate_ContactData) GetContactType() string {
	if x != nil {
		return x.ContactType
	}
	return ""
}

func (x *ContactCDCUpdate_ContactData) GetIsPrimaryContact() int32 {
	if x != nil {
		return x.IsPrimaryContact
	}
	return 0
}

func (x *ContactCDCUpdate_ContactData) GetIs_2FaContact() int32 {
	if x != nil {
		return x.Is_2FaContact
	}
	return 0
}

func (x *ContactCDCUpdate_ContactData) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *ContactCDCUpdate_ContactData) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *ContactCDCUpdate_ContactData) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *ContactCDCUpdate_ContactData) GetInternalUserId() int32 {
	if x != nil {
		return x.InternalUserId
	}
	return 0
}

func (x *ContactCDCUpdate_ContactData) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContactCDCUpdate_ContactData) GetApplyToAllGroupMember() int32 {
	if x != nil {
		return x.ApplyToAllGroupMember
	}
	return 0
}

func (x *ContactCDCUpdate_ContactData) GetContactLevel() int32 {
	if x != nil {
		return x.ContactLevel
	}
	return 0
}

func (x *ContactCDCUpdate_ContactData) GetContactLevelName() string {
	if x != nil {
		return x.ContactLevelName
	}
	return ""
}

func (x *ContactCDCUpdate_ContactData) GetGroupContactId() int32 {
	if x != nil {
		return x.GroupContactId
	}
	return 0
}

func (x *ContactCDCUpdate_ContactData) GetHasGroupContact() int32 {
	if x != nil {
		return x.HasGroupContact
	}
	return 0
}

func (x *ContactCDCUpdate_ContactData) GetIsGroupContact() int32 {
	if x != nil {
		return x.IsGroupContact
	}
	return 0
}

func (x *ContactCDCUpdate_ContactData) GetUseAsDefaultCreateContact() int32 {
	if x != nil {
		return x.UseAsDefaultCreateContact
	}
	return 0
}

func (x *ContactCDCUpdate_ContactData) GetUseGroupContact() int32 {
	if x != nil {
		return x.UseGroupContact
	}
	return 0
}

type CustomerCDCUpdate_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId                      int32  `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	UserId                          int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CustomerType                    string `protobuf:"bytes,3,opt,name=customer_type,json=customerType,proto3" json:"customer_type,omitempty"`
	CustomerFirstName               string `protobuf:"bytes,4,opt,name=customer_first_name,json=customerFirstName,proto3" json:"customer_first_name,omitempty"`
	CustomerLastName                string `protobuf:"bytes,5,opt,name=customer_last_name,json=customerLastName,proto3" json:"customer_last_name,omitempty"`
	CustomerMiddleName              string `protobuf:"bytes,6,opt,name=customer_middle_name,json=customerMiddleName,proto3" json:"customer_middle_name,omitempty"`
	CustomerTypeId                  string `protobuf:"bytes,7,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
	CustomerSuffix                  string `protobuf:"bytes,8,opt,name=customer_suffix,json=customerSuffix,proto3" json:"customer_suffix,omitempty"`
	CustomerSamplesReceived         string `protobuf:"bytes,9,opt,name=customer_samples_received,json=customerSamplesReceived,proto3" json:"customer_samples_received,omitempty"`
	CustomerRequestSubmitTime       string `protobuf:"bytes,10,opt,name=customer_request_submit_time,json=customerRequestSubmitTime,proto3" json:"customer_request_submit_time,omitempty"`
	CustomerSignupTime              string `protobuf:"bytes,11,opt,name=customer_signup_time,json=customerSignupTime,proto3" json:"customer_signup_time,omitempty"`
	CustomerPaymentMethod           string `protobuf:"bytes,12,opt,name=customer_payment_method,json=customerPaymentMethod,proto3" json:"customer_payment_method,omitempty"`
	IsActive                        int32  `protobuf:"varint,13,opt,name=isActive,proto3" json:"isActive,omitempty"`
	SalesId                         int32  `protobuf:"varint,14,opt,name=sales_id,json=salesId,proto3" json:"sales_id,omitempty"`
	CustomerNpiNumber               string `protobuf:"bytes,15,opt,name=customer_npi_number,json=customerNpiNumber,proto3" json:"customer_npi_number,omitempty"`
	CustomerPermission              string `protobuf:"bytes,16,opt,name=customer_permission,json=customerPermission,proto3" json:"customer_permission,omitempty"`
	ReferralSource                  string `protobuf:"bytes,17,opt,name=referral_source,json=referralSource,proto3" json:"referral_source,omitempty"`
	OrderPlacementAllowed           int32  `protobuf:"varint,18,opt,name=order_placement_allowed,json=orderPlacementAllowed,proto3" json:"order_placement_allowed,omitempty"`
	BetaProgramEnabled              int32  `protobuf:"varint,19,opt,name=beta_program_enabled,json=betaProgramEnabled,proto3" json:"beta_program_enabled,omitempty"`
	OnboardingQuestionnaireFilledOn string `protobuf:"bytes,20,opt,name=onboarding_questionnaire_filled_on,json=onboardingQuestionnaireFilledOn,proto3" json:"onboarding_questionnaire_filled_on,omitempty"`
}

func (x *CustomerCDCUpdate_Data) Reset() {
	*x = CustomerCDCUpdate_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerCDCUpdate_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerCDCUpdate_Data) ProtoMessage() {}

func (x *CustomerCDCUpdate_Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerCDCUpdate_Data.ProtoReflect.Descriptor instead.
func (*CustomerCDCUpdate_Data) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CustomerCDCUpdate_Data) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CustomerCDCUpdate_Data) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CustomerCDCUpdate_Data) GetCustomerType() string {
	if x != nil {
		return x.CustomerType
	}
	return ""
}

func (x *CustomerCDCUpdate_Data) GetCustomerFirstName() string {
	if x != nil {
		return x.CustomerFirstName
	}
	return ""
}

func (x *CustomerCDCUpdate_Data) GetCustomerLastName() string {
	if x != nil {
		return x.CustomerLastName
	}
	return ""
}

func (x *CustomerCDCUpdate_Data) GetCustomerMiddleName() string {
	if x != nil {
		return x.CustomerMiddleName
	}
	return ""
}

func (x *CustomerCDCUpdate_Data) GetCustomerTypeId() string {
	if x != nil {
		return x.CustomerTypeId
	}
	return ""
}

func (x *CustomerCDCUpdate_Data) GetCustomerSuffix() string {
	if x != nil {
		return x.CustomerSuffix
	}
	return ""
}

func (x *CustomerCDCUpdate_Data) GetCustomerSamplesReceived() string {
	if x != nil {
		return x.CustomerSamplesReceived
	}
	return ""
}

func (x *CustomerCDCUpdate_Data) GetCustomerRequestSubmitTime() string {
	if x != nil {
		return x.CustomerRequestSubmitTime
	}
	return ""
}

func (x *CustomerCDCUpdate_Data) GetCustomerSignupTime() string {
	if x != nil {
		return x.CustomerSignupTime
	}
	return ""
}

func (x *CustomerCDCUpdate_Data) GetCustomerPaymentMethod() string {
	if x != nil {
		return x.CustomerPaymentMethod
	}
	return ""
}

func (x *CustomerCDCUpdate_Data) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *CustomerCDCUpdate_Data) GetSalesId() int32 {
	if x != nil {
		return x.SalesId
	}
	return 0
}

func (x *CustomerCDCUpdate_Data) GetCustomerNpiNumber() string {
	if x != nil {
		return x.CustomerNpiNumber
	}
	return ""
}

func (x *CustomerCDCUpdate_Data) GetCustomerPermission() string {
	if x != nil {
		return x.CustomerPermission
	}
	return ""
}

func (x *CustomerCDCUpdate_Data) GetReferralSource() string {
	if x != nil {
		return x.ReferralSource
	}
	return ""
}

func (x *CustomerCDCUpdate_Data) GetOrderPlacementAllowed() int32 {
	if x != nil {
		return x.OrderPlacementAllowed
	}
	return 0
}

func (x *CustomerCDCUpdate_Data) GetBetaProgramEnabled() int32 {
	if x != nil {
		return x.BetaProgramEnabled
	}
	return 0
}

func (x *CustomerCDCUpdate_Data) GetOnboardingQuestionnaireFilledOn() string {
	if x != nil {
		return x.OnboardingQuestionnaireFilledOn
	}
	return ""
}

type InternalUserCDCUpdate_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalUserId         int32  `protobuf:"varint,1,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
	InternalUserRole       string `protobuf:"bytes,2,opt,name=internal_user_role,json=internalUserRole,proto3" json:"internal_user_role,omitempty"`
	InternalUserName       string `protobuf:"bytes,3,opt,name=internal_user_name,json=internalUserName,proto3" json:"internal_user_name,omitempty"`
	InternalUserFirstname  string `protobuf:"bytes,4,opt,name=internal_user_firstname,json=internalUserFirstname,proto3" json:"internal_user_firstname,omitempty"`
	InternalUserLastname   string `protobuf:"bytes,5,opt,name=internal_user_lastname,json=internalUserLastname,proto3" json:"internal_user_lastname,omitempty"`
	InternalUserMiddlename string `protobuf:"bytes,6,opt,name=internal_user_middlename,json=internalUserMiddlename,proto3" json:"internal_user_middlename,omitempty"`
	InternalUserTypeId     string `protobuf:"bytes,7,opt,name=internal_user_type_id,json=internalUserTypeId,proto3" json:"internal_user_type_id,omitempty"`
	InternalUserIsFullTime int32  `protobuf:"varint,8,opt,name=internal_user_is_full_time,json=internalUserIsFullTime,proto3" json:"internal_user_is_full_time,omitempty"`
	InternalUserRegion     int32  `protobuf:"varint,9,opt,name=internal_user_region,json=internalUserRegion,proto3" json:"internal_user_region,omitempty"`
	InternalUserEmail      string `protobuf:"bytes,10,opt,name=internal_user_email,json=internalUserEmail,proto3" json:"internal_user_email,omitempty"`
	InternalUserPhone      string `protobuf:"bytes,11,opt,name=internal_user_phone,json=internalUserPhone,proto3" json:"internal_user_phone,omitempty"`
	IsActive               int32  `protobuf:"varint,12,opt,name=isActive,proto3" json:"isActive,omitempty"`
	Username               string `protobuf:"bytes,13,opt,name=username,proto3" json:"username,omitempty"`
	UserId                 int32  `protobuf:"varint,14,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InternalUserType       string `protobuf:"bytes,15,opt,name=internal_user_type,json=internalUserType,proto3" json:"internal_user_type,omitempty"`
	InternalUserRoleId     int32  `protobuf:"varint,16,opt,name=internal_user_role_id,json=internalUserRoleId,proto3" json:"internal_user_role_id,omitempty"`
}

func (x *InternalUserCDCUpdate_Data) Reset() {
	*x = InternalUserCDCUpdate_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalUserCDCUpdate_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalUserCDCUpdate_Data) ProtoMessage() {}

func (x *InternalUserCDCUpdate_Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalUserCDCUpdate_Data.ProtoReflect.Descriptor instead.
func (*InternalUserCDCUpdate_Data) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{4, 0}
}

func (x *InternalUserCDCUpdate_Data) GetInternalUserId() int32 {
	if x != nil {
		return x.InternalUserId
	}
	return 0
}

func (x *InternalUserCDCUpdate_Data) GetInternalUserRole() string {
	if x != nil {
		return x.InternalUserRole
	}
	return ""
}

func (x *InternalUserCDCUpdate_Data) GetInternalUserName() string {
	if x != nil {
		return x.InternalUserName
	}
	return ""
}

func (x *InternalUserCDCUpdate_Data) GetInternalUserFirstname() string {
	if x != nil {
		return x.InternalUserFirstname
	}
	return ""
}

func (x *InternalUserCDCUpdate_Data) GetInternalUserLastname() string {
	if x != nil {
		return x.InternalUserLastname
	}
	return ""
}

func (x *InternalUserCDCUpdate_Data) GetInternalUserMiddlename() string {
	if x != nil {
		return x.InternalUserMiddlename
	}
	return ""
}

func (x *InternalUserCDCUpdate_Data) GetInternalUserTypeId() string {
	if x != nil {
		return x.InternalUserTypeId
	}
	return ""
}

func (x *InternalUserCDCUpdate_Data) GetInternalUserIsFullTime() int32 {
	if x != nil {
		return x.InternalUserIsFullTime
	}
	return 0
}

func (x *InternalUserCDCUpdate_Data) GetInternalUserRegion() int32 {
	if x != nil {
		return x.InternalUserRegion
	}
	return 0
}

func (x *InternalUserCDCUpdate_Data) GetInternalUserEmail() string {
	if x != nil {
		return x.InternalUserEmail
	}
	return ""
}

func (x *InternalUserCDCUpdate_Data) GetInternalUserPhone() string {
	if x != nil {
		return x.InternalUserPhone
	}
	return ""
}

func (x *InternalUserCDCUpdate_Data) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *InternalUserCDCUpdate_Data) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *InternalUserCDCUpdate_Data) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InternalUserCDCUpdate_Data) GetInternalUserType() string {
	if x != nil {
		return x.InternalUserType
	}
	return ""
}

func (x *InternalUserCDCUpdate_Data) GetInternalUserRoleId() int32 {
	if x != nil {
		return x.InternalUserRoleId
	}
	return 0
}

type PatientCDCUpdate_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatientId                     int32  `protobuf:"varint,1,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	UserId                        int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PatientType                   string `protobuf:"bytes,3,opt,name=patient_type,json=patientType,proto3" json:"patient_type,omitempty"`
	OriginalPatientId             int32  `protobuf:"varint,4,opt,name=original_patient_id,json=originalPatientId,proto3" json:"original_patient_id,omitempty"`
	PatientGender                 string `protobuf:"bytes,5,opt,name=patient_gender,json=patientGender,proto3" json:"patient_gender,omitempty"`
	PatientFirstName              string `protobuf:"bytes,6,opt,name=patient_first_name,json=patientFirstName,proto3" json:"patient_first_name,omitempty"`
	PatientLastName               string `protobuf:"bytes,7,opt,name=patient_last_name,json=patientLastName,proto3" json:"patient_last_name,omitempty"`
	PatientMiddleName             string `protobuf:"bytes,8,opt,name=patient_middle_name,json=patientMiddleName,proto3" json:"patient_middle_name,omitempty"`
	PatientMedicalRecordNumber    string `protobuf:"bytes,9,opt,name=patient_medical_record_number,json=patientMedicalRecordNumber,proto3" json:"patient_medical_record_number,omitempty"`
	PatientLegalFirstname         string `protobuf:"bytes,10,opt,name=patient_legal_firstname,json=patientLegalFirstname,proto3" json:"patient_legal_firstname,omitempty"`
	PatientLegalLastname          string `protobuf:"bytes,11,opt,name=patient_legal_lastname,json=patientLegalLastname,proto3" json:"patient_legal_lastname,omitempty"`
	PatientHonorific              string `protobuf:"bytes,12,opt,name=patient_honorific,json=patientHonorific,proto3" json:"patient_honorific,omitempty"`
	PatientSuffix                 string `protobuf:"bytes,13,opt,name=patient_suffix,json=patientSuffix,proto3" json:"patient_suffix,omitempty"`
	PatientMarital                string `protobuf:"bytes,14,opt,name=patient_marital,json=patientMarital,proto3" json:"patient_marital,omitempty"`
	PatientEthnicity              string `protobuf:"bytes,15,opt,name=patient_ethnicity,json=patientEthnicity,proto3" json:"patient_ethnicity,omitempty"`
	PatientBirthdate              string `protobuf:"bytes,16,opt,name=patient_birthdate,json=patientBirthdate,proto3" json:"patient_birthdate,omitempty"`
	PatientSsn                    string `protobuf:"bytes,17,opt,name=patient_ssn,json=patientSsn,proto3" json:"patient_ssn,omitempty"`
	PatientBarcodeI               string `protobuf:"bytes,18,opt,name=patient_barcode_i,json=patientBarcodeI,proto3" json:"patient_barcode_i,omitempty"`
	PatientHeight                 string `protobuf:"bytes,19,opt,name=patient_height,json=patientHeight,proto3" json:"patient_height,omitempty"`
	PatientWeight                 string `protobuf:"bytes,20,opt,name=patient_weight,json=patientWeight,proto3" json:"patient_weight,omitempty"`
	OfficeallyId                  int32  `protobuf:"varint,21,opt,name=officeally_id,json=officeallyId,proto3" json:"officeally_id,omitempty"`
	PaientCreateTime              string `protobuf:"bytes,22,opt,name=paient_create_time,json=paientCreateTime,proto3" json:"paient_create_time,omitempty"`
	CustomerId                    int32  `protobuf:"varint,23,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	IsActive                      int32  `protobuf:"varint,24,opt,name=isActive,proto3" json:"isActive,omitempty"`
	PatientFlagged                int32  `protobuf:"varint,25,opt,name=patient_flagged,json=patientFlagged,proto3" json:"patient_flagged,omitempty"`
	PatientServiceDate            string `protobuf:"bytes,26,opt,name=patient_service_date,json=patientServiceDate,proto3" json:"patient_service_date,omitempty"`
	PatientDescription            string `protobuf:"bytes,27,opt,name=patient_description,json=patientDescription,proto3" json:"patient_description,omitempty"`
	PatientNyWaiveFormIssueStatus string `protobuf:"bytes,28,opt,name=patient_ny_waive_form_issue_status,json=patientNyWaiveFormIssueStatus,proto3" json:"patient_ny_waive_form_issue_status,omitempty"`
	PatientLanguage               string `protobuf:"bytes,29,opt,name=patient_language,json=patientLanguage,proto3" json:"patient_language,omitempty"`
}

func (x *PatientCDCUpdate_Data) Reset() {
	*x = PatientCDCUpdate_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientCDCUpdate_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientCDCUpdate_Data) ProtoMessage() {}

func (x *PatientCDCUpdate_Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientCDCUpdate_Data.ProtoReflect.Descriptor instead.
func (*PatientCDCUpdate_Data) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{5, 0}
}

func (x *PatientCDCUpdate_Data) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *PatientCDCUpdate_Data) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PatientCDCUpdate_Data) GetPatientType() string {
	if x != nil {
		return x.PatientType
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetOriginalPatientId() int32 {
	if x != nil {
		return x.OriginalPatientId
	}
	return 0
}

func (x *PatientCDCUpdate_Data) GetPatientGender() string {
	if x != nil {
		return x.PatientGender
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientFirstName() string {
	if x != nil {
		return x.PatientFirstName
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientLastName() string {
	if x != nil {
		return x.PatientLastName
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientMiddleName() string {
	if x != nil {
		return x.PatientMiddleName
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientMedicalRecordNumber() string {
	if x != nil {
		return x.PatientMedicalRecordNumber
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientLegalFirstname() string {
	if x != nil {
		return x.PatientLegalFirstname
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientLegalLastname() string {
	if x != nil {
		return x.PatientLegalLastname
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientHonorific() string {
	if x != nil {
		return x.PatientHonorific
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientSuffix() string {
	if x != nil {
		return x.PatientSuffix
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientMarital() string {
	if x != nil {
		return x.PatientMarital
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientEthnicity() string {
	if x != nil {
		return x.PatientEthnicity
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientBirthdate() string {
	if x != nil {
		return x.PatientBirthdate
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientSsn() string {
	if x != nil {
		return x.PatientSsn
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientBarcodeI() string {
	if x != nil {
		return x.PatientBarcodeI
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientHeight() string {
	if x != nil {
		return x.PatientHeight
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientWeight() string {
	if x != nil {
		return x.PatientWeight
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetOfficeallyId() int32 {
	if x != nil {
		return x.OfficeallyId
	}
	return 0
}

func (x *PatientCDCUpdate_Data) GetPaientCreateTime() string {
	if x != nil {
		return x.PaientCreateTime
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *PatientCDCUpdate_Data) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *PatientCDCUpdate_Data) GetPatientFlagged() int32 {
	if x != nil {
		return x.PatientFlagged
	}
	return 0
}

func (x *PatientCDCUpdate_Data) GetPatientServiceDate() string {
	if x != nil {
		return x.PatientServiceDate
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientDescription() string {
	if x != nil {
		return x.PatientDescription
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientNyWaiveFormIssueStatus() string {
	if x != nil {
		return x.PatientNyWaiveFormIssueStatus
	}
	return ""
}

func (x *PatientCDCUpdate_Data) GetPatientLanguage() string {
	if x != nil {
		return x.PatientLanguage
	}
	return ""
}

type SettingCDCUpdate_SettingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingId               int32  `protobuf:"varint,1,opt,name=setting_id,json=settingId,proto3" json:"setting_id,omitempty"`                                              // Unique identifier of the setting
	SettingName             string `protobuf:"bytes,2,opt,name=setting_name,json=settingName,proto3" json:"setting_name,omitempty"`                                         // Name of the setting
	SettingGroup            string `protobuf:"bytes,3,opt,name=setting_group,json=settingGroup,proto3" json:"setting_group,omitempty"`                                      // Group to which the setting belongs
	SettingDescription      string `protobuf:"bytes,4,opt,name=setting_description,json=settingDescription,proto3" json:"setting_description,omitempty"`                    // Description of the setting
	SettingValue            string `protobuf:"bytes,5,opt,name=setting_value,json=settingValue,proto3" json:"setting_value,omitempty"`                                      // Value of the setting
	SettingType             string `protobuf:"bytes,6,opt,name=setting_type,json=settingType,proto3" json:"setting_type,omitempty"`                                         // Type of the setting
	SettingValueUpdatedTime string `protobuf:"bytes,7,opt,name=setting_value_updated_time,json=settingValueUpdatedTime,proto3" json:"setting_value_updated_time,omitempty"` // Timestamp when the value was last updated
	IsActive                int32  `protobuf:"varint,8,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`                                                 // Indicates if the setting is active
	ApplyToAllGroupMember   int32  `protobuf:"varint,9,opt,name=apply_to_all_group_member,json=applyToAllGroupMember,proto3" json:"apply_to_all_group_member,omitempty"`    // Whether the setting applies to all group members
	IsOfficial              int32  `protobuf:"varint,10,opt,name=is_official,json=isOfficial,proto3" json:"is_official,omitempty"`                                          // Whether the setting is an official system setting
	SettingLevel            int32  `protobuf:"varint,11,opt,name=setting_level,json=settingLevel,proto3" json:"setting_level,omitempty"`                                    // Level of the setting (e.g., customer-level, clinic-level)
	SettingLevelName        string `protobuf:"bytes,12,opt,name=setting_level_name,json=settingLevelName,proto3" json:"setting_level_name,omitempty"`                       // Name corresponding to the setting level
	UseGroupSetting         int32  `protobuf:"varint,13,opt,name=use_group_setting,json=useGroupSetting,proto3" json:"use_group_setting,omitempty"`                         // Whether to use the group setting instead of an individual setting
}

func (x *SettingCDCUpdate_SettingData) Reset() {
	*x = SettingCDCUpdate_SettingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingCDCUpdate_SettingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingCDCUpdate_SettingData) ProtoMessage() {}

func (x *SettingCDCUpdate_SettingData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingCDCUpdate_SettingData.ProtoReflect.Descriptor instead.
func (*SettingCDCUpdate_SettingData) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SettingCDCUpdate_SettingData) GetSettingId() int32 {
	if x != nil {
		return x.SettingId
	}
	return 0
}

func (x *SettingCDCUpdate_SettingData) GetSettingName() string {
	if x != nil {
		return x.SettingName
	}
	return ""
}

func (x *SettingCDCUpdate_SettingData) GetSettingGroup() string {
	if x != nil {
		return x.SettingGroup
	}
	return ""
}

func (x *SettingCDCUpdate_SettingData) GetSettingDescription() string {
	if x != nil {
		return x.SettingDescription
	}
	return ""
}

func (x *SettingCDCUpdate_SettingData) GetSettingValue() string {
	if x != nil {
		return x.SettingValue
	}
	return ""
}

func (x *SettingCDCUpdate_SettingData) GetSettingType() string {
	if x != nil {
		return x.SettingType
	}
	return ""
}

func (x *SettingCDCUpdate_SettingData) GetSettingValueUpdatedTime() string {
	if x != nil {
		return x.SettingValueUpdatedTime
	}
	return ""
}

func (x *SettingCDCUpdate_SettingData) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *SettingCDCUpdate_SettingData) GetApplyToAllGroupMember() int32 {
	if x != nil {
		return x.ApplyToAllGroupMember
	}
	return 0
}

func (x *SettingCDCUpdate_SettingData) GetIsOfficial() int32 {
	if x != nil {
		return x.IsOfficial
	}
	return 0
}

func (x *SettingCDCUpdate_SettingData) GetSettingLevel() int32 {
	if x != nil {
		return x.SettingLevel
	}
	return 0
}

func (x *SettingCDCUpdate_SettingData) GetSettingLevelName() string {
	if x != nil {
		return x.SettingLevelName
	}
	return ""
}

func (x *SettingCDCUpdate_SettingData) GetUseGroupSetting() int32 {
	if x != nil {
		return x.UseGroupSetting
	}
	return 0
}

type UserCDCUpdate_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                           int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username                         string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	EmailUserId                      string `protobuf:"bytes,3,opt,name=email_user_id,json=emailUserId,proto3" json:"email_user_id,omitempty"`
	Password                         string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	TwoFactorAuthenticationSecret    string `protobuf:"bytes,5,opt,name=twoFactorAuthenticationSecret,proto3" json:"twoFactorAuthenticationSecret,omitempty"`
	IsTwoFactorAuthenticationEnabled int32  `protobuf:"varint,6,opt,name=isTwoFactorAuthenticationEnabled,proto3" json:"isTwoFactorAuthenticationEnabled,omitempty"`
	IsInternalAdminUser              int32  `protobuf:"varint,7,opt,name=isInternalAdminUser,proto3" json:"isInternalAdminUser,omitempty"`
	UserGroup                        string `protobuf:"bytes,8,opt,name=user_group,json=userGroup,proto3" json:"user_group,omitempty"`
	UserPermission                   string `protobuf:"bytes,9,opt,name=user_permission,json=userPermission,proto3" json:"user_permission,omitempty"`
	ImportedUserWithSaltPassword     int32  `protobuf:"varint,10,opt,name=imported_user_with_salt_password,json=importedUserWithSaltPassword,proto3" json:"imported_user_with_salt_password,omitempty"`
	IsActive                         int32  `protobuf:"varint,11,opt,name=isActive,proto3" json:"isActive,omitempty"`
	HasAdminPanelAccess              int32  `protobuf:"varint,12,opt,name=hasAdminPanelAccess,proto3" json:"hasAdminPanelAccess,omitempty"`
	HasLISAccess                     int32  `protobuf:"varint,13,opt,name=hasLISAccess,proto3" json:"hasLISAccess,omitempty"`
}

func (x *UserCDCUpdate_Data) Reset() {
	*x = UserCDCUpdate_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCDCUpdate_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCDCUpdate_Data) ProtoMessage() {}

func (x *UserCDCUpdate_Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCDCUpdate_Data.ProtoReflect.Descriptor instead.
func (*UserCDCUpdate_Data) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{7, 0}
}

func (x *UserCDCUpdate_Data) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserCDCUpdate_Data) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserCDCUpdate_Data) GetEmailUserId() string {
	if x != nil {
		return x.EmailUserId
	}
	return ""
}

func (x *UserCDCUpdate_Data) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserCDCUpdate_Data) GetTwoFactorAuthenticationSecret() string {
	if x != nil {
		return x.TwoFactorAuthenticationSecret
	}
	return ""
}

func (x *UserCDCUpdate_Data) GetIsTwoFactorAuthenticationEnabled() int32 {
	if x != nil {
		return x.IsTwoFactorAuthenticationEnabled
	}
	return 0
}

func (x *UserCDCUpdate_Data) GetIsInternalAdminUser() int32 {
	if x != nil {
		return x.IsInternalAdminUser
	}
	return 0
}

func (x *UserCDCUpdate_Data) GetUserGroup() string {
	if x != nil {
		return x.UserGroup
	}
	return ""
}

func (x *UserCDCUpdate_Data) GetUserPermission() string {
	if x != nil {
		return x.UserPermission
	}
	return ""
}

func (x *UserCDCUpdate_Data) GetImportedUserWithSaltPassword() int32 {
	if x != nil {
		return x.ImportedUserWithSaltPassword
	}
	return 0
}

func (x *UserCDCUpdate_Data) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *UserCDCUpdate_Data) GetHasAdminPanelAccess() int32 {
	if x != nil {
		return x.HasAdminPanelAccess
	}
	return 0
}

func (x *UserCDCUpdate_Data) GetHasLISAccess() int32 {
	if x != nil {
		return x.HasLISAccess
	}
	return 0
}

type CustomerToPatientCDCUpdate_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A int32 `protobuf:"varint,1,opt,name=A,proto3" json:"A,omitempty"`
	B int32 `protobuf:"varint,2,opt,name=B,proto3" json:"B,omitempty"`
}

func (x *CustomerToPatientCDCUpdate_Data) Reset() {
	*x = CustomerToPatientCDCUpdate_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerToPatientCDCUpdate_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerToPatientCDCUpdate_Data) ProtoMessage() {}

func (x *CustomerToPatientCDCUpdate_Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerToPatientCDCUpdate_Data.ProtoReflect.Descriptor instead.
func (*CustomerToPatientCDCUpdate_Data) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CustomerToPatientCDCUpdate_Data) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *CustomerToPatientCDCUpdate_Data) GetB() int32 {
	if x != nil {
		return x.B
	}
	return 0
}

type CustomerSettingOnClinicsCDCUpdate_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId  int32  `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`   // Customer ID
	ClinicId    int32  `protobuf:"varint,2,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`         // Clinic ID
	SettingId   int32  `protobuf:"varint,3,opt,name=setting_id,json=settingId,proto3" json:"setting_id,omitempty"`      // Setting ID
	SettingName string `protobuf:"bytes,4,opt,name=setting_name,json=settingName,proto3" json:"setting_name,omitempty"` // Setting Name
}

func (x *CustomerSettingOnClinicsCDCUpdate_Data) Reset() {
	*x = CustomerSettingOnClinicsCDCUpdate_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerSettingOnClinicsCDCUpdate_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerSettingOnClinicsCDCUpdate_Data) ProtoMessage() {}

func (x *CustomerSettingOnClinicsCDCUpdate_Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerSettingOnClinicsCDCUpdate_Data.ProtoReflect.Descriptor instead.
func (*CustomerSettingOnClinicsCDCUpdate_Data) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CustomerSettingOnClinicsCDCUpdate_Data) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CustomerSettingOnClinicsCDCUpdate_Data) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *CustomerSettingOnClinicsCDCUpdate_Data) GetSettingId() int32 {
	if x != nil {
		return x.SettingId
	}
	return 0
}

func (x *CustomerSettingOnClinicsCDCUpdate_Data) GetSettingName() string {
	if x != nil {
		return x.SettingName
	}
	return ""
}

type ClinicToCustomerCDCUpdate_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A int32 `protobuf:"varint,1,opt,name=A,proto3" json:"A,omitempty"`
	B int32 `protobuf:"varint,2,opt,name=B,proto3" json:"B,omitempty"`
}

func (x *ClinicToCustomerCDCUpdate_Data) Reset() {
	*x = ClinicToCustomerCDCUpdate_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicToCustomerCDCUpdate_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicToCustomerCDCUpdate_Data) ProtoMessage() {}

func (x *ClinicToCustomerCDCUpdate_Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicToCustomerCDCUpdate_Data.ProtoReflect.Descriptor instead.
func (*ClinicToCustomerCDCUpdate_Data) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ClinicToCustomerCDCUpdate_Data) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *ClinicToCustomerCDCUpdate_Data) GetB() int32 {
	if x != nil {
		return x.B
	}
	return 0
}

type ClinicToPatientCDCUpdate_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A int32 `protobuf:"varint,1,opt,name=A,proto3" json:"A,omitempty"`
	B int32 `protobuf:"varint,2,opt,name=B,proto3" json:"B,omitempty"`
}

func (x *ClinicToPatientCDCUpdate_Data) Reset() {
	*x = ClinicToPatientCDCUpdate_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicToPatientCDCUpdate_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicToPatientCDCUpdate_Data) ProtoMessage() {}

func (x *ClinicToPatientCDCUpdate_Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicToPatientCDCUpdate_Data.ProtoReflect.Descriptor instead.
func (*ClinicToPatientCDCUpdate_Data) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ClinicToPatientCDCUpdate_Data) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *ClinicToPatientCDCUpdate_Data) GetB() int32 {
	if x != nil {
		return x.B
	}
	return 0
}

type ClinicToSettingCDCUpdate_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A int32 `protobuf:"varint,1,opt,name=A,proto3" json:"A,omitempty"` // Clinic ID
	B int32 `protobuf:"varint,2,opt,name=B,proto3" json:"B,omitempty"` // Setting ID
}

func (x *ClinicToSettingCDCUpdate_Data) Reset() {
	*x = ClinicToSettingCDCUpdate_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cdc_update_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicToSettingCDCUpdate_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicToSettingCDCUpdate_Data) ProtoMessage() {}

func (x *ClinicToSettingCDCUpdate_Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cdc_update_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicToSettingCDCUpdate_Data.ProtoReflect.Descriptor instead.
func (*ClinicToSettingCDCUpdate_Data) Descriptor() ([]byte, []int) {
	return file_proto_cdc_update_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ClinicToSettingCDCUpdate_Data) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *ClinicToSettingCDCUpdate_Data) GetB() int32 {
	if x != nil {
		return x.B
	}
	return 0
}

var File_proto_cdc_update_proto protoreflect.FileDescriptor

var file_proto_cdc_update_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x64, 0x63, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x8d, 0x08,
	0x0a, 0x10, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x78, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x44,
	0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x03, 0x6f, 0x6c, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x1a, 0xec,
	0x05, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x74, 0x5f, 0x70,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x74, 0x50, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x19, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6c,
	0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x40, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x75, 0x73, 0x65, 0x41, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x73,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc2, 0x05,
	0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x78, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x44, 0x43, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x3b, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x1a, 0xb2, 0x03,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x5f, 0x6e, 0x70, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x70, 0x69, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x16, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f,
	0x6c, 0x64, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x6c, 0x64, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xab, 0x08, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x44,
	0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x78, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x78, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x43,
	0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03,
	0x6f, 0x6c, 0x64, 0x1a, 0x8a, 0x06, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x73, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x32, 0x66, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x73, 0x32, 0x66, 0x61, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x68, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x41,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x75, 0x73, 0x65,
	0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x22, 0xbd, 0x09, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x44, 0x43,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x78, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x78, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x1a, 0xa7, 0x07, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3f, 0x0a,
	0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x75,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x70, 0x69, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x70, 0x69, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2f, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x62, 0x65, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x22, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x6e,
	0x22, 0x89, 0x08, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x78, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x78,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x44, 0x43, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x41, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x6f,
	0x6c, 0x64, 0x1a, 0xe7, 0x05, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73,
	0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73,
	0x46, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x8a, 0x0c, 0x0a,
	0x10, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x78, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x44, 0x43,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x3c, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x44, 0x43, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x1a,
	0xf7, 0x09, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4c, 0x61, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x69, 0x74,
	0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x74,
	0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x73, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x73, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x61, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x22, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x79, 0x5f, 0x77, 0x61, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x79, 0x57, 0x61, 0x69, 0x76, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xc2, 0x06, 0x0a, 0x10, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x78, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x45,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x1a, 0xa1, 0x04, 0x0a, 0x0b, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f,
	0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xcb,
	0x06, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x78, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a,
	0x03, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x1a, 0xc1, 0x04, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x77, 0x6f, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x74,
	0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x20,
	0x69, 0x73, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x69, 0x73, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x61,
	0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x68, 0x61, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x4c,
	0x49, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x68, 0x61, 0x73, 0x4c, 0x49, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xd2, 0x02, 0x0a,
	0x1a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x78, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x1a, 0x22, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x41, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x41, 0x12, 0x0c, 0x0a, 0x01, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x42, 0x22, 0xcc, 0x03, 0x0a, 0x21, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x73, 0x43, 0x44,
	0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x78, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x78, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x73, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x73, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x1a, 0x86, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xcf, 0x02, 0x0a, 0x19, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x54, 0x6f, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x78, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x47,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x54, 0x6f, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x54, 0x6f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x44, 0x43, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x1a, 0x22,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x41, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x41, 0x12, 0x0c, 0x0a, 0x01, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x42, 0x22, 0xcc, 0x02, 0x0a, 0x18, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x54, 0x6f, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x78, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x46, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x1a, 0x22, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x41, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x41, 0x12, 0x0c, 0x0a, 0x01, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x42, 0x22, 0xcc, 0x02, 0x0a, 0x18, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x54, 0x6f, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x78, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x46,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x54, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x54, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x44, 0x43, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x1a, 0x22, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x41, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x41, 0x12, 0x0c, 0x0a, 0x01, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x42,
	0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_cdc_update_proto_rawDescOnce sync.Once
	file_proto_cdc_update_proto_rawDescData = file_proto_cdc_update_proto_rawDesc
)

func file_proto_cdc_update_proto_rawDescGZIP() []byte {
	file_proto_cdc_update_proto_rawDescOnce.Do(func() {
		file_proto_cdc_update_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_cdc_update_proto_rawDescData)
	})
	return file_proto_cdc_update_proto_rawDescData
}

var file_proto_cdc_update_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_proto_cdc_update_proto_goTypes = []interface{}{
	(*AddressCDCUpdate)(nil),                       // 0: coresamples_service.AddressCDCUpdate
	(*ClinicCDCUpdate)(nil),                        // 1: coresamples_service.ClinicCDCUpdate
	(*ContactCDCUpdate)(nil),                       // 2: coresamples_service.ContactCDCUpdate
	(*CustomerCDCUpdate)(nil),                      // 3: coresamples_service.CustomerCDCUpdate
	(*InternalUserCDCUpdate)(nil),                  // 4: coresamples_service.InternalUserCDCUpdate
	(*PatientCDCUpdate)(nil),                       // 5: coresamples_service.PatientCDCUpdate
	(*SettingCDCUpdate)(nil),                       // 6: coresamples_service.SettingCDCUpdate
	(*UserCDCUpdate)(nil),                          // 7: coresamples_service.UserCDCUpdate
	(*CustomerToPatientCDCUpdate)(nil),             // 8: coresamples_service.CustomerToPatientCDCUpdate
	(*CustomerSettingOnClinicsCDCUpdate)(nil),      // 9: coresamples_service.CustomerSettingOnClinicsCDCUpdate
	(*ClinicToCustomerCDCUpdate)(nil),              // 10: coresamples_service.ClinicToCustomerCDCUpdate
	(*ClinicToPatientCDCUpdate)(nil),               // 11: coresamples_service.ClinicToPatientCDCUpdate
	(*ClinicToSettingCDCUpdate)(nil),               // 12: coresamples_service.ClinicToSettingCDCUpdate
	(*AddressCDCUpdate_AddressData)(nil),           // 13: coresamples_service.AddressCDCUpdate.AddressData
	(*ClinicCDCUpdate_Data)(nil),                   // 14: coresamples_service.ClinicCDCUpdate.Data
	(*ContactCDCUpdate_ContactData)(nil),           // 15: coresamples_service.ContactCDCUpdate.ContactData
	(*CustomerCDCUpdate_Data)(nil),                 // 16: coresamples_service.CustomerCDCUpdate.Data
	(*InternalUserCDCUpdate_Data)(nil),             // 17: coresamples_service.InternalUserCDCUpdate.Data
	(*PatientCDCUpdate_Data)(nil),                  // 18: coresamples_service.PatientCDCUpdate.Data
	(*SettingCDCUpdate_SettingData)(nil),           // 19: coresamples_service.SettingCDCUpdate.SettingData
	(*UserCDCUpdate_Data)(nil),                     // 20: coresamples_service.UserCDCUpdate.Data
	(*CustomerToPatientCDCUpdate_Data)(nil),        // 21: coresamples_service.CustomerToPatientCDCUpdate.Data
	(*CustomerSettingOnClinicsCDCUpdate_Data)(nil), // 22: coresamples_service.CustomerSettingOnClinicsCDCUpdate.Data
	(*ClinicToCustomerCDCUpdate_Data)(nil),         // 23: coresamples_service.ClinicToCustomerCDCUpdate.Data
	(*ClinicToPatientCDCUpdate_Data)(nil),          // 24: coresamples_service.ClinicToPatientCDCUpdate.Data
	(*ClinicToSettingCDCUpdate_Data)(nil),          // 25: coresamples_service.ClinicToSettingCDCUpdate.Data
}
var file_proto_cdc_update_proto_depIdxs = []int32{
	13, // 0: coresamples_service.AddressCDCUpdate.data:type_name -> coresamples_service.AddressCDCUpdate.AddressData
	13, // 1: coresamples_service.AddressCDCUpdate.old:type_name -> coresamples_service.AddressCDCUpdate.AddressData
	14, // 2: coresamples_service.ClinicCDCUpdate.data:type_name -> coresamples_service.ClinicCDCUpdate.Data
	14, // 3: coresamples_service.ClinicCDCUpdate.old:type_name -> coresamples_service.ClinicCDCUpdate.Data
	15, // 4: coresamples_service.ContactCDCUpdate.data:type_name -> coresamples_service.ContactCDCUpdate.ContactData
	15, // 5: coresamples_service.ContactCDCUpdate.old:type_name -> coresamples_service.ContactCDCUpdate.ContactData
	16, // 6: coresamples_service.CustomerCDCUpdate.data:type_name -> coresamples_service.CustomerCDCUpdate.Data
	16, // 7: coresamples_service.CustomerCDCUpdate.old:type_name -> coresamples_service.CustomerCDCUpdate.Data
	17, // 8: coresamples_service.InternalUserCDCUpdate.data:type_name -> coresamples_service.InternalUserCDCUpdate.Data
	17, // 9: coresamples_service.InternalUserCDCUpdate.old:type_name -> coresamples_service.InternalUserCDCUpdate.Data
	18, // 10: coresamples_service.PatientCDCUpdate.data:type_name -> coresamples_service.PatientCDCUpdate.Data
	18, // 11: coresamples_service.PatientCDCUpdate.old:type_name -> coresamples_service.PatientCDCUpdate.Data
	19, // 12: coresamples_service.SettingCDCUpdate.data:type_name -> coresamples_service.SettingCDCUpdate.SettingData
	19, // 13: coresamples_service.SettingCDCUpdate.old:type_name -> coresamples_service.SettingCDCUpdate.SettingData
	20, // 14: coresamples_service.UserCDCUpdate.data:type_name -> coresamples_service.UserCDCUpdate.Data
	20, // 15: coresamples_service.UserCDCUpdate.old:type_name -> coresamples_service.UserCDCUpdate.Data
	21, // 16: coresamples_service.CustomerToPatientCDCUpdate.data:type_name -> coresamples_service.CustomerToPatientCDCUpdate.Data
	21, // 17: coresamples_service.CustomerToPatientCDCUpdate.old:type_name -> coresamples_service.CustomerToPatientCDCUpdate.Data
	22, // 18: coresamples_service.CustomerSettingOnClinicsCDCUpdate.data:type_name -> coresamples_service.CustomerSettingOnClinicsCDCUpdate.Data
	22, // 19: coresamples_service.CustomerSettingOnClinicsCDCUpdate.old:type_name -> coresamples_service.CustomerSettingOnClinicsCDCUpdate.Data
	23, // 20: coresamples_service.ClinicToCustomerCDCUpdate.data:type_name -> coresamples_service.ClinicToCustomerCDCUpdate.Data
	23, // 21: coresamples_service.ClinicToCustomerCDCUpdate.old:type_name -> coresamples_service.ClinicToCustomerCDCUpdate.Data
	24, // 22: coresamples_service.ClinicToPatientCDCUpdate.data:type_name -> coresamples_service.ClinicToPatientCDCUpdate.Data
	24, // 23: coresamples_service.ClinicToPatientCDCUpdate.old:type_name -> coresamples_service.ClinicToPatientCDCUpdate.Data
	25, // 24: coresamples_service.ClinicToSettingCDCUpdate.data:type_name -> coresamples_service.ClinicToSettingCDCUpdate.Data
	25, // 25: coresamples_service.ClinicToSettingCDCUpdate.old:type_name -> coresamples_service.ClinicToSettingCDCUpdate.Data
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_proto_cdc_update_proto_init() }
func file_proto_cdc_update_proto_init() {
	if File_proto_cdc_update_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_cdc_update_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressCDCUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicCDCUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactCDCUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerCDCUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalUserCDCUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientCDCUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingCDCUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCDCUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerToPatientCDCUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerSettingOnClinicsCDCUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicToCustomerCDCUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicToPatientCDCUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicToSettingCDCUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressCDCUpdate_AddressData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicCDCUpdate_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactCDCUpdate_ContactData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerCDCUpdate_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalUserCDCUpdate_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientCDCUpdate_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingCDCUpdate_SettingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCDCUpdate_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerToPatientCDCUpdate_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerSettingOnClinicsCDCUpdate_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicToCustomerCDCUpdate_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicToPatientCDCUpdate_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cdc_update_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicToSettingCDCUpdate_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_cdc_update_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_cdc_update_proto_goTypes,
		DependencyIndexes: file_proto_cdc_update_proto_depIdxs,
		MessageInfos:      file_proto_cdc_update_proto_msgTypes,
	}.Build()
	File_proto_cdc_update_proto = out.File
	file_proto_cdc_update_proto_rawDesc = nil
	file_proto_cdc_update_proto_goTypes = nil
	file_proto_cdc_update_proto_depIdxs = nil
}
