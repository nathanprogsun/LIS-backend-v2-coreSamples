// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/setting.proto

package coresamples_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SettingService_CreateOrUpdateClinicSetting_FullMethodName            = "/coresamples_service.SettingService/CreateOrUpdateClinicSetting"
	SettingService_GetClinicSetting_FullMethodName                       = "/coresamples_service.SettingService/GetClinicSetting"
	SettingService_GetAllSetting_FullMethodName                          = "/coresamples_service.SettingService/GetAllSetting"
	SettingService_UpdateMemberSetting_FullMethodName                    = "/coresamples_service.SettingService/UpdateMemberSetting"
	SettingService_GetCustomerIDbySettingResult_FullMethodName           = "/coresamples_service.SettingService/GetCustomerIDbySettingResult"
	SettingService_GetClinicIDbySettingResult_FullMethodName             = "/coresamples_service.SettingService/GetClinicIDbySettingResult"
	SettingService_GetSettingByCustomerClinic_FullMethodName             = "/coresamples_service.SettingService/GetSettingByCustomerClinic"
	SettingService_EditCustomerClinicSettings_FullMethodName             = "/coresamples_service.SettingService/EditCustomerClinicSettings"
	SettingService_GetSettingByCustomerClinicSettingGroup_FullMethodName = "/coresamples_service.SettingService/GetSettingByCustomerClinicSettingGroup"
)

// SettingServiceClient is the client API for SettingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SettingServiceClient interface {
	CreateOrUpdateClinicSetting(ctx context.Context, in *CreateClinicSettingRequest, opts ...grpc.CallOption) (*CreateClinicSettingResponse, error)
	GetClinicSetting(ctx context.Context, in *GetClinicSettingRequest, opts ...grpc.CallOption) (*GetSettingResponse, error)
	GetAllSetting(ctx context.Context, in *GetAllSettingRequest, opts ...grpc.CallOption) (*GetSettingResponse, error)
	UpdateMemberSetting(ctx context.Context, in *UpdateMemberSettingRequest, opts ...grpc.CallOption) (*GetSettingResponseUpdateMemberSetting, error)
	GetCustomerIDbySettingResult(ctx context.Context, in *GetIDbySettingResultRequest, opts ...grpc.CallOption) (*GetCustomerIDbySettingResultResonse, error)
	GetClinicIDbySettingResult(ctx context.Context, in *GetIDbySettingResultRequest, opts ...grpc.CallOption) (*GetClinicIDbySettingResultResonse, error)
	GetSettingByCustomerClinic(ctx context.Context, in *GetSettingByCustomerClinicRequest, opts ...grpc.CallOption) (*GetSettingResponse, error)
	EditCustomerClinicSettings(ctx context.Context, in *EditCustomerClinicSettingsRequest, opts ...grpc.CallOption) (*EditCustomerClinicSettingsResponse, error)
	GetSettingByCustomerClinicSettingGroup(ctx context.Context, in *GetSettingByCustomerClinicSettingGroupRequest, opts ...grpc.CallOption) (*GetSettingResponse, error)
}

type settingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSettingServiceClient(cc grpc.ClientConnInterface) SettingServiceClient {
	return &settingServiceClient{cc}
}

func (c *settingServiceClient) CreateOrUpdateClinicSetting(ctx context.Context, in *CreateClinicSettingRequest, opts ...grpc.CallOption) (*CreateClinicSettingResponse, error) {
	out := new(CreateClinicSettingResponse)
	err := c.cc.Invoke(ctx, SettingService_CreateOrUpdateClinicSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingServiceClient) GetClinicSetting(ctx context.Context, in *GetClinicSettingRequest, opts ...grpc.CallOption) (*GetSettingResponse, error) {
	out := new(GetSettingResponse)
	err := c.cc.Invoke(ctx, SettingService_GetClinicSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingServiceClient) GetAllSetting(ctx context.Context, in *GetAllSettingRequest, opts ...grpc.CallOption) (*GetSettingResponse, error) {
	out := new(GetSettingResponse)
	err := c.cc.Invoke(ctx, SettingService_GetAllSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingServiceClient) UpdateMemberSetting(ctx context.Context, in *UpdateMemberSettingRequest, opts ...grpc.CallOption) (*GetSettingResponseUpdateMemberSetting, error) {
	out := new(GetSettingResponseUpdateMemberSetting)
	err := c.cc.Invoke(ctx, SettingService_UpdateMemberSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingServiceClient) GetCustomerIDbySettingResult(ctx context.Context, in *GetIDbySettingResultRequest, opts ...grpc.CallOption) (*GetCustomerIDbySettingResultResonse, error) {
	out := new(GetCustomerIDbySettingResultResonse)
	err := c.cc.Invoke(ctx, SettingService_GetCustomerIDbySettingResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingServiceClient) GetClinicIDbySettingResult(ctx context.Context, in *GetIDbySettingResultRequest, opts ...grpc.CallOption) (*GetClinicIDbySettingResultResonse, error) {
	out := new(GetClinicIDbySettingResultResonse)
	err := c.cc.Invoke(ctx, SettingService_GetClinicIDbySettingResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingServiceClient) GetSettingByCustomerClinic(ctx context.Context, in *GetSettingByCustomerClinicRequest, opts ...grpc.CallOption) (*GetSettingResponse, error) {
	out := new(GetSettingResponse)
	err := c.cc.Invoke(ctx, SettingService_GetSettingByCustomerClinic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingServiceClient) EditCustomerClinicSettings(ctx context.Context, in *EditCustomerClinicSettingsRequest, opts ...grpc.CallOption) (*EditCustomerClinicSettingsResponse, error) {
	out := new(EditCustomerClinicSettingsResponse)
	err := c.cc.Invoke(ctx, SettingService_EditCustomerClinicSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingServiceClient) GetSettingByCustomerClinicSettingGroup(ctx context.Context, in *GetSettingByCustomerClinicSettingGroupRequest, opts ...grpc.CallOption) (*GetSettingResponse, error) {
	out := new(GetSettingResponse)
	err := c.cc.Invoke(ctx, SettingService_GetSettingByCustomerClinicSettingGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettingServiceServer is the server API for SettingService service.
// All implementations must embed UnimplementedSettingServiceServer
// for forward compatibility
type SettingServiceServer interface {
	CreateOrUpdateClinicSetting(context.Context, *CreateClinicSettingRequest) (*CreateClinicSettingResponse, error)
	GetClinicSetting(context.Context, *GetClinicSettingRequest) (*GetSettingResponse, error)
	GetAllSetting(context.Context, *GetAllSettingRequest) (*GetSettingResponse, error)
	UpdateMemberSetting(context.Context, *UpdateMemberSettingRequest) (*GetSettingResponseUpdateMemberSetting, error)
	GetCustomerIDbySettingResult(context.Context, *GetIDbySettingResultRequest) (*GetCustomerIDbySettingResultResonse, error)
	GetClinicIDbySettingResult(context.Context, *GetIDbySettingResultRequest) (*GetClinicIDbySettingResultResonse, error)
	GetSettingByCustomerClinic(context.Context, *GetSettingByCustomerClinicRequest) (*GetSettingResponse, error)
	EditCustomerClinicSettings(context.Context, *EditCustomerClinicSettingsRequest) (*EditCustomerClinicSettingsResponse, error)
	GetSettingByCustomerClinicSettingGroup(context.Context, *GetSettingByCustomerClinicSettingGroupRequest) (*GetSettingResponse, error)
	mustEmbedUnimplementedSettingServiceServer()
}

// UnimplementedSettingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSettingServiceServer struct {
}

func (UnimplementedSettingServiceServer) CreateOrUpdateClinicSetting(context.Context, *CreateClinicSettingRequest) (*CreateClinicSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateClinicSetting not implemented")
}
func (UnimplementedSettingServiceServer) GetClinicSetting(context.Context, *GetClinicSettingRequest) (*GetSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClinicSetting not implemented")
}
func (UnimplementedSettingServiceServer) GetAllSetting(context.Context, *GetAllSettingRequest) (*GetSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSetting not implemented")
}
func (UnimplementedSettingServiceServer) UpdateMemberSetting(context.Context, *UpdateMemberSettingRequest) (*GetSettingResponseUpdateMemberSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberSetting not implemented")
}
func (UnimplementedSettingServiceServer) GetCustomerIDbySettingResult(context.Context, *GetIDbySettingResultRequest) (*GetCustomerIDbySettingResultResonse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerIDbySettingResult not implemented")
}
func (UnimplementedSettingServiceServer) GetClinicIDbySettingResult(context.Context, *GetIDbySettingResultRequest) (*GetClinicIDbySettingResultResonse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClinicIDbySettingResult not implemented")
}
func (UnimplementedSettingServiceServer) GetSettingByCustomerClinic(context.Context, *GetSettingByCustomerClinicRequest) (*GetSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettingByCustomerClinic not implemented")
}
func (UnimplementedSettingServiceServer) EditCustomerClinicSettings(context.Context, *EditCustomerClinicSettingsRequest) (*EditCustomerClinicSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCustomerClinicSettings not implemented")
}
func (UnimplementedSettingServiceServer) GetSettingByCustomerClinicSettingGroup(context.Context, *GetSettingByCustomerClinicSettingGroupRequest) (*GetSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettingByCustomerClinicSettingGroup not implemented")
}
func (UnimplementedSettingServiceServer) mustEmbedUnimplementedSettingServiceServer() {}

// UnsafeSettingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettingServiceServer will
// result in compilation errors.
type UnsafeSettingServiceServer interface {
	mustEmbedUnimplementedSettingServiceServer()
}

func RegisterSettingServiceServer(s grpc.ServiceRegistrar, srv SettingServiceServer) {
	s.RegisterService(&SettingService_ServiceDesc, srv)
}

func _SettingService_CreateOrUpdateClinicSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClinicSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingServiceServer).CreateOrUpdateClinicSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingService_CreateOrUpdateClinicSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingServiceServer).CreateOrUpdateClinicSetting(ctx, req.(*CreateClinicSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingService_GetClinicSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClinicSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingServiceServer).GetClinicSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingService_GetClinicSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingServiceServer).GetClinicSetting(ctx, req.(*GetClinicSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingService_GetAllSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingServiceServer).GetAllSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingService_GetAllSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingServiceServer).GetAllSetting(ctx, req.(*GetAllSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingService_UpdateMemberSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingServiceServer).UpdateMemberSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingService_UpdateMemberSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingServiceServer).UpdateMemberSetting(ctx, req.(*UpdateMemberSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingService_GetCustomerIDbySettingResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIDbySettingResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingServiceServer).GetCustomerIDbySettingResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingService_GetCustomerIDbySettingResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingServiceServer).GetCustomerIDbySettingResult(ctx, req.(*GetIDbySettingResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingService_GetClinicIDbySettingResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIDbySettingResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingServiceServer).GetClinicIDbySettingResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingService_GetClinicIDbySettingResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingServiceServer).GetClinicIDbySettingResult(ctx, req.(*GetIDbySettingResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingService_GetSettingByCustomerClinic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingByCustomerClinicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingServiceServer).GetSettingByCustomerClinic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingService_GetSettingByCustomerClinic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingServiceServer).GetSettingByCustomerClinic(ctx, req.(*GetSettingByCustomerClinicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingService_EditCustomerClinicSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCustomerClinicSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingServiceServer).EditCustomerClinicSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingService_EditCustomerClinicSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingServiceServer).EditCustomerClinicSettings(ctx, req.(*EditCustomerClinicSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingService_GetSettingByCustomerClinicSettingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingByCustomerClinicSettingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingServiceServer).GetSettingByCustomerClinicSettingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingService_GetSettingByCustomerClinicSettingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingServiceServer).GetSettingByCustomerClinicSettingGroup(ctx, req.(*GetSettingByCustomerClinicSettingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SettingService_ServiceDesc is the grpc.ServiceDesc for SettingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SettingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coresamples_service.SettingService",
	HandlerType: (*SettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateClinicSetting",
			Handler:    _SettingService_CreateOrUpdateClinicSetting_Handler,
		},
		{
			MethodName: "GetClinicSetting",
			Handler:    _SettingService_GetClinicSetting_Handler,
		},
		{
			MethodName: "GetAllSetting",
			Handler:    _SettingService_GetAllSetting_Handler,
		},
		{
			MethodName: "UpdateMemberSetting",
			Handler:    _SettingService_UpdateMemberSetting_Handler,
		},
		{
			MethodName: "GetCustomerIDbySettingResult",
			Handler:    _SettingService_GetCustomerIDbySettingResult_Handler,
		},
		{
			MethodName: "GetClinicIDbySettingResult",
			Handler:    _SettingService_GetClinicIDbySettingResult_Handler,
		},
		{
			MethodName: "GetSettingByCustomerClinic",
			Handler:    _SettingService_GetSettingByCustomerClinic_Handler,
		},
		{
			MethodName: "EditCustomerClinicSettings",
			Handler:    _SettingService_EditCustomerClinicSettings_Handler,
		},
		{
			MethodName: "GetSettingByCustomerClinicSettingGroup",
			Handler:    _SettingService_GetSettingByCustomerClinicSettingGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/setting.proto",
}
