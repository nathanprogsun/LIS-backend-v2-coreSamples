// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/setting.proto

package coresamples_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SettingService service

func NewSettingServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SettingService service

type SettingService interface {
	CreateOrUpdateClinicSetting(ctx context.Context, in *CreateClinicSettingRequest, opts ...client.CallOption) (*CreateClinicSettingResponse, error)
	GetClinicSetting(ctx context.Context, in *GetClinicSettingRequest, opts ...client.CallOption) (*GetSettingResponse, error)
	GetAllSetting(ctx context.Context, in *GetAllSettingRequest, opts ...client.CallOption) (*GetSettingResponse, error)
	UpdateMemberSetting(ctx context.Context, in *UpdateMemberSettingRequest, opts ...client.CallOption) (*GetSettingResponseUpdateMemberSetting, error)
	GetCustomerIDbySettingResult(ctx context.Context, in *GetIDbySettingResultRequest, opts ...client.CallOption) (*GetCustomerIDbySettingResultResonse, error)
	GetClinicIDbySettingResult(ctx context.Context, in *GetIDbySettingResultRequest, opts ...client.CallOption) (*GetClinicIDbySettingResultResonse, error)
	GetSettingByCustomerClinic(ctx context.Context, in *GetSettingByCustomerClinicRequest, opts ...client.CallOption) (*GetSettingResponse, error)
	EditCustomerClinicSettings(ctx context.Context, in *EditCustomerClinicSettingsRequest, opts ...client.CallOption) (*EditCustomerClinicSettingsResponse, error)
	GetSettingByCustomerClinicSettingGroup(ctx context.Context, in *GetSettingByCustomerClinicSettingGroupRequest, opts ...client.CallOption) (*GetSettingResponse, error)
}

type settingService struct {
	c    client.Client
	name string
}

func NewSettingService(name string, c client.Client) SettingService {
	return &settingService{
		c:    c,
		name: name,
	}
}

func (c *settingService) CreateOrUpdateClinicSetting(ctx context.Context, in *CreateClinicSettingRequest, opts ...client.CallOption) (*CreateClinicSettingResponse, error) {
	req := c.c.NewRequest(c.name, "SettingService.CreateOrUpdateClinicSetting", in)
	out := new(CreateClinicSettingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingService) GetClinicSetting(ctx context.Context, in *GetClinicSettingRequest, opts ...client.CallOption) (*GetSettingResponse, error) {
	req := c.c.NewRequest(c.name, "SettingService.GetClinicSetting", in)
	out := new(GetSettingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingService) GetAllSetting(ctx context.Context, in *GetAllSettingRequest, opts ...client.CallOption) (*GetSettingResponse, error) {
	req := c.c.NewRequest(c.name, "SettingService.GetAllSetting", in)
	out := new(GetSettingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingService) UpdateMemberSetting(ctx context.Context, in *UpdateMemberSettingRequest, opts ...client.CallOption) (*GetSettingResponseUpdateMemberSetting, error) {
	req := c.c.NewRequest(c.name, "SettingService.UpdateMemberSetting", in)
	out := new(GetSettingResponseUpdateMemberSetting)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingService) GetCustomerIDbySettingResult(ctx context.Context, in *GetIDbySettingResultRequest, opts ...client.CallOption) (*GetCustomerIDbySettingResultResonse, error) {
	req := c.c.NewRequest(c.name, "SettingService.GetCustomerIDbySettingResult", in)
	out := new(GetCustomerIDbySettingResultResonse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingService) GetClinicIDbySettingResult(ctx context.Context, in *GetIDbySettingResultRequest, opts ...client.CallOption) (*GetClinicIDbySettingResultResonse, error) {
	req := c.c.NewRequest(c.name, "SettingService.GetClinicIDbySettingResult", in)
	out := new(GetClinicIDbySettingResultResonse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingService) GetSettingByCustomerClinic(ctx context.Context, in *GetSettingByCustomerClinicRequest, opts ...client.CallOption) (*GetSettingResponse, error) {
	req := c.c.NewRequest(c.name, "SettingService.GetSettingByCustomerClinic", in)
	out := new(GetSettingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingService) EditCustomerClinicSettings(ctx context.Context, in *EditCustomerClinicSettingsRequest, opts ...client.CallOption) (*EditCustomerClinicSettingsResponse, error) {
	req := c.c.NewRequest(c.name, "SettingService.EditCustomerClinicSettings", in)
	out := new(EditCustomerClinicSettingsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingService) GetSettingByCustomerClinicSettingGroup(ctx context.Context, in *GetSettingByCustomerClinicSettingGroupRequest, opts ...client.CallOption) (*GetSettingResponse, error) {
	req := c.c.NewRequest(c.name, "SettingService.GetSettingByCustomerClinicSettingGroup", in)
	out := new(GetSettingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SettingService service

type SettingServiceHandler interface {
	CreateOrUpdateClinicSetting(context.Context, *CreateClinicSettingRequest, *CreateClinicSettingResponse) error
	GetClinicSetting(context.Context, *GetClinicSettingRequest, *GetSettingResponse) error
	GetAllSetting(context.Context, *GetAllSettingRequest, *GetSettingResponse) error
	UpdateMemberSetting(context.Context, *UpdateMemberSettingRequest, *GetSettingResponseUpdateMemberSetting) error
	GetCustomerIDbySettingResult(context.Context, *GetIDbySettingResultRequest, *GetCustomerIDbySettingResultResonse) error
	GetClinicIDbySettingResult(context.Context, *GetIDbySettingResultRequest, *GetClinicIDbySettingResultResonse) error
	GetSettingByCustomerClinic(context.Context, *GetSettingByCustomerClinicRequest, *GetSettingResponse) error
	EditCustomerClinicSettings(context.Context, *EditCustomerClinicSettingsRequest, *EditCustomerClinicSettingsResponse) error
	GetSettingByCustomerClinicSettingGroup(context.Context, *GetSettingByCustomerClinicSettingGroupRequest, *GetSettingResponse) error
}

func RegisterSettingServiceHandler(s server.Server, hdlr SettingServiceHandler, opts ...server.HandlerOption) error {
	type settingService interface {
		CreateOrUpdateClinicSetting(ctx context.Context, in *CreateClinicSettingRequest, out *CreateClinicSettingResponse) error
		GetClinicSetting(ctx context.Context, in *GetClinicSettingRequest, out *GetSettingResponse) error
		GetAllSetting(ctx context.Context, in *GetAllSettingRequest, out *GetSettingResponse) error
		UpdateMemberSetting(ctx context.Context, in *UpdateMemberSettingRequest, out *GetSettingResponseUpdateMemberSetting) error
		GetCustomerIDbySettingResult(ctx context.Context, in *GetIDbySettingResultRequest, out *GetCustomerIDbySettingResultResonse) error
		GetClinicIDbySettingResult(ctx context.Context, in *GetIDbySettingResultRequest, out *GetClinicIDbySettingResultResonse) error
		GetSettingByCustomerClinic(ctx context.Context, in *GetSettingByCustomerClinicRequest, out *GetSettingResponse) error
		EditCustomerClinicSettings(ctx context.Context, in *EditCustomerClinicSettingsRequest, out *EditCustomerClinicSettingsResponse) error
		GetSettingByCustomerClinicSettingGroup(ctx context.Context, in *GetSettingByCustomerClinicSettingGroupRequest, out *GetSettingResponse) error
	}
	type SettingService struct {
		settingService
	}
	h := &settingServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SettingService{h}, opts...))
}

type settingServiceHandler struct {
	SettingServiceHandler
}

func (h *settingServiceHandler) CreateOrUpdateClinicSetting(ctx context.Context, in *CreateClinicSettingRequest, out *CreateClinicSettingResponse) error {
	return h.SettingServiceHandler.CreateOrUpdateClinicSetting(ctx, in, out)
}

func (h *settingServiceHandler) GetClinicSetting(ctx context.Context, in *GetClinicSettingRequest, out *GetSettingResponse) error {
	return h.SettingServiceHandler.GetClinicSetting(ctx, in, out)
}

func (h *settingServiceHandler) GetAllSetting(ctx context.Context, in *GetAllSettingRequest, out *GetSettingResponse) error {
	return h.SettingServiceHandler.GetAllSetting(ctx, in, out)
}

func (h *settingServiceHandler) UpdateMemberSetting(ctx context.Context, in *UpdateMemberSettingRequest, out *GetSettingResponseUpdateMemberSetting) error {
	return h.SettingServiceHandler.UpdateMemberSetting(ctx, in, out)
}

func (h *settingServiceHandler) GetCustomerIDbySettingResult(ctx context.Context, in *GetIDbySettingResultRequest, out *GetCustomerIDbySettingResultResonse) error {
	return h.SettingServiceHandler.GetCustomerIDbySettingResult(ctx, in, out)
}

func (h *settingServiceHandler) GetClinicIDbySettingResult(ctx context.Context, in *GetIDbySettingResultRequest, out *GetClinicIDbySettingResultResonse) error {
	return h.SettingServiceHandler.GetClinicIDbySettingResult(ctx, in, out)
}

func (h *settingServiceHandler) GetSettingByCustomerClinic(ctx context.Context, in *GetSettingByCustomerClinicRequest, out *GetSettingResponse) error {
	return h.SettingServiceHandler.GetSettingByCustomerClinic(ctx, in, out)
}

func (h *settingServiceHandler) EditCustomerClinicSettings(ctx context.Context, in *EditCustomerClinicSettingsRequest, out *EditCustomerClinicSettingsResponse) error {
	return h.SettingServiceHandler.EditCustomerClinicSettings(ctx, in, out)
}

func (h *settingServiceHandler) GetSettingByCustomerClinicSettingGroup(ctx context.Context, in *GetSettingByCustomerClinicSettingGroupRequest, out *GetSettingResponse) error {
	return h.SettingServiceHandler.GetSettingByCustomerClinicSettingGroup(ctx, in, out)
}
