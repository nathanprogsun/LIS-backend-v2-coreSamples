// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/serviceship_service.proto

package coresamples_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceshipService_SubscriptionAllowed_FullMethodName             = "/coresamples_service.ServiceshipService/SubscriptionAllowed"
	ServiceshipService_Subscribe_FullMethodName                       = "/coresamples_service.ServiceshipService/Subscribe"
	ServiceshipService_GetAccountSubscriptions_FullMethodName         = "/coresamples_service.ServiceshipService/GetAccountSubscriptions"
	ServiceshipService_GetChargingSubscription_FullMethodName         = "/coresamples_service.ServiceshipService/GetChargingSubscription"
	ServiceshipService_AddBillingPlan_FullMethodName                  = "/coresamples_service.ServiceshipService/AddBillingPlan"
	ServiceshipService_CreateBillingPlanSet_FullMethodName            = "/coresamples_service.ServiceshipService/CreateBillingPlanSet"
	ServiceshipService_GetLatestBillingPlanSet_FullMethodName         = "/coresamples_service.ServiceshipService/GetLatestBillingPlanSet"
	ServiceshipService_GetBillingPlanByID_FullMethodName              = "/coresamples_service.ServiceshipService/GetBillingPlanByID"
	ServiceshipService_GetBillingPlanBySubscriptionID_FullMethodName  = "/coresamples_service.ServiceshipService/GetBillingPlanBySubscriptionID"
	ServiceshipService_GetPaymentMethods_FullMethodName               = "/coresamples_service.ServiceshipService/GetPaymentMethods"
	ServiceshipService_CreatePaymentMethod_FullMethodName             = "/coresamples_service.ServiceshipService/CreatePaymentMethod"
	ServiceshipService_UpdateSubscriptionPaymentMethod_FullMethodName = "/coresamples_service.ServiceshipService/UpdateSubscriptionPaymentMethod"
	ServiceshipService_DeletePaymentMethod_FullMethodName             = "/coresamples_service.ServiceshipService/DeletePaymentMethod"
	ServiceshipService_PauseAutoRenew_FullMethodName                  = "/coresamples_service.ServiceshipService/PauseAutoRenew"
	ServiceshipService_ResumeAutoRenew_FullMethodName                 = "/coresamples_service.ServiceshipService/ResumeAutoRenew"
	ServiceshipService_UpdateSubscriptionBillingPlan_FullMethodName   = "/coresamples_service.ServiceshipService/UpdateSubscriptionBillingPlan"
	ServiceshipService_UpdateSubscriptionEmail_FullMethodName         = "/coresamples_service.ServiceshipService/UpdateSubscriptionEmail"
	ServiceshipService_UpdateAllSubscriptionEmail_FullMethodName      = "/coresamples_service.ServiceshipService/UpdateAllSubscriptionEmail"
	ServiceshipService_GetSubscriptionTransactionInfos_FullMethodName = "/coresamples_service.ServiceshipService/GetSubscriptionTransactionInfos"
)

// ServiceshipServiceClient is the client API for ServiceshipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceshipServiceClient interface {
	SubscriptionAllowed(ctx context.Context, in *ClinicName, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
	// rpc CreateMembership(CreateMembershipRequest) returns (coresamples_service.SimpleResponse) {}
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	GetAccountSubscriptions(ctx context.Context, in *GetAccountSubscriptionsRequest, opts ...grpc.CallOption) (*AccountSubscriptionsInfo, error)
	GetChargingSubscription(ctx context.Context, in *GetChargingSubscriptionRequest, opts ...grpc.CallOption) (*ChargingSubscriptionInfo, error)
	AddBillingPlan(ctx context.Context, in *AddBillingPlanRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	CreateBillingPlanSet(ctx context.Context, in *CreateBillingPlanSetRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	GetLatestBillingPlanSet(ctx context.Context, in *ServiceshipID, opts ...grpc.CallOption) (*MembershipBillingPlansInfo, error)
	GetBillingPlanByID(ctx context.Context, in *BillingPlanID, opts ...grpc.CallOption) (*MembershipBillingPlanInfo, error)
	GetBillingPlanBySubscriptionID(ctx context.Context, in *SubscriptionID, opts ...grpc.CallOption) (*MembershipBillingPlanInfo, error)
	GetPaymentMethods(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*PaymentMethodsInfo, error)
	CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...grpc.CallOption) (*CreatePaymentMethodResponse, error)
	UpdateSubscriptionPaymentMethod(ctx context.Context, in *UpdateSubscriptionPaymentMethodRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	PauseAutoRenew(ctx context.Context, in *PauseAutoRenewRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	ResumeAutoRenew(ctx context.Context, in *ResumeAutoRenewRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UpdateSubscriptionBillingPlan(ctx context.Context, in *UpdateSubscriptionBillingPlanRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UpdateSubscriptionEmail(ctx context.Context, in *UpdateSubscriptionEmailRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UpdateAllSubscriptionEmail(ctx context.Context, in *UpdateAllSubscriptionEmailRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	GetSubscriptionTransactionInfos(ctx context.Context, in *GetSubscriptionTransactionInfosRequest, opts ...grpc.CallOption) (*GetSubscriptionTransactionInfosResponse, error)
}

type serviceshipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceshipServiceClient(cc grpc.ClientConnInterface) ServiceshipServiceClient {
	return &serviceshipServiceClient{cc}
}

func (c *serviceshipServiceClient) SubscriptionAllowed(ctx context.Context, in *ClinicName, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, ServiceshipService_SubscriptionAllowed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, ServiceshipService_Subscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) GetAccountSubscriptions(ctx context.Context, in *GetAccountSubscriptionsRequest, opts ...grpc.CallOption) (*AccountSubscriptionsInfo, error) {
	out := new(AccountSubscriptionsInfo)
	err := c.cc.Invoke(ctx, ServiceshipService_GetAccountSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) GetChargingSubscription(ctx context.Context, in *GetChargingSubscriptionRequest, opts ...grpc.CallOption) (*ChargingSubscriptionInfo, error) {
	out := new(ChargingSubscriptionInfo)
	err := c.cc.Invoke(ctx, ServiceshipService_GetChargingSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) AddBillingPlan(ctx context.Context, in *AddBillingPlanRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, ServiceshipService_AddBillingPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) CreateBillingPlanSet(ctx context.Context, in *CreateBillingPlanSetRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, ServiceshipService_CreateBillingPlanSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) GetLatestBillingPlanSet(ctx context.Context, in *ServiceshipID, opts ...grpc.CallOption) (*MembershipBillingPlansInfo, error) {
	out := new(MembershipBillingPlansInfo)
	err := c.cc.Invoke(ctx, ServiceshipService_GetLatestBillingPlanSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) GetBillingPlanByID(ctx context.Context, in *BillingPlanID, opts ...grpc.CallOption) (*MembershipBillingPlanInfo, error) {
	out := new(MembershipBillingPlanInfo)
	err := c.cc.Invoke(ctx, ServiceshipService_GetBillingPlanByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) GetBillingPlanBySubscriptionID(ctx context.Context, in *SubscriptionID, opts ...grpc.CallOption) (*MembershipBillingPlanInfo, error) {
	out := new(MembershipBillingPlanInfo)
	err := c.cc.Invoke(ctx, ServiceshipService_GetBillingPlanBySubscriptionID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) GetPaymentMethods(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*PaymentMethodsInfo, error) {
	out := new(PaymentMethodsInfo)
	err := c.cc.Invoke(ctx, ServiceshipService_GetPaymentMethods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...grpc.CallOption) (*CreatePaymentMethodResponse, error) {
	out := new(CreatePaymentMethodResponse)
	err := c.cc.Invoke(ctx, ServiceshipService_CreatePaymentMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) UpdateSubscriptionPaymentMethod(ctx context.Context, in *UpdateSubscriptionPaymentMethodRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, ServiceshipService_UpdateSubscriptionPaymentMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, ServiceshipService_DeletePaymentMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) PauseAutoRenew(ctx context.Context, in *PauseAutoRenewRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, ServiceshipService_PauseAutoRenew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) ResumeAutoRenew(ctx context.Context, in *ResumeAutoRenewRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, ServiceshipService_ResumeAutoRenew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) UpdateSubscriptionBillingPlan(ctx context.Context, in *UpdateSubscriptionBillingPlanRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, ServiceshipService_UpdateSubscriptionBillingPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) UpdateSubscriptionEmail(ctx context.Context, in *UpdateSubscriptionEmailRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, ServiceshipService_UpdateSubscriptionEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) UpdateAllSubscriptionEmail(ctx context.Context, in *UpdateAllSubscriptionEmailRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, ServiceshipService_UpdateAllSubscriptionEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceshipServiceClient) GetSubscriptionTransactionInfos(ctx context.Context, in *GetSubscriptionTransactionInfosRequest, opts ...grpc.CallOption) (*GetSubscriptionTransactionInfosResponse, error) {
	out := new(GetSubscriptionTransactionInfosResponse)
	err := c.cc.Invoke(ctx, ServiceshipService_GetSubscriptionTransactionInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceshipServiceServer is the server API for ServiceshipService service.
// All implementations must embed UnimplementedServiceshipServiceServer
// for forward compatibility
type ServiceshipServiceServer interface {
	SubscriptionAllowed(context.Context, *ClinicName) (*CheckPermissionResponse, error)
	// rpc CreateMembership(CreateMembershipRequest) returns (coresamples_service.SimpleResponse) {}
	Subscribe(context.Context, *SubscribeRequest) (*SimpleResponse, error)
	GetAccountSubscriptions(context.Context, *GetAccountSubscriptionsRequest) (*AccountSubscriptionsInfo, error)
	GetChargingSubscription(context.Context, *GetChargingSubscriptionRequest) (*ChargingSubscriptionInfo, error)
	AddBillingPlan(context.Context, *AddBillingPlanRequest) (*SimpleResponse, error)
	CreateBillingPlanSet(context.Context, *CreateBillingPlanSetRequest) (*SimpleResponse, error)
	GetLatestBillingPlanSet(context.Context, *ServiceshipID) (*MembershipBillingPlansInfo, error)
	GetBillingPlanByID(context.Context, *BillingPlanID) (*MembershipBillingPlanInfo, error)
	GetBillingPlanBySubscriptionID(context.Context, *SubscriptionID) (*MembershipBillingPlanInfo, error)
	GetPaymentMethods(context.Context, *AccountID) (*PaymentMethodsInfo, error)
	CreatePaymentMethod(context.Context, *CreatePaymentMethodRequest) (*CreatePaymentMethodResponse, error)
	UpdateSubscriptionPaymentMethod(context.Context, *UpdateSubscriptionPaymentMethodRequest) (*SimpleResponse, error)
	DeletePaymentMethod(context.Context, *DeletePaymentMethodRequest) (*SimpleResponse, error)
	PauseAutoRenew(context.Context, *PauseAutoRenewRequest) (*SimpleResponse, error)
	ResumeAutoRenew(context.Context, *ResumeAutoRenewRequest) (*SimpleResponse, error)
	UpdateSubscriptionBillingPlan(context.Context, *UpdateSubscriptionBillingPlanRequest) (*SimpleResponse, error)
	UpdateSubscriptionEmail(context.Context, *UpdateSubscriptionEmailRequest) (*SimpleResponse, error)
	UpdateAllSubscriptionEmail(context.Context, *UpdateAllSubscriptionEmailRequest) (*SimpleResponse, error)
	GetSubscriptionTransactionInfos(context.Context, *GetSubscriptionTransactionInfosRequest) (*GetSubscriptionTransactionInfosResponse, error)
	mustEmbedUnimplementedServiceshipServiceServer()
}

// UnimplementedServiceshipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceshipServiceServer struct {
}

func (UnimplementedServiceshipServiceServer) SubscriptionAllowed(context.Context, *ClinicName) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscriptionAllowed not implemented")
}
func (UnimplementedServiceshipServiceServer) Subscribe(context.Context, *SubscribeRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedServiceshipServiceServer) GetAccountSubscriptions(context.Context, *GetAccountSubscriptionsRequest) (*AccountSubscriptionsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountSubscriptions not implemented")
}
func (UnimplementedServiceshipServiceServer) GetChargingSubscription(context.Context, *GetChargingSubscriptionRequest) (*ChargingSubscriptionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChargingSubscription not implemented")
}
func (UnimplementedServiceshipServiceServer) AddBillingPlan(context.Context, *AddBillingPlanRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBillingPlan not implemented")
}
func (UnimplementedServiceshipServiceServer) CreateBillingPlanSet(context.Context, *CreateBillingPlanSetRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillingPlanSet not implemented")
}
func (UnimplementedServiceshipServiceServer) GetLatestBillingPlanSet(context.Context, *ServiceshipID) (*MembershipBillingPlansInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBillingPlanSet not implemented")
}
func (UnimplementedServiceshipServiceServer) GetBillingPlanByID(context.Context, *BillingPlanID) (*MembershipBillingPlanInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingPlanByID not implemented")
}
func (UnimplementedServiceshipServiceServer) GetBillingPlanBySubscriptionID(context.Context, *SubscriptionID) (*MembershipBillingPlanInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingPlanBySubscriptionID not implemented")
}
func (UnimplementedServiceshipServiceServer) GetPaymentMethods(context.Context, *AccountID) (*PaymentMethodsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentMethods not implemented")
}
func (UnimplementedServiceshipServiceServer) CreatePaymentMethod(context.Context, *CreatePaymentMethodRequest) (*CreatePaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentMethod not implemented")
}
func (UnimplementedServiceshipServiceServer) UpdateSubscriptionPaymentMethod(context.Context, *UpdateSubscriptionPaymentMethodRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriptionPaymentMethod not implemented")
}
func (UnimplementedServiceshipServiceServer) DeletePaymentMethod(context.Context, *DeletePaymentMethodRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePaymentMethod not implemented")
}
func (UnimplementedServiceshipServiceServer) PauseAutoRenew(context.Context, *PauseAutoRenewRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseAutoRenew not implemented")
}
func (UnimplementedServiceshipServiceServer) ResumeAutoRenew(context.Context, *ResumeAutoRenewRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeAutoRenew not implemented")
}
func (UnimplementedServiceshipServiceServer) UpdateSubscriptionBillingPlan(context.Context, *UpdateSubscriptionBillingPlanRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriptionBillingPlan not implemented")
}
func (UnimplementedServiceshipServiceServer) UpdateSubscriptionEmail(context.Context, *UpdateSubscriptionEmailRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriptionEmail not implemented")
}
func (UnimplementedServiceshipServiceServer) UpdateAllSubscriptionEmail(context.Context, *UpdateAllSubscriptionEmailRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllSubscriptionEmail not implemented")
}
func (UnimplementedServiceshipServiceServer) GetSubscriptionTransactionInfos(context.Context, *GetSubscriptionTransactionInfosRequest) (*GetSubscriptionTransactionInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionTransactionInfos not implemented")
}
func (UnimplementedServiceshipServiceServer) mustEmbedUnimplementedServiceshipServiceServer() {}

// UnsafeServiceshipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceshipServiceServer will
// result in compilation errors.
type UnsafeServiceshipServiceServer interface {
	mustEmbedUnimplementedServiceshipServiceServer()
}

func RegisterServiceshipServiceServer(s grpc.ServiceRegistrar, srv ServiceshipServiceServer) {
	s.RegisterService(&ServiceshipService_ServiceDesc, srv)
}

func _ServiceshipService_SubscriptionAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClinicName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).SubscriptionAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_SubscriptionAllowed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).SubscriptionAllowed(ctx, req.(*ClinicName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_GetAccountSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).GetAccountSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_GetAccountSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).GetAccountSubscriptions(ctx, req.(*GetAccountSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_GetChargingSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChargingSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).GetChargingSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_GetChargingSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).GetChargingSubscription(ctx, req.(*GetChargingSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_AddBillingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBillingPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).AddBillingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_AddBillingPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).AddBillingPlan(ctx, req.(*AddBillingPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_CreateBillingPlanSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBillingPlanSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).CreateBillingPlanSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_CreateBillingPlanSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).CreateBillingPlanSet(ctx, req.(*CreateBillingPlanSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_GetLatestBillingPlanSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceshipID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).GetLatestBillingPlanSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_GetLatestBillingPlanSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).GetLatestBillingPlanSet(ctx, req.(*ServiceshipID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_GetBillingPlanByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingPlanID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).GetBillingPlanByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_GetBillingPlanByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).GetBillingPlanByID(ctx, req.(*BillingPlanID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_GetBillingPlanBySubscriptionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).GetBillingPlanBySubscriptionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_GetBillingPlanBySubscriptionID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).GetBillingPlanBySubscriptionID(ctx, req.(*SubscriptionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_GetPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).GetPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_GetPaymentMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).GetPaymentMethods(ctx, req.(*AccountID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_CreatePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).CreatePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_CreatePaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).CreatePaymentMethod(ctx, req.(*CreatePaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_UpdateSubscriptionPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).UpdateSubscriptionPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_UpdateSubscriptionPaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).UpdateSubscriptionPaymentMethod(ctx, req.(*UpdateSubscriptionPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_DeletePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).DeletePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_DeletePaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).DeletePaymentMethod(ctx, req.(*DeletePaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_PauseAutoRenew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseAutoRenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).PauseAutoRenew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_PauseAutoRenew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).PauseAutoRenew(ctx, req.(*PauseAutoRenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_ResumeAutoRenew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeAutoRenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).ResumeAutoRenew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_ResumeAutoRenew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).ResumeAutoRenew(ctx, req.(*ResumeAutoRenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_UpdateSubscriptionBillingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionBillingPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).UpdateSubscriptionBillingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_UpdateSubscriptionBillingPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).UpdateSubscriptionBillingPlan(ctx, req.(*UpdateSubscriptionBillingPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_UpdateSubscriptionEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).UpdateSubscriptionEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_UpdateSubscriptionEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).UpdateSubscriptionEmail(ctx, req.(*UpdateSubscriptionEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_UpdateAllSubscriptionEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAllSubscriptionEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).UpdateAllSubscriptionEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_UpdateAllSubscriptionEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).UpdateAllSubscriptionEmail(ctx, req.(*UpdateAllSubscriptionEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceshipService_GetSubscriptionTransactionInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionTransactionInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceshipServiceServer).GetSubscriptionTransactionInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceshipService_GetSubscriptionTransactionInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceshipServiceServer).GetSubscriptionTransactionInfos(ctx, req.(*GetSubscriptionTransactionInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceshipService_ServiceDesc is the grpc.ServiceDesc for ServiceshipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceshipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coresamples_service.ServiceshipService",
	HandlerType: (*ServiceshipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubscriptionAllowed",
			Handler:    _ServiceshipService_SubscriptionAllowed_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _ServiceshipService_Subscribe_Handler,
		},
		{
			MethodName: "GetAccountSubscriptions",
			Handler:    _ServiceshipService_GetAccountSubscriptions_Handler,
		},
		{
			MethodName: "GetChargingSubscription",
			Handler:    _ServiceshipService_GetChargingSubscription_Handler,
		},
		{
			MethodName: "AddBillingPlan",
			Handler:    _ServiceshipService_AddBillingPlan_Handler,
		},
		{
			MethodName: "CreateBillingPlanSet",
			Handler:    _ServiceshipService_CreateBillingPlanSet_Handler,
		},
		{
			MethodName: "GetLatestBillingPlanSet",
			Handler:    _ServiceshipService_GetLatestBillingPlanSet_Handler,
		},
		{
			MethodName: "GetBillingPlanByID",
			Handler:    _ServiceshipService_GetBillingPlanByID_Handler,
		},
		{
			MethodName: "GetBillingPlanBySubscriptionID",
			Handler:    _ServiceshipService_GetBillingPlanBySubscriptionID_Handler,
		},
		{
			MethodName: "GetPaymentMethods",
			Handler:    _ServiceshipService_GetPaymentMethods_Handler,
		},
		{
			MethodName: "CreatePaymentMethod",
			Handler:    _ServiceshipService_CreatePaymentMethod_Handler,
		},
		{
			MethodName: "UpdateSubscriptionPaymentMethod",
			Handler:    _ServiceshipService_UpdateSubscriptionPaymentMethod_Handler,
		},
		{
			MethodName: "DeletePaymentMethod",
			Handler:    _ServiceshipService_DeletePaymentMethod_Handler,
		},
		{
			MethodName: "PauseAutoRenew",
			Handler:    _ServiceshipService_PauseAutoRenew_Handler,
		},
		{
			MethodName: "ResumeAutoRenew",
			Handler:    _ServiceshipService_ResumeAutoRenew_Handler,
		},
		{
			MethodName: "UpdateSubscriptionBillingPlan",
			Handler:    _ServiceshipService_UpdateSubscriptionBillingPlan_Handler,
		},
		{
			MethodName: "UpdateSubscriptionEmail",
			Handler:    _ServiceshipService_UpdateSubscriptionEmail_Handler,
		},
		{
			MethodName: "UpdateAllSubscriptionEmail",
			Handler:    _ServiceshipService_UpdateAllSubscriptionEmail_Handler,
		},
		{
			MethodName: "GetSubscriptionTransactionInfos",
			Handler:    _ServiceshipService_GetSubscriptionTransactionInfos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/serviceship_service.proto",
}
