// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: proto/sample_service.proto

// import "google/protobuf/duration.proto";
// import "google/protobuf/timestamp.proto";

package coresamples_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type New_BatchCheckSamplesAttributesRequest_SampleAttributeName int32

const (
	New_BatchCheckSamplesAttributesRequest_sample_id    New_BatchCheckSamplesAttributesRequest_SampleAttributeName = 0
	New_BatchCheckSamplesAttributesRequest_accession_id New_BatchCheckSamplesAttributesRequest_SampleAttributeName = 1
)

// Enum value maps for New_BatchCheckSamplesAttributesRequest_SampleAttributeName.
var (
	New_BatchCheckSamplesAttributesRequest_SampleAttributeName_name = map[int32]string{
		0: "sample_id",
		1: "accession_id",
	}
	New_BatchCheckSamplesAttributesRequest_SampleAttributeName_value = map[string]int32{
		"sample_id":    0,
		"accession_id": 1,
	}
)

func (x New_BatchCheckSamplesAttributesRequest_SampleAttributeName) Enum() *New_BatchCheckSamplesAttributesRequest_SampleAttributeName {
	p := new(New_BatchCheckSamplesAttributesRequest_SampleAttributeName)
	*p = x
	return p
}

func (x New_BatchCheckSamplesAttributesRequest_SampleAttributeName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (New_BatchCheckSamplesAttributesRequest_SampleAttributeName) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_sample_service_proto_enumTypes[0].Descriptor()
}

func (New_BatchCheckSamplesAttributesRequest_SampleAttributeName) Type() protoreflect.EnumType {
	return &file_proto_sample_service_proto_enumTypes[0]
}

func (x New_BatchCheckSamplesAttributesRequest_SampleAttributeName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use New_BatchCheckSamplesAttributesRequest_SampleAttributeName.Descriptor instead.
func (New_BatchCheckSamplesAttributesRequest_SampleAttributeName) EnumDescriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{3, 0}
}

type BatchCheckSamplesAttributesRequest_SampleAttributeName int32

const (
	BatchCheckSamplesAttributesRequest_sample_id    BatchCheckSamplesAttributesRequest_SampleAttributeName = 0
	BatchCheckSamplesAttributesRequest_accession_id BatchCheckSamplesAttributesRequest_SampleAttributeName = 1
)

// Enum value maps for BatchCheckSamplesAttributesRequest_SampleAttributeName.
var (
	BatchCheckSamplesAttributesRequest_SampleAttributeName_name = map[int32]string{
		0: "sample_id",
		1: "accession_id",
	}
	BatchCheckSamplesAttributesRequest_SampleAttributeName_value = map[string]int32{
		"sample_id":    0,
		"accession_id": 1,
	}
)

func (x BatchCheckSamplesAttributesRequest_SampleAttributeName) Enum() *BatchCheckSamplesAttributesRequest_SampleAttributeName {
	p := new(BatchCheckSamplesAttributesRequest_SampleAttributeName)
	*p = x
	return p
}

func (x BatchCheckSamplesAttributesRequest_SampleAttributeName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchCheckSamplesAttributesRequest_SampleAttributeName) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_sample_service_proto_enumTypes[1].Descriptor()
}

func (BatchCheckSamplesAttributesRequest_SampleAttributeName) Type() protoreflect.EnumType {
	return &file_proto_sample_service_proto_enumTypes[1]
}

func (x BatchCheckSamplesAttributesRequest_SampleAttributeName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchCheckSamplesAttributesRequest_SampleAttributeName.Descriptor instead.
func (BatchCheckSamplesAttributesRequest_SampleAttributeName) EnumDescriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{5, 0}
}

type CheckSamplesAttributesRequest_SampleAttributeName int32

const (
	CheckSamplesAttributesRequest_sample_id    CheckSamplesAttributesRequest_SampleAttributeName = 0
	CheckSamplesAttributesRequest_accession_id CheckSamplesAttributesRequest_SampleAttributeName = 1
)

// Enum value maps for CheckSamplesAttributesRequest_SampleAttributeName.
var (
	CheckSamplesAttributesRequest_SampleAttributeName_name = map[int32]string{
		0: "sample_id",
		1: "accession_id",
	}
	CheckSamplesAttributesRequest_SampleAttributeName_value = map[string]int32{
		"sample_id":    0,
		"accession_id": 1,
	}
)

func (x CheckSamplesAttributesRequest_SampleAttributeName) Enum() *CheckSamplesAttributesRequest_SampleAttributeName {
	p := new(CheckSamplesAttributesRequest_SampleAttributeName)
	*p = x
	return p
}

func (x CheckSamplesAttributesRequest_SampleAttributeName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckSamplesAttributesRequest_SampleAttributeName) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_sample_service_proto_enumTypes[2].Descriptor()
}

func (CheckSamplesAttributesRequest_SampleAttributeName) Type() protoreflect.EnumType {
	return &file_proto_sample_service_proto_enumTypes[2]
}

func (x CheckSamplesAttributesRequest_SampleAttributeName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckSamplesAttributesRequest_SampleAttributeName.Descriptor instead.
func (CheckSamplesAttributesRequest_SampleAttributeName) EnumDescriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{7, 0}
}

type FuzzySearchPhlebotomistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhleSearchInput string `protobuf:"bytes,1,opt,name=phle_search_input,json=phleSearchInput,proto3" json:"phle_search_input,omitempty"`
}

func (x *FuzzySearchPhlebotomistsRequest) Reset() {
	*x = FuzzySearchPhlebotomistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzySearchPhlebotomistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzySearchPhlebotomistsRequest) ProtoMessage() {}

func (x *FuzzySearchPhlebotomistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzySearchPhlebotomistsRequest.ProtoReflect.Descriptor instead.
func (*FuzzySearchPhlebotomistsRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{0}
}

func (x *FuzzySearchPhlebotomistsRequest) GetPhleSearchInput() string {
	if x != nil {
		return x.PhleSearchInput
	}
	return ""
}

type PhlebotomistsObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhlebotomistId           string `protobuf:"bytes,1,opt,name=phlebotomist_id,json=phlebotomistId,proto3" json:"phlebotomist_id,omitempty"`
	PhlebotomistName         string `protobuf:"bytes,2,opt,name=phlebotomist_name,json=phlebotomistName,proto3" json:"phlebotomist_name,omitempty"`
	PhlebotomistDisplayId    string `protobuf:"bytes,3,opt,name=phlebotomist_display_id,json=phlebotomistDisplayId,proto3" json:"phlebotomist_display_id,omitempty"`
	PhlebotomistPracticeName string `protobuf:"bytes,4,opt,name=phlebotomist_practice_name,json=phlebotomistPracticeName,proto3" json:"phlebotomist_practice_name,omitempty"`
}

func (x *PhlebotomistsObject) Reset() {
	*x = PhlebotomistsObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhlebotomistsObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhlebotomistsObject) ProtoMessage() {}

func (x *PhlebotomistsObject) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhlebotomistsObject.ProtoReflect.Descriptor instead.
func (*PhlebotomistsObject) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{1}
}

func (x *PhlebotomistsObject) GetPhlebotomistId() string {
	if x != nil {
		return x.PhlebotomistId
	}
	return ""
}

func (x *PhlebotomistsObject) GetPhlebotomistName() string {
	if x != nil {
		return x.PhlebotomistName
	}
	return ""
}

func (x *PhlebotomistsObject) GetPhlebotomistDisplayId() string {
	if x != nil {
		return x.PhlebotomistDisplayId
	}
	return ""
}

func (x *PhlebotomistsObject) GetPhlebotomistPracticeName() string {
	if x != nil {
		return x.PhlebotomistPracticeName
	}
	return ""
}

type PhlebotomistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phlebotomists []*PhlebotomistsObject `protobuf:"bytes,1,rep,name=phlebotomists,proto3" json:"phlebotomists,omitempty"`
}

func (x *PhlebotomistsResponse) Reset() {
	*x = PhlebotomistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhlebotomistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhlebotomistsResponse) ProtoMessage() {}

func (x *PhlebotomistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhlebotomistsResponse.ProtoReflect.Descriptor instead.
func (*PhlebotomistsResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{2}
}

func (x *PhlebotomistsResponse) GetPhlebotomists() []*PhlebotomistsObject {
	if x != nil {
		return x.Phlebotomists
	}
	return nil
}

// new Request protobuf for Sample Attribute Value Check
type New_BatchCheckSamplesAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleAttributeName  New_BatchCheckSamplesAttributesRequest_SampleAttributeName `protobuf:"varint,1,opt,name=sample_attribute_name,json=sampleAttributeName,proto3,enum=coresamples_service.New_BatchCheckSamplesAttributesRequest_SampleAttributeName" json:"sample_attribute_name,omitempty"`
	SampleAttributeValue []string                                                   `protobuf:"bytes,2,rep,name=sample_attribute_value,json=sampleAttributeValue,proto3" json:"sample_attribute_value,omitempty"`
}

func (x *New_BatchCheckSamplesAttributesRequest) Reset() {
	*x = New_BatchCheckSamplesAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *New_BatchCheckSamplesAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*New_BatchCheckSamplesAttributesRequest) ProtoMessage() {}

func (x *New_BatchCheckSamplesAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use New_BatchCheckSamplesAttributesRequest.ProtoReflect.Descriptor instead.
func (*New_BatchCheckSamplesAttributesRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{3}
}

func (x *New_BatchCheckSamplesAttributesRequest) GetSampleAttributeName() New_BatchCheckSamplesAttributesRequest_SampleAttributeName {
	if x != nil {
		return x.SampleAttributeName
	}
	return New_BatchCheckSamplesAttributesRequest_sample_id
}

func (x *New_BatchCheckSamplesAttributesRequest) GetSampleAttributeValue() []string {
	if x != nil {
		return x.SampleAttributeValue
	}
	return nil
}

// new Response protobuf for Sample Attribute Value Check
type New_BatchCheckSamplesAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidSampleAttributeList        []string `protobuf:"bytes,1,rep,name=valid_sample_attribute_list,json=validSampleAttributeList,proto3" json:"valid_sample_attribute_list,omitempty"`
	InvalidSampleAttributeValueList []string `protobuf:"bytes,2,rep,name=invalid_sample_attribute_value_list,json=invalidSampleAttributeValueList,proto3" json:"invalid_sample_attribute_value_list,omitempty"`
}

func (x *New_BatchCheckSamplesAttributesResponse) Reset() {
	*x = New_BatchCheckSamplesAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *New_BatchCheckSamplesAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*New_BatchCheckSamplesAttributesResponse) ProtoMessage() {}

func (x *New_BatchCheckSamplesAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use New_BatchCheckSamplesAttributesResponse.ProtoReflect.Descriptor instead.
func (*New_BatchCheckSamplesAttributesResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{4}
}

func (x *New_BatchCheckSamplesAttributesResponse) GetValidSampleAttributeList() []string {
	if x != nil {
		return x.ValidSampleAttributeList
	}
	return nil
}

func (x *New_BatchCheckSamplesAttributesResponse) GetInvalidSampleAttributeValueList() []string {
	if x != nil {
		return x.InvalidSampleAttributeValueList
	}
	return nil
}

// Request protobuf for Sample Attribute Value Check
type BatchCheckSamplesAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleAttributeName  BatchCheckSamplesAttributesRequest_SampleAttributeName `protobuf:"varint,1,opt,name=sample_attribute_name,json=sampleAttributeName,proto3,enum=coresamples_service.BatchCheckSamplesAttributesRequest_SampleAttributeName" json:"sample_attribute_name,omitempty"`
	SampleAttributeValue []string                                               `protobuf:"bytes,2,rep,name=sample_attribute_value,json=sampleAttributeValue,proto3" json:"sample_attribute_value,omitempty"`
}

func (x *BatchCheckSamplesAttributesRequest) Reset() {
	*x = BatchCheckSamplesAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCheckSamplesAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckSamplesAttributesRequest) ProtoMessage() {}

func (x *BatchCheckSamplesAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckSamplesAttributesRequest.ProtoReflect.Descriptor instead.
func (*BatchCheckSamplesAttributesRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{5}
}

func (x *BatchCheckSamplesAttributesRequest) GetSampleAttributeName() BatchCheckSamplesAttributesRequest_SampleAttributeName {
	if x != nil {
		return x.SampleAttributeName
	}
	return BatchCheckSamplesAttributesRequest_sample_id
}

func (x *BatchCheckSamplesAttributesRequest) GetSampleAttributeValue() []string {
	if x != nil {
		return x.SampleAttributeValue
	}
	return nil
}

// Response protobuf for Sample Attribute Value Check
type BatchCheckSamplesAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidSampleAttributeList        []int64 `protobuf:"varint,1,rep,packed,name=valid_sample_attribute_list,json=validSampleAttributeList,proto3" json:"valid_sample_attribute_list,omitempty"`
	InvalidSampleAttributeValueList []int64 `protobuf:"varint,2,rep,packed,name=invalid_sample_attribute_value_list,json=invalidSampleAttributeValueList,proto3" json:"invalid_sample_attribute_value_list,omitempty"`
}

func (x *BatchCheckSamplesAttributesResponse) Reset() {
	*x = BatchCheckSamplesAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCheckSamplesAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckSamplesAttributesResponse) ProtoMessage() {}

func (x *BatchCheckSamplesAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckSamplesAttributesResponse.ProtoReflect.Descriptor instead.
func (*BatchCheckSamplesAttributesResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{6}
}

func (x *BatchCheckSamplesAttributesResponse) GetValidSampleAttributeList() []int64 {
	if x != nil {
		return x.ValidSampleAttributeList
	}
	return nil
}

func (x *BatchCheckSamplesAttributesResponse) GetInvalidSampleAttributeValueList() []int64 {
	if x != nil {
		return x.InvalidSampleAttributeValueList
	}
	return nil
}

// Request protobuf for Sample Attribute Value Check
type CheckSamplesAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleAttributeName  CheckSamplesAttributesRequest_SampleAttributeName `protobuf:"varint,1,opt,name=sample_attribute_name,json=sampleAttributeName,proto3,enum=coresamples_service.CheckSamplesAttributesRequest_SampleAttributeName" json:"sample_attribute_name,omitempty"`
	SampleAttributeValue string                                            `protobuf:"bytes,2,opt,name=sample_attribute_value,json=sampleAttributeValue,proto3" json:"sample_attribute_value,omitempty"`
}

func (x *CheckSamplesAttributesRequest) Reset() {
	*x = CheckSamplesAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSamplesAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSamplesAttributesRequest) ProtoMessage() {}

func (x *CheckSamplesAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSamplesAttributesRequest.ProtoReflect.Descriptor instead.
func (*CheckSamplesAttributesRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{7}
}

func (x *CheckSamplesAttributesRequest) GetSampleAttributeName() CheckSamplesAttributesRequest_SampleAttributeName {
	if x != nil {
		return x.SampleAttributeName
	}
	return CheckSamplesAttributesRequest_sample_id
}

func (x *CheckSamplesAttributesRequest) GetSampleAttributeValue() string {
	if x != nil {
		return x.SampleAttributeValue
	}
	return ""
}

// Response protobuf for Sample Attribute Value Check
type CheckSamplesAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleAttributeValueExists bool `protobuf:"varint,1,opt,name=sample_attribute_value_exists,json=sampleAttributeValueExists,proto3" json:"sample_attribute_value_exists,omitempty"`
}

func (x *CheckSamplesAttributesResponse) Reset() {
	*x = CheckSamplesAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSamplesAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSamplesAttributesResponse) ProtoMessage() {}

func (x *CheckSamplesAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSamplesAttributesResponse.ProtoReflect.Descriptor instead.
func (*CheckSamplesAttributesResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{8}
}

func (x *CheckSamplesAttributesResponse) GetSampleAttributeValueExists() bool {
	if x != nil {
		return x.SampleAttributeValueExists
	}
	return false
}

type GetSampleEarilestCollectionAndReceiveTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleIdList []string `protobuf:"bytes,1,rep,name=sample_id_list,json=sampleIdList,proto3" json:"sample_id_list,omitempty"`
}

func (x *GetSampleEarilestCollectionAndReceiveTimeRequest) Reset() {
	*x = GetSampleEarilestCollectionAndReceiveTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSampleEarilestCollectionAndReceiveTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSampleEarilestCollectionAndReceiveTimeRequest) ProtoMessage() {}

func (x *GetSampleEarilestCollectionAndReceiveTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSampleEarilestCollectionAndReceiveTimeRequest.ProtoReflect.Descriptor instead.
func (*GetSampleEarilestCollectionAndReceiveTimeRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetSampleEarilestCollectionAndReceiveTimeRequest) GetSampleIdList() []string {
	if x != nil {
		return x.SampleIdList
	}
	return nil
}

type GetSampleEarilestCollectionAndReceiveTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultList []*SampleEarilestCollectionAndReceiveTime `protobuf:"bytes,1,rep,name=result_list,json=resultList,proto3" json:"result_list,omitempty"`
}

func (x *GetSampleEarilestCollectionAndReceiveTimeResponse) Reset() {
	*x = GetSampleEarilestCollectionAndReceiveTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSampleEarilestCollectionAndReceiveTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSampleEarilestCollectionAndReceiveTimeResponse) ProtoMessage() {}

func (x *GetSampleEarilestCollectionAndReceiveTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSampleEarilestCollectionAndReceiveTimeResponse.ProtoReflect.Descriptor instead.
func (*GetSampleEarilestCollectionAndReceiveTimeResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetSampleEarilestCollectionAndReceiveTimeResponse) GetResultList() []*SampleEarilestCollectionAndReceiveTime {
	if x != nil {
		return x.ResultList
	}
	return nil
}

type SampleEarilestCollectionAndReceiveTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId       string `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	CollectionDate string `protobuf:"bytes,2,opt,name=collection_date,json=collectionDate,proto3" json:"collection_date,omitempty"`
	ReceivedDate   string `protobuf:"bytes,3,opt,name=received_date,json=receivedDate,proto3" json:"received_date,omitempty"`
}

func (x *SampleEarilestCollectionAndReceiveTime) Reset() {
	*x = SampleEarilestCollectionAndReceiveTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleEarilestCollectionAndReceiveTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleEarilestCollectionAndReceiveTime) ProtoMessage() {}

func (x *SampleEarilestCollectionAndReceiveTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleEarilestCollectionAndReceiveTime.ProtoReflect.Descriptor instead.
func (*SampleEarilestCollectionAndReceiveTime) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{11}
}

func (x *SampleEarilestCollectionAndReceiveTime) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *SampleEarilestCollectionAndReceiveTime) GetCollectionDate() string {
	if x != nil {
		return x.CollectionDate
	}
	return ""
}

func (x *SampleEarilestCollectionAndReceiveTime) GetReceivedDate() string {
	if x != nil {
		return x.ReceivedDate
	}
	return ""
}

type SearchSamplesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleIdList         []int32                     `protobuf:"varint,1,rep,packed,name=sample_id_list,json=sampleIdList,proto3" json:"sample_id_list,omitempty"`
	AccessionIdList      []string                    `protobuf:"bytes,2,rep,name=accession_id_list,json=accessionIdList,proto3" json:"accession_id_list,omitempty"`
	ClinicInfoList       *ClinicSearchInfoList       `protobuf:"bytes,3,opt,name=clinic_info_list,json=clinicInfoList,proto3" json:"clinic_info_list,omitempty"`
	ClientInfoList       *ClientSearchInfoList       `protobuf:"bytes,4,opt,name=client_info_list,json=clientInfoList,proto3" json:"client_info_list,omitempty"`
	PatientInfoList      *PatientSearchInfoList      `protobuf:"bytes,5,opt,name=patient_info_list,json=patientInfoList,proto3" json:"patient_info_list,omitempty"`
	PhlebotomistInfoList *PhlebotomistSearchInfoList `protobuf:"bytes,6,opt,name=phlebotomist_info_list,json=phlebotomistInfoList,proto3" json:"phlebotomist_info_list,omitempty"`
	SortInfo             *SortInfo                   `protobuf:"bytes,7,opt,name=sort_info,json=sortInfo,proto3" json:"sort_info,omitempty"`
	PageInfo             *PageInfo                   `protobuf:"bytes,8,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
}

func (x *SearchSamplesRequest) Reset() {
	*x = SearchSamplesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSamplesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSamplesRequest) ProtoMessage() {}

func (x *SearchSamplesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSamplesRequest.ProtoReflect.Descriptor instead.
func (*SearchSamplesRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{12}
}

func (x *SearchSamplesRequest) GetSampleIdList() []int32 {
	if x != nil {
		return x.SampleIdList
	}
	return nil
}

func (x *SearchSamplesRequest) GetAccessionIdList() []string {
	if x != nil {
		return x.AccessionIdList
	}
	return nil
}

func (x *SearchSamplesRequest) GetClinicInfoList() *ClinicSearchInfoList {
	if x != nil {
		return x.ClinicInfoList
	}
	return nil
}

func (x *SearchSamplesRequest) GetClientInfoList() *ClientSearchInfoList {
	if x != nil {
		return x.ClientInfoList
	}
	return nil
}

func (x *SearchSamplesRequest) GetPatientInfoList() *PatientSearchInfoList {
	if x != nil {
		return x.PatientInfoList
	}
	return nil
}

func (x *SearchSamplesRequest) GetPhlebotomistInfoList() *PhlebotomistSearchInfoList {
	if x != nil {
		return x.PhlebotomistInfoList
	}
	return nil
}

func (x *SearchSamplesRequest) GetSortInfo() *SortInfo {
	if x != nil {
		return x.SortInfo
	}
	return nil
}

func (x *SearchSamplesRequest) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type New_SearchSamplesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleIdList         []int32                     `protobuf:"varint,1,rep,packed,name=sample_id_list,json=sampleIdList,proto3" json:"sample_id_list,omitempty"`
	AccessionIdList      []string                    `protobuf:"bytes,2,rep,name=accession_id_list,json=accessionIdList,proto3" json:"accession_id_list,omitempty"`
	ClinicInfoList       *ClinicSearchInfoList       `protobuf:"bytes,3,opt,name=clinic_info_list,json=clinicInfoList,proto3" json:"clinic_info_list,omitempty"`
	ClientInfoList       *ClientSearchInfoList       `protobuf:"bytes,4,opt,name=client_info_list,json=clientInfoList,proto3" json:"client_info_list,omitempty"`
	PatientInfoList      *PatientSearchInfoList      `protobuf:"bytes,5,opt,name=patient_info_list,json=patientInfoList,proto3" json:"patient_info_list,omitempty"`
	PatientGender        string                      `protobuf:"bytes,6,opt,name=patient_gender,json=patientGender,proto3" json:"patient_gender,omitempty"`
	PhlebotomistInfoList *PhlebotomistSearchInfoList `protobuf:"bytes,7,opt,name=phlebotomist_info_list,json=phlebotomistInfoList,proto3" json:"phlebotomist_info_list,omitempty"`
	SortInfo             *SortInfo                   `protobuf:"bytes,8,opt,name=sort_info,json=sortInfo,proto3" json:"sort_info,omitempty"`
	PageInfo             *PageInfo                   `protobuf:"bytes,9,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
}

func (x *New_SearchSamplesRequest) Reset() {
	*x = New_SearchSamplesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *New_SearchSamplesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*New_SearchSamplesRequest) ProtoMessage() {}

func (x *New_SearchSamplesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use New_SearchSamplesRequest.ProtoReflect.Descriptor instead.
func (*New_SearchSamplesRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{13}
}

func (x *New_SearchSamplesRequest) GetSampleIdList() []int32 {
	if x != nil {
		return x.SampleIdList
	}
	return nil
}

func (x *New_SearchSamplesRequest) GetAccessionIdList() []string {
	if x != nil {
		return x.AccessionIdList
	}
	return nil
}

func (x *New_SearchSamplesRequest) GetClinicInfoList() *ClinicSearchInfoList {
	if x != nil {
		return x.ClinicInfoList
	}
	return nil
}

func (x *New_SearchSamplesRequest) GetClientInfoList() *ClientSearchInfoList {
	if x != nil {
		return x.ClientInfoList
	}
	return nil
}

func (x *New_SearchSamplesRequest) GetPatientInfoList() *PatientSearchInfoList {
	if x != nil {
		return x.PatientInfoList
	}
	return nil
}

func (x *New_SearchSamplesRequest) GetPatientGender() string {
	if x != nil {
		return x.PatientGender
	}
	return ""
}

func (x *New_SearchSamplesRequest) GetPhlebotomistInfoList() *PhlebotomistSearchInfoList {
	if x != nil {
		return x.PhlebotomistInfoList
	}
	return nil
}

func (x *New_SearchSamplesRequest) GetSortInfo() *SortInfo {
	if x != nil {
		return x.SortInfo
	}
	return nil
}

func (x *New_SearchSamplesRequest) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type ClinicSearchInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClinicIdList   []int32  `protobuf:"varint,1,rep,packed,name=clinic_id_list,json=clinicIdList,proto3" json:"clinic_id_list,omitempty"`
	ClinicNameList []string `protobuf:"bytes,2,rep,name=clinic_name_list,json=clinicNameList,proto3" json:"clinic_name_list,omitempty"`
}

func (x *ClinicSearchInfoList) Reset() {
	*x = ClinicSearchInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicSearchInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicSearchInfoList) ProtoMessage() {}

func (x *ClinicSearchInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicSearchInfoList.ProtoReflect.Descriptor instead.
func (*ClinicSearchInfoList) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{14}
}

func (x *ClinicSearchInfoList) GetClinicIdList() []int32 {
	if x != nil {
		return x.ClinicIdList
	}
	return nil
}

func (x *ClinicSearchInfoList) GetClinicNameList() []string {
	if x != nil {
		return x.ClinicNameList
	}
	return nil
}

type ClientSearchInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientIdList   []int32  `protobuf:"varint,1,rep,packed,name=client_id_list,json=clientIdList,proto3" json:"client_id_list,omitempty"`
	ClientNameList []string `protobuf:"bytes,2,rep,name=client_name_list,json=clientNameList,proto3" json:"client_name_list,omitempty"`
}

func (x *ClientSearchInfoList) Reset() {
	*x = ClientSearchInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSearchInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSearchInfoList) ProtoMessage() {}

func (x *ClientSearchInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSearchInfoList.ProtoReflect.Descriptor instead.
func (*ClientSearchInfoList) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{15}
}

func (x *ClientSearchInfoList) GetClientIdList() []int32 {
	if x != nil {
		return x.ClientIdList
	}
	return nil
}

func (x *ClientSearchInfoList) GetClientNameList() []string {
	if x != nil {
		return x.ClientNameList
	}
	return nil
}

type PhlebotomistSearchInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhlebotomistIdList        []int32  `protobuf:"varint,1,rep,packed,name=phlebotomist_id_list,json=phlebotomistIdList,proto3" json:"phlebotomist_id_list,omitempty"`
	PhlebotomistFirstNameList []string `protobuf:"bytes,2,rep,name=phlebotomist_first_name_list,json=phlebotomistFirstNameList,proto3" json:"phlebotomist_first_name_list,omitempty"`
	PhlebotomistLastNameList  []string `protobuf:"bytes,3,rep,name=phlebotomist_last_name_list,json=phlebotomistLastNameList,proto3" json:"phlebotomist_last_name_list,omitempty"`
	PhlebotomistEmailList     []string `protobuf:"bytes,4,rep,name=phlebotomist_email_list,json=phlebotomistEmailList,proto3" json:"phlebotomist_email_list,omitempty"`
}

func (x *PhlebotomistSearchInfoList) Reset() {
	*x = PhlebotomistSearchInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhlebotomistSearchInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhlebotomistSearchInfoList) ProtoMessage() {}

func (x *PhlebotomistSearchInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhlebotomistSearchInfoList.ProtoReflect.Descriptor instead.
func (*PhlebotomistSearchInfoList) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{16}
}

func (x *PhlebotomistSearchInfoList) GetPhlebotomistIdList() []int32 {
	if x != nil {
		return x.PhlebotomistIdList
	}
	return nil
}

func (x *PhlebotomistSearchInfoList) GetPhlebotomistFirstNameList() []string {
	if x != nil {
		return x.PhlebotomistFirstNameList
	}
	return nil
}

func (x *PhlebotomistSearchInfoList) GetPhlebotomistLastNameList() []string {
	if x != nil {
		return x.PhlebotomistLastNameList
	}
	return nil
}

func (x *PhlebotomistSearchInfoList) GetPhlebotomistEmailList() []string {
	if x != nil {
		return x.PhlebotomistEmailList
	}
	return nil
}

type PatientSearchInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatientIdList        []int32  `protobuf:"varint,1,rep,packed,name=patient_id_list,json=patientIdList,proto3" json:"patient_id_list,omitempty"`
	PatientFirstNameList []string `protobuf:"bytes,2,rep,name=patient_first_name_list,json=patientFirstNameList,proto3" json:"patient_first_name_list,omitempty"`
	PatientLastNameList  []string `protobuf:"bytes,3,rep,name=patient_last_name_list,json=patientLastNameList,proto3" json:"patient_last_name_list,omitempty"`
	PatientEmailList     []string `protobuf:"bytes,4,rep,name=patient_email_list,json=patientEmailList,proto3" json:"patient_email_list,omitempty"`
	PatientPhoneList     []string `protobuf:"bytes,5,rep,name=patient_phone_list,json=patientPhoneList,proto3" json:"patient_phone_list,omitempty"`
	PatientBirthdateList []string `protobuf:"bytes,6,rep,name=patient_birthdate_list,json=patientBirthdateList,proto3" json:"patient_birthdate_list,omitempty"`
}

func (x *PatientSearchInfoList) Reset() {
	*x = PatientSearchInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientSearchInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientSearchInfoList) ProtoMessage() {}

func (x *PatientSearchInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientSearchInfoList.ProtoReflect.Descriptor instead.
func (*PatientSearchInfoList) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{17}
}

func (x *PatientSearchInfoList) GetPatientIdList() []int32 {
	if x != nil {
		return x.PatientIdList
	}
	return nil
}

func (x *PatientSearchInfoList) GetPatientFirstNameList() []string {
	if x != nil {
		return x.PatientFirstNameList
	}
	return nil
}

func (x *PatientSearchInfoList) GetPatientLastNameList() []string {
	if x != nil {
		return x.PatientLastNameList
	}
	return nil
}

func (x *PatientSearchInfoList) GetPatientEmailList() []string {
	if x != nil {
		return x.PatientEmailList
	}
	return nil
}

func (x *PatientSearchInfoList) GetPatientPhoneList() []string {
	if x != nil {
		return x.PatientPhoneList
	}
	return nil
}

func (x *PatientSearchInfoList) GetPatientBirthdateList() []string {
	if x != nil {
		return x.PatientBirthdateList
	}
	return nil
}

type SortInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortBy    string `protobuf:"bytes,1,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortOrder string `protobuf:"bytes,2,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
}

func (x *SortInfo) Reset() {
	*x = SortInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortInfo) ProtoMessage() {}

func (x *SortInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortInfo.ProtoReflect.Descriptor instead.
func (*SortInfo) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{18}
}

func (x *SortInfo) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *SortInfo) GetSortOrder() string {
	if x != nil {
		return x.SortOrder
	}
	return ""
}

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize   string `protobuf:"bytes,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageNumber string `protobuf:"bytes,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{19}
}

func (x *PageInfo) GetPageSize() string {
	if x != nil {
		return x.PageSize
	}
	return ""
}

func (x *PageInfo) GetPageNumber() string {
	if x != nil {
		return x.PageNumber
	}
	return ""
}

// Reponse protobuf for Search Samples
type SearchSamplesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int32           `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Samples    []*SampleResult `protobuf:"bytes,2,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *SearchSamplesResponse) Reset() {
	*x = SearchSamplesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSamplesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSamplesResponse) ProtoMessage() {}

func (x *SearchSamplesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSamplesResponse.ProtoReflect.Descriptor instead.
func (*SearchSamplesResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{20}
}

func (x *SearchSamplesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *SearchSamplesResponse) GetSamples() []*SampleResult {
	if x != nil {
		return x.Samples
	}
	return nil
}

type New_SearchSamplesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int32               `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Samples    []*New_SampleResult `protobuf:"bytes,2,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *New_SearchSamplesResponse) Reset() {
	*x = New_SearchSamplesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *New_SearchSamplesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*New_SearchSamplesResponse) ProtoMessage() {}

func (x *New_SearchSamplesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use New_SearchSamplesResponse.ProtoReflect.Descriptor instead.
func (*New_SearchSamplesResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{21}
}

func (x *New_SearchSamplesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *New_SearchSamplesResponse) GetSamples() []*New_SampleResult {
	if x != nil {
		return x.Samples
	}
	return nil
}

type SampleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId    string `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	AccessionId string `protobuf:"bytes,2,opt,name=accession_id,json=accessionId,proto3" json:"accession_id,omitempty"`
	OrderTime   string `protobuf:"bytes,3,opt,name=order_time,json=orderTime,proto3" json:"order_time,omitempty"`
	SalesName   string `protobuf:"bytes,4,opt,name=sales_name,json=salesName,proto3" json:"sales_name,omitempty"`
	ClinicId    int32  `protobuf:"varint,5,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	ClinicName  string `protobuf:"bytes,6,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
	// ClientInfoResult client_info = 7;
	ClientId              int32  `protobuf:"varint,7,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientName            string `protobuf:"bytes,8,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	PhlebotomistId        int32  `protobuf:"varint,9,opt,name=phlebotomist_id,json=phlebotomistId,proto3" json:"phlebotomist_id,omitempty"`
	PhlebotomistFirstName string `protobuf:"bytes,10,opt,name=phlebotomist_first_name,json=phlebotomistFirstName,proto3" json:"phlebotomist_first_name,omitempty"`
	PhlebotomistLastName  string `protobuf:"bytes,11,opt,name=phlebotomist_last_name,json=phlebotomistLastName,proto3" json:"phlebotomist_last_name,omitempty"`
	PhlebotomistEmail     string `protobuf:"bytes,12,opt,name=phlebotomist_email,json=phlebotomistEmail,proto3" json:"phlebotomist_email,omitempty"`
	PatientId             int32  `protobuf:"varint,13,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	PatientFirstName      string `protobuf:"bytes,14,opt,name=patient_first_name,json=patientFirstName,proto3" json:"patient_first_name,omitempty"`
	PatientLastName       string `protobuf:"bytes,15,opt,name=patient_last_name,json=patientLastName,proto3" json:"patient_last_name,omitempty"`
	PatientEmail          string `protobuf:"bytes,16,opt,name=patient_email,json=patientEmail,proto3" json:"patient_email,omitempty"`
	PatientPhone          string `protobuf:"bytes,17,opt,name=patient_phone,json=patientPhone,proto3" json:"patient_phone,omitempty"`
	PatientBirthdate      string `protobuf:"bytes,18,opt,name=patient_birthdate,json=patientBirthdate,proto3" json:"patient_birthdate,omitempty"`
}

func (x *SampleResult) Reset() {
	*x = SampleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleResult) ProtoMessage() {}

func (x *SampleResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleResult.ProtoReflect.Descriptor instead.
func (*SampleResult) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{22}
}

func (x *SampleResult) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *SampleResult) GetAccessionId() string {
	if x != nil {
		return x.AccessionId
	}
	return ""
}

func (x *SampleResult) GetOrderTime() string {
	if x != nil {
		return x.OrderTime
	}
	return ""
}

func (x *SampleResult) GetSalesName() string {
	if x != nil {
		return x.SalesName
	}
	return ""
}

func (x *SampleResult) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *SampleResult) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

func (x *SampleResult) GetClientId() int32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *SampleResult) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *SampleResult) GetPhlebotomistId() int32 {
	if x != nil {
		return x.PhlebotomistId
	}
	return 0
}

func (x *SampleResult) GetPhlebotomistFirstName() string {
	if x != nil {
		return x.PhlebotomistFirstName
	}
	return ""
}

func (x *SampleResult) GetPhlebotomistLastName() string {
	if x != nil {
		return x.PhlebotomistLastName
	}
	return ""
}

func (x *SampleResult) GetPhlebotomistEmail() string {
	if x != nil {
		return x.PhlebotomistEmail
	}
	return ""
}

func (x *SampleResult) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *SampleResult) GetPatientFirstName() string {
	if x != nil {
		return x.PatientFirstName
	}
	return ""
}

func (x *SampleResult) GetPatientLastName() string {
	if x != nil {
		return x.PatientLastName
	}
	return ""
}

func (x *SampleResult) GetPatientEmail() string {
	if x != nil {
		return x.PatientEmail
	}
	return ""
}

func (x *SampleResult) GetPatientPhone() string {
	if x != nil {
		return x.PatientPhone
	}
	return ""
}

func (x *SampleResult) GetPatientBirthdate() string {
	if x != nil {
		return x.PatientBirthdate
	}
	return ""
}

type New_SampleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId              string `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	AccessionId           string `protobuf:"bytes,2,opt,name=accession_id,json=accessionId,proto3" json:"accession_id,omitempty"`
	OrderTime             string `protobuf:"bytes,3,opt,name=order_time,json=orderTime,proto3" json:"order_time,omitempty"`
	SalesName             string `protobuf:"bytes,4,opt,name=sales_name,json=salesName,proto3" json:"sales_name,omitempty"`
	ClinicId              int32  `protobuf:"varint,5,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	ClinicName            string `protobuf:"bytes,6,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
	ClientId              int32  `protobuf:"varint,7,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientName            string `protobuf:"bytes,8,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	PhlebotomistId        int32  `protobuf:"varint,9,opt,name=phlebotomist_id,json=phlebotomistId,proto3" json:"phlebotomist_id,omitempty"`
	PhlebotomistFirstName string `protobuf:"bytes,10,opt,name=phlebotomist_first_name,json=phlebotomistFirstName,proto3" json:"phlebotomist_first_name,omitempty"`
	PhlebotomistLastName  string `protobuf:"bytes,11,opt,name=phlebotomist_last_name,json=phlebotomistLastName,proto3" json:"phlebotomist_last_name,omitempty"`
	PhlebotomistEmail     string `protobuf:"bytes,12,opt,name=phlebotomist_email,json=phlebotomistEmail,proto3" json:"phlebotomist_email,omitempty"`
	PatientId             int32  `protobuf:"varint,13,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	PatientFirstName      string `protobuf:"bytes,14,opt,name=patient_first_name,json=patientFirstName,proto3" json:"patient_first_name,omitempty"`
	PatientLastName       string `protobuf:"bytes,15,opt,name=patient_last_name,json=patientLastName,proto3" json:"patient_last_name,omitempty"`
	PatientEmail          string `protobuf:"bytes,16,opt,name=patient_email,json=patientEmail,proto3" json:"patient_email,omitempty"`
	PatientPhone          string `protobuf:"bytes,17,opt,name=patient_phone,json=patientPhone,proto3" json:"patient_phone,omitempty"`
	PatientBirthdate      string `protobuf:"bytes,18,opt,name=patient_birthdate,json=patientBirthdate,proto3" json:"patient_birthdate,omitempty"`
	PatientGender         string `protobuf:"bytes,19,opt,name=patient_gender,json=patientGender,proto3" json:"patient_gender,omitempty"`
}

func (x *New_SampleResult) Reset() {
	*x = New_SampleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *New_SampleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*New_SampleResult) ProtoMessage() {}

func (x *New_SampleResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use New_SampleResult.ProtoReflect.Descriptor instead.
func (*New_SampleResult) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{23}
}

func (x *New_SampleResult) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *New_SampleResult) GetAccessionId() string {
	if x != nil {
		return x.AccessionId
	}
	return ""
}

func (x *New_SampleResult) GetOrderTime() string {
	if x != nil {
		return x.OrderTime
	}
	return ""
}

func (x *New_SampleResult) GetSalesName() string {
	if x != nil {
		return x.SalesName
	}
	return ""
}

func (x *New_SampleResult) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *New_SampleResult) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

func (x *New_SampleResult) GetClientId() int32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *New_SampleResult) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *New_SampleResult) GetPhlebotomistId() int32 {
	if x != nil {
		return x.PhlebotomistId
	}
	return 0
}

func (x *New_SampleResult) GetPhlebotomistFirstName() string {
	if x != nil {
		return x.PhlebotomistFirstName
	}
	return ""
}

func (x *New_SampleResult) GetPhlebotomistLastName() string {
	if x != nil {
		return x.PhlebotomistLastName
	}
	return ""
}

func (x *New_SampleResult) GetPhlebotomistEmail() string {
	if x != nil {
		return x.PhlebotomistEmail
	}
	return ""
}

func (x *New_SampleResult) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *New_SampleResult) GetPatientFirstName() string {
	if x != nil {
		return x.PatientFirstName
	}
	return ""
}

func (x *New_SampleResult) GetPatientLastName() string {
	if x != nil {
		return x.PatientLastName
	}
	return ""
}

func (x *New_SampleResult) GetPatientEmail() string {
	if x != nil {
		return x.PatientEmail
	}
	return ""
}

func (x *New_SampleResult) GetPatientPhone() string {
	if x != nil {
		return x.PatientPhone
	}
	return ""
}

func (x *New_SampleResult) GetPatientBirthdate() string {
	if x != nil {
		return x.PatientBirthdate
	}
	return ""
}

func (x *New_SampleResult) GetPatientGender() string {
	if x != nil {
		return x.PatientGender
	}
	return ""
}

// Message to send the sampleId for which a barcode is required
type GenerateBarcodeForSampleIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId int32 `protobuf:"varint,1,opt,name=sampleId,proto3" json:"sampleId,omitempty"` // The sample ID for which barcode needs to be generated
}

func (x *GenerateBarcodeForSampleIdRequest) Reset() {
	*x = GenerateBarcodeForSampleIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateBarcodeForSampleIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateBarcodeForSampleIdRequest) ProtoMessage() {}

func (x *GenerateBarcodeForSampleIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateBarcodeForSampleIdRequest.ProtoReflect.Descriptor instead.
func (*GenerateBarcodeForSampleIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{24}
}

func (x *GenerateBarcodeForSampleIdRequest) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

// Message to send back the generated barcode
type GenerateBarcodeForSampleIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Barcode string `protobuf:"bytes,1,opt,name=barcode,proto3" json:"barcode,omitempty"` // The generated barcode for the sample ID
}

func (x *GenerateBarcodeForSampleIdResponse) Reset() {
	*x = GenerateBarcodeForSampleIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateBarcodeForSampleIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateBarcodeForSampleIdResponse) ProtoMessage() {}

func (x *GenerateBarcodeForSampleIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateBarcodeForSampleIdResponse.ProtoReflect.Descriptor instead.
func (*GenerateBarcodeForSampleIdResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{25}
}

func (x *GenerateBarcodeForSampleIdResponse) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

// Message to send back the generated sample ID
type GenerateSampleIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId int32 `protobuf:"varint,1,opt,name=sampleId,proto3" json:"sampleId,omitempty"` // The generated sample ID
}

func (x *GenerateSampleIdResponse) Reset() {
	*x = GenerateSampleIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateSampleIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSampleIdResponse) ProtoMessage() {}

func (x *GenerateSampleIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSampleIdResponse.ProtoReflect.Descriptor instead.
func (*GenerateSampleIdResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{26}
}

func (x *GenerateSampleIdResponse) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{27}
}

type ForceFetchSampleBillingOrderIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleIds []string `protobuf:"bytes,1,rep,name=sample_ids,json=sampleIds,proto3" json:"sample_ids,omitempty"`
}

func (x *ForceFetchSampleBillingOrderIDRequest) Reset() {
	*x = ForceFetchSampleBillingOrderIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceFetchSampleBillingOrderIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceFetchSampleBillingOrderIDRequest) ProtoMessage() {}

func (x *ForceFetchSampleBillingOrderIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceFetchSampleBillingOrderIDRequest.ProtoReflect.Descriptor instead.
func (*ForceFetchSampleBillingOrderIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{28}
}

func (x *ForceFetchSampleBillingOrderIDRequest) GetSampleIds() []string {
	if x != nil {
		return x.SampleIds
	}
	return nil
}

type ForceFetchSampleBillingOrderIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleOrders []*SampleBillingOrder `protobuf:"bytes,1,rep,name=sample_orders,json=sampleOrders,proto3" json:"sample_orders,omitempty"`
}

func (x *ForceFetchSampleBillingOrderIDResponse) Reset() {
	*x = ForceFetchSampleBillingOrderIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceFetchSampleBillingOrderIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceFetchSampleBillingOrderIDResponse) ProtoMessage() {}

func (x *ForceFetchSampleBillingOrderIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceFetchSampleBillingOrderIDResponse.ProtoReflect.Descriptor instead.
func (*ForceFetchSampleBillingOrderIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{29}
}

func (x *ForceFetchSampleBillingOrderIDResponse) GetSampleOrders() []*SampleBillingOrder {
	if x != nil {
		return x.SampleOrders
	}
	return nil
}

type SampleBillingOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId string `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	OrderId  string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *SampleBillingOrder) Reset() {
	*x = SampleBillingOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleBillingOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleBillingOrder) ProtoMessage() {}

func (x *SampleBillingOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleBillingOrder.ProtoReflect.Descriptor instead.
func (*SampleBillingOrder) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{30}
}

func (x *SampleBillingOrder) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *SampleBillingOrder) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Progress  string `protobuf:"bytes,3,opt,name=progress,proto3" json:"progress,omitempty"`
	Timestamp string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{31}
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetProgress() string {
	if x != nil {
		return x.Progress
	}
	return ""
}

func (x *Job) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type SampleListMininum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sample []*SampleMininum `protobuf:"bytes,1,rep,name=sample,proto3" json:"sample,omitempty"`
}

func (x *SampleListMininum) Reset() {
	*x = SampleListMininum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleListMininum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleListMininum) ProtoMessage() {}

func (x *SampleListMininum) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleListMininum.ProtoReflect.Descriptor instead.
func (*SampleListMininum) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{32}
}

func (x *SampleListMininum) GetSample() []*SampleMininum {
	if x != nil {
		return x.Sample
	}
	return nil
}

type SampleMininum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessionId string `protobuf:"bytes,1,opt,name=accession_id,json=accessionId,proto3" json:"accession_id,omitempty"`
	SampleId    int32  `protobuf:"varint,2,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	CustomerId  int32  `protobuf:"varint,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	PatientId   int32  `protobuf:"varint,4,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
}

func (x *SampleMininum) Reset() {
	*x = SampleMininum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleMininum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleMininum) ProtoMessage() {}

func (x *SampleMininum) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleMininum.ProtoReflect.Descriptor instead.
func (*SampleMininum) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{33}
}

func (x *SampleMininum) GetAccessionId() string {
	if x != nil {
		return x.AccessionId
	}
	return ""
}

func (x *SampleMininum) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *SampleMininum) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *SampleMininum) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

type SampleReleventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerName string  `protobuf:"bytes,1,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	PatientName  string  `protobuf:"bytes,2,opt,name=patient_name,json=patientName,proto3" json:"patient_name,omitempty"`
	ClinicIds    []int32 `protobuf:"varint,3,rep,packed,name=clinic_ids,json=clinicIds,proto3" json:"clinic_ids,omitempty"`
	CustomerId   int32   `protobuf:"varint,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	PatientId    int32   `protobuf:"varint,5,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
}

func (x *SampleReleventResponse) Reset() {
	*x = SampleReleventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleReleventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleReleventResponse) ProtoMessage() {}

func (x *SampleReleventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleReleventResponse.ProtoReflect.Descriptor instead.
func (*SampleReleventResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{34}
}

func (x *SampleReleventResponse) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *SampleReleventResponse) GetPatientName() string {
	if x != nil {
		return x.PatientName
	}
	return ""
}

func (x *SampleReleventResponse) GetClinicIds() []int32 {
	if x != nil {
		return x.ClinicIds
	}
	return nil
}

func (x *SampleReleventResponse) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *SampleReleventResponse) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

type InstrumentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId       string   `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	TestInstrument []string `protobuf:"bytes,2,rep,name=test_instrument,json=testInstrument,proto3" json:"test_instrument,omitempty"`
}

func (x *InstrumentList) Reset() {
	*x = InstrumentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentList) ProtoMessage() {}

func (x *InstrumentList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentList.ProtoReflect.Descriptor instead.
func (*InstrumentList) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{35}
}

func (x *InstrumentList) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *InstrumentList) GetTestInstrument() []string {
	if x != nil {
		return x.TestInstrument
	}
	return nil
}

type SampleTestInstrumentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleTestInstrumentList []*InstrumentList `protobuf:"bytes,1,rep,name=sample_test_instrument_list,json=sampleTestInstrumentList,proto3" json:"sample_test_instrument_list,omitempty"`
}

func (x *SampleTestInstrumentList) Reset() {
	*x = SampleTestInstrumentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleTestInstrumentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleTestInstrumentList) ProtoMessage() {}

func (x *SampleTestInstrumentList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleTestInstrumentList.ProtoReflect.Descriptor instead.
func (*SampleTestInstrumentList) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{36}
}

func (x *SampleTestInstrumentList) GetSampleTestInstrumentList() []*InstrumentList {
	if x != nil {
		return x.SampleTestInstrumentList
	}
	return nil
}

type ReceiveSampleTubesTubeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SampleId       int64  `protobuf:"varint,2,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	TubeType       string `protobuf:"bytes,3,opt,name=tube_type,json=tubeType,proto3" json:"tube_type,omitempty"`
	ReceivedCount  int32  `protobuf:"varint,4,opt,name=received_count,json=receivedCount,proto3" json:"received_count,omitempty"`
	ReceivedTime   string `protobuf:"bytes,5,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"` // ISO formatted string for date-time
	ReceivedBy     string `protobuf:"bytes,6,opt,name=received_by,json=receivedBy,proto3" json:"received_by,omitempty"`
	ModifiedBy     string `protobuf:"bytes,7,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`             // Nullable, so string can be null
	ModifiedTime   string `protobuf:"bytes,8,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`       // Nullable ISO formatted string
	CollectionTime string `protobuf:"bytes,9,opt,name=collection_time,json=collectionTime,proto3" json:"collection_time,omitempty"` // ISO formatted string for date-time
	IsRedraw       bool   `protobuf:"varint,10,opt,name=is_redraw,json=isRedraw,proto3" json:"is_redraw,omitempty"`
	IsRerun        bool   `protobuf:"varint,11,opt,name=is_rerun,json=isRerun,proto3" json:"is_rerun,omitempty"`
}

func (x *ReceiveSampleTubesTubeDetails) Reset() {
	*x = ReceiveSampleTubesTubeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveSampleTubesTubeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveSampleTubesTubeDetails) ProtoMessage() {}

func (x *ReceiveSampleTubesTubeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveSampleTubesTubeDetails.ProtoReflect.Descriptor instead.
func (*ReceiveSampleTubesTubeDetails) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{37}
}

func (x *ReceiveSampleTubesTubeDetails) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReceiveSampleTubesTubeDetails) GetSampleId() int64 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *ReceiveSampleTubesTubeDetails) GetTubeType() string {
	if x != nil {
		return x.TubeType
	}
	return ""
}

func (x *ReceiveSampleTubesTubeDetails) GetReceivedCount() int32 {
	if x != nil {
		return x.ReceivedCount
	}
	return 0
}

func (x *ReceiveSampleTubesTubeDetails) GetReceivedTime() string {
	if x != nil {
		return x.ReceivedTime
	}
	return ""
}

func (x *ReceiveSampleTubesTubeDetails) GetReceivedBy() string {
	if x != nil {
		return x.ReceivedBy
	}
	return ""
}

func (x *ReceiveSampleTubesTubeDetails) GetModifiedBy() string {
	if x != nil {
		return x.ModifiedBy
	}
	return ""
}

func (x *ReceiveSampleTubesTubeDetails) GetModifiedTime() string {
	if x != nil {
		return x.ModifiedTime
	}
	return ""
}

func (x *ReceiveSampleTubesTubeDetails) GetCollectionTime() string {
	if x != nil {
		return x.CollectionTime
	}
	return ""
}

func (x *ReceiveSampleTubesTubeDetails) GetIsRedraw() bool {
	if x != nil {
		return x.IsRedraw
	}
	return false
}

func (x *ReceiveSampleTubesTubeDetails) GetIsRerun() bool {
	if x != nil {
		return x.IsRerun
	}
	return false
}

// Temp Result
type ReceiveSampleTubesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveStatus  string                           `protobuf:"bytes,1,opt,name=receive_status,json=receiveStatus,proto3" json:"receive_status,omitempty"`
	ReceiveDetails []*ReceiveSampleTubesTubeDetails `protobuf:"bytes,2,rep,name=receive_details,json=receiveDetails,proto3" json:"receive_details,omitempty"`
}

func (x *ReceiveSampleTubesResponse) Reset() {
	*x = ReceiveSampleTubesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveSampleTubesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveSampleTubesResponse) ProtoMessage() {}

func (x *ReceiveSampleTubesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveSampleTubesResponse.ProtoReflect.Descriptor instead.
func (*ReceiveSampleTubesResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{38}
}

func (x *ReceiveSampleTubesResponse) GetReceiveStatus() string {
	if x != nil {
		return x.ReceiveStatus
	}
	return ""
}

func (x *ReceiveSampleTubesResponse) GetReceiveDetails() []*ReceiveSampleTubesTubeDetails {
	if x != nil {
		return x.ReceiveDetails
	}
	return nil
}

type ReceiveSampleTubesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId    string         `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	TubeDetails []*TubeDetails `protobuf:"bytes,2,rep,name=tube_details,json=tubeDetails,proto3" json:"tube_details,omitempty"`
	ReceivedBy  string         `protobuf:"bytes,3,opt,name=received_by,json=receivedBy,proto3" json:"received_by,omitempty"`
	// Deprecated: Marked as deprecated in proto/sample_service.proto.
	ReceiveLaterBody *ReceiveLaterRequest `protobuf:"bytes,4,opt,name=receive_later_body,json=receiveLaterBody,proto3" json:"receive_later_body,omitempty"`
	// Deprecated: Marked as deprecated in proto/sample_service.proto.
	SendRequestTo187 bool   `protobuf:"varint,5,opt,name=send_request_to187,json=sendRequestTo187,proto3" json:"send_request_to187,omitempty"`
	ReceivedTime     string `protobuf:"bytes,6,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	IsRedraw         bool   `protobuf:"varint,7,opt,name=is_redraw,json=isRedraw,proto3" json:"is_redraw,omitempty"`
}

func (x *ReceiveSampleTubesRequest) Reset() {
	*x = ReceiveSampleTubesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveSampleTubesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveSampleTubesRequest) ProtoMessage() {}

func (x *ReceiveSampleTubesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveSampleTubesRequest.ProtoReflect.Descriptor instead.
func (*ReceiveSampleTubesRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{39}
}

func (x *ReceiveSampleTubesRequest) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *ReceiveSampleTubesRequest) GetTubeDetails() []*TubeDetails {
	if x != nil {
		return x.TubeDetails
	}
	return nil
}

func (x *ReceiveSampleTubesRequest) GetReceivedBy() string {
	if x != nil {
		return x.ReceivedBy
	}
	return ""
}

// Deprecated: Marked as deprecated in proto/sample_service.proto.
func (x *ReceiveSampleTubesRequest) GetReceiveLaterBody() *ReceiveLaterRequest {
	if x != nil {
		return x.ReceiveLaterBody
	}
	return nil
}

// Deprecated: Marked as deprecated in proto/sample_service.proto.
func (x *ReceiveSampleTubesRequest) GetSendRequestTo187() bool {
	if x != nil {
		return x.SendRequestTo187
	}
	return false
}

func (x *ReceiveSampleTubesRequest) GetReceivedTime() string {
	if x != nil {
		return x.ReceivedTime
	}
	return ""
}

func (x *ReceiveSampleTubesRequest) GetIsRedraw() bool {
	if x != nil {
		return x.IsRedraw
	}
	return false
}

type ReceiveSampleTubesRequestStaging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId    string         `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	TubeDetails []*TubeDetails `protobuf:"bytes,2,rep,name=tube_details,json=tubeDetails,proto3" json:"tube_details,omitempty"`
	ReceivedBy  string         `protobuf:"bytes,3,opt,name=received_by,json=receivedBy,proto3" json:"received_by,omitempty"`
	// Deprecated: Marked as deprecated in proto/sample_service.proto.
	ReceiveLaterBody *ReceiveLaterRequest `protobuf:"bytes,4,opt,name=receive_later_body,json=receiveLaterBody,proto3" json:"receive_later_body,omitempty"`
	// Deprecated: Marked as deprecated in proto/sample_service.proto.
	SendRequestTo187 bool   `protobuf:"varint,5,opt,name=send_request_to187,json=sendRequestTo187,proto3" json:"send_request_to187,omitempty"`
	ReceivedTime     string `protobuf:"bytes,6,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	IsRedraw         bool   `protobuf:"varint,7,opt,name=is_redraw,json=isRedraw,proto3" json:"is_redraw,omitempty"`
}

func (x *ReceiveSampleTubesRequestStaging) Reset() {
	*x = ReceiveSampleTubesRequestStaging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveSampleTubesRequestStaging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveSampleTubesRequestStaging) ProtoMessage() {}

func (x *ReceiveSampleTubesRequestStaging) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveSampleTubesRequestStaging.ProtoReflect.Descriptor instead.
func (*ReceiveSampleTubesRequestStaging) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{40}
}

func (x *ReceiveSampleTubesRequestStaging) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *ReceiveSampleTubesRequestStaging) GetTubeDetails() []*TubeDetails {
	if x != nil {
		return x.TubeDetails
	}
	return nil
}

func (x *ReceiveSampleTubesRequestStaging) GetReceivedBy() string {
	if x != nil {
		return x.ReceivedBy
	}
	return ""
}

// Deprecated: Marked as deprecated in proto/sample_service.proto.
func (x *ReceiveSampleTubesRequestStaging) GetReceiveLaterBody() *ReceiveLaterRequest {
	if x != nil {
		return x.ReceiveLaterBody
	}
	return nil
}

// Deprecated: Marked as deprecated in proto/sample_service.proto.
func (x *ReceiveSampleTubesRequestStaging) GetSendRequestTo187() bool {
	if x != nil {
		return x.SendRequestTo187
	}
	return false
}

func (x *ReceiveSampleTubesRequestStaging) GetReceivedTime() string {
	if x != nil {
		return x.ReceivedTime
	}
	return ""
}

func (x *ReceiveSampleTubesRequestStaging) GetIsRedraw() bool {
	if x != nil {
		return x.IsRedraw
	}
	return false
}

type ReceiveLaterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestBody []*ReceiveLaterBody `protobuf:"bytes,1,rep,name=request_body,json=requestBody,proto3" json:"request_body,omitempty"`
}

func (x *ReceiveLaterRequest) Reset() {
	*x = ReceiveLaterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveLaterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveLaterRequest) ProtoMessage() {}

func (x *ReceiveLaterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveLaterRequest.ProtoReflect.Descriptor instead.
func (*ReceiveLaterRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{41}
}

func (x *ReceiveLaterRequest) GetRequestBody() []*ReceiveLaterBody {
	if x != nil {
		return x.RequestBody
	}
	return nil
}

type ReceiveLaterBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleID   string `protobuf:"bytes,1,opt,name=sampleID,proto3" json:"sampleID,omitempty"`
	SampleType string `protobuf:"bytes,2,opt,name=sampleType,proto3" json:"sampleType,omitempty"`
	Barcode    string `protobuf:"bytes,3,opt,name=barcode,proto3" json:"barcode,omitempty"`
}

func (x *ReceiveLaterBody) Reset() {
	*x = ReceiveLaterBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveLaterBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveLaterBody) ProtoMessage() {}

func (x *ReceiveLaterBody) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveLaterBody.ProtoReflect.Descriptor instead.
func (*ReceiveLaterBody) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{42}
}

func (x *ReceiveLaterBody) GetSampleID() string {
	if x != nil {
		return x.SampleID
	}
	return ""
}

func (x *ReceiveLaterBody) GetSampleType() string {
	if x != nil {
		return x.SampleType
	}
	return ""
}

func (x *ReceiveLaterBody) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

type TubeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TubeType       string `protobuf:"bytes,1,opt,name=tube_type,json=tubeType,proto3" json:"tube_type,omitempty"`
	CollectionTime string `protobuf:"bytes,2,opt,name=collection_time,json=collectionTime,proto3" json:"collection_time,omitempty"`
	ReceiveCount   int32  `protobuf:"varint,3,opt,name=receive_count,json=receiveCount,proto3" json:"receive_count,omitempty"`
}

func (x *TubeDetails) Reset() {
	*x = TubeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TubeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TubeDetails) ProtoMessage() {}

func (x *TubeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TubeDetails.ProtoReflect.Descriptor instead.
func (*TubeDetails) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{43}
}

func (x *TubeDetails) GetTubeType() string {
	if x != nil {
		return x.TubeType
	}
	return ""
}

func (x *TubeDetails) GetCollectionTime() string {
	if x != nil {
		return x.CollectionTime
	}
	return ""
}

func (x *TubeDetails) GetReceiveCount() int32 {
	if x != nil {
		return x.ReceiveCount
	}
	return 0
}

type GetSamplePhlebotomistIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*SamplePhlebotomistIDResponse `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetSamplePhlebotomistIDResponse) Reset() {
	*x = GetSamplePhlebotomistIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSamplePhlebotomistIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSamplePhlebotomistIDResponse) ProtoMessage() {}

func (x *GetSamplePhlebotomistIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSamplePhlebotomistIDResponse.ProtoReflect.Descriptor instead.
func (*GetSamplePhlebotomistIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{44}
}

func (x *GetSamplePhlebotomistIDResponse) GetResult() []*SamplePhlebotomistIDResponse {
	if x != nil {
		return x.Result
	}
	return nil
}

type SamplePhlebotomistIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId       string `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	PhlebotomistId string `protobuf:"bytes,2,opt,name=phlebotomist_id,json=phlebotomistId,proto3" json:"phlebotomist_id,omitempty"`
}

func (x *SamplePhlebotomistIDResponse) Reset() {
	*x = SamplePhlebotomistIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplePhlebotomistIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplePhlebotomistIDResponse) ProtoMessage() {}

func (x *SamplePhlebotomistIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplePhlebotomistIDResponse.ProtoReflect.Descriptor instead.
func (*SamplePhlebotomistIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{45}
}

func (x *SamplePhlebotomistIDResponse) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *SamplePhlebotomistIDResponse) GetPhlebotomistId() string {
	if x != nil {
		return x.PhlebotomistId
	}
	return ""
}

type SampleReceiveCount153Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*SampleReceiveCount153 `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *SampleReceiveCount153Response) Reset() {
	*x = SampleReceiveCount153Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleReceiveCount153Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleReceiveCount153Response) ProtoMessage() {}

func (x *SampleReceiveCount153Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleReceiveCount153Response.ProtoReflect.Descriptor instead.
func (*SampleReceiveCount153Response) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{46}
}

func (x *SampleReceiveCount153Response) GetResult() []*SampleReceiveCount153 {
	if x != nil {
		return x.Result
	}
	return nil
}

type SampleReceiveCount153ResponseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*SampleReceiveCount153Response `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *SampleReceiveCount153ResponseList) Reset() {
	*x = SampleReceiveCount153ResponseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleReceiveCount153ResponseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleReceiveCount153ResponseList) ProtoMessage() {}

func (x *SampleReceiveCount153ResponseList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleReceiveCount153ResponseList.ProtoReflect.Descriptor instead.
func (*SampleReceiveCount153ResponseList) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{47}
}

func (x *SampleReceiveCount153ResponseList) GetResult() []*SampleReceiveCount153Response {
	if x != nil {
		return x.Result
	}
	return nil
}

type SampleReceiveCount153 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId       int32  `protobuf:"varint,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	TubeType       string `protobuf:"bytes,2,opt,name=tube_type,json=tubeType,proto3" json:"tube_type,omitempty"`
	TubeCount      int32  `protobuf:"varint,3,opt,name=tube_count,json=tubeCount,proto3" json:"tube_count,omitempty"`
	CollectionTime string `protobuf:"bytes,4,opt,name=collection_time,json=collectionTime,proto3" json:"collection_time,omitempty"`
	ReceiveTime    string `protobuf:"bytes,5,opt,name=receive_time,json=receiveTime,proto3" json:"receive_time,omitempty"`
}

func (x *SampleReceiveCount153) Reset() {
	*x = SampleReceiveCount153{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleReceiveCount153) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleReceiveCount153) ProtoMessage() {}

func (x *SampleReceiveCount153) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleReceiveCount153.ProtoReflect.Descriptor instead.
func (*SampleReceiveCount153) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{48}
}

func (x *SampleReceiveCount153) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *SampleReceiveCount153) GetTubeType() string {
	if x != nil {
		return x.TubeType
	}
	return ""
}

func (x *SampleReceiveCount153) GetTubeCount() int32 {
	if x != nil {
		return x.TubeCount
	}
	return 0
}

func (x *SampleReceiveCount153) GetCollectionTime() string {
	if x != nil {
		return x.CollectionTime
	}
	return ""
}

func (x *SampleReceiveCount153) GetReceiveTime() string {
	if x != nil {
		return x.ReceiveTime
	}
	return ""
}

type GetSampleNavigatorNotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId string `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
}

func (x *GetSampleNavigatorNotesRequest) Reset() {
	*x = GetSampleNavigatorNotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSampleNavigatorNotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSampleNavigatorNotesRequest) ProtoMessage() {}

func (x *GetSampleNavigatorNotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSampleNavigatorNotesRequest.ProtoReflect.Descriptor instead.
func (*GetSampleNavigatorNotesRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{49}
}

func (x *GetSampleNavigatorNotesRequest) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

type GetSampleNavigatorNotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notes []*SampleNavigatorNotes `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty"`
}

func (x *GetSampleNavigatorNotesResponse) Reset() {
	*x = GetSampleNavigatorNotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSampleNavigatorNotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSampleNavigatorNotesResponse) ProtoMessage() {}

func (x *GetSampleNavigatorNotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSampleNavigatorNotesResponse.ProtoReflect.Descriptor instead.
func (*GetSampleNavigatorNotesResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{50}
}

func (x *GetSampleNavigatorNotesResponse) GetNotes() []*SampleNavigatorNotes {
	if x != nil {
		return x.Notes
	}
	return nil
}

type SampleNavigatorNotes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NavigatorNoteId         int32  `protobuf:"varint,1,opt,name=navigator_note_id,json=navigatorNoteId,proto3" json:"navigator_note_id,omitempty"`
	Note                    string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	SampleId                int32  `protobuf:"varint,3,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	CreatedByInternalUserId int32  `protobuf:"varint,4,opt,name=created_by_internal_user_id,json=createdByInternalUserId,proto3" json:"created_by_internal_user_id,omitempty"`
	CreatedTime             string `protobuf:"bytes,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	NavigatorNoteReadStatus string `protobuf:"bytes,6,opt,name=navigator_note_read_status,json=navigatorNoteReadStatus,proto3" json:"navigator_note_read_status,omitempty"`
	ModifiedBy              string `protobuf:"bytes,7,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	ModifiedTime            string `protobuf:"bytes,8,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`
	NavigatorNoteColor      string `protobuf:"bytes,9,opt,name=navigator_note_color,json=navigatorNoteColor,proto3" json:"navigator_note_color,omitempty"`
	NavigatorNoteType       string `protobuf:"bytes,10,opt,name=navigator_note_type,json=navigatorNoteType,proto3" json:"navigator_note_type,omitempty"`
	NavigatorNoteIcon       string `protobuf:"bytes,11,opt,name=navigator_note_icon,json=navigatorNoteIcon,proto3" json:"navigator_note_icon,omitempty"`
	IsActive                bool   `protobuf:"varint,12,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *SampleNavigatorNotes) Reset() {
	*x = SampleNavigatorNotes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleNavigatorNotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleNavigatorNotes) ProtoMessage() {}

func (x *SampleNavigatorNotes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleNavigatorNotes.ProtoReflect.Descriptor instead.
func (*SampleNavigatorNotes) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{51}
}

func (x *SampleNavigatorNotes) GetNavigatorNoteId() int32 {
	if x != nil {
		return x.NavigatorNoteId
	}
	return 0
}

func (x *SampleNavigatorNotes) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *SampleNavigatorNotes) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *SampleNavigatorNotes) GetCreatedByInternalUserId() int32 {
	if x != nil {
		return x.CreatedByInternalUserId
	}
	return 0
}

func (x *SampleNavigatorNotes) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *SampleNavigatorNotes) GetNavigatorNoteReadStatus() string {
	if x != nil {
		return x.NavigatorNoteReadStatus
	}
	return ""
}

func (x *SampleNavigatorNotes) GetModifiedBy() string {
	if x != nil {
		return x.ModifiedBy
	}
	return ""
}

func (x *SampleNavigatorNotes) GetModifiedTime() string {
	if x != nil {
		return x.ModifiedTime
	}
	return ""
}

func (x *SampleNavigatorNotes) GetNavigatorNoteColor() string {
	if x != nil {
		return x.NavigatorNoteColor
	}
	return ""
}

func (x *SampleNavigatorNotes) GetNavigatorNoteType() string {
	if x != nil {
		return x.NavigatorNoteType
	}
	return ""
}

func (x *SampleNavigatorNotes) GetNavigatorNoteIcon() string {
	if x != nil {
		return x.NavigatorNoteIcon
	}
	return ""
}

func (x *SampleNavigatorNotes) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type ModifySampleReceiveRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SampleId       string `protobuf:"bytes,2,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	TubeType       string `protobuf:"bytes,3,opt,name=tube_type,json=tubeType,proto3" json:"tube_type,omitempty"`
	CollectionTime string `protobuf:"bytes,4,opt,name=collection_time,json=collectionTime,proto3" json:"collection_time,omitempty"`
	ReceivedCount  string `protobuf:"bytes,5,opt,name=received_count,json=receivedCount,proto3" json:"received_count,omitempty"`
	ReceivedBy     string `protobuf:"bytes,6,opt,name=received_by,json=receivedBy,proto3" json:"received_by,omitempty"`
	ModifiedBy     string `protobuf:"bytes,7,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	ReceivedTime   string `protobuf:"bytes,8,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
}

func (x *ModifySampleReceiveRecordRequest) Reset() {
	*x = ModifySampleReceiveRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifySampleReceiveRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifySampleReceiveRecordRequest) ProtoMessage() {}

func (x *ModifySampleReceiveRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifySampleReceiveRecordRequest.ProtoReflect.Descriptor instead.
func (*ModifySampleReceiveRecordRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{52}
}

func (x *ModifySampleReceiveRecordRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModifySampleReceiveRecordRequest) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *ModifySampleReceiveRecordRequest) GetTubeType() string {
	if x != nil {
		return x.TubeType
	}
	return ""
}

func (x *ModifySampleReceiveRecordRequest) GetCollectionTime() string {
	if x != nil {
		return x.CollectionTime
	}
	return ""
}

func (x *ModifySampleReceiveRecordRequest) GetReceivedCount() string {
	if x != nil {
		return x.ReceivedCount
	}
	return ""
}

func (x *ModifySampleReceiveRecordRequest) GetReceivedBy() string {
	if x != nil {
		return x.ReceivedBy
	}
	return ""
}

func (x *ModifySampleReceiveRecordRequest) GetModifiedBy() string {
	if x != nil {
		return x.ModifiedBy
	}
	return ""
}

func (x *ModifySampleReceiveRecordRequest) GetReceivedTime() string {
	if x != nil {
		return x.ReceivedTime
	}
	return ""
}

type ModifySampleReceiveRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SampleId       int32  `protobuf:"varint,2,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	TubeType       string `protobuf:"bytes,3,opt,name=tube_type,json=tubeType,proto3" json:"tube_type,omitempty"`
	CollectionTime string `protobuf:"bytes,4,opt,name=collection_time,json=collectionTime,proto3" json:"collection_time,omitempty"`
	ReceivedCount  int32  `protobuf:"varint,5,opt,name=received_count,json=receivedCount,proto3" json:"received_count,omitempty"`
	ReceivedBy     string `protobuf:"bytes,6,opt,name=received_by,json=receivedBy,proto3" json:"received_by,omitempty"`
	ReceivedTime   string `protobuf:"bytes,7,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	ModifiedBy     string `protobuf:"bytes,8,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	ModifiedTime   string `protobuf:"bytes,9,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`
}

func (x *ModifySampleReceiveRecordResponse) Reset() {
	*x = ModifySampleReceiveRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifySampleReceiveRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifySampleReceiveRecordResponse) ProtoMessage() {}

func (x *ModifySampleReceiveRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifySampleReceiveRecordResponse.ProtoReflect.Descriptor instead.
func (*ModifySampleReceiveRecordResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{53}
}

func (x *ModifySampleReceiveRecordResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModifySampleReceiveRecordResponse) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *ModifySampleReceiveRecordResponse) GetTubeType() string {
	if x != nil {
		return x.TubeType
	}
	return ""
}

func (x *ModifySampleReceiveRecordResponse) GetCollectionTime() string {
	if x != nil {
		return x.CollectionTime
	}
	return ""
}

func (x *ModifySampleReceiveRecordResponse) GetReceivedCount() int32 {
	if x != nil {
		return x.ReceivedCount
	}
	return 0
}

func (x *ModifySampleReceiveRecordResponse) GetReceivedBy() string {
	if x != nil {
		return x.ReceivedBy
	}
	return ""
}

func (x *ModifySampleReceiveRecordResponse) GetReceivedTime() string {
	if x != nil {
		return x.ReceivedTime
	}
	return ""
}

func (x *ModifySampleReceiveRecordResponse) GetModifiedBy() string {
	if x != nil {
		return x.ModifiedBy
	}
	return ""
}

func (x *ModifySampleReceiveRecordResponse) GetModifiedTime() string {
	if x != nil {
		return x.ModifiedTime
	}
	return ""
}

type GetSampleReceiveRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId string `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
}

func (x *GetSampleReceiveRecordsRequest) Reset() {
	*x = GetSampleReceiveRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSampleReceiveRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSampleReceiveRecordsRequest) ProtoMessage() {}

func (x *GetSampleReceiveRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSampleReceiveRecordsRequest.ProtoReflect.Descriptor instead.
func (*GetSampleReceiveRecordsRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{54}
}

func (x *GetSampleReceiveRecordsRequest) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

type GetSampleReceiveRecordsRequestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleIds []string `protobuf:"bytes,1,rep,name=sample_ids,json=sampleIds,proto3" json:"sample_ids,omitempty"`
}

func (x *GetSampleReceiveRecordsRequestList) Reset() {
	*x = GetSampleReceiveRecordsRequestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSampleReceiveRecordsRequestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSampleReceiveRecordsRequestList) ProtoMessage() {}

func (x *GetSampleReceiveRecordsRequestList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSampleReceiveRecordsRequestList.ProtoReflect.Descriptor instead.
func (*GetSampleReceiveRecordsRequestList) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{55}
}

func (x *GetSampleReceiveRecordsRequestList) GetSampleIds() []string {
	if x != nil {
		return x.SampleIds
	}
	return nil
}

type GetSampleReceiveRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleReceiveList []*ReceiveSampleResponse `protobuf:"bytes,1,rep,name=sample_receive_list,json=sampleReceiveList,proto3" json:"sample_receive_list,omitempty"`
}

func (x *GetSampleReceiveRecordsResponse) Reset() {
	*x = GetSampleReceiveRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSampleReceiveRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSampleReceiveRecordsResponse) ProtoMessage() {}

func (x *GetSampleReceiveRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSampleReceiveRecordsResponse.ProtoReflect.Descriptor instead.
func (*GetSampleReceiveRecordsResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{56}
}

func (x *GetSampleReceiveRecordsResponse) GetSampleReceiveList() []*ReceiveSampleResponse {
	if x != nil {
		return x.SampleReceiveList
	}
	return nil
}

type SampleReceiveBatchEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId      int32                    `protobuf:"varint,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	SampleDetails []*ReceiveSampleResponse `protobuf:"bytes,2,rep,name=sample_details,json=sampleDetails,proto3" json:"sample_details,omitempty"`
}

func (x *SampleReceiveBatchEntry) Reset() {
	*x = SampleReceiveBatchEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleReceiveBatchEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleReceiveBatchEntry) ProtoMessage() {}

func (x *SampleReceiveBatchEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleReceiveBatchEntry.ProtoReflect.Descriptor instead.
func (*SampleReceiveBatchEntry) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{57}
}

func (x *SampleReceiveBatchEntry) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *SampleReceiveBatchEntry) GetSampleDetails() []*ReceiveSampleResponse {
	if x != nil {
		return x.SampleDetails
	}
	return nil
}

type GetSampleReceiveRecordsResponseMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleReceiveBatchEntries []*SampleReceiveBatchEntry `protobuf:"bytes,1,rep,name=sample_receive_batch_entries,json=sampleReceiveBatchEntries,proto3" json:"sample_receive_batch_entries,omitempty"`
}

func (x *GetSampleReceiveRecordsResponseMap) Reset() {
	*x = GetSampleReceiveRecordsResponseMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSampleReceiveRecordsResponseMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSampleReceiveRecordsResponseMap) ProtoMessage() {}

func (x *GetSampleReceiveRecordsResponseMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSampleReceiveRecordsResponseMap.ProtoReflect.Descriptor instead.
func (*GetSampleReceiveRecordsResponseMap) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{58}
}

func (x *GetSampleReceiveRecordsResponseMap) GetSampleReceiveBatchEntries() []*SampleReceiveBatchEntry {
	if x != nil {
		return x.SampleReceiveBatchEntries
	}
	return nil
}

type ReceiveSampleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SampleId       int32  `protobuf:"varint,2,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	TubeType       string `protobuf:"bytes,3,opt,name=tube_type,json=tubeType,proto3" json:"tube_type,omitempty"`
	CollectionTime string `protobuf:"bytes,4,opt,name=collection_time,json=collectionTime,proto3" json:"collection_time,omitempty"`
	ReceivedCount  int32  `protobuf:"varint,5,opt,name=received_count,json=receivedCount,proto3" json:"received_count,omitempty"`
	ReceivedBy     string `protobuf:"bytes,6,opt,name=received_by,json=receivedBy,proto3" json:"received_by,omitempty"`
	ReceivedTime   string `protobuf:"bytes,7,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	ModifiedBy     string `protobuf:"bytes,8,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	ModifiedTime   string `protobuf:"bytes,9,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`
	IsRedraw       bool   `protobuf:"varint,10,opt,name=is_redraw,json=isRedraw,proto3" json:"is_redraw,omitempty"`
}

func (x *ReceiveSampleResponse) Reset() {
	*x = ReceiveSampleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveSampleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveSampleResponse) ProtoMessage() {}

func (x *ReceiveSampleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveSampleResponse.ProtoReflect.Descriptor instead.
func (*ReceiveSampleResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{59}
}

func (x *ReceiveSampleResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReceiveSampleResponse) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *ReceiveSampleResponse) GetTubeType() string {
	if x != nil {
		return x.TubeType
	}
	return ""
}

func (x *ReceiveSampleResponse) GetCollectionTime() string {
	if x != nil {
		return x.CollectionTime
	}
	return ""
}

func (x *ReceiveSampleResponse) GetReceivedCount() int32 {
	if x != nil {
		return x.ReceivedCount
	}
	return 0
}

func (x *ReceiveSampleResponse) GetReceivedBy() string {
	if x != nil {
		return x.ReceivedBy
	}
	return ""
}

func (x *ReceiveSampleResponse) GetReceivedTime() string {
	if x != nil {
		return x.ReceivedTime
	}
	return ""
}

func (x *ReceiveSampleResponse) GetModifiedBy() string {
	if x != nil {
		return x.ModifiedBy
	}
	return ""
}

func (x *ReceiveSampleResponse) GetModifiedTime() string {
	if x != nil {
		return x.ModifiedTime
	}
	return ""
}

func (x *ReceiveSampleResponse) GetIsRedraw() bool {
	if x != nil {
		return x.IsRedraw
	}
	return false
}

type ListSamplePatientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*ListSamplePatientMiddleResponse `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *ListSamplePatientResponse) Reset() {
	*x = ListSamplePatientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSamplePatientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSamplePatientResponse) ProtoMessage() {}

func (x *ListSamplePatientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSamplePatientResponse.ProtoReflect.Descriptor instead.
func (*ListSamplePatientResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{60}
}

func (x *ListSamplePatientResponse) GetResponse() []*ListSamplePatientMiddleResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type ListSamplePatientMiddleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patient *SamplePatientDetails `protobuf:"bytes,1,opt,name=patient,proto3" json:"patient,omitempty"`
}

func (x *ListSamplePatientMiddleResponse) Reset() {
	*x = ListSamplePatientMiddleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSamplePatientMiddleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSamplePatientMiddleResponse) ProtoMessage() {}

func (x *ListSamplePatientMiddleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSamplePatientMiddleResponse.ProtoReflect.Descriptor instead.
func (*ListSamplePatientMiddleResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{61}
}

func (x *ListSamplePatientMiddleResponse) GetPatient() *SamplePatientDetails {
	if x != nil {
		return x.Patient
	}
	return nil
}

type SamplePatientDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatientId                  int32              `protobuf:"varint,1,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	UserId                     int32              `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PatientType                string             `protobuf:"bytes,3,opt,name=patient_type,json=patientType,proto3" json:"patient_type,omitempty"`
	CustomerId                 int32              `protobuf:"varint,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	PatientGender              string             `protobuf:"bytes,5,opt,name=patient_gender,json=patientGender,proto3" json:"patient_gender,omitempty"`
	PatientFirstName           string             `protobuf:"bytes,6,opt,name=patient_first_name,json=patientFirstName,proto3" json:"patient_first_name,omitempty"`
	PatientLastName            string             `protobuf:"bytes,7,opt,name=patient_last_name,json=patientLastName,proto3" json:"patient_last_name,omitempty"`
	PatientMiddleName          string             `protobuf:"bytes,8,opt,name=patient_middle_name,json=patientMiddleName,proto3" json:"patient_middle_name,omitempty"`
	PatientMedicalRecordNumber string             `protobuf:"bytes,9,opt,name=patient_medical_record_number,json=patientMedicalRecordNumber,proto3" json:"patient_medical_record_number,omitempty"`
	PatientLegalFirstname      string             `protobuf:"bytes,10,opt,name=patient_legal_firstname,json=patientLegalFirstname,proto3" json:"patient_legal_firstname,omitempty"`
	PatientLegalLastname       string             `protobuf:"bytes,11,opt,name=patient_legal_lastname,json=patientLegalLastname,proto3" json:"patient_legal_lastname,omitempty"`
	PatientHonorific           string             `protobuf:"bytes,12,opt,name=patient_honorific,json=patientHonorific,proto3" json:"patient_honorific,omitempty"`
	PatientSuffix              string             `protobuf:"bytes,13,opt,name=patient_suffix,json=patientSuffix,proto3" json:"patient_suffix,omitempty"`
	PatientMarital             string             `protobuf:"bytes,14,opt,name=patient_marital,json=patientMarital,proto3" json:"patient_marital,omitempty"`
	PatientEthnicity           string             `protobuf:"bytes,15,opt,name=patient_ethnicity,json=patientEthnicity,proto3" json:"patient_ethnicity,omitempty"`
	PatientBirthdate           string             `protobuf:"bytes,16,opt,name=patient_birthdate,json=patientBirthdate,proto3" json:"patient_birthdate,omitempty"`
	PatientSsh                 string             `protobuf:"bytes,17,opt,name=patient_ssh,json=patientSsh,proto3" json:"patient_ssh,omitempty"`
	PatientBarcodeInternal     string             `protobuf:"bytes,18,opt,name=patient_barcode_internal,json=patientBarcodeInternal,proto3" json:"patient_barcode_internal,omitempty"`
	PatientHeight              string             `protobuf:"bytes,19,opt,name=patient_height,json=patientHeight,proto3" json:"patient_height,omitempty"`
	PatientWeight              string             `protobuf:"bytes,20,opt,name=patient_weight,json=patientWeight,proto3" json:"patient_weight,omitempty"`
	OfficeallyId               int32              `protobuf:"varint,21,opt,name=officeally_id,json=officeallyId,proto3" json:"officeally_id,omitempty"`
	Flag                       string             `protobuf:"bytes,22,opt,name=flag,proto3" json:"flag,omitempty"`
	PatientCreateTime          string             `protobuf:"bytes,23,opt,name=patient_create_time,json=patientCreateTime,proto3" json:"patient_create_time,omitempty"`
	PatientAddress             []*PatientAddress  `protobuf:"bytes,24,rep,name=patient_address,json=patientAddress,proto3" json:"patient_address,omitempty"`
	PatientContact             []*PatientContact  `protobuf:"bytes,25,rep,name=patient_contact,json=patientContact,proto3" json:"patient_contact,omitempty"`
	PatientCustomer            []*PatientCustomer `protobuf:"bytes,26,rep,name=patient_customer,json=patientCustomer,proto3" json:"patient_customer,omitempty"`
}

func (x *SamplePatientDetails) Reset() {
	*x = SamplePatientDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplePatientDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplePatientDetails) ProtoMessage() {}

func (x *SamplePatientDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplePatientDetails.ProtoReflect.Descriptor instead.
func (*SamplePatientDetails) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{62}
}

func (x *SamplePatientDetails) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *SamplePatientDetails) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SamplePatientDetails) GetPatientType() string {
	if x != nil {
		return x.PatientType
	}
	return ""
}

func (x *SamplePatientDetails) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *SamplePatientDetails) GetPatientGender() string {
	if x != nil {
		return x.PatientGender
	}
	return ""
}

func (x *SamplePatientDetails) GetPatientFirstName() string {
	if x != nil {
		return x.PatientFirstName
	}
	return ""
}

func (x *SamplePatientDetails) GetPatientLastName() string {
	if x != nil {
		return x.PatientLastName
	}
	return ""
}

func (x *SamplePatientDetails) GetPatientMiddleName() string {
	if x != nil {
		return x.PatientMiddleName
	}
	return ""
}

func (x *SamplePatientDetails) GetPatientMedicalRecordNumber() string {
	if x != nil {
		return x.PatientMedicalRecordNumber
	}
	return ""
}

func (x *SamplePatientDetails) GetPatientLegalFirstname() string {
	if x != nil {
		return x.PatientLegalFirstname
	}
	return ""
}

func (x *SamplePatientDetails) GetPatientLegalLastname() string {
	if x != nil {
		return x.PatientLegalLastname
	}
	return ""
}

func (x *SamplePatientDetails) GetPatientHonorific() string {
	if x != nil {
		return x.PatientHonorific
	}
	return ""
}

func (x *SamplePatientDetails) GetPatientSuffix() string {
	if x != nil {
		return x.PatientSuffix
	}
	return ""
}

func (x *SamplePatientDetails) GetPatientMarital() string {
	if x != nil {
		return x.PatientMarital
	}
	return ""
}

func (x *SamplePatientDetails) GetPatientEthnicity() string {
	if x != nil {
		return x.PatientEthnicity
	}
	return ""
}

func (x *SamplePatientDetails) GetPatientBirthdate() string {
	if x != nil {
		return x.PatientBirthdate
	}
	return ""
}

func (x *SamplePatientDetails) GetPatientSsh() string {
	if x != nil {
		return x.PatientSsh
	}
	return ""
}

func (x *SamplePatientDetails) GetPatientBarcodeInternal() string {
	if x != nil {
		return x.PatientBarcodeInternal
	}
	return ""
}

func (x *SamplePatientDetails) GetPatientHeight() string {
	if x != nil {
		return x.PatientHeight
	}
	return ""
}

func (x *SamplePatientDetails) GetPatientWeight() string {
	if x != nil {
		return x.PatientWeight
	}
	return ""
}

func (x *SamplePatientDetails) GetOfficeallyId() int32 {
	if x != nil {
		return x.OfficeallyId
	}
	return 0
}

func (x *SamplePatientDetails) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

func (x *SamplePatientDetails) GetPatientCreateTime() string {
	if x != nil {
		return x.PatientCreateTime
	}
	return ""
}

func (x *SamplePatientDetails) GetPatientAddress() []*PatientAddress {
	if x != nil {
		return x.PatientAddress
	}
	return nil
}

func (x *SamplePatientDetails) GetPatientContact() []*PatientContact {
	if x != nil {
		return x.PatientContact
	}
	return nil
}

func (x *SamplePatientDetails) GetPatientCustomer() []*PatientCustomer {
	if x != nil {
		return x.PatientCustomer
	}
	return nil
}

type PatientAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressId        int32  `protobuf:"varint,1,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	AddressType      string `protobuf:"bytes,2,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	StreetAddress    string `protobuf:"bytes,3,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	ApoPo            string `protobuf:"bytes,4,opt,name=apo_po,json=apoPo,proto3" json:"apo_po,omitempty"`
	City             string `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	State            string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Zipcode          string `protobuf:"bytes,7,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	Country          string `protobuf:"bytes,8,opt,name=country,proto3" json:"country,omitempty"`
	AddressConfirmed bool   `protobuf:"varint,9,opt,name=address_confirmed,json=addressConfirmed,proto3" json:"address_confirmed,omitempty"`
	IsPrimaryAddress bool   `protobuf:"varint,10,opt,name=is_primary_address,json=isPrimaryAddress,proto3" json:"is_primary_address,omitempty"`
	PatientId        int32  `protobuf:"varint,11,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"` //Since this is patient_address, other relation like customer_id/clinic_id/internal_user_id will be ignored
}

func (x *PatientAddress) Reset() {
	*x = PatientAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientAddress) ProtoMessage() {}

func (x *PatientAddress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientAddress.ProtoReflect.Descriptor instead.
func (*PatientAddress) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{63}
}

func (x *PatientAddress) GetAddressId() int32 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *PatientAddress) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *PatientAddress) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

func (x *PatientAddress) GetApoPo() string {
	if x != nil {
		return x.ApoPo
	}
	return ""
}

func (x *PatientAddress) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *PatientAddress) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PatientAddress) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *PatientAddress) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *PatientAddress) GetAddressConfirmed() bool {
	if x != nil {
		return x.AddressConfirmed
	}
	return false
}

func (x *PatientAddress) GetIsPrimaryAddress() bool {
	if x != nil {
		return x.IsPrimaryAddress
	}
	return false
}

func (x *PatientAddress) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

type PatientContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactId          int32  `protobuf:"varint,1,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	ContactDescription string `protobuf:"bytes,2,opt,name=contact_description,json=contactDescription,proto3" json:"contact_description,omitempty"`
	ContactDetails     string `protobuf:"bytes,3,opt,name=contact_details,json=contactDetails,proto3" json:"contact_details,omitempty"`
	ContactType        string `protobuf:"bytes,4,opt,name=contact_type,json=contactType,proto3" json:"contact_type,omitempty"`
	IsPrimaryContact   bool   `protobuf:"varint,5,opt,name=is_primary_contact,json=isPrimaryContact,proto3" json:"is_primary_contact,omitempty"`
	PatientId          int32  `protobuf:"varint,6,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
}

func (x *PatientContact) Reset() {
	*x = PatientContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientContact) ProtoMessage() {}

func (x *PatientContact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientContact.ProtoReflect.Descriptor instead.
func (*PatientContact) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{64}
}

func (x *PatientContact) GetContactId() int32 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *PatientContact) GetContactDescription() string {
	if x != nil {
		return x.ContactDescription
	}
	return ""
}

func (x *PatientContact) GetContactDetails() string {
	if x != nil {
		return x.ContactDetails
	}
	return ""
}

func (x *PatientContact) GetContactType() string {
	if x != nil {
		return x.ContactType
	}
	return ""
}

func (x *PatientContact) GetIsPrimaryContact() bool {
	if x != nil {
		return x.IsPrimaryContact
	}
	return false
}

func (x *PatientContact) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

type PatientCustomer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId                int32  `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	UserId                    int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CustomerType              string `protobuf:"bytes,3,opt,name=customer_type,json=customerType,proto3" json:"customer_type,omitempty"`
	CustomerFirstName         string `protobuf:"bytes,4,opt,name=customer_first_name,json=customerFirstName,proto3" json:"customer_first_name,omitempty"`
	CustomerLastName          string `protobuf:"bytes,5,opt,name=customer_last_name,json=customerLastName,proto3" json:"customer_last_name,omitempty"`
	CustomerMiddleName        string `protobuf:"bytes,6,opt,name=customer_middle_name,json=customerMiddleName,proto3" json:"customer_middle_name,omitempty"`
	CustomerTypeId            string `protobuf:"bytes,7,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
	CustomerSuffix            string `protobuf:"bytes,8,opt,name=customer_suffix,json=customerSuffix,proto3" json:"customer_suffix,omitempty"`
	CustomerSampleReceived    string `protobuf:"bytes,9,opt,name=customer_sample_received,json=customerSampleReceived,proto3" json:"customer_sample_received,omitempty"`
	CustomerRequestSubmitTime string `protobuf:"bytes,10,opt,name=customer_request_submit_time,json=customerRequestSubmitTime,proto3" json:"customer_request_submit_time,omitempty"`
	CustomerPaymentMethod     string `protobuf:"bytes,11,opt,name=customer_payment_method,json=customerPaymentMethod,proto3" json:"customer_payment_method,omitempty"`
	IsActive                  bool   `protobuf:"varint,12,opt,name=isActive,proto3" json:"isActive,omitempty"`
}

func (x *PatientCustomer) Reset() {
	*x = PatientCustomer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientCustomer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientCustomer) ProtoMessage() {}

func (x *PatientCustomer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientCustomer.ProtoReflect.Descriptor instead.
func (*PatientCustomer) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{65}
}

func (x *PatientCustomer) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *PatientCustomer) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PatientCustomer) GetCustomerType() string {
	if x != nil {
		return x.CustomerType
	}
	return ""
}

func (x *PatientCustomer) GetCustomerFirstName() string {
	if x != nil {
		return x.CustomerFirstName
	}
	return ""
}

func (x *PatientCustomer) GetCustomerLastName() string {
	if x != nil {
		return x.CustomerLastName
	}
	return ""
}

func (x *PatientCustomer) GetCustomerMiddleName() string {
	if x != nil {
		return x.CustomerMiddleName
	}
	return ""
}

func (x *PatientCustomer) GetCustomerTypeId() string {
	if x != nil {
		return x.CustomerTypeId
	}
	return ""
}

func (x *PatientCustomer) GetCustomerSuffix() string {
	if x != nil {
		return x.CustomerSuffix
	}
	return ""
}

func (x *PatientCustomer) GetCustomerSampleReceived() string {
	if x != nil {
		return x.CustomerSampleReceived
	}
	return ""
}

func (x *PatientCustomer) GetCustomerRequestSubmitTime() string {
	if x != nil {
		return x.CustomerRequestSubmitTime
	}
	return ""
}

func (x *PatientCustomer) GetCustomerPaymentMethod() string {
	if x != nil {
		return x.CustomerPaymentMethod
	}
	return ""
}

func (x *PatientCustomer) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type GetMultiSampleTubesCountListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*Sample_Tubes_Counts_Response `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *GetMultiSampleTubesCountListResponse) Reset() {
	*x = GetMultiSampleTubesCountListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMultiSampleTubesCountListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMultiSampleTubesCountListResponse) ProtoMessage() {}

func (x *GetMultiSampleTubesCountListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMultiSampleTubesCountListResponse.ProtoReflect.Descriptor instead.
func (*GetMultiSampleTubesCountListResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{66}
}

func (x *GetMultiSampleTubesCountListResponse) GetResponse() []*Sample_Tubes_Counts_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type Sample_Tubes_Counts_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleTubeCount []*Sample_Tubes_Counts `protobuf:"bytes,1,rep,name=sample_tube_count,json=sampleTubeCount,proto3" json:"sample_tube_count,omitempty"`
}

func (x *Sample_Tubes_Counts_Response) Reset() {
	*x = Sample_Tubes_Counts_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample_Tubes_Counts_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample_Tubes_Counts_Response) ProtoMessage() {}

func (x *Sample_Tubes_Counts_Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample_Tubes_Counts_Response.ProtoReflect.Descriptor instead.
func (*Sample_Tubes_Counts_Response) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{67}
}

func (x *Sample_Tubes_Counts_Response) GetSampleTubeCount() []*Sample_Tubes_Counts {
	if x != nil {
		return x.SampleTubeCount
	}
	return nil
}

type Sample_Tubes_Counts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TubeType  string `protobuf:"bytes,1,opt,name=tube_type,json=tubeType,proto3" json:"tube_type,omitempty"`
	TubeCount int32  `protobuf:"varint,2,opt,name=tube_count,json=tubeCount,proto3" json:"tube_count,omitempty"`
}

func (x *Sample_Tubes_Counts) Reset() {
	*x = Sample_Tubes_Counts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample_Tubes_Counts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample_Tubes_Counts) ProtoMessage() {}

func (x *Sample_Tubes_Counts) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample_Tubes_Counts.ProtoReflect.Descriptor instead.
func (*Sample_Tubes_Counts) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{68}
}

func (x *Sample_Tubes_Counts) GetTubeType() string {
	if x != nil {
		return x.TubeType
	}
	return ""
}

func (x *Sample_Tubes_Counts) GetTubeCount() int32 {
	if x != nil {
		return x.TubeCount
	}
	return 0
}

type Tubes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tubes []*Fulltube `protobuf:"bytes,1,rep,name=tubes,proto3" json:"tubes,omitempty"`
}

func (x *Tubes) Reset() {
	*x = Tubes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tubes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tubes) ProtoMessage() {}

func (x *Tubes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tubes.ProtoReflect.Descriptor instead.
func (*Tubes) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{69}
}

func (x *Tubes) GetTubes() []*Fulltube {
	if x != nil {
		return x.Tubes
	}
	return nil
}

type Fulltube struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TubeId             string          `protobuf:"bytes,2,opt,name=tube_id,json=tubeId,proto3" json:"tube_id,omitempty"`
	SampleId           int32           `protobuf:"varint,3,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	TubeStorage        string          `protobuf:"bytes,4,opt,name=tube_storage,json=tubeStorage,proto3" json:"tube_storage,omitempty"`
	TubeReceiveTime    string          `protobuf:"bytes,5,opt,name=tube_receive_time,json=tubeReceiveTime,proto3" json:"tube_receive_time,omitempty"`
	TubeCollectionTime string          `protobuf:"bytes,6,opt,name=tube_collection_time,json=tubeCollectionTime,proto3" json:"tube_collection_time,omitempty"`
	TubeTurnaroundTime int32           `protobuf:"varint,7,opt,name=tube_turnaround_time,json=tubeTurnaroundTime,proto3" json:"tube_turnaround_time,omitempty"`
	TubeStability      int32           `protobuf:"varint,8,opt,name=tube_stability,json=tubeStability,proto3" json:"tube_stability,omitempty"`
	IsActive           bool            `protobuf:"varint,9,opt,name=isActive,proto3" json:"isActive,omitempty"`
	Issues             string          `protobuf:"bytes,10,opt,name=issues,proto3" json:"issues,omitempty"`
	TubeTypes          []*Fulltubetype `protobuf:"bytes,11,rep,name=tube_types,json=tubeTypes,proto3" json:"tube_types,omitempty"`
}

func (x *Fulltube) Reset() {
	*x = Fulltube{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fulltube) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fulltube) ProtoMessage() {}

func (x *Fulltube) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fulltube.ProtoReflect.Descriptor instead.
func (*Fulltube) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{70}
}

func (x *Fulltube) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Fulltube) GetTubeId() string {
	if x != nil {
		return x.TubeId
	}
	return ""
}

func (x *Fulltube) GetSampleId() int32 {
	if x != nil {
		return x.SampleId
	}
	return 0
}

func (x *Fulltube) GetTubeStorage() string {
	if x != nil {
		return x.TubeStorage
	}
	return ""
}

func (x *Fulltube) GetTubeReceiveTime() string {
	if x != nil {
		return x.TubeReceiveTime
	}
	return ""
}

func (x *Fulltube) GetTubeCollectionTime() string {
	if x != nil {
		return x.TubeCollectionTime
	}
	return ""
}

func (x *Fulltube) GetTubeTurnaroundTime() int32 {
	if x != nil {
		return x.TubeTurnaroundTime
	}
	return 0
}

func (x *Fulltube) GetTubeStability() int32 {
	if x != nil {
		return x.TubeStability
	}
	return 0
}

func (x *Fulltube) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Fulltube) GetIssues() string {
	if x != nil {
		return x.Issues
	}
	return ""
}

func (x *Fulltube) GetTubeTypes() []*Fulltubetype {
	if x != nil {
		return x.TubeTypes
	}
	return nil
}

type Fulltubetype struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TubeType       string `protobuf:"bytes,2,opt,name=tube_type,json=tubeType,proto3" json:"tube_type,omitempty"`
	TubeTypeSymbol string `protobuf:"bytes,3,opt,name=tube_type_symbol,json=tubeTypeSymbol,proto3" json:"tube_type_symbol,omitempty"`
}

func (x *Fulltubetype) Reset() {
	*x = Fulltubetype{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fulltubetype) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fulltubetype) ProtoMessage() {}

func (x *Fulltubetype) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fulltubetype.ProtoReflect.Descriptor instead.
func (*Fulltubetype) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{71}
}

func (x *Fulltubetype) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Fulltubetype) GetTubeType() string {
	if x != nil {
		return x.TubeType
	}
	return ""
}

func (x *Fulltubetype) GetTubeTypeSymbol() string {
	if x != nil {
		return x.TubeTypeSymbol
	}
	return ""
}

type Samples struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId             string `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	AccessionId          string `protobuf:"bytes,2,opt,name=accession_id,json=accessionId,proto3" json:"accession_id,omitempty"`
	TubeCount            int32  `protobuf:"varint,3,opt,name=tube_count,json=tubeCount,proto3" json:"tube_count,omitempty"`
	OrderId              int32  `protobuf:"varint,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	SampleDescription    string `protobuf:"bytes,5,opt,name=sample_description,json=sampleDescription,proto3" json:"sample_description,omitempty"`
	PatientId            int32  `protobuf:"varint,6,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	SampleCollectionTime string `protobuf:"bytes,7,opt,name=sample_collection_time,json=sampleCollectionTime,proto3" json:"sample_collection_time,omitempty"`
	SampleReceivedTime   string `protobuf:"bytes,8,opt,name=sample_received_time,json=sampleReceivedTime,proto3" json:"sample_received_time,omitempty"`
	DelayedHours         int32  `protobuf:"varint,9,opt,name=delayed_hours,json=delayedHours,proto3" json:"delayed_hours,omitempty"`
	SampleReportTime     string `protobuf:"bytes,10,opt,name=sample_report_time,json=sampleReportTime,proto3" json:"sample_report_time,omitempty"`
	SampleReportType     string `protobuf:"bytes,11,opt,name=sample_report_type,json=sampleReportType,proto3" json:"sample_report_type,omitempty"`
	PatientHeight        string `protobuf:"bytes,12,opt,name=patient_height,json=patientHeight,proto3" json:"patient_height,omitempty"`
	PatientWeight        string `protobuf:"bytes,13,opt,name=patient_weight,json=patientWeight,proto3" json:"patient_weight,omitempty"`
	FastingStatus        string `protobuf:"bytes,14,opt,name=fasting_status,json=fastingStatus,proto3" json:"fasting_status,omitempty"`
	FastingHours         string `protobuf:"bytes,15,opt,name=fasting_hours,json=fastingHours,proto3" json:"fasting_hours,omitempty"`
	SampleOrderMethod    string `protobuf:"bytes,16,opt,name=sample_order_method,json=sampleOrderMethod,proto3" json:"sample_order_method,omitempty"`
}

func (x *Samples) Reset() {
	*x = Samples{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Samples) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Samples) ProtoMessage() {}

func (x *Samples) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Samples.ProtoReflect.Descriptor instead.
func (*Samples) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{72}
}

func (x *Samples) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *Samples) GetAccessionId() string {
	if x != nil {
		return x.AccessionId
	}
	return ""
}

func (x *Samples) GetTubeCount() int32 {
	if x != nil {
		return x.TubeCount
	}
	return 0
}

func (x *Samples) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *Samples) GetSampleDescription() string {
	if x != nil {
		return x.SampleDescription
	}
	return ""
}

func (x *Samples) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *Samples) GetSampleCollectionTime() string {
	if x != nil {
		return x.SampleCollectionTime
	}
	return ""
}

func (x *Samples) GetSampleReceivedTime() string {
	if x != nil {
		return x.SampleReceivedTime
	}
	return ""
}

func (x *Samples) GetDelayedHours() int32 {
	if x != nil {
		return x.DelayedHours
	}
	return 0
}

func (x *Samples) GetSampleReportTime() string {
	if x != nil {
		return x.SampleReportTime
	}
	return ""
}

func (x *Samples) GetSampleReportType() string {
	if x != nil {
		return x.SampleReportType
	}
	return ""
}

func (x *Samples) GetPatientHeight() string {
	if x != nil {
		return x.PatientHeight
	}
	return ""
}

func (x *Samples) GetPatientWeight() string {
	if x != nil {
		return x.PatientWeight
	}
	return ""
}

func (x *Samples) GetFastingStatus() string {
	if x != nil {
		return x.FastingStatus
	}
	return ""
}

func (x *Samples) GetFastingHours() string {
	if x != nil {
		return x.FastingHours
	}
	return ""
}

func (x *Samples) GetSampleOrderMethod() string {
	if x != nil {
		return x.SampleOrderMethod
	}
	return ""
}

type PatientBMI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessionId   string `protobuf:"bytes,1,opt,name=accession_id,json=accessionId,proto3" json:"accession_id,omitempty"`
	PatientHeight string `protobuf:"bytes,2,opt,name=patient_height,json=patientHeight,proto3" json:"patient_height,omitempty"`
	PatientWeight string `protobuf:"bytes,3,opt,name=patient_weight,json=patientWeight,proto3" json:"patient_weight,omitempty"`
}

func (x *PatientBMI) Reset() {
	*x = PatientBMI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientBMI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientBMI) ProtoMessage() {}

func (x *PatientBMI) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientBMI.ProtoReflect.Descriptor instead.
func (*PatientBMI) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{73}
}

func (x *PatientBMI) GetAccessionId() string {
	if x != nil {
		return x.AccessionId
	}
	return ""
}

func (x *PatientBMI) GetPatientHeight() string {
	if x != nil {
		return x.PatientHeight
	}
	return ""
}

func (x *PatientBMI) GetPatientWeight() string {
	if x != nil {
		return x.PatientWeight
	}
	return ""
}

type CreateSampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessionId          string `protobuf:"bytes,1,opt,name=accession_id,json=accessionId,proto3" json:"accession_id,omitempty"`
	TubeCount            int32  `protobuf:"varint,2,opt,name=tube_count,json=tubeCount,proto3" json:"tube_count,omitempty"`
	OrderId              int32  `protobuf:"varint,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	SampleDescription    string `protobuf:"bytes,4,opt,name=sample_description,json=sampleDescription,proto3" json:"sample_description,omitempty"`
	PatientId            int32  `protobuf:"varint,5,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	SampleCollectionTime string `protobuf:"bytes,6,opt,name=sample_collection_time,json=sampleCollectionTime,proto3" json:"sample_collection_time,omitempty"`
	SampleReceivedTime   string `protobuf:"bytes,7,opt,name=sample_received_time,json=sampleReceivedTime,proto3" json:"sample_received_time,omitempty"`
}

func (x *CreateSampleRequest) Reset() {
	*x = CreateSampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSampleRequest) ProtoMessage() {}

func (x *CreateSampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSampleRequest.ProtoReflect.Descriptor instead.
func (*CreateSampleRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{74}
}

func (x *CreateSampleRequest) GetAccessionId() string {
	if x != nil {
		return x.AccessionId
	}
	return ""
}

func (x *CreateSampleRequest) GetTubeCount() int32 {
	if x != nil {
		return x.TubeCount
	}
	return 0
}

func (x *CreateSampleRequest) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *CreateSampleRequest) GetSampleDescription() string {
	if x != nil {
		return x.SampleDescription
	}
	return ""
}

func (x *CreateSampleRequest) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *CreateSampleRequest) GetSampleCollectionTime() string {
	if x != nil {
		return x.SampleCollectionTime
	}
	return ""
}

func (x *CreateSampleRequest) GetSampleReceivedTime() string {
	if x != nil {
		return x.SampleReceivedTime
	}
	return ""
}

type Sample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId             string               `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	AccessionId          string               `protobuf:"bytes,2,opt,name=accession_id,json=accessionId,proto3" json:"accession_id,omitempty"`
	TubeCount            int32                `protobuf:"varint,3,opt,name=tube_count,json=tubeCount,proto3" json:"tube_count,omitempty"`
	OrderId              int32                `protobuf:"varint,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	SampleDescription    string               `protobuf:"bytes,5,opt,name=sample_description,json=sampleDescription,proto3" json:"sample_description,omitempty"`
	PatientId            int32                `protobuf:"varint,6,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	SampleCollectionTime string               `protobuf:"bytes,7,opt,name=sample_collection_time,json=sampleCollectionTime,proto3" json:"sample_collection_time,omitempty"`
	SampleReceivedTime   string               `protobuf:"bytes,8,opt,name=sample_received_time,json=sampleReceivedTime,proto3" json:"sample_received_time,omitempty"`
	SampleReportTime     string               `protobuf:"bytes,9,opt,name=sample_report_time,json=sampleReportTime,proto3" json:"sample_report_time,omitempty"`
	SampleReportType     string               `protobuf:"bytes,10,opt,name=sample_report_type,json=sampleReportType,proto3" json:"sample_report_type,omitempty"`
	SampleType           string               `protobuf:"bytes,11,opt,name=sample_type,json=sampleType,proto3" json:"sample_type,omitempty"`
	Order                *OrderSampleInSample `protobuf:"bytes,12,opt,name=order,proto3" json:"order,omitempty"`
	Patient              *PatientsInSample    `protobuf:"bytes,13,opt,name=patient,proto3" json:"patient,omitempty"`
	PatientHeight        string               `protobuf:"bytes,14,opt,name=patient_height,json=patientHeight,proto3" json:"patient_height,omitempty"`
	PatientWeight        string               `protobuf:"bytes,15,opt,name=patient_weight,json=patientWeight,proto3" json:"patient_weight,omitempty"`
	FastingStatus        string               `protobuf:"bytes,16,opt,name=fasting_status,json=fastingStatus,proto3" json:"fasting_status,omitempty"`
	FastingHours         string               `protobuf:"bytes,17,opt,name=fasting_hours,json=fastingHours,proto3" json:"fasting_hours,omitempty"`
	SampleOrderMethod    string               `protobuf:"bytes,18,opt,name=sample_order_method,json=sampleOrderMethod,proto3" json:"sample_order_method,omitempty"`
}

func (x *Sample) Reset() {
	*x = Sample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample) ProtoMessage() {}

func (x *Sample) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample.ProtoReflect.Descriptor instead.
func (*Sample) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{75}
}

func (x *Sample) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *Sample) GetAccessionId() string {
	if x != nil {
		return x.AccessionId
	}
	return ""
}

func (x *Sample) GetTubeCount() int32 {
	if x != nil {
		return x.TubeCount
	}
	return 0
}

func (x *Sample) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *Sample) GetSampleDescription() string {
	if x != nil {
		return x.SampleDescription
	}
	return ""
}

func (x *Sample) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *Sample) GetSampleCollectionTime() string {
	if x != nil {
		return x.SampleCollectionTime
	}
	return ""
}

func (x *Sample) GetSampleReceivedTime() string {
	if x != nil {
		return x.SampleReceivedTime
	}
	return ""
}

func (x *Sample) GetSampleReportTime() string {
	if x != nil {
		return x.SampleReportTime
	}
	return ""
}

func (x *Sample) GetSampleReportType() string {
	if x != nil {
		return x.SampleReportType
	}
	return ""
}

func (x *Sample) GetSampleType() string {
	if x != nil {
		return x.SampleType
	}
	return ""
}

func (x *Sample) GetOrder() *OrderSampleInSample {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *Sample) GetPatient() *PatientsInSample {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *Sample) GetPatientHeight() string {
	if x != nil {
		return x.PatientHeight
	}
	return ""
}

func (x *Sample) GetPatientWeight() string {
	if x != nil {
		return x.PatientWeight
	}
	return ""
}

func (x *Sample) GetFastingStatus() string {
	if x != nil {
		return x.FastingStatus
	}
	return ""
}

func (x *Sample) GetFastingHours() string {
	if x != nil {
		return x.FastingHours
	}
	return ""
}

func (x *Sample) GetSampleOrderMethod() string {
	if x != nil {
		return x.SampleOrderMethod
	}
	return ""
}

type PatientsInSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatientId                  int32  `protobuf:"varint,1,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	UserId                     int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PatientGender              string `protobuf:"bytes,3,opt,name=patient_gender,json=patientGender,proto3" json:"patient_gender,omitempty"`
	PatientFirstName           string `protobuf:"bytes,4,opt,name=patient_first_name,json=patientFirstName,proto3" json:"patient_first_name,omitempty"`
	PatientLastName            string `protobuf:"bytes,5,opt,name=patient_last_name,json=patientLastName,proto3" json:"patient_last_name,omitempty"`
	PatientMiddleName          string `protobuf:"bytes,6,opt,name=patient_middle_name,json=patientMiddleName,proto3" json:"patient_middle_name,omitempty"`
	PatientMedicalRecordNumber string `protobuf:"bytes,7,opt,name=patient_medical_record_number,json=patientMedicalRecordNumber,proto3" json:"patient_medical_record_number,omitempty"`
	PatientLegalFirstname      string `protobuf:"bytes,8,opt,name=patient_legal_firstname,json=patientLegalFirstname,proto3" json:"patient_legal_firstname,omitempty"`
	PatientLegalLastname       string `protobuf:"bytes,9,opt,name=patient_legal_lastname,json=patientLegalLastname,proto3" json:"patient_legal_lastname,omitempty"`
	PatientHonorific           string `protobuf:"bytes,10,opt,name=patient_honorific,json=patientHonorific,proto3" json:"patient_honorific,omitempty"`
	PatientSuffix              string `protobuf:"bytes,11,opt,name=patient_suffix,json=patientSuffix,proto3" json:"patient_suffix,omitempty"`
	PatientMarital             string `protobuf:"bytes,12,opt,name=patient_marital,json=patientMarital,proto3" json:"patient_marital,omitempty"`
	PatientEthnicity           string `protobuf:"bytes,13,opt,name=patient_ethnicity,json=patientEthnicity,proto3" json:"patient_ethnicity,omitempty"`
	PatientBirthdate           string `protobuf:"bytes,14,opt,name=patient_birthdate,json=patientBirthdate,proto3" json:"patient_birthdate,omitempty"`
	PatientSsn                 string `protobuf:"bytes,15,opt,name=patient_ssn,json=patientSsn,proto3" json:"patient_ssn,omitempty"`
	PatientBarcodeInternal     string `protobuf:"bytes,16,opt,name=patient_barcode_internal,json=patientBarcodeInternal,proto3" json:"patient_barcode_internal,omitempty"`
	PatientHeight              string `protobuf:"bytes,17,opt,name=patient_height,json=patientHeight,proto3" json:"patient_height,omitempty"`
	PatientWeight              string `protobuf:"bytes,18,opt,name=patient_weight,json=patientWeight,proto3" json:"patient_weight,omitempty"`
	OfficeallyId               int32  `protobuf:"varint,19,opt,name=officeally_id,json=officeallyId,proto3" json:"officeally_id,omitempty"`
	Flag                       string `protobuf:"bytes,20,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *PatientsInSample) Reset() {
	*x = PatientsInSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientsInSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientsInSample) ProtoMessage() {}

func (x *PatientsInSample) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientsInSample.ProtoReflect.Descriptor instead.
func (*PatientsInSample) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{76}
}

func (x *PatientsInSample) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *PatientsInSample) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PatientsInSample) GetPatientGender() string {
	if x != nil {
		return x.PatientGender
	}
	return ""
}

func (x *PatientsInSample) GetPatientFirstName() string {
	if x != nil {
		return x.PatientFirstName
	}
	return ""
}

func (x *PatientsInSample) GetPatientLastName() string {
	if x != nil {
		return x.PatientLastName
	}
	return ""
}

func (x *PatientsInSample) GetPatientMiddleName() string {
	if x != nil {
		return x.PatientMiddleName
	}
	return ""
}

func (x *PatientsInSample) GetPatientMedicalRecordNumber() string {
	if x != nil {
		return x.PatientMedicalRecordNumber
	}
	return ""
}

func (x *PatientsInSample) GetPatientLegalFirstname() string {
	if x != nil {
		return x.PatientLegalFirstname
	}
	return ""
}

func (x *PatientsInSample) GetPatientLegalLastname() string {
	if x != nil {
		return x.PatientLegalLastname
	}
	return ""
}

func (x *PatientsInSample) GetPatientHonorific() string {
	if x != nil {
		return x.PatientHonorific
	}
	return ""
}

func (x *PatientsInSample) GetPatientSuffix() string {
	if x != nil {
		return x.PatientSuffix
	}
	return ""
}

func (x *PatientsInSample) GetPatientMarital() string {
	if x != nil {
		return x.PatientMarital
	}
	return ""
}

func (x *PatientsInSample) GetPatientEthnicity() string {
	if x != nil {
		return x.PatientEthnicity
	}
	return ""
}

func (x *PatientsInSample) GetPatientBirthdate() string {
	if x != nil {
		return x.PatientBirthdate
	}
	return ""
}

func (x *PatientsInSample) GetPatientSsn() string {
	if x != nil {
		return x.PatientSsn
	}
	return ""
}

func (x *PatientsInSample) GetPatientBarcodeInternal() string {
	if x != nil {
		return x.PatientBarcodeInternal
	}
	return ""
}

func (x *PatientsInSample) GetPatientHeight() string {
	if x != nil {
		return x.PatientHeight
	}
	return ""
}

func (x *PatientsInSample) GetPatientWeight() string {
	if x != nil {
		return x.PatientWeight
	}
	return ""
}

func (x *PatientsInSample) GetOfficeallyId() int32 {
	if x != nil {
		return x.OfficeallyId
	}
	return 0
}

func (x *PatientsInSample) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

type OrderSampleInSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId                                 int32         `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderTitle                              string        `protobuf:"bytes,2,opt,name=order_title,json=orderTitle,proto3" json:"order_title,omitempty"`
	OrderDescription                        string        `protobuf:"bytes,3,opt,name=order_description,json=orderDescription,proto3" json:"order_description,omitempty"`
	OrderConfirmationNumber                 string        `protobuf:"bytes,4,opt,name=order_confirmation_number,json=orderConfirmationNumber,proto3" json:"order_confirmation_number,omitempty"`
	AddressId                               int32         `protobuf:"varint,5,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	ContactId                               int32         `protobuf:"varint,6,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	CustomerId                              int32         `protobuf:"varint,7,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	OrderCreateTime                         string        `protobuf:"bytes,8,opt,name=order_create_time,json=orderCreateTime,proto3" json:"order_create_time,omitempty"`
	IsActive                                bool          `protobuf:"varint,9,opt,name=isActive,proto3" json:"isActive,omitempty"`
	HasOrderSetting                         bool          `protobuf:"varint,10,opt,name=has_order_setting,json=hasOrderSetting,proto3" json:"has_order_setting,omitempty"`
	OrderStatus                             string        `protobuf:"bytes,11,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	OrderFlags                              []*OrderFlags `protobuf:"bytes,12,rep,name=order_flags,json=orderFlags,proto3" json:"order_flags,omitempty"`
	ClinicId                                int32         `protobuf:"varint,13,opt,name=clinic_id,json=clinicId,proto3" json:"clinic_id,omitempty"`
	BillingOrderId                          string        `protobuf:"bytes,14,opt,name=billing_order_id,json=billingOrderId,proto3" json:"billing_order_id,omitempty"`
	OrderKitStatus                          string        `protobuf:"bytes,15,opt,name=order_kit_status,json=orderKitStatus,proto3" json:"order_kit_status,omitempty"`
	OrderReportStatus                       string        `protobuf:"bytes,16,opt,name=order_report_status,json=orderReportStatus,proto3" json:"order_report_status,omitempty"`
	OrderBillingIssueStatus                 string        `protobuf:"bytes,17,opt,name=order_billing_issue_status,json=orderBillingIssueStatus,proto3" json:"order_billing_issue_status,omitempty"`
	OrderTnpIssueStatus                     string        `protobuf:"bytes,18,opt,name=order_tnp_issue_status,json=orderTnpIssueStatus,proto3" json:"order_tnp_issue_status,omitempty"`
	OrderMissingInfoIssueStatus             string        `protobuf:"bytes,19,opt,name=order_missing_info_issue_status,json=orderMissingInfoIssueStatus,proto3" json:"order_missing_info_issue_status,omitempty"`
	OrderReceiveIssueStatus                 string        `protobuf:"bytes,20,opt,name=order_receive_issue_status,json=orderReceiveIssueStatus,proto3" json:"order_receive_issue_status,omitempty"`
	OrderIncompleteQuestionnaireIssueStatus string        `protobuf:"bytes,21,opt,name=order_incomplete_questionnaire_issue_status,json=orderIncompleteQuestionnaireIssueStatus,proto3" json:"order_incomplete_questionnaire_issue_status,omitempty"`
	OrderNyWaiveFormIssueStatus             string        `protobuf:"bytes,22,opt,name=order_ny_waive_form_issue_status,json=orderNyWaiveFormIssueStatus,proto3" json:"order_ny_waive_form_issue_status,omitempty"`
	OrderProcessingTime                     string        `protobuf:"bytes,23,opt,name=order_processing_time,json=orderProcessingTime,proto3" json:"order_processing_time,omitempty"`
	OrderRedrawTime                         string        `protobuf:"bytes,24,opt,name=order_redraw_time,json=orderRedrawTime,proto3" json:"order_redraw_time,omitempty"`
	OrderCancelTime                         string        `protobuf:"bytes,25,opt,name=order_cancel_time,json=orderCancelTime,proto3" json:"order_cancel_time,omitempty"`
	OrderLabIssueStatus                     string        `protobuf:"bytes,26,opt,name=order_lab_issue_status,json=orderLabIssueStatus,proto3" json:"order_lab_issue_status,omitempty"`
	OrderMajorStatus                        string        `protobuf:"bytes,27,opt,name=order_major_status,json=orderMajorStatus,proto3" json:"order_major_status,omitempty"`
}

func (x *OrderSampleInSample) Reset() {
	*x = OrderSampleInSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderSampleInSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderSampleInSample) ProtoMessage() {}

func (x *OrderSampleInSample) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderSampleInSample.ProtoReflect.Descriptor instead.
func (*OrderSampleInSample) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{77}
}

func (x *OrderSampleInSample) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *OrderSampleInSample) GetOrderTitle() string {
	if x != nil {
		return x.OrderTitle
	}
	return ""
}

func (x *OrderSampleInSample) GetOrderDescription() string {
	if x != nil {
		return x.OrderDescription
	}
	return ""
}

func (x *OrderSampleInSample) GetOrderConfirmationNumber() string {
	if x != nil {
		return x.OrderConfirmationNumber
	}
	return ""
}

func (x *OrderSampleInSample) GetAddressId() int32 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *OrderSampleInSample) GetContactId() int32 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *OrderSampleInSample) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *OrderSampleInSample) GetOrderCreateTime() string {
	if x != nil {
		return x.OrderCreateTime
	}
	return ""
}

func (x *OrderSampleInSample) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *OrderSampleInSample) GetHasOrderSetting() bool {
	if x != nil {
		return x.HasOrderSetting
	}
	return false
}

func (x *OrderSampleInSample) GetOrderStatus() string {
	if x != nil {
		return x.OrderStatus
	}
	return ""
}

func (x *OrderSampleInSample) GetOrderFlags() []*OrderFlags {
	if x != nil {
		return x.OrderFlags
	}
	return nil
}

func (x *OrderSampleInSample) GetClinicId() int32 {
	if x != nil {
		return x.ClinicId
	}
	return 0
}

func (x *OrderSampleInSample) GetBillingOrderId() string {
	if x != nil {
		return x.BillingOrderId
	}
	return ""
}

func (x *OrderSampleInSample) GetOrderKitStatus() string {
	if x != nil {
		return x.OrderKitStatus
	}
	return ""
}

func (x *OrderSampleInSample) GetOrderReportStatus() string {
	if x != nil {
		return x.OrderReportStatus
	}
	return ""
}

func (x *OrderSampleInSample) GetOrderBillingIssueStatus() string {
	if x != nil {
		return x.OrderBillingIssueStatus
	}
	return ""
}

func (x *OrderSampleInSample) GetOrderTnpIssueStatus() string {
	if x != nil {
		return x.OrderTnpIssueStatus
	}
	return ""
}

func (x *OrderSampleInSample) GetOrderMissingInfoIssueStatus() string {
	if x != nil {
		return x.OrderMissingInfoIssueStatus
	}
	return ""
}

func (x *OrderSampleInSample) GetOrderReceiveIssueStatus() string {
	if x != nil {
		return x.OrderReceiveIssueStatus
	}
	return ""
}

func (x *OrderSampleInSample) GetOrderIncompleteQuestionnaireIssueStatus() string {
	if x != nil {
		return x.OrderIncompleteQuestionnaireIssueStatus
	}
	return ""
}

func (x *OrderSampleInSample) GetOrderNyWaiveFormIssueStatus() string {
	if x != nil {
		return x.OrderNyWaiveFormIssueStatus
	}
	return ""
}

func (x *OrderSampleInSample) GetOrderProcessingTime() string {
	if x != nil {
		return x.OrderProcessingTime
	}
	return ""
}

func (x *OrderSampleInSample) GetOrderRedrawTime() string {
	if x != nil {
		return x.OrderRedrawTime
	}
	return ""
}

func (x *OrderSampleInSample) GetOrderCancelTime() string {
	if x != nil {
		return x.OrderCancelTime
	}
	return ""
}

func (x *OrderSampleInSample) GetOrderLabIssueStatus() string {
	if x != nil {
		return x.OrderLabIssueStatus
	}
	return ""
}

func (x *OrderSampleInSample) GetOrderMajorStatus() string {
	if x != nil {
		return x.OrderMajorStatus
	}
	return ""
}

type OrderFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderFlagId                               int32  `protobuf:"varint,1,opt,name=order_flag_id,json=orderFlagId,proto3" json:"order_flag_id,omitempty"`
	OrderFlagName                             string `protobuf:"bytes,2,opt,name=order_flag_name,json=orderFlagName,proto3" json:"order_flag_name,omitempty"`
	OrderFlagDescription                      string `protobuf:"bytes,3,opt,name=order_flag_description,json=orderFlagDescription,proto3" json:"order_flag_description,omitempty"`
	OrderFlagColor                            string `protobuf:"bytes,4,opt,name=order_flag_color,json=orderFlagColor,proto3" json:"order_flag_color,omitempty"`
	OrderFlagIsActive                         bool   `protobuf:"varint,5,opt,name=order_flag_is_active,json=orderFlagIsActive,proto3" json:"order_flag_is_active,omitempty"`
	OrderFlagCreatedAt                        string `protobuf:"bytes,6,opt,name=order_flag_created_at,json=orderFlagCreatedAt,proto3" json:"order_flag_created_at,omitempty"`
	OrderFlagCategory                         string `protobuf:"bytes,7,opt,name=order_flag_category,json=orderFlagCategory,proto3" json:"order_flag_category,omitempty"`
	OrderFlagAllowDuplicatesUnderSameCategory string `protobuf:"bytes,8,opt,name=order_flag_allow_duplicates_under_same_category,json=orderFlagAllowDuplicatesUnderSameCategory,proto3" json:"order_flag_allow_duplicates_under_same_category,omitempty"`
	OrderFlagLevel                            int32  `protobuf:"varint,9,opt,name=order_flag_level,json=orderFlagLevel,proto3" json:"order_flag_level,omitempty"`
}

func (x *OrderFlags) Reset() {
	*x = OrderFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderFlags) ProtoMessage() {}

func (x *OrderFlags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderFlags.ProtoReflect.Descriptor instead.
func (*OrderFlags) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{78}
}

func (x *OrderFlags) GetOrderFlagId() int32 {
	if x != nil {
		return x.OrderFlagId
	}
	return 0
}

func (x *OrderFlags) GetOrderFlagName() string {
	if x != nil {
		return x.OrderFlagName
	}
	return ""
}

func (x *OrderFlags) GetOrderFlagDescription() string {
	if x != nil {
		return x.OrderFlagDescription
	}
	return ""
}

func (x *OrderFlags) GetOrderFlagColor() string {
	if x != nil {
		return x.OrderFlagColor
	}
	return ""
}

func (x *OrderFlags) GetOrderFlagIsActive() bool {
	if x != nil {
		return x.OrderFlagIsActive
	}
	return false
}

func (x *OrderFlags) GetOrderFlagCreatedAt() string {
	if x != nil {
		return x.OrderFlagCreatedAt
	}
	return ""
}

func (x *OrderFlags) GetOrderFlagCategory() string {
	if x != nil {
		return x.OrderFlagCategory
	}
	return ""
}

func (x *OrderFlags) GetOrderFlagAllowDuplicatesUnderSameCategory() string {
	if x != nil {
		return x.OrderFlagAllowDuplicatesUnderSameCategory
	}
	return ""
}

func (x *OrderFlags) GetOrderFlagLevel() int32 {
	if x != nil {
		return x.OrderFlagLevel
	}
	return 0
}

type SampleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sample []*Sample `protobuf:"bytes,1,rep,name=sample,proto3" json:"sample,omitempty"`
}

func (x *SampleList) Reset() {
	*x = SampleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleList) ProtoMessage() {}

func (x *SampleList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleList.ProtoReflect.Descriptor instead.
func (*SampleList) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{79}
}

func (x *SampleList) GetSample() []*Sample {
	if x != nil {
		return x.Sample
	}
	return nil
}

type SampleId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId string `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
}

func (x *SampleId) Reset() {
	*x = SampleId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleId) ProtoMessage() {}

func (x *SampleId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleId.ProtoReflect.Descriptor instead.
func (*SampleId) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{80}
}

func (x *SampleId) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

type GetSampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId string `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
}

func (x *GetSampleRequest) Reset() {
	*x = GetSampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSampleRequest) ProtoMessage() {}

func (x *GetSampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSampleRequest.ProtoReflect.Descriptor instead.
func (*GetSampleRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{81}
}

func (x *GetSampleRequest) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

type SampleIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleIds []string `protobuf:"bytes,1,rep,name=sample_ids,json=sampleIds,proto3" json:"sample_ids,omitempty"`
}

func (x *SampleIdList) Reset() {
	*x = SampleIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleIdList) ProtoMessage() {}

func (x *SampleIdList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleIdList.ProtoReflect.Descriptor instead.
func (*SampleIdList) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{82}
}

func (x *SampleIdList) GetSampleIds() []string {
	if x != nil {
		return x.SampleIds
	}
	return nil
}

type IdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *IdList) Reset() {
	*x = IdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdList) ProtoMessage() {}

func (x *IdList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdList.ProtoReflect.Descriptor instead.
func (*IdList) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{83}
}

func (x *IdList) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type AccessionIdsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessionIds []string `protobuf:"bytes,1,rep,name=accession_ids,json=accessionIds,proto3" json:"accession_ids,omitempty"`
}

func (x *AccessionIdsList) Reset() {
	*x = AccessionIdsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessionIdsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessionIdsList) ProtoMessage() {}

func (x *AccessionIdsList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessionIdsList.ProtoReflect.Descriptor instead.
func (*AccessionIdsList) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{84}
}

func (x *AccessionIdsList) GetAccessionIds() []string {
	if x != nil {
		return x.AccessionIds
	}
	return nil
}

type SampleTestId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId string    `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	Tests    []*TestID `protobuf:"bytes,2,rep,name=tests,proto3" json:"tests,omitempty"`
}

func (x *SampleTestId) Reset() {
	*x = SampleTestId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleTestId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleTestId) ProtoMessage() {}

func (x *SampleTestId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleTestId.ProtoReflect.Descriptor instead.
func (*SampleTestId) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{85}
}

func (x *SampleTestId) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *SampleTestId) GetTests() []*TestID {
	if x != nil {
		return x.Tests
	}
	return nil
}

type ListLabTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId string    `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	Tests    []*TestID `protobuf:"bytes,2,rep,name=tests,proto3" json:"tests,omitempty"`
}

func (x *ListLabTestsResponse) Reset() {
	*x = ListLabTestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLabTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabTestsResponse) ProtoMessage() {}

func (x *ListLabTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabTestsResponse.ProtoReflect.Descriptor instead.
func (*ListLabTestsResponse) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{86}
}

func (x *ListLabTestsResponse) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *ListLabTestsResponse) GetTests() []*TestID {
	if x != nil {
		return x.Tests
	}
	return nil
}

type SampleTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TubeIds              []*TubeID `protobuf:"bytes,1,rep,name=tube_ids,json=tubeIds,proto3" json:"tube_ids,omitempty"`
	Tests                []*TestS  `protobuf:"bytes,2,rep,name=tests,proto3" json:"tests,omitempty"`
	SampleCollectionTime string    `protobuf:"bytes,3,opt,name=sample_collection_time,json=sampleCollectionTime,proto3" json:"sample_collection_time,omitempty"`
	PatientId            int32     `protobuf:"varint,4,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	AccessionId          string    `protobuf:"bytes,5,opt,name=accession_id,json=accessionId,proto3" json:"accession_id,omitempty"`
	// this seem to have been deprecated
	Instruments []*Instrument `protobuf:"bytes,6,rep,name=instruments,proto3" json:"instruments,omitempty"`
	SampleId    string        `protobuf:"bytes,7,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
}

func (x *SampleTest) Reset() {
	*x = SampleTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleTest) ProtoMessage() {}

func (x *SampleTest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleTest.ProtoReflect.Descriptor instead.
func (*SampleTest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{87}
}

func (x *SampleTest) GetTubeIds() []*TubeID {
	if x != nil {
		return x.TubeIds
	}
	return nil
}

func (x *SampleTest) GetTests() []*TestS {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *SampleTest) GetSampleCollectionTime() string {
	if x != nil {
		return x.SampleCollectionTime
	}
	return ""
}

func (x *SampleTest) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *SampleTest) GetAccessionId() string {
	if x != nil {
		return x.AccessionId
	}
	return ""
}

func (x *SampleTest) GetInstruments() []*Instrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

func (x *SampleTest) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

type SampleTestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleTest []*SampleTest `protobuf:"bytes,1,rep,name=sample_test,json=sampleTest,proto3" json:"sample_test,omitempty"`
}

func (x *SampleTestList) Reset() {
	*x = SampleTestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleTestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleTestList) ProtoMessage() {}

func (x *SampleTestList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleTestList.ProtoReflect.Descriptor instead.
func (*SampleTestList) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{88}
}

func (x *SampleTestList) GetSampleTest() []*SampleTest {
	if x != nil {
		return x.SampleTest
	}
	return nil
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seconds int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanos   int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{89}
}

func (x *Timestamp) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timestamp) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

type SampleReceivedTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Starttime string `protobuf:"bytes,1,opt,name=starttime,proto3" json:"starttime,omitempty"`
	Endtime   string `protobuf:"bytes,2,opt,name=endtime,proto3" json:"endtime,omitempty"`
}

func (x *SampleReceivedTime) Reset() {
	*x = SampleReceivedTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleReceivedTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleReceivedTime) ProtoMessage() {}

func (x *SampleReceivedTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleReceivedTime.ProtoReflect.Descriptor instead.
func (*SampleReceivedTime) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{90}
}

func (x *SampleReceivedTime) GetStarttime() string {
	if x != nil {
		return x.Starttime
	}
	return ""
}

func (x *SampleReceivedTime) GetEndtime() string {
	if x != nil {
		return x.Endtime
	}
	return ""
}

type SampleCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId string                  `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	Patient  *PatientDetailsInSample `protobuf:"bytes,2,opt,name=patient,proto3" json:"patient,omitempty"`
}

func (x *SampleCollection) Reset() {
	*x = SampleCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleCollection) ProtoMessage() {}

func (x *SampleCollection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleCollection.ProtoReflect.Descriptor instead.
func (*SampleCollection) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{91}
}

func (x *SampleCollection) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *SampleCollection) GetPatient() *PatientDetailsInSample {
	if x != nil {
		return x.Patient
	}
	return nil
}

type SampleCollectionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleCollection []*SampleCollection `protobuf:"bytes,1,rep,name=sample_collection,json=sampleCollection,proto3" json:"sample_collection,omitempty"`
}

func (x *SampleCollectionList) Reset() {
	*x = SampleCollectionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleCollectionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleCollectionList) ProtoMessage() {}

func (x *SampleCollectionList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleCollectionList.ProtoReflect.Descriptor instead.
func (*SampleCollectionList) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{92}
}

func (x *SampleCollectionList) GetSampleCollection() []*SampleCollection {
	if x != nil {
		return x.SampleCollection
	}
	return nil
}

type Sample_NonReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId    string `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	AccessionId string `protobuf:"bytes,2,opt,name=accession_id,json=accessionId,proto3" json:"accession_id,omitempty"`
	// int32 count = 3;
	Patient *PatientDetailsInSample `protobuf:"bytes,3,opt,name=patient,proto3" json:"patient,omitempty"`
}

func (x *Sample_NonReceived) Reset() {
	*x = Sample_NonReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample_NonReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample_NonReceived) ProtoMessage() {}

func (x *Sample_NonReceived) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample_NonReceived.ProtoReflect.Descriptor instead.
func (*Sample_NonReceived) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{93}
}

func (x *Sample_NonReceived) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *Sample_NonReceived) GetAccessionId() string {
	if x != nil {
		return x.AccessionId
	}
	return ""
}

func (x *Sample_NonReceived) GetPatient() *PatientDetailsInSample {
	if x != nil {
		return x.Patient
	}
	return nil
}

type Sample_NonReceivedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sample_NonReceived []*Sample_NonReceived `protobuf:"bytes,1,rep,name=sample_NonReceived,json=sampleNonReceived,proto3" json:"sample_NonReceived,omitempty"`
}

func (x *Sample_NonReceivedList) Reset() {
	*x = Sample_NonReceivedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample_NonReceivedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample_NonReceivedList) ProtoMessage() {}

func (x *Sample_NonReceivedList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample_NonReceivedList.ProtoReflect.Descriptor instead.
func (*Sample_NonReceivedList) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{94}
}

func (x *Sample_NonReceivedList) GetSample_NonReceived() []*Sample_NonReceived {
	if x != nil {
		return x.Sample_NonReceived
	}
	return nil
}

type TubeTypeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TubeName          string `protobuf:"bytes,1,opt,name=tube_name,json=tubeName,proto3" json:"tube_name,omitempty"`
	TubeTypeEnum      string `protobuf:"bytes,2,opt,name=tube_type_enum,json=tubeTypeEnum,proto3" json:"tube_type_enum,omitempty"`
	TubeTypeSymbol    string `protobuf:"bytes,3,opt,name=tube_type_symbol,json=tubeTypeSymbol,proto3" json:"tube_type_symbol,omitempty"`
	TubeDescription   string `protobuf:"bytes,4,opt,name=tube_description,json=tubeDescription,proto3" json:"tube_description,omitempty"`
	TubeManufacturer  string `protobuf:"bytes,5,opt,name=tube_manufacturer,json=tubeManufacturer,proto3" json:"tube_manufacturer,omitempty"`
	TubeModel         string `protobuf:"bytes,6,opt,name=tube_model,json=tubeModel,proto3" json:"tube_model,omitempty"`
	PrimarySampleType string `protobuf:"bytes,7,opt,name=primary_sample_type,json=primarySampleType,proto3" json:"primary_sample_type,omitempty"`
	IsActive          bool   `protobuf:"varint,8,opt,name=isActive,proto3" json:"isActive,omitempty"`
}

func (x *TubeTypeDetails) Reset() {
	*x = TubeTypeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TubeTypeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TubeTypeDetails) ProtoMessage() {}

func (x *TubeTypeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TubeTypeDetails.ProtoReflect.Descriptor instead.
func (*TubeTypeDetails) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{95}
}

func (x *TubeTypeDetails) GetTubeName() string {
	if x != nil {
		return x.TubeName
	}
	return ""
}

func (x *TubeTypeDetails) GetTubeTypeEnum() string {
	if x != nil {
		return x.TubeTypeEnum
	}
	return ""
}

func (x *TubeTypeDetails) GetTubeTypeSymbol() string {
	if x != nil {
		return x.TubeTypeSymbol
	}
	return ""
}

func (x *TubeTypeDetails) GetTubeDescription() string {
	if x != nil {
		return x.TubeDescription
	}
	return ""
}

func (x *TubeTypeDetails) GetTubeManufacturer() string {
	if x != nil {
		return x.TubeManufacturer
	}
	return ""
}

func (x *TubeTypeDetails) GetTubeModel() string {
	if x != nil {
		return x.TubeModel
	}
	return ""
}

func (x *TubeTypeDetails) GetPrimarySampleType() string {
	if x != nil {
		return x.PrimarySampleType
	}
	return ""
}

func (x *TubeTypeDetails) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type SampleTybeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleTypeName              string `protobuf:"bytes,1,opt,name=sample_type_name,json=sampleTypeName,proto3" json:"sample_type_name,omitempty"`
	SampleTypeCode              string `protobuf:"bytes,2,opt,name=sample_type_code,json=sampleTypeCode,proto3" json:"sample_type_code,omitempty"`
	SampleTypeEmun              string `protobuf:"bytes,3,opt,name=sample_type_emun,json=sampleTypeEmun,proto3" json:"sample_type_emun,omitempty"`
	SampleTypeEmunOldLisRequest string `protobuf:"bytes,4,opt,name=sample_type_emun_old_lis_request,json=sampleTypeEmunOldLisRequest,proto3" json:"sample_type_emun_old_lis_request,omitempty"`
	SampleTypeDescription       string `protobuf:"bytes,5,opt,name=sample_type_description,json=sampleTypeDescription,proto3" json:"sample_type_description,omitempty"`
	PrimarySampleTypeGroup      string `protobuf:"bytes,6,opt,name=primary_sample_type_group,json=primarySampleTypeGroup,proto3" json:"primary_sample_type_group,omitempty"`
	IsActive                    bool   `protobuf:"varint,7,opt,name=isActive,proto3" json:"isActive,omitempty"`
}

func (x *SampleTybeDetails) Reset() {
	*x = SampleTybeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleTybeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleTybeDetails) ProtoMessage() {}

func (x *SampleTybeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleTybeDetails.ProtoReflect.Descriptor instead.
func (*SampleTybeDetails) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{96}
}

func (x *SampleTybeDetails) GetSampleTypeName() string {
	if x != nil {
		return x.SampleTypeName
	}
	return ""
}

func (x *SampleTybeDetails) GetSampleTypeCode() string {
	if x != nil {
		return x.SampleTypeCode
	}
	return ""
}

func (x *SampleTybeDetails) GetSampleTypeEmun() string {
	if x != nil {
		return x.SampleTypeEmun
	}
	return ""
}

func (x *SampleTybeDetails) GetSampleTypeEmunOldLisRequest() string {
	if x != nil {
		return x.SampleTypeEmunOldLisRequest
	}
	return ""
}

func (x *SampleTybeDetails) GetSampleTypeDescription() string {
	if x != nil {
		return x.SampleTypeDescription
	}
	return ""
}

func (x *SampleTybeDetails) GetPrimarySampleTypeGroup() string {
	if x != nil {
		return x.PrimarySampleTypeGroup
	}
	return ""
}

func (x *SampleTybeDetails) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type SampleTybeDetailsWithTubes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleTypeName              string             `protobuf:"bytes,1,opt,name=sample_type_name,json=sampleTypeName,proto3" json:"sample_type_name,omitempty"`
	SampleTypeCode              string             `protobuf:"bytes,2,opt,name=sample_type_code,json=sampleTypeCode,proto3" json:"sample_type_code,omitempty"`
	SampleTypeEmun              string             `protobuf:"bytes,3,opt,name=sample_type_emun,json=sampleTypeEmun,proto3" json:"sample_type_emun,omitempty"`
	SampleTypeEmunOldLisRequest string             `protobuf:"bytes,4,opt,name=sample_type_emun_old_lis_request,json=sampleTypeEmunOldLisRequest,proto3" json:"sample_type_emun_old_lis_request,omitempty"`
	SampleTypeDescription       string             `protobuf:"bytes,5,opt,name=sample_type_description,json=sampleTypeDescription,proto3" json:"sample_type_description,omitempty"`
	PrimarySampleTypeGroup      string             `protobuf:"bytes,6,opt,name=primary_sample_type_group,json=primarySampleTypeGroup,proto3" json:"primary_sample_type_group,omitempty"`
	IsActive                    bool               `protobuf:"varint,7,opt,name=isActive,proto3" json:"isActive,omitempty"`
	TubeTypes                   []*TubeTypeDetails `protobuf:"bytes,8,rep,name=tube_types,json=tubeTypes,proto3" json:"tube_types,omitempty"`
}

func (x *SampleTybeDetailsWithTubes) Reset() {
	*x = SampleTybeDetailsWithTubes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleTybeDetailsWithTubes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleTybeDetailsWithTubes) ProtoMessage() {}

func (x *SampleTybeDetailsWithTubes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleTybeDetailsWithTubes.ProtoReflect.Descriptor instead.
func (*SampleTybeDetailsWithTubes) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{97}
}

func (x *SampleTybeDetailsWithTubes) GetSampleTypeName() string {
	if x != nil {
		return x.SampleTypeName
	}
	return ""
}

func (x *SampleTybeDetailsWithTubes) GetSampleTypeCode() string {
	if x != nil {
		return x.SampleTypeCode
	}
	return ""
}

func (x *SampleTybeDetailsWithTubes) GetSampleTypeEmun() string {
	if x != nil {
		return x.SampleTypeEmun
	}
	return ""
}

func (x *SampleTybeDetailsWithTubes) GetSampleTypeEmunOldLisRequest() string {
	if x != nil {
		return x.SampleTypeEmunOldLisRequest
	}
	return ""
}

func (x *SampleTybeDetailsWithTubes) GetSampleTypeDescription() string {
	if x != nil {
		return x.SampleTypeDescription
	}
	return ""
}

func (x *SampleTybeDetailsWithTubes) GetPrimarySampleTypeGroup() string {
	if x != nil {
		return x.PrimarySampleTypeGroup
	}
	return ""
}

func (x *SampleTybeDetailsWithTubes) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *SampleTybeDetailsWithTubes) GetTubeTypes() []*TubeTypeDetails {
	if x != nil {
		return x.TubeTypes
	}
	return nil
}

type GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*TubeTypeDetailsWithSampleTypes `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage) Reset() {
	*x = GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage) ProtoMessage() {}

func (x *GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage.ProtoReflect.Descriptor instead.
func (*GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{98}
}

func (x *GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage) GetResult() []*TubeTypeDetailsWithSampleTypes {
	if x != nil {
		return x.Result
	}
	return nil
}

type TubeTypeDetailsWithSampleTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TubeName          string               `protobuf:"bytes,1,opt,name=tube_name,json=tubeName,proto3" json:"tube_name,omitempty"`
	TubeTypeEnum      string               `protobuf:"bytes,2,opt,name=tube_type_enum,json=tubeTypeEnum,proto3" json:"tube_type_enum,omitempty"`
	TubeTypeSymbol    string               `protobuf:"bytes,3,opt,name=tube_type_symbol,json=tubeTypeSymbol,proto3" json:"tube_type_symbol,omitempty"`
	TubeDescription   string               `protobuf:"bytes,4,opt,name=tube_description,json=tubeDescription,proto3" json:"tube_description,omitempty"`
	TubeManufacturer  string               `protobuf:"bytes,5,opt,name=tube_manufacturer,json=tubeManufacturer,proto3" json:"tube_manufacturer,omitempty"`
	TubeModel         string               `protobuf:"bytes,6,opt,name=tube_model,json=tubeModel,proto3" json:"tube_model,omitempty"`
	PrimarySampleType string               `protobuf:"bytes,7,opt,name=primary_sample_type,json=primarySampleType,proto3" json:"primary_sample_type,omitempty"`
	IsActive          bool                 `protobuf:"varint,8,opt,name=isActive,proto3" json:"isActive,omitempty"`
	SampleTypes       []*SampleTybeDetails `protobuf:"bytes,9,rep,name=sample_types,json=sampleTypes,proto3" json:"sample_types,omitempty"`
	Tests             []*TubeTypeToTests   `protobuf:"bytes,10,rep,name=tests,proto3" json:"tests,omitempty"`
	TubeTypeIndex     int32                `protobuf:"varint,11,opt,name=tube_type_index,json=tubeTypeIndex,proto3" json:"tube_type_index,omitempty"`
}

func (x *TubeTypeDetailsWithSampleTypes) Reset() {
	*x = TubeTypeDetailsWithSampleTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TubeTypeDetailsWithSampleTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TubeTypeDetailsWithSampleTypes) ProtoMessage() {}

func (x *TubeTypeDetailsWithSampleTypes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TubeTypeDetailsWithSampleTypes.ProtoReflect.Descriptor instead.
func (*TubeTypeDetailsWithSampleTypes) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{99}
}

func (x *TubeTypeDetailsWithSampleTypes) GetTubeName() string {
	if x != nil {
		return x.TubeName
	}
	return ""
}

func (x *TubeTypeDetailsWithSampleTypes) GetTubeTypeEnum() string {
	if x != nil {
		return x.TubeTypeEnum
	}
	return ""
}

func (x *TubeTypeDetailsWithSampleTypes) GetTubeTypeSymbol() string {
	if x != nil {
		return x.TubeTypeSymbol
	}
	return ""
}

func (x *TubeTypeDetailsWithSampleTypes) GetTubeDescription() string {
	if x != nil {
		return x.TubeDescription
	}
	return ""
}

func (x *TubeTypeDetailsWithSampleTypes) GetTubeManufacturer() string {
	if x != nil {
		return x.TubeManufacturer
	}
	return ""
}

func (x *TubeTypeDetailsWithSampleTypes) GetTubeModel() string {
	if x != nil {
		return x.TubeModel
	}
	return ""
}

func (x *TubeTypeDetailsWithSampleTypes) GetPrimarySampleType() string {
	if x != nil {
		return x.PrimarySampleType
	}
	return ""
}

func (x *TubeTypeDetailsWithSampleTypes) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *TubeTypeDetailsWithSampleTypes) GetSampleTypes() []*SampleTybeDetails {
	if x != nil {
		return x.SampleTypes
	}
	return nil
}

func (x *TubeTypeDetailsWithSampleTypes) GetTests() []*TubeTypeToTests {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *TubeTypeDetailsWithSampleTypes) GetTubeTypeIndex() int32 {
	if x != nil {
		return x.TubeTypeIndex
	}
	return 0
}

type TubeTypeToTests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId   int32  `protobuf:"varint,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	TestName string `protobuf:"bytes,2,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
}

func (x *TubeTypeToTests) Reset() {
	*x = TubeTypeToTests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TubeTypeToTests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TubeTypeToTests) ProtoMessage() {}

func (x *TubeTypeToTests) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TubeTypeToTests.ProtoReflect.Descriptor instead.
func (*TubeTypeToTests) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{100}
}

func (x *TubeTypeToTests) GetTestId() int32 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *TubeTypeToTests) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

type GetSampleTypeTubeTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TubeTypeSymbol string `protobuf:"bytes,1,opt,name=tube_type_symbol,json=tubeTypeSymbol,proto3" json:"tube_type_symbol,omitempty"`
}

func (x *GetSampleTypeTubeTypeRequest) Reset() {
	*x = GetSampleTypeTubeTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSampleTypeTubeTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSampleTypeTubeTypeRequest) ProtoMessage() {}

func (x *GetSampleTypeTubeTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSampleTypeTubeTypeRequest.ProtoReflect.Descriptor instead.
func (*GetSampleTypeTubeTypeRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{101}
}

func (x *GetSampleTypeTubeTypeRequest) GetTubeTypeSymbol() string {
	if x != nil {
		return x.TubeTypeSymbol
	}
	return ""
}

type GetSampleTypeBySampleTypeCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleTypeCode string `protobuf:"bytes,1,opt,name=sample_type_code,json=sampleTypeCode,proto3" json:"sample_type_code,omitempty"`
}

func (x *GetSampleTypeBySampleTypeCodeRequest) Reset() {
	*x = GetSampleTypeBySampleTypeCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSampleTypeBySampleTypeCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSampleTypeBySampleTypeCodeRequest) ProtoMessage() {}

func (x *GetSampleTypeBySampleTypeCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSampleTypeBySampleTypeCodeRequest.ProtoReflect.Descriptor instead.
func (*GetSampleTypeBySampleTypeCodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{102}
}

func (x *GetSampleTypeBySampleTypeCodeRequest) GetSampleTypeCode() string {
	if x != nil {
		return x.SampleTypeCode
	}
	return ""
}

type GetSampleTypeBySampleTypeEmunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleTypeEmun string `protobuf:"bytes,1,opt,name=sample_type_emun,json=sampleTypeEmun,proto3" json:"sample_type_emun,omitempty"`
}

func (x *GetSampleTypeBySampleTypeEmunRequest) Reset() {
	*x = GetSampleTypeBySampleTypeEmunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSampleTypeBySampleTypeEmunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSampleTypeBySampleTypeEmunRequest) ProtoMessage() {}

func (x *GetSampleTypeBySampleTypeEmunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSampleTypeBySampleTypeEmunRequest.ProtoReflect.Descriptor instead.
func (*GetSampleTypeBySampleTypeEmunRequest) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{103}
}

func (x *GetSampleTypeBySampleTypeEmunRequest) GetSampleTypeEmun() string {
	if x != nil {
		return x.SampleTypeEmun
	}
	return ""
}

type PatientDetailsInSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatientId                  int32       `protobuf:"varint,1,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	UserId                     int32       `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PatientGender              string      `protobuf:"bytes,3,opt,name=patient_gender,json=patientGender,proto3" json:"patient_gender,omitempty"`
	PatientFirstName           string      `protobuf:"bytes,4,opt,name=patient_first_name,json=patientFirstName,proto3" json:"patient_first_name,omitempty"`
	PatientLastName            string      `protobuf:"bytes,5,opt,name=patient_last_name,json=patientLastName,proto3" json:"patient_last_name,omitempty"`
	PatientMiddleName          string      `protobuf:"bytes,6,opt,name=patient_middle_name,json=patientMiddleName,proto3" json:"patient_middle_name,omitempty"`
	PatientMedicalRecordNumber string      `protobuf:"bytes,7,opt,name=patient_medical_record_number,json=patientMedicalRecordNumber,proto3" json:"patient_medical_record_number,omitempty"`
	PatientLegalFirstname      string      `protobuf:"bytes,8,opt,name=patient_legal_firstname,json=patientLegalFirstname,proto3" json:"patient_legal_firstname,omitempty"`
	PatientLegalLastname       string      `protobuf:"bytes,9,opt,name=patient_legal_lastname,json=patientLegalLastname,proto3" json:"patient_legal_lastname,omitempty"`
	PatientHonorific           string      `protobuf:"bytes,10,opt,name=patient_honorific,json=patientHonorific,proto3" json:"patient_honorific,omitempty"`
	PatientSuffix              string      `protobuf:"bytes,11,opt,name=patient_suffix,json=patientSuffix,proto3" json:"patient_suffix,omitempty"`
	PatientMarital             string      `protobuf:"bytes,12,opt,name=patient_marital,json=patientMarital,proto3" json:"patient_marital,omitempty"`
	PatientEthnicity           string      `protobuf:"bytes,13,opt,name=patient_ethnicity,json=patientEthnicity,proto3" json:"patient_ethnicity,omitempty"`
	PatientBirthdate           string      `protobuf:"bytes,14,opt,name=patient_birthdate,json=patientBirthdate,proto3" json:"patient_birthdate,omitempty"`
	PatientSsn                 string      `protobuf:"bytes,15,opt,name=patient_ssn,json=patientSsn,proto3" json:"patient_ssn,omitempty"`
	PatientBarcodeInternal     string      `protobuf:"bytes,16,opt,name=patient_barcode_internal,json=patientBarcodeInternal,proto3" json:"patient_barcode_internal,omitempty"`
	PatientHeight              string      `protobuf:"bytes,17,opt,name=patient_height,json=patientHeight,proto3" json:"patient_height,omitempty"`
	PatientWeight              string      `protobuf:"bytes,18,opt,name=patient_weight,json=patientWeight,proto3" json:"patient_weight,omitempty"`
	OfficeallyId               int32       `protobuf:"varint,19,opt,name=officeally_id,json=officeallyId,proto3" json:"officeally_id,omitempty"`
	Flag                       string      `protobuf:"bytes,20,opt,name=flag,proto3" json:"flag,omitempty"`
	Sample                     []*Samples  `protobuf:"bytes,21,rep,name=sample,proto3" json:"sample,omitempty"`
	PatientAddress             []*Address  `protobuf:"bytes,22,rep,name=patient_address,json=patientAddress,proto3" json:"patient_address,omitempty"`
	PatientContact             []*Contact  `protobuf:"bytes,23,rep,name=patient_contact,json=patientContact,proto3" json:"patient_contact,omitempty"`
	PatientCustomer            []*Customer `protobuf:"bytes,24,rep,name=patient_customer,json=patientCustomer,proto3" json:"patient_customer,omitempty"`
}

func (x *PatientDetailsInSample) Reset() {
	*x = PatientDetailsInSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sample_service_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientDetailsInSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientDetailsInSample) ProtoMessage() {}

func (x *PatientDetailsInSample) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sample_service_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientDetailsInSample.ProtoReflect.Descriptor instead.
func (*PatientDetailsInSample) Descriptor() ([]byte, []int) {
	return file_proto_sample_service_proto_rawDescGZIP(), []int{104}
}

func (x *PatientDetailsInSample) GetPatientId() int32 {
	if x != nil {
		return x.PatientId
	}
	return 0
}

func (x *PatientDetailsInSample) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PatientDetailsInSample) GetPatientGender() string {
	if x != nil {
		return x.PatientGender
	}
	return ""
}

func (x *PatientDetailsInSample) GetPatientFirstName() string {
	if x != nil {
		return x.PatientFirstName
	}
	return ""
}

func (x *PatientDetailsInSample) GetPatientLastName() string {
	if x != nil {
		return x.PatientLastName
	}
	return ""
}

func (x *PatientDetailsInSample) GetPatientMiddleName() string {
	if x != nil {
		return x.PatientMiddleName
	}
	return ""
}

func (x *PatientDetailsInSample) GetPatientMedicalRecordNumber() string {
	if x != nil {
		return x.PatientMedicalRecordNumber
	}
	return ""
}

func (x *PatientDetailsInSample) GetPatientLegalFirstname() string {
	if x != nil {
		return x.PatientLegalFirstname
	}
	return ""
}

func (x *PatientDetailsInSample) GetPatientLegalLastname() string {
	if x != nil {
		return x.PatientLegalLastname
	}
	return ""
}

func (x *PatientDetailsInSample) GetPatientHonorific() string {
	if x != nil {
		return x.PatientHonorific
	}
	return ""
}

func (x *PatientDetailsInSample) GetPatientSuffix() string {
	if x != nil {
		return x.PatientSuffix
	}
	return ""
}

func (x *PatientDetailsInSample) GetPatientMarital() string {
	if x != nil {
		return x.PatientMarital
	}
	return ""
}

func (x *PatientDetailsInSample) GetPatientEthnicity() string {
	if x != nil {
		return x.PatientEthnicity
	}
	return ""
}

func (x *PatientDetailsInSample) GetPatientBirthdate() string {
	if x != nil {
		return x.PatientBirthdate
	}
	return ""
}

func (x *PatientDetailsInSample) GetPatientSsn() string {
	if x != nil {
		return x.PatientSsn
	}
	return ""
}

func (x *PatientDetailsInSample) GetPatientBarcodeInternal() string {
	if x != nil {
		return x.PatientBarcodeInternal
	}
	return ""
}

func (x *PatientDetailsInSample) GetPatientHeight() string {
	if x != nil {
		return x.PatientHeight
	}
	return ""
}

func (x *PatientDetailsInSample) GetPatientWeight() string {
	if x != nil {
		return x.PatientWeight
	}
	return ""
}

func (x *PatientDetailsInSample) GetOfficeallyId() int32 {
	if x != nil {
		return x.OfficeallyId
	}
	return 0
}

func (x *PatientDetailsInSample) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

func (x *PatientDetailsInSample) GetSample() []*Samples {
	if x != nil {
		return x.Sample
	}
	return nil
}

func (x *PatientDetailsInSample) GetPatientAddress() []*Address {
	if x != nil {
		return x.PatientAddress
	}
	return nil
}

func (x *PatientDetailsInSample) GetPatientContact() []*Contact {
	if x != nil {
		return x.PatientContact
	}
	return nil
}

func (x *PatientDetailsInSample) GetPatientCustomer() []*Customer {
	if x != nil {
		return x.PatientCustomer
	}
	return nil
}

var File_proto_sample_service_proto protoreflect.FileDescriptor

var file_proto_sample_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a,
	0x1f, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x68, 0x6c, 0x65,
	0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x68, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x68, 0x6c,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xe1, 0x01, 0x0a,
	0x13, 0x50, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x73, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f,
	0x6d, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f,
	0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x68,
	0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x68, 0x6c,
	0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69,
	0x73, 0x74, 0x5f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f,
	0x6d, 0x69, 0x73, 0x74, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x67, 0x0a, 0x15, 0x50, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x70, 0x68, 0x6c,
	0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d,
	0x69, 0x73, 0x74, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x70, 0x68, 0x6c, 0x65,
	0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x73, 0x22, 0x9c, 0x02, 0x0a, 0x26, 0x6e, 0x65,
	0x77, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x15, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x13, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x36, 0x0a, 0x13, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x10, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x27, 0x6e, 0x65, 0x77,
	0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x23, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x1f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x93, 0x02, 0x0a, 0x22, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7f, 0x0a, 0x15, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x13, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x36, 0x0a, 0x13, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x10, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x23, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x1b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c,
	0x0a, 0x23, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1f, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x89, 0x02, 0x0a,
	0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a,
	0x0a, 0x15, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x13, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x36, 0x0a, 0x13, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x10, 0x01, 0x22, 0x63, 0x0a, 0x1e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x58, 0x0a,
	0x30, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x61, 0x72, 0x69, 0x6c, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x61, 0x72, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45,
	0x61, 0x72, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x26,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x61, 0x72, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x22, 0xc9, 0x04, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x10,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x53, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x65,
	0x0a, 0x16, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x14, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf4, 0x04,
	0x0a, 0x18, 0x6e, 0x65, 0x77, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x10,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x53, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x16, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74,
	0x6f, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x68, 0x6c, 0x65,
	0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x14, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f,
	0x6d, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x73, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x66, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x14,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x86, 0x02, 0x0a, 0x1a, 0x50, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74,
	0x6f, 0x6d, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d,
	0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x12, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74,
	0x6f, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x70, 0x68, 0x6c,
	0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f,
	0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x70, 0x68, 0x6c,
	0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74,
	0x6f, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f,
	0x6d, 0x69, 0x73, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xbd, 0x02,
	0x0a, 0x15, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x17, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x42, 0x0a,
	0x08, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0x48, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x75, 0x0a, 0x15, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x22, 0x7d, 0x0a, 0x19, 0x6e, 0x65, 0x77, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3f, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x22, 0xbe, 0x05, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74,
	0x6f, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f,
	0x6d, 0x69, 0x73, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70,
	0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d,
	0x69, 0x73, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x74, 0x65, 0x22, 0xe9, 0x05, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x68, 0x6c, 0x65,
	0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x68,
	0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x68, 0x6c,
	0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69,
	0x73, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x68, 0x6c, 0x65,
	0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69,
	0x73, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x3f,
	0x0a, 0x21, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x3e, 0x0a, 0x22, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x36, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x25, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22,
	0x76, 0x0a, 0x26, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x4c, 0x0a, 0x12, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x51, 0x0a, 0x13, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x75,
	0x6d, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x69,
	0x6e, 0x69, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x8f, 0x01,
	0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x75, 0x6d, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xbf, 0x01, 0x0a, 0x16, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49, 0x64,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x57, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x1b, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x1b, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x18, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xfd, 0x02, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x54, 0x75, 0x62, 0x65, 0x73, 0x54, 0x75, 0x62, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x64, 0x72, 0x61, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x72, 0x75, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x22,
	0xa0, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x54, 0x75, 0x62, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x75, 0x62, 0x65, 0x73, 0x54, 0x75, 0x62, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0xf0, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x54, 0x75, 0x62, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a,
	0x0c, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x74, 0x75, 0x62, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x5c, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x30, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x6f, 0x31, 0x38, 0x37, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f,
	0x31, 0x38, 0x37, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x64, 0x72, 0x61, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52,
	0x65, 0x64, 0x72, 0x61, 0x77, 0x22, 0xf7, 0x02, 0x0a, 0x20, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x75, 0x62, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x74, 0x75, 0x62, 0x65, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0b, 0x74, 0x75, 0x62, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x12, 0x5c, 0x0a,
	0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x30, 0x0a, 0x12, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x31, 0x38,
	0x37, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x73, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x31, 0x38, 0x37, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x22,
	0x63, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x22, 0x6a, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x6c, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x78, 0x0a, 0x0b, 0x54, 0x75, 0x62, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d,
	0x69, 0x73, 0x74, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x68, 0x6c, 0x65, 0x62, 0x6f,
	0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x64, 0x0a, 0x1c, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x50, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74,
	0x6f, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x63,
	0x0a, 0x1d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x31, 0x35, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x35, 0x33, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x6f, 0x0a, 0x21, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x35, 0x33, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x31, 0x35, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x15, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x35, 0x33, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x75, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x62, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x49, 0x64, 0x22, 0x62, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x86, 0x04, 0x0a, 0x14, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x1a, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22,
	0xa3, 0x02, 0x0a, 0x20, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x21, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x62, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x62,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x3d, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0x43, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x7d, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x17, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x51, 0x0a,
	0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x93, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x6d, 0x0a, 0x1c, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xda, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x64,
	0x72, 0x61, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x64,
	0x72, 0x61, 0x77, 0x22, 0x6d, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x66, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xca, 0x09, 0x0a, 0x14, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x41, 0x0a, 0x1d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x67,
	0x61, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x6e,
	0x6f, 0x72, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x69, 0x66, 0x69, 0x63, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x74, 0x68, 0x6e, 0x69, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x45, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x42,
	0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x73, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x61, 0x6c, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x4f, 0x0a, 0x10, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x0f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0xe8, 0x02, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x6f, 0x5f, 0x70, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x6f, 0x50, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xf9, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa2,
	0x04, 0x0a, 0x0f, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3f,
	0x0a, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x22, 0x75, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x75, 0x62, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x54, 0x75, 0x62, 0x65, 0x73,
	0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x0a, 0x1c, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x54, 0x75, 0x62, 0x65, 0x73, 0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x54, 0x75, 0x62, 0x65, 0x73, 0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x51, 0x0a, 0x13, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x54, 0x75, 0x62, 0x65, 0x73,
	0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x62, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x62, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x75, 0x62, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x05, 0x74, 0x75, 0x62, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x05,
	0x74, 0x75, 0x62, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x66, 0x75, 0x6c, 0x6c, 0x74, 0x75, 0x62, 0x65, 0x52, 0x05, 0x74, 0x75, 0x62, 0x65,
	0x73, 0x22, 0xa0, 0x03, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x74, 0x75, 0x62, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x75, 0x62, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x75, 0x62, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x75, 0x62, 0x65, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x75, 0x62, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74, 0x75,
	0x72, 0x6e, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x75, 0x62, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x61, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x75, 0x62, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x74, 0x75, 0x62, 0x65, 0x53, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x66, 0x75, 0x6c,
	0x6c, 0x74, 0x75, 0x62, 0x65, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x75, 0x62, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x74, 0x75, 0x62, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x75, 0x62,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x84, 0x05, 0x0a, 0x07,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x62, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x75, 0x62,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x66, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x22, 0x7d, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x4d, 0x49,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0xa8, 0x02, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x74, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x06, 0x0a,
	0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x62, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x75, 0x62,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x22, 0xe7, 0x06, 0x0a, 0x12, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4c, 0x61, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x69, 0x74, 0x61,
	0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x74, 0x68,
	0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x73, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x73, 0x6e, 0x12, 0x38, 0x0a, 0x18,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x61, 0x6c,
	0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x9e, 0x0a,
	0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x19, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x68, 0x61, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6e, 0x70, 0x5f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6e, 0x70, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a,
	0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5c, 0x0a, 0x2b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x27, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x20, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x79, 0x5f, 0x77, 0x61, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x79, 0x57, 0x61, 0x69, 0x76, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x64,
	0x72, 0x61, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xda,
	0x03, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x46, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c,
	0x61, 0x67, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x62, 0x0a,
	0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x29, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x61,
	0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x42, 0x0a, 0x0b, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22,
	0x28, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x0e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x19, 0x0a, 0x07, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x22, 0x60, 0x0a, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x05, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x22, 0x66, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x22, 0xcf, 0x02, 0x0a, 0x0b,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x74,
	0x75, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x62, 0x65, 0x49, 0x44, 0x52, 0x07, 0x74, 0x75, 0x62, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x52, 0x05,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x55, 0x0a,
	0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x61, 0x6e, 0x6f,
	0x73, 0x22, 0x4e, 0x0a, 0x14, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x79, 0x0a, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x16,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x12,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x71, 0x0a, 0x17, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x11, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0xc1,
	0x02, 0x0a, 0x0f, 0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x62, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x75, 0x62, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x75,
	0x62, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x75, 0x62, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x62, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x75, 0x62,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x22, 0xe7, 0x02, 0x0a, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x62,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6d, 0x75, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6d, 0x75, 0x6e, 0x12, 0x45, 0x0a, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6d, 0x75, 0x6e, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6d, 0x75, 0x6e,
	0x4f, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x17, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xb5, 0x03, 0x0a,
	0x1a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x62, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x54, 0x75, 0x62, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65,
	0x6d, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6d, 0x75, 0x6e, 0x12, 0x45, 0x0a, 0x20, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6d, 0x75, 0x6e, 0x5f, 0x6f, 0x6c,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6d, 0x75, 0x6e, 0x4f, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x17, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x43, 0x0a, 0x0a, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x75, 0x62, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x09, 0x74, 0x75, 0x62, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x35, 0x47, 0x65, 0x74, 0x54, 0x75, 0x62, 0x65,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x69,
	0x61, 0x54, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xff, 0x03, 0x0a, 0x1e,
	0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x75, 0x62, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74,
	0x75, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x75, 0x62,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x75, 0x62, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x75, 0x62, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x74, 0x75, 0x62, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x75, 0x62, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x49,
	0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x54, 0x79, 0x62, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74,
	0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x05,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x47, 0x0a,
	0x0f, 0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x22, 0x50, 0x0a, 0x24, 0x67, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x50, 0x0a, 0x24, 0x67, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6d, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6d, 0x75, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6d, 0x75, 0x6e, 0x22, 0xfb, 0x08, 0x0a, 0x18, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x67, 0x61, 0x6c, 0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x48,
	0x6f, 0x6e, 0x6f, 0x72, 0x69, 0x66, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x69, 0x74,
	0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x74, 0x68, 0x6e,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x73,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x73, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x10, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x52, 0x0f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x32, 0x80, 0x1a, 0x0a, 0x0d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x75, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x54, 0x75, 0x62, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x75, 0x62,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x54, 0x75, 0x62, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x1a, 0x31, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x54, 0x75, 0x62, 0x65, 0x73, 0x5f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x75, 0x62, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x75, 0x62, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61,
	0x70, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x19, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7e, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x54, 0x75, 0x62, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x75, 0x62, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a,
	0x2f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x54, 0x75, 0x62, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x73, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0xa9, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x54,
	0x75, 0x62, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x56, 0x69, 0x61, 0x54, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x75, 0x62, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x56, 0x69, 0x61, 0x54, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x54, 0x75, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x69, 0x61,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x62, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x54, 0x75, 0x62, 0x65, 0x73, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a,
	0x26, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x75, 0x62, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x69, 0x61, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45,
	0x6d, 0x75, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65,
	0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6d, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54,
	0x79, 0x62, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x54, 0x75,
	0x62, 0x65, 0x73, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x75,
	0x6d, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x1a,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x46,
	0x6f, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x46, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a,
	0x11, 0x6e, 0x65, 0x77, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xbc, 0x01, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x45, 0x61, 0x72, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x45, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x45, 0x61, 0x72, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x61, 0x72, 0x69, 0x6c, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x1e, 0x6e, 0x65, 0x77, 0x5f,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x18, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x68, 0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x68,
	0x6c, 0x65, 0x62, 0x6f, 0x74, 0x6f, 0x6d, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x3b, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_sample_service_proto_rawDescOnce sync.Once
	file_proto_sample_service_proto_rawDescData = file_proto_sample_service_proto_rawDesc
)

func file_proto_sample_service_proto_rawDescGZIP() []byte {
	file_proto_sample_service_proto_rawDescOnce.Do(func() {
		file_proto_sample_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_sample_service_proto_rawDescData)
	})
	return file_proto_sample_service_proto_rawDescData
}

var file_proto_sample_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_sample_service_proto_msgTypes = make([]protoimpl.MessageInfo, 105)
var file_proto_sample_service_proto_goTypes = []interface{}{
	(New_BatchCheckSamplesAttributesRequest_SampleAttributeName)(0), // 0: coresamples_service.new_BatchCheckSamplesAttributesRequest.SampleAttributeName
	(BatchCheckSamplesAttributesRequest_SampleAttributeName)(0),     // 1: coresamples_service.BatchCheckSamplesAttributesRequest.SampleAttributeName
	(CheckSamplesAttributesRequest_SampleAttributeName)(0),          // 2: coresamples_service.CheckSamplesAttributesRequest.SampleAttributeName
	(*FuzzySearchPhlebotomistsRequest)(nil),                         // 3: coresamples_service.FuzzySearchPhlebotomistsRequest
	(*PhlebotomistsObject)(nil),                                     // 4: coresamples_service.PhlebotomistsObject
	(*PhlebotomistsResponse)(nil),                                   // 5: coresamples_service.PhlebotomistsResponse
	(*New_BatchCheckSamplesAttributesRequest)(nil),                  // 6: coresamples_service.new_BatchCheckSamplesAttributesRequest
	(*New_BatchCheckSamplesAttributesResponse)(nil),                 // 7: coresamples_service.new_BatchCheckSamplesAttributesResponse
	(*BatchCheckSamplesAttributesRequest)(nil),                      // 8: coresamples_service.BatchCheckSamplesAttributesRequest
	(*BatchCheckSamplesAttributesResponse)(nil),                     // 9: coresamples_service.BatchCheckSamplesAttributesResponse
	(*CheckSamplesAttributesRequest)(nil),                           // 10: coresamples_service.CheckSamplesAttributesRequest
	(*CheckSamplesAttributesResponse)(nil),                          // 11: coresamples_service.CheckSamplesAttributesResponse
	(*GetSampleEarilestCollectionAndReceiveTimeRequest)(nil),        // 12: coresamples_service.GetSampleEarilestCollectionAndReceiveTimeRequest
	(*GetSampleEarilestCollectionAndReceiveTimeResponse)(nil),       // 13: coresamples_service.GetSampleEarilestCollectionAndReceiveTimeResponse
	(*SampleEarilestCollectionAndReceiveTime)(nil),                  // 14: coresamples_service.SampleEarilestCollectionAndReceiveTime
	(*SearchSamplesRequest)(nil),                                    // 15: coresamples_service.SearchSamplesRequest
	(*New_SearchSamplesRequest)(nil),                                // 16: coresamples_service.new_SearchSamplesRequest
	(*ClinicSearchInfoList)(nil),                                    // 17: coresamples_service.ClinicSearchInfoList
	(*ClientSearchInfoList)(nil),                                    // 18: coresamples_service.ClientSearchInfoList
	(*PhlebotomistSearchInfoList)(nil),                              // 19: coresamples_service.PhlebotomistSearchInfoList
	(*PatientSearchInfoList)(nil),                                   // 20: coresamples_service.PatientSearchInfoList
	(*SortInfo)(nil),                                                // 21: coresamples_service.SortInfo
	(*PageInfo)(nil),                                                // 22: coresamples_service.PageInfo
	(*SearchSamplesResponse)(nil),                                   // 23: coresamples_service.SearchSamplesResponse
	(*New_SearchSamplesResponse)(nil),                               // 24: coresamples_service.new_SearchSamplesResponse
	(*SampleResult)(nil),                                            // 25: coresamples_service.SampleResult
	(*New_SampleResult)(nil),                                        // 26: coresamples_service.new_SampleResult
	(*GenerateBarcodeForSampleIdRequest)(nil),                       // 27: coresamples_service.GenerateBarcodeForSampleIdRequest
	(*GenerateBarcodeForSampleIdResponse)(nil),                      // 28: coresamples_service.GenerateBarcodeForSampleIdResponse
	(*GenerateSampleIdResponse)(nil),                                // 29: coresamples_service.GenerateSampleIdResponse
	(*EmptyRequest)(nil),                                            // 30: coresamples_service.EmptyRequest
	(*ForceFetchSampleBillingOrderIDRequest)(nil),                   // 31: coresamples_service.ForceFetchSampleBillingOrderIDRequest
	(*ForceFetchSampleBillingOrderIDResponse)(nil),                  // 32: coresamples_service.ForceFetchSampleBillingOrderIDResponse
	(*SampleBillingOrder)(nil),                                      // 33: coresamples_service.SampleBillingOrder
	(*Job)(nil),                                                     // 34: coresamples_service.Job
	(*SampleListMininum)(nil),                                       // 35: coresamples_service.sample_list_mininum
	(*SampleMininum)(nil),                                           // 36: coresamples_service.sampleMininum
	(*SampleReleventResponse)(nil),                                  // 37: coresamples_service.sampleReleventResponse
	(*InstrumentList)(nil),                                          // 38: coresamples_service.instrument_list
	(*SampleTestInstrumentList)(nil),                                // 39: coresamples_service.sample_test_instrument_list
	(*ReceiveSampleTubesTubeDetails)(nil),                           // 40: coresamples_service.ReceiveSampleTubesTubeDetails
	(*ReceiveSampleTubesResponse)(nil),                              // 41: coresamples_service.ReceiveSampleTubesResponse
	(*ReceiveSampleTubesRequest)(nil),                               // 42: coresamples_service.ReceiveSampleTubesRequest
	(*ReceiveSampleTubesRequestStaging)(nil),                        // 43: coresamples_service.ReceiveSampleTubesRequestStaging
	(*ReceiveLaterRequest)(nil),                                     // 44: coresamples_service.receive_later_request
	(*ReceiveLaterBody)(nil),                                        // 45: coresamples_service.receive_later_body
	(*TubeDetails)(nil),                                             // 46: coresamples_service.TubeDetails
	(*GetSamplePhlebotomistIDResponse)(nil),                         // 47: coresamples_service.GetSamplePhlebotomistIDResponse
	(*SamplePhlebotomistIDResponse)(nil),                            // 48: coresamples_service.SamplePhlebotomistIDResponse
	(*SampleReceiveCount153Response)(nil),                           // 49: coresamples_service.SampleReceiveCount153Response
	(*SampleReceiveCount153ResponseList)(nil),                       // 50: coresamples_service.SampleReceiveCount153ResponseList
	(*SampleReceiveCount153)(nil),                                   // 51: coresamples_service.SampleReceiveCount153
	(*GetSampleNavigatorNotesRequest)(nil),                          // 52: coresamples_service.GetSampleNavigatorNotesRequest
	(*GetSampleNavigatorNotesResponse)(nil),                         // 53: coresamples_service.GetSampleNavigatorNotesResponse
	(*SampleNavigatorNotes)(nil),                                    // 54: coresamples_service.SampleNavigatorNotes
	(*ModifySampleReceiveRecordRequest)(nil),                        // 55: coresamples_service.ModifySampleReceiveRecordRequest
	(*ModifySampleReceiveRecordResponse)(nil),                       // 56: coresamples_service.ModifySampleReceiveRecordResponse
	(*GetSampleReceiveRecordsRequest)(nil),                          // 57: coresamples_service.GetSampleReceiveRecordsRequest
	(*GetSampleReceiveRecordsRequestList)(nil),                      // 58: coresamples_service.GetSampleReceiveRecordsRequestList
	(*GetSampleReceiveRecordsResponse)(nil),                         // 59: coresamples_service.GetSampleReceiveRecordsResponse
	(*SampleReceiveBatchEntry)(nil),                                 // 60: coresamples_service.SampleReceiveBatchEntry
	(*GetSampleReceiveRecordsResponseMap)(nil),                      // 61: coresamples_service.GetSampleReceiveRecordsResponseMap
	(*ReceiveSampleResponse)(nil),                                   // 62: coresamples_service.ReceiveSampleResponse
	(*ListSamplePatientResponse)(nil),                               // 63: coresamples_service.ListSamplePatientResponse
	(*ListSamplePatientMiddleResponse)(nil),                         // 64: coresamples_service.ListSamplePatientMiddleResponse
	(*SamplePatientDetails)(nil),                                    // 65: coresamples_service.SamplePatientDetails
	(*PatientAddress)(nil),                                          // 66: coresamples_service.PatientAddress
	(*PatientContact)(nil),                                          // 67: coresamples_service.PatientContact
	(*PatientCustomer)(nil),                                         // 68: coresamples_service.PatientCustomer
	(*GetMultiSampleTubesCountListResponse)(nil),                    // 69: coresamples_service.GetMultiSampleTubesCountListResponse
	(*Sample_Tubes_Counts_Response)(nil),                            // 70: coresamples_service.Sample_Tubes_Counts_Response
	(*Sample_Tubes_Counts)(nil),                                     // 71: coresamples_service.Sample_Tubes_Counts
	(*Tubes)(nil),                                                   // 72: coresamples_service.tubes
	(*Fulltube)(nil),                                                // 73: coresamples_service.fulltube
	(*Fulltubetype)(nil),                                            // 74: coresamples_service.fulltubetype
	(*Samples)(nil),                                                 // 75: coresamples_service.samples
	(*PatientBMI)(nil),                                              // 76: coresamples_service.PatientBMI
	(*CreateSampleRequest)(nil),                                     // 77: coresamples_service.CreateSampleRequest
	(*Sample)(nil),                                                  // 78: coresamples_service.sample
	(*PatientsInSample)(nil),                                        // 79: coresamples_service.patients_in_sample
	(*OrderSampleInSample)(nil),                                     // 80: coresamples_service.OrderSample_in_sample
	(*OrderFlags)(nil),                                              // 81: coresamples_service.OrderFlags
	(*SampleList)(nil),                                              // 82: coresamples_service.sample_list
	(*SampleId)(nil),                                                // 83: coresamples_service.sample_id
	(*GetSampleRequest)(nil),                                        // 84: coresamples_service.GetSampleRequest
	(*SampleIdList)(nil),                                            // 85: coresamples_service.sample_id_list
	(*IdList)(nil),                                                  // 86: coresamples_service.id_list
	(*AccessionIdsList)(nil),                                        // 87: coresamples_service.accession_ids_list
	(*SampleTestId)(nil),                                            // 88: coresamples_service.sample_test_id
	(*ListLabTestsResponse)(nil),                                    // 89: coresamples_service.ListLabTestsResponse
	(*SampleTest)(nil),                                              // 90: coresamples_service.sample_test
	(*SampleTestList)(nil),                                          // 91: coresamples_service.sample_test_list
	(*Timestamp)(nil),                                               // 92: coresamples_service.Timestamp
	(*SampleReceivedTime)(nil),                                      // 93: coresamples_service.sample_received_time
	(*SampleCollection)(nil),                                        // 94: coresamples_service.sample_collection
	(*SampleCollectionList)(nil),                                    // 95: coresamples_service.sample_collection_list
	(*Sample_NonReceived)(nil),                                      // 96: coresamples_service.sample_NonReceived
	(*Sample_NonReceivedList)(nil),                                  // 97: coresamples_service.sample_NonReceived_list
	(*TubeTypeDetails)(nil),                                         // 98: coresamples_service.tubeTypeDetails
	(*SampleTybeDetails)(nil),                                       // 99: coresamples_service.sampleTybeDetails
	(*SampleTybeDetailsWithTubes)(nil),                              // 100: coresamples_service.sampleTybeDetailsWithTubes
	(*GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage)(nil),   // 101: coresamples_service.GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage
	(*TubeTypeDetailsWithSampleTypes)(nil),                          // 102: coresamples_service.tubeTypeDetailsWithSampleTypes
	(*TubeTypeToTests)(nil),                                         // 103: coresamples_service.tubeTypeToTests
	(*GetSampleTypeTubeTypeRequest)(nil),                            // 104: coresamples_service.getSampleTypeTubeTypeRequest
	(*GetSampleTypeBySampleTypeCodeRequest)(nil),                    // 105: coresamples_service.getSampleTypeBySampleTypeCodeRequest
	(*GetSampleTypeBySampleTypeEmunRequest)(nil),                    // 106: coresamples_service.getSampleTypeBySampleTypeEmunRequest
	(*PatientDetailsInSample)(nil),                                  // 107: coresamples_service.PatientDetails_in_sample
	(*TestID)(nil),                                                  // 108: coresamples_service.TestID
	(*TubeID)(nil),                                                  // 109: coresamples_service.TubeID
	(*TestS)(nil),                                                   // 110: coresamples_service.TestS
	(*Instrument)(nil),                                              // 111: coresamples_service.instrument
	(*Address)(nil),                                                 // 112: coresamples_service.Address
	(*Contact)(nil),                                                 // 113: coresamples_service.Contact
	(*Customer)(nil),                                                // 114: coresamples_service.Customer
}
var file_proto_sample_service_proto_depIdxs = []int32{
	4,   // 0: coresamples_service.PhlebotomistsResponse.phlebotomists:type_name -> coresamples_service.PhlebotomistsObject
	0,   // 1: coresamples_service.new_BatchCheckSamplesAttributesRequest.sample_attribute_name:type_name -> coresamples_service.new_BatchCheckSamplesAttributesRequest.SampleAttributeName
	1,   // 2: coresamples_service.BatchCheckSamplesAttributesRequest.sample_attribute_name:type_name -> coresamples_service.BatchCheckSamplesAttributesRequest.SampleAttributeName
	2,   // 3: coresamples_service.CheckSamplesAttributesRequest.sample_attribute_name:type_name -> coresamples_service.CheckSamplesAttributesRequest.SampleAttributeName
	14,  // 4: coresamples_service.GetSampleEarilestCollectionAndReceiveTimeResponse.result_list:type_name -> coresamples_service.SampleEarilestCollectionAndReceiveTime
	17,  // 5: coresamples_service.SearchSamplesRequest.clinic_info_list:type_name -> coresamples_service.ClinicSearchInfoList
	18,  // 6: coresamples_service.SearchSamplesRequest.client_info_list:type_name -> coresamples_service.ClientSearchInfoList
	20,  // 7: coresamples_service.SearchSamplesRequest.patient_info_list:type_name -> coresamples_service.PatientSearchInfoList
	19,  // 8: coresamples_service.SearchSamplesRequest.phlebotomist_info_list:type_name -> coresamples_service.PhlebotomistSearchInfoList
	21,  // 9: coresamples_service.SearchSamplesRequest.sort_info:type_name -> coresamples_service.SortInfo
	22,  // 10: coresamples_service.SearchSamplesRequest.page_info:type_name -> coresamples_service.PageInfo
	17,  // 11: coresamples_service.new_SearchSamplesRequest.clinic_info_list:type_name -> coresamples_service.ClinicSearchInfoList
	18,  // 12: coresamples_service.new_SearchSamplesRequest.client_info_list:type_name -> coresamples_service.ClientSearchInfoList
	20,  // 13: coresamples_service.new_SearchSamplesRequest.patient_info_list:type_name -> coresamples_service.PatientSearchInfoList
	19,  // 14: coresamples_service.new_SearchSamplesRequest.phlebotomist_info_list:type_name -> coresamples_service.PhlebotomistSearchInfoList
	21,  // 15: coresamples_service.new_SearchSamplesRequest.sort_info:type_name -> coresamples_service.SortInfo
	22,  // 16: coresamples_service.new_SearchSamplesRequest.page_info:type_name -> coresamples_service.PageInfo
	25,  // 17: coresamples_service.SearchSamplesResponse.samples:type_name -> coresamples_service.SampleResult
	26,  // 18: coresamples_service.new_SearchSamplesResponse.samples:type_name -> coresamples_service.new_SampleResult
	33,  // 19: coresamples_service.ForceFetchSampleBillingOrderIDResponse.sample_orders:type_name -> coresamples_service.SampleBillingOrder
	36,  // 20: coresamples_service.sample_list_mininum.sample:type_name -> coresamples_service.sampleMininum
	38,  // 21: coresamples_service.sample_test_instrument_list.sample_test_instrument_list:type_name -> coresamples_service.instrument_list
	40,  // 22: coresamples_service.ReceiveSampleTubesResponse.receive_details:type_name -> coresamples_service.ReceiveSampleTubesTubeDetails
	46,  // 23: coresamples_service.ReceiveSampleTubesRequest.tube_details:type_name -> coresamples_service.TubeDetails
	44,  // 24: coresamples_service.ReceiveSampleTubesRequest.receive_later_body:type_name -> coresamples_service.receive_later_request
	46,  // 25: coresamples_service.ReceiveSampleTubesRequestStaging.tube_details:type_name -> coresamples_service.TubeDetails
	44,  // 26: coresamples_service.ReceiveSampleTubesRequestStaging.receive_later_body:type_name -> coresamples_service.receive_later_request
	45,  // 27: coresamples_service.receive_later_request.request_body:type_name -> coresamples_service.receive_later_body
	48,  // 28: coresamples_service.GetSamplePhlebotomistIDResponse.result:type_name -> coresamples_service.SamplePhlebotomistIDResponse
	51,  // 29: coresamples_service.SampleReceiveCount153Response.result:type_name -> coresamples_service.SampleReceiveCount153
	49,  // 30: coresamples_service.SampleReceiveCount153ResponseList.result:type_name -> coresamples_service.SampleReceiveCount153Response
	54,  // 31: coresamples_service.GetSampleNavigatorNotesResponse.notes:type_name -> coresamples_service.SampleNavigatorNotes
	62,  // 32: coresamples_service.GetSampleReceiveRecordsResponse.sample_receive_list:type_name -> coresamples_service.ReceiveSampleResponse
	62,  // 33: coresamples_service.SampleReceiveBatchEntry.sample_details:type_name -> coresamples_service.ReceiveSampleResponse
	60,  // 34: coresamples_service.GetSampleReceiveRecordsResponseMap.sample_receive_batch_entries:type_name -> coresamples_service.SampleReceiveBatchEntry
	64,  // 35: coresamples_service.ListSamplePatientResponse.response:type_name -> coresamples_service.ListSamplePatientMiddleResponse
	65,  // 36: coresamples_service.ListSamplePatientMiddleResponse.patient:type_name -> coresamples_service.SamplePatientDetails
	66,  // 37: coresamples_service.SamplePatientDetails.patient_address:type_name -> coresamples_service.PatientAddress
	67,  // 38: coresamples_service.SamplePatientDetails.patient_contact:type_name -> coresamples_service.PatientContact
	68,  // 39: coresamples_service.SamplePatientDetails.patient_customer:type_name -> coresamples_service.PatientCustomer
	70,  // 40: coresamples_service.GetMultiSampleTubesCountListResponse.response:type_name -> coresamples_service.Sample_Tubes_Counts_Response
	71,  // 41: coresamples_service.Sample_Tubes_Counts_Response.sample_tube_count:type_name -> coresamples_service.Sample_Tubes_Counts
	73,  // 42: coresamples_service.tubes.tubes:type_name -> coresamples_service.fulltube
	74,  // 43: coresamples_service.fulltube.tube_types:type_name -> coresamples_service.fulltubetype
	80,  // 44: coresamples_service.sample.order:type_name -> coresamples_service.OrderSample_in_sample
	79,  // 45: coresamples_service.sample.patient:type_name -> coresamples_service.patients_in_sample
	81,  // 46: coresamples_service.OrderSample_in_sample.order_flags:type_name -> coresamples_service.OrderFlags
	78,  // 47: coresamples_service.sample_list.sample:type_name -> coresamples_service.sample
	108, // 48: coresamples_service.sample_test_id.tests:type_name -> coresamples_service.TestID
	108, // 49: coresamples_service.ListLabTestsResponse.tests:type_name -> coresamples_service.TestID
	109, // 50: coresamples_service.sample_test.tube_ids:type_name -> coresamples_service.TubeID
	110, // 51: coresamples_service.sample_test.tests:type_name -> coresamples_service.TestS
	111, // 52: coresamples_service.sample_test.instruments:type_name -> coresamples_service.instrument
	90,  // 53: coresamples_service.sample_test_list.sample_test:type_name -> coresamples_service.sample_test
	107, // 54: coresamples_service.sample_collection.patient:type_name -> coresamples_service.PatientDetails_in_sample
	94,  // 55: coresamples_service.sample_collection_list.sample_collection:type_name -> coresamples_service.sample_collection
	107, // 56: coresamples_service.sample_NonReceived.patient:type_name -> coresamples_service.PatientDetails_in_sample
	96,  // 57: coresamples_service.sample_NonReceived_list.sample_NonReceived:type_name -> coresamples_service.sample_NonReceived
	98,  // 58: coresamples_service.sampleTybeDetailsWithTubes.tube_types:type_name -> coresamples_service.tubeTypeDetails
	102, // 59: coresamples_service.GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage.result:type_name -> coresamples_service.tubeTypeDetailsWithSampleTypes
	99,  // 60: coresamples_service.tubeTypeDetailsWithSampleTypes.sample_types:type_name -> coresamples_service.sampleTybeDetails
	103, // 61: coresamples_service.tubeTypeDetailsWithSampleTypes.tests:type_name -> coresamples_service.tubeTypeToTests
	75,  // 62: coresamples_service.PatientDetails_in_sample.sample:type_name -> coresamples_service.samples
	112, // 63: coresamples_service.PatientDetails_in_sample.patient_address:type_name -> coresamples_service.Address
	113, // 64: coresamples_service.PatientDetails_in_sample.patient_contact:type_name -> coresamples_service.Contact
	114, // 65: coresamples_service.PatientDetails_in_sample.patient_customer:type_name -> coresamples_service.Customer
	83,  // 66: coresamples_service.SampleService.ListSampleTests:input_type -> coresamples_service.sample_id
	86,  // 67: coresamples_service.SampleService.ListSamples:input_type -> coresamples_service.id_list
	85,  // 68: coresamples_service.SampleService.GetSampleTests:input_type -> coresamples_service.sample_id_list
	93,  // 69: coresamples_service.SampleService.GetdailyCollectionSamples:input_type -> coresamples_service.sample_received_time
	93,  // 70: coresamples_service.SampleService.GetdailyCheckNonReceivedSamples:input_type -> coresamples_service.sample_received_time
	83,  // 71: coresamples_service.SampleService.GetSampleTubes:input_type -> coresamples_service.sample_id
	83,  // 72: coresamples_service.SampleService.GetSampleTubesCount:input_type -> coresamples_service.sample_id
	85,  // 73: coresamples_service.SampleService.GetMultiSampleTubesCount:input_type -> coresamples_service.sample_id_list
	87,  // 74: coresamples_service.SampleService.ListSamplesAccessionID:input_type -> coresamples_service.accession_ids_list
	57,  // 75: coresamples_service.SampleService.GetSampleReceiveRecords:input_type -> coresamples_service.GetSampleReceiveRecordsRequest
	58,  // 76: coresamples_service.SampleService.GetSampleReceiveRecordsBatch:input_type -> coresamples_service.GetSampleReceiveRecordsRequestList
	55,  // 77: coresamples_service.SampleService.ModifySampleReceiveRecord:input_type -> coresamples_service.ModifySampleReceiveRecordRequest
	43,  // 78: coresamples_service.SampleService.ReceiveSampleTubes:input_type -> coresamples_service.ReceiveSampleTubesRequestStaging
	85,  // 79: coresamples_service.SampleService.GetSampleTestsInstrument:input_type -> coresamples_service.sample_id_list
	104, // 80: coresamples_service.SampleService.GetTubeSampleTypeInfoViaTubeTypeSymbol:input_type -> coresamples_service.getSampleTypeTubeTypeRequest
	105, // 81: coresamples_service.SampleService.GetSampleTubeTypeInfoViaSampleTypeCode:input_type -> coresamples_service.getSampleTypeBySampleTypeCodeRequest
	106, // 82: coresamples_service.SampleService.GetSampleTubeTypeInfoViaSampleEmunCode:input_type -> coresamples_service.getSampleTypeBySampleTypeEmunRequest
	87,  // 83: coresamples_service.SampleService.ListSampleMininumInfo:input_type -> coresamples_service.accession_ids_list
	30,  // 84: coresamples_service.SampleService.GenerateSampleID:input_type -> coresamples_service.EmptyRequest
	27,  // 85: coresamples_service.SampleService.GenerateBarcodeForSampleID:input_type -> coresamples_service.GenerateBarcodeForSampleIdRequest
	16,  // 86: coresamples_service.SampleService.new_SearchSamples:input_type -> coresamples_service.new_SearchSamplesRequest
	12,  // 87: coresamples_service.SampleService.GetSampleEarilestCollectionAndReceiveTime:input_type -> coresamples_service.GetSampleEarilestCollectionAndReceiveTimeRequest
	10,  // 88: coresamples_service.SampleService.CheckSampleAttributes:input_type -> coresamples_service.CheckSamplesAttributesRequest
	8,   // 89: coresamples_service.SampleService.BatchCheckSampleAttributes:input_type -> coresamples_service.BatchCheckSamplesAttributesRequest
	6,   // 90: coresamples_service.SampleService.new_BatchCheckSampleAttributes:input_type -> coresamples_service.new_BatchCheckSamplesAttributesRequest
	3,   // 91: coresamples_service.SampleService.FuzzySearchPhlebotomists:input_type -> coresamples_service.FuzzySearchPhlebotomistsRequest
	88,  // 92: coresamples_service.SampleService.ListSampleTests:output_type -> coresamples_service.sample_test_id
	82,  // 93: coresamples_service.SampleService.ListSamples:output_type -> coresamples_service.sample_list
	91,  // 94: coresamples_service.SampleService.GetSampleTests:output_type -> coresamples_service.sample_test_list
	95,  // 95: coresamples_service.SampleService.GetdailyCollectionSamples:output_type -> coresamples_service.sample_collection_list
	97,  // 96: coresamples_service.SampleService.GetdailyCheckNonReceivedSamples:output_type -> coresamples_service.sample_NonReceived_list
	72,  // 97: coresamples_service.SampleService.GetSampleTubes:output_type -> coresamples_service.tubes
	70,  // 98: coresamples_service.SampleService.GetSampleTubesCount:output_type -> coresamples_service.Sample_Tubes_Counts_Response
	69,  // 99: coresamples_service.SampleService.GetMultiSampleTubesCount:output_type -> coresamples_service.GetMultiSampleTubesCountListResponse
	82,  // 100: coresamples_service.SampleService.ListSamplesAccessionID:output_type -> coresamples_service.sample_list
	59,  // 101: coresamples_service.SampleService.GetSampleReceiveRecords:output_type -> coresamples_service.GetSampleReceiveRecordsResponse
	61,  // 102: coresamples_service.SampleService.GetSampleReceiveRecordsBatch:output_type -> coresamples_service.GetSampleReceiveRecordsResponseMap
	56,  // 103: coresamples_service.SampleService.ModifySampleReceiveRecord:output_type -> coresamples_service.ModifySampleReceiveRecordResponse
	41,  // 104: coresamples_service.SampleService.ReceiveSampleTubes:output_type -> coresamples_service.ReceiveSampleTubesResponse
	39,  // 105: coresamples_service.SampleService.GetSampleTestsInstrument:output_type -> coresamples_service.sample_test_instrument_list
	101, // 106: coresamples_service.SampleService.GetTubeSampleTypeInfoViaTubeTypeSymbol:output_type -> coresamples_service.GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage
	100, // 107: coresamples_service.SampleService.GetSampleTubeTypeInfoViaSampleTypeCode:output_type -> coresamples_service.sampleTybeDetailsWithTubes
	100, // 108: coresamples_service.SampleService.GetSampleTubeTypeInfoViaSampleEmunCode:output_type -> coresamples_service.sampleTybeDetailsWithTubes
	35,  // 109: coresamples_service.SampleService.ListSampleMininumInfo:output_type -> coresamples_service.sample_list_mininum
	29,  // 110: coresamples_service.SampleService.GenerateSampleID:output_type -> coresamples_service.GenerateSampleIdResponse
	28,  // 111: coresamples_service.SampleService.GenerateBarcodeForSampleID:output_type -> coresamples_service.GenerateBarcodeForSampleIdResponse
	24,  // 112: coresamples_service.SampleService.new_SearchSamples:output_type -> coresamples_service.new_SearchSamplesResponse
	13,  // 113: coresamples_service.SampleService.GetSampleEarilestCollectionAndReceiveTime:output_type -> coresamples_service.GetSampleEarilestCollectionAndReceiveTimeResponse
	11,  // 114: coresamples_service.SampleService.CheckSampleAttributes:output_type -> coresamples_service.CheckSamplesAttributesResponse
	9,   // 115: coresamples_service.SampleService.BatchCheckSampleAttributes:output_type -> coresamples_service.BatchCheckSamplesAttributesResponse
	7,   // 116: coresamples_service.SampleService.new_BatchCheckSampleAttributes:output_type -> coresamples_service.new_BatchCheckSamplesAttributesResponse
	5,   // 117: coresamples_service.SampleService.FuzzySearchPhlebotomists:output_type -> coresamples_service.PhlebotomistsResponse
	92,  // [92:118] is the sub-list for method output_type
	66,  // [66:92] is the sub-list for method input_type
	66,  // [66:66] is the sub-list for extension type_name
	66,  // [66:66] is the sub-list for extension extendee
	0,   // [0:66] is the sub-list for field type_name
}

func init() { file_proto_sample_service_proto_init() }
func file_proto_sample_service_proto_init() {
	if File_proto_sample_service_proto != nil {
		return
	}
	file_proto_test_service_proto_init()
	file_proto_tube_service_proto_init()
	file_proto_instrument_proto_init()
	file_proto_address_proto_init()
	file_proto_contact_proto_init()
	file_proto_customer_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_sample_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzySearchPhlebotomistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhlebotomistsObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhlebotomistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*New_BatchCheckSamplesAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*New_BatchCheckSamplesAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCheckSamplesAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCheckSamplesAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSamplesAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSamplesAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSampleEarilestCollectionAndReceiveTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSampleEarilestCollectionAndReceiveTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleEarilestCollectionAndReceiveTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSamplesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*New_SearchSamplesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicSearchInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSearchInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhlebotomistSearchInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientSearchInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSamplesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*New_SearchSamplesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*New_SampleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateBarcodeForSampleIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateBarcodeForSampleIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateSampleIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceFetchSampleBillingOrderIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceFetchSampleBillingOrderIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleBillingOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleListMininum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleMininum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleReleventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleTestInstrumentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveSampleTubesTubeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveSampleTubesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveSampleTubesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveSampleTubesRequestStaging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveLaterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveLaterBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TubeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSamplePhlebotomistIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplePhlebotomistIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleReceiveCount153Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleReceiveCount153ResponseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleReceiveCount153); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSampleNavigatorNotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSampleNavigatorNotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleNavigatorNotes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifySampleReceiveRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifySampleReceiveRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSampleReceiveRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSampleReceiveRecordsRequestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSampleReceiveRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleReceiveBatchEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSampleReceiveRecordsResponseMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveSampleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSamplePatientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSamplePatientMiddleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplePatientDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientCustomer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMultiSampleTubesCountListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample_Tubes_Counts_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample_Tubes_Counts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tubes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fulltube); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fulltubetype); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Samples); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientBMI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientsInSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderSampleInSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessionIdsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleTestId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLabTestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleTestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleReceivedTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleCollectionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample_NonReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample_NonReceivedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TubeTypeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleTybeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleTybeDetailsWithTubes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TubeTypeDetailsWithSampleTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TubeTypeToTests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSampleTypeTubeTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSampleTypeBySampleTypeCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSampleTypeBySampleTypeEmunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sample_service_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientDetailsInSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_sample_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   105,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_sample_service_proto_goTypes,
		DependencyIndexes: file_proto_sample_service_proto_depIdxs,
		EnumInfos:         file_proto_sample_service_proto_enumTypes,
		MessageInfos:      file_proto_sample_service_proto_msgTypes,
	}.Build()
	File_proto_sample_service_proto = out.File
	file_proto_sample_service_proto_rawDesc = nil
	file_proto_sample_service_proto_goTypes = nil
	file_proto_sample_service_proto_depIdxs = nil
}
