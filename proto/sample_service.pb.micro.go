// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/sample_service.proto

package coresamples_service

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SampleService service

func NewSampleServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SampleService service

type SampleService interface {
	// rpc CreateSample(CreateSampleRequest) returns (samples){} deprecated
	ListSampleTests(ctx context.Context, in *SampleId, opts ...client.CallOption) (*SampleTestId, error)
	ListSamples(ctx context.Context, in *IdList, opts ...client.CallOption) (*SampleList, error)
	GetSampleTests(ctx context.Context, in *SampleIdList, opts ...client.CallOption) (*SampleTestList, error)
	GetdailyCollectionSamples(ctx context.Context, in *SampleReceivedTime, opts ...client.CallOption) (*SampleCollectionList, error)
	GetdailyCheckNonReceivedSamples(ctx context.Context, in *SampleReceivedTime, opts ...client.CallOption) (*Sample_NonReceivedList, error)
	// New RPC method after version 0.7.2
	GetSampleTubes(ctx context.Context, in *SampleId, opts ...client.CallOption) (*Tubes, error)
	GetSampleTubesCount(ctx context.Context, in *SampleId, opts ...client.CallOption) (*Sample_Tubes_Counts_Response, error)
	GetMultiSampleTubesCount(ctx context.Context, in *SampleIdList, opts ...client.CallOption) (*GetMultiSampleTubesCountListResponse, error)
	ListSamplesAccessionID(ctx context.Context, in *AccessionIdsList, opts ...client.CallOption) (*SampleList, error)
	// TODO: implement this, after patient is in
	//
	//	rpc UpdatePatientBMI(PatientBMI) returns (samples){}
	//
	// New RPC method for PNS
	// TODO: implement this, after patient is in
	//
	//	rpc ListSamplePatient(sample_id_list) returns(ListSamplePatientResponse){}
	//
	// Received Sample Part, Compactable to the inventory service
	// rpc ReceiveSample(ReceiveSampleRequest) returns (ReceiveSampleResponse){}
	GetSampleReceiveRecords(ctx context.Context, in *GetSampleReceiveRecordsRequest, opts ...client.CallOption) (*GetSampleReceiveRecordsResponse, error)
	GetSampleReceiveRecordsBatch(ctx context.Context, in *GetSampleReceiveRecordsRequestList, opts ...client.CallOption) (*GetSampleReceiveRecordsResponseMap, error)
	ModifySampleReceiveRecord(ctx context.Context, in *ModifySampleReceiveRecordRequest, opts ...client.CallOption) (*ModifySampleReceiveRecordResponse, error)
	// TODO: implement this after navigator notes is in
	//
	//	rpc GetSampleNavigatorNotes(GetSampleNavigatorNotesRequest) returns (GetSampleNavigatorNotesResponse){}
	//
	// TODO: implement this, need to figure out the schema here
	//
	//	rpc ListSamplePhlebotomistID(sample_id_list) returns (GetSamplePhlebotomistIDResponse){}
	ReceiveSampleTubes(ctx context.Context, in *ReceiveSampleTubesRequestStaging, opts ...client.CallOption) (*ReceiveSampleTubesResponse, error)
	GetSampleTestsInstrument(ctx context.Context, in *SampleIdList, opts ...client.CallOption) (*SampleTestInstrumentList, error)
	GetTubeSampleTypeInfoViaTubeTypeSymbol(ctx context.Context, in *GetSampleTypeTubeTypeRequest, opts ...client.CallOption) (*GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage, error)
	GetSampleTubeTypeInfoViaSampleTypeCode(ctx context.Context, in *GetSampleTypeBySampleTypeCodeRequest, opts ...client.CallOption) (*SampleTybeDetailsWithTubes, error)
	GetSampleTubeTypeInfoViaSampleEmunCode(ctx context.Context, in *GetSampleTypeBySampleTypeEmunRequest, opts ...client.CallOption) (*SampleTybeDetailsWithTubes, error)
	// TODO: implement this after patient and customer is in
	//
	//	rpc GetSampleRelevantInfo(sample_id) returns (sampleReleventResponse){}
	ListSampleMininumInfo(ctx context.Context, in *AccessionIdsList, opts ...client.CallOption) (*SampleListMininum, error)
	GenerateSampleID(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GenerateSampleIdResponse, error)
	// TODO: save this one until generatesampleid is in and sorted
	GenerateBarcodeForSampleID(ctx context.Context, in *GenerateBarcodeForSampleIdRequest, opts ...client.CallOption) (*GenerateBarcodeForSampleIdResponse, error)
	// TODO: save this one later
	//
	//	rpc SearchSamples(SearchSamplesRequest) returns (SearchSamplesResponse){}
	//
	// New version search sample(3/2024)
	New_SearchSamples(ctx context.Context, in *New_SearchSamplesRequest, opts ...client.CallOption) (*New_SearchSamplesResponse, error)
	GetSampleEarilestCollectionAndReceiveTime(ctx context.Context, in *GetSampleEarilestCollectionAndReceiveTimeRequest, opts ...client.CallOption) (*GetSampleEarilestCollectionAndReceiveTimeResponse, error)
	// check
	CheckSampleAttributes(ctx context.Context, in *CheckSamplesAttributesRequest, opts ...client.CallOption) (*CheckSamplesAttributesResponse, error)
	BatchCheckSampleAttributes(ctx context.Context, in *BatchCheckSamplesAttributesRequest, opts ...client.CallOption) (*BatchCheckSamplesAttributesResponse, error)
	New_BatchCheckSampleAttributes(ctx context.Context, in *New_BatchCheckSamplesAttributesRequest, opts ...client.CallOption) (*New_BatchCheckSamplesAttributesResponse, error)
	// FuzzySearchPhlebotomists
	FuzzySearchPhlebotomists(ctx context.Context, in *FuzzySearchPhlebotomistsRequest, opts ...client.CallOption) (*PhlebotomistsResponse, error)
}

type sampleService struct {
	c    client.Client
	name string
}

func NewSampleService(name string, c client.Client) SampleService {
	return &sampleService{
		c:    c,
		name: name,
	}
}

func (c *sampleService) ListSampleTests(ctx context.Context, in *SampleId, opts ...client.CallOption) (*SampleTestId, error) {
	req := c.c.NewRequest(c.name, "SampleService.ListSampleTests", in)
	out := new(SampleTestId)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) ListSamples(ctx context.Context, in *IdList, opts ...client.CallOption) (*SampleList, error) {
	req := c.c.NewRequest(c.name, "SampleService.ListSamples", in)
	out := new(SampleList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) GetSampleTests(ctx context.Context, in *SampleIdList, opts ...client.CallOption) (*SampleTestList, error) {
	req := c.c.NewRequest(c.name, "SampleService.GetSampleTests", in)
	out := new(SampleTestList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) GetdailyCollectionSamples(ctx context.Context, in *SampleReceivedTime, opts ...client.CallOption) (*SampleCollectionList, error) {
	req := c.c.NewRequest(c.name, "SampleService.GetdailyCollectionSamples", in)
	out := new(SampleCollectionList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) GetdailyCheckNonReceivedSamples(ctx context.Context, in *SampleReceivedTime, opts ...client.CallOption) (*Sample_NonReceivedList, error) {
	req := c.c.NewRequest(c.name, "SampleService.GetdailyCheckNonReceivedSamples", in)
	out := new(Sample_NonReceivedList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) GetSampleTubes(ctx context.Context, in *SampleId, opts ...client.CallOption) (*Tubes, error) {
	req := c.c.NewRequest(c.name, "SampleService.GetSampleTubes", in)
	out := new(Tubes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) GetSampleTubesCount(ctx context.Context, in *SampleId, opts ...client.CallOption) (*Sample_Tubes_Counts_Response, error) {
	req := c.c.NewRequest(c.name, "SampleService.GetSampleTubesCount", in)
	out := new(Sample_Tubes_Counts_Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) GetMultiSampleTubesCount(ctx context.Context, in *SampleIdList, opts ...client.CallOption) (*GetMultiSampleTubesCountListResponse, error) {
	req := c.c.NewRequest(c.name, "SampleService.GetMultiSampleTubesCount", in)
	out := new(GetMultiSampleTubesCountListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) ListSamplesAccessionID(ctx context.Context, in *AccessionIdsList, opts ...client.CallOption) (*SampleList, error) {
	req := c.c.NewRequest(c.name, "SampleService.ListSamplesAccessionID", in)
	out := new(SampleList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) GetSampleReceiveRecords(ctx context.Context, in *GetSampleReceiveRecordsRequest, opts ...client.CallOption) (*GetSampleReceiveRecordsResponse, error) {
	req := c.c.NewRequest(c.name, "SampleService.GetSampleReceiveRecords", in)
	out := new(GetSampleReceiveRecordsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) GetSampleReceiveRecordsBatch(ctx context.Context, in *GetSampleReceiveRecordsRequestList, opts ...client.CallOption) (*GetSampleReceiveRecordsResponseMap, error) {
	req := c.c.NewRequest(c.name, "SampleService.GetSampleReceiveRecordsBatch", in)
	out := new(GetSampleReceiveRecordsResponseMap)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) ModifySampleReceiveRecord(ctx context.Context, in *ModifySampleReceiveRecordRequest, opts ...client.CallOption) (*ModifySampleReceiveRecordResponse, error) {
	req := c.c.NewRequest(c.name, "SampleService.ModifySampleReceiveRecord", in)
	out := new(ModifySampleReceiveRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) ReceiveSampleTubes(ctx context.Context, in *ReceiveSampleTubesRequestStaging, opts ...client.CallOption) (*ReceiveSampleTubesResponse, error) {
	req := c.c.NewRequest(c.name, "SampleService.ReceiveSampleTubes", in)
	out := new(ReceiveSampleTubesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) GetSampleTestsInstrument(ctx context.Context, in *SampleIdList, opts ...client.CallOption) (*SampleTestInstrumentList, error) {
	req := c.c.NewRequest(c.name, "SampleService.GetSampleTestsInstrument", in)
	out := new(SampleTestInstrumentList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) GetTubeSampleTypeInfoViaTubeTypeSymbol(ctx context.Context, in *GetSampleTypeTubeTypeRequest, opts ...client.CallOption) (*GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage, error) {
	req := c.c.NewRequest(c.name, "SampleService.GetTubeSampleTypeInfoViaTubeTypeSymbol", in)
	out := new(GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) GetSampleTubeTypeInfoViaSampleTypeCode(ctx context.Context, in *GetSampleTypeBySampleTypeCodeRequest, opts ...client.CallOption) (*SampleTybeDetailsWithTubes, error) {
	req := c.c.NewRequest(c.name, "SampleService.GetSampleTubeTypeInfoViaSampleTypeCode", in)
	out := new(SampleTybeDetailsWithTubes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) GetSampleTubeTypeInfoViaSampleEmunCode(ctx context.Context, in *GetSampleTypeBySampleTypeEmunRequest, opts ...client.CallOption) (*SampleTybeDetailsWithTubes, error) {
	req := c.c.NewRequest(c.name, "SampleService.GetSampleTubeTypeInfoViaSampleEmunCode", in)
	out := new(SampleTybeDetailsWithTubes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) ListSampleMininumInfo(ctx context.Context, in *AccessionIdsList, opts ...client.CallOption) (*SampleListMininum, error) {
	req := c.c.NewRequest(c.name, "SampleService.ListSampleMininumInfo", in)
	out := new(SampleListMininum)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) GenerateSampleID(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*GenerateSampleIdResponse, error) {
	req := c.c.NewRequest(c.name, "SampleService.GenerateSampleID", in)
	out := new(GenerateSampleIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) GenerateBarcodeForSampleID(ctx context.Context, in *GenerateBarcodeForSampleIdRequest, opts ...client.CallOption) (*GenerateBarcodeForSampleIdResponse, error) {
	req := c.c.NewRequest(c.name, "SampleService.GenerateBarcodeForSampleID", in)
	out := new(GenerateBarcodeForSampleIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) New_SearchSamples(ctx context.Context, in *New_SearchSamplesRequest, opts ...client.CallOption) (*New_SearchSamplesResponse, error) {
	req := c.c.NewRequest(c.name, "SampleService.new_SearchSamples", in)
	out := new(New_SearchSamplesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) GetSampleEarilestCollectionAndReceiveTime(ctx context.Context, in *GetSampleEarilestCollectionAndReceiveTimeRequest, opts ...client.CallOption) (*GetSampleEarilestCollectionAndReceiveTimeResponse, error) {
	req := c.c.NewRequest(c.name, "SampleService.GetSampleEarilestCollectionAndReceiveTime", in)
	out := new(GetSampleEarilestCollectionAndReceiveTimeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) CheckSampleAttributes(ctx context.Context, in *CheckSamplesAttributesRequest, opts ...client.CallOption) (*CheckSamplesAttributesResponse, error) {
	req := c.c.NewRequest(c.name, "SampleService.CheckSampleAttributes", in)
	out := new(CheckSamplesAttributesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) BatchCheckSampleAttributes(ctx context.Context, in *BatchCheckSamplesAttributesRequest, opts ...client.CallOption) (*BatchCheckSamplesAttributesResponse, error) {
	req := c.c.NewRequest(c.name, "SampleService.BatchCheckSampleAttributes", in)
	out := new(BatchCheckSamplesAttributesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) New_BatchCheckSampleAttributes(ctx context.Context, in *New_BatchCheckSamplesAttributesRequest, opts ...client.CallOption) (*New_BatchCheckSamplesAttributesResponse, error) {
	req := c.c.NewRequest(c.name, "SampleService.new_BatchCheckSampleAttributes", in)
	out := new(New_BatchCheckSamplesAttributesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleService) FuzzySearchPhlebotomists(ctx context.Context, in *FuzzySearchPhlebotomistsRequest, opts ...client.CallOption) (*PhlebotomistsResponse, error) {
	req := c.c.NewRequest(c.name, "SampleService.FuzzySearchPhlebotomists", in)
	out := new(PhlebotomistsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SampleService service

type SampleServiceHandler interface {
	// rpc CreateSample(CreateSampleRequest) returns (samples){} deprecated
	ListSampleTests(context.Context, *SampleId, *SampleTestId) error
	ListSamples(context.Context, *IdList, *SampleList) error
	GetSampleTests(context.Context, *SampleIdList, *SampleTestList) error
	GetdailyCollectionSamples(context.Context, *SampleReceivedTime, *SampleCollectionList) error
	GetdailyCheckNonReceivedSamples(context.Context, *SampleReceivedTime, *Sample_NonReceivedList) error
	// New RPC method after version 0.7.2
	GetSampleTubes(context.Context, *SampleId, *Tubes) error
	GetSampleTubesCount(context.Context, *SampleId, *Sample_Tubes_Counts_Response) error
	GetMultiSampleTubesCount(context.Context, *SampleIdList, *GetMultiSampleTubesCountListResponse) error
	ListSamplesAccessionID(context.Context, *AccessionIdsList, *SampleList) error
	// TODO: implement this, after patient is in
	//
	//	rpc UpdatePatientBMI(PatientBMI) returns (samples){}
	//
	// New RPC method for PNS
	// TODO: implement this, after patient is in
	//
	//	rpc ListSamplePatient(sample_id_list) returns(ListSamplePatientResponse){}
	//
	// Received Sample Part, Compactable to the inventory service
	// rpc ReceiveSample(ReceiveSampleRequest) returns (ReceiveSampleResponse){}
	GetSampleReceiveRecords(context.Context, *GetSampleReceiveRecordsRequest, *GetSampleReceiveRecordsResponse) error
	GetSampleReceiveRecordsBatch(context.Context, *GetSampleReceiveRecordsRequestList, *GetSampleReceiveRecordsResponseMap) error
	ModifySampleReceiveRecord(context.Context, *ModifySampleReceiveRecordRequest, *ModifySampleReceiveRecordResponse) error
	// TODO: implement this after navigator notes is in
	//
	//	rpc GetSampleNavigatorNotes(GetSampleNavigatorNotesRequest) returns (GetSampleNavigatorNotesResponse){}
	//
	// TODO: implement this, need to figure out the schema here
	//
	//	rpc ListSamplePhlebotomistID(sample_id_list) returns (GetSamplePhlebotomistIDResponse){}
	ReceiveSampleTubes(context.Context, *ReceiveSampleTubesRequestStaging, *ReceiveSampleTubesResponse) error
	GetSampleTestsInstrument(context.Context, *SampleIdList, *SampleTestInstrumentList) error
	GetTubeSampleTypeInfoViaTubeTypeSymbol(context.Context, *GetSampleTypeTubeTypeRequest, *GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage) error
	GetSampleTubeTypeInfoViaSampleTypeCode(context.Context, *GetSampleTypeBySampleTypeCodeRequest, *SampleTybeDetailsWithTubes) error
	GetSampleTubeTypeInfoViaSampleEmunCode(context.Context, *GetSampleTypeBySampleTypeEmunRequest, *SampleTybeDetailsWithTubes) error
	// TODO: implement this after patient and customer is in
	//
	//	rpc GetSampleRelevantInfo(sample_id) returns (sampleReleventResponse){}
	ListSampleMininumInfo(context.Context, *AccessionIdsList, *SampleListMininum) error
	GenerateSampleID(context.Context, *EmptyRequest, *GenerateSampleIdResponse) error
	// TODO: save this one until generatesampleid is in and sorted
	GenerateBarcodeForSampleID(context.Context, *GenerateBarcodeForSampleIdRequest, *GenerateBarcodeForSampleIdResponse) error
	// TODO: save this one later
	//
	//	rpc SearchSamples(SearchSamplesRequest) returns (SearchSamplesResponse){}
	//
	// New version search sample(3/2024)
	New_SearchSamples(context.Context, *New_SearchSamplesRequest, *New_SearchSamplesResponse) error
	GetSampleEarilestCollectionAndReceiveTime(context.Context, *GetSampleEarilestCollectionAndReceiveTimeRequest, *GetSampleEarilestCollectionAndReceiveTimeResponse) error
	// check
	CheckSampleAttributes(context.Context, *CheckSamplesAttributesRequest, *CheckSamplesAttributesResponse) error
	BatchCheckSampleAttributes(context.Context, *BatchCheckSamplesAttributesRequest, *BatchCheckSamplesAttributesResponse) error
	New_BatchCheckSampleAttributes(context.Context, *New_BatchCheckSamplesAttributesRequest, *New_BatchCheckSamplesAttributesResponse) error
	// FuzzySearchPhlebotomists
	FuzzySearchPhlebotomists(context.Context, *FuzzySearchPhlebotomistsRequest, *PhlebotomistsResponse) error
}

func RegisterSampleServiceHandler(s server.Server, hdlr SampleServiceHandler, opts ...server.HandlerOption) error {
	type sampleService interface {
		ListSampleTests(ctx context.Context, in *SampleId, out *SampleTestId) error
		ListSamples(ctx context.Context, in *IdList, out *SampleList) error
		GetSampleTests(ctx context.Context, in *SampleIdList, out *SampleTestList) error
		GetdailyCollectionSamples(ctx context.Context, in *SampleReceivedTime, out *SampleCollectionList) error
		GetdailyCheckNonReceivedSamples(ctx context.Context, in *SampleReceivedTime, out *Sample_NonReceivedList) error
		GetSampleTubes(ctx context.Context, in *SampleId, out *Tubes) error
		GetSampleTubesCount(ctx context.Context, in *SampleId, out *Sample_Tubes_Counts_Response) error
		GetMultiSampleTubesCount(ctx context.Context, in *SampleIdList, out *GetMultiSampleTubesCountListResponse) error
		ListSamplesAccessionID(ctx context.Context, in *AccessionIdsList, out *SampleList) error
		GetSampleReceiveRecords(ctx context.Context, in *GetSampleReceiveRecordsRequest, out *GetSampleReceiveRecordsResponse) error
		GetSampleReceiveRecordsBatch(ctx context.Context, in *GetSampleReceiveRecordsRequestList, out *GetSampleReceiveRecordsResponseMap) error
		ModifySampleReceiveRecord(ctx context.Context, in *ModifySampleReceiveRecordRequest, out *ModifySampleReceiveRecordResponse) error
		ReceiveSampleTubes(ctx context.Context, in *ReceiveSampleTubesRequestStaging, out *ReceiveSampleTubesResponse) error
		GetSampleTestsInstrument(ctx context.Context, in *SampleIdList, out *SampleTestInstrumentList) error
		GetTubeSampleTypeInfoViaTubeTypeSymbol(ctx context.Context, in *GetSampleTypeTubeTypeRequest, out *GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage) error
		GetSampleTubeTypeInfoViaSampleTypeCode(ctx context.Context, in *GetSampleTypeBySampleTypeCodeRequest, out *SampleTybeDetailsWithTubes) error
		GetSampleTubeTypeInfoViaSampleEmunCode(ctx context.Context, in *GetSampleTypeBySampleTypeEmunRequest, out *SampleTybeDetailsWithTubes) error
		ListSampleMininumInfo(ctx context.Context, in *AccessionIdsList, out *SampleListMininum) error
		GenerateSampleID(ctx context.Context, in *EmptyRequest, out *GenerateSampleIdResponse) error
		GenerateBarcodeForSampleID(ctx context.Context, in *GenerateBarcodeForSampleIdRequest, out *GenerateBarcodeForSampleIdResponse) error
		New_SearchSamples(ctx context.Context, in *New_SearchSamplesRequest, out *New_SearchSamplesResponse) error
		GetSampleEarilestCollectionAndReceiveTime(ctx context.Context, in *GetSampleEarilestCollectionAndReceiveTimeRequest, out *GetSampleEarilestCollectionAndReceiveTimeResponse) error
		CheckSampleAttributes(ctx context.Context, in *CheckSamplesAttributesRequest, out *CheckSamplesAttributesResponse) error
		BatchCheckSampleAttributes(ctx context.Context, in *BatchCheckSamplesAttributesRequest, out *BatchCheckSamplesAttributesResponse) error
		New_BatchCheckSampleAttributes(ctx context.Context, in *New_BatchCheckSamplesAttributesRequest, out *New_BatchCheckSamplesAttributesResponse) error
		FuzzySearchPhlebotomists(ctx context.Context, in *FuzzySearchPhlebotomistsRequest, out *PhlebotomistsResponse) error
	}
	type SampleService struct {
		sampleService
	}
	h := &sampleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SampleService{h}, opts...))
}

type sampleServiceHandler struct {
	SampleServiceHandler
}

func (h *sampleServiceHandler) ListSampleTests(ctx context.Context, in *SampleId, out *SampleTestId) error {
	return h.SampleServiceHandler.ListSampleTests(ctx, in, out)
}

func (h *sampleServiceHandler) ListSamples(ctx context.Context, in *IdList, out *SampleList) error {
	return h.SampleServiceHandler.ListSamples(ctx, in, out)
}

func (h *sampleServiceHandler) GetSampleTests(ctx context.Context, in *SampleIdList, out *SampleTestList) error {
	return h.SampleServiceHandler.GetSampleTests(ctx, in, out)
}

func (h *sampleServiceHandler) GetdailyCollectionSamples(ctx context.Context, in *SampleReceivedTime, out *SampleCollectionList) error {
	return h.SampleServiceHandler.GetdailyCollectionSamples(ctx, in, out)
}

func (h *sampleServiceHandler) GetdailyCheckNonReceivedSamples(ctx context.Context, in *SampleReceivedTime, out *Sample_NonReceivedList) error {
	return h.SampleServiceHandler.GetdailyCheckNonReceivedSamples(ctx, in, out)
}

func (h *sampleServiceHandler) GetSampleTubes(ctx context.Context, in *SampleId, out *Tubes) error {
	return h.SampleServiceHandler.GetSampleTubes(ctx, in, out)
}

func (h *sampleServiceHandler) GetSampleTubesCount(ctx context.Context, in *SampleId, out *Sample_Tubes_Counts_Response) error {
	return h.SampleServiceHandler.GetSampleTubesCount(ctx, in, out)
}

func (h *sampleServiceHandler) GetMultiSampleTubesCount(ctx context.Context, in *SampleIdList, out *GetMultiSampleTubesCountListResponse) error {
	return h.SampleServiceHandler.GetMultiSampleTubesCount(ctx, in, out)
}

func (h *sampleServiceHandler) ListSamplesAccessionID(ctx context.Context, in *AccessionIdsList, out *SampleList) error {
	return h.SampleServiceHandler.ListSamplesAccessionID(ctx, in, out)
}

func (h *sampleServiceHandler) GetSampleReceiveRecords(ctx context.Context, in *GetSampleReceiveRecordsRequest, out *GetSampleReceiveRecordsResponse) error {
	return h.SampleServiceHandler.GetSampleReceiveRecords(ctx, in, out)
}

func (h *sampleServiceHandler) GetSampleReceiveRecordsBatch(ctx context.Context, in *GetSampleReceiveRecordsRequestList, out *GetSampleReceiveRecordsResponseMap) error {
	return h.SampleServiceHandler.GetSampleReceiveRecordsBatch(ctx, in, out)
}

func (h *sampleServiceHandler) ModifySampleReceiveRecord(ctx context.Context, in *ModifySampleReceiveRecordRequest, out *ModifySampleReceiveRecordResponse) error {
	return h.SampleServiceHandler.ModifySampleReceiveRecord(ctx, in, out)
}

func (h *sampleServiceHandler) ReceiveSampleTubes(ctx context.Context, in *ReceiveSampleTubesRequestStaging, out *ReceiveSampleTubesResponse) error {
	return h.SampleServiceHandler.ReceiveSampleTubes(ctx, in, out)
}

func (h *sampleServiceHandler) GetSampleTestsInstrument(ctx context.Context, in *SampleIdList, out *SampleTestInstrumentList) error {
	return h.SampleServiceHandler.GetSampleTestsInstrument(ctx, in, out)
}

func (h *sampleServiceHandler) GetTubeSampleTypeInfoViaTubeTypeSymbol(ctx context.Context, in *GetSampleTypeTubeTypeRequest, out *GetTubeSampleTypeInfoViaTubeTypeSymbolResponseMessage) error {
	return h.SampleServiceHandler.GetTubeSampleTypeInfoViaTubeTypeSymbol(ctx, in, out)
}

func (h *sampleServiceHandler) GetSampleTubeTypeInfoViaSampleTypeCode(ctx context.Context, in *GetSampleTypeBySampleTypeCodeRequest, out *SampleTybeDetailsWithTubes) error {
	return h.SampleServiceHandler.GetSampleTubeTypeInfoViaSampleTypeCode(ctx, in, out)
}

func (h *sampleServiceHandler) GetSampleTubeTypeInfoViaSampleEmunCode(ctx context.Context, in *GetSampleTypeBySampleTypeEmunRequest, out *SampleTybeDetailsWithTubes) error {
	return h.SampleServiceHandler.GetSampleTubeTypeInfoViaSampleEmunCode(ctx, in, out)
}

func (h *sampleServiceHandler) ListSampleMininumInfo(ctx context.Context, in *AccessionIdsList, out *SampleListMininum) error {
	return h.SampleServiceHandler.ListSampleMininumInfo(ctx, in, out)
}

func (h *sampleServiceHandler) GenerateSampleID(ctx context.Context, in *EmptyRequest, out *GenerateSampleIdResponse) error {
	return h.SampleServiceHandler.GenerateSampleID(ctx, in, out)
}

func (h *sampleServiceHandler) GenerateBarcodeForSampleID(ctx context.Context, in *GenerateBarcodeForSampleIdRequest, out *GenerateBarcodeForSampleIdResponse) error {
	return h.SampleServiceHandler.GenerateBarcodeForSampleID(ctx, in, out)
}

func (h *sampleServiceHandler) New_SearchSamples(ctx context.Context, in *New_SearchSamplesRequest, out *New_SearchSamplesResponse) error {
	return h.SampleServiceHandler.New_SearchSamples(ctx, in, out)
}

func (h *sampleServiceHandler) GetSampleEarilestCollectionAndReceiveTime(ctx context.Context, in *GetSampleEarilestCollectionAndReceiveTimeRequest, out *GetSampleEarilestCollectionAndReceiveTimeResponse) error {
	return h.SampleServiceHandler.GetSampleEarilestCollectionAndReceiveTime(ctx, in, out)
}

func (h *sampleServiceHandler) CheckSampleAttributes(ctx context.Context, in *CheckSamplesAttributesRequest, out *CheckSamplesAttributesResponse) error {
	return h.SampleServiceHandler.CheckSampleAttributes(ctx, in, out)
}

func (h *sampleServiceHandler) BatchCheckSampleAttributes(ctx context.Context, in *BatchCheckSamplesAttributesRequest, out *BatchCheckSamplesAttributesResponse) error {
	return h.SampleServiceHandler.BatchCheckSampleAttributes(ctx, in, out)
}

func (h *sampleServiceHandler) New_BatchCheckSampleAttributes(ctx context.Context, in *New_BatchCheckSamplesAttributesRequest, out *New_BatchCheckSamplesAttributesResponse) error {
	return h.SampleServiceHandler.New_BatchCheckSampleAttributes(ctx, in, out)
}

func (h *sampleServiceHandler) FuzzySearchPhlebotomists(ctx context.Context, in *FuzzySearchPhlebotomistsRequest, out *PhlebotomistsResponse) error {
	return h.SampleServiceHandler.FuzzySearchPhlebotomists(ctx, in, out)
}
