// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/user_service.proto

package coresamples_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_LogIn_FullMethodName                             = "/coresamples_service.UserService/LogIn"
	UserService_GetUserInfoByRole_FullMethodName                 = "/coresamples_service.UserService/GetUserInfoByRole"
	UserService_UpdatePasswordByOldPassword_FullMethodName       = "/coresamples_service.UserService/UpdatePasswordByOldPassword"
	UserService_TransferLISTokenToPortal_FullMethodName          = "/coresamples_service.UserService/TransferLISTokenToPortal"
	UserService_Send2FATokenRequest_FullMethodName               = "/coresamples_service.UserService/Send2FATokenRequest"
	UserService_ForgetPasswordRequest_FullMethodName             = "/coresamples_service.UserService/ForgetPasswordRequest"
	UserService_ForgetPassword_FullMethodName                    = "/coresamples_service.UserService/ForgetPassword"
	UserService_TransferCustomerClinic_FullMethodName            = "/coresamples_service.UserService/TransferCustomerClinic"
	UserService_SetUpEmailRequest_FullMethodName                 = "/coresamples_service.UserService/SetUpEmailRequest"
	UserService_VerifySetUpUserEmailLogIn_FullMethodName         = "/coresamples_service.UserService/VerifySetUpUserEmailLogIn"
	UserService_IsEmailUsedAsLoginId_FullMethodName              = "/coresamples_service.UserService/IsEmailUsedAsLoginId"
	UserService_InitialForgetPassword_FullMethodName             = "/coresamples_service.UserService/InitialForgetPassword"
	UserService_SendVerify2FASetUpContactInfo_FullMethodName     = "/coresamples_service.UserService/SendVerify2FASetUpContactInfo"
	UserService_Verify2FASetUpContactInfo_FullMethodName         = "/coresamples_service.UserService/Verify2FASetUpContactInfo"
	UserService_TurnOn2FASettingPage_FullMethodName              = "/coresamples_service.UserService/TurnOn2FASettingPage"
	UserService_Send2FAVerificationCode_FullMethodName           = "/coresamples_service.UserService/Send2FAVerificationCode"
	UserService_Verify2FAVerificationCode_FullMethodName         = "/coresamples_service.UserService/Verify2FAVerificationCode"
	UserService_TurnOff2FASettingPage_FullMethodName             = "/coresamples_service.UserService/TurnOff2FASettingPage"
	UserService_GetUserInformation_FullMethodName                = "/coresamples_service.UserService/GetUserInformation"
	UserService_GetUser2FAContactInfo_FullMethodName             = "/coresamples_service.UserService/GetUser2FAContactInfo"
	UserService_ChangeUserEmailLogInID_FullMethodName            = "/coresamples_service.UserService/ChangeUserEmailLogInID"
	UserService_AdminUserLoginSearch_FullMethodName              = "/coresamples_service.UserService/AdminUserLoginSearch"
	UserService_AdminLogin_FullMethodName                        = "/coresamples_service.UserService/AdminLogin"
	UserService_RenewToken_FullMethodName                        = "/coresamples_service.UserService/RenewToken"
	UserService_LISLogin_FullMethodName                          = "/coresamples_service.UserService/LISLogin"
	UserService_CreateUserLogInForInvitedCustomer_FullMethodName = "/coresamples_service.UserService/CreateUserLogInForInvitedCustomer"
	UserService_CheckWhetherEmailIsUsedAsLoginId_FullMethodName  = "/coresamples_service.UserService/CheckWhetherEmailIsUsedAsLoginId"
	UserService_CannySSO_FullMethodName                          = "/coresamples_service.UserService/CannySSO"
	UserService_ForceChangeLoginEmailInternal_FullMethodName     = "/coresamples_service.UserService/ForceChangeLoginEmailInternal"
	UserService_UpdateUserInvitationRecord_FullMethodName        = "/coresamples_service.UserService/UpdateUserInvitationRecord"
	UserService_GetLoginHistory_FullMethodName                   = "/coresamples_service.UserService/GetLoginHistory"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	LogIn(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInResponse, error)
	GetUserInfoByRole(ctx context.Context, in *GetUserInfoByRoleRequest, opts ...grpc.CallOption) (*GetUserInfoByRoleResponse, error)
	UpdatePasswordByOldPassword(ctx context.Context, in *UpdatePasswordByOldPasswordRequest, opts ...grpc.CallOption) (*UpdateUserPasswordResponse, error)
	TransferLISTokenToPortal(ctx context.Context, in *TransferLISTokenToPortalRequest, opts ...grpc.CallOption) (*TransferLISTokenToPortalResponse, error)
	// 2FA
	Send2FATokenRequest(ctx context.Context, in *Send2FATokenRequestMessage, opts ...grpc.CallOption) (*Send2FATokenResponse, error)
	// ForgetPassword
	ForgetPasswordRequest(ctx context.Context, in *ForgetPasswordRequestRequest, opts ...grpc.CallOption) (*ForgetPasswordRequestResponse, error)
	ForgetPassword(ctx context.Context, in *ForgetPasswordRequestMessage, opts ...grpc.CallOption) (*ForgetPasswordVerifyResponse, error)
	TransferCustomerClinic(ctx context.Context, in *TransferCustomerClinicRequest, opts ...grpc.CallOption) (*TransferCustomerClinicResponse, error)
	SetUpEmailRequest(ctx context.Context, in *SetUpLoginEmailRequestRequest, opts ...grpc.CallOption) (*SetUpLoginEmailRequestResponse, error)
	VerifySetUpUserEmailLogIn(ctx context.Context, in *VerifySetUpUserEmailLogInRequest, opts ...grpc.CallOption) (*VerifySetUpUserEmailLogInResponse, error)
	IsEmailUsedAsLoginId(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*IsEmailUsedAsLoginIdResponse, error)
	InitialForgetPassword(ctx context.Context, in *InitialForgetPasswordRequest, opts ...grpc.CallOption) (*ForgetPasswordResponse, error)
	// Setting Page Enable 2FA
	SendVerify2FASetUpContactInfo(ctx context.Context, in *SendVerify2FASetUpContactInfoRequest, opts ...grpc.CallOption) (*SendVerify2FASetUpContactInfoResponse, error)
	Verify2FASetUpContactInfo(ctx context.Context, in *Verify2FASetUpContactRequest, opts ...grpc.CallOption) (*Verify2FASetUpContactResponse, error)
	TurnOn2FASettingPage(ctx context.Context, in *TurnOn2FASettingPageRequest, opts ...grpc.CallOption) (*TurnOn2FASettingPageResponse, error)
	Send2FAVerificationCode(ctx context.Context, in *Send2FAVerificationCodeRequest, opts ...grpc.CallOption) (*Send2FAVerificationCodeResponse, error)
	Verify2FAVerificationCode(ctx context.Context, in *Verify2FAVerificationCodeRequest, opts ...grpc.CallOption) (*Verify2FAVerificationResponse, error)
	TurnOff2FASettingPage(ctx context.Context, in *TurnOff2FASettingPageRequest, opts ...grpc.CallOption) (*TurnOff2FASettingPageResponse, error)
	GetUserInformation(ctx context.Context, in *GetUserInformationRequest, opts ...grpc.CallOption) (*GetUserInformationResponse, error)
	GetUser2FAContactInfo(ctx context.Context, in *GetUser2FAContactInfoRequest, opts ...grpc.CallOption) (*GetUser2FAContactInfoResponse, error)
	// Change Email
	ChangeUserEmailLogInID(ctx context.Context, in *UserChangeEmailRequest, opts ...grpc.CallOption) (*UserChangeEmailResponse, error)
	AdminUserLoginSearch(ctx context.Context, in *AdminLoginSearchRequest, opts ...grpc.CallOption) (*AdminLoginSearchResponse, error)
	AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error)
	RenewToken(ctx context.Context, in *RenewTokenRequest, opts ...grpc.CallOption) (*RenewTokenResponse, error)
	LISLogin(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInResponse, error)
	CreateUserLogInForInvitedCustomer(ctx context.Context, in *CreateUserLogForInvitedCustomerRequest, opts ...grpc.CallOption) (*CreateUserLogForInvitedCustomerResponse, error)
	CheckWhetherEmailIsUsedAsLoginId(ctx context.Context, in *CheckWhetherEmailIsUsedAsLoginIdRequest, opts ...grpc.CallOption) (*CheckWhetherEmailIsUsedAsLoginIdResponse, error)
	CannySSO(ctx context.Context, in *CannySSORequest, opts ...grpc.CallOption) (*CannySSOResponse, error)
	ForceChangeLoginEmailInternal(ctx context.Context, in *ForceChangeLoginEmailInternalRequest, opts ...grpc.CallOption) (*ForceChangeLoginEmailInternalResponse, error)
	UpdateUserInvitationRecord(ctx context.Context, in *UpdateUserInvitationRecordRequest, opts ...grpc.CallOption) (*UpdateUserInvitationRecordResponse, error)
	GetLoginHistory(ctx context.Context, in *GetLoginHistoryRequest, opts ...grpc.CallOption) (*GetLoginHistoryResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) LogIn(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInResponse, error) {
	out := new(LogInResponse)
	err := c.cc.Invoke(ctx, UserService_LogIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfoByRole(ctx context.Context, in *GetUserInfoByRoleRequest, opts ...grpc.CallOption) (*GetUserInfoByRoleResponse, error) {
	out := new(GetUserInfoByRoleResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserInfoByRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdatePasswordByOldPassword(ctx context.Context, in *UpdatePasswordByOldPasswordRequest, opts ...grpc.CallOption) (*UpdateUserPasswordResponse, error) {
	out := new(UpdateUserPasswordResponse)
	err := c.cc.Invoke(ctx, UserService_UpdatePasswordByOldPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) TransferLISTokenToPortal(ctx context.Context, in *TransferLISTokenToPortalRequest, opts ...grpc.CallOption) (*TransferLISTokenToPortalResponse, error) {
	out := new(TransferLISTokenToPortalResponse)
	err := c.cc.Invoke(ctx, UserService_TransferLISTokenToPortal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Send2FATokenRequest(ctx context.Context, in *Send2FATokenRequestMessage, opts ...grpc.CallOption) (*Send2FATokenResponse, error) {
	out := new(Send2FATokenResponse)
	err := c.cc.Invoke(ctx, UserService_Send2FATokenRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ForgetPasswordRequest(ctx context.Context, in *ForgetPasswordRequestRequest, opts ...grpc.CallOption) (*ForgetPasswordRequestResponse, error) {
	out := new(ForgetPasswordRequestResponse)
	err := c.cc.Invoke(ctx, UserService_ForgetPasswordRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ForgetPassword(ctx context.Context, in *ForgetPasswordRequestMessage, opts ...grpc.CallOption) (*ForgetPasswordVerifyResponse, error) {
	out := new(ForgetPasswordVerifyResponse)
	err := c.cc.Invoke(ctx, UserService_ForgetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) TransferCustomerClinic(ctx context.Context, in *TransferCustomerClinicRequest, opts ...grpc.CallOption) (*TransferCustomerClinicResponse, error) {
	out := new(TransferCustomerClinicResponse)
	err := c.cc.Invoke(ctx, UserService_TransferCustomerClinic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetUpEmailRequest(ctx context.Context, in *SetUpLoginEmailRequestRequest, opts ...grpc.CallOption) (*SetUpLoginEmailRequestResponse, error) {
	out := new(SetUpLoginEmailRequestResponse)
	err := c.cc.Invoke(ctx, UserService_SetUpEmailRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifySetUpUserEmailLogIn(ctx context.Context, in *VerifySetUpUserEmailLogInRequest, opts ...grpc.CallOption) (*VerifySetUpUserEmailLogInResponse, error) {
	out := new(VerifySetUpUserEmailLogInResponse)
	err := c.cc.Invoke(ctx, UserService_VerifySetUpUserEmailLogIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) IsEmailUsedAsLoginId(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*IsEmailUsedAsLoginIdResponse, error) {
	out := new(IsEmailUsedAsLoginIdResponse)
	err := c.cc.Invoke(ctx, UserService_IsEmailUsedAsLoginId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) InitialForgetPassword(ctx context.Context, in *InitialForgetPasswordRequest, opts ...grpc.CallOption) (*ForgetPasswordResponse, error) {
	out := new(ForgetPasswordResponse)
	err := c.cc.Invoke(ctx, UserService_InitialForgetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendVerify2FASetUpContactInfo(ctx context.Context, in *SendVerify2FASetUpContactInfoRequest, opts ...grpc.CallOption) (*SendVerify2FASetUpContactInfoResponse, error) {
	out := new(SendVerify2FASetUpContactInfoResponse)
	err := c.cc.Invoke(ctx, UserService_SendVerify2FASetUpContactInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Verify2FASetUpContactInfo(ctx context.Context, in *Verify2FASetUpContactRequest, opts ...grpc.CallOption) (*Verify2FASetUpContactResponse, error) {
	out := new(Verify2FASetUpContactResponse)
	err := c.cc.Invoke(ctx, UserService_Verify2FASetUpContactInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) TurnOn2FASettingPage(ctx context.Context, in *TurnOn2FASettingPageRequest, opts ...grpc.CallOption) (*TurnOn2FASettingPageResponse, error) {
	out := new(TurnOn2FASettingPageResponse)
	err := c.cc.Invoke(ctx, UserService_TurnOn2FASettingPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Send2FAVerificationCode(ctx context.Context, in *Send2FAVerificationCodeRequest, opts ...grpc.CallOption) (*Send2FAVerificationCodeResponse, error) {
	out := new(Send2FAVerificationCodeResponse)
	err := c.cc.Invoke(ctx, UserService_Send2FAVerificationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Verify2FAVerificationCode(ctx context.Context, in *Verify2FAVerificationCodeRequest, opts ...grpc.CallOption) (*Verify2FAVerificationResponse, error) {
	out := new(Verify2FAVerificationResponse)
	err := c.cc.Invoke(ctx, UserService_Verify2FAVerificationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) TurnOff2FASettingPage(ctx context.Context, in *TurnOff2FASettingPageRequest, opts ...grpc.CallOption) (*TurnOff2FASettingPageResponse, error) {
	out := new(TurnOff2FASettingPageResponse)
	err := c.cc.Invoke(ctx, UserService_TurnOff2FASettingPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInformation(ctx context.Context, in *GetUserInformationRequest, opts ...grpc.CallOption) (*GetUserInformationResponse, error) {
	out := new(GetUserInformationResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser2FAContactInfo(ctx context.Context, in *GetUser2FAContactInfoRequest, opts ...grpc.CallOption) (*GetUser2FAContactInfoResponse, error) {
	out := new(GetUser2FAContactInfoResponse)
	err := c.cc.Invoke(ctx, UserService_GetUser2FAContactInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserEmailLogInID(ctx context.Context, in *UserChangeEmailRequest, opts ...grpc.CallOption) (*UserChangeEmailResponse, error) {
	out := new(UserChangeEmailResponse)
	err := c.cc.Invoke(ctx, UserService_ChangeUserEmailLogInID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminUserLoginSearch(ctx context.Context, in *AdminLoginSearchRequest, opts ...grpc.CallOption) (*AdminLoginSearchResponse, error) {
	out := new(AdminLoginSearchResponse)
	err := c.cc.Invoke(ctx, UserService_AdminUserLoginSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error) {
	out := new(AdminLoginResponse)
	err := c.cc.Invoke(ctx, UserService_AdminLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RenewToken(ctx context.Context, in *RenewTokenRequest, opts ...grpc.CallOption) (*RenewTokenResponse, error) {
	out := new(RenewTokenResponse)
	err := c.cc.Invoke(ctx, UserService_RenewToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LISLogin(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInResponse, error) {
	out := new(LogInResponse)
	err := c.cc.Invoke(ctx, UserService_LISLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUserLogInForInvitedCustomer(ctx context.Context, in *CreateUserLogForInvitedCustomerRequest, opts ...grpc.CallOption) (*CreateUserLogForInvitedCustomerResponse, error) {
	out := new(CreateUserLogForInvitedCustomerResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUserLogInForInvitedCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckWhetherEmailIsUsedAsLoginId(ctx context.Context, in *CheckWhetherEmailIsUsedAsLoginIdRequest, opts ...grpc.CallOption) (*CheckWhetherEmailIsUsedAsLoginIdResponse, error) {
	out := new(CheckWhetherEmailIsUsedAsLoginIdResponse)
	err := c.cc.Invoke(ctx, UserService_CheckWhetherEmailIsUsedAsLoginId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CannySSO(ctx context.Context, in *CannySSORequest, opts ...grpc.CallOption) (*CannySSOResponse, error) {
	out := new(CannySSOResponse)
	err := c.cc.Invoke(ctx, UserService_CannySSO_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ForceChangeLoginEmailInternal(ctx context.Context, in *ForceChangeLoginEmailInternalRequest, opts ...grpc.CallOption) (*ForceChangeLoginEmailInternalResponse, error) {
	out := new(ForceChangeLoginEmailInternalResponse)
	err := c.cc.Invoke(ctx, UserService_ForceChangeLoginEmailInternal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserInvitationRecord(ctx context.Context, in *UpdateUserInvitationRecordRequest, opts ...grpc.CallOption) (*UpdateUserInvitationRecordResponse, error) {
	out := new(UpdateUserInvitationRecordResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserInvitationRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetLoginHistory(ctx context.Context, in *GetLoginHistoryRequest, opts ...grpc.CallOption) (*GetLoginHistoryResponse, error) {
	out := new(GetLoginHistoryResponse)
	err := c.cc.Invoke(ctx, UserService_GetLoginHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	LogIn(context.Context, *LogInRequest) (*LogInResponse, error)
	GetUserInfoByRole(context.Context, *GetUserInfoByRoleRequest) (*GetUserInfoByRoleResponse, error)
	UpdatePasswordByOldPassword(context.Context, *UpdatePasswordByOldPasswordRequest) (*UpdateUserPasswordResponse, error)
	TransferLISTokenToPortal(context.Context, *TransferLISTokenToPortalRequest) (*TransferLISTokenToPortalResponse, error)
	// 2FA
	Send2FATokenRequest(context.Context, *Send2FATokenRequestMessage) (*Send2FATokenResponse, error)
	// ForgetPassword
	ForgetPasswordRequest(context.Context, *ForgetPasswordRequestRequest) (*ForgetPasswordRequestResponse, error)
	ForgetPassword(context.Context, *ForgetPasswordRequestMessage) (*ForgetPasswordVerifyResponse, error)
	TransferCustomerClinic(context.Context, *TransferCustomerClinicRequest) (*TransferCustomerClinicResponse, error)
	SetUpEmailRequest(context.Context, *SetUpLoginEmailRequestRequest) (*SetUpLoginEmailRequestResponse, error)
	VerifySetUpUserEmailLogIn(context.Context, *VerifySetUpUserEmailLogInRequest) (*VerifySetUpUserEmailLogInResponse, error)
	IsEmailUsedAsLoginId(context.Context, *EmailRequest) (*IsEmailUsedAsLoginIdResponse, error)
	InitialForgetPassword(context.Context, *InitialForgetPasswordRequest) (*ForgetPasswordResponse, error)
	// Setting Page Enable 2FA
	SendVerify2FASetUpContactInfo(context.Context, *SendVerify2FASetUpContactInfoRequest) (*SendVerify2FASetUpContactInfoResponse, error)
	Verify2FASetUpContactInfo(context.Context, *Verify2FASetUpContactRequest) (*Verify2FASetUpContactResponse, error)
	TurnOn2FASettingPage(context.Context, *TurnOn2FASettingPageRequest) (*TurnOn2FASettingPageResponse, error)
	Send2FAVerificationCode(context.Context, *Send2FAVerificationCodeRequest) (*Send2FAVerificationCodeResponse, error)
	Verify2FAVerificationCode(context.Context, *Verify2FAVerificationCodeRequest) (*Verify2FAVerificationResponse, error)
	TurnOff2FASettingPage(context.Context, *TurnOff2FASettingPageRequest) (*TurnOff2FASettingPageResponse, error)
	GetUserInformation(context.Context, *GetUserInformationRequest) (*GetUserInformationResponse, error)
	GetUser2FAContactInfo(context.Context, *GetUser2FAContactInfoRequest) (*GetUser2FAContactInfoResponse, error)
	// Change Email
	ChangeUserEmailLogInID(context.Context, *UserChangeEmailRequest) (*UserChangeEmailResponse, error)
	AdminUserLoginSearch(context.Context, *AdminLoginSearchRequest) (*AdminLoginSearchResponse, error)
	AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error)
	RenewToken(context.Context, *RenewTokenRequest) (*RenewTokenResponse, error)
	LISLogin(context.Context, *LogInRequest) (*LogInResponse, error)
	CreateUserLogInForInvitedCustomer(context.Context, *CreateUserLogForInvitedCustomerRequest) (*CreateUserLogForInvitedCustomerResponse, error)
	CheckWhetherEmailIsUsedAsLoginId(context.Context, *CheckWhetherEmailIsUsedAsLoginIdRequest) (*CheckWhetherEmailIsUsedAsLoginIdResponse, error)
	CannySSO(context.Context, *CannySSORequest) (*CannySSOResponse, error)
	ForceChangeLoginEmailInternal(context.Context, *ForceChangeLoginEmailInternalRequest) (*ForceChangeLoginEmailInternalResponse, error)
	UpdateUserInvitationRecord(context.Context, *UpdateUserInvitationRecordRequest) (*UpdateUserInvitationRecordResponse, error)
	GetLoginHistory(context.Context, *GetLoginHistoryRequest) (*GetLoginHistoryResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) LogIn(context.Context, *LogInRequest) (*LogInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogIn not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfoByRole(context.Context, *GetUserInfoByRoleRequest) (*GetUserInfoByRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByRole not implemented")
}
func (UnimplementedUserServiceServer) UpdatePasswordByOldPassword(context.Context, *UpdatePasswordByOldPasswordRequest) (*UpdateUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswordByOldPassword not implemented")
}
func (UnimplementedUserServiceServer) TransferLISTokenToPortal(context.Context, *TransferLISTokenToPortalRequest) (*TransferLISTokenToPortalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferLISTokenToPortal not implemented")
}
func (UnimplementedUserServiceServer) Send2FATokenRequest(context.Context, *Send2FATokenRequestMessage) (*Send2FATokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send2FATokenRequest not implemented")
}
func (UnimplementedUserServiceServer) ForgetPasswordRequest(context.Context, *ForgetPasswordRequestRequest) (*ForgetPasswordRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetPasswordRequest not implemented")
}
func (UnimplementedUserServiceServer) ForgetPassword(context.Context, *ForgetPasswordRequestMessage) (*ForgetPasswordVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetPassword not implemented")
}
func (UnimplementedUserServiceServer) TransferCustomerClinic(context.Context, *TransferCustomerClinicRequest) (*TransferCustomerClinicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferCustomerClinic not implemented")
}
func (UnimplementedUserServiceServer) SetUpEmailRequest(context.Context, *SetUpLoginEmailRequestRequest) (*SetUpLoginEmailRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUpEmailRequest not implemented")
}
func (UnimplementedUserServiceServer) VerifySetUpUserEmailLogIn(context.Context, *VerifySetUpUserEmailLogInRequest) (*VerifySetUpUserEmailLogInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySetUpUserEmailLogIn not implemented")
}
func (UnimplementedUserServiceServer) IsEmailUsedAsLoginId(context.Context, *EmailRequest) (*IsEmailUsedAsLoginIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEmailUsedAsLoginId not implemented")
}
func (UnimplementedUserServiceServer) InitialForgetPassword(context.Context, *InitialForgetPasswordRequest) (*ForgetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitialForgetPassword not implemented")
}
func (UnimplementedUserServiceServer) SendVerify2FASetUpContactInfo(context.Context, *SendVerify2FASetUpContactInfoRequest) (*SendVerify2FASetUpContactInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerify2FASetUpContactInfo not implemented")
}
func (UnimplementedUserServiceServer) Verify2FASetUpContactInfo(context.Context, *Verify2FASetUpContactRequest) (*Verify2FASetUpContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify2FASetUpContactInfo not implemented")
}
func (UnimplementedUserServiceServer) TurnOn2FASettingPage(context.Context, *TurnOn2FASettingPageRequest) (*TurnOn2FASettingPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurnOn2FASettingPage not implemented")
}
func (UnimplementedUserServiceServer) Send2FAVerificationCode(context.Context, *Send2FAVerificationCodeRequest) (*Send2FAVerificationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send2FAVerificationCode not implemented")
}
func (UnimplementedUserServiceServer) Verify2FAVerificationCode(context.Context, *Verify2FAVerificationCodeRequest) (*Verify2FAVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify2FAVerificationCode not implemented")
}
func (UnimplementedUserServiceServer) TurnOff2FASettingPage(context.Context, *TurnOff2FASettingPageRequest) (*TurnOff2FASettingPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurnOff2FASettingPage not implemented")
}
func (UnimplementedUserServiceServer) GetUserInformation(context.Context, *GetUserInformationRequest) (*GetUserInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInformation not implemented")
}
func (UnimplementedUserServiceServer) GetUser2FAContactInfo(context.Context, *GetUser2FAContactInfoRequest) (*GetUser2FAContactInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser2FAContactInfo not implemented")
}
func (UnimplementedUserServiceServer) ChangeUserEmailLogInID(context.Context, *UserChangeEmailRequest) (*UserChangeEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserEmailLogInID not implemented")
}
func (UnimplementedUserServiceServer) AdminUserLoginSearch(context.Context, *AdminLoginSearchRequest) (*AdminLoginSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUserLoginSearch not implemented")
}
func (UnimplementedUserServiceServer) AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedUserServiceServer) RenewToken(context.Context, *RenewTokenRequest) (*RenewTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewToken not implemented")
}
func (UnimplementedUserServiceServer) LISLogin(context.Context, *LogInRequest) (*LogInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LISLogin not implemented")
}
func (UnimplementedUserServiceServer) CreateUserLogInForInvitedCustomer(context.Context, *CreateUserLogForInvitedCustomerRequest) (*CreateUserLogForInvitedCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserLogInForInvitedCustomer not implemented")
}
func (UnimplementedUserServiceServer) CheckWhetherEmailIsUsedAsLoginId(context.Context, *CheckWhetherEmailIsUsedAsLoginIdRequest) (*CheckWhetherEmailIsUsedAsLoginIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckWhetherEmailIsUsedAsLoginId not implemented")
}
func (UnimplementedUserServiceServer) CannySSO(context.Context, *CannySSORequest) (*CannySSOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CannySSO not implemented")
}
func (UnimplementedUserServiceServer) ForceChangeLoginEmailInternal(context.Context, *ForceChangeLoginEmailInternalRequest) (*ForceChangeLoginEmailInternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceChangeLoginEmailInternal not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserInvitationRecord(context.Context, *UpdateUserInvitationRecordRequest) (*UpdateUserInvitationRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInvitationRecord not implemented")
}
func (UnimplementedUserServiceServer) GetLoginHistory(context.Context, *GetLoginHistoryRequest) (*GetLoginHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginHistory not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_LogIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LogIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LogIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LogIn(ctx, req.(*LogInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfoByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfoByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserInfoByRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfoByRole(ctx, req.(*GetUserInfoByRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdatePasswordByOldPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordByOldPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdatePasswordByOldPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdatePasswordByOldPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdatePasswordByOldPassword(ctx, req.(*UpdatePasswordByOldPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_TransferLISTokenToPortal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferLISTokenToPortalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).TransferLISTokenToPortal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_TransferLISTokenToPortal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).TransferLISTokenToPortal(ctx, req.(*TransferLISTokenToPortalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Send2FATokenRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Send2FATokenRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Send2FATokenRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Send2FATokenRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Send2FATokenRequest(ctx, req.(*Send2FATokenRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ForgetPasswordRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetPasswordRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ForgetPasswordRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ForgetPasswordRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ForgetPasswordRequest(ctx, req.(*ForgetPasswordRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ForgetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetPasswordRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ForgetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ForgetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ForgetPassword(ctx, req.(*ForgetPasswordRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_TransferCustomerClinic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferCustomerClinicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).TransferCustomerClinic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_TransferCustomerClinic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).TransferCustomerClinic(ctx, req.(*TransferCustomerClinicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetUpEmailRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUpLoginEmailRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetUpEmailRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SetUpEmailRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetUpEmailRequest(ctx, req.(*SetUpLoginEmailRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifySetUpUserEmailLogIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySetUpUserEmailLogInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifySetUpUserEmailLogIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifySetUpUserEmailLogIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifySetUpUserEmailLogIn(ctx, req.(*VerifySetUpUserEmailLogInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_IsEmailUsedAsLoginId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).IsEmailUsedAsLoginId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_IsEmailUsedAsLoginId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).IsEmailUsedAsLoginId(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_InitialForgetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitialForgetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).InitialForgetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_InitialForgetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).InitialForgetPassword(ctx, req.(*InitialForgetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendVerify2FASetUpContactInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerify2FASetUpContactInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendVerify2FASetUpContactInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SendVerify2FASetUpContactInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendVerify2FASetUpContactInfo(ctx, req.(*SendVerify2FASetUpContactInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Verify2FASetUpContactInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Verify2FASetUpContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Verify2FASetUpContactInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Verify2FASetUpContactInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Verify2FASetUpContactInfo(ctx, req.(*Verify2FASetUpContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_TurnOn2FASettingPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurnOn2FASettingPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).TurnOn2FASettingPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_TurnOn2FASettingPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).TurnOn2FASettingPage(ctx, req.(*TurnOn2FASettingPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Send2FAVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Send2FAVerificationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Send2FAVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Send2FAVerificationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Send2FAVerificationCode(ctx, req.(*Send2FAVerificationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Verify2FAVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Verify2FAVerificationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Verify2FAVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Verify2FAVerificationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Verify2FAVerificationCode(ctx, req.(*Verify2FAVerificationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_TurnOff2FASettingPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurnOff2FASettingPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).TurnOff2FASettingPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_TurnOff2FASettingPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).TurnOff2FASettingPage(ctx, req.(*TurnOff2FASettingPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInformation(ctx, req.(*GetUserInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser2FAContactInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUser2FAContactInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser2FAContactInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser2FAContactInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser2FAContactInfo(ctx, req.(*GetUser2FAContactInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserEmailLogInID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChangeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserEmailLogInID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeUserEmailLogInID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserEmailLogInID(ctx, req.(*UserChangeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminUserLoginSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminUserLoginSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AdminUserLoginSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminUserLoginSearch(ctx, req.(*AdminLoginSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminLogin(ctx, req.(*AdminLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RenewToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RenewToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RenewToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RenewToken(ctx, req.(*RenewTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LISLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LISLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LISLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LISLogin(ctx, req.(*LogInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUserLogInForInvitedCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserLogForInvitedCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUserLogInForInvitedCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUserLogInForInvitedCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUserLogInForInvitedCustomer(ctx, req.(*CreateUserLogForInvitedCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckWhetherEmailIsUsedAsLoginId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckWhetherEmailIsUsedAsLoginIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckWhetherEmailIsUsedAsLoginId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CheckWhetherEmailIsUsedAsLoginId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckWhetherEmailIsUsedAsLoginId(ctx, req.(*CheckWhetherEmailIsUsedAsLoginIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CannySSO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CannySSORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CannySSO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CannySSO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CannySSO(ctx, req.(*CannySSORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ForceChangeLoginEmailInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceChangeLoginEmailInternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ForceChangeLoginEmailInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ForceChangeLoginEmailInternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ForceChangeLoginEmailInternal(ctx, req.(*ForceChangeLoginEmailInternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserInvitationRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInvitationRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserInvitationRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserInvitationRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserInvitationRecord(ctx, req.(*UpdateUserInvitationRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetLoginHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetLoginHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetLoginHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetLoginHistory(ctx, req.(*GetLoginHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coresamples_service.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogIn",
			Handler:    _UserService_LogIn_Handler,
		},
		{
			MethodName: "GetUserInfoByRole",
			Handler:    _UserService_GetUserInfoByRole_Handler,
		},
		{
			MethodName: "UpdatePasswordByOldPassword",
			Handler:    _UserService_UpdatePasswordByOldPassword_Handler,
		},
		{
			MethodName: "TransferLISTokenToPortal",
			Handler:    _UserService_TransferLISTokenToPortal_Handler,
		},
		{
			MethodName: "Send2FATokenRequest",
			Handler:    _UserService_Send2FATokenRequest_Handler,
		},
		{
			MethodName: "ForgetPasswordRequest",
			Handler:    _UserService_ForgetPasswordRequest_Handler,
		},
		{
			MethodName: "ForgetPassword",
			Handler:    _UserService_ForgetPassword_Handler,
		},
		{
			MethodName: "TransferCustomerClinic",
			Handler:    _UserService_TransferCustomerClinic_Handler,
		},
		{
			MethodName: "SetUpEmailRequest",
			Handler:    _UserService_SetUpEmailRequest_Handler,
		},
		{
			MethodName: "VerifySetUpUserEmailLogIn",
			Handler:    _UserService_VerifySetUpUserEmailLogIn_Handler,
		},
		{
			MethodName: "IsEmailUsedAsLoginId",
			Handler:    _UserService_IsEmailUsedAsLoginId_Handler,
		},
		{
			MethodName: "InitialForgetPassword",
			Handler:    _UserService_InitialForgetPassword_Handler,
		},
		{
			MethodName: "SendVerify2FASetUpContactInfo",
			Handler:    _UserService_SendVerify2FASetUpContactInfo_Handler,
		},
		{
			MethodName: "Verify2FASetUpContactInfo",
			Handler:    _UserService_Verify2FASetUpContactInfo_Handler,
		},
		{
			MethodName: "TurnOn2FASettingPage",
			Handler:    _UserService_TurnOn2FASettingPage_Handler,
		},
		{
			MethodName: "Send2FAVerificationCode",
			Handler:    _UserService_Send2FAVerificationCode_Handler,
		},
		{
			MethodName: "Verify2FAVerificationCode",
			Handler:    _UserService_Verify2FAVerificationCode_Handler,
		},
		{
			MethodName: "TurnOff2FASettingPage",
			Handler:    _UserService_TurnOff2FASettingPage_Handler,
		},
		{
			MethodName: "GetUserInformation",
			Handler:    _UserService_GetUserInformation_Handler,
		},
		{
			MethodName: "GetUser2FAContactInfo",
			Handler:    _UserService_GetUser2FAContactInfo_Handler,
		},
		{
			MethodName: "ChangeUserEmailLogInID",
			Handler:    _UserService_ChangeUserEmailLogInID_Handler,
		},
		{
			MethodName: "AdminUserLoginSearch",
			Handler:    _UserService_AdminUserLoginSearch_Handler,
		},
		{
			MethodName: "AdminLogin",
			Handler:    _UserService_AdminLogin_Handler,
		},
		{
			MethodName: "RenewToken",
			Handler:    _UserService_RenewToken_Handler,
		},
		{
			MethodName: "LISLogin",
			Handler:    _UserService_LISLogin_Handler,
		},
		{
			MethodName: "CreateUserLogInForInvitedCustomer",
			Handler:    _UserService_CreateUserLogInForInvitedCustomer_Handler,
		},
		{
			MethodName: "CheckWhetherEmailIsUsedAsLoginId",
			Handler:    _UserService_CheckWhetherEmailIsUsedAsLoginId_Handler,
		},
		{
			MethodName: "CannySSO",
			Handler:    _UserService_CannySSO_Handler,
		},
		{
			MethodName: "ForceChangeLoginEmailInternal",
			Handler:    _UserService_ForceChangeLoginEmailInternal_Handler,
		},
		{
			MethodName: "UpdateUserInvitationRecord",
			Handler:    _UserService_UpdateUserInvitationRecord_Handler,
		},
		{
			MethodName: "GetLoginHistory",
			Handler:    _UserService_GetLoginHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_service.proto",
}
