// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/sample"
	"coresamples/ent/tube"
	"coresamples/ent/tubetype"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TubeUpdate is the builder for updating Tube entities.
type TubeUpdate struct {
	config
	hooks    []Hook
	mutation *TubeMutation
}

// Where appends a list predicates to the TubeUpdate builder.
func (tu *TubeUpdate) Where(ps ...predicate.Tube) *TubeUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTubeID sets the "tube_id" field.
func (tu *TubeUpdate) SetTubeID(s string) *TubeUpdate {
	tu.mutation.SetTubeID(s)
	return tu
}

// SetNillableTubeID sets the "tube_id" field if the given value is not nil.
func (tu *TubeUpdate) SetNillableTubeID(s *string) *TubeUpdate {
	if s != nil {
		tu.SetTubeID(*s)
	}
	return tu
}

// SetSampleID sets the "sample_id" field.
func (tu *TubeUpdate) SetSampleID(i int) *TubeUpdate {
	tu.mutation.SetSampleID(i)
	return tu
}

// SetNillableSampleID sets the "sample_id" field if the given value is not nil.
func (tu *TubeUpdate) SetNillableSampleID(i *int) *TubeUpdate {
	if i != nil {
		tu.SetSampleID(*i)
	}
	return tu
}

// SetTubeStorage sets the "tube_storage" field.
func (tu *TubeUpdate) SetTubeStorage(s string) *TubeUpdate {
	tu.mutation.SetTubeStorage(s)
	return tu
}

// SetNillableTubeStorage sets the "tube_storage" field if the given value is not nil.
func (tu *TubeUpdate) SetNillableTubeStorage(s *string) *TubeUpdate {
	if s != nil {
		tu.SetTubeStorage(*s)
	}
	return tu
}

// SetTubeReceiveTime sets the "tube_receive_time" field.
func (tu *TubeUpdate) SetTubeReceiveTime(t time.Time) *TubeUpdate {
	tu.mutation.SetTubeReceiveTime(t)
	return tu
}

// SetNillableTubeReceiveTime sets the "tube_receive_time" field if the given value is not nil.
func (tu *TubeUpdate) SetNillableTubeReceiveTime(t *time.Time) *TubeUpdate {
	if t != nil {
		tu.SetTubeReceiveTime(*t)
	}
	return tu
}

// SetTubeTurnaroundTime sets the "tube_turnaround_time" field.
func (tu *TubeUpdate) SetTubeTurnaroundTime(i int) *TubeUpdate {
	tu.mutation.ResetTubeTurnaroundTime()
	tu.mutation.SetTubeTurnaroundTime(i)
	return tu
}

// SetNillableTubeTurnaroundTime sets the "tube_turnaround_time" field if the given value is not nil.
func (tu *TubeUpdate) SetNillableTubeTurnaroundTime(i *int) *TubeUpdate {
	if i != nil {
		tu.SetTubeTurnaroundTime(*i)
	}
	return tu
}

// AddTubeTurnaroundTime adds i to the "tube_turnaround_time" field.
func (tu *TubeUpdate) AddTubeTurnaroundTime(i int) *TubeUpdate {
	tu.mutation.AddTubeTurnaroundTime(i)
	return tu
}

// SetTubeStability sets the "tube_stability" field.
func (tu *TubeUpdate) SetTubeStability(i int) *TubeUpdate {
	tu.mutation.ResetTubeStability()
	tu.mutation.SetTubeStability(i)
	return tu
}

// SetNillableTubeStability sets the "tube_stability" field if the given value is not nil.
func (tu *TubeUpdate) SetNillableTubeStability(i *int) *TubeUpdate {
	if i != nil {
		tu.SetTubeStability(*i)
	}
	return tu
}

// AddTubeStability adds i to the "tube_stability" field.
func (tu *TubeUpdate) AddTubeStability(i int) *TubeUpdate {
	tu.mutation.AddTubeStability(i)
	return tu
}

// SetIsActive sets the "isActive" field.
func (tu *TubeUpdate) SetIsActive(b bool) *TubeUpdate {
	tu.mutation.SetIsActive(b)
	return tu
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (tu *TubeUpdate) SetNillableIsActive(b *bool) *TubeUpdate {
	if b != nil {
		tu.SetIsActive(*b)
	}
	return tu
}

// SetIssues sets the "issues" field.
func (tu *TubeUpdate) SetIssues(s string) *TubeUpdate {
	tu.mutation.SetIssues(s)
	return tu
}

// SetNillableIssues sets the "issues" field if the given value is not nil.
func (tu *TubeUpdate) SetNillableIssues(s *string) *TubeUpdate {
	if s != nil {
		tu.SetIssues(*s)
	}
	return tu
}

// SetTubeCollectionTime sets the "tube_collection_time" field.
func (tu *TubeUpdate) SetTubeCollectionTime(t time.Time) *TubeUpdate {
	tu.mutation.SetTubeCollectionTime(t)
	return tu
}

// SetNillableTubeCollectionTime sets the "tube_collection_time" field if the given value is not nil.
func (tu *TubeUpdate) SetNillableTubeCollectionTime(t *time.Time) *TubeUpdate {
	if t != nil {
		tu.SetTubeCollectionTime(*t)
	}
	return tu
}

// AddTubeTypeIDs adds the "tube_type" edge to the TubeType entity by IDs.
func (tu *TubeUpdate) AddTubeTypeIDs(ids ...int) *TubeUpdate {
	tu.mutation.AddTubeTypeIDs(ids...)
	return tu
}

// AddTubeType adds the "tube_type" edges to the TubeType entity.
func (tu *TubeUpdate) AddTubeType(t ...*TubeType) *TubeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTubeTypeIDs(ids...)
}

// SetSample sets the "sample" edge to the Sample entity.
func (tu *TubeUpdate) SetSample(s *Sample) *TubeUpdate {
	return tu.SetSampleID(s.ID)
}

// Mutation returns the TubeMutation object of the builder.
func (tu *TubeUpdate) Mutation() *TubeMutation {
	return tu.mutation
}

// ClearTubeType clears all "tube_type" edges to the TubeType entity.
func (tu *TubeUpdate) ClearTubeType() *TubeUpdate {
	tu.mutation.ClearTubeType()
	return tu
}

// RemoveTubeTypeIDs removes the "tube_type" edge to TubeType entities by IDs.
func (tu *TubeUpdate) RemoveTubeTypeIDs(ids ...int) *TubeUpdate {
	tu.mutation.RemoveTubeTypeIDs(ids...)
	return tu
}

// RemoveTubeType removes "tube_type" edges to TubeType entities.
func (tu *TubeUpdate) RemoveTubeType(t ...*TubeType) *TubeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTubeTypeIDs(ids...)
}

// ClearSample clears the "sample" edge to the Sample entity.
func (tu *TubeUpdate) ClearSample() *TubeUpdate {
	tu.mutation.ClearSample()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TubeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TubeUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TubeUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TubeUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TubeUpdate) check() error {
	if _, ok := tu.mutation.SampleID(); tu.mutation.SampleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Tube.sample"`)
	}
	return nil
}

func (tu *TubeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tube.Table, tube.Columns, sqlgraph.NewFieldSpec(tube.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.TubeID(); ok {
		_spec.SetField(tube.FieldTubeID, field.TypeString, value)
	}
	if value, ok := tu.mutation.TubeStorage(); ok {
		_spec.SetField(tube.FieldTubeStorage, field.TypeString, value)
	}
	if value, ok := tu.mutation.TubeReceiveTime(); ok {
		_spec.SetField(tube.FieldTubeReceiveTime, field.TypeTime, value)
	}
	if value, ok := tu.mutation.TubeTurnaroundTime(); ok {
		_spec.SetField(tube.FieldTubeTurnaroundTime, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedTubeTurnaroundTime(); ok {
		_spec.AddField(tube.FieldTubeTurnaroundTime, field.TypeInt, value)
	}
	if value, ok := tu.mutation.TubeStability(); ok {
		_spec.SetField(tube.FieldTubeStability, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedTubeStability(); ok {
		_spec.AddField(tube.FieldTubeStability, field.TypeInt, value)
	}
	if value, ok := tu.mutation.IsActive(); ok {
		_spec.SetField(tube.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tu.mutation.Issues(); ok {
		_spec.SetField(tube.FieldIssues, field.TypeString, value)
	}
	if value, ok := tu.mutation.TubeCollectionTime(); ok {
		_spec.SetField(tube.FieldTubeCollectionTime, field.TypeTime, value)
	}
	if tu.mutation.TubeTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tube.TubeTypeTable,
			Columns: tube.TubeTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTubeTypeIDs(); len(nodes) > 0 && !tu.mutation.TubeTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tube.TubeTypeTable,
			Columns: tube.TubeTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TubeTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tube.TubeTypeTable,
			Columns: tube.TubeTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.SampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tube.SampleTable,
			Columns: []string{tube.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tube.SampleTable,
			Columns: []string{tube.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tube.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TubeUpdateOne is the builder for updating a single Tube entity.
type TubeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TubeMutation
}

// SetTubeID sets the "tube_id" field.
func (tuo *TubeUpdateOne) SetTubeID(s string) *TubeUpdateOne {
	tuo.mutation.SetTubeID(s)
	return tuo
}

// SetNillableTubeID sets the "tube_id" field if the given value is not nil.
func (tuo *TubeUpdateOne) SetNillableTubeID(s *string) *TubeUpdateOne {
	if s != nil {
		tuo.SetTubeID(*s)
	}
	return tuo
}

// SetSampleID sets the "sample_id" field.
func (tuo *TubeUpdateOne) SetSampleID(i int) *TubeUpdateOne {
	tuo.mutation.SetSampleID(i)
	return tuo
}

// SetNillableSampleID sets the "sample_id" field if the given value is not nil.
func (tuo *TubeUpdateOne) SetNillableSampleID(i *int) *TubeUpdateOne {
	if i != nil {
		tuo.SetSampleID(*i)
	}
	return tuo
}

// SetTubeStorage sets the "tube_storage" field.
func (tuo *TubeUpdateOne) SetTubeStorage(s string) *TubeUpdateOne {
	tuo.mutation.SetTubeStorage(s)
	return tuo
}

// SetNillableTubeStorage sets the "tube_storage" field if the given value is not nil.
func (tuo *TubeUpdateOne) SetNillableTubeStorage(s *string) *TubeUpdateOne {
	if s != nil {
		tuo.SetTubeStorage(*s)
	}
	return tuo
}

// SetTubeReceiveTime sets the "tube_receive_time" field.
func (tuo *TubeUpdateOne) SetTubeReceiveTime(t time.Time) *TubeUpdateOne {
	tuo.mutation.SetTubeReceiveTime(t)
	return tuo
}

// SetNillableTubeReceiveTime sets the "tube_receive_time" field if the given value is not nil.
func (tuo *TubeUpdateOne) SetNillableTubeReceiveTime(t *time.Time) *TubeUpdateOne {
	if t != nil {
		tuo.SetTubeReceiveTime(*t)
	}
	return tuo
}

// SetTubeTurnaroundTime sets the "tube_turnaround_time" field.
func (tuo *TubeUpdateOne) SetTubeTurnaroundTime(i int) *TubeUpdateOne {
	tuo.mutation.ResetTubeTurnaroundTime()
	tuo.mutation.SetTubeTurnaroundTime(i)
	return tuo
}

// SetNillableTubeTurnaroundTime sets the "tube_turnaround_time" field if the given value is not nil.
func (tuo *TubeUpdateOne) SetNillableTubeTurnaroundTime(i *int) *TubeUpdateOne {
	if i != nil {
		tuo.SetTubeTurnaroundTime(*i)
	}
	return tuo
}

// AddTubeTurnaroundTime adds i to the "tube_turnaround_time" field.
func (tuo *TubeUpdateOne) AddTubeTurnaroundTime(i int) *TubeUpdateOne {
	tuo.mutation.AddTubeTurnaroundTime(i)
	return tuo
}

// SetTubeStability sets the "tube_stability" field.
func (tuo *TubeUpdateOne) SetTubeStability(i int) *TubeUpdateOne {
	tuo.mutation.ResetTubeStability()
	tuo.mutation.SetTubeStability(i)
	return tuo
}

// SetNillableTubeStability sets the "tube_stability" field if the given value is not nil.
func (tuo *TubeUpdateOne) SetNillableTubeStability(i *int) *TubeUpdateOne {
	if i != nil {
		tuo.SetTubeStability(*i)
	}
	return tuo
}

// AddTubeStability adds i to the "tube_stability" field.
func (tuo *TubeUpdateOne) AddTubeStability(i int) *TubeUpdateOne {
	tuo.mutation.AddTubeStability(i)
	return tuo
}

// SetIsActive sets the "isActive" field.
func (tuo *TubeUpdateOne) SetIsActive(b bool) *TubeUpdateOne {
	tuo.mutation.SetIsActive(b)
	return tuo
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (tuo *TubeUpdateOne) SetNillableIsActive(b *bool) *TubeUpdateOne {
	if b != nil {
		tuo.SetIsActive(*b)
	}
	return tuo
}

// SetIssues sets the "issues" field.
func (tuo *TubeUpdateOne) SetIssues(s string) *TubeUpdateOne {
	tuo.mutation.SetIssues(s)
	return tuo
}

// SetNillableIssues sets the "issues" field if the given value is not nil.
func (tuo *TubeUpdateOne) SetNillableIssues(s *string) *TubeUpdateOne {
	if s != nil {
		tuo.SetIssues(*s)
	}
	return tuo
}

// SetTubeCollectionTime sets the "tube_collection_time" field.
func (tuo *TubeUpdateOne) SetTubeCollectionTime(t time.Time) *TubeUpdateOne {
	tuo.mutation.SetTubeCollectionTime(t)
	return tuo
}

// SetNillableTubeCollectionTime sets the "tube_collection_time" field if the given value is not nil.
func (tuo *TubeUpdateOne) SetNillableTubeCollectionTime(t *time.Time) *TubeUpdateOne {
	if t != nil {
		tuo.SetTubeCollectionTime(*t)
	}
	return tuo
}

// AddTubeTypeIDs adds the "tube_type" edge to the TubeType entity by IDs.
func (tuo *TubeUpdateOne) AddTubeTypeIDs(ids ...int) *TubeUpdateOne {
	tuo.mutation.AddTubeTypeIDs(ids...)
	return tuo
}

// AddTubeType adds the "tube_type" edges to the TubeType entity.
func (tuo *TubeUpdateOne) AddTubeType(t ...*TubeType) *TubeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTubeTypeIDs(ids...)
}

// SetSample sets the "sample" edge to the Sample entity.
func (tuo *TubeUpdateOne) SetSample(s *Sample) *TubeUpdateOne {
	return tuo.SetSampleID(s.ID)
}

// Mutation returns the TubeMutation object of the builder.
func (tuo *TubeUpdateOne) Mutation() *TubeMutation {
	return tuo.mutation
}

// ClearTubeType clears all "tube_type" edges to the TubeType entity.
func (tuo *TubeUpdateOne) ClearTubeType() *TubeUpdateOne {
	tuo.mutation.ClearTubeType()
	return tuo
}

// RemoveTubeTypeIDs removes the "tube_type" edge to TubeType entities by IDs.
func (tuo *TubeUpdateOne) RemoveTubeTypeIDs(ids ...int) *TubeUpdateOne {
	tuo.mutation.RemoveTubeTypeIDs(ids...)
	return tuo
}

// RemoveTubeType removes "tube_type" edges to TubeType entities.
func (tuo *TubeUpdateOne) RemoveTubeType(t ...*TubeType) *TubeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTubeTypeIDs(ids...)
}

// ClearSample clears the "sample" edge to the Sample entity.
func (tuo *TubeUpdateOne) ClearSample() *TubeUpdateOne {
	tuo.mutation.ClearSample()
	return tuo
}

// Where appends a list predicates to the TubeUpdate builder.
func (tuo *TubeUpdateOne) Where(ps ...predicate.Tube) *TubeUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TubeUpdateOne) Select(field string, fields ...string) *TubeUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tube entity.
func (tuo *TubeUpdateOne) Save(ctx context.Context) (*Tube, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TubeUpdateOne) SaveX(ctx context.Context) *Tube {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TubeUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TubeUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TubeUpdateOne) check() error {
	if _, ok := tuo.mutation.SampleID(); tuo.mutation.SampleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Tube.sample"`)
	}
	return nil
}

func (tuo *TubeUpdateOne) sqlSave(ctx context.Context) (_node *Tube, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tube.Table, tube.Columns, sqlgraph.NewFieldSpec(tube.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tube.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tube.FieldID)
		for _, f := range fields {
			if !tube.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tube.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.TubeID(); ok {
		_spec.SetField(tube.FieldTubeID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TubeStorage(); ok {
		_spec.SetField(tube.FieldTubeStorage, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TubeReceiveTime(); ok {
		_spec.SetField(tube.FieldTubeReceiveTime, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.TubeTurnaroundTime(); ok {
		_spec.SetField(tube.FieldTubeTurnaroundTime, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedTubeTurnaroundTime(); ok {
		_spec.AddField(tube.FieldTubeTurnaroundTime, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.TubeStability(); ok {
		_spec.SetField(tube.FieldTubeStability, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedTubeStability(); ok {
		_spec.AddField(tube.FieldTubeStability, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.IsActive(); ok {
		_spec.SetField(tube.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.Issues(); ok {
		_spec.SetField(tube.FieldIssues, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TubeCollectionTime(); ok {
		_spec.SetField(tube.FieldTubeCollectionTime, field.TypeTime, value)
	}
	if tuo.mutation.TubeTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tube.TubeTypeTable,
			Columns: tube.TubeTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTubeTypeIDs(); len(nodes) > 0 && !tuo.mutation.TubeTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tube.TubeTypeTable,
			Columns: tube.TubeTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TubeTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tube.TubeTypeTable,
			Columns: tube.TubeTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.SampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tube.SampleTable,
			Columns: []string{tube.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tube.SampleTable,
			Columns: []string{tube.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tube{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tube.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
