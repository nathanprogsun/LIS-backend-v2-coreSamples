// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/pendingordercredits"
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PendingOrderCreditsDelete is the builder for deleting a PendingOrderCredits entity.
type PendingOrderCreditsDelete struct {
	config
	hooks    []Hook
	mutation *PendingOrderCreditsMutation
}

// Where appends a list predicates to the PendingOrderCreditsDelete builder.
func (pocd *PendingOrderCreditsDelete) Where(ps ...predicate.PendingOrderCredits) *PendingOrderCreditsDelete {
	pocd.mutation.Where(ps...)
	return pocd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pocd *PendingOrderCreditsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pocd.sqlExec, pocd.mutation, pocd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pocd *PendingOrderCreditsDelete) ExecX(ctx context.Context) int {
	n, err := pocd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pocd *PendingOrderCreditsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(pendingordercredits.Table, sqlgraph.NewFieldSpec(pendingordercredits.FieldID, field.TypeInt))
	if ps := pocd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pocd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pocd.mutation.done = true
	return affected, err
}

// PendingOrderCreditsDeleteOne is the builder for deleting a single PendingOrderCredits entity.
type PendingOrderCreditsDeleteOne struct {
	pocd *PendingOrderCreditsDelete
}

// Where appends a list predicates to the PendingOrderCreditsDelete builder.
func (pocdo *PendingOrderCreditsDeleteOne) Where(ps ...predicate.PendingOrderCredits) *PendingOrderCreditsDeleteOne {
	pocdo.pocd.mutation.Where(ps...)
	return pocdo
}

// Exec executes the deletion query.
func (pocdo *PendingOrderCreditsDeleteOne) Exec(ctx context.Context) error {
	n, err := pocdo.pocd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{pendingordercredits.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pocdo *PendingOrderCreditsDeleteOne) ExecX(ctx context.Context) {
	if err := pocdo.Exec(ctx); err != nil {
		panic(err)
	}
}
