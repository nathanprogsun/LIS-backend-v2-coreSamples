// Code generated by ent, DO NOT EDIT.

package salestitle

import (
	"coresamples/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldLTE(FieldID, id))
}

// TitleName applies equality check predicate on the "title_name" field. It's identical to TitleNameEQ.
func TitleName(v string) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldEQ(FieldTitleName, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldEQ(FieldOrder, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldEQ(FieldCreatedTime, v))
}

// UpdatedTime applies equality check predicate on the "updated_time" field. It's identical to UpdatedTimeEQ.
func UpdatedTime(v time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldEQ(FieldUpdatedTime, v))
}

// TitleNameEQ applies the EQ predicate on the "title_name" field.
func TitleNameEQ(v string) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldEQ(FieldTitleName, v))
}

// TitleNameNEQ applies the NEQ predicate on the "title_name" field.
func TitleNameNEQ(v string) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldNEQ(FieldTitleName, v))
}

// TitleNameIn applies the In predicate on the "title_name" field.
func TitleNameIn(vs ...string) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldIn(FieldTitleName, vs...))
}

// TitleNameNotIn applies the NotIn predicate on the "title_name" field.
func TitleNameNotIn(vs ...string) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldNotIn(FieldTitleName, vs...))
}

// TitleNameGT applies the GT predicate on the "title_name" field.
func TitleNameGT(v string) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldGT(FieldTitleName, v))
}

// TitleNameGTE applies the GTE predicate on the "title_name" field.
func TitleNameGTE(v string) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldGTE(FieldTitleName, v))
}

// TitleNameLT applies the LT predicate on the "title_name" field.
func TitleNameLT(v string) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldLT(FieldTitleName, v))
}

// TitleNameLTE applies the LTE predicate on the "title_name" field.
func TitleNameLTE(v string) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldLTE(FieldTitleName, v))
}

// TitleNameContains applies the Contains predicate on the "title_name" field.
func TitleNameContains(v string) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldContains(FieldTitleName, v))
}

// TitleNameHasPrefix applies the HasPrefix predicate on the "title_name" field.
func TitleNameHasPrefix(v string) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldHasPrefix(FieldTitleName, v))
}

// TitleNameHasSuffix applies the HasSuffix predicate on the "title_name" field.
func TitleNameHasSuffix(v string) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldHasSuffix(FieldTitleName, v))
}

// TitleNameEqualFold applies the EqualFold predicate on the "title_name" field.
func TitleNameEqualFold(v string) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldEqualFold(FieldTitleName, v))
}

// TitleNameContainsFold applies the ContainsFold predicate on the "title_name" field.
func TitleNameContainsFold(v string) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldContainsFold(FieldTitleName, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldLTE(FieldOrder, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldLTE(FieldCreatedTime, v))
}

// UpdatedTimeEQ applies the EQ predicate on the "updated_time" field.
func UpdatedTimeEQ(v time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedTimeNEQ applies the NEQ predicate on the "updated_time" field.
func UpdatedTimeNEQ(v time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldNEQ(FieldUpdatedTime, v))
}

// UpdatedTimeIn applies the In predicate on the "updated_time" field.
func UpdatedTimeIn(vs ...time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeNotIn applies the NotIn predicate on the "updated_time" field.
func UpdatedTimeNotIn(vs ...time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldNotIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeGT applies the GT predicate on the "updated_time" field.
func UpdatedTimeGT(v time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldGT(FieldUpdatedTime, v))
}

// UpdatedTimeGTE applies the GTE predicate on the "updated_time" field.
func UpdatedTimeGTE(v time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldGTE(FieldUpdatedTime, v))
}

// UpdatedTimeLT applies the LT predicate on the "updated_time" field.
func UpdatedTimeLT(v time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldLT(FieldUpdatedTime, v))
}

// UpdatedTimeLTE applies the LTE predicate on the "updated_time" field.
func UpdatedTimeLTE(v time.Time) predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldLTE(FieldUpdatedTime, v))
}

// UpdatedTimeIsNil applies the IsNil predicate on the "updated_time" field.
func UpdatedTimeIsNil() predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldIsNull(FieldUpdatedTime))
}

// UpdatedTimeNotNil applies the NotNil predicate on the "updated_time" field.
func UpdatedTimeNotNil() predicate.SalesTitle {
	return predicate.SalesTitle(sql.FieldNotNull(FieldUpdatedTime))
}

// HasSales applies the HasEdge predicate on the "sales" edge.
func HasSales() predicate.SalesTitle {
	return predicate.SalesTitle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, SalesTable, SalesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSalesWith applies the HasEdge predicate on the "sales" edge with a given conditions (other predicates).
func HasSalesWith(preds ...predicate.SalesTeam) predicate.SalesTitle {
	return predicate.SalesTitle(func(s *sql.Selector) {
		step := newSalesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SalesTitle) predicate.SalesTitle {
	return predicate.SalesTitle(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SalesTitle) predicate.SalesTitle {
	return predicate.SalesTitle(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SalesTitle) predicate.SalesTitle {
	return predicate.SalesTitle(sql.NotPredicates(p))
}
