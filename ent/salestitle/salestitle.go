// Code generated by ent, DO NOT EDIT.

package salestitle

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the salestitle type in the database.
	Label = "sales_title"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitleName holds the string denoting the title_name field in the database.
	FieldTitleName = "title_name"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// FieldUpdatedTime holds the string denoting the updated_time field in the database.
	FieldUpdatedTime = "updated_time"
	// EdgeSales holds the string denoting the sales edge name in mutations.
	EdgeSales = "sales"
	// Table holds the table name of the salestitle in the database.
	Table = "sales_title"
	// SalesTable is the table that holds the sales relation/edge.
	SalesTable = "sales_team"
	// SalesInverseTable is the table name for the SalesTeam entity.
	// It exists in this package in order to avoid circular dependency with the "salesteam" package.
	SalesInverseTable = "sales_team"
	// SalesColumn is the table column denoting the sales relation/edge.
	SalesColumn = "title_id"
)

// Columns holds all SQL columns for salestitle fields.
var Columns = []string{
	FieldID,
	FieldTitleName,
	FieldOrder,
	FieldCreatedTime,
	FieldUpdatedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedTime holds the default value on creation for the "created_time" field.
	DefaultCreatedTime func() time.Time
	// UpdateDefaultUpdatedTime holds the default value on update for the "updated_time" field.
	UpdateDefaultUpdatedTime func() time.Time
)

// OrderOption defines the ordering options for the SalesTitle queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitleName orders the results by the title_name field.
func ByTitleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleName, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the updated_time field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}

// BySalesCount orders the results by sales count.
func BySalesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSalesStep(), opts...)
	}
}

// BySales orders the results by sales terms.
func BySales(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSalesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSalesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SalesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SalesTable, SalesColumn),
	)
}
