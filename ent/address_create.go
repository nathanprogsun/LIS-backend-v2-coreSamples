// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/address"
	"coresamples/ent/clinic"
	"coresamples/ent/customer"
	"coresamples/ent/customeraddressonclinics"
	"coresamples/ent/internaluser"
	"coresamples/ent/orderinfo"
	"coresamples/ent/patient"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AddressCreate is the builder for creating a Address entity.
type AddressCreate struct {
	config
	mutation *AddressMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAddressType sets the "address_type" field.
func (ac *AddressCreate) SetAddressType(s string) *AddressCreate {
	ac.mutation.SetAddressType(s)
	return ac
}

// SetNillableAddressType sets the "address_type" field if the given value is not nil.
func (ac *AddressCreate) SetNillableAddressType(s *string) *AddressCreate {
	if s != nil {
		ac.SetAddressType(*s)
	}
	return ac
}

// SetStreetAddress sets the "street_address" field.
func (ac *AddressCreate) SetStreetAddress(s string) *AddressCreate {
	ac.mutation.SetStreetAddress(s)
	return ac
}

// SetNillableStreetAddress sets the "street_address" field if the given value is not nil.
func (ac *AddressCreate) SetNillableStreetAddress(s *string) *AddressCreate {
	if s != nil {
		ac.SetStreetAddress(*s)
	}
	return ac
}

// SetAptPo sets the "apt_po" field.
func (ac *AddressCreate) SetAptPo(s string) *AddressCreate {
	ac.mutation.SetAptPo(s)
	return ac
}

// SetNillableAptPo sets the "apt_po" field if the given value is not nil.
func (ac *AddressCreate) SetNillableAptPo(s *string) *AddressCreate {
	if s != nil {
		ac.SetAptPo(*s)
	}
	return ac
}

// SetCity sets the "city" field.
func (ac *AddressCreate) SetCity(s string) *AddressCreate {
	ac.mutation.SetCity(s)
	return ac
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (ac *AddressCreate) SetNillableCity(s *string) *AddressCreate {
	if s != nil {
		ac.SetCity(*s)
	}
	return ac
}

// SetState sets the "state" field.
func (ac *AddressCreate) SetState(s string) *AddressCreate {
	ac.mutation.SetState(s)
	return ac
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ac *AddressCreate) SetNillableState(s *string) *AddressCreate {
	if s != nil {
		ac.SetState(*s)
	}
	return ac
}

// SetZipcode sets the "zipcode" field.
func (ac *AddressCreate) SetZipcode(s string) *AddressCreate {
	ac.mutation.SetZipcode(s)
	return ac
}

// SetNillableZipcode sets the "zipcode" field if the given value is not nil.
func (ac *AddressCreate) SetNillableZipcode(s *string) *AddressCreate {
	if s != nil {
		ac.SetZipcode(*s)
	}
	return ac
}

// SetCountry sets the "country" field.
func (ac *AddressCreate) SetCountry(s string) *AddressCreate {
	ac.mutation.SetCountry(s)
	return ac
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (ac *AddressCreate) SetNillableCountry(s *string) *AddressCreate {
	if s != nil {
		ac.SetCountry(*s)
	}
	return ac
}

// SetAddressConfirmed sets the "address_confirmed" field.
func (ac *AddressCreate) SetAddressConfirmed(b bool) *AddressCreate {
	ac.mutation.SetAddressConfirmed(b)
	return ac
}

// SetNillableAddressConfirmed sets the "address_confirmed" field if the given value is not nil.
func (ac *AddressCreate) SetNillableAddressConfirmed(b *bool) *AddressCreate {
	if b != nil {
		ac.SetAddressConfirmed(*b)
	}
	return ac
}

// SetIsPrimaryAddress sets the "is_primary_address" field.
func (ac *AddressCreate) SetIsPrimaryAddress(b bool) *AddressCreate {
	ac.mutation.SetIsPrimaryAddress(b)
	return ac
}

// SetNillableIsPrimaryAddress sets the "is_primary_address" field if the given value is not nil.
func (ac *AddressCreate) SetNillableIsPrimaryAddress(b *bool) *AddressCreate {
	if b != nil {
		ac.SetIsPrimaryAddress(*b)
	}
	return ac
}

// SetCustomerID sets the "customer_id" field.
func (ac *AddressCreate) SetCustomerID(i int) *AddressCreate {
	ac.mutation.SetCustomerID(i)
	return ac
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (ac *AddressCreate) SetNillableCustomerID(i *int) *AddressCreate {
	if i != nil {
		ac.SetCustomerID(*i)
	}
	return ac
}

// SetPatientID sets the "patient_id" field.
func (ac *AddressCreate) SetPatientID(i int) *AddressCreate {
	ac.mutation.SetPatientID(i)
	return ac
}

// SetNillablePatientID sets the "patient_id" field if the given value is not nil.
func (ac *AddressCreate) SetNillablePatientID(i *int) *AddressCreate {
	if i != nil {
		ac.SetPatientID(*i)
	}
	return ac
}

// SetClinicID sets the "clinic_id" field.
func (ac *AddressCreate) SetClinicID(i int) *AddressCreate {
	ac.mutation.SetClinicID(i)
	return ac
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (ac *AddressCreate) SetNillableClinicID(i *int) *AddressCreate {
	if i != nil {
		ac.SetClinicID(*i)
	}
	return ac
}

// SetInternalUserID sets the "internal_user_id" field.
func (ac *AddressCreate) SetInternalUserID(i int) *AddressCreate {
	ac.mutation.SetInternalUserID(i)
	return ac
}

// SetNillableInternalUserID sets the "internal_user_id" field if the given value is not nil.
func (ac *AddressCreate) SetNillableInternalUserID(i *int) *AddressCreate {
	if i != nil {
		ac.SetInternalUserID(*i)
	}
	return ac
}

// SetAddressLevel sets the "address_level" field.
func (ac *AddressCreate) SetAddressLevel(i int) *AddressCreate {
	ac.mutation.SetAddressLevel(i)
	return ac
}

// SetNillableAddressLevel sets the "address_level" field if the given value is not nil.
func (ac *AddressCreate) SetNillableAddressLevel(i *int) *AddressCreate {
	if i != nil {
		ac.SetAddressLevel(*i)
	}
	return ac
}

// SetAddressLevelName sets the "address_level_name" field.
func (ac *AddressCreate) SetAddressLevelName(s string) *AddressCreate {
	ac.mutation.SetAddressLevelName(s)
	return ac
}

// SetNillableAddressLevelName sets the "address_level_name" field if the given value is not nil.
func (ac *AddressCreate) SetNillableAddressLevelName(s *string) *AddressCreate {
	if s != nil {
		ac.SetAddressLevelName(*s)
	}
	return ac
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (ac *AddressCreate) SetApplyToAllGroupMember(b bool) *AddressCreate {
	ac.mutation.SetApplyToAllGroupMember(b)
	return ac
}

// SetNillableApplyToAllGroupMember sets the "apply_to_all_group_member" field if the given value is not nil.
func (ac *AddressCreate) SetNillableApplyToAllGroupMember(b *bool) *AddressCreate {
	if b != nil {
		ac.SetApplyToAllGroupMember(*b)
	}
	return ac
}

// SetGroupAddressID sets the "group_address_id" field.
func (ac *AddressCreate) SetGroupAddressID(i int) *AddressCreate {
	ac.mutation.SetGroupAddressID(i)
	return ac
}

// SetNillableGroupAddressID sets the "group_address_id" field if the given value is not nil.
func (ac *AddressCreate) SetNillableGroupAddressID(i *int) *AddressCreate {
	if i != nil {
		ac.SetGroupAddressID(*i)
	}
	return ac
}

// SetIsGroupAddress sets the "is_group_address" field.
func (ac *AddressCreate) SetIsGroupAddress(b bool) *AddressCreate {
	ac.mutation.SetIsGroupAddress(b)
	return ac
}

// SetNillableIsGroupAddress sets the "is_group_address" field if the given value is not nil.
func (ac *AddressCreate) SetNillableIsGroupAddress(b *bool) *AddressCreate {
	if b != nil {
		ac.SetIsGroupAddress(*b)
	}
	return ac
}

// SetUseAsDefaultCreateAddress sets the "use_as_default_create_address" field.
func (ac *AddressCreate) SetUseAsDefaultCreateAddress(b bool) *AddressCreate {
	ac.mutation.SetUseAsDefaultCreateAddress(b)
	return ac
}

// SetNillableUseAsDefaultCreateAddress sets the "use_as_default_create_address" field if the given value is not nil.
func (ac *AddressCreate) SetNillableUseAsDefaultCreateAddress(b *bool) *AddressCreate {
	if b != nil {
		ac.SetUseAsDefaultCreateAddress(*b)
	}
	return ac
}

// SetUseGroupAddress sets the "use_group_address" field.
func (ac *AddressCreate) SetUseGroupAddress(b bool) *AddressCreate {
	ac.mutation.SetUseGroupAddress(b)
	return ac
}

// SetNillableUseGroupAddress sets the "use_group_address" field if the given value is not nil.
func (ac *AddressCreate) SetNillableUseGroupAddress(b *bool) *AddressCreate {
	if b != nil {
		ac.SetUseGroupAddress(*b)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AddressCreate) SetID(i int) *AddressCreate {
	ac.mutation.SetID(i)
	return ac
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (ac *AddressCreate) SetClinic(c *Clinic) *AddressCreate {
	return ac.SetClinicID(c.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (ac *AddressCreate) SetCustomer(c *Customer) *AddressCreate {
	return ac.SetCustomerID(c.ID)
}

// AddCustomerClinicMappingIDs adds the "customer_clinic_mappings" edge to the CustomerAddressOnClinics entity by IDs.
func (ac *AddressCreate) AddCustomerClinicMappingIDs(ids ...int) *AddressCreate {
	ac.mutation.AddCustomerClinicMappingIDs(ids...)
	return ac
}

// AddCustomerClinicMappings adds the "customer_clinic_mappings" edges to the CustomerAddressOnClinics entity.
func (ac *AddressCreate) AddCustomerClinicMappings(c ...*CustomerAddressOnClinics) *AddressCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ac.AddCustomerClinicMappingIDs(ids...)
}

// AddMemberAddressIDs adds the "member_addresses" edge to the Address entity by IDs.
func (ac *AddressCreate) AddMemberAddressIDs(ids ...int) *AddressCreate {
	ac.mutation.AddMemberAddressIDs(ids...)
	return ac
}

// AddMemberAddresses adds the "member_addresses" edges to the Address entity.
func (ac *AddressCreate) AddMemberAddresses(a ...*Address) *AddressCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddMemberAddressIDs(ids...)
}

// SetGroupAddress sets the "group_address" edge to the Address entity.
func (ac *AddressCreate) SetGroupAddress(a *Address) *AddressCreate {
	return ac.SetGroupAddressID(a.ID)
}

// SetInternalUser sets the "internal_user" edge to the InternalUser entity.
func (ac *AddressCreate) SetInternalUser(i *InternalUser) *AddressCreate {
	return ac.SetInternalUserID(i.ID)
}

// SetPatient sets the "patient" edge to the Patient entity.
func (ac *AddressCreate) SetPatient(p *Patient) *AddressCreate {
	return ac.SetPatientID(p.ID)
}

// AddOrderIDs adds the "orders" edge to the OrderInfo entity by IDs.
func (ac *AddressCreate) AddOrderIDs(ids ...int) *AddressCreate {
	ac.mutation.AddOrderIDs(ids...)
	return ac
}

// AddOrders adds the "orders" edges to the OrderInfo entity.
func (ac *AddressCreate) AddOrders(o ...*OrderInfo) *AddressCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ac.AddOrderIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (ac *AddressCreate) Mutation() *AddressMutation {
	return ac.mutation
}

// Save creates the Address in the database.
func (ac *AddressCreate) Save(ctx context.Context) (*Address, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AddressCreate) SaveX(ctx context.Context) *Address {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AddressCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AddressCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AddressCreate) defaults() {
	if _, ok := ac.mutation.AddressConfirmed(); !ok {
		v := address.DefaultAddressConfirmed
		ac.mutation.SetAddressConfirmed(v)
	}
	if _, ok := ac.mutation.IsPrimaryAddress(); !ok {
		v := address.DefaultIsPrimaryAddress
		ac.mutation.SetIsPrimaryAddress(v)
	}
	if _, ok := ac.mutation.AddressLevel(); !ok {
		v := address.DefaultAddressLevel
		ac.mutation.SetAddressLevel(v)
	}
	if _, ok := ac.mutation.AddressLevelName(); !ok {
		v := address.DefaultAddressLevelName
		ac.mutation.SetAddressLevelName(v)
	}
	if _, ok := ac.mutation.ApplyToAllGroupMember(); !ok {
		v := address.DefaultApplyToAllGroupMember
		ac.mutation.SetApplyToAllGroupMember(v)
	}
	if _, ok := ac.mutation.IsGroupAddress(); !ok {
		v := address.DefaultIsGroupAddress
		ac.mutation.SetIsGroupAddress(v)
	}
	if _, ok := ac.mutation.UseAsDefaultCreateAddress(); !ok {
		v := address.DefaultUseAsDefaultCreateAddress
		ac.mutation.SetUseAsDefaultCreateAddress(v)
	}
	if _, ok := ac.mutation.UseGroupAddress(); !ok {
		v := address.DefaultUseGroupAddress
		ac.mutation.SetUseGroupAddress(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AddressCreate) check() error {
	if _, ok := ac.mutation.AddressConfirmed(); !ok {
		return &ValidationError{Name: "address_confirmed", err: errors.New(`ent: missing required field "Address.address_confirmed"`)}
	}
	if _, ok := ac.mutation.IsPrimaryAddress(); !ok {
		return &ValidationError{Name: "is_primary_address", err: errors.New(`ent: missing required field "Address.is_primary_address"`)}
	}
	if _, ok := ac.mutation.AddressLevel(); !ok {
		return &ValidationError{Name: "address_level", err: errors.New(`ent: missing required field "Address.address_level"`)}
	}
	if _, ok := ac.mutation.AddressLevelName(); !ok {
		return &ValidationError{Name: "address_level_name", err: errors.New(`ent: missing required field "Address.address_level_name"`)}
	}
	if _, ok := ac.mutation.ApplyToAllGroupMember(); !ok {
		return &ValidationError{Name: "apply_to_all_group_member", err: errors.New(`ent: missing required field "Address.apply_to_all_group_member"`)}
	}
	if _, ok := ac.mutation.IsGroupAddress(); !ok {
		return &ValidationError{Name: "is_group_address", err: errors.New(`ent: missing required field "Address.is_group_address"`)}
	}
	if _, ok := ac.mutation.UseAsDefaultCreateAddress(); !ok {
		return &ValidationError{Name: "use_as_default_create_address", err: errors.New(`ent: missing required field "Address.use_as_default_create_address"`)}
	}
	if _, ok := ac.mutation.UseGroupAddress(); !ok {
		return &ValidationError{Name: "use_group_address", err: errors.New(`ent: missing required field "Address.use_group_address"`)}
	}
	return nil
}

func (ac *AddressCreate) sqlSave(ctx context.Context) (*Address, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AddressCreate) createSpec() (*Address, *sqlgraph.CreateSpec) {
	var (
		_node = &Address{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(address.Table, sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.AddressType(); ok {
		_spec.SetField(address.FieldAddressType, field.TypeString, value)
		_node.AddressType = value
	}
	if value, ok := ac.mutation.StreetAddress(); ok {
		_spec.SetField(address.FieldStreetAddress, field.TypeString, value)
		_node.StreetAddress = value
	}
	if value, ok := ac.mutation.AptPo(); ok {
		_spec.SetField(address.FieldAptPo, field.TypeString, value)
		_node.AptPo = value
	}
	if value, ok := ac.mutation.City(); ok {
		_spec.SetField(address.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := ac.mutation.State(); ok {
		_spec.SetField(address.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := ac.mutation.Zipcode(); ok {
		_spec.SetField(address.FieldZipcode, field.TypeString, value)
		_node.Zipcode = value
	}
	if value, ok := ac.mutation.Country(); ok {
		_spec.SetField(address.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := ac.mutation.AddressConfirmed(); ok {
		_spec.SetField(address.FieldAddressConfirmed, field.TypeBool, value)
		_node.AddressConfirmed = value
	}
	if value, ok := ac.mutation.IsPrimaryAddress(); ok {
		_spec.SetField(address.FieldIsPrimaryAddress, field.TypeBool, value)
		_node.IsPrimaryAddress = value
	}
	if value, ok := ac.mutation.AddressLevel(); ok {
		_spec.SetField(address.FieldAddressLevel, field.TypeInt, value)
		_node.AddressLevel = value
	}
	if value, ok := ac.mutation.AddressLevelName(); ok {
		_spec.SetField(address.FieldAddressLevelName, field.TypeString, value)
		_node.AddressLevelName = value
	}
	if value, ok := ac.mutation.ApplyToAllGroupMember(); ok {
		_spec.SetField(address.FieldApplyToAllGroupMember, field.TypeBool, value)
		_node.ApplyToAllGroupMember = value
	}
	if value, ok := ac.mutation.IsGroupAddress(); ok {
		_spec.SetField(address.FieldIsGroupAddress, field.TypeBool, value)
		_node.IsGroupAddress = value
	}
	if value, ok := ac.mutation.UseAsDefaultCreateAddress(); ok {
		_spec.SetField(address.FieldUseAsDefaultCreateAddress, field.TypeBool, value)
		_node.UseAsDefaultCreateAddress = value
	}
	if value, ok := ac.mutation.UseGroupAddress(); ok {
		_spec.SetField(address.FieldUseGroupAddress, field.TypeBool, value)
		_node.UseGroupAddress = value
	}
	if nodes := ac.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.ClinicTable,
			Columns: []string{address.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClinicID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.CustomerTable,
			Columns: []string{address.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CustomerClinicMappingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.CustomerClinicMappingsTable,
			Columns: []string{address.CustomerClinicMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.MemberAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.MemberAddressesTable,
			Columns: []string{address.MemberAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.GroupAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.GroupAddressTable,
			Columns: []string{address.GroupAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GroupAddressID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.InternalUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.InternalUserTable,
			Columns: []string{address.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InternalUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.PatientTable,
			Columns: []string{address.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PatientID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Address.Create().
//		SetAddressType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddressUpsert) {
//			SetAddressType(v+v).
//		}).
//		Exec(ctx)
func (ac *AddressCreate) OnConflict(opts ...sql.ConflictOption) *AddressUpsertOne {
	ac.conflict = opts
	return &AddressUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AddressCreate) OnConflictColumns(columns ...string) *AddressUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AddressUpsertOne{
		create: ac,
	}
}

type (
	// AddressUpsertOne is the builder for "upsert"-ing
	//  one Address node.
	AddressUpsertOne struct {
		create *AddressCreate
	}

	// AddressUpsert is the "OnConflict" setter.
	AddressUpsert struct {
		*sql.UpdateSet
	}
)

// SetAddressType sets the "address_type" field.
func (u *AddressUpsert) SetAddressType(v string) *AddressUpsert {
	u.Set(address.FieldAddressType, v)
	return u
}

// UpdateAddressType sets the "address_type" field to the value that was provided on create.
func (u *AddressUpsert) UpdateAddressType() *AddressUpsert {
	u.SetExcluded(address.FieldAddressType)
	return u
}

// ClearAddressType clears the value of the "address_type" field.
func (u *AddressUpsert) ClearAddressType() *AddressUpsert {
	u.SetNull(address.FieldAddressType)
	return u
}

// SetStreetAddress sets the "street_address" field.
func (u *AddressUpsert) SetStreetAddress(v string) *AddressUpsert {
	u.Set(address.FieldStreetAddress, v)
	return u
}

// UpdateStreetAddress sets the "street_address" field to the value that was provided on create.
func (u *AddressUpsert) UpdateStreetAddress() *AddressUpsert {
	u.SetExcluded(address.FieldStreetAddress)
	return u
}

// ClearStreetAddress clears the value of the "street_address" field.
func (u *AddressUpsert) ClearStreetAddress() *AddressUpsert {
	u.SetNull(address.FieldStreetAddress)
	return u
}

// SetAptPo sets the "apt_po" field.
func (u *AddressUpsert) SetAptPo(v string) *AddressUpsert {
	u.Set(address.FieldAptPo, v)
	return u
}

// UpdateAptPo sets the "apt_po" field to the value that was provided on create.
func (u *AddressUpsert) UpdateAptPo() *AddressUpsert {
	u.SetExcluded(address.FieldAptPo)
	return u
}

// ClearAptPo clears the value of the "apt_po" field.
func (u *AddressUpsert) ClearAptPo() *AddressUpsert {
	u.SetNull(address.FieldAptPo)
	return u
}

// SetCity sets the "city" field.
func (u *AddressUpsert) SetCity(v string) *AddressUpsert {
	u.Set(address.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AddressUpsert) UpdateCity() *AddressUpsert {
	u.SetExcluded(address.FieldCity)
	return u
}

// ClearCity clears the value of the "city" field.
func (u *AddressUpsert) ClearCity() *AddressUpsert {
	u.SetNull(address.FieldCity)
	return u
}

// SetState sets the "state" field.
func (u *AddressUpsert) SetState(v string) *AddressUpsert {
	u.Set(address.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *AddressUpsert) UpdateState() *AddressUpsert {
	u.SetExcluded(address.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *AddressUpsert) ClearState() *AddressUpsert {
	u.SetNull(address.FieldState)
	return u
}

// SetZipcode sets the "zipcode" field.
func (u *AddressUpsert) SetZipcode(v string) *AddressUpsert {
	u.Set(address.FieldZipcode, v)
	return u
}

// UpdateZipcode sets the "zipcode" field to the value that was provided on create.
func (u *AddressUpsert) UpdateZipcode() *AddressUpsert {
	u.SetExcluded(address.FieldZipcode)
	return u
}

// ClearZipcode clears the value of the "zipcode" field.
func (u *AddressUpsert) ClearZipcode() *AddressUpsert {
	u.SetNull(address.FieldZipcode)
	return u
}

// SetCountry sets the "country" field.
func (u *AddressUpsert) SetCountry(v string) *AddressUpsert {
	u.Set(address.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *AddressUpsert) UpdateCountry() *AddressUpsert {
	u.SetExcluded(address.FieldCountry)
	return u
}

// ClearCountry clears the value of the "country" field.
func (u *AddressUpsert) ClearCountry() *AddressUpsert {
	u.SetNull(address.FieldCountry)
	return u
}

// SetAddressConfirmed sets the "address_confirmed" field.
func (u *AddressUpsert) SetAddressConfirmed(v bool) *AddressUpsert {
	u.Set(address.FieldAddressConfirmed, v)
	return u
}

// UpdateAddressConfirmed sets the "address_confirmed" field to the value that was provided on create.
func (u *AddressUpsert) UpdateAddressConfirmed() *AddressUpsert {
	u.SetExcluded(address.FieldAddressConfirmed)
	return u
}

// SetIsPrimaryAddress sets the "is_primary_address" field.
func (u *AddressUpsert) SetIsPrimaryAddress(v bool) *AddressUpsert {
	u.Set(address.FieldIsPrimaryAddress, v)
	return u
}

// UpdateIsPrimaryAddress sets the "is_primary_address" field to the value that was provided on create.
func (u *AddressUpsert) UpdateIsPrimaryAddress() *AddressUpsert {
	u.SetExcluded(address.FieldIsPrimaryAddress)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *AddressUpsert) SetCustomerID(v int) *AddressUpsert {
	u.Set(address.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *AddressUpsert) UpdateCustomerID() *AddressUpsert {
	u.SetExcluded(address.FieldCustomerID)
	return u
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *AddressUpsert) ClearCustomerID() *AddressUpsert {
	u.SetNull(address.FieldCustomerID)
	return u
}

// SetPatientID sets the "patient_id" field.
func (u *AddressUpsert) SetPatientID(v int) *AddressUpsert {
	u.Set(address.FieldPatientID, v)
	return u
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *AddressUpsert) UpdatePatientID() *AddressUpsert {
	u.SetExcluded(address.FieldPatientID)
	return u
}

// ClearPatientID clears the value of the "patient_id" field.
func (u *AddressUpsert) ClearPatientID() *AddressUpsert {
	u.SetNull(address.FieldPatientID)
	return u
}

// SetClinicID sets the "clinic_id" field.
func (u *AddressUpsert) SetClinicID(v int) *AddressUpsert {
	u.Set(address.FieldClinicID, v)
	return u
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *AddressUpsert) UpdateClinicID() *AddressUpsert {
	u.SetExcluded(address.FieldClinicID)
	return u
}

// ClearClinicID clears the value of the "clinic_id" field.
func (u *AddressUpsert) ClearClinicID() *AddressUpsert {
	u.SetNull(address.FieldClinicID)
	return u
}

// SetInternalUserID sets the "internal_user_id" field.
func (u *AddressUpsert) SetInternalUserID(v int) *AddressUpsert {
	u.Set(address.FieldInternalUserID, v)
	return u
}

// UpdateInternalUserID sets the "internal_user_id" field to the value that was provided on create.
func (u *AddressUpsert) UpdateInternalUserID() *AddressUpsert {
	u.SetExcluded(address.FieldInternalUserID)
	return u
}

// ClearInternalUserID clears the value of the "internal_user_id" field.
func (u *AddressUpsert) ClearInternalUserID() *AddressUpsert {
	u.SetNull(address.FieldInternalUserID)
	return u
}

// SetAddressLevel sets the "address_level" field.
func (u *AddressUpsert) SetAddressLevel(v int) *AddressUpsert {
	u.Set(address.FieldAddressLevel, v)
	return u
}

// UpdateAddressLevel sets the "address_level" field to the value that was provided on create.
func (u *AddressUpsert) UpdateAddressLevel() *AddressUpsert {
	u.SetExcluded(address.FieldAddressLevel)
	return u
}

// AddAddressLevel adds v to the "address_level" field.
func (u *AddressUpsert) AddAddressLevel(v int) *AddressUpsert {
	u.Add(address.FieldAddressLevel, v)
	return u
}

// SetAddressLevelName sets the "address_level_name" field.
func (u *AddressUpsert) SetAddressLevelName(v string) *AddressUpsert {
	u.Set(address.FieldAddressLevelName, v)
	return u
}

// UpdateAddressLevelName sets the "address_level_name" field to the value that was provided on create.
func (u *AddressUpsert) UpdateAddressLevelName() *AddressUpsert {
	u.SetExcluded(address.FieldAddressLevelName)
	return u
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (u *AddressUpsert) SetApplyToAllGroupMember(v bool) *AddressUpsert {
	u.Set(address.FieldApplyToAllGroupMember, v)
	return u
}

// UpdateApplyToAllGroupMember sets the "apply_to_all_group_member" field to the value that was provided on create.
func (u *AddressUpsert) UpdateApplyToAllGroupMember() *AddressUpsert {
	u.SetExcluded(address.FieldApplyToAllGroupMember)
	return u
}

// SetGroupAddressID sets the "group_address_id" field.
func (u *AddressUpsert) SetGroupAddressID(v int) *AddressUpsert {
	u.Set(address.FieldGroupAddressID, v)
	return u
}

// UpdateGroupAddressID sets the "group_address_id" field to the value that was provided on create.
func (u *AddressUpsert) UpdateGroupAddressID() *AddressUpsert {
	u.SetExcluded(address.FieldGroupAddressID)
	return u
}

// ClearGroupAddressID clears the value of the "group_address_id" field.
func (u *AddressUpsert) ClearGroupAddressID() *AddressUpsert {
	u.SetNull(address.FieldGroupAddressID)
	return u
}

// SetIsGroupAddress sets the "is_group_address" field.
func (u *AddressUpsert) SetIsGroupAddress(v bool) *AddressUpsert {
	u.Set(address.FieldIsGroupAddress, v)
	return u
}

// UpdateIsGroupAddress sets the "is_group_address" field to the value that was provided on create.
func (u *AddressUpsert) UpdateIsGroupAddress() *AddressUpsert {
	u.SetExcluded(address.FieldIsGroupAddress)
	return u
}

// SetUseAsDefaultCreateAddress sets the "use_as_default_create_address" field.
func (u *AddressUpsert) SetUseAsDefaultCreateAddress(v bool) *AddressUpsert {
	u.Set(address.FieldUseAsDefaultCreateAddress, v)
	return u
}

// UpdateUseAsDefaultCreateAddress sets the "use_as_default_create_address" field to the value that was provided on create.
func (u *AddressUpsert) UpdateUseAsDefaultCreateAddress() *AddressUpsert {
	u.SetExcluded(address.FieldUseAsDefaultCreateAddress)
	return u
}

// SetUseGroupAddress sets the "use_group_address" field.
func (u *AddressUpsert) SetUseGroupAddress(v bool) *AddressUpsert {
	u.Set(address.FieldUseGroupAddress, v)
	return u
}

// UpdateUseGroupAddress sets the "use_group_address" field to the value that was provided on create.
func (u *AddressUpsert) UpdateUseGroupAddress() *AddressUpsert {
	u.SetExcluded(address.FieldUseGroupAddress)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(address.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AddressUpsertOne) UpdateNewValues() *AddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(address.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Address.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AddressUpsertOne) Ignore() *AddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddressUpsertOne) DoNothing() *AddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddressCreate.OnConflict
// documentation for more info.
func (u *AddressUpsertOne) Update(set func(*AddressUpsert)) *AddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddressUpsert{UpdateSet: update})
	}))
	return u
}

// SetAddressType sets the "address_type" field.
func (u *AddressUpsertOne) SetAddressType(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetAddressType(v)
	})
}

// UpdateAddressType sets the "address_type" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateAddressType() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateAddressType()
	})
}

// ClearAddressType clears the value of the "address_type" field.
func (u *AddressUpsertOne) ClearAddressType() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearAddressType()
	})
}

// SetStreetAddress sets the "street_address" field.
func (u *AddressUpsertOne) SetStreetAddress(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetStreetAddress(v)
	})
}

// UpdateStreetAddress sets the "street_address" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateStreetAddress() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateStreetAddress()
	})
}

// ClearStreetAddress clears the value of the "street_address" field.
func (u *AddressUpsertOne) ClearStreetAddress() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearStreetAddress()
	})
}

// SetAptPo sets the "apt_po" field.
func (u *AddressUpsertOne) SetAptPo(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetAptPo(v)
	})
}

// UpdateAptPo sets the "apt_po" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateAptPo() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateAptPo()
	})
}

// ClearAptPo clears the value of the "apt_po" field.
func (u *AddressUpsertOne) ClearAptPo() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearAptPo()
	})
}

// SetCity sets the "city" field.
func (u *AddressUpsertOne) SetCity(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateCity() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCity()
	})
}

// ClearCity clears the value of the "city" field.
func (u *AddressUpsertOne) ClearCity() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearCity()
	})
}

// SetState sets the "state" field.
func (u *AddressUpsertOne) SetState(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateState() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *AddressUpsertOne) ClearState() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearState()
	})
}

// SetZipcode sets the "zipcode" field.
func (u *AddressUpsertOne) SetZipcode(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetZipcode(v)
	})
}

// UpdateZipcode sets the "zipcode" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateZipcode() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateZipcode()
	})
}

// ClearZipcode clears the value of the "zipcode" field.
func (u *AddressUpsertOne) ClearZipcode() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearZipcode()
	})
}

// SetCountry sets the "country" field.
func (u *AddressUpsertOne) SetCountry(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateCountry() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *AddressUpsertOne) ClearCountry() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearCountry()
	})
}

// SetAddressConfirmed sets the "address_confirmed" field.
func (u *AddressUpsertOne) SetAddressConfirmed(v bool) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetAddressConfirmed(v)
	})
}

// UpdateAddressConfirmed sets the "address_confirmed" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateAddressConfirmed() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateAddressConfirmed()
	})
}

// SetIsPrimaryAddress sets the "is_primary_address" field.
func (u *AddressUpsertOne) SetIsPrimaryAddress(v bool) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetIsPrimaryAddress(v)
	})
}

// UpdateIsPrimaryAddress sets the "is_primary_address" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateIsPrimaryAddress() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateIsPrimaryAddress()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *AddressUpsertOne) SetCustomerID(v int) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateCustomerID() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *AddressUpsertOne) ClearCustomerID() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearCustomerID()
	})
}

// SetPatientID sets the "patient_id" field.
func (u *AddressUpsertOne) SetPatientID(v int) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetPatientID(v)
	})
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdatePatientID() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdatePatientID()
	})
}

// ClearPatientID clears the value of the "patient_id" field.
func (u *AddressUpsertOne) ClearPatientID() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearPatientID()
	})
}

// SetClinicID sets the "clinic_id" field.
func (u *AddressUpsertOne) SetClinicID(v int) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetClinicID(v)
	})
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateClinicID() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateClinicID()
	})
}

// ClearClinicID clears the value of the "clinic_id" field.
func (u *AddressUpsertOne) ClearClinicID() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearClinicID()
	})
}

// SetInternalUserID sets the "internal_user_id" field.
func (u *AddressUpsertOne) SetInternalUserID(v int) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetInternalUserID(v)
	})
}

// UpdateInternalUserID sets the "internal_user_id" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateInternalUserID() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateInternalUserID()
	})
}

// ClearInternalUserID clears the value of the "internal_user_id" field.
func (u *AddressUpsertOne) ClearInternalUserID() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearInternalUserID()
	})
}

// SetAddressLevel sets the "address_level" field.
func (u *AddressUpsertOne) SetAddressLevel(v int) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetAddressLevel(v)
	})
}

// AddAddressLevel adds v to the "address_level" field.
func (u *AddressUpsertOne) AddAddressLevel(v int) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.AddAddressLevel(v)
	})
}

// UpdateAddressLevel sets the "address_level" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateAddressLevel() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateAddressLevel()
	})
}

// SetAddressLevelName sets the "address_level_name" field.
func (u *AddressUpsertOne) SetAddressLevelName(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetAddressLevelName(v)
	})
}

// UpdateAddressLevelName sets the "address_level_name" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateAddressLevelName() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateAddressLevelName()
	})
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (u *AddressUpsertOne) SetApplyToAllGroupMember(v bool) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetApplyToAllGroupMember(v)
	})
}

// UpdateApplyToAllGroupMember sets the "apply_to_all_group_member" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateApplyToAllGroupMember() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateApplyToAllGroupMember()
	})
}

// SetGroupAddressID sets the "group_address_id" field.
func (u *AddressUpsertOne) SetGroupAddressID(v int) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetGroupAddressID(v)
	})
}

// UpdateGroupAddressID sets the "group_address_id" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateGroupAddressID() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateGroupAddressID()
	})
}

// ClearGroupAddressID clears the value of the "group_address_id" field.
func (u *AddressUpsertOne) ClearGroupAddressID() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearGroupAddressID()
	})
}

// SetIsGroupAddress sets the "is_group_address" field.
func (u *AddressUpsertOne) SetIsGroupAddress(v bool) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetIsGroupAddress(v)
	})
}

// UpdateIsGroupAddress sets the "is_group_address" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateIsGroupAddress() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateIsGroupAddress()
	})
}

// SetUseAsDefaultCreateAddress sets the "use_as_default_create_address" field.
func (u *AddressUpsertOne) SetUseAsDefaultCreateAddress(v bool) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetUseAsDefaultCreateAddress(v)
	})
}

// UpdateUseAsDefaultCreateAddress sets the "use_as_default_create_address" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateUseAsDefaultCreateAddress() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateUseAsDefaultCreateAddress()
	})
}

// SetUseGroupAddress sets the "use_group_address" field.
func (u *AddressUpsertOne) SetUseGroupAddress(v bool) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetUseGroupAddress(v)
	})
}

// UpdateUseGroupAddress sets the "use_group_address" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateUseGroupAddress() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateUseGroupAddress()
	})
}

// Exec executes the query.
func (u *AddressUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AddressCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddressUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AddressUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AddressUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AddressCreateBulk is the builder for creating many Address entities in bulk.
type AddressCreateBulk struct {
	config
	err      error
	builders []*AddressCreate
	conflict []sql.ConflictOption
}

// Save creates the Address entities in the database.
func (acb *AddressCreateBulk) Save(ctx context.Context) ([]*Address, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Address, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AddressCreateBulk) SaveX(ctx context.Context) []*Address {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AddressCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AddressCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Address.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddressUpsert) {
//			SetAddressType(v+v).
//		}).
//		Exec(ctx)
func (acb *AddressCreateBulk) OnConflict(opts ...sql.ConflictOption) *AddressUpsertBulk {
	acb.conflict = opts
	return &AddressUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AddressCreateBulk) OnConflictColumns(columns ...string) *AddressUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AddressUpsertBulk{
		create: acb,
	}
}

// AddressUpsertBulk is the builder for "upsert"-ing
// a bulk of Address nodes.
type AddressUpsertBulk struct {
	create *AddressCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(address.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AddressUpsertBulk) UpdateNewValues() *AddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(address.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AddressUpsertBulk) Ignore() *AddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddressUpsertBulk) DoNothing() *AddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddressCreateBulk.OnConflict
// documentation for more info.
func (u *AddressUpsertBulk) Update(set func(*AddressUpsert)) *AddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddressUpsert{UpdateSet: update})
	}))
	return u
}

// SetAddressType sets the "address_type" field.
func (u *AddressUpsertBulk) SetAddressType(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetAddressType(v)
	})
}

// UpdateAddressType sets the "address_type" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateAddressType() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateAddressType()
	})
}

// ClearAddressType clears the value of the "address_type" field.
func (u *AddressUpsertBulk) ClearAddressType() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearAddressType()
	})
}

// SetStreetAddress sets the "street_address" field.
func (u *AddressUpsertBulk) SetStreetAddress(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetStreetAddress(v)
	})
}

// UpdateStreetAddress sets the "street_address" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateStreetAddress() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateStreetAddress()
	})
}

// ClearStreetAddress clears the value of the "street_address" field.
func (u *AddressUpsertBulk) ClearStreetAddress() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearStreetAddress()
	})
}

// SetAptPo sets the "apt_po" field.
func (u *AddressUpsertBulk) SetAptPo(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetAptPo(v)
	})
}

// UpdateAptPo sets the "apt_po" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateAptPo() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateAptPo()
	})
}

// ClearAptPo clears the value of the "apt_po" field.
func (u *AddressUpsertBulk) ClearAptPo() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearAptPo()
	})
}

// SetCity sets the "city" field.
func (u *AddressUpsertBulk) SetCity(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateCity() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCity()
	})
}

// ClearCity clears the value of the "city" field.
func (u *AddressUpsertBulk) ClearCity() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearCity()
	})
}

// SetState sets the "state" field.
func (u *AddressUpsertBulk) SetState(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateState() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *AddressUpsertBulk) ClearState() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearState()
	})
}

// SetZipcode sets the "zipcode" field.
func (u *AddressUpsertBulk) SetZipcode(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetZipcode(v)
	})
}

// UpdateZipcode sets the "zipcode" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateZipcode() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateZipcode()
	})
}

// ClearZipcode clears the value of the "zipcode" field.
func (u *AddressUpsertBulk) ClearZipcode() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearZipcode()
	})
}

// SetCountry sets the "country" field.
func (u *AddressUpsertBulk) SetCountry(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateCountry() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *AddressUpsertBulk) ClearCountry() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearCountry()
	})
}

// SetAddressConfirmed sets the "address_confirmed" field.
func (u *AddressUpsertBulk) SetAddressConfirmed(v bool) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetAddressConfirmed(v)
	})
}

// UpdateAddressConfirmed sets the "address_confirmed" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateAddressConfirmed() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateAddressConfirmed()
	})
}

// SetIsPrimaryAddress sets the "is_primary_address" field.
func (u *AddressUpsertBulk) SetIsPrimaryAddress(v bool) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetIsPrimaryAddress(v)
	})
}

// UpdateIsPrimaryAddress sets the "is_primary_address" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateIsPrimaryAddress() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateIsPrimaryAddress()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *AddressUpsertBulk) SetCustomerID(v int) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateCustomerID() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *AddressUpsertBulk) ClearCustomerID() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearCustomerID()
	})
}

// SetPatientID sets the "patient_id" field.
func (u *AddressUpsertBulk) SetPatientID(v int) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetPatientID(v)
	})
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdatePatientID() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdatePatientID()
	})
}

// ClearPatientID clears the value of the "patient_id" field.
func (u *AddressUpsertBulk) ClearPatientID() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearPatientID()
	})
}

// SetClinicID sets the "clinic_id" field.
func (u *AddressUpsertBulk) SetClinicID(v int) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetClinicID(v)
	})
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateClinicID() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateClinicID()
	})
}

// ClearClinicID clears the value of the "clinic_id" field.
func (u *AddressUpsertBulk) ClearClinicID() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearClinicID()
	})
}

// SetInternalUserID sets the "internal_user_id" field.
func (u *AddressUpsertBulk) SetInternalUserID(v int) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetInternalUserID(v)
	})
}

// UpdateInternalUserID sets the "internal_user_id" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateInternalUserID() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateInternalUserID()
	})
}

// ClearInternalUserID clears the value of the "internal_user_id" field.
func (u *AddressUpsertBulk) ClearInternalUserID() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearInternalUserID()
	})
}

// SetAddressLevel sets the "address_level" field.
func (u *AddressUpsertBulk) SetAddressLevel(v int) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetAddressLevel(v)
	})
}

// AddAddressLevel adds v to the "address_level" field.
func (u *AddressUpsertBulk) AddAddressLevel(v int) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.AddAddressLevel(v)
	})
}

// UpdateAddressLevel sets the "address_level" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateAddressLevel() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateAddressLevel()
	})
}

// SetAddressLevelName sets the "address_level_name" field.
func (u *AddressUpsertBulk) SetAddressLevelName(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetAddressLevelName(v)
	})
}

// UpdateAddressLevelName sets the "address_level_name" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateAddressLevelName() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateAddressLevelName()
	})
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (u *AddressUpsertBulk) SetApplyToAllGroupMember(v bool) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetApplyToAllGroupMember(v)
	})
}

// UpdateApplyToAllGroupMember sets the "apply_to_all_group_member" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateApplyToAllGroupMember() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateApplyToAllGroupMember()
	})
}

// SetGroupAddressID sets the "group_address_id" field.
func (u *AddressUpsertBulk) SetGroupAddressID(v int) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetGroupAddressID(v)
	})
}

// UpdateGroupAddressID sets the "group_address_id" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateGroupAddressID() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateGroupAddressID()
	})
}

// ClearGroupAddressID clears the value of the "group_address_id" field.
func (u *AddressUpsertBulk) ClearGroupAddressID() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearGroupAddressID()
	})
}

// SetIsGroupAddress sets the "is_group_address" field.
func (u *AddressUpsertBulk) SetIsGroupAddress(v bool) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetIsGroupAddress(v)
	})
}

// UpdateIsGroupAddress sets the "is_group_address" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateIsGroupAddress() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateIsGroupAddress()
	})
}

// SetUseAsDefaultCreateAddress sets the "use_as_default_create_address" field.
func (u *AddressUpsertBulk) SetUseAsDefaultCreateAddress(v bool) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetUseAsDefaultCreateAddress(v)
	})
}

// UpdateUseAsDefaultCreateAddress sets the "use_as_default_create_address" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateUseAsDefaultCreateAddress() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateUseAsDefaultCreateAddress()
	})
}

// SetUseGroupAddress sets the "use_group_address" field.
func (u *AddressUpsertBulk) SetUseGroupAddress(v bool) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetUseGroupAddress(v)
	})
}

// UpdateUseGroupAddress sets the "use_group_address" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateUseGroupAddress() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateUseGroupAddress()
	})
}

// Exec executes the query.
func (u *AddressUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AddressCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AddressCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddressUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
