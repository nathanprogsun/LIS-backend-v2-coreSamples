// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/patient"
	"coresamples/ent/patientweightheight"
	"coresamples/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PatientWeightHeightUpdate is the builder for updating PatientWeightHeight entities.
type PatientWeightHeightUpdate struct {
	config
	hooks    []Hook
	mutation *PatientWeightHeightMutation
}

// Where appends a list predicates to the PatientWeightHeightUpdate builder.
func (pwhu *PatientWeightHeightUpdate) Where(ps ...predicate.PatientWeightHeight) *PatientWeightHeightUpdate {
	pwhu.mutation.Where(ps...)
	return pwhu
}

// SetPatientID sets the "patient_id" field.
func (pwhu *PatientWeightHeightUpdate) SetPatientID(i int) *PatientWeightHeightUpdate {
	pwhu.mutation.SetPatientID(i)
	return pwhu
}

// SetNillablePatientID sets the "patient_id" field if the given value is not nil.
func (pwhu *PatientWeightHeightUpdate) SetNillablePatientID(i *int) *PatientWeightHeightUpdate {
	if i != nil {
		pwhu.SetPatientID(*i)
	}
	return pwhu
}

// SetWeight sets the "weight" field.
func (pwhu *PatientWeightHeightUpdate) SetWeight(s string) *PatientWeightHeightUpdate {
	pwhu.mutation.SetWeight(s)
	return pwhu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (pwhu *PatientWeightHeightUpdate) SetNillableWeight(s *string) *PatientWeightHeightUpdate {
	if s != nil {
		pwhu.SetWeight(*s)
	}
	return pwhu
}

// SetHeight sets the "height" field.
func (pwhu *PatientWeightHeightUpdate) SetHeight(s string) *PatientWeightHeightUpdate {
	pwhu.mutation.SetHeight(s)
	return pwhu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (pwhu *PatientWeightHeightUpdate) SetNillableHeight(s *string) *PatientWeightHeightUpdate {
	if s != nil {
		pwhu.SetHeight(*s)
	}
	return pwhu
}

// SetWeightUnit sets the "weight_unit" field.
func (pwhu *PatientWeightHeightUpdate) SetWeightUnit(s string) *PatientWeightHeightUpdate {
	pwhu.mutation.SetWeightUnit(s)
	return pwhu
}

// SetNillableWeightUnit sets the "weight_unit" field if the given value is not nil.
func (pwhu *PatientWeightHeightUpdate) SetNillableWeightUnit(s *string) *PatientWeightHeightUpdate {
	if s != nil {
		pwhu.SetWeightUnit(*s)
	}
	return pwhu
}

// SetHeightUnit sets the "height_unit" field.
func (pwhu *PatientWeightHeightUpdate) SetHeightUnit(s string) *PatientWeightHeightUpdate {
	pwhu.mutation.SetHeightUnit(s)
	return pwhu
}

// SetNillableHeightUnit sets the "height_unit" field if the given value is not nil.
func (pwhu *PatientWeightHeightUpdate) SetNillableHeightUnit(s *string) *PatientWeightHeightUpdate {
	if s != nil {
		pwhu.SetHeightUnit(*s)
	}
	return pwhu
}

// SetCreatedTime sets the "created_time" field.
func (pwhu *PatientWeightHeightUpdate) SetCreatedTime(t time.Time) *PatientWeightHeightUpdate {
	pwhu.mutation.SetCreatedTime(t)
	return pwhu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (pwhu *PatientWeightHeightUpdate) SetNillableCreatedTime(t *time.Time) *PatientWeightHeightUpdate {
	if t != nil {
		pwhu.SetCreatedTime(*t)
	}
	return pwhu
}

// SetUpdatedTime sets the "updated_time" field.
func (pwhu *PatientWeightHeightUpdate) SetUpdatedTime(t time.Time) *PatientWeightHeightUpdate {
	pwhu.mutation.SetUpdatedTime(t)
	return pwhu
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (pwhu *PatientWeightHeightUpdate) ClearUpdatedTime() *PatientWeightHeightUpdate {
	pwhu.mutation.ClearUpdatedTime()
	return pwhu
}

// SetPatient sets the "patient" edge to the Patient entity.
func (pwhu *PatientWeightHeightUpdate) SetPatient(p *Patient) *PatientWeightHeightUpdate {
	return pwhu.SetPatientID(p.ID)
}

// Mutation returns the PatientWeightHeightMutation object of the builder.
func (pwhu *PatientWeightHeightUpdate) Mutation() *PatientWeightHeightMutation {
	return pwhu.mutation
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (pwhu *PatientWeightHeightUpdate) ClearPatient() *PatientWeightHeightUpdate {
	pwhu.mutation.ClearPatient()
	return pwhu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pwhu *PatientWeightHeightUpdate) Save(ctx context.Context) (int, error) {
	pwhu.defaults()
	return withHooks(ctx, pwhu.sqlSave, pwhu.mutation, pwhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pwhu *PatientWeightHeightUpdate) SaveX(ctx context.Context) int {
	affected, err := pwhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pwhu *PatientWeightHeightUpdate) Exec(ctx context.Context) error {
	_, err := pwhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pwhu *PatientWeightHeightUpdate) ExecX(ctx context.Context) {
	if err := pwhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pwhu *PatientWeightHeightUpdate) defaults() {
	if _, ok := pwhu.mutation.UpdatedTime(); !ok && !pwhu.mutation.UpdatedTimeCleared() {
		v := patientweightheight.UpdateDefaultUpdatedTime()
		pwhu.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pwhu *PatientWeightHeightUpdate) check() error {
	if _, ok := pwhu.mutation.PatientID(); pwhu.mutation.PatientCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PatientWeightHeight.patient"`)
	}
	return nil
}

func (pwhu *PatientWeightHeightUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pwhu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(patientweightheight.Table, patientweightheight.Columns, sqlgraph.NewFieldSpec(patientweightheight.FieldID, field.TypeInt))
	if ps := pwhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pwhu.mutation.Weight(); ok {
		_spec.SetField(patientweightheight.FieldWeight, field.TypeString, value)
	}
	if value, ok := pwhu.mutation.Height(); ok {
		_spec.SetField(patientweightheight.FieldHeight, field.TypeString, value)
	}
	if value, ok := pwhu.mutation.WeightUnit(); ok {
		_spec.SetField(patientweightheight.FieldWeightUnit, field.TypeString, value)
	}
	if value, ok := pwhu.mutation.HeightUnit(); ok {
		_spec.SetField(patientweightheight.FieldHeightUnit, field.TypeString, value)
	}
	if value, ok := pwhu.mutation.CreatedTime(); ok {
		_spec.SetField(patientweightheight.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := pwhu.mutation.UpdatedTime(); ok {
		_spec.SetField(patientweightheight.FieldUpdatedTime, field.TypeTime, value)
	}
	if pwhu.mutation.UpdatedTimeCleared() {
		_spec.ClearField(patientweightheight.FieldUpdatedTime, field.TypeTime)
	}
	if pwhu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientweightheight.PatientTable,
			Columns: []string{patientweightheight.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pwhu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientweightheight.PatientTable,
			Columns: []string{patientweightheight.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pwhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patientweightheight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pwhu.mutation.done = true
	return n, nil
}

// PatientWeightHeightUpdateOne is the builder for updating a single PatientWeightHeight entity.
type PatientWeightHeightUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PatientWeightHeightMutation
}

// SetPatientID sets the "patient_id" field.
func (pwhuo *PatientWeightHeightUpdateOne) SetPatientID(i int) *PatientWeightHeightUpdateOne {
	pwhuo.mutation.SetPatientID(i)
	return pwhuo
}

// SetNillablePatientID sets the "patient_id" field if the given value is not nil.
func (pwhuo *PatientWeightHeightUpdateOne) SetNillablePatientID(i *int) *PatientWeightHeightUpdateOne {
	if i != nil {
		pwhuo.SetPatientID(*i)
	}
	return pwhuo
}

// SetWeight sets the "weight" field.
func (pwhuo *PatientWeightHeightUpdateOne) SetWeight(s string) *PatientWeightHeightUpdateOne {
	pwhuo.mutation.SetWeight(s)
	return pwhuo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (pwhuo *PatientWeightHeightUpdateOne) SetNillableWeight(s *string) *PatientWeightHeightUpdateOne {
	if s != nil {
		pwhuo.SetWeight(*s)
	}
	return pwhuo
}

// SetHeight sets the "height" field.
func (pwhuo *PatientWeightHeightUpdateOne) SetHeight(s string) *PatientWeightHeightUpdateOne {
	pwhuo.mutation.SetHeight(s)
	return pwhuo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (pwhuo *PatientWeightHeightUpdateOne) SetNillableHeight(s *string) *PatientWeightHeightUpdateOne {
	if s != nil {
		pwhuo.SetHeight(*s)
	}
	return pwhuo
}

// SetWeightUnit sets the "weight_unit" field.
func (pwhuo *PatientWeightHeightUpdateOne) SetWeightUnit(s string) *PatientWeightHeightUpdateOne {
	pwhuo.mutation.SetWeightUnit(s)
	return pwhuo
}

// SetNillableWeightUnit sets the "weight_unit" field if the given value is not nil.
func (pwhuo *PatientWeightHeightUpdateOne) SetNillableWeightUnit(s *string) *PatientWeightHeightUpdateOne {
	if s != nil {
		pwhuo.SetWeightUnit(*s)
	}
	return pwhuo
}

// SetHeightUnit sets the "height_unit" field.
func (pwhuo *PatientWeightHeightUpdateOne) SetHeightUnit(s string) *PatientWeightHeightUpdateOne {
	pwhuo.mutation.SetHeightUnit(s)
	return pwhuo
}

// SetNillableHeightUnit sets the "height_unit" field if the given value is not nil.
func (pwhuo *PatientWeightHeightUpdateOne) SetNillableHeightUnit(s *string) *PatientWeightHeightUpdateOne {
	if s != nil {
		pwhuo.SetHeightUnit(*s)
	}
	return pwhuo
}

// SetCreatedTime sets the "created_time" field.
func (pwhuo *PatientWeightHeightUpdateOne) SetCreatedTime(t time.Time) *PatientWeightHeightUpdateOne {
	pwhuo.mutation.SetCreatedTime(t)
	return pwhuo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (pwhuo *PatientWeightHeightUpdateOne) SetNillableCreatedTime(t *time.Time) *PatientWeightHeightUpdateOne {
	if t != nil {
		pwhuo.SetCreatedTime(*t)
	}
	return pwhuo
}

// SetUpdatedTime sets the "updated_time" field.
func (pwhuo *PatientWeightHeightUpdateOne) SetUpdatedTime(t time.Time) *PatientWeightHeightUpdateOne {
	pwhuo.mutation.SetUpdatedTime(t)
	return pwhuo
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (pwhuo *PatientWeightHeightUpdateOne) ClearUpdatedTime() *PatientWeightHeightUpdateOne {
	pwhuo.mutation.ClearUpdatedTime()
	return pwhuo
}

// SetPatient sets the "patient" edge to the Patient entity.
func (pwhuo *PatientWeightHeightUpdateOne) SetPatient(p *Patient) *PatientWeightHeightUpdateOne {
	return pwhuo.SetPatientID(p.ID)
}

// Mutation returns the PatientWeightHeightMutation object of the builder.
func (pwhuo *PatientWeightHeightUpdateOne) Mutation() *PatientWeightHeightMutation {
	return pwhuo.mutation
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (pwhuo *PatientWeightHeightUpdateOne) ClearPatient() *PatientWeightHeightUpdateOne {
	pwhuo.mutation.ClearPatient()
	return pwhuo
}

// Where appends a list predicates to the PatientWeightHeightUpdate builder.
func (pwhuo *PatientWeightHeightUpdateOne) Where(ps ...predicate.PatientWeightHeight) *PatientWeightHeightUpdateOne {
	pwhuo.mutation.Where(ps...)
	return pwhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pwhuo *PatientWeightHeightUpdateOne) Select(field string, fields ...string) *PatientWeightHeightUpdateOne {
	pwhuo.fields = append([]string{field}, fields...)
	return pwhuo
}

// Save executes the query and returns the updated PatientWeightHeight entity.
func (pwhuo *PatientWeightHeightUpdateOne) Save(ctx context.Context) (*PatientWeightHeight, error) {
	pwhuo.defaults()
	return withHooks(ctx, pwhuo.sqlSave, pwhuo.mutation, pwhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pwhuo *PatientWeightHeightUpdateOne) SaveX(ctx context.Context) *PatientWeightHeight {
	node, err := pwhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pwhuo *PatientWeightHeightUpdateOne) Exec(ctx context.Context) error {
	_, err := pwhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pwhuo *PatientWeightHeightUpdateOne) ExecX(ctx context.Context) {
	if err := pwhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pwhuo *PatientWeightHeightUpdateOne) defaults() {
	if _, ok := pwhuo.mutation.UpdatedTime(); !ok && !pwhuo.mutation.UpdatedTimeCleared() {
		v := patientweightheight.UpdateDefaultUpdatedTime()
		pwhuo.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pwhuo *PatientWeightHeightUpdateOne) check() error {
	if _, ok := pwhuo.mutation.PatientID(); pwhuo.mutation.PatientCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PatientWeightHeight.patient"`)
	}
	return nil
}

func (pwhuo *PatientWeightHeightUpdateOne) sqlSave(ctx context.Context) (_node *PatientWeightHeight, err error) {
	if err := pwhuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(patientweightheight.Table, patientweightheight.Columns, sqlgraph.NewFieldSpec(patientweightheight.FieldID, field.TypeInt))
	id, ok := pwhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PatientWeightHeight.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pwhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, patientweightheight.FieldID)
		for _, f := range fields {
			if !patientweightheight.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != patientweightheight.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pwhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pwhuo.mutation.Weight(); ok {
		_spec.SetField(patientweightheight.FieldWeight, field.TypeString, value)
	}
	if value, ok := pwhuo.mutation.Height(); ok {
		_spec.SetField(patientweightheight.FieldHeight, field.TypeString, value)
	}
	if value, ok := pwhuo.mutation.WeightUnit(); ok {
		_spec.SetField(patientweightheight.FieldWeightUnit, field.TypeString, value)
	}
	if value, ok := pwhuo.mutation.HeightUnit(); ok {
		_spec.SetField(patientweightheight.FieldHeightUnit, field.TypeString, value)
	}
	if value, ok := pwhuo.mutation.CreatedTime(); ok {
		_spec.SetField(patientweightheight.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := pwhuo.mutation.UpdatedTime(); ok {
		_spec.SetField(patientweightheight.FieldUpdatedTime, field.TypeTime, value)
	}
	if pwhuo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(patientweightheight.FieldUpdatedTime, field.TypeTime)
	}
	if pwhuo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientweightheight.PatientTable,
			Columns: []string{patientweightheight.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pwhuo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientweightheight.PatientTable,
			Columns: []string{patientweightheight.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PatientWeightHeight{config: pwhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pwhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patientweightheight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pwhuo.mutation.done = true
	return _node, nil
}
