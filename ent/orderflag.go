// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/orderflag"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OrderFlag is the model entity for the OrderFlag schema.
type OrderFlag struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"order_flag_id"`
	// OrderFlagName holds the value of the "order_flag_name" field.
	OrderFlagName string `json:"order_flag_name,omitempty"`
	// OrderFlagDescription holds the value of the "order_flag_description" field.
	OrderFlagDescription string `json:"order_flag_description,omitempty"`
	// OrderFlagDisplayName holds the value of the "order_flag_display_name" field.
	OrderFlagDisplayName string `json:"order_flag_display_name,omitempty"`
	// OrderFlagIsActive holds the value of the "order_flag_is_active" field.
	OrderFlagIsActive bool `json:"order_flag_is_active,omitempty"`
	// OrderFlagCreatedAt holds the value of the "order_flag_created_at" field.
	OrderFlagCreatedAt time.Time `json:"order_flag_created_at,omitempty"`
	// OrderFlagColor holds the value of the "order_flag_color" field.
	OrderFlagColor string `json:"order_flag_color,omitempty"`
	// OrderFlagedBy holds the value of the "order_flaged_by" field.
	OrderFlagedBy string `json:"order_flaged_by,omitempty"`
	// OrderFlagAllowDuplicatesUnderSameCategory holds the value of the "order_flag_allow_duplicates_under_same_category" field.
	OrderFlagAllowDuplicatesUnderSameCategory bool `json:"order_flag_allow_duplicates_under_same_category,omitempty"`
	// OrderFlagCategory holds the value of the "order_flag_category" field.
	OrderFlagCategory string `json:"order_flag_category,omitempty"`
	// OrderFlagLevel holds the value of the "order_flag_level" field.
	OrderFlagLevel int `json:"order_flag_level,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderFlagQuery when eager-loading is set.
	Edges        OrderFlagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderFlagEdges holds the relations/edges for other nodes in the graph.
type OrderFlagEdges struct {
	// FlaggedOrders holds the value of the flagged_orders edge.
	FlaggedOrders []*OrderInfo `json:"flagged_orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FlaggedOrdersOrErr returns the FlaggedOrders value or an error if the edge
// was not loaded in eager-loading.
func (e OrderFlagEdges) FlaggedOrdersOrErr() ([]*OrderInfo, error) {
	if e.loadedTypes[0] {
		return e.FlaggedOrders, nil
	}
	return nil, &NotLoadedError{edge: "flagged_orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderFlag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderflag.FieldOrderFlagIsActive, orderflag.FieldOrderFlagAllowDuplicatesUnderSameCategory:
			values[i] = new(sql.NullBool)
		case orderflag.FieldID, orderflag.FieldOrderFlagLevel:
			values[i] = new(sql.NullInt64)
		case orderflag.FieldOrderFlagName, orderflag.FieldOrderFlagDescription, orderflag.FieldOrderFlagDisplayName, orderflag.FieldOrderFlagColor, orderflag.FieldOrderFlagedBy, orderflag.FieldOrderFlagCategory:
			values[i] = new(sql.NullString)
		case orderflag.FieldOrderFlagCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderFlag fields.
func (of *OrderFlag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderflag.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			of.ID = int(value.Int64)
		case orderflag.FieldOrderFlagName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_flag_name", values[i])
			} else if value.Valid {
				of.OrderFlagName = value.String
			}
		case orderflag.FieldOrderFlagDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_flag_description", values[i])
			} else if value.Valid {
				of.OrderFlagDescription = value.String
			}
		case orderflag.FieldOrderFlagDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_flag_display_name", values[i])
			} else if value.Valid {
				of.OrderFlagDisplayName = value.String
			}
		case orderflag.FieldOrderFlagIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field order_flag_is_active", values[i])
			} else if value.Valid {
				of.OrderFlagIsActive = value.Bool
			}
		case orderflag.FieldOrderFlagCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field order_flag_created_at", values[i])
			} else if value.Valid {
				of.OrderFlagCreatedAt = value.Time
			}
		case orderflag.FieldOrderFlagColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_flag_color", values[i])
			} else if value.Valid {
				of.OrderFlagColor = value.String
			}
		case orderflag.FieldOrderFlagedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_flaged_by", values[i])
			} else if value.Valid {
				of.OrderFlagedBy = value.String
			}
		case orderflag.FieldOrderFlagAllowDuplicatesUnderSameCategory:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field order_flag_allow_duplicates_under_same_category", values[i])
			} else if value.Valid {
				of.OrderFlagAllowDuplicatesUnderSameCategory = value.Bool
			}
		case orderflag.FieldOrderFlagCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_flag_category", values[i])
			} else if value.Valid {
				of.OrderFlagCategory = value.String
			}
		case orderflag.FieldOrderFlagLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_flag_level", values[i])
			} else if value.Valid {
				of.OrderFlagLevel = int(value.Int64)
			}
		default:
			of.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderFlag.
// This includes values selected through modifiers, order, etc.
func (of *OrderFlag) Value(name string) (ent.Value, error) {
	return of.selectValues.Get(name)
}

// QueryFlaggedOrders queries the "flagged_orders" edge of the OrderFlag entity.
func (of *OrderFlag) QueryFlaggedOrders() *OrderInfoQuery {
	return NewOrderFlagClient(of.config).QueryFlaggedOrders(of)
}

// Update returns a builder for updating this OrderFlag.
// Note that you need to call OrderFlag.Unwrap() before calling this method if this OrderFlag
// was returned from a transaction, and the transaction was committed or rolled back.
func (of *OrderFlag) Update() *OrderFlagUpdateOne {
	return NewOrderFlagClient(of.config).UpdateOne(of)
}

// Unwrap unwraps the OrderFlag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (of *OrderFlag) Unwrap() *OrderFlag {
	_tx, ok := of.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderFlag is not a transactional entity")
	}
	of.config.driver = _tx.drv
	return of
}

// String implements the fmt.Stringer.
func (of *OrderFlag) String() string {
	var builder strings.Builder
	builder.WriteString("OrderFlag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", of.ID))
	builder.WriteString("order_flag_name=")
	builder.WriteString(of.OrderFlagName)
	builder.WriteString(", ")
	builder.WriteString("order_flag_description=")
	builder.WriteString(of.OrderFlagDescription)
	builder.WriteString(", ")
	builder.WriteString("order_flag_display_name=")
	builder.WriteString(of.OrderFlagDisplayName)
	builder.WriteString(", ")
	builder.WriteString("order_flag_is_active=")
	builder.WriteString(fmt.Sprintf("%v", of.OrderFlagIsActive))
	builder.WriteString(", ")
	builder.WriteString("order_flag_created_at=")
	builder.WriteString(of.OrderFlagCreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("order_flag_color=")
	builder.WriteString(of.OrderFlagColor)
	builder.WriteString(", ")
	builder.WriteString("order_flaged_by=")
	builder.WriteString(of.OrderFlagedBy)
	builder.WriteString(", ")
	builder.WriteString("order_flag_allow_duplicates_under_same_category=")
	builder.WriteString(fmt.Sprintf("%v", of.OrderFlagAllowDuplicatesUnderSameCategory))
	builder.WriteString(", ")
	builder.WriteString("order_flag_category=")
	builder.WriteString(of.OrderFlagCategory)
	builder.WriteString(", ")
	builder.WriteString("order_flag_level=")
	builder.WriteString(fmt.Sprintf("%v", of.OrderFlagLevel))
	builder.WriteByte(')')
	return builder.String()
}

// OrderFlags is a parsable slice of OrderFlag.
type OrderFlags []*OrderFlag
