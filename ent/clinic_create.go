// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/address"
	"coresamples/ent/betaprogramparticipation"
	"coresamples/ent/clinic"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/customeraddressonclinics"
	"coresamples/ent/customercontactonclinics"
	"coresamples/ent/customersettingonclinics"
	"coresamples/ent/orderinfo"
	"coresamples/ent/patient"
	"coresamples/ent/setting"
	"coresamples/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClinicCreate is the builder for creating a Clinic entity.
type ClinicCreate struct {
	config
	mutation *ClinicMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetClinicName sets the "clinic_name" field.
func (cc *ClinicCreate) SetClinicName(s string) *ClinicCreate {
	cc.mutation.SetClinicName(s)
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *ClinicCreate) SetUserID(i int) *ClinicCreate {
	cc.mutation.SetUserID(i)
	return cc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cc *ClinicCreate) SetNillableUserID(i *int) *ClinicCreate {
	if i != nil {
		cc.SetUserID(*i)
	}
	return cc
}

// SetIsActive sets the "is_active" field.
func (cc *ClinicCreate) SetIsActive(b bool) *ClinicCreate {
	cc.mutation.SetIsActive(b)
	return cc
}

// SetClinicAccountID sets the "clinic_account_id" field.
func (cc *ClinicCreate) SetClinicAccountID(i int) *ClinicCreate {
	cc.mutation.SetClinicAccountID(i)
	return cc
}

// SetNillableClinicAccountID sets the "clinic_account_id" field if the given value is not nil.
func (cc *ClinicCreate) SetNillableClinicAccountID(i *int) *ClinicCreate {
	if i != nil {
		cc.SetClinicAccountID(*i)
	}
	return cc
}

// SetClinicNameOldSystem sets the "clinic_name_old_system" field.
func (cc *ClinicCreate) SetClinicNameOldSystem(s string) *ClinicCreate {
	cc.mutation.SetClinicNameOldSystem(s)
	return cc
}

// SetNillableClinicNameOldSystem sets the "clinic_name_old_system" field if the given value is not nil.
func (cc *ClinicCreate) SetNillableClinicNameOldSystem(s *string) *ClinicCreate {
	if s != nil {
		cc.SetClinicNameOldSystem(*s)
	}
	return cc
}

// SetClinicSignupTime sets the "clinic_signup_time" field.
func (cc *ClinicCreate) SetClinicSignupTime(t time.Time) *ClinicCreate {
	cc.mutation.SetClinicSignupTime(t)
	return cc
}

// SetNillableClinicSignupTime sets the "clinic_signup_time" field if the given value is not nil.
func (cc *ClinicCreate) SetNillableClinicSignupTime(t *time.Time) *ClinicCreate {
	if t != nil {
		cc.SetClinicSignupTime(*t)
	}
	return cc
}

// SetClinicUpdatedTime sets the "clinic_updated_time" field.
func (cc *ClinicCreate) SetClinicUpdatedTime(t time.Time) *ClinicCreate {
	cc.mutation.SetClinicUpdatedTime(t)
	return cc
}

// SetNillableClinicUpdatedTime sets the "clinic_updated_time" field if the given value is not nil.
func (cc *ClinicCreate) SetNillableClinicUpdatedTime(t *time.Time) *ClinicCreate {
	if t != nil {
		cc.SetClinicUpdatedTime(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ClinicCreate) SetID(i int) *ClinicCreate {
	cc.mutation.SetID(i)
	return cc
}

// SetUser sets the "user" edge to the User entity.
func (cc *ClinicCreate) SetUser(u *User) *ClinicCreate {
	return cc.SetUserID(u.ID)
}

// AddClinicContactIDs adds the "clinic_contacts" edge to the Contact entity by IDs.
func (cc *ClinicCreate) AddClinicContactIDs(ids ...int) *ClinicCreate {
	cc.mutation.AddClinicContactIDs(ids...)
	return cc
}

// AddClinicContacts adds the "clinic_contacts" edges to the Contact entity.
func (cc *ClinicCreate) AddClinicContacts(c ...*Contact) *ClinicCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddClinicContactIDs(ids...)
}

// AddClinicAddressIDs adds the "clinic_addresses" edge to the Address entity by IDs.
func (cc *ClinicCreate) AddClinicAddressIDs(ids ...int) *ClinicCreate {
	cc.mutation.AddClinicAddressIDs(ids...)
	return cc
}

// AddClinicAddresses adds the "clinic_addresses" edges to the Address entity.
func (cc *ClinicCreate) AddClinicAddresses(a ...*Address) *ClinicCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cc.AddClinicAddressIDs(ids...)
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (cc *ClinicCreate) AddCustomerIDs(ids ...int) *ClinicCreate {
	cc.mutation.AddCustomerIDs(ids...)
	return cc
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (cc *ClinicCreate) AddCustomers(c ...*Customer) *ClinicCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCustomerIDs(ids...)
}

// AddClinicSettingIDs adds the "clinic_settings" edge to the Setting entity by IDs.
func (cc *ClinicCreate) AddClinicSettingIDs(ids ...int) *ClinicCreate {
	cc.mutation.AddClinicSettingIDs(ids...)
	return cc
}

// AddClinicSettings adds the "clinic_settings" edges to the Setting entity.
func (cc *ClinicCreate) AddClinicSettings(s ...*Setting) *ClinicCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddClinicSettingIDs(ids...)
}

// AddClinicOrderIDs adds the "clinic_orders" edge to the OrderInfo entity by IDs.
func (cc *ClinicCreate) AddClinicOrderIDs(ids ...int) *ClinicCreate {
	cc.mutation.AddClinicOrderIDs(ids...)
	return cc
}

// AddClinicOrders adds the "clinic_orders" edges to the OrderInfo entity.
func (cc *ClinicCreate) AddClinicOrders(o ...*OrderInfo) *ClinicCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cc.AddClinicOrderIDs(ids...)
}

// AddClinicPatientIDs adds the "clinic_patients" edge to the Patient entity by IDs.
func (cc *ClinicCreate) AddClinicPatientIDs(ids ...int) *ClinicCreate {
	cc.mutation.AddClinicPatientIDs(ids...)
	return cc
}

// AddClinicPatients adds the "clinic_patients" edges to the Patient entity.
func (cc *ClinicCreate) AddClinicPatients(p ...*Patient) *ClinicCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddClinicPatientIDs(ids...)
}

// AddClinicBetaProgramParticipationIDs adds the "clinic_beta_program_participations" edge to the BetaProgramParticipation entity by IDs.
func (cc *ClinicCreate) AddClinicBetaProgramParticipationIDs(ids ...int) *ClinicCreate {
	cc.mutation.AddClinicBetaProgramParticipationIDs(ids...)
	return cc
}

// AddClinicBetaProgramParticipations adds the "clinic_beta_program_participations" edges to the BetaProgramParticipation entity.
func (cc *ClinicCreate) AddClinicBetaProgramParticipations(b ...*BetaProgramParticipation) *ClinicCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cc.AddClinicBetaProgramParticipationIDs(ids...)
}

// AddClinicCustomerSettingIDs adds the "clinic_customer_settings" edge to the CustomerSettingOnClinics entity by IDs.
func (cc *ClinicCreate) AddClinicCustomerSettingIDs(ids ...int) *ClinicCreate {
	cc.mutation.AddClinicCustomerSettingIDs(ids...)
	return cc
}

// AddClinicCustomerSettings adds the "clinic_customer_settings" edges to the CustomerSettingOnClinics entity.
func (cc *ClinicCreate) AddClinicCustomerSettings(c ...*CustomerSettingOnClinics) *ClinicCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddClinicCustomerSettingIDs(ids...)
}

// AddClinicCustomerAddressIDs adds the "clinic_customer_addresses" edge to the CustomerAddressOnClinics entity by IDs.
func (cc *ClinicCreate) AddClinicCustomerAddressIDs(ids ...int) *ClinicCreate {
	cc.mutation.AddClinicCustomerAddressIDs(ids...)
	return cc
}

// AddClinicCustomerAddresses adds the "clinic_customer_addresses" edges to the CustomerAddressOnClinics entity.
func (cc *ClinicCreate) AddClinicCustomerAddresses(c ...*CustomerAddressOnClinics) *ClinicCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddClinicCustomerAddressIDs(ids...)
}

// AddClinicCustomerContactIDs adds the "clinic_customer_contacts" edge to the CustomerContactOnClinics entity by IDs.
func (cc *ClinicCreate) AddClinicCustomerContactIDs(ids ...int) *ClinicCreate {
	cc.mutation.AddClinicCustomerContactIDs(ids...)
	return cc
}

// AddClinicCustomerContacts adds the "clinic_customer_contacts" edges to the CustomerContactOnClinics entity.
func (cc *ClinicCreate) AddClinicCustomerContacts(c ...*CustomerContactOnClinics) *ClinicCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddClinicCustomerContactIDs(ids...)
}

// Mutation returns the ClinicMutation object of the builder.
func (cc *ClinicCreate) Mutation() *ClinicMutation {
	return cc.mutation
}

// Save creates the Clinic in the database.
func (cc *ClinicCreate) Save(ctx context.Context) (*Clinic, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClinicCreate) SaveX(ctx context.Context) *Clinic {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ClinicCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ClinicCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ClinicCreate) defaults() {
	if _, ok := cc.mutation.ClinicSignupTime(); !ok {
		v := clinic.DefaultClinicSignupTime()
		cc.mutation.SetClinicSignupTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ClinicCreate) check() error {
	if _, ok := cc.mutation.ClinicName(); !ok {
		return &ValidationError{Name: "clinic_name", err: errors.New(`ent: missing required field "Clinic.clinic_name"`)}
	}
	if _, ok := cc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Clinic.is_active"`)}
	}
	if _, ok := cc.mutation.ClinicSignupTime(); !ok {
		return &ValidationError{Name: "clinic_signup_time", err: errors.New(`ent: missing required field "Clinic.clinic_signup_time"`)}
	}
	return nil
}

func (cc *ClinicCreate) sqlSave(ctx context.Context) (*Clinic, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ClinicCreate) createSpec() (*Clinic, *sqlgraph.CreateSpec) {
	var (
		_node = &Clinic{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(clinic.Table, sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.ClinicName(); ok {
		_spec.SetField(clinic.FieldClinicName, field.TypeString, value)
		_node.ClinicName = value
	}
	if value, ok := cc.mutation.IsActive(); ok {
		_spec.SetField(clinic.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := cc.mutation.ClinicAccountID(); ok {
		_spec.SetField(clinic.FieldClinicAccountID, field.TypeInt, value)
		_node.ClinicAccountID = value
	}
	if value, ok := cc.mutation.ClinicNameOldSystem(); ok {
		_spec.SetField(clinic.FieldClinicNameOldSystem, field.TypeString, value)
		_node.ClinicNameOldSystem = value
	}
	if value, ok := cc.mutation.ClinicSignupTime(); ok {
		_spec.SetField(clinic.FieldClinicSignupTime, field.TypeTime, value)
		_node.ClinicSignupTime = value
	}
	if value, ok := cc.mutation.ClinicUpdatedTime(); ok {
		_spec.SetField(clinic.FieldClinicUpdatedTime, field.TypeTime, value)
		_node.ClinicUpdatedTime = value
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clinic.UserTable,
			Columns: []string{clinic.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClinicContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicContactsTable,
			Columns: []string{clinic.ClinicContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClinicAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicAddressesTable,
			Columns: []string{clinic.ClinicAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.CustomersTable,
			Columns: clinic.CustomersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClinicSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.ClinicSettingsTable,
			Columns: clinic.ClinicSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClinicOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicOrdersTable,
			Columns: []string{clinic.ClinicOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClinicPatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.ClinicPatientsTable,
			Columns: clinic.ClinicPatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClinicBetaProgramParticipationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicBetaProgramParticipationsTable,
			Columns: []string{clinic.ClinicBetaProgramParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClinicCustomerSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerSettingsTable,
			Columns: []string{clinic.ClinicCustomerSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClinicCustomerAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerAddressesTable,
			Columns: []string{clinic.ClinicCustomerAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClinicCustomerContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerContactsTable,
			Columns: []string{clinic.ClinicCustomerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Clinic.Create().
//		SetClinicName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ClinicUpsert) {
//			SetClinicName(v+v).
//		}).
//		Exec(ctx)
func (cc *ClinicCreate) OnConflict(opts ...sql.ConflictOption) *ClinicUpsertOne {
	cc.conflict = opts
	return &ClinicUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Clinic.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ClinicCreate) OnConflictColumns(columns ...string) *ClinicUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ClinicUpsertOne{
		create: cc,
	}
}

type (
	// ClinicUpsertOne is the builder for "upsert"-ing
	//  one Clinic node.
	ClinicUpsertOne struct {
		create *ClinicCreate
	}

	// ClinicUpsert is the "OnConflict" setter.
	ClinicUpsert struct {
		*sql.UpdateSet
	}
)

// SetClinicName sets the "clinic_name" field.
func (u *ClinicUpsert) SetClinicName(v string) *ClinicUpsert {
	u.Set(clinic.FieldClinicName, v)
	return u
}

// UpdateClinicName sets the "clinic_name" field to the value that was provided on create.
func (u *ClinicUpsert) UpdateClinicName() *ClinicUpsert {
	u.SetExcluded(clinic.FieldClinicName)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ClinicUpsert) SetUserID(v int) *ClinicUpsert {
	u.Set(clinic.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ClinicUpsert) UpdateUserID() *ClinicUpsert {
	u.SetExcluded(clinic.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *ClinicUpsert) ClearUserID() *ClinicUpsert {
	u.SetNull(clinic.FieldUserID)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *ClinicUpsert) SetIsActive(v bool) *ClinicUpsert {
	u.Set(clinic.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *ClinicUpsert) UpdateIsActive() *ClinicUpsert {
	u.SetExcluded(clinic.FieldIsActive)
	return u
}

// SetClinicAccountID sets the "clinic_account_id" field.
func (u *ClinicUpsert) SetClinicAccountID(v int) *ClinicUpsert {
	u.Set(clinic.FieldClinicAccountID, v)
	return u
}

// UpdateClinicAccountID sets the "clinic_account_id" field to the value that was provided on create.
func (u *ClinicUpsert) UpdateClinicAccountID() *ClinicUpsert {
	u.SetExcluded(clinic.FieldClinicAccountID)
	return u
}

// AddClinicAccountID adds v to the "clinic_account_id" field.
func (u *ClinicUpsert) AddClinicAccountID(v int) *ClinicUpsert {
	u.Add(clinic.FieldClinicAccountID, v)
	return u
}

// ClearClinicAccountID clears the value of the "clinic_account_id" field.
func (u *ClinicUpsert) ClearClinicAccountID() *ClinicUpsert {
	u.SetNull(clinic.FieldClinicAccountID)
	return u
}

// SetClinicNameOldSystem sets the "clinic_name_old_system" field.
func (u *ClinicUpsert) SetClinicNameOldSystem(v string) *ClinicUpsert {
	u.Set(clinic.FieldClinicNameOldSystem, v)
	return u
}

// UpdateClinicNameOldSystem sets the "clinic_name_old_system" field to the value that was provided on create.
func (u *ClinicUpsert) UpdateClinicNameOldSystem() *ClinicUpsert {
	u.SetExcluded(clinic.FieldClinicNameOldSystem)
	return u
}

// ClearClinicNameOldSystem clears the value of the "clinic_name_old_system" field.
func (u *ClinicUpsert) ClearClinicNameOldSystem() *ClinicUpsert {
	u.SetNull(clinic.FieldClinicNameOldSystem)
	return u
}

// SetClinicSignupTime sets the "clinic_signup_time" field.
func (u *ClinicUpsert) SetClinicSignupTime(v time.Time) *ClinicUpsert {
	u.Set(clinic.FieldClinicSignupTime, v)
	return u
}

// UpdateClinicSignupTime sets the "clinic_signup_time" field to the value that was provided on create.
func (u *ClinicUpsert) UpdateClinicSignupTime() *ClinicUpsert {
	u.SetExcluded(clinic.FieldClinicSignupTime)
	return u
}

// SetClinicUpdatedTime sets the "clinic_updated_time" field.
func (u *ClinicUpsert) SetClinicUpdatedTime(v time.Time) *ClinicUpsert {
	u.Set(clinic.FieldClinicUpdatedTime, v)
	return u
}

// UpdateClinicUpdatedTime sets the "clinic_updated_time" field to the value that was provided on create.
func (u *ClinicUpsert) UpdateClinicUpdatedTime() *ClinicUpsert {
	u.SetExcluded(clinic.FieldClinicUpdatedTime)
	return u
}

// ClearClinicUpdatedTime clears the value of the "clinic_updated_time" field.
func (u *ClinicUpsert) ClearClinicUpdatedTime() *ClinicUpsert {
	u.SetNull(clinic.FieldClinicUpdatedTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Clinic.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(clinic.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ClinicUpsertOne) UpdateNewValues() *ClinicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(clinic.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Clinic.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ClinicUpsertOne) Ignore() *ClinicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ClinicUpsertOne) DoNothing() *ClinicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ClinicCreate.OnConflict
// documentation for more info.
func (u *ClinicUpsertOne) Update(set func(*ClinicUpsert)) *ClinicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ClinicUpsert{UpdateSet: update})
	}))
	return u
}

// SetClinicName sets the "clinic_name" field.
func (u *ClinicUpsertOne) SetClinicName(v string) *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.SetClinicName(v)
	})
}

// UpdateClinicName sets the "clinic_name" field to the value that was provided on create.
func (u *ClinicUpsertOne) UpdateClinicName() *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.UpdateClinicName()
	})
}

// SetUserID sets the "user_id" field.
func (u *ClinicUpsertOne) SetUserID(v int) *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ClinicUpsertOne) UpdateUserID() *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *ClinicUpsertOne) ClearUserID() *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.ClearUserID()
	})
}

// SetIsActive sets the "is_active" field.
func (u *ClinicUpsertOne) SetIsActive(v bool) *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *ClinicUpsertOne) UpdateIsActive() *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.UpdateIsActive()
	})
}

// SetClinicAccountID sets the "clinic_account_id" field.
func (u *ClinicUpsertOne) SetClinicAccountID(v int) *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.SetClinicAccountID(v)
	})
}

// AddClinicAccountID adds v to the "clinic_account_id" field.
func (u *ClinicUpsertOne) AddClinicAccountID(v int) *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.AddClinicAccountID(v)
	})
}

// UpdateClinicAccountID sets the "clinic_account_id" field to the value that was provided on create.
func (u *ClinicUpsertOne) UpdateClinicAccountID() *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.UpdateClinicAccountID()
	})
}

// ClearClinicAccountID clears the value of the "clinic_account_id" field.
func (u *ClinicUpsertOne) ClearClinicAccountID() *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.ClearClinicAccountID()
	})
}

// SetClinicNameOldSystem sets the "clinic_name_old_system" field.
func (u *ClinicUpsertOne) SetClinicNameOldSystem(v string) *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.SetClinicNameOldSystem(v)
	})
}

// UpdateClinicNameOldSystem sets the "clinic_name_old_system" field to the value that was provided on create.
func (u *ClinicUpsertOne) UpdateClinicNameOldSystem() *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.UpdateClinicNameOldSystem()
	})
}

// ClearClinicNameOldSystem clears the value of the "clinic_name_old_system" field.
func (u *ClinicUpsertOne) ClearClinicNameOldSystem() *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.ClearClinicNameOldSystem()
	})
}

// SetClinicSignupTime sets the "clinic_signup_time" field.
func (u *ClinicUpsertOne) SetClinicSignupTime(v time.Time) *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.SetClinicSignupTime(v)
	})
}

// UpdateClinicSignupTime sets the "clinic_signup_time" field to the value that was provided on create.
func (u *ClinicUpsertOne) UpdateClinicSignupTime() *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.UpdateClinicSignupTime()
	})
}

// SetClinicUpdatedTime sets the "clinic_updated_time" field.
func (u *ClinicUpsertOne) SetClinicUpdatedTime(v time.Time) *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.SetClinicUpdatedTime(v)
	})
}

// UpdateClinicUpdatedTime sets the "clinic_updated_time" field to the value that was provided on create.
func (u *ClinicUpsertOne) UpdateClinicUpdatedTime() *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.UpdateClinicUpdatedTime()
	})
}

// ClearClinicUpdatedTime clears the value of the "clinic_updated_time" field.
func (u *ClinicUpsertOne) ClearClinicUpdatedTime() *ClinicUpsertOne {
	return u.Update(func(s *ClinicUpsert) {
		s.ClearClinicUpdatedTime()
	})
}

// Exec executes the query.
func (u *ClinicUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ClinicCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ClinicUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ClinicUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ClinicUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ClinicCreateBulk is the builder for creating many Clinic entities in bulk.
type ClinicCreateBulk struct {
	config
	err      error
	builders []*ClinicCreate
	conflict []sql.ConflictOption
}

// Save creates the Clinic entities in the database.
func (ccb *ClinicCreateBulk) Save(ctx context.Context) ([]*Clinic, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Clinic, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClinicMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ClinicCreateBulk) SaveX(ctx context.Context) []*Clinic {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ClinicCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ClinicCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Clinic.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ClinicUpsert) {
//			SetClinicName(v+v).
//		}).
//		Exec(ctx)
func (ccb *ClinicCreateBulk) OnConflict(opts ...sql.ConflictOption) *ClinicUpsertBulk {
	ccb.conflict = opts
	return &ClinicUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Clinic.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ClinicCreateBulk) OnConflictColumns(columns ...string) *ClinicUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ClinicUpsertBulk{
		create: ccb,
	}
}

// ClinicUpsertBulk is the builder for "upsert"-ing
// a bulk of Clinic nodes.
type ClinicUpsertBulk struct {
	create *ClinicCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Clinic.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(clinic.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ClinicUpsertBulk) UpdateNewValues() *ClinicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(clinic.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Clinic.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ClinicUpsertBulk) Ignore() *ClinicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ClinicUpsertBulk) DoNothing() *ClinicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ClinicCreateBulk.OnConflict
// documentation for more info.
func (u *ClinicUpsertBulk) Update(set func(*ClinicUpsert)) *ClinicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ClinicUpsert{UpdateSet: update})
	}))
	return u
}

// SetClinicName sets the "clinic_name" field.
func (u *ClinicUpsertBulk) SetClinicName(v string) *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.SetClinicName(v)
	})
}

// UpdateClinicName sets the "clinic_name" field to the value that was provided on create.
func (u *ClinicUpsertBulk) UpdateClinicName() *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.UpdateClinicName()
	})
}

// SetUserID sets the "user_id" field.
func (u *ClinicUpsertBulk) SetUserID(v int) *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ClinicUpsertBulk) UpdateUserID() *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *ClinicUpsertBulk) ClearUserID() *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.ClearUserID()
	})
}

// SetIsActive sets the "is_active" field.
func (u *ClinicUpsertBulk) SetIsActive(v bool) *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *ClinicUpsertBulk) UpdateIsActive() *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.UpdateIsActive()
	})
}

// SetClinicAccountID sets the "clinic_account_id" field.
func (u *ClinicUpsertBulk) SetClinicAccountID(v int) *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.SetClinicAccountID(v)
	})
}

// AddClinicAccountID adds v to the "clinic_account_id" field.
func (u *ClinicUpsertBulk) AddClinicAccountID(v int) *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.AddClinicAccountID(v)
	})
}

// UpdateClinicAccountID sets the "clinic_account_id" field to the value that was provided on create.
func (u *ClinicUpsertBulk) UpdateClinicAccountID() *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.UpdateClinicAccountID()
	})
}

// ClearClinicAccountID clears the value of the "clinic_account_id" field.
func (u *ClinicUpsertBulk) ClearClinicAccountID() *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.ClearClinicAccountID()
	})
}

// SetClinicNameOldSystem sets the "clinic_name_old_system" field.
func (u *ClinicUpsertBulk) SetClinicNameOldSystem(v string) *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.SetClinicNameOldSystem(v)
	})
}

// UpdateClinicNameOldSystem sets the "clinic_name_old_system" field to the value that was provided on create.
func (u *ClinicUpsertBulk) UpdateClinicNameOldSystem() *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.UpdateClinicNameOldSystem()
	})
}

// ClearClinicNameOldSystem clears the value of the "clinic_name_old_system" field.
func (u *ClinicUpsertBulk) ClearClinicNameOldSystem() *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.ClearClinicNameOldSystem()
	})
}

// SetClinicSignupTime sets the "clinic_signup_time" field.
func (u *ClinicUpsertBulk) SetClinicSignupTime(v time.Time) *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.SetClinicSignupTime(v)
	})
}

// UpdateClinicSignupTime sets the "clinic_signup_time" field to the value that was provided on create.
func (u *ClinicUpsertBulk) UpdateClinicSignupTime() *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.UpdateClinicSignupTime()
	})
}

// SetClinicUpdatedTime sets the "clinic_updated_time" field.
func (u *ClinicUpsertBulk) SetClinicUpdatedTime(v time.Time) *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.SetClinicUpdatedTime(v)
	})
}

// UpdateClinicUpdatedTime sets the "clinic_updated_time" field to the value that was provided on create.
func (u *ClinicUpsertBulk) UpdateClinicUpdatedTime() *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.UpdateClinicUpdatedTime()
	})
}

// ClearClinicUpdatedTime clears the value of the "clinic_updated_time" field.
func (u *ClinicUpsertBulk) ClearClinicUpdatedTime() *ClinicUpsertBulk {
	return u.Update(func(s *ClinicUpsert) {
		s.ClearClinicUpdatedTime()
	})
}

// Exec executes the query.
func (u *ClinicUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ClinicCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ClinicCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ClinicUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
