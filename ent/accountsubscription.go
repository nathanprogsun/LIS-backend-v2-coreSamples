// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/accountsubscription"
	"coresamples/ent/serviceship"
	"coresamples/ent/serviceshipbillingplan"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AccountSubscription is the model entity for the AccountSubscription schema.
type AccountSubscription struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID int64 `json:"account_id,omitempty"`
	// AccountType holds the value of the "account_type" field.
	AccountType accountsubscription.AccountType `json:"account_type,omitempty"`
	// SubscriberName holds the value of the "subscriber_name" field.
	SubscriberName string `json:"subscriber_name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountSubscriptionQuery when eager-loading is set.
	Edges                                         AccountSubscriptionEdges `json:"edges"`
	serviceship_account_subscription              *int
	serviceship_billing_plan_account_subscription *int
	selectValues                                  sql.SelectValues
}

// AccountSubscriptionEdges holds the relations/edges for other nodes in the graph.
type AccountSubscriptionEdges struct {
	// ServiceshipBillingPlan holds the value of the serviceship_billing_plan edge.
	ServiceshipBillingPlan *ServiceshipBillingPlan `json:"serviceship_billing_plan,omitempty"`
	// Serviceship holds the value of the serviceship edge.
	Serviceship *Serviceship `json:"serviceship,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ServiceshipBillingPlanOrErr returns the ServiceshipBillingPlan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountSubscriptionEdges) ServiceshipBillingPlanOrErr() (*ServiceshipBillingPlan, error) {
	if e.loadedTypes[0] {
		if e.ServiceshipBillingPlan == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: serviceshipbillingplan.Label}
		}
		return e.ServiceshipBillingPlan, nil
	}
	return nil, &NotLoadedError{edge: "serviceship_billing_plan"}
}

// ServiceshipOrErr returns the Serviceship value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountSubscriptionEdges) ServiceshipOrErr() (*Serviceship, error) {
	if e.loadedTypes[1] {
		if e.Serviceship == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: serviceship.Label}
		}
		return e.Serviceship, nil
	}
	return nil, &NotLoadedError{edge: "serviceship"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccountSubscription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case accountsubscription.FieldID, accountsubscription.FieldAccountID:
			values[i] = new(sql.NullInt64)
		case accountsubscription.FieldAccountType, accountsubscription.FieldSubscriberName, accountsubscription.FieldEmail:
			values[i] = new(sql.NullString)
		case accountsubscription.FieldStartTime, accountsubscription.FieldEndTime:
			values[i] = new(sql.NullTime)
		case accountsubscription.ForeignKeys[0]: // serviceship_account_subscription
			values[i] = new(sql.NullInt64)
		case accountsubscription.ForeignKeys[1]: // serviceship_billing_plan_account_subscription
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccountSubscription fields.
func (as *AccountSubscription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accountsubscription.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			as.ID = int(value.Int64)
		case accountsubscription.FieldAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				as.AccountID = value.Int64
			}
		case accountsubscription.FieldAccountType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_type", values[i])
			} else if value.Valid {
				as.AccountType = accountsubscription.AccountType(value.String)
			}
		case accountsubscription.FieldSubscriberName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscriber_name", values[i])
			} else if value.Valid {
				as.SubscriberName = value.String
			}
		case accountsubscription.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				as.Email = value.String
			}
		case accountsubscription.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				as.StartTime = value.Time
			}
		case accountsubscription.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				as.EndTime = value.Time
			}
		case accountsubscription.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field serviceship_account_subscription", value)
			} else if value.Valid {
				as.serviceship_account_subscription = new(int)
				*as.serviceship_account_subscription = int(value.Int64)
			}
		case accountsubscription.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field serviceship_billing_plan_account_subscription", value)
			} else if value.Valid {
				as.serviceship_billing_plan_account_subscription = new(int)
				*as.serviceship_billing_plan_account_subscription = int(value.Int64)
			}
		default:
			as.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AccountSubscription.
// This includes values selected through modifiers, order, etc.
func (as *AccountSubscription) Value(name string) (ent.Value, error) {
	return as.selectValues.Get(name)
}

// QueryServiceshipBillingPlan queries the "serviceship_billing_plan" edge of the AccountSubscription entity.
func (as *AccountSubscription) QueryServiceshipBillingPlan() *ServiceshipBillingPlanQuery {
	return NewAccountSubscriptionClient(as.config).QueryServiceshipBillingPlan(as)
}

// QueryServiceship queries the "serviceship" edge of the AccountSubscription entity.
func (as *AccountSubscription) QueryServiceship() *ServiceshipQuery {
	return NewAccountSubscriptionClient(as.config).QueryServiceship(as)
}

// Update returns a builder for updating this AccountSubscription.
// Note that you need to call AccountSubscription.Unwrap() before calling this method if this AccountSubscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *AccountSubscription) Update() *AccountSubscriptionUpdateOne {
	return NewAccountSubscriptionClient(as.config).UpdateOne(as)
}

// Unwrap unwraps the AccountSubscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (as *AccountSubscription) Unwrap() *AccountSubscription {
	_tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccountSubscription is not a transactional entity")
	}
	as.config.driver = _tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *AccountSubscription) String() string {
	var builder strings.Builder
	builder.WriteString("AccountSubscription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", as.ID))
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", as.AccountID))
	builder.WriteString(", ")
	builder.WriteString("account_type=")
	builder.WriteString(fmt.Sprintf("%v", as.AccountType))
	builder.WriteString(", ")
	builder.WriteString("subscriber_name=")
	builder.WriteString(as.SubscriberName)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(as.Email)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(as.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(as.EndTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AccountSubscriptions is a parsable slice of AccountSubscription.
type AccountSubscriptions []*AccountSubscription
