// Code generated by ent, DO NOT EDIT.

package tubeinstructions

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the tubeinstructions type in the database.
	Label = "tube_instructions"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTubeNameEnum holds the string denoting the tube_name_enum field in the database.
	FieldTubeNameEnum = "tube_name_enum"
	// FieldSortOrder holds the string denoting the sort_order field in the database.
	FieldSortOrder = "sort_order"
	// FieldTubeInstructions holds the string denoting the tube_instructions field in the database.
	FieldTubeInstructions = "tube_instructions"
	// FieldTubeName holds the string denoting the tube_name field in the database.
	FieldTubeName = "tube_name"
	// FieldShippingBox holds the string denoting the shipping_box field in the database.
	FieldShippingBox = "shipping_box"
	// FieldTransferTubesToSend holds the string denoting the transfer_tubes_to_send field in the database.
	FieldTransferTubesToSend = "transfer_tubes_to_send"
	// FieldBloodType holds the string denoting the blood_type field in the database.
	FieldBloodType = "blood_type"
	// Table holds the table name of the tubeinstructions in the database.
	Table = "tube_instructions"
)

// Columns holds all SQL columns for tubeinstructions fields.
var Columns = []string{
	FieldID,
	FieldTubeNameEnum,
	FieldSortOrder,
	FieldTubeInstructions,
	FieldTubeName,
	FieldShippingBox,
	FieldTransferTubesToSend,
	FieldBloodType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TubeInstructionsValidator is a validator for the "tube_instructions" field. It is called by the builders before save.
	TubeInstructionsValidator func(string) error
	// DefaultBloodType holds the default value on creation for the "blood_type" field.
	DefaultBloodType bool
)

// OrderOption defines the ordering options for the TubeInstructions queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTubeNameEnum orders the results by the tube_name_enum field.
func ByTubeNameEnum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTubeNameEnum, opts...).ToFunc()
}

// BySortOrder orders the results by the sort_order field.
func BySortOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSortOrder, opts...).ToFunc()
}

// ByTubeInstructions orders the results by the tube_instructions field.
func ByTubeInstructions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTubeInstructions, opts...).ToFunc()
}

// ByTubeName orders the results by the tube_name field.
func ByTubeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTubeName, opts...).ToFunc()
}

// ByShippingBox orders the results by the shipping_box field.
func ByShippingBox(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShippingBox, opts...).ToFunc()
}

// ByTransferTubesToSend orders the results by the transfer_tubes_to_send field.
func ByTransferTubesToSend(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransferTubesToSend, opts...).ToFunc()
}

// ByBloodType orders the results by the blood_type field.
func ByBloodType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBloodType, opts...).ToFunc()
}
