// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/serviceship"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Serviceship is the model entity for the Serviceship schema.
type Serviceship struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Tag holds the value of the "tag" field.
	Tag string `json:"tag,omitempty"`
	// Type holds the value of the "type" field.
	Type serviceship.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceshipQuery when eager-loading is set.
	Edges        ServiceshipEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ServiceshipEdges holds the relations/edges for other nodes in the graph.
type ServiceshipEdges struct {
	// ServiceshipBillingPlan holds the value of the serviceship_billing_plan edge.
	ServiceshipBillingPlan []*ServiceshipBillingPlan `json:"serviceship_billing_plan,omitempty"`
	// AccountSubscription holds the value of the account_subscription edge.
	AccountSubscription []*AccountSubscription `json:"account_subscription,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ServiceshipBillingPlanOrErr returns the ServiceshipBillingPlan value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceshipEdges) ServiceshipBillingPlanOrErr() ([]*ServiceshipBillingPlan, error) {
	if e.loadedTypes[0] {
		return e.ServiceshipBillingPlan, nil
	}
	return nil, &NotLoadedError{edge: "serviceship_billing_plan"}
}

// AccountSubscriptionOrErr returns the AccountSubscription value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceshipEdges) AccountSubscriptionOrErr() ([]*AccountSubscription, error) {
	if e.loadedTypes[1] {
		return e.AccountSubscription, nil
	}
	return nil, &NotLoadedError{edge: "account_subscription"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Serviceship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case serviceship.FieldID:
			values[i] = new(sql.NullInt64)
		case serviceship.FieldTag, serviceship.FieldType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Serviceship fields.
func (s *Serviceship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serviceship.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case serviceship.FieldTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[i])
			} else if value.Valid {
				s.Tag = value.String
			}
		case serviceship.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = serviceship.Type(value.String)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Serviceship.
// This includes values selected through modifiers, order, etc.
func (s *Serviceship) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryServiceshipBillingPlan queries the "serviceship_billing_plan" edge of the Serviceship entity.
func (s *Serviceship) QueryServiceshipBillingPlan() *ServiceshipBillingPlanQuery {
	return NewServiceshipClient(s.config).QueryServiceshipBillingPlan(s)
}

// QueryAccountSubscription queries the "account_subscription" edge of the Serviceship entity.
func (s *Serviceship) QueryAccountSubscription() *AccountSubscriptionQuery {
	return NewServiceshipClient(s.config).QueryAccountSubscription(s)
}

// Update returns a builder for updating this Serviceship.
// Note that you need to call Serviceship.Unwrap() before calling this method if this Serviceship
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Serviceship) Update() *ServiceshipUpdateOne {
	return NewServiceshipClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Serviceship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Serviceship) Unwrap() *Serviceship {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Serviceship is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Serviceship) String() string {
	var builder strings.Builder
	builder.WriteString("Serviceship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("tag=")
	builder.WriteString(s.Tag)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", s.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Serviceships is a parsable slice of Serviceship.
type Serviceships []*Serviceship
