// Code generated by ent, DO NOT EDIT.

package internaluser

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the internaluser type in the database.
	Label = "internal_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "internal_user_id"
	// FieldInternalUserRole holds the string denoting the internal_user_role field in the database.
	FieldInternalUserRole = "internal_user_role"
	// FieldInternalUserName holds the string denoting the internal_user_name field in the database.
	FieldInternalUserName = "internal_user_name"
	// FieldInternalUserFirstname holds the string denoting the internal_user_firstname field in the database.
	FieldInternalUserFirstname = "internal_user_firstname"
	// FieldInternalUserLastname holds the string denoting the internal_user_lastname field in the database.
	FieldInternalUserLastname = "internal_user_lastname"
	// FieldInternalUserMiddleName holds the string denoting the internal_user_middle_name field in the database.
	FieldInternalUserMiddleName = "internal_user_middle_name"
	// FieldInternalUserIsFullTime holds the string denoting the internal_user_is_full_time field in the database.
	FieldInternalUserIsFullTime = "internal_user_is_full_time"
	// FieldInternalUserEmail holds the string denoting the internal_user_email field in the database.
	FieldInternalUserEmail = "internal_user_email"
	// FieldInternalUserPhone holds the string denoting the internal_user_phone field in the database.
	FieldInternalUserPhone = "internal_user_phone"
	// FieldIsActive holds the string denoting the isactive field in the database.
	FieldIsActive = "isActive"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldInternalUserType holds the string denoting the internal_user_type field in the database.
	FieldInternalUserType = "internal_user_type"
	// FieldInternalUserRoleID holds the string denoting the internal_user_role_id field in the database.
	FieldInternalUserRoleID = "internal_user_role_id"
	// EdgeSalesTeam holds the string denoting the sales_team edge name in mutations.
	EdgeSalesTeam = "sales_team"
	// EdgeInternalUserContacts holds the string denoting the internal_user_contacts edge name in mutations.
	EdgeInternalUserContacts = "internal_user_contacts"
	// EdgeInternalUserAddresses holds the string denoting the internal_user_addresses edge name in mutations.
	EdgeInternalUserAddresses = "internal_user_addresses"
	// EdgeCustomers holds the string denoting the customers edge name in mutations.
	EdgeCustomers = "customers"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeInternalUserSettings holds the string denoting the internal_user_settings edge name in mutations.
	EdgeInternalUserSettings = "internal_user_settings"
	// SalesTeamFieldID holds the string denoting the ID field of the SalesTeam.
	SalesTeamFieldID = "id"
	// ContactFieldID holds the string denoting the ID field of the Contact.
	ContactFieldID = "contact_id"
	// AddressFieldID holds the string denoting the ID field of the Address.
	AddressFieldID = "address_id"
	// CustomerFieldID holds the string denoting the ID field of the Customer.
	CustomerFieldID = "customer_id"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "user_id"
	// SettingFieldID holds the string denoting the ID field of the Setting.
	SettingFieldID = "setting_id"
	// Table holds the table name of the internaluser in the database.
	Table = "internal_user"
	// SalesTeamTable is the table that holds the sales_team relation/edge.
	SalesTeamTable = "sales_team"
	// SalesTeamInverseTable is the table name for the SalesTeam entity.
	// It exists in this package in order to avoid circular dependency with the "salesteam" package.
	SalesTeamInverseTable = "sales_team"
	// SalesTeamColumn is the table column denoting the sales_team relation/edge.
	SalesTeamColumn = "internal_user_id"
	// InternalUserContactsTable is the table that holds the internal_user_contacts relation/edge.
	InternalUserContactsTable = "contact"
	// InternalUserContactsInverseTable is the table name for the Contact entity.
	// It exists in this package in order to avoid circular dependency with the "contact" package.
	InternalUserContactsInverseTable = "contact"
	// InternalUserContactsColumn is the table column denoting the internal_user_contacts relation/edge.
	InternalUserContactsColumn = "internal_user_id"
	// InternalUserAddressesTable is the table that holds the internal_user_addresses relation/edge.
	InternalUserAddressesTable = "address"
	// InternalUserAddressesInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	InternalUserAddressesInverseTable = "address"
	// InternalUserAddressesColumn is the table column denoting the internal_user_addresses relation/edge.
	InternalUserAddressesColumn = "internal_user_id"
	// CustomersTable is the table that holds the customers relation/edge.
	CustomersTable = "customer"
	// CustomersInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomersInverseTable = "customer"
	// CustomersColumn is the table column denoting the customers relation/edge.
	CustomersColumn = "sales_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "internal_user"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "user"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// InternalUserSettingsTable is the table that holds the internal_user_settings relation/edge. The primary key declared below.
	InternalUserSettingsTable = "internal_user_internal_user_settings"
	// InternalUserSettingsInverseTable is the table name for the Setting entity.
	// It exists in this package in order to avoid circular dependency with the "setting" package.
	InternalUserSettingsInverseTable = "setting"
)

// Columns holds all SQL columns for internaluser fields.
var Columns = []string{
	FieldID,
	FieldInternalUserRole,
	FieldInternalUserName,
	FieldInternalUserFirstname,
	FieldInternalUserLastname,
	FieldInternalUserMiddleName,
	FieldInternalUserIsFullTime,
	FieldInternalUserEmail,
	FieldInternalUserPhone,
	FieldIsActive,
	FieldUserID,
	FieldInternalUserType,
	FieldInternalUserRoleID,
}

var (
	// InternalUserSettingsPrimaryKey and InternalUserSettingsColumn2 are the table columns denoting the
	// primary key for the internal_user_settings relation (M2M).
	InternalUserSettingsPrimaryKey = []string{"internal_user_id", "setting_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultInternalUserIsFullTime holds the default value on creation for the "internal_user_is_full_time" field.
	DefaultInternalUserIsFullTime bool
	// DefaultIsActive holds the default value on creation for the "isActive" field.
	DefaultIsActive bool
)

// OrderOption defines the ordering options for the InternalUser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInternalUserRole orders the results by the internal_user_role field.
func ByInternalUserRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalUserRole, opts...).ToFunc()
}

// ByInternalUserName orders the results by the internal_user_name field.
func ByInternalUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalUserName, opts...).ToFunc()
}

// ByInternalUserFirstname orders the results by the internal_user_firstname field.
func ByInternalUserFirstname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalUserFirstname, opts...).ToFunc()
}

// ByInternalUserLastname orders the results by the internal_user_lastname field.
func ByInternalUserLastname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalUserLastname, opts...).ToFunc()
}

// ByInternalUserMiddleName orders the results by the internal_user_middle_name field.
func ByInternalUserMiddleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalUserMiddleName, opts...).ToFunc()
}

// ByInternalUserIsFullTime orders the results by the internal_user_is_full_time field.
func ByInternalUserIsFullTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalUserIsFullTime, opts...).ToFunc()
}

// ByInternalUserEmail orders the results by the internal_user_email field.
func ByInternalUserEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalUserEmail, opts...).ToFunc()
}

// ByInternalUserPhone orders the results by the internal_user_phone field.
func ByInternalUserPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalUserPhone, opts...).ToFunc()
}

// ByIsActive orders the results by the isActive field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByInternalUserType orders the results by the internal_user_type field.
func ByInternalUserType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalUserType, opts...).ToFunc()
}

// ByInternalUserRoleID orders the results by the internal_user_role_id field.
func ByInternalUserRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalUserRoleID, opts...).ToFunc()
}

// BySalesTeamCount orders the results by sales_team count.
func BySalesTeamCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSalesTeamStep(), opts...)
	}
}

// BySalesTeam orders the results by sales_team terms.
func BySalesTeam(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSalesTeamStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInternalUserContactsCount orders the results by internal_user_contacts count.
func ByInternalUserContactsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInternalUserContactsStep(), opts...)
	}
}

// ByInternalUserContacts orders the results by internal_user_contacts terms.
func ByInternalUserContacts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInternalUserContactsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInternalUserAddressesCount orders the results by internal_user_addresses count.
func ByInternalUserAddressesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInternalUserAddressesStep(), opts...)
	}
}

// ByInternalUserAddresses orders the results by internal_user_addresses terms.
func ByInternalUserAddresses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInternalUserAddressesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCustomersCount orders the results by customers count.
func ByCustomersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCustomersStep(), opts...)
	}
}

// ByCustomers orders the results by customers terms.
func ByCustomers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByInternalUserSettingsCount orders the results by internal_user_settings count.
func ByInternalUserSettingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInternalUserSettingsStep(), opts...)
	}
}

// ByInternalUserSettings orders the results by internal_user_settings terms.
func ByInternalUserSettings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInternalUserSettingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSalesTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SalesTeamInverseTable, SalesTeamFieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SalesTeamTable, SalesTeamColumn),
	)
}
func newInternalUserContactsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InternalUserContactsInverseTable, ContactFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InternalUserContactsTable, InternalUserContactsColumn),
	)
}
func newInternalUserAddressesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InternalUserAddressesInverseTable, AddressFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InternalUserAddressesTable, InternalUserAddressesColumn),
	)
}
func newCustomersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomersInverseTable, CustomerFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CustomersTable, CustomersColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newInternalUserSettingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InternalUserSettingsInverseTable, SettingFieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, InternalUserSettingsTable, InternalUserSettingsPrimaryKey...),
	)
}
