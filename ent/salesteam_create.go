// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/internaluser"
	"coresamples/ent/salesteam"
	"coresamples/ent/salestitle"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SalesTeamCreate is the builder for creating a SalesTeam entity.
type SalesTeamCreate struct {
	config
	mutation *SalesTeamMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalUserID sets the "internal_user_id" field.
func (stc *SalesTeamCreate) SetInternalUserID(i int) *SalesTeamCreate {
	stc.mutation.SetInternalUserID(i)
	return stc
}

// SetSupervisorID sets the "supervisor_id" field.
func (stc *SalesTeamCreate) SetSupervisorID(i int) *SalesTeamCreate {
	stc.mutation.SetSupervisorID(i)
	return stc
}

// SetNillableSupervisorID sets the "supervisor_id" field if the given value is not nil.
func (stc *SalesTeamCreate) SetNillableSupervisorID(i *int) *SalesTeamCreate {
	if i != nil {
		stc.SetSupervisorID(*i)
	}
	return stc
}

// SetTitleID sets the "title_id" field.
func (stc *SalesTeamCreate) SetTitleID(i int) *SalesTeamCreate {
	stc.mutation.SetTitleID(i)
	return stc
}

// SetNillableTitleID sets the "title_id" field if the given value is not nil.
func (stc *SalesTeamCreate) SetNillableTitleID(i *int) *SalesTeamCreate {
	if i != nil {
		stc.SetTitleID(*i)
	}
	return stc
}

// SetCreatedTime sets the "created_time" field.
func (stc *SalesTeamCreate) SetCreatedTime(t time.Time) *SalesTeamCreate {
	stc.mutation.SetCreatedTime(t)
	return stc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (stc *SalesTeamCreate) SetNillableCreatedTime(t *time.Time) *SalesTeamCreate {
	if t != nil {
		stc.SetCreatedTime(*t)
	}
	return stc
}

// SetUpdatedTime sets the "updated_time" field.
func (stc *SalesTeamCreate) SetUpdatedTime(t time.Time) *SalesTeamCreate {
	stc.mutation.SetUpdatedTime(t)
	return stc
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (stc *SalesTeamCreate) SetNillableUpdatedTime(t *time.Time) *SalesTeamCreate {
	if t != nil {
		stc.SetUpdatedTime(*t)
	}
	return stc
}

// AddSubordinateIDs adds the "subordinates" edge to the SalesTeam entity by IDs.
func (stc *SalesTeamCreate) AddSubordinateIDs(ids ...int) *SalesTeamCreate {
	stc.mutation.AddSubordinateIDs(ids...)
	return stc
}

// AddSubordinates adds the "subordinates" edges to the SalesTeam entity.
func (stc *SalesTeamCreate) AddSubordinates(s ...*SalesTeam) *SalesTeamCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stc.AddSubordinateIDs(ids...)
}

// SetSupervisor sets the "supervisor" edge to the SalesTeam entity.
func (stc *SalesTeamCreate) SetSupervisor(s *SalesTeam) *SalesTeamCreate {
	return stc.SetSupervisorID(s.ID)
}

// SetInternalUser sets the "internal_user" edge to the InternalUser entity.
func (stc *SalesTeamCreate) SetInternalUser(i *InternalUser) *SalesTeamCreate {
	return stc.SetInternalUserID(i.ID)
}

// SetTitle sets the "title" edge to the SalesTitle entity.
func (stc *SalesTeamCreate) SetTitle(s *SalesTitle) *SalesTeamCreate {
	return stc.SetTitleID(s.ID)
}

// Mutation returns the SalesTeamMutation object of the builder.
func (stc *SalesTeamCreate) Mutation() *SalesTeamMutation {
	return stc.mutation
}

// Save creates the SalesTeam in the database.
func (stc *SalesTeamCreate) Save(ctx context.Context) (*SalesTeam, error) {
	stc.defaults()
	return withHooks(ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *SalesTeamCreate) SaveX(ctx context.Context) *SalesTeam {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *SalesTeamCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *SalesTeamCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stc *SalesTeamCreate) defaults() {
	if _, ok := stc.mutation.CreatedTime(); !ok {
		v := salesteam.DefaultCreatedTime()
		stc.mutation.SetCreatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *SalesTeamCreate) check() error {
	if _, ok := stc.mutation.InternalUserID(); !ok {
		return &ValidationError{Name: "internal_user_id", err: errors.New(`ent: missing required field "SalesTeam.internal_user_id"`)}
	}
	if _, ok := stc.mutation.CreatedTime(); !ok {
		return &ValidationError{Name: "created_time", err: errors.New(`ent: missing required field "SalesTeam.created_time"`)}
	}
	if _, ok := stc.mutation.InternalUserID(); !ok {
		return &ValidationError{Name: "internal_user", err: errors.New(`ent: missing required edge "SalesTeam.internal_user"`)}
	}
	return nil
}

func (stc *SalesTeamCreate) sqlSave(ctx context.Context) (*SalesTeam, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *SalesTeamCreate) createSpec() (*SalesTeam, *sqlgraph.CreateSpec) {
	var (
		_node = &SalesTeam{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(salesteam.Table, sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt))
	)
	_spec.OnConflict = stc.conflict
	if value, ok := stc.mutation.CreatedTime(); ok {
		_spec.SetField(salesteam.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = value
	}
	if value, ok := stc.mutation.UpdatedTime(); ok {
		_spec.SetField(salesteam.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = value
	}
	if nodes := stc.mutation.SubordinatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   salesteam.SubordinatesTable,
			Columns: []string{salesteam.SubordinatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.SupervisorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   salesteam.SupervisorTable,
			Columns: []string{salesteam.SupervisorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SupervisorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.InternalUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   salesteam.InternalUserTable,
			Columns: []string{salesteam.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InternalUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.TitleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   salesteam.TitleTable,
			Columns: []string{salesteam.TitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salestitle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TitleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SalesTeam.Create().
//		SetInternalUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SalesTeamUpsert) {
//			SetInternalUserID(v+v).
//		}).
//		Exec(ctx)
func (stc *SalesTeamCreate) OnConflict(opts ...sql.ConflictOption) *SalesTeamUpsertOne {
	stc.conflict = opts
	return &SalesTeamUpsertOne{
		create: stc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SalesTeam.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stc *SalesTeamCreate) OnConflictColumns(columns ...string) *SalesTeamUpsertOne {
	stc.conflict = append(stc.conflict, sql.ConflictColumns(columns...))
	return &SalesTeamUpsertOne{
		create: stc,
	}
}

type (
	// SalesTeamUpsertOne is the builder for "upsert"-ing
	//  one SalesTeam node.
	SalesTeamUpsertOne struct {
		create *SalesTeamCreate
	}

	// SalesTeamUpsert is the "OnConflict" setter.
	SalesTeamUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalUserID sets the "internal_user_id" field.
func (u *SalesTeamUpsert) SetInternalUserID(v int) *SalesTeamUpsert {
	u.Set(salesteam.FieldInternalUserID, v)
	return u
}

// UpdateInternalUserID sets the "internal_user_id" field to the value that was provided on create.
func (u *SalesTeamUpsert) UpdateInternalUserID() *SalesTeamUpsert {
	u.SetExcluded(salesteam.FieldInternalUserID)
	return u
}

// SetSupervisorID sets the "supervisor_id" field.
func (u *SalesTeamUpsert) SetSupervisorID(v int) *SalesTeamUpsert {
	u.Set(salesteam.FieldSupervisorID, v)
	return u
}

// UpdateSupervisorID sets the "supervisor_id" field to the value that was provided on create.
func (u *SalesTeamUpsert) UpdateSupervisorID() *SalesTeamUpsert {
	u.SetExcluded(salesteam.FieldSupervisorID)
	return u
}

// ClearSupervisorID clears the value of the "supervisor_id" field.
func (u *SalesTeamUpsert) ClearSupervisorID() *SalesTeamUpsert {
	u.SetNull(salesteam.FieldSupervisorID)
	return u
}

// SetTitleID sets the "title_id" field.
func (u *SalesTeamUpsert) SetTitleID(v int) *SalesTeamUpsert {
	u.Set(salesteam.FieldTitleID, v)
	return u
}

// UpdateTitleID sets the "title_id" field to the value that was provided on create.
func (u *SalesTeamUpsert) UpdateTitleID() *SalesTeamUpsert {
	u.SetExcluded(salesteam.FieldTitleID)
	return u
}

// ClearTitleID clears the value of the "title_id" field.
func (u *SalesTeamUpsert) ClearTitleID() *SalesTeamUpsert {
	u.SetNull(salesteam.FieldTitleID)
	return u
}

// SetCreatedTime sets the "created_time" field.
func (u *SalesTeamUpsert) SetCreatedTime(v time.Time) *SalesTeamUpsert {
	u.Set(salesteam.FieldCreatedTime, v)
	return u
}

// UpdateCreatedTime sets the "created_time" field to the value that was provided on create.
func (u *SalesTeamUpsert) UpdateCreatedTime() *SalesTeamUpsert {
	u.SetExcluded(salesteam.FieldCreatedTime)
	return u
}

// SetUpdatedTime sets the "updated_time" field.
func (u *SalesTeamUpsert) SetUpdatedTime(v time.Time) *SalesTeamUpsert {
	u.Set(salesteam.FieldUpdatedTime, v)
	return u
}

// UpdateUpdatedTime sets the "updated_time" field to the value that was provided on create.
func (u *SalesTeamUpsert) UpdateUpdatedTime() *SalesTeamUpsert {
	u.SetExcluded(salesteam.FieldUpdatedTime)
	return u
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (u *SalesTeamUpsert) ClearUpdatedTime() *SalesTeamUpsert {
	u.SetNull(salesteam.FieldUpdatedTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SalesTeam.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SalesTeamUpsertOne) UpdateNewValues() *SalesTeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SalesTeam.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SalesTeamUpsertOne) Ignore() *SalesTeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SalesTeamUpsertOne) DoNothing() *SalesTeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SalesTeamCreate.OnConflict
// documentation for more info.
func (u *SalesTeamUpsertOne) Update(set func(*SalesTeamUpsert)) *SalesTeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SalesTeamUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalUserID sets the "internal_user_id" field.
func (u *SalesTeamUpsertOne) SetInternalUserID(v int) *SalesTeamUpsertOne {
	return u.Update(func(s *SalesTeamUpsert) {
		s.SetInternalUserID(v)
	})
}

// UpdateInternalUserID sets the "internal_user_id" field to the value that was provided on create.
func (u *SalesTeamUpsertOne) UpdateInternalUserID() *SalesTeamUpsertOne {
	return u.Update(func(s *SalesTeamUpsert) {
		s.UpdateInternalUserID()
	})
}

// SetSupervisorID sets the "supervisor_id" field.
func (u *SalesTeamUpsertOne) SetSupervisorID(v int) *SalesTeamUpsertOne {
	return u.Update(func(s *SalesTeamUpsert) {
		s.SetSupervisorID(v)
	})
}

// UpdateSupervisorID sets the "supervisor_id" field to the value that was provided on create.
func (u *SalesTeamUpsertOne) UpdateSupervisorID() *SalesTeamUpsertOne {
	return u.Update(func(s *SalesTeamUpsert) {
		s.UpdateSupervisorID()
	})
}

// ClearSupervisorID clears the value of the "supervisor_id" field.
func (u *SalesTeamUpsertOne) ClearSupervisorID() *SalesTeamUpsertOne {
	return u.Update(func(s *SalesTeamUpsert) {
		s.ClearSupervisorID()
	})
}

// SetTitleID sets the "title_id" field.
func (u *SalesTeamUpsertOne) SetTitleID(v int) *SalesTeamUpsertOne {
	return u.Update(func(s *SalesTeamUpsert) {
		s.SetTitleID(v)
	})
}

// UpdateTitleID sets the "title_id" field to the value that was provided on create.
func (u *SalesTeamUpsertOne) UpdateTitleID() *SalesTeamUpsertOne {
	return u.Update(func(s *SalesTeamUpsert) {
		s.UpdateTitleID()
	})
}

// ClearTitleID clears the value of the "title_id" field.
func (u *SalesTeamUpsertOne) ClearTitleID() *SalesTeamUpsertOne {
	return u.Update(func(s *SalesTeamUpsert) {
		s.ClearTitleID()
	})
}

// SetCreatedTime sets the "created_time" field.
func (u *SalesTeamUpsertOne) SetCreatedTime(v time.Time) *SalesTeamUpsertOne {
	return u.Update(func(s *SalesTeamUpsert) {
		s.SetCreatedTime(v)
	})
}

// UpdateCreatedTime sets the "created_time" field to the value that was provided on create.
func (u *SalesTeamUpsertOne) UpdateCreatedTime() *SalesTeamUpsertOne {
	return u.Update(func(s *SalesTeamUpsert) {
		s.UpdateCreatedTime()
	})
}

// SetUpdatedTime sets the "updated_time" field.
func (u *SalesTeamUpsertOne) SetUpdatedTime(v time.Time) *SalesTeamUpsertOne {
	return u.Update(func(s *SalesTeamUpsert) {
		s.SetUpdatedTime(v)
	})
}

// UpdateUpdatedTime sets the "updated_time" field to the value that was provided on create.
func (u *SalesTeamUpsertOne) UpdateUpdatedTime() *SalesTeamUpsertOne {
	return u.Update(func(s *SalesTeamUpsert) {
		s.UpdateUpdatedTime()
	})
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (u *SalesTeamUpsertOne) ClearUpdatedTime() *SalesTeamUpsertOne {
	return u.Update(func(s *SalesTeamUpsert) {
		s.ClearUpdatedTime()
	})
}

// Exec executes the query.
func (u *SalesTeamUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SalesTeamCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SalesTeamUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SalesTeamUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SalesTeamUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SalesTeamCreateBulk is the builder for creating many SalesTeam entities in bulk.
type SalesTeamCreateBulk struct {
	config
	err      error
	builders []*SalesTeamCreate
	conflict []sql.ConflictOption
}

// Save creates the SalesTeam entities in the database.
func (stcb *SalesTeamCreateBulk) Save(ctx context.Context) ([]*SalesTeam, error) {
	if stcb.err != nil {
		return nil, stcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*SalesTeam, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SalesTeamMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = stcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *SalesTeamCreateBulk) SaveX(ctx context.Context) []*SalesTeam {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *SalesTeamCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *SalesTeamCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SalesTeam.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SalesTeamUpsert) {
//			SetInternalUserID(v+v).
//		}).
//		Exec(ctx)
func (stcb *SalesTeamCreateBulk) OnConflict(opts ...sql.ConflictOption) *SalesTeamUpsertBulk {
	stcb.conflict = opts
	return &SalesTeamUpsertBulk{
		create: stcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SalesTeam.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stcb *SalesTeamCreateBulk) OnConflictColumns(columns ...string) *SalesTeamUpsertBulk {
	stcb.conflict = append(stcb.conflict, sql.ConflictColumns(columns...))
	return &SalesTeamUpsertBulk{
		create: stcb,
	}
}

// SalesTeamUpsertBulk is the builder for "upsert"-ing
// a bulk of SalesTeam nodes.
type SalesTeamUpsertBulk struct {
	create *SalesTeamCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SalesTeam.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SalesTeamUpsertBulk) UpdateNewValues() *SalesTeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SalesTeam.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SalesTeamUpsertBulk) Ignore() *SalesTeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SalesTeamUpsertBulk) DoNothing() *SalesTeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SalesTeamCreateBulk.OnConflict
// documentation for more info.
func (u *SalesTeamUpsertBulk) Update(set func(*SalesTeamUpsert)) *SalesTeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SalesTeamUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalUserID sets the "internal_user_id" field.
func (u *SalesTeamUpsertBulk) SetInternalUserID(v int) *SalesTeamUpsertBulk {
	return u.Update(func(s *SalesTeamUpsert) {
		s.SetInternalUserID(v)
	})
}

// UpdateInternalUserID sets the "internal_user_id" field to the value that was provided on create.
func (u *SalesTeamUpsertBulk) UpdateInternalUserID() *SalesTeamUpsertBulk {
	return u.Update(func(s *SalesTeamUpsert) {
		s.UpdateInternalUserID()
	})
}

// SetSupervisorID sets the "supervisor_id" field.
func (u *SalesTeamUpsertBulk) SetSupervisorID(v int) *SalesTeamUpsertBulk {
	return u.Update(func(s *SalesTeamUpsert) {
		s.SetSupervisorID(v)
	})
}

// UpdateSupervisorID sets the "supervisor_id" field to the value that was provided on create.
func (u *SalesTeamUpsertBulk) UpdateSupervisorID() *SalesTeamUpsertBulk {
	return u.Update(func(s *SalesTeamUpsert) {
		s.UpdateSupervisorID()
	})
}

// ClearSupervisorID clears the value of the "supervisor_id" field.
func (u *SalesTeamUpsertBulk) ClearSupervisorID() *SalesTeamUpsertBulk {
	return u.Update(func(s *SalesTeamUpsert) {
		s.ClearSupervisorID()
	})
}

// SetTitleID sets the "title_id" field.
func (u *SalesTeamUpsertBulk) SetTitleID(v int) *SalesTeamUpsertBulk {
	return u.Update(func(s *SalesTeamUpsert) {
		s.SetTitleID(v)
	})
}

// UpdateTitleID sets the "title_id" field to the value that was provided on create.
func (u *SalesTeamUpsertBulk) UpdateTitleID() *SalesTeamUpsertBulk {
	return u.Update(func(s *SalesTeamUpsert) {
		s.UpdateTitleID()
	})
}

// ClearTitleID clears the value of the "title_id" field.
func (u *SalesTeamUpsertBulk) ClearTitleID() *SalesTeamUpsertBulk {
	return u.Update(func(s *SalesTeamUpsert) {
		s.ClearTitleID()
	})
}

// SetCreatedTime sets the "created_time" field.
func (u *SalesTeamUpsertBulk) SetCreatedTime(v time.Time) *SalesTeamUpsertBulk {
	return u.Update(func(s *SalesTeamUpsert) {
		s.SetCreatedTime(v)
	})
}

// UpdateCreatedTime sets the "created_time" field to the value that was provided on create.
func (u *SalesTeamUpsertBulk) UpdateCreatedTime() *SalesTeamUpsertBulk {
	return u.Update(func(s *SalesTeamUpsert) {
		s.UpdateCreatedTime()
	})
}

// SetUpdatedTime sets the "updated_time" field.
func (u *SalesTeamUpsertBulk) SetUpdatedTime(v time.Time) *SalesTeamUpsertBulk {
	return u.Update(func(s *SalesTeamUpsert) {
		s.SetUpdatedTime(v)
	})
}

// UpdateUpdatedTime sets the "updated_time" field to the value that was provided on create.
func (u *SalesTeamUpsertBulk) UpdateUpdatedTime() *SalesTeamUpsertBulk {
	return u.Update(func(s *SalesTeamUpsert) {
		s.UpdateUpdatedTime()
	})
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (u *SalesTeamUpsertBulk) ClearUpdatedTime() *SalesTeamUpsertBulk {
	return u.Update(func(s *SalesTeamUpsert) {
		s.ClearUpdatedTime()
	})
}

// Exec executes the query.
func (u *SalesTeamUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SalesTeamCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SalesTeamCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SalesTeamUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
