// Code generated by ent, DO NOT EDIT.

package sampleidgenerate

import (
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldLTE(FieldID, id))
}

// Barcode applies equality check predicate on the "barcode" field. It's identical to BarcodeEQ.
func Barcode(v string) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldEQ(FieldBarcode, v))
}

// BarcodeEQ applies the EQ predicate on the "barcode" field.
func BarcodeEQ(v string) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldEQ(FieldBarcode, v))
}

// BarcodeNEQ applies the NEQ predicate on the "barcode" field.
func BarcodeNEQ(v string) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldNEQ(FieldBarcode, v))
}

// BarcodeIn applies the In predicate on the "barcode" field.
func BarcodeIn(vs ...string) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldIn(FieldBarcode, vs...))
}

// BarcodeNotIn applies the NotIn predicate on the "barcode" field.
func BarcodeNotIn(vs ...string) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldNotIn(FieldBarcode, vs...))
}

// BarcodeGT applies the GT predicate on the "barcode" field.
func BarcodeGT(v string) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldGT(FieldBarcode, v))
}

// BarcodeGTE applies the GTE predicate on the "barcode" field.
func BarcodeGTE(v string) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldGTE(FieldBarcode, v))
}

// BarcodeLT applies the LT predicate on the "barcode" field.
func BarcodeLT(v string) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldLT(FieldBarcode, v))
}

// BarcodeLTE applies the LTE predicate on the "barcode" field.
func BarcodeLTE(v string) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldLTE(FieldBarcode, v))
}

// BarcodeContains applies the Contains predicate on the "barcode" field.
func BarcodeContains(v string) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldContains(FieldBarcode, v))
}

// BarcodeHasPrefix applies the HasPrefix predicate on the "barcode" field.
func BarcodeHasPrefix(v string) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldHasPrefix(FieldBarcode, v))
}

// BarcodeHasSuffix applies the HasSuffix predicate on the "barcode" field.
func BarcodeHasSuffix(v string) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldHasSuffix(FieldBarcode, v))
}

// BarcodeIsNil applies the IsNil predicate on the "barcode" field.
func BarcodeIsNil() predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldIsNull(FieldBarcode))
}

// BarcodeNotNil applies the NotNil predicate on the "barcode" field.
func BarcodeNotNil() predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldNotNull(FieldBarcode))
}

// BarcodeEqualFold applies the EqualFold predicate on the "barcode" field.
func BarcodeEqualFold(v string) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldEqualFold(FieldBarcode, v))
}

// BarcodeContainsFold applies the ContainsFold predicate on the "barcode" field.
func BarcodeContainsFold(v string) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.FieldContainsFold(FieldBarcode, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SampleIDGenerate) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SampleIDGenerate) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SampleIDGenerate) predicate.SampleIDGenerate {
	return predicate.SampleIDGenerate(sql.NotPredicates(p))
}
