// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"user_id"`
	// UserName holds the value of the "user_name" field.
	UserName string `json:"user_name,omitempty" username`
	// EmailUserID holds the value of the "email_user_id" field.
	EmailUserID string `json:"email_user_id,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// TwoFactorAuthenticationSecret holds the value of the "two_factor_authentication_secret" field.
	TwoFactorAuthenticationSecret string `json:"two_factor_authentication_secret,omitempty"`
	// IsTwoFactorAuthenticationEnabled holds the value of the "is_two_factor_authentication_enabled" field.
	IsTwoFactorAuthenticationEnabled bool `json:"is_two_factor_authentication_enabled,omitempty"`
	// UserGroup holds the value of the "user_group" field.
	UserGroup string `json:"user_group,omitempty"`
	// ImportedUserWithSaltPassword holds the value of the "imported_user_with_salt_password" field.
	ImportedUserWithSaltPassword bool `json:"imported_user_with_salt_password,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"isActive"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Clinic holds the value of the clinic edge.
	Clinic []*Clinic `json:"clinic,omitempty"`
	// Customer holds the value of the customer edge.
	Customer []*Customer `json:"customer,omitempty"`
	// Patient holds the value of the patient edge.
	Patient []*Patient `json:"patient,omitempty"`
	// InternalUser holds the value of the internal_user edge.
	InternalUser []*InternalUser `json:"internal_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ClinicOrErr returns the Clinic value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ClinicOrErr() ([]*Clinic, error) {
	if e.loadedTypes[0] {
		return e.Clinic, nil
	}
	return nil, &NotLoadedError{edge: "clinic"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CustomerOrErr() ([]*Customer, error) {
	if e.loadedTypes[1] {
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PatientOrErr() ([]*Patient, error) {
	if e.loadedTypes[2] {
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// InternalUserOrErr returns the InternalUser value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) InternalUserOrErr() ([]*InternalUser, error) {
	if e.loadedTypes[3] {
		return e.InternalUser, nil
	}
	return nil, &NotLoadedError{edge: "internal_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldIsTwoFactorAuthenticationEnabled, user.FieldImportedUserWithSaltPassword, user.FieldIsActive:
			values[i] = new(sql.NullBool)
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldUserName, user.FieldEmailUserID, user.FieldPassword, user.FieldTwoFactorAuthenticationSecret, user.FieldUserGroup:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				u.UserName = value.String
			}
		case user.FieldEmailUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email_user_id", values[i])
			} else if value.Valid {
				u.EmailUserID = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldTwoFactorAuthenticationSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field two_factor_authentication_secret", values[i])
			} else if value.Valid {
				u.TwoFactorAuthenticationSecret = value.String
			}
		case user.FieldIsTwoFactorAuthenticationEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_two_factor_authentication_enabled", values[i])
			} else if value.Valid {
				u.IsTwoFactorAuthenticationEnabled = value.Bool
			}
		case user.FieldUserGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_group", values[i])
			} else if value.Valid {
				u.UserGroup = value.String
			}
		case user.FieldImportedUserWithSaltPassword:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field imported_user_with_salt_password", values[i])
			} else if value.Valid {
				u.ImportedUserWithSaltPassword = value.Bool
			}
		case user.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				u.IsActive = value.Bool
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryClinic queries the "clinic" edge of the User entity.
func (u *User) QueryClinic() *ClinicQuery {
	return NewUserClient(u.config).QueryClinic(u)
}

// QueryCustomer queries the "customer" edge of the User entity.
func (u *User) QueryCustomer() *CustomerQuery {
	return NewUserClient(u.config).QueryCustomer(u)
}

// QueryPatient queries the "patient" edge of the User entity.
func (u *User) QueryPatient() *PatientQuery {
	return NewUserClient(u.config).QueryPatient(u)
}

// QueryInternalUser queries the "internal_user" edge of the User entity.
func (u *User) QueryInternalUser() *InternalUserQuery {
	return NewUserClient(u.config).QueryInternalUser(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("user_name=")
	builder.WriteString(u.UserName)
	builder.WriteString(", ")
	builder.WriteString("email_user_id=")
	builder.WriteString(u.EmailUserID)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(u.Password)
	builder.WriteString(", ")
	builder.WriteString("two_factor_authentication_secret=")
	builder.WriteString(u.TwoFactorAuthenticationSecret)
	builder.WriteString(", ")
	builder.WriteString("is_two_factor_authentication_enabled=")
	builder.WriteString(fmt.Sprintf("%v", u.IsTwoFactorAuthenticationEnabled))
	builder.WriteString(", ")
	builder.WriteString("user_group=")
	builder.WriteString(u.UserGroup)
	builder.WriteString(", ")
	builder.WriteString("imported_user_with_salt_password=")
	builder.WriteString(fmt.Sprintf("%v", u.ImportedUserWithSaltPassword))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", u.IsActive))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
