// Code generated by ent, DO NOT EDIT.

package testlist

import (
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TestList {
	return predicate.TestList(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TestList {
	return predicate.TestList(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TestList {
	return predicate.TestList(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TestList {
	return predicate.TestList(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TestList {
	return predicate.TestList(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TestList {
	return predicate.TestList(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TestList {
	return predicate.TestList(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TestList {
	return predicate.TestList(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TestList {
	return predicate.TestList(sql.FieldLTE(FieldID, id))
}

// DIGroupName applies equality check predicate on the "DI_group_name" field. It's identical to DIGroupNameEQ.
func DIGroupName(v string) predicate.TestList {
	return predicate.TestList(sql.FieldEQ(FieldDIGroupName, v))
}

// VolumeRequired applies equality check predicate on the "volume_required" field. It's identical to VolumeRequiredEQ.
func VolumeRequired(v float64) predicate.TestList {
	return predicate.TestList(sql.FieldEQ(FieldVolumeRequired, v))
}

// BloodType applies equality check predicate on the "blood_type" field. It's identical to BloodTypeEQ.
func BloodType(v bool) predicate.TestList {
	return predicate.TestList(sql.FieldEQ(FieldBloodType, v))
}

// TestInstrumentEQ applies the EQ predicate on the "test_instrument" field.
func TestInstrumentEQ(v TestInstrument) predicate.TestList {
	return predicate.TestList(sql.FieldEQ(FieldTestInstrument, v))
}

// TestInstrumentNEQ applies the NEQ predicate on the "test_instrument" field.
func TestInstrumentNEQ(v TestInstrument) predicate.TestList {
	return predicate.TestList(sql.FieldNEQ(FieldTestInstrument, v))
}

// TestInstrumentIn applies the In predicate on the "test_instrument" field.
func TestInstrumentIn(vs ...TestInstrument) predicate.TestList {
	return predicate.TestList(sql.FieldIn(FieldTestInstrument, vs...))
}

// TestInstrumentNotIn applies the NotIn predicate on the "test_instrument" field.
func TestInstrumentNotIn(vs ...TestInstrument) predicate.TestList {
	return predicate.TestList(sql.FieldNotIn(FieldTestInstrument, vs...))
}

// TestInstrumentIsNil applies the IsNil predicate on the "test_instrument" field.
func TestInstrumentIsNil() predicate.TestList {
	return predicate.TestList(sql.FieldIsNull(FieldTestInstrument))
}

// TestInstrumentNotNil applies the NotNil predicate on the "test_instrument" field.
func TestInstrumentNotNil() predicate.TestList {
	return predicate.TestList(sql.FieldNotNull(FieldTestInstrument))
}

// TubeTypeEQ applies the EQ predicate on the "tube_type" field.
func TubeTypeEQ(v TubeType) predicate.TestList {
	return predicate.TestList(sql.FieldEQ(FieldTubeType, v))
}

// TubeTypeNEQ applies the NEQ predicate on the "tube_type" field.
func TubeTypeNEQ(v TubeType) predicate.TestList {
	return predicate.TestList(sql.FieldNEQ(FieldTubeType, v))
}

// TubeTypeIn applies the In predicate on the "tube_type" field.
func TubeTypeIn(vs ...TubeType) predicate.TestList {
	return predicate.TestList(sql.FieldIn(FieldTubeType, vs...))
}

// TubeTypeNotIn applies the NotIn predicate on the "tube_type" field.
func TubeTypeNotIn(vs ...TubeType) predicate.TestList {
	return predicate.TestList(sql.FieldNotIn(FieldTubeType, vs...))
}

// DIGroupNameEQ applies the EQ predicate on the "DI_group_name" field.
func DIGroupNameEQ(v string) predicate.TestList {
	return predicate.TestList(sql.FieldEQ(FieldDIGroupName, v))
}

// DIGroupNameNEQ applies the NEQ predicate on the "DI_group_name" field.
func DIGroupNameNEQ(v string) predicate.TestList {
	return predicate.TestList(sql.FieldNEQ(FieldDIGroupName, v))
}

// DIGroupNameIn applies the In predicate on the "DI_group_name" field.
func DIGroupNameIn(vs ...string) predicate.TestList {
	return predicate.TestList(sql.FieldIn(FieldDIGroupName, vs...))
}

// DIGroupNameNotIn applies the NotIn predicate on the "DI_group_name" field.
func DIGroupNameNotIn(vs ...string) predicate.TestList {
	return predicate.TestList(sql.FieldNotIn(FieldDIGroupName, vs...))
}

// DIGroupNameGT applies the GT predicate on the "DI_group_name" field.
func DIGroupNameGT(v string) predicate.TestList {
	return predicate.TestList(sql.FieldGT(FieldDIGroupName, v))
}

// DIGroupNameGTE applies the GTE predicate on the "DI_group_name" field.
func DIGroupNameGTE(v string) predicate.TestList {
	return predicate.TestList(sql.FieldGTE(FieldDIGroupName, v))
}

// DIGroupNameLT applies the LT predicate on the "DI_group_name" field.
func DIGroupNameLT(v string) predicate.TestList {
	return predicate.TestList(sql.FieldLT(FieldDIGroupName, v))
}

// DIGroupNameLTE applies the LTE predicate on the "DI_group_name" field.
func DIGroupNameLTE(v string) predicate.TestList {
	return predicate.TestList(sql.FieldLTE(FieldDIGroupName, v))
}

// DIGroupNameContains applies the Contains predicate on the "DI_group_name" field.
func DIGroupNameContains(v string) predicate.TestList {
	return predicate.TestList(sql.FieldContains(FieldDIGroupName, v))
}

// DIGroupNameHasPrefix applies the HasPrefix predicate on the "DI_group_name" field.
func DIGroupNameHasPrefix(v string) predicate.TestList {
	return predicate.TestList(sql.FieldHasPrefix(FieldDIGroupName, v))
}

// DIGroupNameHasSuffix applies the HasSuffix predicate on the "DI_group_name" field.
func DIGroupNameHasSuffix(v string) predicate.TestList {
	return predicate.TestList(sql.FieldHasSuffix(FieldDIGroupName, v))
}

// DIGroupNameIsNil applies the IsNil predicate on the "DI_group_name" field.
func DIGroupNameIsNil() predicate.TestList {
	return predicate.TestList(sql.FieldIsNull(FieldDIGroupName))
}

// DIGroupNameNotNil applies the NotNil predicate on the "DI_group_name" field.
func DIGroupNameNotNil() predicate.TestList {
	return predicate.TestList(sql.FieldNotNull(FieldDIGroupName))
}

// DIGroupNameEqualFold applies the EqualFold predicate on the "DI_group_name" field.
func DIGroupNameEqualFold(v string) predicate.TestList {
	return predicate.TestList(sql.FieldEqualFold(FieldDIGroupName, v))
}

// DIGroupNameContainsFold applies the ContainsFold predicate on the "DI_group_name" field.
func DIGroupNameContainsFold(v string) predicate.TestList {
	return predicate.TestList(sql.FieldContainsFold(FieldDIGroupName, v))
}

// VolumeRequiredEQ applies the EQ predicate on the "volume_required" field.
func VolumeRequiredEQ(v float64) predicate.TestList {
	return predicate.TestList(sql.FieldEQ(FieldVolumeRequired, v))
}

// VolumeRequiredNEQ applies the NEQ predicate on the "volume_required" field.
func VolumeRequiredNEQ(v float64) predicate.TestList {
	return predicate.TestList(sql.FieldNEQ(FieldVolumeRequired, v))
}

// VolumeRequiredIn applies the In predicate on the "volume_required" field.
func VolumeRequiredIn(vs ...float64) predicate.TestList {
	return predicate.TestList(sql.FieldIn(FieldVolumeRequired, vs...))
}

// VolumeRequiredNotIn applies the NotIn predicate on the "volume_required" field.
func VolumeRequiredNotIn(vs ...float64) predicate.TestList {
	return predicate.TestList(sql.FieldNotIn(FieldVolumeRequired, vs...))
}

// VolumeRequiredGT applies the GT predicate on the "volume_required" field.
func VolumeRequiredGT(v float64) predicate.TestList {
	return predicate.TestList(sql.FieldGT(FieldVolumeRequired, v))
}

// VolumeRequiredGTE applies the GTE predicate on the "volume_required" field.
func VolumeRequiredGTE(v float64) predicate.TestList {
	return predicate.TestList(sql.FieldGTE(FieldVolumeRequired, v))
}

// VolumeRequiredLT applies the LT predicate on the "volume_required" field.
func VolumeRequiredLT(v float64) predicate.TestList {
	return predicate.TestList(sql.FieldLT(FieldVolumeRequired, v))
}

// VolumeRequiredLTE applies the LTE predicate on the "volume_required" field.
func VolumeRequiredLTE(v float64) predicate.TestList {
	return predicate.TestList(sql.FieldLTE(FieldVolumeRequired, v))
}

// BloodTypeEQ applies the EQ predicate on the "blood_type" field.
func BloodTypeEQ(v bool) predicate.TestList {
	return predicate.TestList(sql.FieldEQ(FieldBloodType, v))
}

// BloodTypeNEQ applies the NEQ predicate on the "blood_type" field.
func BloodTypeNEQ(v bool) predicate.TestList {
	return predicate.TestList(sql.FieldNEQ(FieldBloodType, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TestList) predicate.TestList {
	return predicate.TestList(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TestList) predicate.TestList {
	return predicate.TestList(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TestList) predicate.TestList {
	return predicate.TestList(sql.NotPredicates(p))
}
