// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/rbacroles"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RBACRoles is the model entity for the RBACRoles schema.
type RBACRoles struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// InternalName holds the value of the "internal_name" field.
	InternalName string `json:"internal_name,omitempty"`
	// Type holds the value of the "type" field.
	Type rbacroles.Type `json:"type,omitempty"`
	// ClinicID holds the value of the "clinic_id" field.
	ClinicID     int32 `json:"clinic_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RBACRoles) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rbacroles.FieldID, rbacroles.FieldClinicID:
			values[i] = new(sql.NullInt64)
		case rbacroles.FieldName, rbacroles.FieldInternalName, rbacroles.FieldType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RBACRoles fields.
func (rr *RBACRoles) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rbacroles.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rr.ID = int(value.Int64)
		case rbacroles.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rr.Name = value.String
			}
		case rbacroles.FieldInternalName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_name", values[i])
			} else if value.Valid {
				rr.InternalName = value.String
			}
		case rbacroles.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				rr.Type = rbacroles.Type(value.String)
			}
		case rbacroles.FieldClinicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field clinic_id", values[i])
			} else if value.Valid {
				rr.ClinicID = int32(value.Int64)
			}
		default:
			rr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RBACRoles.
// This includes values selected through modifiers, order, etc.
func (rr *RBACRoles) Value(name string) (ent.Value, error) {
	return rr.selectValues.Get(name)
}

// Update returns a builder for updating this RBACRoles.
// Note that you need to call RBACRoles.Unwrap() before calling this method if this RBACRoles
// was returned from a transaction, and the transaction was committed or rolled back.
func (rr *RBACRoles) Update() *RBACRolesUpdateOne {
	return NewRBACRolesClient(rr.config).UpdateOne(rr)
}

// Unwrap unwraps the RBACRoles entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rr *RBACRoles) Unwrap() *RBACRoles {
	_tx, ok := rr.config.driver.(*txDriver)
	if !ok {
		panic("ent: RBACRoles is not a transactional entity")
	}
	rr.config.driver = _tx.drv
	return rr
}

// String implements the fmt.Stringer.
func (rr *RBACRoles) String() string {
	var builder strings.Builder
	builder.WriteString("RBACRoles(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rr.ID))
	builder.WriteString("name=")
	builder.WriteString(rr.Name)
	builder.WriteString(", ")
	builder.WriteString("internal_name=")
	builder.WriteString(rr.InternalName)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", rr.Type))
	builder.WriteString(", ")
	builder.WriteString("clinic_id=")
	builder.WriteString(fmt.Sprintf("%v", rr.ClinicID))
	builder.WriteByte(')')
	return builder.String()
}

// RBACRolesSlice is a parsable slice of RBACRoles.
type RBACRolesSlice []*RBACRoles
