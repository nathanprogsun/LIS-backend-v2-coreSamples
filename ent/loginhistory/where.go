// Code generated by ent, DO NOT EDIT.

package loginhistory

import (
	"coresamples/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEQ(FieldUsername, v))
}

// LoginTime applies equality check predicate on the "login_time" field. It's identical to LoginTimeEQ.
func LoginTime(v time.Time) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEQ(FieldLoginTime, v))
}

// LoginIP applies equality check predicate on the "login_ip" field. It's identical to LoginIPEQ.
func LoginIP(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEQ(FieldLoginIP, v))
}

// LoginSuccessfully applies equality check predicate on the "login_successfully" field. It's identical to LoginSuccessfullyEQ.
func LoginSuccessfully(v bool) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEQ(FieldLoginSuccessfully, v))
}

// FailureReason applies equality check predicate on the "failure_reason" field. It's identical to FailureReasonEQ.
func FailureReason(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEQ(FieldFailureReason, v))
}

// LoginPortal applies equality check predicate on the "login_portal" field. It's identical to LoginPortalEQ.
func LoginPortal(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEQ(FieldLoginPortal, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEQ(FieldToken, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldContainsFold(FieldUsername, v))
}

// LoginTimeEQ applies the EQ predicate on the "login_time" field.
func LoginTimeEQ(v time.Time) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEQ(FieldLoginTime, v))
}

// LoginTimeNEQ applies the NEQ predicate on the "login_time" field.
func LoginTimeNEQ(v time.Time) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNEQ(FieldLoginTime, v))
}

// LoginTimeIn applies the In predicate on the "login_time" field.
func LoginTimeIn(vs ...time.Time) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldIn(FieldLoginTime, vs...))
}

// LoginTimeNotIn applies the NotIn predicate on the "login_time" field.
func LoginTimeNotIn(vs ...time.Time) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNotIn(FieldLoginTime, vs...))
}

// LoginTimeGT applies the GT predicate on the "login_time" field.
func LoginTimeGT(v time.Time) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldGT(FieldLoginTime, v))
}

// LoginTimeGTE applies the GTE predicate on the "login_time" field.
func LoginTimeGTE(v time.Time) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldGTE(FieldLoginTime, v))
}

// LoginTimeLT applies the LT predicate on the "login_time" field.
func LoginTimeLT(v time.Time) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldLT(FieldLoginTime, v))
}

// LoginTimeLTE applies the LTE predicate on the "login_time" field.
func LoginTimeLTE(v time.Time) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldLTE(FieldLoginTime, v))
}

// LoginIPEQ applies the EQ predicate on the "login_ip" field.
func LoginIPEQ(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEQ(FieldLoginIP, v))
}

// LoginIPNEQ applies the NEQ predicate on the "login_ip" field.
func LoginIPNEQ(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNEQ(FieldLoginIP, v))
}

// LoginIPIn applies the In predicate on the "login_ip" field.
func LoginIPIn(vs ...string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldIn(FieldLoginIP, vs...))
}

// LoginIPNotIn applies the NotIn predicate on the "login_ip" field.
func LoginIPNotIn(vs ...string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNotIn(FieldLoginIP, vs...))
}

// LoginIPGT applies the GT predicate on the "login_ip" field.
func LoginIPGT(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldGT(FieldLoginIP, v))
}

// LoginIPGTE applies the GTE predicate on the "login_ip" field.
func LoginIPGTE(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldGTE(FieldLoginIP, v))
}

// LoginIPLT applies the LT predicate on the "login_ip" field.
func LoginIPLT(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldLT(FieldLoginIP, v))
}

// LoginIPLTE applies the LTE predicate on the "login_ip" field.
func LoginIPLTE(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldLTE(FieldLoginIP, v))
}

// LoginIPContains applies the Contains predicate on the "login_ip" field.
func LoginIPContains(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldContains(FieldLoginIP, v))
}

// LoginIPHasPrefix applies the HasPrefix predicate on the "login_ip" field.
func LoginIPHasPrefix(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldHasPrefix(FieldLoginIP, v))
}

// LoginIPHasSuffix applies the HasSuffix predicate on the "login_ip" field.
func LoginIPHasSuffix(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldHasSuffix(FieldLoginIP, v))
}

// LoginIPEqualFold applies the EqualFold predicate on the "login_ip" field.
func LoginIPEqualFold(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEqualFold(FieldLoginIP, v))
}

// LoginIPContainsFold applies the ContainsFold predicate on the "login_ip" field.
func LoginIPContainsFold(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldContainsFold(FieldLoginIP, v))
}

// LoginSuccessfullyEQ applies the EQ predicate on the "login_successfully" field.
func LoginSuccessfullyEQ(v bool) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEQ(FieldLoginSuccessfully, v))
}

// LoginSuccessfullyNEQ applies the NEQ predicate on the "login_successfully" field.
func LoginSuccessfullyNEQ(v bool) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNEQ(FieldLoginSuccessfully, v))
}

// FailureReasonEQ applies the EQ predicate on the "failure_reason" field.
func FailureReasonEQ(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEQ(FieldFailureReason, v))
}

// FailureReasonNEQ applies the NEQ predicate on the "failure_reason" field.
func FailureReasonNEQ(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNEQ(FieldFailureReason, v))
}

// FailureReasonIn applies the In predicate on the "failure_reason" field.
func FailureReasonIn(vs ...string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldIn(FieldFailureReason, vs...))
}

// FailureReasonNotIn applies the NotIn predicate on the "failure_reason" field.
func FailureReasonNotIn(vs ...string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNotIn(FieldFailureReason, vs...))
}

// FailureReasonGT applies the GT predicate on the "failure_reason" field.
func FailureReasonGT(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldGT(FieldFailureReason, v))
}

// FailureReasonGTE applies the GTE predicate on the "failure_reason" field.
func FailureReasonGTE(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldGTE(FieldFailureReason, v))
}

// FailureReasonLT applies the LT predicate on the "failure_reason" field.
func FailureReasonLT(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldLT(FieldFailureReason, v))
}

// FailureReasonLTE applies the LTE predicate on the "failure_reason" field.
func FailureReasonLTE(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldLTE(FieldFailureReason, v))
}

// FailureReasonContains applies the Contains predicate on the "failure_reason" field.
func FailureReasonContains(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldContains(FieldFailureReason, v))
}

// FailureReasonHasPrefix applies the HasPrefix predicate on the "failure_reason" field.
func FailureReasonHasPrefix(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldHasPrefix(FieldFailureReason, v))
}

// FailureReasonHasSuffix applies the HasSuffix predicate on the "failure_reason" field.
func FailureReasonHasSuffix(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldHasSuffix(FieldFailureReason, v))
}

// FailureReasonIsNil applies the IsNil predicate on the "failure_reason" field.
func FailureReasonIsNil() predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldIsNull(FieldFailureReason))
}

// FailureReasonNotNil applies the NotNil predicate on the "failure_reason" field.
func FailureReasonNotNil() predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNotNull(FieldFailureReason))
}

// FailureReasonEqualFold applies the EqualFold predicate on the "failure_reason" field.
func FailureReasonEqualFold(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEqualFold(FieldFailureReason, v))
}

// FailureReasonContainsFold applies the ContainsFold predicate on the "failure_reason" field.
func FailureReasonContainsFold(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldContainsFold(FieldFailureReason, v))
}

// LoginPortalEQ applies the EQ predicate on the "login_portal" field.
func LoginPortalEQ(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEQ(FieldLoginPortal, v))
}

// LoginPortalNEQ applies the NEQ predicate on the "login_portal" field.
func LoginPortalNEQ(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNEQ(FieldLoginPortal, v))
}

// LoginPortalIn applies the In predicate on the "login_portal" field.
func LoginPortalIn(vs ...string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldIn(FieldLoginPortal, vs...))
}

// LoginPortalNotIn applies the NotIn predicate on the "login_portal" field.
func LoginPortalNotIn(vs ...string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNotIn(FieldLoginPortal, vs...))
}

// LoginPortalGT applies the GT predicate on the "login_portal" field.
func LoginPortalGT(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldGT(FieldLoginPortal, v))
}

// LoginPortalGTE applies the GTE predicate on the "login_portal" field.
func LoginPortalGTE(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldGTE(FieldLoginPortal, v))
}

// LoginPortalLT applies the LT predicate on the "login_portal" field.
func LoginPortalLT(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldLT(FieldLoginPortal, v))
}

// LoginPortalLTE applies the LTE predicate on the "login_portal" field.
func LoginPortalLTE(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldLTE(FieldLoginPortal, v))
}

// LoginPortalContains applies the Contains predicate on the "login_portal" field.
func LoginPortalContains(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldContains(FieldLoginPortal, v))
}

// LoginPortalHasPrefix applies the HasPrefix predicate on the "login_portal" field.
func LoginPortalHasPrefix(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldHasPrefix(FieldLoginPortal, v))
}

// LoginPortalHasSuffix applies the HasSuffix predicate on the "login_portal" field.
func LoginPortalHasSuffix(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldHasSuffix(FieldLoginPortal, v))
}

// LoginPortalIsNil applies the IsNil predicate on the "login_portal" field.
func LoginPortalIsNil() predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldIsNull(FieldLoginPortal))
}

// LoginPortalNotNil applies the NotNil predicate on the "login_portal" field.
func LoginPortalNotNil() predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNotNull(FieldLoginPortal))
}

// LoginPortalEqualFold applies the EqualFold predicate on the "login_portal" field.
func LoginPortalEqualFold(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEqualFold(FieldLoginPortal, v))
}

// LoginPortalContainsFold applies the ContainsFold predicate on the "login_portal" field.
func LoginPortalContainsFold(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldContainsFold(FieldLoginPortal, v))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldHasSuffix(FieldToken, v))
}

// TokenIsNil applies the IsNil predicate on the "token" field.
func TokenIsNil() predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldIsNull(FieldToken))
}

// TokenNotNil applies the NotNil predicate on the "token" field.
func TokenNotNil() predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldNotNull(FieldToken))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.LoginHistory {
	return predicate.LoginHistory(sql.FieldContainsFold(FieldToken, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LoginHistory) predicate.LoginHistory {
	return predicate.LoginHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LoginHistory) predicate.LoginHistory {
	return predicate.LoginHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LoginHistory) predicate.LoginHistory {
	return predicate.LoginHistory(sql.NotPredicates(p))
}
