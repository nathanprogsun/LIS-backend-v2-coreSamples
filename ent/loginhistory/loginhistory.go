// Code generated by ent, DO NOT EDIT.

package loginhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the loginhistory type in the database.
	Label = "login_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldLoginTime holds the string denoting the login_time field in the database.
	FieldLoginTime = "login_time"
	// FieldLoginIP holds the string denoting the login_ip field in the database.
	FieldLoginIP = "login_ip"
	// FieldLoginSuccessfully holds the string denoting the login_successfully field in the database.
	FieldLoginSuccessfully = "login_successfully"
	// FieldFailureReason holds the string denoting the failure_reason field in the database.
	FieldFailureReason = "failure_reason"
	// FieldLoginPortal holds the string denoting the login_portal field in the database.
	FieldLoginPortal = "login_portal"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// Table holds the table name of the loginhistory in the database.
	Table = "login_history"
)

// Columns holds all SQL columns for loginhistory fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldLoginTime,
	FieldLoginIP,
	FieldLoginSuccessfully,
	FieldFailureReason,
	FieldLoginPortal,
	FieldToken,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLoginTime holds the default value on creation for the "login_time" field.
	DefaultLoginTime func() time.Time
	// TokenValidator is a validator for the "token" field. It is called by the builders before save.
	TokenValidator func(string) error
)

// OrderOption defines the ordering options for the LoginHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByLoginTime orders the results by the login_time field.
func ByLoginTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginTime, opts...).ToFunc()
}

// ByLoginIP orders the results by the login_ip field.
func ByLoginIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginIP, opts...).ToFunc()
}

// ByLoginSuccessfully orders the results by the login_successfully field.
func ByLoginSuccessfully(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginSuccessfully, opts...).ToFunc()
}

// ByFailureReason orders the results by the failure_reason field.
func ByFailureReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFailureReason, opts...).ToFunc()
}

// ByLoginPortal orders the results by the login_portal field.
func ByLoginPortal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginPortal, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}
