// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/labordersendhistory"
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LabOrderSendHistoryDelete is the builder for deleting a LabOrderSendHistory entity.
type LabOrderSendHistoryDelete struct {
	config
	hooks    []Hook
	mutation *LabOrderSendHistoryMutation
}

// Where appends a list predicates to the LabOrderSendHistoryDelete builder.
func (loshd *LabOrderSendHistoryDelete) Where(ps ...predicate.LabOrderSendHistory) *LabOrderSendHistoryDelete {
	loshd.mutation.Where(ps...)
	return loshd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (loshd *LabOrderSendHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, loshd.sqlExec, loshd.mutation, loshd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (loshd *LabOrderSendHistoryDelete) ExecX(ctx context.Context) int {
	n, err := loshd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (loshd *LabOrderSendHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(labordersendhistory.Table, sqlgraph.NewFieldSpec(labordersendhistory.FieldID, field.TypeInt))
	if ps := loshd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, loshd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	loshd.mutation.done = true
	return affected, err
}

// LabOrderSendHistoryDeleteOne is the builder for deleting a single LabOrderSendHistory entity.
type LabOrderSendHistoryDeleteOne struct {
	loshd *LabOrderSendHistoryDelete
}

// Where appends a list predicates to the LabOrderSendHistoryDelete builder.
func (loshdo *LabOrderSendHistoryDeleteOne) Where(ps ...predicate.LabOrderSendHistory) *LabOrderSendHistoryDeleteOne {
	loshdo.loshd.mutation.Where(ps...)
	return loshdo
}

// Exec executes the deletion query.
func (loshdo *LabOrderSendHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := loshdo.loshd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{labordersendhistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (loshdo *LabOrderSendHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := loshdo.Exec(ctx); err != nil {
		panic(err)
	}
}
