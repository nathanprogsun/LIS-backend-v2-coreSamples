// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/customer"
	"coresamples/ent/orderinfo"
	"coresamples/ent/patient"
	"coresamples/ent/sample"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Sample is the model entity for the Sample schema.
type Sample struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"sample_id"`
	// AccessionID holds the value of the "accession_id" field.
	AccessionID string `json:"accession_id,omitempty"`
	// SampleStorage holds the value of the "sample_storage" field.
	SampleStorage string `json:"sample_storage,omitempty"`
	// TubeCount holds the value of the "tube_count" field.
	TubeCount int `json:"tube_count,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int `json:"order_id,omitempty"`
	// PatientID holds the value of the "patient_id" field.
	PatientID int `json:"patient_id,omitempty"`
	// SampleOrderMethod holds the value of the "sample_order_method" field.
	SampleOrderMethod string `json:"sample_order_method,omitempty"`
	// SampleCollectionTime holds the value of the "sample_collection_time" field.
	SampleCollectionTime time.Time `json:"sample_collection_time,omitempty"`
	// SampleReceivedTime holds the value of the "sample_received_time" field.
	SampleReceivedTime time.Time `json:"sample_received_time,omitempty"`
	// SampleDescription holds the value of the "sample_description" field.
	SampleDescription string `json:"sample_description,omitempty"`
	// DelayedHours holds the value of the "delayed_hours" field.
	DelayedHours int `json:"delayed_hours,omitempty"`
	// SampleReportTime holds the value of the "sample_report_time" field.
	SampleReportTime time.Time `json:"sample_report_time,omitempty"`
	// InternalReceivedTime holds the value of the "internal_received_time" field.
	InternalReceivedTime time.Time `json:"internal_received_time,omitempty"`
	// SampleReportType holds the value of the "sample_report_type" field.
	SampleReportType string `json:"sample_report_type,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID int `json:"customer_id,omitempty"`
	// FastingHours holds the value of the "fasting_hours" field.
	FastingHours float64 `json:"fasting_hours,omitempty"`
	// FastingStatus holds the value of the "fasting_status" field.
	FastingStatus string `json:"fasting_status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SampleQuery when eager-loading is set.
	Edges        SampleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SampleEdges holds the relations/edges for other nodes in the graph.
type SampleEdges struct {
	// Order holds the value of the order edge.
	Order *OrderInfo `json:"order,omitempty"`
	// Tubes holds the value of the tubes edge.
	Tubes []*Tube `json:"tubes,omitempty"`
	// SampleReceiveRecords holds the value of the sample_receive_records edge.
	SampleReceiveRecords []*TubeReceive `json:"sample_receive_records,omitempty"`
	// SampleRequiredTubes holds the value of the sample_required_tubes edge.
	SampleRequiredTubes []*TubeRequirement `json:"sample_required_tubes,omitempty"`
	// Patient holds the value of the patient edge.
	Patient *Patient `json:"patient,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SampleEdges) OrderOrErr() (*OrderInfo, error) {
	if e.loadedTypes[0] {
		if e.Order == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: orderinfo.Label}
		}
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// TubesOrErr returns the Tubes value or an error if the edge
// was not loaded in eager-loading.
func (e SampleEdges) TubesOrErr() ([]*Tube, error) {
	if e.loadedTypes[1] {
		return e.Tubes, nil
	}
	return nil, &NotLoadedError{edge: "tubes"}
}

// SampleReceiveRecordsOrErr returns the SampleReceiveRecords value or an error if the edge
// was not loaded in eager-loading.
func (e SampleEdges) SampleReceiveRecordsOrErr() ([]*TubeReceive, error) {
	if e.loadedTypes[2] {
		return e.SampleReceiveRecords, nil
	}
	return nil, &NotLoadedError{edge: "sample_receive_records"}
}

// SampleRequiredTubesOrErr returns the SampleRequiredTubes value or an error if the edge
// was not loaded in eager-loading.
func (e SampleEdges) SampleRequiredTubesOrErr() ([]*TubeRequirement, error) {
	if e.loadedTypes[3] {
		return e.SampleRequiredTubes, nil
	}
	return nil, &NotLoadedError{edge: "sample_required_tubes"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SampleEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[4] {
		if e.Patient == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SampleEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[5] {
		if e.Customer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sample) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sample.FieldFastingHours:
			values[i] = new(sql.NullFloat64)
		case sample.FieldID, sample.FieldTubeCount, sample.FieldOrderID, sample.FieldPatientID, sample.FieldDelayedHours, sample.FieldCustomerID:
			values[i] = new(sql.NullInt64)
		case sample.FieldAccessionID, sample.FieldSampleStorage, sample.FieldSampleOrderMethod, sample.FieldSampleDescription, sample.FieldSampleReportType, sample.FieldFastingStatus:
			values[i] = new(sql.NullString)
		case sample.FieldSampleCollectionTime, sample.FieldSampleReceivedTime, sample.FieldSampleReportTime, sample.FieldInternalReceivedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sample fields.
func (s *Sample) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sample.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case sample.FieldAccessionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field accession_id", values[i])
			} else if value.Valid {
				s.AccessionID = value.String
			}
		case sample.FieldSampleStorage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sample_storage", values[i])
			} else if value.Valid {
				s.SampleStorage = value.String
			}
		case sample.FieldTubeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tube_count", values[i])
			} else if value.Valid {
				s.TubeCount = int(value.Int64)
			}
		case sample.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				s.OrderID = int(value.Int64)
			}
		case sample.FieldPatientID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field patient_id", values[i])
			} else if value.Valid {
				s.PatientID = int(value.Int64)
			}
		case sample.FieldSampleOrderMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sample_order_method", values[i])
			} else if value.Valid {
				s.SampleOrderMethod = value.String
			}
		case sample.FieldSampleCollectionTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sample_collection_time", values[i])
			} else if value.Valid {
				s.SampleCollectionTime = value.Time
			}
		case sample.FieldSampleReceivedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sample_received_time", values[i])
			} else if value.Valid {
				s.SampleReceivedTime = value.Time
			}
		case sample.FieldSampleDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sample_description", values[i])
			} else if value.Valid {
				s.SampleDescription = value.String
			}
		case sample.FieldDelayedHours:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delayed_hours", values[i])
			} else if value.Valid {
				s.DelayedHours = int(value.Int64)
			}
		case sample.FieldSampleReportTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sample_report_time", values[i])
			} else if value.Valid {
				s.SampleReportTime = value.Time
			}
		case sample.FieldInternalReceivedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field internal_received_time", values[i])
			} else if value.Valid {
				s.InternalReceivedTime = value.Time
			}
		case sample.FieldSampleReportType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sample_report_type", values[i])
			} else if value.Valid {
				s.SampleReportType = value.String
			}
		case sample.FieldCustomerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				s.CustomerID = int(value.Int64)
			}
		case sample.FieldFastingHours:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fasting_hours", values[i])
			} else if value.Valid {
				s.FastingHours = value.Float64
			}
		case sample.FieldFastingStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fasting_status", values[i])
			} else if value.Valid {
				s.FastingStatus = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Sample.
// This includes values selected through modifiers, order, etc.
func (s *Sample) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the Sample entity.
func (s *Sample) QueryOrder() *OrderInfoQuery {
	return NewSampleClient(s.config).QueryOrder(s)
}

// QueryTubes queries the "tubes" edge of the Sample entity.
func (s *Sample) QueryTubes() *TubeQuery {
	return NewSampleClient(s.config).QueryTubes(s)
}

// QuerySampleReceiveRecords queries the "sample_receive_records" edge of the Sample entity.
func (s *Sample) QuerySampleReceiveRecords() *TubeReceiveQuery {
	return NewSampleClient(s.config).QuerySampleReceiveRecords(s)
}

// QuerySampleRequiredTubes queries the "sample_required_tubes" edge of the Sample entity.
func (s *Sample) QuerySampleRequiredTubes() *TubeRequirementQuery {
	return NewSampleClient(s.config).QuerySampleRequiredTubes(s)
}

// QueryPatient queries the "patient" edge of the Sample entity.
func (s *Sample) QueryPatient() *PatientQuery {
	return NewSampleClient(s.config).QueryPatient(s)
}

// QueryCustomer queries the "customer" edge of the Sample entity.
func (s *Sample) QueryCustomer() *CustomerQuery {
	return NewSampleClient(s.config).QueryCustomer(s)
}

// Update returns a builder for updating this Sample.
// Note that you need to call Sample.Unwrap() before calling this method if this Sample
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sample) Update() *SampleUpdateOne {
	return NewSampleClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Sample entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sample) Unwrap() *Sample {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sample is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sample) String() string {
	var builder strings.Builder
	builder.WriteString("Sample(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("accession_id=")
	builder.WriteString(s.AccessionID)
	builder.WriteString(", ")
	builder.WriteString("sample_storage=")
	builder.WriteString(s.SampleStorage)
	builder.WriteString(", ")
	builder.WriteString("tube_count=")
	builder.WriteString(fmt.Sprintf("%v", s.TubeCount))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", s.OrderID))
	builder.WriteString(", ")
	builder.WriteString("patient_id=")
	builder.WriteString(fmt.Sprintf("%v", s.PatientID))
	builder.WriteString(", ")
	builder.WriteString("sample_order_method=")
	builder.WriteString(s.SampleOrderMethod)
	builder.WriteString(", ")
	builder.WriteString("sample_collection_time=")
	builder.WriteString(s.SampleCollectionTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sample_received_time=")
	builder.WriteString(s.SampleReceivedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sample_description=")
	builder.WriteString(s.SampleDescription)
	builder.WriteString(", ")
	builder.WriteString("delayed_hours=")
	builder.WriteString(fmt.Sprintf("%v", s.DelayedHours))
	builder.WriteString(", ")
	builder.WriteString("sample_report_time=")
	builder.WriteString(s.SampleReportTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("internal_received_time=")
	builder.WriteString(s.InternalReceivedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sample_report_type=")
	builder.WriteString(s.SampleReportType)
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(fmt.Sprintf("%v", s.CustomerID))
	builder.WriteString(", ")
	builder.WriteString("fasting_hours=")
	builder.WriteString(fmt.Sprintf("%v", s.FastingHours))
	builder.WriteString(", ")
	builder.WriteString("fasting_status=")
	builder.WriteString(s.FastingStatus)
	builder.WriteByte(')')
	return builder.String()
}

// Samples is a parsable slice of Sample.
type Samples []*Sample
