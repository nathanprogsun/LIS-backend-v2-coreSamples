// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/userinvitationrecord"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserInvitationRecordUpdate is the builder for updating UserInvitationRecord entities.
type UserInvitationRecordUpdate struct {
	config
	hooks    []Hook
	mutation *UserInvitationRecordMutation
}

// Where appends a list predicates to the UserInvitationRecordUpdate builder.
func (uiru *UserInvitationRecordUpdate) Where(ps ...predicate.UserInvitationRecord) *UserInvitationRecordUpdate {
	uiru.mutation.Where(ps...)
	return uiru
}

// SetCustomerID sets the "customer_id" field.
func (uiru *UserInvitationRecordUpdate) SetCustomerID(i int) *UserInvitationRecordUpdate {
	uiru.mutation.ResetCustomerID()
	uiru.mutation.SetCustomerID(i)
	return uiru
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (uiru *UserInvitationRecordUpdate) SetNillableCustomerID(i *int) *UserInvitationRecordUpdate {
	if i != nil {
		uiru.SetCustomerID(*i)
	}
	return uiru
}

// AddCustomerID adds i to the "customer_id" field.
func (uiru *UserInvitationRecordUpdate) AddCustomerID(i int) *UserInvitationRecordUpdate {
	uiru.mutation.AddCustomerID(i)
	return uiru
}

// SetInvitationLink sets the "invitation_link" field.
func (uiru *UserInvitationRecordUpdate) SetInvitationLink(s string) *UserInvitationRecordUpdate {
	uiru.mutation.SetInvitationLink(s)
	return uiru
}

// SetNillableInvitationLink sets the "invitation_link" field if the given value is not nil.
func (uiru *UserInvitationRecordUpdate) SetNillableInvitationLink(s *string) *UserInvitationRecordUpdate {
	if s != nil {
		uiru.SetInvitationLink(*s)
	}
	return uiru
}

// Mutation returns the UserInvitationRecordMutation object of the builder.
func (uiru *UserInvitationRecordUpdate) Mutation() *UserInvitationRecordMutation {
	return uiru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uiru *UserInvitationRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uiru.sqlSave, uiru.mutation, uiru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uiru *UserInvitationRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := uiru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uiru *UserInvitationRecordUpdate) Exec(ctx context.Context) error {
	_, err := uiru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiru *UserInvitationRecordUpdate) ExecX(ctx context.Context) {
	if err := uiru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uiru *UserInvitationRecordUpdate) check() error {
	if v, ok := uiru.mutation.InvitationLink(); ok {
		if err := userinvitationrecord.InvitationLinkValidator(v); err != nil {
			return &ValidationError{Name: "invitation_link", err: fmt.Errorf(`ent: validator failed for field "UserInvitationRecord.invitation_link": %w`, err)}
		}
	}
	return nil
}

func (uiru *UserInvitationRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uiru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userinvitationrecord.Table, userinvitationrecord.Columns, sqlgraph.NewFieldSpec(userinvitationrecord.FieldID, field.TypeInt))
	if ps := uiru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiru.mutation.CustomerID(); ok {
		_spec.SetField(userinvitationrecord.FieldCustomerID, field.TypeInt, value)
	}
	if value, ok := uiru.mutation.AddedCustomerID(); ok {
		_spec.AddField(userinvitationrecord.FieldCustomerID, field.TypeInt, value)
	}
	if value, ok := uiru.mutation.InvitationLink(); ok {
		_spec.SetField(userinvitationrecord.FieldInvitationLink, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uiru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinvitationrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uiru.mutation.done = true
	return n, nil
}

// UserInvitationRecordUpdateOne is the builder for updating a single UserInvitationRecord entity.
type UserInvitationRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserInvitationRecordMutation
}

// SetCustomerID sets the "customer_id" field.
func (uiruo *UserInvitationRecordUpdateOne) SetCustomerID(i int) *UserInvitationRecordUpdateOne {
	uiruo.mutation.ResetCustomerID()
	uiruo.mutation.SetCustomerID(i)
	return uiruo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (uiruo *UserInvitationRecordUpdateOne) SetNillableCustomerID(i *int) *UserInvitationRecordUpdateOne {
	if i != nil {
		uiruo.SetCustomerID(*i)
	}
	return uiruo
}

// AddCustomerID adds i to the "customer_id" field.
func (uiruo *UserInvitationRecordUpdateOne) AddCustomerID(i int) *UserInvitationRecordUpdateOne {
	uiruo.mutation.AddCustomerID(i)
	return uiruo
}

// SetInvitationLink sets the "invitation_link" field.
func (uiruo *UserInvitationRecordUpdateOne) SetInvitationLink(s string) *UserInvitationRecordUpdateOne {
	uiruo.mutation.SetInvitationLink(s)
	return uiruo
}

// SetNillableInvitationLink sets the "invitation_link" field if the given value is not nil.
func (uiruo *UserInvitationRecordUpdateOne) SetNillableInvitationLink(s *string) *UserInvitationRecordUpdateOne {
	if s != nil {
		uiruo.SetInvitationLink(*s)
	}
	return uiruo
}

// Mutation returns the UserInvitationRecordMutation object of the builder.
func (uiruo *UserInvitationRecordUpdateOne) Mutation() *UserInvitationRecordMutation {
	return uiruo.mutation
}

// Where appends a list predicates to the UserInvitationRecordUpdate builder.
func (uiruo *UserInvitationRecordUpdateOne) Where(ps ...predicate.UserInvitationRecord) *UserInvitationRecordUpdateOne {
	uiruo.mutation.Where(ps...)
	return uiruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uiruo *UserInvitationRecordUpdateOne) Select(field string, fields ...string) *UserInvitationRecordUpdateOne {
	uiruo.fields = append([]string{field}, fields...)
	return uiruo
}

// Save executes the query and returns the updated UserInvitationRecord entity.
func (uiruo *UserInvitationRecordUpdateOne) Save(ctx context.Context) (*UserInvitationRecord, error) {
	return withHooks(ctx, uiruo.sqlSave, uiruo.mutation, uiruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uiruo *UserInvitationRecordUpdateOne) SaveX(ctx context.Context) *UserInvitationRecord {
	node, err := uiruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uiruo *UserInvitationRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := uiruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiruo *UserInvitationRecordUpdateOne) ExecX(ctx context.Context) {
	if err := uiruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uiruo *UserInvitationRecordUpdateOne) check() error {
	if v, ok := uiruo.mutation.InvitationLink(); ok {
		if err := userinvitationrecord.InvitationLinkValidator(v); err != nil {
			return &ValidationError{Name: "invitation_link", err: fmt.Errorf(`ent: validator failed for field "UserInvitationRecord.invitation_link": %w`, err)}
		}
	}
	return nil
}

func (uiruo *UserInvitationRecordUpdateOne) sqlSave(ctx context.Context) (_node *UserInvitationRecord, err error) {
	if err := uiruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userinvitationrecord.Table, userinvitationrecord.Columns, sqlgraph.NewFieldSpec(userinvitationrecord.FieldID, field.TypeInt))
	id, ok := uiruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserInvitationRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uiruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userinvitationrecord.FieldID)
		for _, f := range fields {
			if !userinvitationrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userinvitationrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uiruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiruo.mutation.CustomerID(); ok {
		_spec.SetField(userinvitationrecord.FieldCustomerID, field.TypeInt, value)
	}
	if value, ok := uiruo.mutation.AddedCustomerID(); ok {
		_spec.AddField(userinvitationrecord.FieldCustomerID, field.TypeInt, value)
	}
	if value, ok := uiruo.mutation.InvitationLink(); ok {
		_spec.SetField(userinvitationrecord.FieldInvitationLink, field.TypeString, value)
	}
	_node = &UserInvitationRecord{config: uiruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uiruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinvitationrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uiruo.mutation.done = true
	return _node, nil
}
