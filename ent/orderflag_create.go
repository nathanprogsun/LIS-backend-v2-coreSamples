// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/orderflag"
	"coresamples/ent/orderinfo"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderFlagCreate is the builder for creating a OrderFlag entity.
type OrderFlagCreate struct {
	config
	mutation *OrderFlagMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOrderFlagName sets the "order_flag_name" field.
func (ofc *OrderFlagCreate) SetOrderFlagName(s string) *OrderFlagCreate {
	ofc.mutation.SetOrderFlagName(s)
	return ofc
}

// SetOrderFlagDescription sets the "order_flag_description" field.
func (ofc *OrderFlagCreate) SetOrderFlagDescription(s string) *OrderFlagCreate {
	ofc.mutation.SetOrderFlagDescription(s)
	return ofc
}

// SetNillableOrderFlagDescription sets the "order_flag_description" field if the given value is not nil.
func (ofc *OrderFlagCreate) SetNillableOrderFlagDescription(s *string) *OrderFlagCreate {
	if s != nil {
		ofc.SetOrderFlagDescription(*s)
	}
	return ofc
}

// SetOrderFlagDisplayName sets the "order_flag_display_name" field.
func (ofc *OrderFlagCreate) SetOrderFlagDisplayName(s string) *OrderFlagCreate {
	ofc.mutation.SetOrderFlagDisplayName(s)
	return ofc
}

// SetNillableOrderFlagDisplayName sets the "order_flag_display_name" field if the given value is not nil.
func (ofc *OrderFlagCreate) SetNillableOrderFlagDisplayName(s *string) *OrderFlagCreate {
	if s != nil {
		ofc.SetOrderFlagDisplayName(*s)
	}
	return ofc
}

// SetOrderFlagIsActive sets the "order_flag_is_active" field.
func (ofc *OrderFlagCreate) SetOrderFlagIsActive(b bool) *OrderFlagCreate {
	ofc.mutation.SetOrderFlagIsActive(b)
	return ofc
}

// SetNillableOrderFlagIsActive sets the "order_flag_is_active" field if the given value is not nil.
func (ofc *OrderFlagCreate) SetNillableOrderFlagIsActive(b *bool) *OrderFlagCreate {
	if b != nil {
		ofc.SetOrderFlagIsActive(*b)
	}
	return ofc
}

// SetOrderFlagCreatedAt sets the "order_flag_created_at" field.
func (ofc *OrderFlagCreate) SetOrderFlagCreatedAt(t time.Time) *OrderFlagCreate {
	ofc.mutation.SetOrderFlagCreatedAt(t)
	return ofc
}

// SetNillableOrderFlagCreatedAt sets the "order_flag_created_at" field if the given value is not nil.
func (ofc *OrderFlagCreate) SetNillableOrderFlagCreatedAt(t *time.Time) *OrderFlagCreate {
	if t != nil {
		ofc.SetOrderFlagCreatedAt(*t)
	}
	return ofc
}

// SetOrderFlagColor sets the "order_flag_color" field.
func (ofc *OrderFlagCreate) SetOrderFlagColor(s string) *OrderFlagCreate {
	ofc.mutation.SetOrderFlagColor(s)
	return ofc
}

// SetNillableOrderFlagColor sets the "order_flag_color" field if the given value is not nil.
func (ofc *OrderFlagCreate) SetNillableOrderFlagColor(s *string) *OrderFlagCreate {
	if s != nil {
		ofc.SetOrderFlagColor(*s)
	}
	return ofc
}

// SetOrderFlagedBy sets the "order_flaged_by" field.
func (ofc *OrderFlagCreate) SetOrderFlagedBy(s string) *OrderFlagCreate {
	ofc.mutation.SetOrderFlagedBy(s)
	return ofc
}

// SetNillableOrderFlagedBy sets the "order_flaged_by" field if the given value is not nil.
func (ofc *OrderFlagCreate) SetNillableOrderFlagedBy(s *string) *OrderFlagCreate {
	if s != nil {
		ofc.SetOrderFlagedBy(*s)
	}
	return ofc
}

// SetOrderFlagAllowDuplicatesUnderSameCategory sets the "order_flag_allow_duplicates_under_same_category" field.
func (ofc *OrderFlagCreate) SetOrderFlagAllowDuplicatesUnderSameCategory(b bool) *OrderFlagCreate {
	ofc.mutation.SetOrderFlagAllowDuplicatesUnderSameCategory(b)
	return ofc
}

// SetNillableOrderFlagAllowDuplicatesUnderSameCategory sets the "order_flag_allow_duplicates_under_same_category" field if the given value is not nil.
func (ofc *OrderFlagCreate) SetNillableOrderFlagAllowDuplicatesUnderSameCategory(b *bool) *OrderFlagCreate {
	if b != nil {
		ofc.SetOrderFlagAllowDuplicatesUnderSameCategory(*b)
	}
	return ofc
}

// SetOrderFlagCategory sets the "order_flag_category" field.
func (ofc *OrderFlagCreate) SetOrderFlagCategory(s string) *OrderFlagCreate {
	ofc.mutation.SetOrderFlagCategory(s)
	return ofc
}

// SetNillableOrderFlagCategory sets the "order_flag_category" field if the given value is not nil.
func (ofc *OrderFlagCreate) SetNillableOrderFlagCategory(s *string) *OrderFlagCreate {
	if s != nil {
		ofc.SetOrderFlagCategory(*s)
	}
	return ofc
}

// SetOrderFlagLevel sets the "order_flag_level" field.
func (ofc *OrderFlagCreate) SetOrderFlagLevel(i int) *OrderFlagCreate {
	ofc.mutation.SetOrderFlagLevel(i)
	return ofc
}

// SetNillableOrderFlagLevel sets the "order_flag_level" field if the given value is not nil.
func (ofc *OrderFlagCreate) SetNillableOrderFlagLevel(i *int) *OrderFlagCreate {
	if i != nil {
		ofc.SetOrderFlagLevel(*i)
	}
	return ofc
}

// SetID sets the "id" field.
func (ofc *OrderFlagCreate) SetID(i int) *OrderFlagCreate {
	ofc.mutation.SetID(i)
	return ofc
}

// AddFlaggedOrderIDs adds the "flagged_orders" edge to the OrderInfo entity by IDs.
func (ofc *OrderFlagCreate) AddFlaggedOrderIDs(ids ...int) *OrderFlagCreate {
	ofc.mutation.AddFlaggedOrderIDs(ids...)
	return ofc
}

// AddFlaggedOrders adds the "flagged_orders" edges to the OrderInfo entity.
func (ofc *OrderFlagCreate) AddFlaggedOrders(o ...*OrderInfo) *OrderFlagCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ofc.AddFlaggedOrderIDs(ids...)
}

// Mutation returns the OrderFlagMutation object of the builder.
func (ofc *OrderFlagCreate) Mutation() *OrderFlagMutation {
	return ofc.mutation
}

// Save creates the OrderFlag in the database.
func (ofc *OrderFlagCreate) Save(ctx context.Context) (*OrderFlag, error) {
	ofc.defaults()
	return withHooks(ctx, ofc.sqlSave, ofc.mutation, ofc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ofc *OrderFlagCreate) SaveX(ctx context.Context) *OrderFlag {
	v, err := ofc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ofc *OrderFlagCreate) Exec(ctx context.Context) error {
	_, err := ofc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ofc *OrderFlagCreate) ExecX(ctx context.Context) {
	if err := ofc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ofc *OrderFlagCreate) defaults() {
	if _, ok := ofc.mutation.OrderFlagIsActive(); !ok {
		v := orderflag.DefaultOrderFlagIsActive
		ofc.mutation.SetOrderFlagIsActive(v)
	}
	if _, ok := ofc.mutation.OrderFlagCreatedAt(); !ok {
		v := orderflag.DefaultOrderFlagCreatedAt()
		ofc.mutation.SetOrderFlagCreatedAt(v)
	}
	if _, ok := ofc.mutation.OrderFlagColor(); !ok {
		v := orderflag.DefaultOrderFlagColor
		ofc.mutation.SetOrderFlagColor(v)
	}
	if _, ok := ofc.mutation.OrderFlagedBy(); !ok {
		v := orderflag.DefaultOrderFlagedBy
		ofc.mutation.SetOrderFlagedBy(v)
	}
	if _, ok := ofc.mutation.OrderFlagAllowDuplicatesUnderSameCategory(); !ok {
		v := orderflag.DefaultOrderFlagAllowDuplicatesUnderSameCategory
		ofc.mutation.SetOrderFlagAllowDuplicatesUnderSameCategory(v)
	}
	if _, ok := ofc.mutation.OrderFlagLevel(); !ok {
		v := orderflag.DefaultOrderFlagLevel
		ofc.mutation.SetOrderFlagLevel(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ofc *OrderFlagCreate) check() error {
	if _, ok := ofc.mutation.OrderFlagName(); !ok {
		return &ValidationError{Name: "order_flag_name", err: errors.New(`ent: missing required field "OrderFlag.order_flag_name"`)}
	}
	if _, ok := ofc.mutation.OrderFlagIsActive(); !ok {
		return &ValidationError{Name: "order_flag_is_active", err: errors.New(`ent: missing required field "OrderFlag.order_flag_is_active"`)}
	}
	if _, ok := ofc.mutation.OrderFlagCreatedAt(); !ok {
		return &ValidationError{Name: "order_flag_created_at", err: errors.New(`ent: missing required field "OrderFlag.order_flag_created_at"`)}
	}
	if _, ok := ofc.mutation.OrderFlagAllowDuplicatesUnderSameCategory(); !ok {
		return &ValidationError{Name: "order_flag_allow_duplicates_under_same_category", err: errors.New(`ent: missing required field "OrderFlag.order_flag_allow_duplicates_under_same_category"`)}
	}
	if _, ok := ofc.mutation.OrderFlagLevel(); !ok {
		return &ValidationError{Name: "order_flag_level", err: errors.New(`ent: missing required field "OrderFlag.order_flag_level"`)}
	}
	return nil
}

func (ofc *OrderFlagCreate) sqlSave(ctx context.Context) (*OrderFlag, error) {
	if err := ofc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ofc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ofc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ofc.mutation.id = &_node.ID
	ofc.mutation.done = true
	return _node, nil
}

func (ofc *OrderFlagCreate) createSpec() (*OrderFlag, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderFlag{config: ofc.config}
		_spec = sqlgraph.NewCreateSpec(orderflag.Table, sqlgraph.NewFieldSpec(orderflag.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ofc.conflict
	if id, ok := ofc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ofc.mutation.OrderFlagName(); ok {
		_spec.SetField(orderflag.FieldOrderFlagName, field.TypeString, value)
		_node.OrderFlagName = value
	}
	if value, ok := ofc.mutation.OrderFlagDescription(); ok {
		_spec.SetField(orderflag.FieldOrderFlagDescription, field.TypeString, value)
		_node.OrderFlagDescription = value
	}
	if value, ok := ofc.mutation.OrderFlagDisplayName(); ok {
		_spec.SetField(orderflag.FieldOrderFlagDisplayName, field.TypeString, value)
		_node.OrderFlagDisplayName = value
	}
	if value, ok := ofc.mutation.OrderFlagIsActive(); ok {
		_spec.SetField(orderflag.FieldOrderFlagIsActive, field.TypeBool, value)
		_node.OrderFlagIsActive = value
	}
	if value, ok := ofc.mutation.OrderFlagCreatedAt(); ok {
		_spec.SetField(orderflag.FieldOrderFlagCreatedAt, field.TypeTime, value)
		_node.OrderFlagCreatedAt = value
	}
	if value, ok := ofc.mutation.OrderFlagColor(); ok {
		_spec.SetField(orderflag.FieldOrderFlagColor, field.TypeString, value)
		_node.OrderFlagColor = value
	}
	if value, ok := ofc.mutation.OrderFlagedBy(); ok {
		_spec.SetField(orderflag.FieldOrderFlagedBy, field.TypeString, value)
		_node.OrderFlagedBy = value
	}
	if value, ok := ofc.mutation.OrderFlagAllowDuplicatesUnderSameCategory(); ok {
		_spec.SetField(orderflag.FieldOrderFlagAllowDuplicatesUnderSameCategory, field.TypeBool, value)
		_node.OrderFlagAllowDuplicatesUnderSameCategory = value
	}
	if value, ok := ofc.mutation.OrderFlagCategory(); ok {
		_spec.SetField(orderflag.FieldOrderFlagCategory, field.TypeString, value)
		_node.OrderFlagCategory = value
	}
	if value, ok := ofc.mutation.OrderFlagLevel(); ok {
		_spec.SetField(orderflag.FieldOrderFlagLevel, field.TypeInt, value)
		_node.OrderFlagLevel = value
	}
	if nodes := ofc.mutation.FlaggedOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orderflag.FlaggedOrdersTable,
			Columns: orderflag.FlaggedOrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderFlag.Create().
//		SetOrderFlagName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderFlagUpsert) {
//			SetOrderFlagName(v+v).
//		}).
//		Exec(ctx)
func (ofc *OrderFlagCreate) OnConflict(opts ...sql.ConflictOption) *OrderFlagUpsertOne {
	ofc.conflict = opts
	return &OrderFlagUpsertOne{
		create: ofc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderFlag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ofc *OrderFlagCreate) OnConflictColumns(columns ...string) *OrderFlagUpsertOne {
	ofc.conflict = append(ofc.conflict, sql.ConflictColumns(columns...))
	return &OrderFlagUpsertOne{
		create: ofc,
	}
}

type (
	// OrderFlagUpsertOne is the builder for "upsert"-ing
	//  one OrderFlag node.
	OrderFlagUpsertOne struct {
		create *OrderFlagCreate
	}

	// OrderFlagUpsert is the "OnConflict" setter.
	OrderFlagUpsert struct {
		*sql.UpdateSet
	}
)

// SetOrderFlagName sets the "order_flag_name" field.
func (u *OrderFlagUpsert) SetOrderFlagName(v string) *OrderFlagUpsert {
	u.Set(orderflag.FieldOrderFlagName, v)
	return u
}

// UpdateOrderFlagName sets the "order_flag_name" field to the value that was provided on create.
func (u *OrderFlagUpsert) UpdateOrderFlagName() *OrderFlagUpsert {
	u.SetExcluded(orderflag.FieldOrderFlagName)
	return u
}

// SetOrderFlagDescription sets the "order_flag_description" field.
func (u *OrderFlagUpsert) SetOrderFlagDescription(v string) *OrderFlagUpsert {
	u.Set(orderflag.FieldOrderFlagDescription, v)
	return u
}

// UpdateOrderFlagDescription sets the "order_flag_description" field to the value that was provided on create.
func (u *OrderFlagUpsert) UpdateOrderFlagDescription() *OrderFlagUpsert {
	u.SetExcluded(orderflag.FieldOrderFlagDescription)
	return u
}

// ClearOrderFlagDescription clears the value of the "order_flag_description" field.
func (u *OrderFlagUpsert) ClearOrderFlagDescription() *OrderFlagUpsert {
	u.SetNull(orderflag.FieldOrderFlagDescription)
	return u
}

// SetOrderFlagDisplayName sets the "order_flag_display_name" field.
func (u *OrderFlagUpsert) SetOrderFlagDisplayName(v string) *OrderFlagUpsert {
	u.Set(orderflag.FieldOrderFlagDisplayName, v)
	return u
}

// UpdateOrderFlagDisplayName sets the "order_flag_display_name" field to the value that was provided on create.
func (u *OrderFlagUpsert) UpdateOrderFlagDisplayName() *OrderFlagUpsert {
	u.SetExcluded(orderflag.FieldOrderFlagDisplayName)
	return u
}

// ClearOrderFlagDisplayName clears the value of the "order_flag_display_name" field.
func (u *OrderFlagUpsert) ClearOrderFlagDisplayName() *OrderFlagUpsert {
	u.SetNull(orderflag.FieldOrderFlagDisplayName)
	return u
}

// SetOrderFlagIsActive sets the "order_flag_is_active" field.
func (u *OrderFlagUpsert) SetOrderFlagIsActive(v bool) *OrderFlagUpsert {
	u.Set(orderflag.FieldOrderFlagIsActive, v)
	return u
}

// UpdateOrderFlagIsActive sets the "order_flag_is_active" field to the value that was provided on create.
func (u *OrderFlagUpsert) UpdateOrderFlagIsActive() *OrderFlagUpsert {
	u.SetExcluded(orderflag.FieldOrderFlagIsActive)
	return u
}

// SetOrderFlagCreatedAt sets the "order_flag_created_at" field.
func (u *OrderFlagUpsert) SetOrderFlagCreatedAt(v time.Time) *OrderFlagUpsert {
	u.Set(orderflag.FieldOrderFlagCreatedAt, v)
	return u
}

// UpdateOrderFlagCreatedAt sets the "order_flag_created_at" field to the value that was provided on create.
func (u *OrderFlagUpsert) UpdateOrderFlagCreatedAt() *OrderFlagUpsert {
	u.SetExcluded(orderflag.FieldOrderFlagCreatedAt)
	return u
}

// SetOrderFlagColor sets the "order_flag_color" field.
func (u *OrderFlagUpsert) SetOrderFlagColor(v string) *OrderFlagUpsert {
	u.Set(orderflag.FieldOrderFlagColor, v)
	return u
}

// UpdateOrderFlagColor sets the "order_flag_color" field to the value that was provided on create.
func (u *OrderFlagUpsert) UpdateOrderFlagColor() *OrderFlagUpsert {
	u.SetExcluded(orderflag.FieldOrderFlagColor)
	return u
}

// ClearOrderFlagColor clears the value of the "order_flag_color" field.
func (u *OrderFlagUpsert) ClearOrderFlagColor() *OrderFlagUpsert {
	u.SetNull(orderflag.FieldOrderFlagColor)
	return u
}

// SetOrderFlagedBy sets the "order_flaged_by" field.
func (u *OrderFlagUpsert) SetOrderFlagedBy(v string) *OrderFlagUpsert {
	u.Set(orderflag.FieldOrderFlagedBy, v)
	return u
}

// UpdateOrderFlagedBy sets the "order_flaged_by" field to the value that was provided on create.
func (u *OrderFlagUpsert) UpdateOrderFlagedBy() *OrderFlagUpsert {
	u.SetExcluded(orderflag.FieldOrderFlagedBy)
	return u
}

// ClearOrderFlagedBy clears the value of the "order_flaged_by" field.
func (u *OrderFlagUpsert) ClearOrderFlagedBy() *OrderFlagUpsert {
	u.SetNull(orderflag.FieldOrderFlagedBy)
	return u
}

// SetOrderFlagAllowDuplicatesUnderSameCategory sets the "order_flag_allow_duplicates_under_same_category" field.
func (u *OrderFlagUpsert) SetOrderFlagAllowDuplicatesUnderSameCategory(v bool) *OrderFlagUpsert {
	u.Set(orderflag.FieldOrderFlagAllowDuplicatesUnderSameCategory, v)
	return u
}

// UpdateOrderFlagAllowDuplicatesUnderSameCategory sets the "order_flag_allow_duplicates_under_same_category" field to the value that was provided on create.
func (u *OrderFlagUpsert) UpdateOrderFlagAllowDuplicatesUnderSameCategory() *OrderFlagUpsert {
	u.SetExcluded(orderflag.FieldOrderFlagAllowDuplicatesUnderSameCategory)
	return u
}

// SetOrderFlagCategory sets the "order_flag_category" field.
func (u *OrderFlagUpsert) SetOrderFlagCategory(v string) *OrderFlagUpsert {
	u.Set(orderflag.FieldOrderFlagCategory, v)
	return u
}

// UpdateOrderFlagCategory sets the "order_flag_category" field to the value that was provided on create.
func (u *OrderFlagUpsert) UpdateOrderFlagCategory() *OrderFlagUpsert {
	u.SetExcluded(orderflag.FieldOrderFlagCategory)
	return u
}

// ClearOrderFlagCategory clears the value of the "order_flag_category" field.
func (u *OrderFlagUpsert) ClearOrderFlagCategory() *OrderFlagUpsert {
	u.SetNull(orderflag.FieldOrderFlagCategory)
	return u
}

// SetOrderFlagLevel sets the "order_flag_level" field.
func (u *OrderFlagUpsert) SetOrderFlagLevel(v int) *OrderFlagUpsert {
	u.Set(orderflag.FieldOrderFlagLevel, v)
	return u
}

// UpdateOrderFlagLevel sets the "order_flag_level" field to the value that was provided on create.
func (u *OrderFlagUpsert) UpdateOrderFlagLevel() *OrderFlagUpsert {
	u.SetExcluded(orderflag.FieldOrderFlagLevel)
	return u
}

// AddOrderFlagLevel adds v to the "order_flag_level" field.
func (u *OrderFlagUpsert) AddOrderFlagLevel(v int) *OrderFlagUpsert {
	u.Add(orderflag.FieldOrderFlagLevel, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderFlag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderflag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderFlagUpsertOne) UpdateNewValues() *OrderFlagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderflag.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderFlag.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderFlagUpsertOne) Ignore() *OrderFlagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderFlagUpsertOne) DoNothing() *OrderFlagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderFlagCreate.OnConflict
// documentation for more info.
func (u *OrderFlagUpsertOne) Update(set func(*OrderFlagUpsert)) *OrderFlagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderFlagUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrderFlagName sets the "order_flag_name" field.
func (u *OrderFlagUpsertOne) SetOrderFlagName(v string) *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagName(v)
	})
}

// UpdateOrderFlagName sets the "order_flag_name" field to the value that was provided on create.
func (u *OrderFlagUpsertOne) UpdateOrderFlagName() *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagName()
	})
}

// SetOrderFlagDescription sets the "order_flag_description" field.
func (u *OrderFlagUpsertOne) SetOrderFlagDescription(v string) *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagDescription(v)
	})
}

// UpdateOrderFlagDescription sets the "order_flag_description" field to the value that was provided on create.
func (u *OrderFlagUpsertOne) UpdateOrderFlagDescription() *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagDescription()
	})
}

// ClearOrderFlagDescription clears the value of the "order_flag_description" field.
func (u *OrderFlagUpsertOne) ClearOrderFlagDescription() *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.ClearOrderFlagDescription()
	})
}

// SetOrderFlagDisplayName sets the "order_flag_display_name" field.
func (u *OrderFlagUpsertOne) SetOrderFlagDisplayName(v string) *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagDisplayName(v)
	})
}

// UpdateOrderFlagDisplayName sets the "order_flag_display_name" field to the value that was provided on create.
func (u *OrderFlagUpsertOne) UpdateOrderFlagDisplayName() *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagDisplayName()
	})
}

// ClearOrderFlagDisplayName clears the value of the "order_flag_display_name" field.
func (u *OrderFlagUpsertOne) ClearOrderFlagDisplayName() *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.ClearOrderFlagDisplayName()
	})
}

// SetOrderFlagIsActive sets the "order_flag_is_active" field.
func (u *OrderFlagUpsertOne) SetOrderFlagIsActive(v bool) *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagIsActive(v)
	})
}

// UpdateOrderFlagIsActive sets the "order_flag_is_active" field to the value that was provided on create.
func (u *OrderFlagUpsertOne) UpdateOrderFlagIsActive() *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagIsActive()
	})
}

// SetOrderFlagCreatedAt sets the "order_flag_created_at" field.
func (u *OrderFlagUpsertOne) SetOrderFlagCreatedAt(v time.Time) *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagCreatedAt(v)
	})
}

// UpdateOrderFlagCreatedAt sets the "order_flag_created_at" field to the value that was provided on create.
func (u *OrderFlagUpsertOne) UpdateOrderFlagCreatedAt() *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagCreatedAt()
	})
}

// SetOrderFlagColor sets the "order_flag_color" field.
func (u *OrderFlagUpsertOne) SetOrderFlagColor(v string) *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagColor(v)
	})
}

// UpdateOrderFlagColor sets the "order_flag_color" field to the value that was provided on create.
func (u *OrderFlagUpsertOne) UpdateOrderFlagColor() *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagColor()
	})
}

// ClearOrderFlagColor clears the value of the "order_flag_color" field.
func (u *OrderFlagUpsertOne) ClearOrderFlagColor() *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.ClearOrderFlagColor()
	})
}

// SetOrderFlagedBy sets the "order_flaged_by" field.
func (u *OrderFlagUpsertOne) SetOrderFlagedBy(v string) *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagedBy(v)
	})
}

// UpdateOrderFlagedBy sets the "order_flaged_by" field to the value that was provided on create.
func (u *OrderFlagUpsertOne) UpdateOrderFlagedBy() *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagedBy()
	})
}

// ClearOrderFlagedBy clears the value of the "order_flaged_by" field.
func (u *OrderFlagUpsertOne) ClearOrderFlagedBy() *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.ClearOrderFlagedBy()
	})
}

// SetOrderFlagAllowDuplicatesUnderSameCategory sets the "order_flag_allow_duplicates_under_same_category" field.
func (u *OrderFlagUpsertOne) SetOrderFlagAllowDuplicatesUnderSameCategory(v bool) *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagAllowDuplicatesUnderSameCategory(v)
	})
}

// UpdateOrderFlagAllowDuplicatesUnderSameCategory sets the "order_flag_allow_duplicates_under_same_category" field to the value that was provided on create.
func (u *OrderFlagUpsertOne) UpdateOrderFlagAllowDuplicatesUnderSameCategory() *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagAllowDuplicatesUnderSameCategory()
	})
}

// SetOrderFlagCategory sets the "order_flag_category" field.
func (u *OrderFlagUpsertOne) SetOrderFlagCategory(v string) *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagCategory(v)
	})
}

// UpdateOrderFlagCategory sets the "order_flag_category" field to the value that was provided on create.
func (u *OrderFlagUpsertOne) UpdateOrderFlagCategory() *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagCategory()
	})
}

// ClearOrderFlagCategory clears the value of the "order_flag_category" field.
func (u *OrderFlagUpsertOne) ClearOrderFlagCategory() *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.ClearOrderFlagCategory()
	})
}

// SetOrderFlagLevel sets the "order_flag_level" field.
func (u *OrderFlagUpsertOne) SetOrderFlagLevel(v int) *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagLevel(v)
	})
}

// AddOrderFlagLevel adds v to the "order_flag_level" field.
func (u *OrderFlagUpsertOne) AddOrderFlagLevel(v int) *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.AddOrderFlagLevel(v)
	})
}

// UpdateOrderFlagLevel sets the "order_flag_level" field to the value that was provided on create.
func (u *OrderFlagUpsertOne) UpdateOrderFlagLevel() *OrderFlagUpsertOne {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagLevel()
	})
}

// Exec executes the query.
func (u *OrderFlagUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderFlagCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderFlagUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderFlagUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderFlagUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderFlagCreateBulk is the builder for creating many OrderFlag entities in bulk.
type OrderFlagCreateBulk struct {
	config
	err      error
	builders []*OrderFlagCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderFlag entities in the database.
func (ofcb *OrderFlagCreateBulk) Save(ctx context.Context) ([]*OrderFlag, error) {
	if ofcb.err != nil {
		return nil, ofcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ofcb.builders))
	nodes := make([]*OrderFlag, len(ofcb.builders))
	mutators := make([]Mutator, len(ofcb.builders))
	for i := range ofcb.builders {
		func(i int, root context.Context) {
			builder := ofcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderFlagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ofcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ofcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ofcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ofcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ofcb *OrderFlagCreateBulk) SaveX(ctx context.Context) []*OrderFlag {
	v, err := ofcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ofcb *OrderFlagCreateBulk) Exec(ctx context.Context) error {
	_, err := ofcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ofcb *OrderFlagCreateBulk) ExecX(ctx context.Context) {
	if err := ofcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderFlag.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderFlagUpsert) {
//			SetOrderFlagName(v+v).
//		}).
//		Exec(ctx)
func (ofcb *OrderFlagCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderFlagUpsertBulk {
	ofcb.conflict = opts
	return &OrderFlagUpsertBulk{
		create: ofcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderFlag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ofcb *OrderFlagCreateBulk) OnConflictColumns(columns ...string) *OrderFlagUpsertBulk {
	ofcb.conflict = append(ofcb.conflict, sql.ConflictColumns(columns...))
	return &OrderFlagUpsertBulk{
		create: ofcb,
	}
}

// OrderFlagUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderFlag nodes.
type OrderFlagUpsertBulk struct {
	create *OrderFlagCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderFlag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderflag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderFlagUpsertBulk) UpdateNewValues() *OrderFlagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderflag.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderFlag.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderFlagUpsertBulk) Ignore() *OrderFlagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderFlagUpsertBulk) DoNothing() *OrderFlagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderFlagCreateBulk.OnConflict
// documentation for more info.
func (u *OrderFlagUpsertBulk) Update(set func(*OrderFlagUpsert)) *OrderFlagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderFlagUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrderFlagName sets the "order_flag_name" field.
func (u *OrderFlagUpsertBulk) SetOrderFlagName(v string) *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagName(v)
	})
}

// UpdateOrderFlagName sets the "order_flag_name" field to the value that was provided on create.
func (u *OrderFlagUpsertBulk) UpdateOrderFlagName() *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagName()
	})
}

// SetOrderFlagDescription sets the "order_flag_description" field.
func (u *OrderFlagUpsertBulk) SetOrderFlagDescription(v string) *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagDescription(v)
	})
}

// UpdateOrderFlagDescription sets the "order_flag_description" field to the value that was provided on create.
func (u *OrderFlagUpsertBulk) UpdateOrderFlagDescription() *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagDescription()
	})
}

// ClearOrderFlagDescription clears the value of the "order_flag_description" field.
func (u *OrderFlagUpsertBulk) ClearOrderFlagDescription() *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.ClearOrderFlagDescription()
	})
}

// SetOrderFlagDisplayName sets the "order_flag_display_name" field.
func (u *OrderFlagUpsertBulk) SetOrderFlagDisplayName(v string) *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagDisplayName(v)
	})
}

// UpdateOrderFlagDisplayName sets the "order_flag_display_name" field to the value that was provided on create.
func (u *OrderFlagUpsertBulk) UpdateOrderFlagDisplayName() *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagDisplayName()
	})
}

// ClearOrderFlagDisplayName clears the value of the "order_flag_display_name" field.
func (u *OrderFlagUpsertBulk) ClearOrderFlagDisplayName() *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.ClearOrderFlagDisplayName()
	})
}

// SetOrderFlagIsActive sets the "order_flag_is_active" field.
func (u *OrderFlagUpsertBulk) SetOrderFlagIsActive(v bool) *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagIsActive(v)
	})
}

// UpdateOrderFlagIsActive sets the "order_flag_is_active" field to the value that was provided on create.
func (u *OrderFlagUpsertBulk) UpdateOrderFlagIsActive() *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagIsActive()
	})
}

// SetOrderFlagCreatedAt sets the "order_flag_created_at" field.
func (u *OrderFlagUpsertBulk) SetOrderFlagCreatedAt(v time.Time) *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagCreatedAt(v)
	})
}

// UpdateOrderFlagCreatedAt sets the "order_flag_created_at" field to the value that was provided on create.
func (u *OrderFlagUpsertBulk) UpdateOrderFlagCreatedAt() *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagCreatedAt()
	})
}

// SetOrderFlagColor sets the "order_flag_color" field.
func (u *OrderFlagUpsertBulk) SetOrderFlagColor(v string) *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagColor(v)
	})
}

// UpdateOrderFlagColor sets the "order_flag_color" field to the value that was provided on create.
func (u *OrderFlagUpsertBulk) UpdateOrderFlagColor() *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagColor()
	})
}

// ClearOrderFlagColor clears the value of the "order_flag_color" field.
func (u *OrderFlagUpsertBulk) ClearOrderFlagColor() *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.ClearOrderFlagColor()
	})
}

// SetOrderFlagedBy sets the "order_flaged_by" field.
func (u *OrderFlagUpsertBulk) SetOrderFlagedBy(v string) *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagedBy(v)
	})
}

// UpdateOrderFlagedBy sets the "order_flaged_by" field to the value that was provided on create.
func (u *OrderFlagUpsertBulk) UpdateOrderFlagedBy() *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagedBy()
	})
}

// ClearOrderFlagedBy clears the value of the "order_flaged_by" field.
func (u *OrderFlagUpsertBulk) ClearOrderFlagedBy() *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.ClearOrderFlagedBy()
	})
}

// SetOrderFlagAllowDuplicatesUnderSameCategory sets the "order_flag_allow_duplicates_under_same_category" field.
func (u *OrderFlagUpsertBulk) SetOrderFlagAllowDuplicatesUnderSameCategory(v bool) *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagAllowDuplicatesUnderSameCategory(v)
	})
}

// UpdateOrderFlagAllowDuplicatesUnderSameCategory sets the "order_flag_allow_duplicates_under_same_category" field to the value that was provided on create.
func (u *OrderFlagUpsertBulk) UpdateOrderFlagAllowDuplicatesUnderSameCategory() *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagAllowDuplicatesUnderSameCategory()
	})
}

// SetOrderFlagCategory sets the "order_flag_category" field.
func (u *OrderFlagUpsertBulk) SetOrderFlagCategory(v string) *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagCategory(v)
	})
}

// UpdateOrderFlagCategory sets the "order_flag_category" field to the value that was provided on create.
func (u *OrderFlagUpsertBulk) UpdateOrderFlagCategory() *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagCategory()
	})
}

// ClearOrderFlagCategory clears the value of the "order_flag_category" field.
func (u *OrderFlagUpsertBulk) ClearOrderFlagCategory() *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.ClearOrderFlagCategory()
	})
}

// SetOrderFlagLevel sets the "order_flag_level" field.
func (u *OrderFlagUpsertBulk) SetOrderFlagLevel(v int) *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.SetOrderFlagLevel(v)
	})
}

// AddOrderFlagLevel adds v to the "order_flag_level" field.
func (u *OrderFlagUpsertBulk) AddOrderFlagLevel(v int) *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.AddOrderFlagLevel(v)
	})
}

// UpdateOrderFlagLevel sets the "order_flag_level" field to the value that was provided on create.
func (u *OrderFlagUpsertBulk) UpdateOrderFlagLevel() *OrderFlagUpsertBulk {
	return u.Update(func(s *OrderFlagUpsert) {
		s.UpdateOrderFlagLevel()
	})
}

// Exec executes the query.
func (u *OrderFlagUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderFlagCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderFlagCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderFlagUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
