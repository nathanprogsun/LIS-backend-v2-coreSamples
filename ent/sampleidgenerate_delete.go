// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/sampleidgenerate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SampleIDGenerateDelete is the builder for deleting a SampleIDGenerate entity.
type SampleIDGenerateDelete struct {
	config
	hooks    []Hook
	mutation *SampleIDGenerateMutation
}

// Where appends a list predicates to the SampleIDGenerateDelete builder.
func (sigd *SampleIDGenerateDelete) Where(ps ...predicate.SampleIDGenerate) *SampleIDGenerateDelete {
	sigd.mutation.Where(ps...)
	return sigd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sigd *SampleIDGenerateDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sigd.sqlExec, sigd.mutation, sigd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sigd *SampleIDGenerateDelete) ExecX(ctx context.Context) int {
	n, err := sigd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sigd *SampleIDGenerateDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sampleidgenerate.Table, sqlgraph.NewFieldSpec(sampleidgenerate.FieldID, field.TypeInt))
	if ps := sigd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sigd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sigd.mutation.done = true
	return affected, err
}

// SampleIDGenerateDeleteOne is the builder for deleting a single SampleIDGenerate entity.
type SampleIDGenerateDeleteOne struct {
	sigd *SampleIDGenerateDelete
}

// Where appends a list predicates to the SampleIDGenerateDelete builder.
func (sigdo *SampleIDGenerateDeleteOne) Where(ps ...predicate.SampleIDGenerate) *SampleIDGenerateDeleteOne {
	sigdo.sigd.mutation.Where(ps...)
	return sigdo
}

// Exec executes the deletion query.
func (sigdo *SampleIDGenerateDeleteOne) Exec(ctx context.Context) error {
	n, err := sigdo.sigd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sampleidgenerate.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sigdo *SampleIDGenerateDeleteOne) ExecX(ctx context.Context) {
	if err := sigdo.Exec(ctx); err != nil {
		panic(err)
	}
}
