// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/sampleidgenerate"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SampleIDGenerateQuery is the builder for querying SampleIDGenerate entities.
type SampleIDGenerateQuery struct {
	config
	ctx        *QueryContext
	order      []sampleidgenerate.OrderOption
	inters     []Interceptor
	predicates []predicate.SampleIDGenerate
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SampleIDGenerateQuery builder.
func (sigq *SampleIDGenerateQuery) Where(ps ...predicate.SampleIDGenerate) *SampleIDGenerateQuery {
	sigq.predicates = append(sigq.predicates, ps...)
	return sigq
}

// Limit the number of records to be returned by this query.
func (sigq *SampleIDGenerateQuery) Limit(limit int) *SampleIDGenerateQuery {
	sigq.ctx.Limit = &limit
	return sigq
}

// Offset to start from.
func (sigq *SampleIDGenerateQuery) Offset(offset int) *SampleIDGenerateQuery {
	sigq.ctx.Offset = &offset
	return sigq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sigq *SampleIDGenerateQuery) Unique(unique bool) *SampleIDGenerateQuery {
	sigq.ctx.Unique = &unique
	return sigq
}

// Order specifies how the records should be ordered.
func (sigq *SampleIDGenerateQuery) Order(o ...sampleidgenerate.OrderOption) *SampleIDGenerateQuery {
	sigq.order = append(sigq.order, o...)
	return sigq
}

// First returns the first SampleIDGenerate entity from the query.
// Returns a *NotFoundError when no SampleIDGenerate was found.
func (sigq *SampleIDGenerateQuery) First(ctx context.Context) (*SampleIDGenerate, error) {
	nodes, err := sigq.Limit(1).All(setContextOp(ctx, sigq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sampleidgenerate.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sigq *SampleIDGenerateQuery) FirstX(ctx context.Context) *SampleIDGenerate {
	node, err := sigq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SampleIDGenerate ID from the query.
// Returns a *NotFoundError when no SampleIDGenerate ID was found.
func (sigq *SampleIDGenerateQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sigq.Limit(1).IDs(setContextOp(ctx, sigq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sampleidgenerate.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sigq *SampleIDGenerateQuery) FirstIDX(ctx context.Context) int {
	id, err := sigq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SampleIDGenerate entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SampleIDGenerate entity is found.
// Returns a *NotFoundError when no SampleIDGenerate entities are found.
func (sigq *SampleIDGenerateQuery) Only(ctx context.Context) (*SampleIDGenerate, error) {
	nodes, err := sigq.Limit(2).All(setContextOp(ctx, sigq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sampleidgenerate.Label}
	default:
		return nil, &NotSingularError{sampleidgenerate.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sigq *SampleIDGenerateQuery) OnlyX(ctx context.Context) *SampleIDGenerate {
	node, err := sigq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SampleIDGenerate ID in the query.
// Returns a *NotSingularError when more than one SampleIDGenerate ID is found.
// Returns a *NotFoundError when no entities are found.
func (sigq *SampleIDGenerateQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sigq.Limit(2).IDs(setContextOp(ctx, sigq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sampleidgenerate.Label}
	default:
		err = &NotSingularError{sampleidgenerate.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sigq *SampleIDGenerateQuery) OnlyIDX(ctx context.Context) int {
	id, err := sigq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SampleIDGenerates.
func (sigq *SampleIDGenerateQuery) All(ctx context.Context) ([]*SampleIDGenerate, error) {
	ctx = setContextOp(ctx, sigq.ctx, "All")
	if err := sigq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SampleIDGenerate, *SampleIDGenerateQuery]()
	return withInterceptors[[]*SampleIDGenerate](ctx, sigq, qr, sigq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sigq *SampleIDGenerateQuery) AllX(ctx context.Context) []*SampleIDGenerate {
	nodes, err := sigq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SampleIDGenerate IDs.
func (sigq *SampleIDGenerateQuery) IDs(ctx context.Context) (ids []int, err error) {
	if sigq.ctx.Unique == nil && sigq.path != nil {
		sigq.Unique(true)
	}
	ctx = setContextOp(ctx, sigq.ctx, "IDs")
	if err = sigq.Select(sampleidgenerate.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sigq *SampleIDGenerateQuery) IDsX(ctx context.Context) []int {
	ids, err := sigq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sigq *SampleIDGenerateQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sigq.ctx, "Count")
	if err := sigq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sigq, querierCount[*SampleIDGenerateQuery](), sigq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sigq *SampleIDGenerateQuery) CountX(ctx context.Context) int {
	count, err := sigq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sigq *SampleIDGenerateQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sigq.ctx, "Exist")
	switch _, err := sigq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sigq *SampleIDGenerateQuery) ExistX(ctx context.Context) bool {
	exist, err := sigq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SampleIDGenerateQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sigq *SampleIDGenerateQuery) Clone() *SampleIDGenerateQuery {
	if sigq == nil {
		return nil
	}
	return &SampleIDGenerateQuery{
		config:     sigq.config,
		ctx:        sigq.ctx.Clone(),
		order:      append([]sampleidgenerate.OrderOption{}, sigq.order...),
		inters:     append([]Interceptor{}, sigq.inters...),
		predicates: append([]predicate.SampleIDGenerate{}, sigq.predicates...),
		// clone intermediate query.
		sql:  sigq.sql.Clone(),
		path: sigq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Barcode string `json:"barcode,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SampleIDGenerate.Query().
//		GroupBy(sampleidgenerate.FieldBarcode).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sigq *SampleIDGenerateQuery) GroupBy(field string, fields ...string) *SampleIDGenerateGroupBy {
	sigq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SampleIDGenerateGroupBy{build: sigq}
	grbuild.flds = &sigq.ctx.Fields
	grbuild.label = sampleidgenerate.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Barcode string `json:"barcode,omitempty"`
//	}
//
//	client.SampleIDGenerate.Query().
//		Select(sampleidgenerate.FieldBarcode).
//		Scan(ctx, &v)
func (sigq *SampleIDGenerateQuery) Select(fields ...string) *SampleIDGenerateSelect {
	sigq.ctx.Fields = append(sigq.ctx.Fields, fields...)
	sbuild := &SampleIDGenerateSelect{SampleIDGenerateQuery: sigq}
	sbuild.label = sampleidgenerate.Label
	sbuild.flds, sbuild.scan = &sigq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SampleIDGenerateSelect configured with the given aggregations.
func (sigq *SampleIDGenerateQuery) Aggregate(fns ...AggregateFunc) *SampleIDGenerateSelect {
	return sigq.Select().Aggregate(fns...)
}

func (sigq *SampleIDGenerateQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sigq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sigq); err != nil {
				return err
			}
		}
	}
	for _, f := range sigq.ctx.Fields {
		if !sampleidgenerate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sigq.path != nil {
		prev, err := sigq.path(ctx)
		if err != nil {
			return err
		}
		sigq.sql = prev
	}
	return nil
}

func (sigq *SampleIDGenerateQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SampleIDGenerate, error) {
	var (
		nodes = []*SampleIDGenerate{}
		_spec = sigq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SampleIDGenerate).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SampleIDGenerate{config: sigq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sigq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (sigq *SampleIDGenerateQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sigq.querySpec()
	_spec.Node.Columns = sigq.ctx.Fields
	if len(sigq.ctx.Fields) > 0 {
		_spec.Unique = sigq.ctx.Unique != nil && *sigq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sigq.driver, _spec)
}

func (sigq *SampleIDGenerateQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(sampleidgenerate.Table, sampleidgenerate.Columns, sqlgraph.NewFieldSpec(sampleidgenerate.FieldID, field.TypeInt))
	_spec.From = sigq.sql
	if unique := sigq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sigq.path != nil {
		_spec.Unique = true
	}
	if fields := sigq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sampleidgenerate.FieldID)
		for i := range fields {
			if fields[i] != sampleidgenerate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sigq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sigq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sigq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sigq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sigq *SampleIDGenerateQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sigq.driver.Dialect())
	t1 := builder.Table(sampleidgenerate.Table)
	columns := sigq.ctx.Fields
	if len(columns) == 0 {
		columns = sampleidgenerate.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sigq.sql != nil {
		selector = sigq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sigq.ctx.Unique != nil && *sigq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sigq.predicates {
		p(selector)
	}
	for _, p := range sigq.order {
		p(selector)
	}
	if offset := sigq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sigq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SampleIDGenerateGroupBy is the group-by builder for SampleIDGenerate entities.
type SampleIDGenerateGroupBy struct {
	selector
	build *SampleIDGenerateQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (siggb *SampleIDGenerateGroupBy) Aggregate(fns ...AggregateFunc) *SampleIDGenerateGroupBy {
	siggb.fns = append(siggb.fns, fns...)
	return siggb
}

// Scan applies the selector query and scans the result into the given value.
func (siggb *SampleIDGenerateGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, siggb.build.ctx, "GroupBy")
	if err := siggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SampleIDGenerateQuery, *SampleIDGenerateGroupBy](ctx, siggb.build, siggb, siggb.build.inters, v)
}

func (siggb *SampleIDGenerateGroupBy) sqlScan(ctx context.Context, root *SampleIDGenerateQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(siggb.fns))
	for _, fn := range siggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*siggb.flds)+len(siggb.fns))
		for _, f := range *siggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*siggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := siggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SampleIDGenerateSelect is the builder for selecting fields of SampleIDGenerate entities.
type SampleIDGenerateSelect struct {
	*SampleIDGenerateQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sigs *SampleIDGenerateSelect) Aggregate(fns ...AggregateFunc) *SampleIDGenerateSelect {
	sigs.fns = append(sigs.fns, fns...)
	return sigs
}

// Scan applies the selector query and scans the result into the given value.
func (sigs *SampleIDGenerateSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sigs.ctx, "Select")
	if err := sigs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SampleIDGenerateQuery, *SampleIDGenerateSelect](ctx, sigs.SampleIDGenerateQuery, sigs, sigs.inters, v)
}

func (sigs *SampleIDGenerateSelect) sqlScan(ctx context.Context, root *SampleIDGenerateQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sigs.fns))
	for _, fn := range sigs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sigs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sigs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
