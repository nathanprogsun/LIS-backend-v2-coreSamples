// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/sampleidgenerate"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SampleIDGenerate is the model entity for the SampleIDGenerate schema.
type SampleIDGenerate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"sample_id"`
	// Barcode holds the value of the "barcode" field.
	Barcode      string `json:"barcode,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SampleIDGenerate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sampleidgenerate.FieldID:
			values[i] = new(sql.NullInt64)
		case sampleidgenerate.FieldBarcode:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SampleIDGenerate fields.
func (sig *SampleIDGenerate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sampleidgenerate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sig.ID = int(value.Int64)
		case sampleidgenerate.FieldBarcode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field barcode", values[i])
			} else if value.Valid {
				sig.Barcode = value.String
			}
		default:
			sig.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SampleIDGenerate.
// This includes values selected through modifiers, order, etc.
func (sig *SampleIDGenerate) Value(name string) (ent.Value, error) {
	return sig.selectValues.Get(name)
}

// Update returns a builder for updating this SampleIDGenerate.
// Note that you need to call SampleIDGenerate.Unwrap() before calling this method if this SampleIDGenerate
// was returned from a transaction, and the transaction was committed or rolled back.
func (sig *SampleIDGenerate) Update() *SampleIDGenerateUpdateOne {
	return NewSampleIDGenerateClient(sig.config).UpdateOne(sig)
}

// Unwrap unwraps the SampleIDGenerate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sig *SampleIDGenerate) Unwrap() *SampleIDGenerate {
	_tx, ok := sig.config.driver.(*txDriver)
	if !ok {
		panic("ent: SampleIDGenerate is not a transactional entity")
	}
	sig.config.driver = _tx.drv
	return sig
}

// String implements the fmt.Stringer.
func (sig *SampleIDGenerate) String() string {
	var builder strings.Builder
	builder.WriteString("SampleIDGenerate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sig.ID))
	builder.WriteString("barcode=")
	builder.WriteString(sig.Barcode)
	builder.WriteByte(')')
	return builder.String()
}

// SampleIDGenerates is a parsable slice of SampleIDGenerate.
type SampleIDGenerates []*SampleIDGenerate
