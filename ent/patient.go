// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/customer"
	"coresamples/ent/patient"
	"coresamples/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Patient is the model entity for the Patient schema.
type Patient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"patient_id"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// PatientType holds the value of the "patient_type" field.
	PatientType string `json:"patient_type,omitempty"`
	// OriginalPatientID holds the value of the "original_patient_id" field.
	OriginalPatientID int `json:"original_patient_id,omitempty"`
	// PatientGender holds the value of the "patient_gender" field.
	PatientGender string `json:"patient_gender,omitempty"`
	// PatientFirstName holds the value of the "patient_first_name" field.
	PatientFirstName string `json:"patient_first_name,omitempty"`
	// PatientLastName holds the value of the "patient_last_name" field.
	PatientLastName string `json:"patient_last_name,omitempty"`
	// PatientMiddleName holds the value of the "patient_middle_name" field.
	PatientMiddleName string `json:"patient_middle_name,omitempty"`
	// PatientMedicalRecordNumber holds the value of the "patient_medical_record_number" field.
	PatientMedicalRecordNumber string `json:"patient_medical_record_number,omitempty"`
	// PatientLegalFirstname holds the value of the "patient_legal_firstname" field.
	PatientLegalFirstname string `json:"patient_legal_firstname,omitempty"`
	// PatientLegalLastname holds the value of the "patient_legal_lastname" field.
	PatientLegalLastname string `json:"patient_legal_lastname,omitempty"`
	// PatientHonorific holds the value of the "patient_honorific" field.
	PatientHonorific string `json:"patient_honorific,omitempty"`
	// PatientSuffix holds the value of the "patient_suffix" field.
	PatientSuffix string `json:"patient_suffix,omitempty"`
	// PatientMarital holds the value of the "patient_marital" field.
	PatientMarital string `json:"patient_marital,omitempty"`
	// PatientEthnicity holds the value of the "patient_ethnicity" field.
	PatientEthnicity string `json:"patient_ethnicity,omitempty"`
	// PatientBirthdate holds the value of the "patient_birthdate" field.
	PatientBirthdate string `json:"patient_birthdate,omitempty"`
	// PatientSsn holds the value of the "patient_ssn" field.
	PatientSsn string `json:"patient_ssn,omitempty"`
	// PatientHeight holds the value of the "patient_height" field.
	PatientHeight string `json:"patient_height,omitempty"`
	// PatientWeight holds the value of the "patient_weight" field.
	PatientWeight string `json:"patient_weight,omitempty"`
	// OfficeallyID holds the value of the "officeally_id" field.
	OfficeallyID int `json:"officeally_id,omitempty"`
	// PatientNyWaiveFormIssueStatus holds the value of the "patient_ny_waive_form_issue_status" field.
	PatientNyWaiveFormIssueStatus string `json:"patient_ny_waive_form_issue_status,omitempty"`
	// PatientCreateTime holds the value of the "patient_create_time" field.
	PatientCreateTime time.Time `json:"patient_create_time,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID int `json:"customer_id,omitempty"`
	// IsActive holds the value of the "isActive" field.
	IsActive bool `json:"isActive,omitempty"`
	// PatientFlagged holds the value of the "patient_flagged" field.
	PatientFlagged bool `json:"patient_flagged,omitempty"`
	// PatientServiceDate holds the value of the "patient_service_date" field.
	PatientServiceDate time.Time `json:"patient_service_date,omitempty"`
	// PatientDescription holds the value of the "patient_description" field.
	PatientDescription string `json:"patient_description,omitempty"`
	// PatientLanguage holds the value of the "patient_language" field.
	PatientLanguage string `json:"patient_language,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PatientQuery when eager-loading is set.
	Edges        PatientEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PatientEdges holds the relations/edges for other nodes in the graph.
type PatientEdges struct {
	// CurrentCustomer holds the value of the current_customer edge.
	CurrentCustomer *Customer `json:"current_customer,omitempty"`
	// PatientCustomers holds the value of the patient_customers edge.
	PatientCustomers []*Customer `json:"patient_customers,omitempty"`
	// Samples holds the value of the samples edge.
	Samples []*Sample `json:"samples,omitempty"`
	// PatientContacts holds the value of the patient_contacts edge.
	PatientContacts []*Contact `json:"patient_contacts,omitempty"`
	// PatientAddresses holds the value of the patient_addresses edge.
	PatientAddresses []*Address `json:"patient_addresses,omitempty"`
	// PatientClinics holds the value of the patient_clinics edge.
	PatientClinics []*Clinic `json:"patient_clinics,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// PatientWeightHeightHistory holds the value of the patient_weight_height_history edge.
	PatientWeightHeightHistory []*PatientWeightHeight `json:"patient_weight_height_history,omitempty"`
	// PatientSettings holds the value of the patient_settings edge.
	PatientSettings []*Setting `json:"patient_settings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// CurrentCustomerOrErr returns the CurrentCustomer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) CurrentCustomerOrErr() (*Customer, error) {
	if e.loadedTypes[0] {
		if e.CurrentCustomer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.CurrentCustomer, nil
	}
	return nil, &NotLoadedError{edge: "current_customer"}
}

// PatientCustomersOrErr returns the PatientCustomers value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) PatientCustomersOrErr() ([]*Customer, error) {
	if e.loadedTypes[1] {
		return e.PatientCustomers, nil
	}
	return nil, &NotLoadedError{edge: "patient_customers"}
}

// SamplesOrErr returns the Samples value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) SamplesOrErr() ([]*Sample, error) {
	if e.loadedTypes[2] {
		return e.Samples, nil
	}
	return nil, &NotLoadedError{edge: "samples"}
}

// PatientContactsOrErr returns the PatientContacts value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) PatientContactsOrErr() ([]*Contact, error) {
	if e.loadedTypes[3] {
		return e.PatientContacts, nil
	}
	return nil, &NotLoadedError{edge: "patient_contacts"}
}

// PatientAddressesOrErr returns the PatientAddresses value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) PatientAddressesOrErr() ([]*Address, error) {
	if e.loadedTypes[4] {
		return e.PatientAddresses, nil
	}
	return nil, &NotLoadedError{edge: "patient_addresses"}
}

// PatientClinicsOrErr returns the PatientClinics value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) PatientClinicsOrErr() ([]*Clinic, error) {
	if e.loadedTypes[5] {
		return e.PatientClinics, nil
	}
	return nil, &NotLoadedError{edge: "patient_clinics"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[6] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PatientWeightHeightHistoryOrErr returns the PatientWeightHeightHistory value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) PatientWeightHeightHistoryOrErr() ([]*PatientWeightHeight, error) {
	if e.loadedTypes[7] {
		return e.PatientWeightHeightHistory, nil
	}
	return nil, &NotLoadedError{edge: "patient_weight_height_history"}
}

// PatientSettingsOrErr returns the PatientSettings value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) PatientSettingsOrErr() ([]*Setting, error) {
	if e.loadedTypes[8] {
		return e.PatientSettings, nil
	}
	return nil, &NotLoadedError{edge: "patient_settings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Patient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case patient.FieldIsActive, patient.FieldPatientFlagged:
			values[i] = new(sql.NullBool)
		case patient.FieldID, patient.FieldUserID, patient.FieldOriginalPatientID, patient.FieldOfficeallyID, patient.FieldCustomerID:
			values[i] = new(sql.NullInt64)
		case patient.FieldPatientType, patient.FieldPatientGender, patient.FieldPatientFirstName, patient.FieldPatientLastName, patient.FieldPatientMiddleName, patient.FieldPatientMedicalRecordNumber, patient.FieldPatientLegalFirstname, patient.FieldPatientLegalLastname, patient.FieldPatientHonorific, patient.FieldPatientSuffix, patient.FieldPatientMarital, patient.FieldPatientEthnicity, patient.FieldPatientBirthdate, patient.FieldPatientSsn, patient.FieldPatientHeight, patient.FieldPatientWeight, patient.FieldPatientNyWaiveFormIssueStatus, patient.FieldPatientDescription, patient.FieldPatientLanguage:
			values[i] = new(sql.NullString)
		case patient.FieldPatientCreateTime, patient.FieldPatientServiceDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Patient fields.
func (pa *Patient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case patient.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case patient.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pa.UserID = int(value.Int64)
			}
		case patient.FieldPatientType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_type", values[i])
			} else if value.Valid {
				pa.PatientType = value.String
			}
		case patient.FieldOriginalPatientID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field original_patient_id", values[i])
			} else if value.Valid {
				pa.OriginalPatientID = int(value.Int64)
			}
		case patient.FieldPatientGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_gender", values[i])
			} else if value.Valid {
				pa.PatientGender = value.String
			}
		case patient.FieldPatientFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_first_name", values[i])
			} else if value.Valid {
				pa.PatientFirstName = value.String
			}
		case patient.FieldPatientLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_last_name", values[i])
			} else if value.Valid {
				pa.PatientLastName = value.String
			}
		case patient.FieldPatientMiddleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_middle_name", values[i])
			} else if value.Valid {
				pa.PatientMiddleName = value.String
			}
		case patient.FieldPatientMedicalRecordNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_medical_record_number", values[i])
			} else if value.Valid {
				pa.PatientMedicalRecordNumber = value.String
			}
		case patient.FieldPatientLegalFirstname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_legal_firstname", values[i])
			} else if value.Valid {
				pa.PatientLegalFirstname = value.String
			}
		case patient.FieldPatientLegalLastname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_legal_lastname", values[i])
			} else if value.Valid {
				pa.PatientLegalLastname = value.String
			}
		case patient.FieldPatientHonorific:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_honorific", values[i])
			} else if value.Valid {
				pa.PatientHonorific = value.String
			}
		case patient.FieldPatientSuffix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_suffix", values[i])
			} else if value.Valid {
				pa.PatientSuffix = value.String
			}
		case patient.FieldPatientMarital:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_marital", values[i])
			} else if value.Valid {
				pa.PatientMarital = value.String
			}
		case patient.FieldPatientEthnicity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_ethnicity", values[i])
			} else if value.Valid {
				pa.PatientEthnicity = value.String
			}
		case patient.FieldPatientBirthdate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_birthdate", values[i])
			} else if value.Valid {
				pa.PatientBirthdate = value.String
			}
		case patient.FieldPatientSsn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_ssn", values[i])
			} else if value.Valid {
				pa.PatientSsn = value.String
			}
		case patient.FieldPatientHeight:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_height", values[i])
			} else if value.Valid {
				pa.PatientHeight = value.String
			}
		case patient.FieldPatientWeight:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_weight", values[i])
			} else if value.Valid {
				pa.PatientWeight = value.String
			}
		case patient.FieldOfficeallyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field officeally_id", values[i])
			} else if value.Valid {
				pa.OfficeallyID = int(value.Int64)
			}
		case patient.FieldPatientNyWaiveFormIssueStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_ny_waive_form_issue_status", values[i])
			} else if value.Valid {
				pa.PatientNyWaiveFormIssueStatus = value.String
			}
		case patient.FieldPatientCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field patient_create_time", values[i])
			} else if value.Valid {
				pa.PatientCreateTime = value.Time
			}
		case patient.FieldCustomerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				pa.CustomerID = int(value.Int64)
			}
		case patient.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isActive", values[i])
			} else if value.Valid {
				pa.IsActive = value.Bool
			}
		case patient.FieldPatientFlagged:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field patient_flagged", values[i])
			} else if value.Valid {
				pa.PatientFlagged = value.Bool
			}
		case patient.FieldPatientServiceDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field patient_service_date", values[i])
			} else if value.Valid {
				pa.PatientServiceDate = value.Time
			}
		case patient.FieldPatientDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_description", values[i])
			} else if value.Valid {
				pa.PatientDescription = value.String
			}
		case patient.FieldPatientLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_language", values[i])
			} else if value.Valid {
				pa.PatientLanguage = value.String
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Patient.
// This includes values selected through modifiers, order, etc.
func (pa *Patient) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryCurrentCustomer queries the "current_customer" edge of the Patient entity.
func (pa *Patient) QueryCurrentCustomer() *CustomerQuery {
	return NewPatientClient(pa.config).QueryCurrentCustomer(pa)
}

// QueryPatientCustomers queries the "patient_customers" edge of the Patient entity.
func (pa *Patient) QueryPatientCustomers() *CustomerQuery {
	return NewPatientClient(pa.config).QueryPatientCustomers(pa)
}

// QuerySamples queries the "samples" edge of the Patient entity.
func (pa *Patient) QuerySamples() *SampleQuery {
	return NewPatientClient(pa.config).QuerySamples(pa)
}

// QueryPatientContacts queries the "patient_contacts" edge of the Patient entity.
func (pa *Patient) QueryPatientContacts() *ContactQuery {
	return NewPatientClient(pa.config).QueryPatientContacts(pa)
}

// QueryPatientAddresses queries the "patient_addresses" edge of the Patient entity.
func (pa *Patient) QueryPatientAddresses() *AddressQuery {
	return NewPatientClient(pa.config).QueryPatientAddresses(pa)
}

// QueryPatientClinics queries the "patient_clinics" edge of the Patient entity.
func (pa *Patient) QueryPatientClinics() *ClinicQuery {
	return NewPatientClient(pa.config).QueryPatientClinics(pa)
}

// QueryUser queries the "user" edge of the Patient entity.
func (pa *Patient) QueryUser() *UserQuery {
	return NewPatientClient(pa.config).QueryUser(pa)
}

// QueryPatientWeightHeightHistory queries the "patient_weight_height_history" edge of the Patient entity.
func (pa *Patient) QueryPatientWeightHeightHistory() *PatientWeightHeightQuery {
	return NewPatientClient(pa.config).QueryPatientWeightHeightHistory(pa)
}

// QueryPatientSettings queries the "patient_settings" edge of the Patient entity.
func (pa *Patient) QueryPatientSettings() *SettingQuery {
	return NewPatientClient(pa.config).QueryPatientSettings(pa)
}

// Update returns a builder for updating this Patient.
// Note that you need to call Patient.Unwrap() before calling this method if this Patient
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Patient) Update() *PatientUpdateOne {
	return NewPatientClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Patient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Patient) Unwrap() *Patient {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Patient is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Patient) String() string {
	var builder strings.Builder
	builder.WriteString("Patient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.UserID))
	builder.WriteString(", ")
	builder.WriteString("patient_type=")
	builder.WriteString(pa.PatientType)
	builder.WriteString(", ")
	builder.WriteString("original_patient_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.OriginalPatientID))
	builder.WriteString(", ")
	builder.WriteString("patient_gender=")
	builder.WriteString(pa.PatientGender)
	builder.WriteString(", ")
	builder.WriteString("patient_first_name=")
	builder.WriteString(pa.PatientFirstName)
	builder.WriteString(", ")
	builder.WriteString("patient_last_name=")
	builder.WriteString(pa.PatientLastName)
	builder.WriteString(", ")
	builder.WriteString("patient_middle_name=")
	builder.WriteString(pa.PatientMiddleName)
	builder.WriteString(", ")
	builder.WriteString("patient_medical_record_number=")
	builder.WriteString(pa.PatientMedicalRecordNumber)
	builder.WriteString(", ")
	builder.WriteString("patient_legal_firstname=")
	builder.WriteString(pa.PatientLegalFirstname)
	builder.WriteString(", ")
	builder.WriteString("patient_legal_lastname=")
	builder.WriteString(pa.PatientLegalLastname)
	builder.WriteString(", ")
	builder.WriteString("patient_honorific=")
	builder.WriteString(pa.PatientHonorific)
	builder.WriteString(", ")
	builder.WriteString("patient_suffix=")
	builder.WriteString(pa.PatientSuffix)
	builder.WriteString(", ")
	builder.WriteString("patient_marital=")
	builder.WriteString(pa.PatientMarital)
	builder.WriteString(", ")
	builder.WriteString("patient_ethnicity=")
	builder.WriteString(pa.PatientEthnicity)
	builder.WriteString(", ")
	builder.WriteString("patient_birthdate=")
	builder.WriteString(pa.PatientBirthdate)
	builder.WriteString(", ")
	builder.WriteString("patient_ssn=")
	builder.WriteString(pa.PatientSsn)
	builder.WriteString(", ")
	builder.WriteString("patient_height=")
	builder.WriteString(pa.PatientHeight)
	builder.WriteString(", ")
	builder.WriteString("patient_weight=")
	builder.WriteString(pa.PatientWeight)
	builder.WriteString(", ")
	builder.WriteString("officeally_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.OfficeallyID))
	builder.WriteString(", ")
	builder.WriteString("patient_ny_waive_form_issue_status=")
	builder.WriteString(pa.PatientNyWaiveFormIssueStatus)
	builder.WriteString(", ")
	builder.WriteString("patient_create_time=")
	builder.WriteString(pa.PatientCreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.CustomerID))
	builder.WriteString(", ")
	builder.WriteString("isActive=")
	builder.WriteString(fmt.Sprintf("%v", pa.IsActive))
	builder.WriteString(", ")
	builder.WriteString("patient_flagged=")
	builder.WriteString(fmt.Sprintf("%v", pa.PatientFlagged))
	builder.WriteString(", ")
	builder.WriteString("patient_service_date=")
	builder.WriteString(pa.PatientServiceDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("patient_description=")
	builder.WriteString(pa.PatientDescription)
	builder.WriteString(", ")
	builder.WriteString("patient_language=")
	builder.WriteString(pa.PatientLanguage)
	builder.WriteByte(')')
	return builder.String()
}

// Patients is a parsable slice of Patient.
type Patients []*Patient
