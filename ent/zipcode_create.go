// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/zipcode"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ZipcodeCreate is the builder for creating a Zipcode entity.
type ZipcodeCreate struct {
	config
	mutation *ZipcodeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetZipCodeType sets the "ZipCodeType" field.
func (zc *ZipcodeCreate) SetZipCodeType(s string) *ZipcodeCreate {
	zc.mutation.SetZipCodeType(s)
	return zc
}

// SetCity sets the "City" field.
func (zc *ZipcodeCreate) SetCity(s string) *ZipcodeCreate {
	zc.mutation.SetCity(s)
	return zc
}

// SetState sets the "State" field.
func (zc *ZipcodeCreate) SetState(s string) *ZipcodeCreate {
	zc.mutation.SetState(s)
	return zc
}

// SetLocationType sets the "LocationType" field.
func (zc *ZipcodeCreate) SetLocationType(s string) *ZipcodeCreate {
	zc.mutation.SetLocationType(s)
	return zc
}

// SetLat sets the "Lat" field.
func (zc *ZipcodeCreate) SetLat(f float64) *ZipcodeCreate {
	zc.mutation.SetLat(f)
	return zc
}

// SetNillableLat sets the "Lat" field if the given value is not nil.
func (zc *ZipcodeCreate) SetNillableLat(f *float64) *ZipcodeCreate {
	if f != nil {
		zc.SetLat(*f)
	}
	return zc
}

// SetLong sets the "Long" field.
func (zc *ZipcodeCreate) SetLong(f float64) *ZipcodeCreate {
	zc.mutation.SetLong(f)
	return zc
}

// SetNillableLong sets the "Long" field if the given value is not nil.
func (zc *ZipcodeCreate) SetNillableLong(f *float64) *ZipcodeCreate {
	if f != nil {
		zc.SetLong(*f)
	}
	return zc
}

// SetID sets the "id" field.
func (zc *ZipcodeCreate) SetID(i int) *ZipcodeCreate {
	zc.mutation.SetID(i)
	return zc
}

// Mutation returns the ZipcodeMutation object of the builder.
func (zc *ZipcodeCreate) Mutation() *ZipcodeMutation {
	return zc.mutation
}

// Save creates the Zipcode in the database.
func (zc *ZipcodeCreate) Save(ctx context.Context) (*Zipcode, error) {
	return withHooks(ctx, zc.sqlSave, zc.mutation, zc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (zc *ZipcodeCreate) SaveX(ctx context.Context) *Zipcode {
	v, err := zc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (zc *ZipcodeCreate) Exec(ctx context.Context) error {
	_, err := zc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (zc *ZipcodeCreate) ExecX(ctx context.Context) {
	if err := zc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (zc *ZipcodeCreate) check() error {
	if _, ok := zc.mutation.ZipCodeType(); !ok {
		return &ValidationError{Name: "ZipCodeType", err: errors.New(`ent: missing required field "Zipcode.ZipCodeType"`)}
	}
	if _, ok := zc.mutation.City(); !ok {
		return &ValidationError{Name: "City", err: errors.New(`ent: missing required field "Zipcode.City"`)}
	}
	if _, ok := zc.mutation.State(); !ok {
		return &ValidationError{Name: "State", err: errors.New(`ent: missing required field "Zipcode.State"`)}
	}
	if _, ok := zc.mutation.LocationType(); !ok {
		return &ValidationError{Name: "LocationType", err: errors.New(`ent: missing required field "Zipcode.LocationType"`)}
	}
	return nil
}

func (zc *ZipcodeCreate) sqlSave(ctx context.Context) (*Zipcode, error) {
	if err := zc.check(); err != nil {
		return nil, err
	}
	_node, _spec := zc.createSpec()
	if err := sqlgraph.CreateNode(ctx, zc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	zc.mutation.id = &_node.ID
	zc.mutation.done = true
	return _node, nil
}

func (zc *ZipcodeCreate) createSpec() (*Zipcode, *sqlgraph.CreateSpec) {
	var (
		_node = &Zipcode{config: zc.config}
		_spec = sqlgraph.NewCreateSpec(zipcode.Table, sqlgraph.NewFieldSpec(zipcode.FieldID, field.TypeInt))
	)
	_spec.OnConflict = zc.conflict
	if id, ok := zc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := zc.mutation.ZipCodeType(); ok {
		_spec.SetField(zipcode.FieldZipCodeType, field.TypeString, value)
		_node.ZipCodeType = value
	}
	if value, ok := zc.mutation.City(); ok {
		_spec.SetField(zipcode.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := zc.mutation.State(); ok {
		_spec.SetField(zipcode.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := zc.mutation.LocationType(); ok {
		_spec.SetField(zipcode.FieldLocationType, field.TypeString, value)
		_node.LocationType = value
	}
	if value, ok := zc.mutation.Lat(); ok {
		_spec.SetField(zipcode.FieldLat, field.TypeFloat64, value)
		_node.Lat = value
	}
	if value, ok := zc.mutation.Long(); ok {
		_spec.SetField(zipcode.FieldLong, field.TypeFloat64, value)
		_node.Long = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Zipcode.Create().
//		SetZipCodeType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ZipcodeUpsert) {
//			SetZipCodeType(v+v).
//		}).
//		Exec(ctx)
func (zc *ZipcodeCreate) OnConflict(opts ...sql.ConflictOption) *ZipcodeUpsertOne {
	zc.conflict = opts
	return &ZipcodeUpsertOne{
		create: zc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Zipcode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (zc *ZipcodeCreate) OnConflictColumns(columns ...string) *ZipcodeUpsertOne {
	zc.conflict = append(zc.conflict, sql.ConflictColumns(columns...))
	return &ZipcodeUpsertOne{
		create: zc,
	}
}

type (
	// ZipcodeUpsertOne is the builder for "upsert"-ing
	//  one Zipcode node.
	ZipcodeUpsertOne struct {
		create *ZipcodeCreate
	}

	// ZipcodeUpsert is the "OnConflict" setter.
	ZipcodeUpsert struct {
		*sql.UpdateSet
	}
)

// SetZipCodeType sets the "ZipCodeType" field.
func (u *ZipcodeUpsert) SetZipCodeType(v string) *ZipcodeUpsert {
	u.Set(zipcode.FieldZipCodeType, v)
	return u
}

// UpdateZipCodeType sets the "ZipCodeType" field to the value that was provided on create.
func (u *ZipcodeUpsert) UpdateZipCodeType() *ZipcodeUpsert {
	u.SetExcluded(zipcode.FieldZipCodeType)
	return u
}

// SetCity sets the "City" field.
func (u *ZipcodeUpsert) SetCity(v string) *ZipcodeUpsert {
	u.Set(zipcode.FieldCity, v)
	return u
}

// UpdateCity sets the "City" field to the value that was provided on create.
func (u *ZipcodeUpsert) UpdateCity() *ZipcodeUpsert {
	u.SetExcluded(zipcode.FieldCity)
	return u
}

// SetState sets the "State" field.
func (u *ZipcodeUpsert) SetState(v string) *ZipcodeUpsert {
	u.Set(zipcode.FieldState, v)
	return u
}

// UpdateState sets the "State" field to the value that was provided on create.
func (u *ZipcodeUpsert) UpdateState() *ZipcodeUpsert {
	u.SetExcluded(zipcode.FieldState)
	return u
}

// SetLocationType sets the "LocationType" field.
func (u *ZipcodeUpsert) SetLocationType(v string) *ZipcodeUpsert {
	u.Set(zipcode.FieldLocationType, v)
	return u
}

// UpdateLocationType sets the "LocationType" field to the value that was provided on create.
func (u *ZipcodeUpsert) UpdateLocationType() *ZipcodeUpsert {
	u.SetExcluded(zipcode.FieldLocationType)
	return u
}

// SetLat sets the "Lat" field.
func (u *ZipcodeUpsert) SetLat(v float64) *ZipcodeUpsert {
	u.Set(zipcode.FieldLat, v)
	return u
}

// UpdateLat sets the "Lat" field to the value that was provided on create.
func (u *ZipcodeUpsert) UpdateLat() *ZipcodeUpsert {
	u.SetExcluded(zipcode.FieldLat)
	return u
}

// AddLat adds v to the "Lat" field.
func (u *ZipcodeUpsert) AddLat(v float64) *ZipcodeUpsert {
	u.Add(zipcode.FieldLat, v)
	return u
}

// ClearLat clears the value of the "Lat" field.
func (u *ZipcodeUpsert) ClearLat() *ZipcodeUpsert {
	u.SetNull(zipcode.FieldLat)
	return u
}

// SetLong sets the "Long" field.
func (u *ZipcodeUpsert) SetLong(v float64) *ZipcodeUpsert {
	u.Set(zipcode.FieldLong, v)
	return u
}

// UpdateLong sets the "Long" field to the value that was provided on create.
func (u *ZipcodeUpsert) UpdateLong() *ZipcodeUpsert {
	u.SetExcluded(zipcode.FieldLong)
	return u
}

// AddLong adds v to the "Long" field.
func (u *ZipcodeUpsert) AddLong(v float64) *ZipcodeUpsert {
	u.Add(zipcode.FieldLong, v)
	return u
}

// ClearLong clears the value of the "Long" field.
func (u *ZipcodeUpsert) ClearLong() *ZipcodeUpsert {
	u.SetNull(zipcode.FieldLong)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Zipcode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(zipcode.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ZipcodeUpsertOne) UpdateNewValues() *ZipcodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(zipcode.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Zipcode.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ZipcodeUpsertOne) Ignore() *ZipcodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ZipcodeUpsertOne) DoNothing() *ZipcodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ZipcodeCreate.OnConflict
// documentation for more info.
func (u *ZipcodeUpsertOne) Update(set func(*ZipcodeUpsert)) *ZipcodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ZipcodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetZipCodeType sets the "ZipCodeType" field.
func (u *ZipcodeUpsertOne) SetZipCodeType(v string) *ZipcodeUpsertOne {
	return u.Update(func(s *ZipcodeUpsert) {
		s.SetZipCodeType(v)
	})
}

// UpdateZipCodeType sets the "ZipCodeType" field to the value that was provided on create.
func (u *ZipcodeUpsertOne) UpdateZipCodeType() *ZipcodeUpsertOne {
	return u.Update(func(s *ZipcodeUpsert) {
		s.UpdateZipCodeType()
	})
}

// SetCity sets the "City" field.
func (u *ZipcodeUpsertOne) SetCity(v string) *ZipcodeUpsertOne {
	return u.Update(func(s *ZipcodeUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "City" field to the value that was provided on create.
func (u *ZipcodeUpsertOne) UpdateCity() *ZipcodeUpsertOne {
	return u.Update(func(s *ZipcodeUpsert) {
		s.UpdateCity()
	})
}

// SetState sets the "State" field.
func (u *ZipcodeUpsertOne) SetState(v string) *ZipcodeUpsertOne {
	return u.Update(func(s *ZipcodeUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "State" field to the value that was provided on create.
func (u *ZipcodeUpsertOne) UpdateState() *ZipcodeUpsertOne {
	return u.Update(func(s *ZipcodeUpsert) {
		s.UpdateState()
	})
}

// SetLocationType sets the "LocationType" field.
func (u *ZipcodeUpsertOne) SetLocationType(v string) *ZipcodeUpsertOne {
	return u.Update(func(s *ZipcodeUpsert) {
		s.SetLocationType(v)
	})
}

// UpdateLocationType sets the "LocationType" field to the value that was provided on create.
func (u *ZipcodeUpsertOne) UpdateLocationType() *ZipcodeUpsertOne {
	return u.Update(func(s *ZipcodeUpsert) {
		s.UpdateLocationType()
	})
}

// SetLat sets the "Lat" field.
func (u *ZipcodeUpsertOne) SetLat(v float64) *ZipcodeUpsertOne {
	return u.Update(func(s *ZipcodeUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "Lat" field.
func (u *ZipcodeUpsertOne) AddLat(v float64) *ZipcodeUpsertOne {
	return u.Update(func(s *ZipcodeUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "Lat" field to the value that was provided on create.
func (u *ZipcodeUpsertOne) UpdateLat() *ZipcodeUpsertOne {
	return u.Update(func(s *ZipcodeUpsert) {
		s.UpdateLat()
	})
}

// ClearLat clears the value of the "Lat" field.
func (u *ZipcodeUpsertOne) ClearLat() *ZipcodeUpsertOne {
	return u.Update(func(s *ZipcodeUpsert) {
		s.ClearLat()
	})
}

// SetLong sets the "Long" field.
func (u *ZipcodeUpsertOne) SetLong(v float64) *ZipcodeUpsertOne {
	return u.Update(func(s *ZipcodeUpsert) {
		s.SetLong(v)
	})
}

// AddLong adds v to the "Long" field.
func (u *ZipcodeUpsertOne) AddLong(v float64) *ZipcodeUpsertOne {
	return u.Update(func(s *ZipcodeUpsert) {
		s.AddLong(v)
	})
}

// UpdateLong sets the "Long" field to the value that was provided on create.
func (u *ZipcodeUpsertOne) UpdateLong() *ZipcodeUpsertOne {
	return u.Update(func(s *ZipcodeUpsert) {
		s.UpdateLong()
	})
}

// ClearLong clears the value of the "Long" field.
func (u *ZipcodeUpsertOne) ClearLong() *ZipcodeUpsertOne {
	return u.Update(func(s *ZipcodeUpsert) {
		s.ClearLong()
	})
}

// Exec executes the query.
func (u *ZipcodeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ZipcodeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ZipcodeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ZipcodeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ZipcodeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ZipcodeCreateBulk is the builder for creating many Zipcode entities in bulk.
type ZipcodeCreateBulk struct {
	config
	err      error
	builders []*ZipcodeCreate
	conflict []sql.ConflictOption
}

// Save creates the Zipcode entities in the database.
func (zcb *ZipcodeCreateBulk) Save(ctx context.Context) ([]*Zipcode, error) {
	if zcb.err != nil {
		return nil, zcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(zcb.builders))
	nodes := make([]*Zipcode, len(zcb.builders))
	mutators := make([]Mutator, len(zcb.builders))
	for i := range zcb.builders {
		func(i int, root context.Context) {
			builder := zcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ZipcodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, zcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = zcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, zcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, zcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (zcb *ZipcodeCreateBulk) SaveX(ctx context.Context) []*Zipcode {
	v, err := zcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (zcb *ZipcodeCreateBulk) Exec(ctx context.Context) error {
	_, err := zcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (zcb *ZipcodeCreateBulk) ExecX(ctx context.Context) {
	if err := zcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Zipcode.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ZipcodeUpsert) {
//			SetZipCodeType(v+v).
//		}).
//		Exec(ctx)
func (zcb *ZipcodeCreateBulk) OnConflict(opts ...sql.ConflictOption) *ZipcodeUpsertBulk {
	zcb.conflict = opts
	return &ZipcodeUpsertBulk{
		create: zcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Zipcode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (zcb *ZipcodeCreateBulk) OnConflictColumns(columns ...string) *ZipcodeUpsertBulk {
	zcb.conflict = append(zcb.conflict, sql.ConflictColumns(columns...))
	return &ZipcodeUpsertBulk{
		create: zcb,
	}
}

// ZipcodeUpsertBulk is the builder for "upsert"-ing
// a bulk of Zipcode nodes.
type ZipcodeUpsertBulk struct {
	create *ZipcodeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Zipcode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(zipcode.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ZipcodeUpsertBulk) UpdateNewValues() *ZipcodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(zipcode.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Zipcode.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ZipcodeUpsertBulk) Ignore() *ZipcodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ZipcodeUpsertBulk) DoNothing() *ZipcodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ZipcodeCreateBulk.OnConflict
// documentation for more info.
func (u *ZipcodeUpsertBulk) Update(set func(*ZipcodeUpsert)) *ZipcodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ZipcodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetZipCodeType sets the "ZipCodeType" field.
func (u *ZipcodeUpsertBulk) SetZipCodeType(v string) *ZipcodeUpsertBulk {
	return u.Update(func(s *ZipcodeUpsert) {
		s.SetZipCodeType(v)
	})
}

// UpdateZipCodeType sets the "ZipCodeType" field to the value that was provided on create.
func (u *ZipcodeUpsertBulk) UpdateZipCodeType() *ZipcodeUpsertBulk {
	return u.Update(func(s *ZipcodeUpsert) {
		s.UpdateZipCodeType()
	})
}

// SetCity sets the "City" field.
func (u *ZipcodeUpsertBulk) SetCity(v string) *ZipcodeUpsertBulk {
	return u.Update(func(s *ZipcodeUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "City" field to the value that was provided on create.
func (u *ZipcodeUpsertBulk) UpdateCity() *ZipcodeUpsertBulk {
	return u.Update(func(s *ZipcodeUpsert) {
		s.UpdateCity()
	})
}

// SetState sets the "State" field.
func (u *ZipcodeUpsertBulk) SetState(v string) *ZipcodeUpsertBulk {
	return u.Update(func(s *ZipcodeUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "State" field to the value that was provided on create.
func (u *ZipcodeUpsertBulk) UpdateState() *ZipcodeUpsertBulk {
	return u.Update(func(s *ZipcodeUpsert) {
		s.UpdateState()
	})
}

// SetLocationType sets the "LocationType" field.
func (u *ZipcodeUpsertBulk) SetLocationType(v string) *ZipcodeUpsertBulk {
	return u.Update(func(s *ZipcodeUpsert) {
		s.SetLocationType(v)
	})
}

// UpdateLocationType sets the "LocationType" field to the value that was provided on create.
func (u *ZipcodeUpsertBulk) UpdateLocationType() *ZipcodeUpsertBulk {
	return u.Update(func(s *ZipcodeUpsert) {
		s.UpdateLocationType()
	})
}

// SetLat sets the "Lat" field.
func (u *ZipcodeUpsertBulk) SetLat(v float64) *ZipcodeUpsertBulk {
	return u.Update(func(s *ZipcodeUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "Lat" field.
func (u *ZipcodeUpsertBulk) AddLat(v float64) *ZipcodeUpsertBulk {
	return u.Update(func(s *ZipcodeUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "Lat" field to the value that was provided on create.
func (u *ZipcodeUpsertBulk) UpdateLat() *ZipcodeUpsertBulk {
	return u.Update(func(s *ZipcodeUpsert) {
		s.UpdateLat()
	})
}

// ClearLat clears the value of the "Lat" field.
func (u *ZipcodeUpsertBulk) ClearLat() *ZipcodeUpsertBulk {
	return u.Update(func(s *ZipcodeUpsert) {
		s.ClearLat()
	})
}

// SetLong sets the "Long" field.
func (u *ZipcodeUpsertBulk) SetLong(v float64) *ZipcodeUpsertBulk {
	return u.Update(func(s *ZipcodeUpsert) {
		s.SetLong(v)
	})
}

// AddLong adds v to the "Long" field.
func (u *ZipcodeUpsertBulk) AddLong(v float64) *ZipcodeUpsertBulk {
	return u.Update(func(s *ZipcodeUpsert) {
		s.AddLong(v)
	})
}

// UpdateLong sets the "Long" field to the value that was provided on create.
func (u *ZipcodeUpsertBulk) UpdateLong() *ZipcodeUpsertBulk {
	return u.Update(func(s *ZipcodeUpsert) {
		s.UpdateLong()
	})
}

// ClearLong clears the value of the "Long" field.
func (u *ZipcodeUpsertBulk) ClearLong() *ZipcodeUpsertBulk {
	return u.Update(func(s *ZipcodeUpsert) {
		s.ClearLong()
	})
}

// Exec executes the query.
func (u *ZipcodeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ZipcodeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ZipcodeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ZipcodeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
