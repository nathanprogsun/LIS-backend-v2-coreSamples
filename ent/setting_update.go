// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/clinic"
	"coresamples/ent/customersettingonclinics"
	"coresamples/ent/internaluser"
	"coresamples/ent/patient"
	"coresamples/ent/predicate"
	"coresamples/ent/setting"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SettingUpdate is the builder for updating Setting entities.
type SettingUpdate struct {
	config
	hooks    []Hook
	mutation *SettingMutation
}

// Where appends a list predicates to the SettingUpdate builder.
func (su *SettingUpdate) Where(ps ...predicate.Setting) *SettingUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetSettingName sets the "setting_name" field.
func (su *SettingUpdate) SetSettingName(s string) *SettingUpdate {
	su.mutation.SetSettingName(s)
	return su
}

// SetNillableSettingName sets the "setting_name" field if the given value is not nil.
func (su *SettingUpdate) SetNillableSettingName(s *string) *SettingUpdate {
	if s != nil {
		su.SetSettingName(*s)
	}
	return su
}

// SetSettingGroup sets the "setting_group" field.
func (su *SettingUpdate) SetSettingGroup(s string) *SettingUpdate {
	su.mutation.SetSettingGroup(s)
	return su
}

// SetNillableSettingGroup sets the "setting_group" field if the given value is not nil.
func (su *SettingUpdate) SetNillableSettingGroup(s *string) *SettingUpdate {
	if s != nil {
		su.SetSettingGroup(*s)
	}
	return su
}

// SetSettingDescription sets the "setting_description" field.
func (su *SettingUpdate) SetSettingDescription(s string) *SettingUpdate {
	su.mutation.SetSettingDescription(s)
	return su
}

// SetNillableSettingDescription sets the "setting_description" field if the given value is not nil.
func (su *SettingUpdate) SetNillableSettingDescription(s *string) *SettingUpdate {
	if s != nil {
		su.SetSettingDescription(*s)
	}
	return su
}

// SetSettingValue sets the "setting_value" field.
func (su *SettingUpdate) SetSettingValue(s string) *SettingUpdate {
	su.mutation.SetSettingValue(s)
	return su
}

// SetNillableSettingValue sets the "setting_value" field if the given value is not nil.
func (su *SettingUpdate) SetNillableSettingValue(s *string) *SettingUpdate {
	if s != nil {
		su.SetSettingValue(*s)
	}
	return su
}

// ClearSettingValue clears the value of the "setting_value" field.
func (su *SettingUpdate) ClearSettingValue() *SettingUpdate {
	su.mutation.ClearSettingValue()
	return su
}

// SetSettingType sets the "setting_type" field.
func (su *SettingUpdate) SetSettingType(s string) *SettingUpdate {
	su.mutation.SetSettingType(s)
	return su
}

// SetNillableSettingType sets the "setting_type" field if the given value is not nil.
func (su *SettingUpdate) SetNillableSettingType(s *string) *SettingUpdate {
	if s != nil {
		su.SetSettingType(*s)
	}
	return su
}

// SetSettingValueUpdatedTime sets the "setting_value_updated_time" field.
func (su *SettingUpdate) SetSettingValueUpdatedTime(t time.Time) *SettingUpdate {
	su.mutation.SetSettingValueUpdatedTime(t)
	return su
}

// SetNillableSettingValueUpdatedTime sets the "setting_value_updated_time" field if the given value is not nil.
func (su *SettingUpdate) SetNillableSettingValueUpdatedTime(t *time.Time) *SettingUpdate {
	if t != nil {
		su.SetSettingValueUpdatedTime(*t)
	}
	return su
}

// SetIsActive sets the "is_active" field.
func (su *SettingUpdate) SetIsActive(b bool) *SettingUpdate {
	su.mutation.SetIsActive(b)
	return su
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (su *SettingUpdate) SetNillableIsActive(b *bool) *SettingUpdate {
	if b != nil {
		su.SetIsActive(*b)
	}
	return su
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (su *SettingUpdate) SetApplyToAllGroupMember(b bool) *SettingUpdate {
	su.mutation.SetApplyToAllGroupMember(b)
	return su
}

// SetNillableApplyToAllGroupMember sets the "apply_to_all_group_member" field if the given value is not nil.
func (su *SettingUpdate) SetNillableApplyToAllGroupMember(b *bool) *SettingUpdate {
	if b != nil {
		su.SetApplyToAllGroupMember(*b)
	}
	return su
}

// SetIsOfficial sets the "is_official" field.
func (su *SettingUpdate) SetIsOfficial(b bool) *SettingUpdate {
	su.mutation.SetIsOfficial(b)
	return su
}

// SetNillableIsOfficial sets the "is_official" field if the given value is not nil.
func (su *SettingUpdate) SetNillableIsOfficial(b *bool) *SettingUpdate {
	if b != nil {
		su.SetIsOfficial(*b)
	}
	return su
}

// SetSettingLevel sets the "setting_level" field.
func (su *SettingUpdate) SetSettingLevel(i int) *SettingUpdate {
	su.mutation.ResetSettingLevel()
	su.mutation.SetSettingLevel(i)
	return su
}

// SetNillableSettingLevel sets the "setting_level" field if the given value is not nil.
func (su *SettingUpdate) SetNillableSettingLevel(i *int) *SettingUpdate {
	if i != nil {
		su.SetSettingLevel(*i)
	}
	return su
}

// AddSettingLevel adds i to the "setting_level" field.
func (su *SettingUpdate) AddSettingLevel(i int) *SettingUpdate {
	su.mutation.AddSettingLevel(i)
	return su
}

// SetSettingLevelName sets the "setting_level_name" field.
func (su *SettingUpdate) SetSettingLevelName(s string) *SettingUpdate {
	su.mutation.SetSettingLevelName(s)
	return su
}

// SetNillableSettingLevelName sets the "setting_level_name" field if the given value is not nil.
func (su *SettingUpdate) SetNillableSettingLevelName(s *string) *SettingUpdate {
	if s != nil {
		su.SetSettingLevelName(*s)
	}
	return su
}

// SetUseGroupSetting sets the "use_group_setting" field.
func (su *SettingUpdate) SetUseGroupSetting(b bool) *SettingUpdate {
	su.mutation.SetUseGroupSetting(b)
	return su
}

// SetNillableUseGroupSetting sets the "use_group_setting" field if the given value is not nil.
func (su *SettingUpdate) SetNillableUseGroupSetting(b *bool) *SettingUpdate {
	if b != nil {
		su.SetUseGroupSetting(*b)
	}
	return su
}

// AddClinicIDs adds the "clinics" edge to the Clinic entity by IDs.
func (su *SettingUpdate) AddClinicIDs(ids ...int) *SettingUpdate {
	su.mutation.AddClinicIDs(ids...)
	return su
}

// AddClinics adds the "clinics" edges to the Clinic entity.
func (su *SettingUpdate) AddClinics(c ...*Clinic) *SettingUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddClinicIDs(ids...)
}

// AddInternalUserIDs adds the "internal_users" edge to the InternalUser entity by IDs.
func (su *SettingUpdate) AddInternalUserIDs(ids ...int) *SettingUpdate {
	su.mutation.AddInternalUserIDs(ids...)
	return su
}

// AddInternalUsers adds the "internal_users" edges to the InternalUser entity.
func (su *SettingUpdate) AddInternalUsers(i ...*InternalUser) *SettingUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.AddInternalUserIDs(ids...)
}

// AddPatientIDs adds the "patients" edge to the Patient entity by IDs.
func (su *SettingUpdate) AddPatientIDs(ids ...int) *SettingUpdate {
	su.mutation.AddPatientIDs(ids...)
	return su
}

// AddPatients adds the "patients" edges to the Patient entity.
func (su *SettingUpdate) AddPatients(p ...*Patient) *SettingUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPatientIDs(ids...)
}

// AddClinicCustomerIDs adds the "clinic_customers" edge to the CustomerSettingOnClinics entity by IDs.
func (su *SettingUpdate) AddClinicCustomerIDs(ids ...int) *SettingUpdate {
	su.mutation.AddClinicCustomerIDs(ids...)
	return su
}

// AddClinicCustomers adds the "clinic_customers" edges to the CustomerSettingOnClinics entity.
func (su *SettingUpdate) AddClinicCustomers(c ...*CustomerSettingOnClinics) *SettingUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddClinicCustomerIDs(ids...)
}

// Mutation returns the SettingMutation object of the builder.
func (su *SettingUpdate) Mutation() *SettingMutation {
	return su.mutation
}

// ClearClinics clears all "clinics" edges to the Clinic entity.
func (su *SettingUpdate) ClearClinics() *SettingUpdate {
	su.mutation.ClearClinics()
	return su
}

// RemoveClinicIDs removes the "clinics" edge to Clinic entities by IDs.
func (su *SettingUpdate) RemoveClinicIDs(ids ...int) *SettingUpdate {
	su.mutation.RemoveClinicIDs(ids...)
	return su
}

// RemoveClinics removes "clinics" edges to Clinic entities.
func (su *SettingUpdate) RemoveClinics(c ...*Clinic) *SettingUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveClinicIDs(ids...)
}

// ClearInternalUsers clears all "internal_users" edges to the InternalUser entity.
func (su *SettingUpdate) ClearInternalUsers() *SettingUpdate {
	su.mutation.ClearInternalUsers()
	return su
}

// RemoveInternalUserIDs removes the "internal_users" edge to InternalUser entities by IDs.
func (su *SettingUpdate) RemoveInternalUserIDs(ids ...int) *SettingUpdate {
	su.mutation.RemoveInternalUserIDs(ids...)
	return su
}

// RemoveInternalUsers removes "internal_users" edges to InternalUser entities.
func (su *SettingUpdate) RemoveInternalUsers(i ...*InternalUser) *SettingUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.RemoveInternalUserIDs(ids...)
}

// ClearPatients clears all "patients" edges to the Patient entity.
func (su *SettingUpdate) ClearPatients() *SettingUpdate {
	su.mutation.ClearPatients()
	return su
}

// RemovePatientIDs removes the "patients" edge to Patient entities by IDs.
func (su *SettingUpdate) RemovePatientIDs(ids ...int) *SettingUpdate {
	su.mutation.RemovePatientIDs(ids...)
	return su
}

// RemovePatients removes "patients" edges to Patient entities.
func (su *SettingUpdate) RemovePatients(p ...*Patient) *SettingUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePatientIDs(ids...)
}

// ClearClinicCustomers clears all "clinic_customers" edges to the CustomerSettingOnClinics entity.
func (su *SettingUpdate) ClearClinicCustomers() *SettingUpdate {
	su.mutation.ClearClinicCustomers()
	return su
}

// RemoveClinicCustomerIDs removes the "clinic_customers" edge to CustomerSettingOnClinics entities by IDs.
func (su *SettingUpdate) RemoveClinicCustomerIDs(ids ...int) *SettingUpdate {
	su.mutation.RemoveClinicCustomerIDs(ids...)
	return su
}

// RemoveClinicCustomers removes "clinic_customers" edges to CustomerSettingOnClinics entities.
func (su *SettingUpdate) RemoveClinicCustomers(c ...*CustomerSettingOnClinics) *SettingUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveClinicCustomerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SettingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SettingUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SettingUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SettingUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(setting.Table, setting.Columns, sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.SettingName(); ok {
		_spec.SetField(setting.FieldSettingName, field.TypeString, value)
	}
	if value, ok := su.mutation.SettingGroup(); ok {
		_spec.SetField(setting.FieldSettingGroup, field.TypeString, value)
	}
	if value, ok := su.mutation.SettingDescription(); ok {
		_spec.SetField(setting.FieldSettingDescription, field.TypeString, value)
	}
	if value, ok := su.mutation.SettingValue(); ok {
		_spec.SetField(setting.FieldSettingValue, field.TypeString, value)
	}
	if su.mutation.SettingValueCleared() {
		_spec.ClearField(setting.FieldSettingValue, field.TypeString)
	}
	if value, ok := su.mutation.SettingType(); ok {
		_spec.SetField(setting.FieldSettingType, field.TypeString, value)
	}
	if value, ok := su.mutation.SettingValueUpdatedTime(); ok {
		_spec.SetField(setting.FieldSettingValueUpdatedTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.IsActive(); ok {
		_spec.SetField(setting.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := su.mutation.ApplyToAllGroupMember(); ok {
		_spec.SetField(setting.FieldApplyToAllGroupMember, field.TypeBool, value)
	}
	if value, ok := su.mutation.IsOfficial(); ok {
		_spec.SetField(setting.FieldIsOfficial, field.TypeBool, value)
	}
	if value, ok := su.mutation.SettingLevel(); ok {
		_spec.SetField(setting.FieldSettingLevel, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedSettingLevel(); ok {
		_spec.AddField(setting.FieldSettingLevel, field.TypeInt, value)
	}
	if value, ok := su.mutation.SettingLevelName(); ok {
		_spec.SetField(setting.FieldSettingLevelName, field.TypeString, value)
	}
	if value, ok := su.mutation.UseGroupSetting(); ok {
		_spec.SetField(setting.FieldUseGroupSetting, field.TypeBool, value)
	}
	if su.mutation.ClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.ClinicsTable,
			Columns: setting.ClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedClinicsIDs(); len(nodes) > 0 && !su.mutation.ClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.ClinicsTable,
			Columns: setting.ClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.ClinicsTable,
			Columns: setting.ClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.InternalUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.InternalUsersTable,
			Columns: setting.InternalUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedInternalUsersIDs(); len(nodes) > 0 && !su.mutation.InternalUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.InternalUsersTable,
			Columns: setting.InternalUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.InternalUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.InternalUsersTable,
			Columns: setting.InternalUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PatientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.PatientsTable,
			Columns: setting.PatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPatientsIDs(); len(nodes) > 0 && !su.mutation.PatientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.PatientsTable,
			Columns: setting.PatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.PatientsTable,
			Columns: setting.PatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ClinicCustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   setting.ClinicCustomersTable,
			Columns: []string{setting.ClinicCustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedClinicCustomersIDs(); len(nodes) > 0 && !su.mutation.ClinicCustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   setting.ClinicCustomersTable,
			Columns: []string{setting.ClinicCustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ClinicCustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   setting.ClinicCustomersTable,
			Columns: []string{setting.ClinicCustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{setting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SettingUpdateOne is the builder for updating a single Setting entity.
type SettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SettingMutation
}

// SetSettingName sets the "setting_name" field.
func (suo *SettingUpdateOne) SetSettingName(s string) *SettingUpdateOne {
	suo.mutation.SetSettingName(s)
	return suo
}

// SetNillableSettingName sets the "setting_name" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableSettingName(s *string) *SettingUpdateOne {
	if s != nil {
		suo.SetSettingName(*s)
	}
	return suo
}

// SetSettingGroup sets the "setting_group" field.
func (suo *SettingUpdateOne) SetSettingGroup(s string) *SettingUpdateOne {
	suo.mutation.SetSettingGroup(s)
	return suo
}

// SetNillableSettingGroup sets the "setting_group" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableSettingGroup(s *string) *SettingUpdateOne {
	if s != nil {
		suo.SetSettingGroup(*s)
	}
	return suo
}

// SetSettingDescription sets the "setting_description" field.
func (suo *SettingUpdateOne) SetSettingDescription(s string) *SettingUpdateOne {
	suo.mutation.SetSettingDescription(s)
	return suo
}

// SetNillableSettingDescription sets the "setting_description" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableSettingDescription(s *string) *SettingUpdateOne {
	if s != nil {
		suo.SetSettingDescription(*s)
	}
	return suo
}

// SetSettingValue sets the "setting_value" field.
func (suo *SettingUpdateOne) SetSettingValue(s string) *SettingUpdateOne {
	suo.mutation.SetSettingValue(s)
	return suo
}

// SetNillableSettingValue sets the "setting_value" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableSettingValue(s *string) *SettingUpdateOne {
	if s != nil {
		suo.SetSettingValue(*s)
	}
	return suo
}

// ClearSettingValue clears the value of the "setting_value" field.
func (suo *SettingUpdateOne) ClearSettingValue() *SettingUpdateOne {
	suo.mutation.ClearSettingValue()
	return suo
}

// SetSettingType sets the "setting_type" field.
func (suo *SettingUpdateOne) SetSettingType(s string) *SettingUpdateOne {
	suo.mutation.SetSettingType(s)
	return suo
}

// SetNillableSettingType sets the "setting_type" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableSettingType(s *string) *SettingUpdateOne {
	if s != nil {
		suo.SetSettingType(*s)
	}
	return suo
}

// SetSettingValueUpdatedTime sets the "setting_value_updated_time" field.
func (suo *SettingUpdateOne) SetSettingValueUpdatedTime(t time.Time) *SettingUpdateOne {
	suo.mutation.SetSettingValueUpdatedTime(t)
	return suo
}

// SetNillableSettingValueUpdatedTime sets the "setting_value_updated_time" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableSettingValueUpdatedTime(t *time.Time) *SettingUpdateOne {
	if t != nil {
		suo.SetSettingValueUpdatedTime(*t)
	}
	return suo
}

// SetIsActive sets the "is_active" field.
func (suo *SettingUpdateOne) SetIsActive(b bool) *SettingUpdateOne {
	suo.mutation.SetIsActive(b)
	return suo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableIsActive(b *bool) *SettingUpdateOne {
	if b != nil {
		suo.SetIsActive(*b)
	}
	return suo
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (suo *SettingUpdateOne) SetApplyToAllGroupMember(b bool) *SettingUpdateOne {
	suo.mutation.SetApplyToAllGroupMember(b)
	return suo
}

// SetNillableApplyToAllGroupMember sets the "apply_to_all_group_member" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableApplyToAllGroupMember(b *bool) *SettingUpdateOne {
	if b != nil {
		suo.SetApplyToAllGroupMember(*b)
	}
	return suo
}

// SetIsOfficial sets the "is_official" field.
func (suo *SettingUpdateOne) SetIsOfficial(b bool) *SettingUpdateOne {
	suo.mutation.SetIsOfficial(b)
	return suo
}

// SetNillableIsOfficial sets the "is_official" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableIsOfficial(b *bool) *SettingUpdateOne {
	if b != nil {
		suo.SetIsOfficial(*b)
	}
	return suo
}

// SetSettingLevel sets the "setting_level" field.
func (suo *SettingUpdateOne) SetSettingLevel(i int) *SettingUpdateOne {
	suo.mutation.ResetSettingLevel()
	suo.mutation.SetSettingLevel(i)
	return suo
}

// SetNillableSettingLevel sets the "setting_level" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableSettingLevel(i *int) *SettingUpdateOne {
	if i != nil {
		suo.SetSettingLevel(*i)
	}
	return suo
}

// AddSettingLevel adds i to the "setting_level" field.
func (suo *SettingUpdateOne) AddSettingLevel(i int) *SettingUpdateOne {
	suo.mutation.AddSettingLevel(i)
	return suo
}

// SetSettingLevelName sets the "setting_level_name" field.
func (suo *SettingUpdateOne) SetSettingLevelName(s string) *SettingUpdateOne {
	suo.mutation.SetSettingLevelName(s)
	return suo
}

// SetNillableSettingLevelName sets the "setting_level_name" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableSettingLevelName(s *string) *SettingUpdateOne {
	if s != nil {
		suo.SetSettingLevelName(*s)
	}
	return suo
}

// SetUseGroupSetting sets the "use_group_setting" field.
func (suo *SettingUpdateOne) SetUseGroupSetting(b bool) *SettingUpdateOne {
	suo.mutation.SetUseGroupSetting(b)
	return suo
}

// SetNillableUseGroupSetting sets the "use_group_setting" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableUseGroupSetting(b *bool) *SettingUpdateOne {
	if b != nil {
		suo.SetUseGroupSetting(*b)
	}
	return suo
}

// AddClinicIDs adds the "clinics" edge to the Clinic entity by IDs.
func (suo *SettingUpdateOne) AddClinicIDs(ids ...int) *SettingUpdateOne {
	suo.mutation.AddClinicIDs(ids...)
	return suo
}

// AddClinics adds the "clinics" edges to the Clinic entity.
func (suo *SettingUpdateOne) AddClinics(c ...*Clinic) *SettingUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddClinicIDs(ids...)
}

// AddInternalUserIDs adds the "internal_users" edge to the InternalUser entity by IDs.
func (suo *SettingUpdateOne) AddInternalUserIDs(ids ...int) *SettingUpdateOne {
	suo.mutation.AddInternalUserIDs(ids...)
	return suo
}

// AddInternalUsers adds the "internal_users" edges to the InternalUser entity.
func (suo *SettingUpdateOne) AddInternalUsers(i ...*InternalUser) *SettingUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.AddInternalUserIDs(ids...)
}

// AddPatientIDs adds the "patients" edge to the Patient entity by IDs.
func (suo *SettingUpdateOne) AddPatientIDs(ids ...int) *SettingUpdateOne {
	suo.mutation.AddPatientIDs(ids...)
	return suo
}

// AddPatients adds the "patients" edges to the Patient entity.
func (suo *SettingUpdateOne) AddPatients(p ...*Patient) *SettingUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPatientIDs(ids...)
}

// AddClinicCustomerIDs adds the "clinic_customers" edge to the CustomerSettingOnClinics entity by IDs.
func (suo *SettingUpdateOne) AddClinicCustomerIDs(ids ...int) *SettingUpdateOne {
	suo.mutation.AddClinicCustomerIDs(ids...)
	return suo
}

// AddClinicCustomers adds the "clinic_customers" edges to the CustomerSettingOnClinics entity.
func (suo *SettingUpdateOne) AddClinicCustomers(c ...*CustomerSettingOnClinics) *SettingUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddClinicCustomerIDs(ids...)
}

// Mutation returns the SettingMutation object of the builder.
func (suo *SettingUpdateOne) Mutation() *SettingMutation {
	return suo.mutation
}

// ClearClinics clears all "clinics" edges to the Clinic entity.
func (suo *SettingUpdateOne) ClearClinics() *SettingUpdateOne {
	suo.mutation.ClearClinics()
	return suo
}

// RemoveClinicIDs removes the "clinics" edge to Clinic entities by IDs.
func (suo *SettingUpdateOne) RemoveClinicIDs(ids ...int) *SettingUpdateOne {
	suo.mutation.RemoveClinicIDs(ids...)
	return suo
}

// RemoveClinics removes "clinics" edges to Clinic entities.
func (suo *SettingUpdateOne) RemoveClinics(c ...*Clinic) *SettingUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveClinicIDs(ids...)
}

// ClearInternalUsers clears all "internal_users" edges to the InternalUser entity.
func (suo *SettingUpdateOne) ClearInternalUsers() *SettingUpdateOne {
	suo.mutation.ClearInternalUsers()
	return suo
}

// RemoveInternalUserIDs removes the "internal_users" edge to InternalUser entities by IDs.
func (suo *SettingUpdateOne) RemoveInternalUserIDs(ids ...int) *SettingUpdateOne {
	suo.mutation.RemoveInternalUserIDs(ids...)
	return suo
}

// RemoveInternalUsers removes "internal_users" edges to InternalUser entities.
func (suo *SettingUpdateOne) RemoveInternalUsers(i ...*InternalUser) *SettingUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.RemoveInternalUserIDs(ids...)
}

// ClearPatients clears all "patients" edges to the Patient entity.
func (suo *SettingUpdateOne) ClearPatients() *SettingUpdateOne {
	suo.mutation.ClearPatients()
	return suo
}

// RemovePatientIDs removes the "patients" edge to Patient entities by IDs.
func (suo *SettingUpdateOne) RemovePatientIDs(ids ...int) *SettingUpdateOne {
	suo.mutation.RemovePatientIDs(ids...)
	return suo
}

// RemovePatients removes "patients" edges to Patient entities.
func (suo *SettingUpdateOne) RemovePatients(p ...*Patient) *SettingUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePatientIDs(ids...)
}

// ClearClinicCustomers clears all "clinic_customers" edges to the CustomerSettingOnClinics entity.
func (suo *SettingUpdateOne) ClearClinicCustomers() *SettingUpdateOne {
	suo.mutation.ClearClinicCustomers()
	return suo
}

// RemoveClinicCustomerIDs removes the "clinic_customers" edge to CustomerSettingOnClinics entities by IDs.
func (suo *SettingUpdateOne) RemoveClinicCustomerIDs(ids ...int) *SettingUpdateOne {
	suo.mutation.RemoveClinicCustomerIDs(ids...)
	return suo
}

// RemoveClinicCustomers removes "clinic_customers" edges to CustomerSettingOnClinics entities.
func (suo *SettingUpdateOne) RemoveClinicCustomers(c ...*CustomerSettingOnClinics) *SettingUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveClinicCustomerIDs(ids...)
}

// Where appends a list predicates to the SettingUpdate builder.
func (suo *SettingUpdateOne) Where(ps ...predicate.Setting) *SettingUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SettingUpdateOne) Select(field string, fields ...string) *SettingUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Setting entity.
func (suo *SettingUpdateOne) Save(ctx context.Context) (*Setting, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SettingUpdateOne) SaveX(ctx context.Context) *Setting {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SettingUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SettingUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SettingUpdateOne) sqlSave(ctx context.Context) (_node *Setting, err error) {
	_spec := sqlgraph.NewUpdateSpec(setting.Table, setting.Columns, sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Setting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, setting.FieldID)
		for _, f := range fields {
			if !setting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != setting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.SettingName(); ok {
		_spec.SetField(setting.FieldSettingName, field.TypeString, value)
	}
	if value, ok := suo.mutation.SettingGroup(); ok {
		_spec.SetField(setting.FieldSettingGroup, field.TypeString, value)
	}
	if value, ok := suo.mutation.SettingDescription(); ok {
		_spec.SetField(setting.FieldSettingDescription, field.TypeString, value)
	}
	if value, ok := suo.mutation.SettingValue(); ok {
		_spec.SetField(setting.FieldSettingValue, field.TypeString, value)
	}
	if suo.mutation.SettingValueCleared() {
		_spec.ClearField(setting.FieldSettingValue, field.TypeString)
	}
	if value, ok := suo.mutation.SettingType(); ok {
		_spec.SetField(setting.FieldSettingType, field.TypeString, value)
	}
	if value, ok := suo.mutation.SettingValueUpdatedTime(); ok {
		_spec.SetField(setting.FieldSettingValueUpdatedTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.IsActive(); ok {
		_spec.SetField(setting.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := suo.mutation.ApplyToAllGroupMember(); ok {
		_spec.SetField(setting.FieldApplyToAllGroupMember, field.TypeBool, value)
	}
	if value, ok := suo.mutation.IsOfficial(); ok {
		_spec.SetField(setting.FieldIsOfficial, field.TypeBool, value)
	}
	if value, ok := suo.mutation.SettingLevel(); ok {
		_spec.SetField(setting.FieldSettingLevel, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedSettingLevel(); ok {
		_spec.AddField(setting.FieldSettingLevel, field.TypeInt, value)
	}
	if value, ok := suo.mutation.SettingLevelName(); ok {
		_spec.SetField(setting.FieldSettingLevelName, field.TypeString, value)
	}
	if value, ok := suo.mutation.UseGroupSetting(); ok {
		_spec.SetField(setting.FieldUseGroupSetting, field.TypeBool, value)
	}
	if suo.mutation.ClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.ClinicsTable,
			Columns: setting.ClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedClinicsIDs(); len(nodes) > 0 && !suo.mutation.ClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.ClinicsTable,
			Columns: setting.ClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.ClinicsTable,
			Columns: setting.ClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.InternalUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.InternalUsersTable,
			Columns: setting.InternalUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedInternalUsersIDs(); len(nodes) > 0 && !suo.mutation.InternalUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.InternalUsersTable,
			Columns: setting.InternalUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.InternalUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.InternalUsersTable,
			Columns: setting.InternalUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PatientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.PatientsTable,
			Columns: setting.PatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPatientsIDs(); len(nodes) > 0 && !suo.mutation.PatientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.PatientsTable,
			Columns: setting.PatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.PatientsTable,
			Columns: setting.PatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ClinicCustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   setting.ClinicCustomersTable,
			Columns: []string{setting.ClinicCustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedClinicCustomersIDs(); len(nodes) > 0 && !suo.mutation.ClinicCustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   setting.ClinicCustomersTable,
			Columns: []string{setting.ClinicCustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ClinicCustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   setting.ClinicCustomersTable,
			Columns: []string{setting.ClinicCustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Setting{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{setting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
