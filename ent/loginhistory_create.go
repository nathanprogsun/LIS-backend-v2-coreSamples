// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/loginhistory"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoginHistoryCreate is the builder for creating a LoginHistory entity.
type LoginHistoryCreate struct {
	config
	mutation *LoginHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUsername sets the "username" field.
func (lhc *LoginHistoryCreate) SetUsername(s string) *LoginHistoryCreate {
	lhc.mutation.SetUsername(s)
	return lhc
}

// SetLoginTime sets the "login_time" field.
func (lhc *LoginHistoryCreate) SetLoginTime(t time.Time) *LoginHistoryCreate {
	lhc.mutation.SetLoginTime(t)
	return lhc
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (lhc *LoginHistoryCreate) SetNillableLoginTime(t *time.Time) *LoginHistoryCreate {
	if t != nil {
		lhc.SetLoginTime(*t)
	}
	return lhc
}

// SetLoginIP sets the "login_ip" field.
func (lhc *LoginHistoryCreate) SetLoginIP(s string) *LoginHistoryCreate {
	lhc.mutation.SetLoginIP(s)
	return lhc
}

// SetLoginSuccessfully sets the "login_successfully" field.
func (lhc *LoginHistoryCreate) SetLoginSuccessfully(b bool) *LoginHistoryCreate {
	lhc.mutation.SetLoginSuccessfully(b)
	return lhc
}

// SetFailureReason sets the "failure_reason" field.
func (lhc *LoginHistoryCreate) SetFailureReason(s string) *LoginHistoryCreate {
	lhc.mutation.SetFailureReason(s)
	return lhc
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (lhc *LoginHistoryCreate) SetNillableFailureReason(s *string) *LoginHistoryCreate {
	if s != nil {
		lhc.SetFailureReason(*s)
	}
	return lhc
}

// SetLoginPortal sets the "login_portal" field.
func (lhc *LoginHistoryCreate) SetLoginPortal(s string) *LoginHistoryCreate {
	lhc.mutation.SetLoginPortal(s)
	return lhc
}

// SetNillableLoginPortal sets the "login_portal" field if the given value is not nil.
func (lhc *LoginHistoryCreate) SetNillableLoginPortal(s *string) *LoginHistoryCreate {
	if s != nil {
		lhc.SetLoginPortal(*s)
	}
	return lhc
}

// SetToken sets the "token" field.
func (lhc *LoginHistoryCreate) SetToken(s string) *LoginHistoryCreate {
	lhc.mutation.SetToken(s)
	return lhc
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (lhc *LoginHistoryCreate) SetNillableToken(s *string) *LoginHistoryCreate {
	if s != nil {
		lhc.SetToken(*s)
	}
	return lhc
}

// Mutation returns the LoginHistoryMutation object of the builder.
func (lhc *LoginHistoryCreate) Mutation() *LoginHistoryMutation {
	return lhc.mutation
}

// Save creates the LoginHistory in the database.
func (lhc *LoginHistoryCreate) Save(ctx context.Context) (*LoginHistory, error) {
	lhc.defaults()
	return withHooks(ctx, lhc.sqlSave, lhc.mutation, lhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lhc *LoginHistoryCreate) SaveX(ctx context.Context) *LoginHistory {
	v, err := lhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lhc *LoginHistoryCreate) Exec(ctx context.Context) error {
	_, err := lhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lhc *LoginHistoryCreate) ExecX(ctx context.Context) {
	if err := lhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lhc *LoginHistoryCreate) defaults() {
	if _, ok := lhc.mutation.LoginTime(); !ok {
		v := loginhistory.DefaultLoginTime()
		lhc.mutation.SetLoginTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lhc *LoginHistoryCreate) check() error {
	if _, ok := lhc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "LoginHistory.username"`)}
	}
	if _, ok := lhc.mutation.LoginTime(); !ok {
		return &ValidationError{Name: "login_time", err: errors.New(`ent: missing required field "LoginHistory.login_time"`)}
	}
	if _, ok := lhc.mutation.LoginIP(); !ok {
		return &ValidationError{Name: "login_ip", err: errors.New(`ent: missing required field "LoginHistory.login_ip"`)}
	}
	if _, ok := lhc.mutation.LoginSuccessfully(); !ok {
		return &ValidationError{Name: "login_successfully", err: errors.New(`ent: missing required field "LoginHistory.login_successfully"`)}
	}
	if v, ok := lhc.mutation.Token(); ok {
		if err := loginhistory.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "LoginHistory.token": %w`, err)}
		}
	}
	return nil
}

func (lhc *LoginHistoryCreate) sqlSave(ctx context.Context) (*LoginHistory, error) {
	if err := lhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lhc.mutation.id = &_node.ID
	lhc.mutation.done = true
	return _node, nil
}

func (lhc *LoginHistoryCreate) createSpec() (*LoginHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &LoginHistory{config: lhc.config}
		_spec = sqlgraph.NewCreateSpec(loginhistory.Table, sqlgraph.NewFieldSpec(loginhistory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = lhc.conflict
	if value, ok := lhc.mutation.Username(); ok {
		_spec.SetField(loginhistory.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := lhc.mutation.LoginTime(); ok {
		_spec.SetField(loginhistory.FieldLoginTime, field.TypeTime, value)
		_node.LoginTime = value
	}
	if value, ok := lhc.mutation.LoginIP(); ok {
		_spec.SetField(loginhistory.FieldLoginIP, field.TypeString, value)
		_node.LoginIP = value
	}
	if value, ok := lhc.mutation.LoginSuccessfully(); ok {
		_spec.SetField(loginhistory.FieldLoginSuccessfully, field.TypeBool, value)
		_node.LoginSuccessfully = value
	}
	if value, ok := lhc.mutation.FailureReason(); ok {
		_spec.SetField(loginhistory.FieldFailureReason, field.TypeString, value)
		_node.FailureReason = value
	}
	if value, ok := lhc.mutation.LoginPortal(); ok {
		_spec.SetField(loginhistory.FieldLoginPortal, field.TypeString, value)
		_node.LoginPortal = value
	}
	if value, ok := lhc.mutation.Token(); ok {
		_spec.SetField(loginhistory.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LoginHistory.Create().
//		SetUsername(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LoginHistoryUpsert) {
//			SetUsername(v+v).
//		}).
//		Exec(ctx)
func (lhc *LoginHistoryCreate) OnConflict(opts ...sql.ConflictOption) *LoginHistoryUpsertOne {
	lhc.conflict = opts
	return &LoginHistoryUpsertOne{
		create: lhc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LoginHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lhc *LoginHistoryCreate) OnConflictColumns(columns ...string) *LoginHistoryUpsertOne {
	lhc.conflict = append(lhc.conflict, sql.ConflictColumns(columns...))
	return &LoginHistoryUpsertOne{
		create: lhc,
	}
}

type (
	// LoginHistoryUpsertOne is the builder for "upsert"-ing
	//  one LoginHistory node.
	LoginHistoryUpsertOne struct {
		create *LoginHistoryCreate
	}

	// LoginHistoryUpsert is the "OnConflict" setter.
	LoginHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUsername sets the "username" field.
func (u *LoginHistoryUpsert) SetUsername(v string) *LoginHistoryUpsert {
	u.Set(loginhistory.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *LoginHistoryUpsert) UpdateUsername() *LoginHistoryUpsert {
	u.SetExcluded(loginhistory.FieldUsername)
	return u
}

// SetLoginTime sets the "login_time" field.
func (u *LoginHistoryUpsert) SetLoginTime(v time.Time) *LoginHistoryUpsert {
	u.Set(loginhistory.FieldLoginTime, v)
	return u
}

// UpdateLoginTime sets the "login_time" field to the value that was provided on create.
func (u *LoginHistoryUpsert) UpdateLoginTime() *LoginHistoryUpsert {
	u.SetExcluded(loginhistory.FieldLoginTime)
	return u
}

// SetLoginIP sets the "login_ip" field.
func (u *LoginHistoryUpsert) SetLoginIP(v string) *LoginHistoryUpsert {
	u.Set(loginhistory.FieldLoginIP, v)
	return u
}

// UpdateLoginIP sets the "login_ip" field to the value that was provided on create.
func (u *LoginHistoryUpsert) UpdateLoginIP() *LoginHistoryUpsert {
	u.SetExcluded(loginhistory.FieldLoginIP)
	return u
}

// SetLoginSuccessfully sets the "login_successfully" field.
func (u *LoginHistoryUpsert) SetLoginSuccessfully(v bool) *LoginHistoryUpsert {
	u.Set(loginhistory.FieldLoginSuccessfully, v)
	return u
}

// UpdateLoginSuccessfully sets the "login_successfully" field to the value that was provided on create.
func (u *LoginHistoryUpsert) UpdateLoginSuccessfully() *LoginHistoryUpsert {
	u.SetExcluded(loginhistory.FieldLoginSuccessfully)
	return u
}

// SetFailureReason sets the "failure_reason" field.
func (u *LoginHistoryUpsert) SetFailureReason(v string) *LoginHistoryUpsert {
	u.Set(loginhistory.FieldFailureReason, v)
	return u
}

// UpdateFailureReason sets the "failure_reason" field to the value that was provided on create.
func (u *LoginHistoryUpsert) UpdateFailureReason() *LoginHistoryUpsert {
	u.SetExcluded(loginhistory.FieldFailureReason)
	return u
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (u *LoginHistoryUpsert) ClearFailureReason() *LoginHistoryUpsert {
	u.SetNull(loginhistory.FieldFailureReason)
	return u
}

// SetLoginPortal sets the "login_portal" field.
func (u *LoginHistoryUpsert) SetLoginPortal(v string) *LoginHistoryUpsert {
	u.Set(loginhistory.FieldLoginPortal, v)
	return u
}

// UpdateLoginPortal sets the "login_portal" field to the value that was provided on create.
func (u *LoginHistoryUpsert) UpdateLoginPortal() *LoginHistoryUpsert {
	u.SetExcluded(loginhistory.FieldLoginPortal)
	return u
}

// ClearLoginPortal clears the value of the "login_portal" field.
func (u *LoginHistoryUpsert) ClearLoginPortal() *LoginHistoryUpsert {
	u.SetNull(loginhistory.FieldLoginPortal)
	return u
}

// SetToken sets the "token" field.
func (u *LoginHistoryUpsert) SetToken(v string) *LoginHistoryUpsert {
	u.Set(loginhistory.FieldToken, v)
	return u
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *LoginHistoryUpsert) UpdateToken() *LoginHistoryUpsert {
	u.SetExcluded(loginhistory.FieldToken)
	return u
}

// ClearToken clears the value of the "token" field.
func (u *LoginHistoryUpsert) ClearToken() *LoginHistoryUpsert {
	u.SetNull(loginhistory.FieldToken)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.LoginHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LoginHistoryUpsertOne) UpdateNewValues() *LoginHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LoginHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LoginHistoryUpsertOne) Ignore() *LoginHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LoginHistoryUpsertOne) DoNothing() *LoginHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LoginHistoryCreate.OnConflict
// documentation for more info.
func (u *LoginHistoryUpsertOne) Update(set func(*LoginHistoryUpsert)) *LoginHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LoginHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUsername sets the "username" field.
func (u *LoginHistoryUpsertOne) SetUsername(v string) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *LoginHistoryUpsertOne) UpdateUsername() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateUsername()
	})
}

// SetLoginTime sets the "login_time" field.
func (u *LoginHistoryUpsertOne) SetLoginTime(v time.Time) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetLoginTime(v)
	})
}

// UpdateLoginTime sets the "login_time" field to the value that was provided on create.
func (u *LoginHistoryUpsertOne) UpdateLoginTime() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateLoginTime()
	})
}

// SetLoginIP sets the "login_ip" field.
func (u *LoginHistoryUpsertOne) SetLoginIP(v string) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetLoginIP(v)
	})
}

// UpdateLoginIP sets the "login_ip" field to the value that was provided on create.
func (u *LoginHistoryUpsertOne) UpdateLoginIP() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateLoginIP()
	})
}

// SetLoginSuccessfully sets the "login_successfully" field.
func (u *LoginHistoryUpsertOne) SetLoginSuccessfully(v bool) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetLoginSuccessfully(v)
	})
}

// UpdateLoginSuccessfully sets the "login_successfully" field to the value that was provided on create.
func (u *LoginHistoryUpsertOne) UpdateLoginSuccessfully() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateLoginSuccessfully()
	})
}

// SetFailureReason sets the "failure_reason" field.
func (u *LoginHistoryUpsertOne) SetFailureReason(v string) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetFailureReason(v)
	})
}

// UpdateFailureReason sets the "failure_reason" field to the value that was provided on create.
func (u *LoginHistoryUpsertOne) UpdateFailureReason() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateFailureReason()
	})
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (u *LoginHistoryUpsertOne) ClearFailureReason() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.ClearFailureReason()
	})
}

// SetLoginPortal sets the "login_portal" field.
func (u *LoginHistoryUpsertOne) SetLoginPortal(v string) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetLoginPortal(v)
	})
}

// UpdateLoginPortal sets the "login_portal" field to the value that was provided on create.
func (u *LoginHistoryUpsertOne) UpdateLoginPortal() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateLoginPortal()
	})
}

// ClearLoginPortal clears the value of the "login_portal" field.
func (u *LoginHistoryUpsertOne) ClearLoginPortal() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.ClearLoginPortal()
	})
}

// SetToken sets the "token" field.
func (u *LoginHistoryUpsertOne) SetToken(v string) *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *LoginHistoryUpsertOne) UpdateToken() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateToken()
	})
}

// ClearToken clears the value of the "token" field.
func (u *LoginHistoryUpsertOne) ClearToken() *LoginHistoryUpsertOne {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.ClearToken()
	})
}

// Exec executes the query.
func (u *LoginHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LoginHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LoginHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LoginHistoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LoginHistoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LoginHistoryCreateBulk is the builder for creating many LoginHistory entities in bulk.
type LoginHistoryCreateBulk struct {
	config
	err      error
	builders []*LoginHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the LoginHistory entities in the database.
func (lhcb *LoginHistoryCreateBulk) Save(ctx context.Context) ([]*LoginHistory, error) {
	if lhcb.err != nil {
		return nil, lhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lhcb.builders))
	nodes := make([]*LoginHistory, len(lhcb.builders))
	mutators := make([]Mutator, len(lhcb.builders))
	for i := range lhcb.builders {
		func(i int, root context.Context) {
			builder := lhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoginHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lhcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lhcb *LoginHistoryCreateBulk) SaveX(ctx context.Context) []*LoginHistory {
	v, err := lhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lhcb *LoginHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := lhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lhcb *LoginHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := lhcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LoginHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LoginHistoryUpsert) {
//			SetUsername(v+v).
//		}).
//		Exec(ctx)
func (lhcb *LoginHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *LoginHistoryUpsertBulk {
	lhcb.conflict = opts
	return &LoginHistoryUpsertBulk{
		create: lhcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LoginHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lhcb *LoginHistoryCreateBulk) OnConflictColumns(columns ...string) *LoginHistoryUpsertBulk {
	lhcb.conflict = append(lhcb.conflict, sql.ConflictColumns(columns...))
	return &LoginHistoryUpsertBulk{
		create: lhcb,
	}
}

// LoginHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of LoginHistory nodes.
type LoginHistoryUpsertBulk struct {
	create *LoginHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LoginHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LoginHistoryUpsertBulk) UpdateNewValues() *LoginHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LoginHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LoginHistoryUpsertBulk) Ignore() *LoginHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LoginHistoryUpsertBulk) DoNothing() *LoginHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LoginHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *LoginHistoryUpsertBulk) Update(set func(*LoginHistoryUpsert)) *LoginHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LoginHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUsername sets the "username" field.
func (u *LoginHistoryUpsertBulk) SetUsername(v string) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *LoginHistoryUpsertBulk) UpdateUsername() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateUsername()
	})
}

// SetLoginTime sets the "login_time" field.
func (u *LoginHistoryUpsertBulk) SetLoginTime(v time.Time) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetLoginTime(v)
	})
}

// UpdateLoginTime sets the "login_time" field to the value that was provided on create.
func (u *LoginHistoryUpsertBulk) UpdateLoginTime() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateLoginTime()
	})
}

// SetLoginIP sets the "login_ip" field.
func (u *LoginHistoryUpsertBulk) SetLoginIP(v string) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetLoginIP(v)
	})
}

// UpdateLoginIP sets the "login_ip" field to the value that was provided on create.
func (u *LoginHistoryUpsertBulk) UpdateLoginIP() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateLoginIP()
	})
}

// SetLoginSuccessfully sets the "login_successfully" field.
func (u *LoginHistoryUpsertBulk) SetLoginSuccessfully(v bool) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetLoginSuccessfully(v)
	})
}

// UpdateLoginSuccessfully sets the "login_successfully" field to the value that was provided on create.
func (u *LoginHistoryUpsertBulk) UpdateLoginSuccessfully() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateLoginSuccessfully()
	})
}

// SetFailureReason sets the "failure_reason" field.
func (u *LoginHistoryUpsertBulk) SetFailureReason(v string) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetFailureReason(v)
	})
}

// UpdateFailureReason sets the "failure_reason" field to the value that was provided on create.
func (u *LoginHistoryUpsertBulk) UpdateFailureReason() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateFailureReason()
	})
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (u *LoginHistoryUpsertBulk) ClearFailureReason() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.ClearFailureReason()
	})
}

// SetLoginPortal sets the "login_portal" field.
func (u *LoginHistoryUpsertBulk) SetLoginPortal(v string) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetLoginPortal(v)
	})
}

// UpdateLoginPortal sets the "login_portal" field to the value that was provided on create.
func (u *LoginHistoryUpsertBulk) UpdateLoginPortal() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateLoginPortal()
	})
}

// ClearLoginPortal clears the value of the "login_portal" field.
func (u *LoginHistoryUpsertBulk) ClearLoginPortal() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.ClearLoginPortal()
	})
}

// SetToken sets the "token" field.
func (u *LoginHistoryUpsertBulk) SetToken(v string) *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *LoginHistoryUpsertBulk) UpdateToken() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.UpdateToken()
	})
}

// ClearToken clears the value of the "token" field.
func (u *LoginHistoryUpsertBulk) ClearToken() *LoginHistoryUpsertBulk {
	return u.Update(func(s *LoginHistoryUpsert) {
		s.ClearToken()
	})
}

// Exec executes the query.
func (u *LoginHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LoginHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LoginHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LoginHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
