// Code generated by ent, DO NOT EDIT.

package sample

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sample type in the database.
	Label = "sample"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "sample_id"
	// FieldAccessionID holds the string denoting the accession_id field in the database.
	FieldAccessionID = "accession_id"
	// FieldSampleStorage holds the string denoting the sample_storage field in the database.
	FieldSampleStorage = "sample_storage"
	// FieldTubeCount holds the string denoting the tube_count field in the database.
	FieldTubeCount = "tube_count"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldPatientID holds the string denoting the patient_id field in the database.
	FieldPatientID = "patient_id"
	// FieldSampleOrderMethod holds the string denoting the sample_order_method field in the database.
	FieldSampleOrderMethod = "sample_order_method"
	// FieldSampleCollectionTime holds the string denoting the sample_collection_time field in the database.
	FieldSampleCollectionTime = "sample_collection_time"
	// FieldSampleReceivedTime holds the string denoting the sample_received_time field in the database.
	FieldSampleReceivedTime = "sample_received_time"
	// FieldSampleDescription holds the string denoting the sample_description field in the database.
	FieldSampleDescription = "sample_description"
	// FieldDelayedHours holds the string denoting the delayed_hours field in the database.
	FieldDelayedHours = "delayed_hours"
	// FieldSampleReportTime holds the string denoting the sample_report_time field in the database.
	FieldSampleReportTime = "sample_report_time"
	// FieldInternalReceivedTime holds the string denoting the internal_received_time field in the database.
	FieldInternalReceivedTime = "internal_received_time"
	// FieldSampleReportType holds the string denoting the sample_report_type field in the database.
	FieldSampleReportType = "sample_report_type"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldFastingHours holds the string denoting the fasting_hours field in the database.
	FieldFastingHours = "fasting_hours"
	// FieldFastingStatus holds the string denoting the fasting_status field in the database.
	FieldFastingStatus = "fasting_status"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// EdgeTubes holds the string denoting the tubes edge name in mutations.
	EdgeTubes = "tubes"
	// EdgeSampleReceiveRecords holds the string denoting the sample_receive_records edge name in mutations.
	EdgeSampleReceiveRecords = "sample_receive_records"
	// EdgeSampleRequiredTubes holds the string denoting the sample_required_tubes edge name in mutations.
	EdgeSampleRequiredTubes = "sample_required_tubes"
	// EdgePatient holds the string denoting the patient edge name in mutations.
	EdgePatient = "patient"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// OrderInfoFieldID holds the string denoting the ID field of the OrderInfo.
	OrderInfoFieldID = "order_id"
	// TubeFieldID holds the string denoting the ID field of the Tube.
	TubeFieldID = "id"
	// TubeReceiveFieldID holds the string denoting the ID field of the TubeReceive.
	TubeReceiveFieldID = "id"
	// TubeRequirementFieldID holds the string denoting the ID field of the TubeRequirement.
	TubeRequirementFieldID = "id"
	// PatientFieldID holds the string denoting the ID field of the Patient.
	PatientFieldID = "patient_id"
	// CustomerFieldID holds the string denoting the ID field of the Customer.
	CustomerFieldID = "customer_id"
	// Table holds the table name of the sample in the database.
	Table = "sample"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "sample"
	// OrderInverseTable is the table name for the OrderInfo entity.
	// It exists in this package in order to avoid circular dependency with the "orderinfo" package.
	OrderInverseTable = "order_info"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_id"
	// TubesTable is the table that holds the tubes relation/edge.
	TubesTable = "tube"
	// TubesInverseTable is the table name for the Tube entity.
	// It exists in this package in order to avoid circular dependency with the "tube" package.
	TubesInverseTable = "tube"
	// TubesColumn is the table column denoting the tubes relation/edge.
	TubesColumn = "sample_id"
	// SampleReceiveRecordsTable is the table that holds the sample_receive_records relation/edge.
	SampleReceiveRecordsTable = "tube_receive"
	// SampleReceiveRecordsInverseTable is the table name for the TubeReceive entity.
	// It exists in this package in order to avoid circular dependency with the "tubereceive" package.
	SampleReceiveRecordsInverseTable = "tube_receive"
	// SampleReceiveRecordsColumn is the table column denoting the sample_receive_records relation/edge.
	SampleReceiveRecordsColumn = "sample_id"
	// SampleRequiredTubesTable is the table that holds the sample_required_tubes relation/edge.
	SampleRequiredTubesTable = "tube_requirement"
	// SampleRequiredTubesInverseTable is the table name for the TubeRequirement entity.
	// It exists in this package in order to avoid circular dependency with the "tuberequirement" package.
	SampleRequiredTubesInverseTable = "tube_requirement"
	// SampleRequiredTubesColumn is the table column denoting the sample_required_tubes relation/edge.
	SampleRequiredTubesColumn = "sample_id"
	// PatientTable is the table that holds the patient relation/edge.
	PatientTable = "sample"
	// PatientInverseTable is the table name for the Patient entity.
	// It exists in this package in order to avoid circular dependency with the "patient" package.
	PatientInverseTable = "patient"
	// PatientColumn is the table column denoting the patient relation/edge.
	PatientColumn = "patient_id"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "sample"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customer"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_id"
)

// Columns holds all SQL columns for sample fields.
var Columns = []string{
	FieldID,
	FieldAccessionID,
	FieldSampleStorage,
	FieldTubeCount,
	FieldOrderID,
	FieldPatientID,
	FieldSampleOrderMethod,
	FieldSampleCollectionTime,
	FieldSampleReceivedTime,
	FieldSampleDescription,
	FieldDelayedHours,
	FieldSampleReportTime,
	FieldInternalReceivedTime,
	FieldSampleReportType,
	FieldCustomerID,
	FieldFastingHours,
	FieldFastingStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSampleStorage holds the default value on creation for the "sample_storage" field.
	DefaultSampleStorage string
	// DefaultTubeCount holds the default value on creation for the "tube_count" field.
	DefaultTubeCount int
	// DefaultSampleDescription holds the default value on creation for the "sample_description" field.
	DefaultSampleDescription string
)

// OrderOption defines the ordering options for the Sample queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAccessionID orders the results by the accession_id field.
func ByAccessionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessionID, opts...).ToFunc()
}

// BySampleStorage orders the results by the sample_storage field.
func BySampleStorage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSampleStorage, opts...).ToFunc()
}

// ByTubeCount orders the results by the tube_count field.
func ByTubeCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTubeCount, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByPatientID orders the results by the patient_id field.
func ByPatientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientID, opts...).ToFunc()
}

// BySampleOrderMethod orders the results by the sample_order_method field.
func BySampleOrderMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSampleOrderMethod, opts...).ToFunc()
}

// BySampleCollectionTime orders the results by the sample_collection_time field.
func BySampleCollectionTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSampleCollectionTime, opts...).ToFunc()
}

// BySampleReceivedTime orders the results by the sample_received_time field.
func BySampleReceivedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSampleReceivedTime, opts...).ToFunc()
}

// BySampleDescription orders the results by the sample_description field.
func BySampleDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSampleDescription, opts...).ToFunc()
}

// ByDelayedHours orders the results by the delayed_hours field.
func ByDelayedHours(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDelayedHours, opts...).ToFunc()
}

// BySampleReportTime orders the results by the sample_report_time field.
func BySampleReportTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSampleReportTime, opts...).ToFunc()
}

// ByInternalReceivedTime orders the results by the internal_received_time field.
func ByInternalReceivedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalReceivedTime, opts...).ToFunc()
}

// BySampleReportType orders the results by the sample_report_type field.
func BySampleReportType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSampleReportType, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByFastingHours orders the results by the fasting_hours field.
func ByFastingHours(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFastingHours, opts...).ToFunc()
}

// ByFastingStatus orders the results by the fasting_status field.
func ByFastingStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFastingStatus, opts...).ToFunc()
}

// ByOrderField orders the results by order field.
func ByOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), sql.OrderByField(field, opts...))
	}
}

// ByTubesCount orders the results by tubes count.
func ByTubesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTubesStep(), opts...)
	}
}

// ByTubes orders the results by tubes terms.
func ByTubes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTubesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySampleReceiveRecordsCount orders the results by sample_receive_records count.
func BySampleReceiveRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSampleReceiveRecordsStep(), opts...)
	}
}

// BySampleReceiveRecords orders the results by sample_receive_records terms.
func BySampleReceiveRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSampleReceiveRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySampleRequiredTubesCount orders the results by sample_required_tubes count.
func BySampleRequiredTubesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSampleRequiredTubesStep(), opts...)
	}
}

// BySampleRequiredTubes orders the results by sample_required_tubes terms.
func BySampleRequiredTubes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSampleRequiredTubesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPatientField orders the results by patient field.
func ByPatientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPatientStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, OrderInfoFieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, OrderTable, OrderColumn),
	)
}
func newTubesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TubesInverseTable, TubeFieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, TubesTable, TubesColumn),
	)
}
func newSampleReceiveRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SampleReceiveRecordsInverseTable, TubeReceiveFieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SampleReceiveRecordsTable, SampleReceiveRecordsColumn),
	)
}
func newSampleRequiredTubesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SampleRequiredTubesInverseTable, TubeRequirementFieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SampleRequiredTubesTable, SampleRequiredTubesColumn),
	)
}
func newPatientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PatientInverseTable, PatientFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
	)
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, CustomerFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
	)
}
