// Code generated by ent, DO NOT EDIT.

package sample

import (
	"coresamples/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Sample {
	return predicate.Sample(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Sample {
	return predicate.Sample(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Sample {
	return predicate.Sample(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Sample {
	return predicate.Sample(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Sample {
	return predicate.Sample(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Sample {
	return predicate.Sample(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Sample {
	return predicate.Sample(sql.FieldLTE(FieldID, id))
}

// AccessionID applies equality check predicate on the "accession_id" field. It's identical to AccessionIDEQ.
func AccessionID(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldAccessionID, v))
}

// SampleStorage applies equality check predicate on the "sample_storage" field. It's identical to SampleStorageEQ.
func SampleStorage(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldSampleStorage, v))
}

// TubeCount applies equality check predicate on the "tube_count" field. It's identical to TubeCountEQ.
func TubeCount(v int) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldTubeCount, v))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldOrderID, v))
}

// PatientID applies equality check predicate on the "patient_id" field. It's identical to PatientIDEQ.
func PatientID(v int) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldPatientID, v))
}

// SampleOrderMethod applies equality check predicate on the "sample_order_method" field. It's identical to SampleOrderMethodEQ.
func SampleOrderMethod(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldSampleOrderMethod, v))
}

// SampleCollectionTime applies equality check predicate on the "sample_collection_time" field. It's identical to SampleCollectionTimeEQ.
func SampleCollectionTime(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldSampleCollectionTime, v))
}

// SampleReceivedTime applies equality check predicate on the "sample_received_time" field. It's identical to SampleReceivedTimeEQ.
func SampleReceivedTime(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldSampleReceivedTime, v))
}

// SampleDescription applies equality check predicate on the "sample_description" field. It's identical to SampleDescriptionEQ.
func SampleDescription(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldSampleDescription, v))
}

// DelayedHours applies equality check predicate on the "delayed_hours" field. It's identical to DelayedHoursEQ.
func DelayedHours(v int) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldDelayedHours, v))
}

// SampleReportTime applies equality check predicate on the "sample_report_time" field. It's identical to SampleReportTimeEQ.
func SampleReportTime(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldSampleReportTime, v))
}

// InternalReceivedTime applies equality check predicate on the "internal_received_time" field. It's identical to InternalReceivedTimeEQ.
func InternalReceivedTime(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldInternalReceivedTime, v))
}

// SampleReportType applies equality check predicate on the "sample_report_type" field. It's identical to SampleReportTypeEQ.
func SampleReportType(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldSampleReportType, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v int) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldCustomerID, v))
}

// FastingHours applies equality check predicate on the "fasting_hours" field. It's identical to FastingHoursEQ.
func FastingHours(v float64) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldFastingHours, v))
}

// FastingStatus applies equality check predicate on the "fasting_status" field. It's identical to FastingStatusEQ.
func FastingStatus(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldFastingStatus, v))
}

// AccessionIDEQ applies the EQ predicate on the "accession_id" field.
func AccessionIDEQ(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldAccessionID, v))
}

// AccessionIDNEQ applies the NEQ predicate on the "accession_id" field.
func AccessionIDNEQ(v string) predicate.Sample {
	return predicate.Sample(sql.FieldNEQ(FieldAccessionID, v))
}

// AccessionIDIn applies the In predicate on the "accession_id" field.
func AccessionIDIn(vs ...string) predicate.Sample {
	return predicate.Sample(sql.FieldIn(FieldAccessionID, vs...))
}

// AccessionIDNotIn applies the NotIn predicate on the "accession_id" field.
func AccessionIDNotIn(vs ...string) predicate.Sample {
	return predicate.Sample(sql.FieldNotIn(FieldAccessionID, vs...))
}

// AccessionIDGT applies the GT predicate on the "accession_id" field.
func AccessionIDGT(v string) predicate.Sample {
	return predicate.Sample(sql.FieldGT(FieldAccessionID, v))
}

// AccessionIDGTE applies the GTE predicate on the "accession_id" field.
func AccessionIDGTE(v string) predicate.Sample {
	return predicate.Sample(sql.FieldGTE(FieldAccessionID, v))
}

// AccessionIDLT applies the LT predicate on the "accession_id" field.
func AccessionIDLT(v string) predicate.Sample {
	return predicate.Sample(sql.FieldLT(FieldAccessionID, v))
}

// AccessionIDLTE applies the LTE predicate on the "accession_id" field.
func AccessionIDLTE(v string) predicate.Sample {
	return predicate.Sample(sql.FieldLTE(FieldAccessionID, v))
}

// AccessionIDContains applies the Contains predicate on the "accession_id" field.
func AccessionIDContains(v string) predicate.Sample {
	return predicate.Sample(sql.FieldContains(FieldAccessionID, v))
}

// AccessionIDHasPrefix applies the HasPrefix predicate on the "accession_id" field.
func AccessionIDHasPrefix(v string) predicate.Sample {
	return predicate.Sample(sql.FieldHasPrefix(FieldAccessionID, v))
}

// AccessionIDHasSuffix applies the HasSuffix predicate on the "accession_id" field.
func AccessionIDHasSuffix(v string) predicate.Sample {
	return predicate.Sample(sql.FieldHasSuffix(FieldAccessionID, v))
}

// AccessionIDEqualFold applies the EqualFold predicate on the "accession_id" field.
func AccessionIDEqualFold(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEqualFold(FieldAccessionID, v))
}

// AccessionIDContainsFold applies the ContainsFold predicate on the "accession_id" field.
func AccessionIDContainsFold(v string) predicate.Sample {
	return predicate.Sample(sql.FieldContainsFold(FieldAccessionID, v))
}

// SampleStorageEQ applies the EQ predicate on the "sample_storage" field.
func SampleStorageEQ(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldSampleStorage, v))
}

// SampleStorageNEQ applies the NEQ predicate on the "sample_storage" field.
func SampleStorageNEQ(v string) predicate.Sample {
	return predicate.Sample(sql.FieldNEQ(FieldSampleStorage, v))
}

// SampleStorageIn applies the In predicate on the "sample_storage" field.
func SampleStorageIn(vs ...string) predicate.Sample {
	return predicate.Sample(sql.FieldIn(FieldSampleStorage, vs...))
}

// SampleStorageNotIn applies the NotIn predicate on the "sample_storage" field.
func SampleStorageNotIn(vs ...string) predicate.Sample {
	return predicate.Sample(sql.FieldNotIn(FieldSampleStorage, vs...))
}

// SampleStorageGT applies the GT predicate on the "sample_storage" field.
func SampleStorageGT(v string) predicate.Sample {
	return predicate.Sample(sql.FieldGT(FieldSampleStorage, v))
}

// SampleStorageGTE applies the GTE predicate on the "sample_storage" field.
func SampleStorageGTE(v string) predicate.Sample {
	return predicate.Sample(sql.FieldGTE(FieldSampleStorage, v))
}

// SampleStorageLT applies the LT predicate on the "sample_storage" field.
func SampleStorageLT(v string) predicate.Sample {
	return predicate.Sample(sql.FieldLT(FieldSampleStorage, v))
}

// SampleStorageLTE applies the LTE predicate on the "sample_storage" field.
func SampleStorageLTE(v string) predicate.Sample {
	return predicate.Sample(sql.FieldLTE(FieldSampleStorage, v))
}

// SampleStorageContains applies the Contains predicate on the "sample_storage" field.
func SampleStorageContains(v string) predicate.Sample {
	return predicate.Sample(sql.FieldContains(FieldSampleStorage, v))
}

// SampleStorageHasPrefix applies the HasPrefix predicate on the "sample_storage" field.
func SampleStorageHasPrefix(v string) predicate.Sample {
	return predicate.Sample(sql.FieldHasPrefix(FieldSampleStorage, v))
}

// SampleStorageHasSuffix applies the HasSuffix predicate on the "sample_storage" field.
func SampleStorageHasSuffix(v string) predicate.Sample {
	return predicate.Sample(sql.FieldHasSuffix(FieldSampleStorage, v))
}

// SampleStorageIsNil applies the IsNil predicate on the "sample_storage" field.
func SampleStorageIsNil() predicate.Sample {
	return predicate.Sample(sql.FieldIsNull(FieldSampleStorage))
}

// SampleStorageNotNil applies the NotNil predicate on the "sample_storage" field.
func SampleStorageNotNil() predicate.Sample {
	return predicate.Sample(sql.FieldNotNull(FieldSampleStorage))
}

// SampleStorageEqualFold applies the EqualFold predicate on the "sample_storage" field.
func SampleStorageEqualFold(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEqualFold(FieldSampleStorage, v))
}

// SampleStorageContainsFold applies the ContainsFold predicate on the "sample_storage" field.
func SampleStorageContainsFold(v string) predicate.Sample {
	return predicate.Sample(sql.FieldContainsFold(FieldSampleStorage, v))
}

// TubeCountEQ applies the EQ predicate on the "tube_count" field.
func TubeCountEQ(v int) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldTubeCount, v))
}

// TubeCountNEQ applies the NEQ predicate on the "tube_count" field.
func TubeCountNEQ(v int) predicate.Sample {
	return predicate.Sample(sql.FieldNEQ(FieldTubeCount, v))
}

// TubeCountIn applies the In predicate on the "tube_count" field.
func TubeCountIn(vs ...int) predicate.Sample {
	return predicate.Sample(sql.FieldIn(FieldTubeCount, vs...))
}

// TubeCountNotIn applies the NotIn predicate on the "tube_count" field.
func TubeCountNotIn(vs ...int) predicate.Sample {
	return predicate.Sample(sql.FieldNotIn(FieldTubeCount, vs...))
}

// TubeCountGT applies the GT predicate on the "tube_count" field.
func TubeCountGT(v int) predicate.Sample {
	return predicate.Sample(sql.FieldGT(FieldTubeCount, v))
}

// TubeCountGTE applies the GTE predicate on the "tube_count" field.
func TubeCountGTE(v int) predicate.Sample {
	return predicate.Sample(sql.FieldGTE(FieldTubeCount, v))
}

// TubeCountLT applies the LT predicate on the "tube_count" field.
func TubeCountLT(v int) predicate.Sample {
	return predicate.Sample(sql.FieldLT(FieldTubeCount, v))
}

// TubeCountLTE applies the LTE predicate on the "tube_count" field.
func TubeCountLTE(v int) predicate.Sample {
	return predicate.Sample(sql.FieldLTE(FieldTubeCount, v))
}

// TubeCountIsNil applies the IsNil predicate on the "tube_count" field.
func TubeCountIsNil() predicate.Sample {
	return predicate.Sample(sql.FieldIsNull(FieldTubeCount))
}

// TubeCountNotNil applies the NotNil predicate on the "tube_count" field.
func TubeCountNotNil() predicate.Sample {
	return predicate.Sample(sql.FieldNotNull(FieldTubeCount))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int) predicate.Sample {
	return predicate.Sample(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int) predicate.Sample {
	return predicate.Sample(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int) predicate.Sample {
	return predicate.Sample(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.Sample {
	return predicate.Sample(sql.FieldIsNull(FieldOrderID))
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.Sample {
	return predicate.Sample(sql.FieldNotNull(FieldOrderID))
}

// PatientIDEQ applies the EQ predicate on the "patient_id" field.
func PatientIDEQ(v int) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldPatientID, v))
}

// PatientIDNEQ applies the NEQ predicate on the "patient_id" field.
func PatientIDNEQ(v int) predicate.Sample {
	return predicate.Sample(sql.FieldNEQ(FieldPatientID, v))
}

// PatientIDIn applies the In predicate on the "patient_id" field.
func PatientIDIn(vs ...int) predicate.Sample {
	return predicate.Sample(sql.FieldIn(FieldPatientID, vs...))
}

// PatientIDNotIn applies the NotIn predicate on the "patient_id" field.
func PatientIDNotIn(vs ...int) predicate.Sample {
	return predicate.Sample(sql.FieldNotIn(FieldPatientID, vs...))
}

// PatientIDIsNil applies the IsNil predicate on the "patient_id" field.
func PatientIDIsNil() predicate.Sample {
	return predicate.Sample(sql.FieldIsNull(FieldPatientID))
}

// PatientIDNotNil applies the NotNil predicate on the "patient_id" field.
func PatientIDNotNil() predicate.Sample {
	return predicate.Sample(sql.FieldNotNull(FieldPatientID))
}

// SampleOrderMethodEQ applies the EQ predicate on the "sample_order_method" field.
func SampleOrderMethodEQ(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldSampleOrderMethod, v))
}

// SampleOrderMethodNEQ applies the NEQ predicate on the "sample_order_method" field.
func SampleOrderMethodNEQ(v string) predicate.Sample {
	return predicate.Sample(sql.FieldNEQ(FieldSampleOrderMethod, v))
}

// SampleOrderMethodIn applies the In predicate on the "sample_order_method" field.
func SampleOrderMethodIn(vs ...string) predicate.Sample {
	return predicate.Sample(sql.FieldIn(FieldSampleOrderMethod, vs...))
}

// SampleOrderMethodNotIn applies the NotIn predicate on the "sample_order_method" field.
func SampleOrderMethodNotIn(vs ...string) predicate.Sample {
	return predicate.Sample(sql.FieldNotIn(FieldSampleOrderMethod, vs...))
}

// SampleOrderMethodGT applies the GT predicate on the "sample_order_method" field.
func SampleOrderMethodGT(v string) predicate.Sample {
	return predicate.Sample(sql.FieldGT(FieldSampleOrderMethod, v))
}

// SampleOrderMethodGTE applies the GTE predicate on the "sample_order_method" field.
func SampleOrderMethodGTE(v string) predicate.Sample {
	return predicate.Sample(sql.FieldGTE(FieldSampleOrderMethod, v))
}

// SampleOrderMethodLT applies the LT predicate on the "sample_order_method" field.
func SampleOrderMethodLT(v string) predicate.Sample {
	return predicate.Sample(sql.FieldLT(FieldSampleOrderMethod, v))
}

// SampleOrderMethodLTE applies the LTE predicate on the "sample_order_method" field.
func SampleOrderMethodLTE(v string) predicate.Sample {
	return predicate.Sample(sql.FieldLTE(FieldSampleOrderMethod, v))
}

// SampleOrderMethodContains applies the Contains predicate on the "sample_order_method" field.
func SampleOrderMethodContains(v string) predicate.Sample {
	return predicate.Sample(sql.FieldContains(FieldSampleOrderMethod, v))
}

// SampleOrderMethodHasPrefix applies the HasPrefix predicate on the "sample_order_method" field.
func SampleOrderMethodHasPrefix(v string) predicate.Sample {
	return predicate.Sample(sql.FieldHasPrefix(FieldSampleOrderMethod, v))
}

// SampleOrderMethodHasSuffix applies the HasSuffix predicate on the "sample_order_method" field.
func SampleOrderMethodHasSuffix(v string) predicate.Sample {
	return predicate.Sample(sql.FieldHasSuffix(FieldSampleOrderMethod, v))
}

// SampleOrderMethodIsNil applies the IsNil predicate on the "sample_order_method" field.
func SampleOrderMethodIsNil() predicate.Sample {
	return predicate.Sample(sql.FieldIsNull(FieldSampleOrderMethod))
}

// SampleOrderMethodNotNil applies the NotNil predicate on the "sample_order_method" field.
func SampleOrderMethodNotNil() predicate.Sample {
	return predicate.Sample(sql.FieldNotNull(FieldSampleOrderMethod))
}

// SampleOrderMethodEqualFold applies the EqualFold predicate on the "sample_order_method" field.
func SampleOrderMethodEqualFold(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEqualFold(FieldSampleOrderMethod, v))
}

// SampleOrderMethodContainsFold applies the ContainsFold predicate on the "sample_order_method" field.
func SampleOrderMethodContainsFold(v string) predicate.Sample {
	return predicate.Sample(sql.FieldContainsFold(FieldSampleOrderMethod, v))
}

// SampleCollectionTimeEQ applies the EQ predicate on the "sample_collection_time" field.
func SampleCollectionTimeEQ(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldSampleCollectionTime, v))
}

// SampleCollectionTimeNEQ applies the NEQ predicate on the "sample_collection_time" field.
func SampleCollectionTimeNEQ(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldNEQ(FieldSampleCollectionTime, v))
}

// SampleCollectionTimeIn applies the In predicate on the "sample_collection_time" field.
func SampleCollectionTimeIn(vs ...time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldIn(FieldSampleCollectionTime, vs...))
}

// SampleCollectionTimeNotIn applies the NotIn predicate on the "sample_collection_time" field.
func SampleCollectionTimeNotIn(vs ...time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldNotIn(FieldSampleCollectionTime, vs...))
}

// SampleCollectionTimeGT applies the GT predicate on the "sample_collection_time" field.
func SampleCollectionTimeGT(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldGT(FieldSampleCollectionTime, v))
}

// SampleCollectionTimeGTE applies the GTE predicate on the "sample_collection_time" field.
func SampleCollectionTimeGTE(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldGTE(FieldSampleCollectionTime, v))
}

// SampleCollectionTimeLT applies the LT predicate on the "sample_collection_time" field.
func SampleCollectionTimeLT(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldLT(FieldSampleCollectionTime, v))
}

// SampleCollectionTimeLTE applies the LTE predicate on the "sample_collection_time" field.
func SampleCollectionTimeLTE(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldLTE(FieldSampleCollectionTime, v))
}

// SampleCollectionTimeIsNil applies the IsNil predicate on the "sample_collection_time" field.
func SampleCollectionTimeIsNil() predicate.Sample {
	return predicate.Sample(sql.FieldIsNull(FieldSampleCollectionTime))
}

// SampleCollectionTimeNotNil applies the NotNil predicate on the "sample_collection_time" field.
func SampleCollectionTimeNotNil() predicate.Sample {
	return predicate.Sample(sql.FieldNotNull(FieldSampleCollectionTime))
}

// SampleReceivedTimeEQ applies the EQ predicate on the "sample_received_time" field.
func SampleReceivedTimeEQ(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldSampleReceivedTime, v))
}

// SampleReceivedTimeNEQ applies the NEQ predicate on the "sample_received_time" field.
func SampleReceivedTimeNEQ(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldNEQ(FieldSampleReceivedTime, v))
}

// SampleReceivedTimeIn applies the In predicate on the "sample_received_time" field.
func SampleReceivedTimeIn(vs ...time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldIn(FieldSampleReceivedTime, vs...))
}

// SampleReceivedTimeNotIn applies the NotIn predicate on the "sample_received_time" field.
func SampleReceivedTimeNotIn(vs ...time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldNotIn(FieldSampleReceivedTime, vs...))
}

// SampleReceivedTimeGT applies the GT predicate on the "sample_received_time" field.
func SampleReceivedTimeGT(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldGT(FieldSampleReceivedTime, v))
}

// SampleReceivedTimeGTE applies the GTE predicate on the "sample_received_time" field.
func SampleReceivedTimeGTE(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldGTE(FieldSampleReceivedTime, v))
}

// SampleReceivedTimeLT applies the LT predicate on the "sample_received_time" field.
func SampleReceivedTimeLT(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldLT(FieldSampleReceivedTime, v))
}

// SampleReceivedTimeLTE applies the LTE predicate on the "sample_received_time" field.
func SampleReceivedTimeLTE(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldLTE(FieldSampleReceivedTime, v))
}

// SampleReceivedTimeIsNil applies the IsNil predicate on the "sample_received_time" field.
func SampleReceivedTimeIsNil() predicate.Sample {
	return predicate.Sample(sql.FieldIsNull(FieldSampleReceivedTime))
}

// SampleReceivedTimeNotNil applies the NotNil predicate on the "sample_received_time" field.
func SampleReceivedTimeNotNil() predicate.Sample {
	return predicate.Sample(sql.FieldNotNull(FieldSampleReceivedTime))
}

// SampleDescriptionEQ applies the EQ predicate on the "sample_description" field.
func SampleDescriptionEQ(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldSampleDescription, v))
}

// SampleDescriptionNEQ applies the NEQ predicate on the "sample_description" field.
func SampleDescriptionNEQ(v string) predicate.Sample {
	return predicate.Sample(sql.FieldNEQ(FieldSampleDescription, v))
}

// SampleDescriptionIn applies the In predicate on the "sample_description" field.
func SampleDescriptionIn(vs ...string) predicate.Sample {
	return predicate.Sample(sql.FieldIn(FieldSampleDescription, vs...))
}

// SampleDescriptionNotIn applies the NotIn predicate on the "sample_description" field.
func SampleDescriptionNotIn(vs ...string) predicate.Sample {
	return predicate.Sample(sql.FieldNotIn(FieldSampleDescription, vs...))
}

// SampleDescriptionGT applies the GT predicate on the "sample_description" field.
func SampleDescriptionGT(v string) predicate.Sample {
	return predicate.Sample(sql.FieldGT(FieldSampleDescription, v))
}

// SampleDescriptionGTE applies the GTE predicate on the "sample_description" field.
func SampleDescriptionGTE(v string) predicate.Sample {
	return predicate.Sample(sql.FieldGTE(FieldSampleDescription, v))
}

// SampleDescriptionLT applies the LT predicate on the "sample_description" field.
func SampleDescriptionLT(v string) predicate.Sample {
	return predicate.Sample(sql.FieldLT(FieldSampleDescription, v))
}

// SampleDescriptionLTE applies the LTE predicate on the "sample_description" field.
func SampleDescriptionLTE(v string) predicate.Sample {
	return predicate.Sample(sql.FieldLTE(FieldSampleDescription, v))
}

// SampleDescriptionContains applies the Contains predicate on the "sample_description" field.
func SampleDescriptionContains(v string) predicate.Sample {
	return predicate.Sample(sql.FieldContains(FieldSampleDescription, v))
}

// SampleDescriptionHasPrefix applies the HasPrefix predicate on the "sample_description" field.
func SampleDescriptionHasPrefix(v string) predicate.Sample {
	return predicate.Sample(sql.FieldHasPrefix(FieldSampleDescription, v))
}

// SampleDescriptionHasSuffix applies the HasSuffix predicate on the "sample_description" field.
func SampleDescriptionHasSuffix(v string) predicate.Sample {
	return predicate.Sample(sql.FieldHasSuffix(FieldSampleDescription, v))
}

// SampleDescriptionIsNil applies the IsNil predicate on the "sample_description" field.
func SampleDescriptionIsNil() predicate.Sample {
	return predicate.Sample(sql.FieldIsNull(FieldSampleDescription))
}

// SampleDescriptionNotNil applies the NotNil predicate on the "sample_description" field.
func SampleDescriptionNotNil() predicate.Sample {
	return predicate.Sample(sql.FieldNotNull(FieldSampleDescription))
}

// SampleDescriptionEqualFold applies the EqualFold predicate on the "sample_description" field.
func SampleDescriptionEqualFold(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEqualFold(FieldSampleDescription, v))
}

// SampleDescriptionContainsFold applies the ContainsFold predicate on the "sample_description" field.
func SampleDescriptionContainsFold(v string) predicate.Sample {
	return predicate.Sample(sql.FieldContainsFold(FieldSampleDescription, v))
}

// DelayedHoursEQ applies the EQ predicate on the "delayed_hours" field.
func DelayedHoursEQ(v int) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldDelayedHours, v))
}

// DelayedHoursNEQ applies the NEQ predicate on the "delayed_hours" field.
func DelayedHoursNEQ(v int) predicate.Sample {
	return predicate.Sample(sql.FieldNEQ(FieldDelayedHours, v))
}

// DelayedHoursIn applies the In predicate on the "delayed_hours" field.
func DelayedHoursIn(vs ...int) predicate.Sample {
	return predicate.Sample(sql.FieldIn(FieldDelayedHours, vs...))
}

// DelayedHoursNotIn applies the NotIn predicate on the "delayed_hours" field.
func DelayedHoursNotIn(vs ...int) predicate.Sample {
	return predicate.Sample(sql.FieldNotIn(FieldDelayedHours, vs...))
}

// DelayedHoursGT applies the GT predicate on the "delayed_hours" field.
func DelayedHoursGT(v int) predicate.Sample {
	return predicate.Sample(sql.FieldGT(FieldDelayedHours, v))
}

// DelayedHoursGTE applies the GTE predicate on the "delayed_hours" field.
func DelayedHoursGTE(v int) predicate.Sample {
	return predicate.Sample(sql.FieldGTE(FieldDelayedHours, v))
}

// DelayedHoursLT applies the LT predicate on the "delayed_hours" field.
func DelayedHoursLT(v int) predicate.Sample {
	return predicate.Sample(sql.FieldLT(FieldDelayedHours, v))
}

// DelayedHoursLTE applies the LTE predicate on the "delayed_hours" field.
func DelayedHoursLTE(v int) predicate.Sample {
	return predicate.Sample(sql.FieldLTE(FieldDelayedHours, v))
}

// SampleReportTimeEQ applies the EQ predicate on the "sample_report_time" field.
func SampleReportTimeEQ(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldSampleReportTime, v))
}

// SampleReportTimeNEQ applies the NEQ predicate on the "sample_report_time" field.
func SampleReportTimeNEQ(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldNEQ(FieldSampleReportTime, v))
}

// SampleReportTimeIn applies the In predicate on the "sample_report_time" field.
func SampleReportTimeIn(vs ...time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldIn(FieldSampleReportTime, vs...))
}

// SampleReportTimeNotIn applies the NotIn predicate on the "sample_report_time" field.
func SampleReportTimeNotIn(vs ...time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldNotIn(FieldSampleReportTime, vs...))
}

// SampleReportTimeGT applies the GT predicate on the "sample_report_time" field.
func SampleReportTimeGT(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldGT(FieldSampleReportTime, v))
}

// SampleReportTimeGTE applies the GTE predicate on the "sample_report_time" field.
func SampleReportTimeGTE(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldGTE(FieldSampleReportTime, v))
}

// SampleReportTimeLT applies the LT predicate on the "sample_report_time" field.
func SampleReportTimeLT(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldLT(FieldSampleReportTime, v))
}

// SampleReportTimeLTE applies the LTE predicate on the "sample_report_time" field.
func SampleReportTimeLTE(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldLTE(FieldSampleReportTime, v))
}

// SampleReportTimeIsNil applies the IsNil predicate on the "sample_report_time" field.
func SampleReportTimeIsNil() predicate.Sample {
	return predicate.Sample(sql.FieldIsNull(FieldSampleReportTime))
}

// SampleReportTimeNotNil applies the NotNil predicate on the "sample_report_time" field.
func SampleReportTimeNotNil() predicate.Sample {
	return predicate.Sample(sql.FieldNotNull(FieldSampleReportTime))
}

// InternalReceivedTimeEQ applies the EQ predicate on the "internal_received_time" field.
func InternalReceivedTimeEQ(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldInternalReceivedTime, v))
}

// InternalReceivedTimeNEQ applies the NEQ predicate on the "internal_received_time" field.
func InternalReceivedTimeNEQ(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldNEQ(FieldInternalReceivedTime, v))
}

// InternalReceivedTimeIn applies the In predicate on the "internal_received_time" field.
func InternalReceivedTimeIn(vs ...time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldIn(FieldInternalReceivedTime, vs...))
}

// InternalReceivedTimeNotIn applies the NotIn predicate on the "internal_received_time" field.
func InternalReceivedTimeNotIn(vs ...time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldNotIn(FieldInternalReceivedTime, vs...))
}

// InternalReceivedTimeGT applies the GT predicate on the "internal_received_time" field.
func InternalReceivedTimeGT(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldGT(FieldInternalReceivedTime, v))
}

// InternalReceivedTimeGTE applies the GTE predicate on the "internal_received_time" field.
func InternalReceivedTimeGTE(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldGTE(FieldInternalReceivedTime, v))
}

// InternalReceivedTimeLT applies the LT predicate on the "internal_received_time" field.
func InternalReceivedTimeLT(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldLT(FieldInternalReceivedTime, v))
}

// InternalReceivedTimeLTE applies the LTE predicate on the "internal_received_time" field.
func InternalReceivedTimeLTE(v time.Time) predicate.Sample {
	return predicate.Sample(sql.FieldLTE(FieldInternalReceivedTime, v))
}

// InternalReceivedTimeIsNil applies the IsNil predicate on the "internal_received_time" field.
func InternalReceivedTimeIsNil() predicate.Sample {
	return predicate.Sample(sql.FieldIsNull(FieldInternalReceivedTime))
}

// InternalReceivedTimeNotNil applies the NotNil predicate on the "internal_received_time" field.
func InternalReceivedTimeNotNil() predicate.Sample {
	return predicate.Sample(sql.FieldNotNull(FieldInternalReceivedTime))
}

// SampleReportTypeEQ applies the EQ predicate on the "sample_report_type" field.
func SampleReportTypeEQ(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldSampleReportType, v))
}

// SampleReportTypeNEQ applies the NEQ predicate on the "sample_report_type" field.
func SampleReportTypeNEQ(v string) predicate.Sample {
	return predicate.Sample(sql.FieldNEQ(FieldSampleReportType, v))
}

// SampleReportTypeIn applies the In predicate on the "sample_report_type" field.
func SampleReportTypeIn(vs ...string) predicate.Sample {
	return predicate.Sample(sql.FieldIn(FieldSampleReportType, vs...))
}

// SampleReportTypeNotIn applies the NotIn predicate on the "sample_report_type" field.
func SampleReportTypeNotIn(vs ...string) predicate.Sample {
	return predicate.Sample(sql.FieldNotIn(FieldSampleReportType, vs...))
}

// SampleReportTypeGT applies the GT predicate on the "sample_report_type" field.
func SampleReportTypeGT(v string) predicate.Sample {
	return predicate.Sample(sql.FieldGT(FieldSampleReportType, v))
}

// SampleReportTypeGTE applies the GTE predicate on the "sample_report_type" field.
func SampleReportTypeGTE(v string) predicate.Sample {
	return predicate.Sample(sql.FieldGTE(FieldSampleReportType, v))
}

// SampleReportTypeLT applies the LT predicate on the "sample_report_type" field.
func SampleReportTypeLT(v string) predicate.Sample {
	return predicate.Sample(sql.FieldLT(FieldSampleReportType, v))
}

// SampleReportTypeLTE applies the LTE predicate on the "sample_report_type" field.
func SampleReportTypeLTE(v string) predicate.Sample {
	return predicate.Sample(sql.FieldLTE(FieldSampleReportType, v))
}

// SampleReportTypeContains applies the Contains predicate on the "sample_report_type" field.
func SampleReportTypeContains(v string) predicate.Sample {
	return predicate.Sample(sql.FieldContains(FieldSampleReportType, v))
}

// SampleReportTypeHasPrefix applies the HasPrefix predicate on the "sample_report_type" field.
func SampleReportTypeHasPrefix(v string) predicate.Sample {
	return predicate.Sample(sql.FieldHasPrefix(FieldSampleReportType, v))
}

// SampleReportTypeHasSuffix applies the HasSuffix predicate on the "sample_report_type" field.
func SampleReportTypeHasSuffix(v string) predicate.Sample {
	return predicate.Sample(sql.FieldHasSuffix(FieldSampleReportType, v))
}

// SampleReportTypeIsNil applies the IsNil predicate on the "sample_report_type" field.
func SampleReportTypeIsNil() predicate.Sample {
	return predicate.Sample(sql.FieldIsNull(FieldSampleReportType))
}

// SampleReportTypeNotNil applies the NotNil predicate on the "sample_report_type" field.
func SampleReportTypeNotNil() predicate.Sample {
	return predicate.Sample(sql.FieldNotNull(FieldSampleReportType))
}

// SampleReportTypeEqualFold applies the EqualFold predicate on the "sample_report_type" field.
func SampleReportTypeEqualFold(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEqualFold(FieldSampleReportType, v))
}

// SampleReportTypeContainsFold applies the ContainsFold predicate on the "sample_report_type" field.
func SampleReportTypeContainsFold(v string) predicate.Sample {
	return predicate.Sample(sql.FieldContainsFold(FieldSampleReportType, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v int) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v int) predicate.Sample {
	return predicate.Sample(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...int) predicate.Sample {
	return predicate.Sample(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...int) predicate.Sample {
	return predicate.Sample(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDIsNil applies the IsNil predicate on the "customer_id" field.
func CustomerIDIsNil() predicate.Sample {
	return predicate.Sample(sql.FieldIsNull(FieldCustomerID))
}

// CustomerIDNotNil applies the NotNil predicate on the "customer_id" field.
func CustomerIDNotNil() predicate.Sample {
	return predicate.Sample(sql.FieldNotNull(FieldCustomerID))
}

// FastingHoursEQ applies the EQ predicate on the "fasting_hours" field.
func FastingHoursEQ(v float64) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldFastingHours, v))
}

// FastingHoursNEQ applies the NEQ predicate on the "fasting_hours" field.
func FastingHoursNEQ(v float64) predicate.Sample {
	return predicate.Sample(sql.FieldNEQ(FieldFastingHours, v))
}

// FastingHoursIn applies the In predicate on the "fasting_hours" field.
func FastingHoursIn(vs ...float64) predicate.Sample {
	return predicate.Sample(sql.FieldIn(FieldFastingHours, vs...))
}

// FastingHoursNotIn applies the NotIn predicate on the "fasting_hours" field.
func FastingHoursNotIn(vs ...float64) predicate.Sample {
	return predicate.Sample(sql.FieldNotIn(FieldFastingHours, vs...))
}

// FastingHoursGT applies the GT predicate on the "fasting_hours" field.
func FastingHoursGT(v float64) predicate.Sample {
	return predicate.Sample(sql.FieldGT(FieldFastingHours, v))
}

// FastingHoursGTE applies the GTE predicate on the "fasting_hours" field.
func FastingHoursGTE(v float64) predicate.Sample {
	return predicate.Sample(sql.FieldGTE(FieldFastingHours, v))
}

// FastingHoursLT applies the LT predicate on the "fasting_hours" field.
func FastingHoursLT(v float64) predicate.Sample {
	return predicate.Sample(sql.FieldLT(FieldFastingHours, v))
}

// FastingHoursLTE applies the LTE predicate on the "fasting_hours" field.
func FastingHoursLTE(v float64) predicate.Sample {
	return predicate.Sample(sql.FieldLTE(FieldFastingHours, v))
}

// FastingHoursIsNil applies the IsNil predicate on the "fasting_hours" field.
func FastingHoursIsNil() predicate.Sample {
	return predicate.Sample(sql.FieldIsNull(FieldFastingHours))
}

// FastingHoursNotNil applies the NotNil predicate on the "fasting_hours" field.
func FastingHoursNotNil() predicate.Sample {
	return predicate.Sample(sql.FieldNotNull(FieldFastingHours))
}

// FastingStatusEQ applies the EQ predicate on the "fasting_status" field.
func FastingStatusEQ(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEQ(FieldFastingStatus, v))
}

// FastingStatusNEQ applies the NEQ predicate on the "fasting_status" field.
func FastingStatusNEQ(v string) predicate.Sample {
	return predicate.Sample(sql.FieldNEQ(FieldFastingStatus, v))
}

// FastingStatusIn applies the In predicate on the "fasting_status" field.
func FastingStatusIn(vs ...string) predicate.Sample {
	return predicate.Sample(sql.FieldIn(FieldFastingStatus, vs...))
}

// FastingStatusNotIn applies the NotIn predicate on the "fasting_status" field.
func FastingStatusNotIn(vs ...string) predicate.Sample {
	return predicate.Sample(sql.FieldNotIn(FieldFastingStatus, vs...))
}

// FastingStatusGT applies the GT predicate on the "fasting_status" field.
func FastingStatusGT(v string) predicate.Sample {
	return predicate.Sample(sql.FieldGT(FieldFastingStatus, v))
}

// FastingStatusGTE applies the GTE predicate on the "fasting_status" field.
func FastingStatusGTE(v string) predicate.Sample {
	return predicate.Sample(sql.FieldGTE(FieldFastingStatus, v))
}

// FastingStatusLT applies the LT predicate on the "fasting_status" field.
func FastingStatusLT(v string) predicate.Sample {
	return predicate.Sample(sql.FieldLT(FieldFastingStatus, v))
}

// FastingStatusLTE applies the LTE predicate on the "fasting_status" field.
func FastingStatusLTE(v string) predicate.Sample {
	return predicate.Sample(sql.FieldLTE(FieldFastingStatus, v))
}

// FastingStatusContains applies the Contains predicate on the "fasting_status" field.
func FastingStatusContains(v string) predicate.Sample {
	return predicate.Sample(sql.FieldContains(FieldFastingStatus, v))
}

// FastingStatusHasPrefix applies the HasPrefix predicate on the "fasting_status" field.
func FastingStatusHasPrefix(v string) predicate.Sample {
	return predicate.Sample(sql.FieldHasPrefix(FieldFastingStatus, v))
}

// FastingStatusHasSuffix applies the HasSuffix predicate on the "fasting_status" field.
func FastingStatusHasSuffix(v string) predicate.Sample {
	return predicate.Sample(sql.FieldHasSuffix(FieldFastingStatus, v))
}

// FastingStatusIsNil applies the IsNil predicate on the "fasting_status" field.
func FastingStatusIsNil() predicate.Sample {
	return predicate.Sample(sql.FieldIsNull(FieldFastingStatus))
}

// FastingStatusNotNil applies the NotNil predicate on the "fasting_status" field.
func FastingStatusNotNil() predicate.Sample {
	return predicate.Sample(sql.FieldNotNull(FieldFastingStatus))
}

// FastingStatusEqualFold applies the EqualFold predicate on the "fasting_status" field.
func FastingStatusEqualFold(v string) predicate.Sample {
	return predicate.Sample(sql.FieldEqualFold(FieldFastingStatus, v))
}

// FastingStatusContainsFold applies the ContainsFold predicate on the "fasting_status" field.
func FastingStatusContainsFold(v string) predicate.Sample {
	return predicate.Sample(sql.FieldContainsFold(FieldFastingStatus, v))
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.Sample {
	return predicate.Sample(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.OrderInfo) predicate.Sample {
	return predicate.Sample(func(s *sql.Selector) {
		step := newOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTubes applies the HasEdge predicate on the "tubes" edge.
func HasTubes() predicate.Sample {
	return predicate.Sample(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, TubesTable, TubesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTubesWith applies the HasEdge predicate on the "tubes" edge with a given conditions (other predicates).
func HasTubesWith(preds ...predicate.Tube) predicate.Sample {
	return predicate.Sample(func(s *sql.Selector) {
		step := newTubesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSampleReceiveRecords applies the HasEdge predicate on the "sample_receive_records" edge.
func HasSampleReceiveRecords() predicate.Sample {
	return predicate.Sample(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, SampleReceiveRecordsTable, SampleReceiveRecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSampleReceiveRecordsWith applies the HasEdge predicate on the "sample_receive_records" edge with a given conditions (other predicates).
func HasSampleReceiveRecordsWith(preds ...predicate.TubeReceive) predicate.Sample {
	return predicate.Sample(func(s *sql.Selector) {
		step := newSampleReceiveRecordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSampleRequiredTubes applies the HasEdge predicate on the "sample_required_tubes" edge.
func HasSampleRequiredTubes() predicate.Sample {
	return predicate.Sample(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, SampleRequiredTubesTable, SampleRequiredTubesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSampleRequiredTubesWith applies the HasEdge predicate on the "sample_required_tubes" edge with a given conditions (other predicates).
func HasSampleRequiredTubesWith(preds ...predicate.TubeRequirement) predicate.Sample {
	return predicate.Sample(func(s *sql.Selector) {
		step := newSampleRequiredTubesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.Sample {
	return predicate.Sample(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.Sample {
	return predicate.Sample(func(s *sql.Selector) {
		step := newPatientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.Sample {
	return predicate.Sample(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.Sample {
	return predicate.Sample(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Sample) predicate.Sample {
	return predicate.Sample(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Sample) predicate.Sample {
	return predicate.Sample(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Sample) predicate.Sample {
	return predicate.Sample(sql.NotPredicates(p))
}
