// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/betaprogram"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BetaProgram is the model entity for the BetaProgram schema.
type BetaProgram struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"beta_program_id"`
	// BetaProgramName holds the value of the "beta_program_name" field.
	BetaProgramName string `json:"beta_program_name,omitempty"`
	// BetaProgramDescription holds the value of the "beta_program_description" field.
	BetaProgramDescription string `json:"beta_program_description,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// BetaProgramStartTime holds the value of the "beta_program_start_time" field.
	BetaProgramStartTime time.Time `json:"beta_program_start_time,omitempty"`
	// BetaProgramEndTime holds the value of the "beta_program_end_time" field.
	BetaProgramEndTime *time.Time `json:"beta_program_end_time,omitempty"`
	// UpdatedTime holds the value of the "updated_time" field.
	UpdatedTime time.Time `json:"updated_time,omitempty"`
	// BetaProgramAddedOn holds the value of the "beta_program_added_on" field.
	BetaProgramAddedOn *time.Time `json:"beta_program_added_on,omitempty"`
	// AllowSelfSignup holds the value of the "allow_self_signup" field.
	AllowSelfSignup *bool `json:"allow_self_signup,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BetaProgramQuery when eager-loading is set.
	Edges        BetaProgramEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BetaProgramEdges holds the relations/edges for other nodes in the graph.
type BetaProgramEdges struct {
	// Participations holds the value of the participations edge.
	Participations []*BetaProgramParticipation `json:"participations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ParticipationsOrErr returns the Participations value or an error if the edge
// was not loaded in eager-loading.
func (e BetaProgramEdges) ParticipationsOrErr() ([]*BetaProgramParticipation, error) {
	if e.loadedTypes[0] {
		return e.Participations, nil
	}
	return nil, &NotLoadedError{edge: "participations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BetaProgram) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case betaprogram.FieldIsActive, betaprogram.FieldAllowSelfSignup:
			values[i] = new(sql.NullBool)
		case betaprogram.FieldID:
			values[i] = new(sql.NullInt64)
		case betaprogram.FieldBetaProgramName, betaprogram.FieldBetaProgramDescription:
			values[i] = new(sql.NullString)
		case betaprogram.FieldBetaProgramStartTime, betaprogram.FieldBetaProgramEndTime, betaprogram.FieldUpdatedTime, betaprogram.FieldBetaProgramAddedOn:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BetaProgram fields.
func (bp *BetaProgram) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case betaprogram.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bp.ID = int(value.Int64)
		case betaprogram.FieldBetaProgramName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field beta_program_name", values[i])
			} else if value.Valid {
				bp.BetaProgramName = value.String
			}
		case betaprogram.FieldBetaProgramDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field beta_program_description", values[i])
			} else if value.Valid {
				bp.BetaProgramDescription = value.String
			}
		case betaprogram.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				bp.IsActive = value.Bool
			}
		case betaprogram.FieldBetaProgramStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field beta_program_start_time", values[i])
			} else if value.Valid {
				bp.BetaProgramStartTime = value.Time
			}
		case betaprogram.FieldBetaProgramEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field beta_program_end_time", values[i])
			} else if value.Valid {
				bp.BetaProgramEndTime = new(time.Time)
				*bp.BetaProgramEndTime = value.Time
			}
		case betaprogram.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				bp.UpdatedTime = value.Time
			}
		case betaprogram.FieldBetaProgramAddedOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field beta_program_added_on", values[i])
			} else if value.Valid {
				bp.BetaProgramAddedOn = new(time.Time)
				*bp.BetaProgramAddedOn = value.Time
			}
		case betaprogram.FieldAllowSelfSignup:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_self_signup", values[i])
			} else if value.Valid {
				bp.AllowSelfSignup = new(bool)
				*bp.AllowSelfSignup = value.Bool
			}
		default:
			bp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BetaProgram.
// This includes values selected through modifiers, order, etc.
func (bp *BetaProgram) Value(name string) (ent.Value, error) {
	return bp.selectValues.Get(name)
}

// QueryParticipations queries the "participations" edge of the BetaProgram entity.
func (bp *BetaProgram) QueryParticipations() *BetaProgramParticipationQuery {
	return NewBetaProgramClient(bp.config).QueryParticipations(bp)
}

// Update returns a builder for updating this BetaProgram.
// Note that you need to call BetaProgram.Unwrap() before calling this method if this BetaProgram
// was returned from a transaction, and the transaction was committed or rolled back.
func (bp *BetaProgram) Update() *BetaProgramUpdateOne {
	return NewBetaProgramClient(bp.config).UpdateOne(bp)
}

// Unwrap unwraps the BetaProgram entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bp *BetaProgram) Unwrap() *BetaProgram {
	_tx, ok := bp.config.driver.(*txDriver)
	if !ok {
		panic("ent: BetaProgram is not a transactional entity")
	}
	bp.config.driver = _tx.drv
	return bp
}

// String implements the fmt.Stringer.
func (bp *BetaProgram) String() string {
	var builder strings.Builder
	builder.WriteString("BetaProgram(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bp.ID))
	builder.WriteString("beta_program_name=")
	builder.WriteString(bp.BetaProgramName)
	builder.WriteString(", ")
	builder.WriteString("beta_program_description=")
	builder.WriteString(bp.BetaProgramDescription)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", bp.IsActive))
	builder.WriteString(", ")
	builder.WriteString("beta_program_start_time=")
	builder.WriteString(bp.BetaProgramStartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bp.BetaProgramEndTime; v != nil {
		builder.WriteString("beta_program_end_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updated_time=")
	builder.WriteString(bp.UpdatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bp.BetaProgramAddedOn; v != nil {
		builder.WriteString("beta_program_added_on=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := bp.AllowSelfSignup; v != nil {
		builder.WriteString("allow_self_signup=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// BetaPrograms is a parsable slice of BetaProgram.
type BetaPrograms []*BetaProgram
