// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/sample"
	"coresamples/ent/tubereceive"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TubeReceiveUpdate is the builder for updating TubeReceive entities.
type TubeReceiveUpdate struct {
	config
	hooks    []Hook
	mutation *TubeReceiveMutation
}

// Where appends a list predicates to the TubeReceiveUpdate builder.
func (tru *TubeReceiveUpdate) Where(ps ...predicate.TubeReceive) *TubeReceiveUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetSampleID sets the "sample_id" field.
func (tru *TubeReceiveUpdate) SetSampleID(i int) *TubeReceiveUpdate {
	tru.mutation.SetSampleID(i)
	return tru
}

// SetNillableSampleID sets the "sample_id" field if the given value is not nil.
func (tru *TubeReceiveUpdate) SetNillableSampleID(i *int) *TubeReceiveUpdate {
	if i != nil {
		tru.SetSampleID(*i)
	}
	return tru
}

// SetTubeType sets the "tube_type" field.
func (tru *TubeReceiveUpdate) SetTubeType(s string) *TubeReceiveUpdate {
	tru.mutation.SetTubeType(s)
	return tru
}

// SetNillableTubeType sets the "tube_type" field if the given value is not nil.
func (tru *TubeReceiveUpdate) SetNillableTubeType(s *string) *TubeReceiveUpdate {
	if s != nil {
		tru.SetTubeType(*s)
	}
	return tru
}

// SetReceivedCount sets the "received_count" field.
func (tru *TubeReceiveUpdate) SetReceivedCount(i int) *TubeReceiveUpdate {
	tru.mutation.ResetReceivedCount()
	tru.mutation.SetReceivedCount(i)
	return tru
}

// SetNillableReceivedCount sets the "received_count" field if the given value is not nil.
func (tru *TubeReceiveUpdate) SetNillableReceivedCount(i *int) *TubeReceiveUpdate {
	if i != nil {
		tru.SetReceivedCount(*i)
	}
	return tru
}

// AddReceivedCount adds i to the "received_count" field.
func (tru *TubeReceiveUpdate) AddReceivedCount(i int) *TubeReceiveUpdate {
	tru.mutation.AddReceivedCount(i)
	return tru
}

// SetReceivedTime sets the "received_time" field.
func (tru *TubeReceiveUpdate) SetReceivedTime(t time.Time) *TubeReceiveUpdate {
	tru.mutation.SetReceivedTime(t)
	return tru
}

// SetNillableReceivedTime sets the "received_time" field if the given value is not nil.
func (tru *TubeReceiveUpdate) SetNillableReceivedTime(t *time.Time) *TubeReceiveUpdate {
	if t != nil {
		tru.SetReceivedTime(*t)
	}
	return tru
}

// SetReceivedBy sets the "received_by" field.
func (tru *TubeReceiveUpdate) SetReceivedBy(s string) *TubeReceiveUpdate {
	tru.mutation.SetReceivedBy(s)
	return tru
}

// SetNillableReceivedBy sets the "received_by" field if the given value is not nil.
func (tru *TubeReceiveUpdate) SetNillableReceivedBy(s *string) *TubeReceiveUpdate {
	if s != nil {
		tru.SetReceivedBy(*s)
	}
	return tru
}

// SetModifiedBy sets the "modified_by" field.
func (tru *TubeReceiveUpdate) SetModifiedBy(s string) *TubeReceiveUpdate {
	tru.mutation.SetModifiedBy(s)
	return tru
}

// SetNillableModifiedBy sets the "modified_by" field if the given value is not nil.
func (tru *TubeReceiveUpdate) SetNillableModifiedBy(s *string) *TubeReceiveUpdate {
	if s != nil {
		tru.SetModifiedBy(*s)
	}
	return tru
}

// ClearModifiedBy clears the value of the "modified_by" field.
func (tru *TubeReceiveUpdate) ClearModifiedBy() *TubeReceiveUpdate {
	tru.mutation.ClearModifiedBy()
	return tru
}

// SetModifiedTime sets the "modified_time" field.
func (tru *TubeReceiveUpdate) SetModifiedTime(t time.Time) *TubeReceiveUpdate {
	tru.mutation.SetModifiedTime(t)
	return tru
}

// ClearModifiedTime clears the value of the "modified_time" field.
func (tru *TubeReceiveUpdate) ClearModifiedTime() *TubeReceiveUpdate {
	tru.mutation.ClearModifiedTime()
	return tru
}

// SetCollectionTime sets the "collection_time" field.
func (tru *TubeReceiveUpdate) SetCollectionTime(t time.Time) *TubeReceiveUpdate {
	tru.mutation.SetCollectionTime(t)
	return tru
}

// SetNillableCollectionTime sets the "collection_time" field if the given value is not nil.
func (tru *TubeReceiveUpdate) SetNillableCollectionTime(t *time.Time) *TubeReceiveUpdate {
	if t != nil {
		tru.SetCollectionTime(*t)
	}
	return tru
}

// SetIsRedraw sets the "is_redraw" field.
func (tru *TubeReceiveUpdate) SetIsRedraw(b bool) *TubeReceiveUpdate {
	tru.mutation.SetIsRedraw(b)
	return tru
}

// SetNillableIsRedraw sets the "is_redraw" field if the given value is not nil.
func (tru *TubeReceiveUpdate) SetNillableIsRedraw(b *bool) *TubeReceiveUpdate {
	if b != nil {
		tru.SetIsRedraw(*b)
	}
	return tru
}

// SetIsRerun sets the "is_rerun" field.
func (tru *TubeReceiveUpdate) SetIsRerun(b bool) *TubeReceiveUpdate {
	tru.mutation.SetIsRerun(b)
	return tru
}

// SetNillableIsRerun sets the "is_rerun" field if the given value is not nil.
func (tru *TubeReceiveUpdate) SetNillableIsRerun(b *bool) *TubeReceiveUpdate {
	if b != nil {
		tru.SetIsRerun(*b)
	}
	return tru
}

// SetSample sets the "sample" edge to the Sample entity.
func (tru *TubeReceiveUpdate) SetSample(s *Sample) *TubeReceiveUpdate {
	return tru.SetSampleID(s.ID)
}

// Mutation returns the TubeReceiveMutation object of the builder.
func (tru *TubeReceiveUpdate) Mutation() *TubeReceiveMutation {
	return tru.mutation
}

// ClearSample clears the "sample" edge to the Sample entity.
func (tru *TubeReceiveUpdate) ClearSample() *TubeReceiveUpdate {
	tru.mutation.ClearSample()
	return tru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TubeReceiveUpdate) Save(ctx context.Context) (int, error) {
	tru.defaults()
	return withHooks(ctx, tru.sqlSave, tru.mutation, tru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TubeReceiveUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TubeReceiveUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TubeReceiveUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tru *TubeReceiveUpdate) defaults() {
	if _, ok := tru.mutation.ModifiedTime(); !ok && !tru.mutation.ModifiedTimeCleared() {
		v := tubereceive.UpdateDefaultModifiedTime()
		tru.mutation.SetModifiedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tru *TubeReceiveUpdate) check() error {
	if _, ok := tru.mutation.SampleID(); tru.mutation.SampleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TubeReceive.sample"`)
	}
	return nil
}

func (tru *TubeReceiveUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tubereceive.Table, tubereceive.Columns, sqlgraph.NewFieldSpec(tubereceive.FieldID, field.TypeInt))
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tru.mutation.TubeType(); ok {
		_spec.SetField(tubereceive.FieldTubeType, field.TypeString, value)
	}
	if value, ok := tru.mutation.ReceivedCount(); ok {
		_spec.SetField(tubereceive.FieldReceivedCount, field.TypeInt, value)
	}
	if value, ok := tru.mutation.AddedReceivedCount(); ok {
		_spec.AddField(tubereceive.FieldReceivedCount, field.TypeInt, value)
	}
	if value, ok := tru.mutation.ReceivedTime(); ok {
		_spec.SetField(tubereceive.FieldReceivedTime, field.TypeTime, value)
	}
	if value, ok := tru.mutation.ReceivedBy(); ok {
		_spec.SetField(tubereceive.FieldReceivedBy, field.TypeString, value)
	}
	if value, ok := tru.mutation.ModifiedBy(); ok {
		_spec.SetField(tubereceive.FieldModifiedBy, field.TypeString, value)
	}
	if tru.mutation.ModifiedByCleared() {
		_spec.ClearField(tubereceive.FieldModifiedBy, field.TypeString)
	}
	if value, ok := tru.mutation.ModifiedTime(); ok {
		_spec.SetField(tubereceive.FieldModifiedTime, field.TypeTime, value)
	}
	if tru.mutation.ModifiedTimeCleared() {
		_spec.ClearField(tubereceive.FieldModifiedTime, field.TypeTime)
	}
	if value, ok := tru.mutation.CollectionTime(); ok {
		_spec.SetField(tubereceive.FieldCollectionTime, field.TypeTime, value)
	}
	if value, ok := tru.mutation.IsRedraw(); ok {
		_spec.SetField(tubereceive.FieldIsRedraw, field.TypeBool, value)
	}
	if value, ok := tru.mutation.IsRerun(); ok {
		_spec.SetField(tubereceive.FieldIsRerun, field.TypeBool, value)
	}
	if tru.mutation.SampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tubereceive.SampleTable,
			Columns: []string{tubereceive.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tubereceive.SampleTable,
			Columns: []string{tubereceive.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tubereceive.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tru.mutation.done = true
	return n, nil
}

// TubeReceiveUpdateOne is the builder for updating a single TubeReceive entity.
type TubeReceiveUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TubeReceiveMutation
}

// SetSampleID sets the "sample_id" field.
func (truo *TubeReceiveUpdateOne) SetSampleID(i int) *TubeReceiveUpdateOne {
	truo.mutation.SetSampleID(i)
	return truo
}

// SetNillableSampleID sets the "sample_id" field if the given value is not nil.
func (truo *TubeReceiveUpdateOne) SetNillableSampleID(i *int) *TubeReceiveUpdateOne {
	if i != nil {
		truo.SetSampleID(*i)
	}
	return truo
}

// SetTubeType sets the "tube_type" field.
func (truo *TubeReceiveUpdateOne) SetTubeType(s string) *TubeReceiveUpdateOne {
	truo.mutation.SetTubeType(s)
	return truo
}

// SetNillableTubeType sets the "tube_type" field if the given value is not nil.
func (truo *TubeReceiveUpdateOne) SetNillableTubeType(s *string) *TubeReceiveUpdateOne {
	if s != nil {
		truo.SetTubeType(*s)
	}
	return truo
}

// SetReceivedCount sets the "received_count" field.
func (truo *TubeReceiveUpdateOne) SetReceivedCount(i int) *TubeReceiveUpdateOne {
	truo.mutation.ResetReceivedCount()
	truo.mutation.SetReceivedCount(i)
	return truo
}

// SetNillableReceivedCount sets the "received_count" field if the given value is not nil.
func (truo *TubeReceiveUpdateOne) SetNillableReceivedCount(i *int) *TubeReceiveUpdateOne {
	if i != nil {
		truo.SetReceivedCount(*i)
	}
	return truo
}

// AddReceivedCount adds i to the "received_count" field.
func (truo *TubeReceiveUpdateOne) AddReceivedCount(i int) *TubeReceiveUpdateOne {
	truo.mutation.AddReceivedCount(i)
	return truo
}

// SetReceivedTime sets the "received_time" field.
func (truo *TubeReceiveUpdateOne) SetReceivedTime(t time.Time) *TubeReceiveUpdateOne {
	truo.mutation.SetReceivedTime(t)
	return truo
}

// SetNillableReceivedTime sets the "received_time" field if the given value is not nil.
func (truo *TubeReceiveUpdateOne) SetNillableReceivedTime(t *time.Time) *TubeReceiveUpdateOne {
	if t != nil {
		truo.SetReceivedTime(*t)
	}
	return truo
}

// SetReceivedBy sets the "received_by" field.
func (truo *TubeReceiveUpdateOne) SetReceivedBy(s string) *TubeReceiveUpdateOne {
	truo.mutation.SetReceivedBy(s)
	return truo
}

// SetNillableReceivedBy sets the "received_by" field if the given value is not nil.
func (truo *TubeReceiveUpdateOne) SetNillableReceivedBy(s *string) *TubeReceiveUpdateOne {
	if s != nil {
		truo.SetReceivedBy(*s)
	}
	return truo
}

// SetModifiedBy sets the "modified_by" field.
func (truo *TubeReceiveUpdateOne) SetModifiedBy(s string) *TubeReceiveUpdateOne {
	truo.mutation.SetModifiedBy(s)
	return truo
}

// SetNillableModifiedBy sets the "modified_by" field if the given value is not nil.
func (truo *TubeReceiveUpdateOne) SetNillableModifiedBy(s *string) *TubeReceiveUpdateOne {
	if s != nil {
		truo.SetModifiedBy(*s)
	}
	return truo
}

// ClearModifiedBy clears the value of the "modified_by" field.
func (truo *TubeReceiveUpdateOne) ClearModifiedBy() *TubeReceiveUpdateOne {
	truo.mutation.ClearModifiedBy()
	return truo
}

// SetModifiedTime sets the "modified_time" field.
func (truo *TubeReceiveUpdateOne) SetModifiedTime(t time.Time) *TubeReceiveUpdateOne {
	truo.mutation.SetModifiedTime(t)
	return truo
}

// ClearModifiedTime clears the value of the "modified_time" field.
func (truo *TubeReceiveUpdateOne) ClearModifiedTime() *TubeReceiveUpdateOne {
	truo.mutation.ClearModifiedTime()
	return truo
}

// SetCollectionTime sets the "collection_time" field.
func (truo *TubeReceiveUpdateOne) SetCollectionTime(t time.Time) *TubeReceiveUpdateOne {
	truo.mutation.SetCollectionTime(t)
	return truo
}

// SetNillableCollectionTime sets the "collection_time" field if the given value is not nil.
func (truo *TubeReceiveUpdateOne) SetNillableCollectionTime(t *time.Time) *TubeReceiveUpdateOne {
	if t != nil {
		truo.SetCollectionTime(*t)
	}
	return truo
}

// SetIsRedraw sets the "is_redraw" field.
func (truo *TubeReceiveUpdateOne) SetIsRedraw(b bool) *TubeReceiveUpdateOne {
	truo.mutation.SetIsRedraw(b)
	return truo
}

// SetNillableIsRedraw sets the "is_redraw" field if the given value is not nil.
func (truo *TubeReceiveUpdateOne) SetNillableIsRedraw(b *bool) *TubeReceiveUpdateOne {
	if b != nil {
		truo.SetIsRedraw(*b)
	}
	return truo
}

// SetIsRerun sets the "is_rerun" field.
func (truo *TubeReceiveUpdateOne) SetIsRerun(b bool) *TubeReceiveUpdateOne {
	truo.mutation.SetIsRerun(b)
	return truo
}

// SetNillableIsRerun sets the "is_rerun" field if the given value is not nil.
func (truo *TubeReceiveUpdateOne) SetNillableIsRerun(b *bool) *TubeReceiveUpdateOne {
	if b != nil {
		truo.SetIsRerun(*b)
	}
	return truo
}

// SetSample sets the "sample" edge to the Sample entity.
func (truo *TubeReceiveUpdateOne) SetSample(s *Sample) *TubeReceiveUpdateOne {
	return truo.SetSampleID(s.ID)
}

// Mutation returns the TubeReceiveMutation object of the builder.
func (truo *TubeReceiveUpdateOne) Mutation() *TubeReceiveMutation {
	return truo.mutation
}

// ClearSample clears the "sample" edge to the Sample entity.
func (truo *TubeReceiveUpdateOne) ClearSample() *TubeReceiveUpdateOne {
	truo.mutation.ClearSample()
	return truo
}

// Where appends a list predicates to the TubeReceiveUpdate builder.
func (truo *TubeReceiveUpdateOne) Where(ps ...predicate.TubeReceive) *TubeReceiveUpdateOne {
	truo.mutation.Where(ps...)
	return truo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TubeReceiveUpdateOne) Select(field string, fields ...string) *TubeReceiveUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TubeReceive entity.
func (truo *TubeReceiveUpdateOne) Save(ctx context.Context) (*TubeReceive, error) {
	truo.defaults()
	return withHooks(ctx, truo.sqlSave, truo.mutation, truo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TubeReceiveUpdateOne) SaveX(ctx context.Context) *TubeReceive {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TubeReceiveUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TubeReceiveUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (truo *TubeReceiveUpdateOne) defaults() {
	if _, ok := truo.mutation.ModifiedTime(); !ok && !truo.mutation.ModifiedTimeCleared() {
		v := tubereceive.UpdateDefaultModifiedTime()
		truo.mutation.SetModifiedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (truo *TubeReceiveUpdateOne) check() error {
	if _, ok := truo.mutation.SampleID(); truo.mutation.SampleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TubeReceive.sample"`)
	}
	return nil
}

func (truo *TubeReceiveUpdateOne) sqlSave(ctx context.Context) (_node *TubeReceive, err error) {
	if err := truo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tubereceive.Table, tubereceive.Columns, sqlgraph.NewFieldSpec(tubereceive.FieldID, field.TypeInt))
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TubeReceive.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tubereceive.FieldID)
		for _, f := range fields {
			if !tubereceive.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tubereceive.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := truo.mutation.TubeType(); ok {
		_spec.SetField(tubereceive.FieldTubeType, field.TypeString, value)
	}
	if value, ok := truo.mutation.ReceivedCount(); ok {
		_spec.SetField(tubereceive.FieldReceivedCount, field.TypeInt, value)
	}
	if value, ok := truo.mutation.AddedReceivedCount(); ok {
		_spec.AddField(tubereceive.FieldReceivedCount, field.TypeInt, value)
	}
	if value, ok := truo.mutation.ReceivedTime(); ok {
		_spec.SetField(tubereceive.FieldReceivedTime, field.TypeTime, value)
	}
	if value, ok := truo.mutation.ReceivedBy(); ok {
		_spec.SetField(tubereceive.FieldReceivedBy, field.TypeString, value)
	}
	if value, ok := truo.mutation.ModifiedBy(); ok {
		_spec.SetField(tubereceive.FieldModifiedBy, field.TypeString, value)
	}
	if truo.mutation.ModifiedByCleared() {
		_spec.ClearField(tubereceive.FieldModifiedBy, field.TypeString)
	}
	if value, ok := truo.mutation.ModifiedTime(); ok {
		_spec.SetField(tubereceive.FieldModifiedTime, field.TypeTime, value)
	}
	if truo.mutation.ModifiedTimeCleared() {
		_spec.ClearField(tubereceive.FieldModifiedTime, field.TypeTime)
	}
	if value, ok := truo.mutation.CollectionTime(); ok {
		_spec.SetField(tubereceive.FieldCollectionTime, field.TypeTime, value)
	}
	if value, ok := truo.mutation.IsRedraw(); ok {
		_spec.SetField(tubereceive.FieldIsRedraw, field.TypeBool, value)
	}
	if value, ok := truo.mutation.IsRerun(); ok {
		_spec.SetField(tubereceive.FieldIsRerun, field.TypeBool, value)
	}
	if truo.mutation.SampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tubereceive.SampleTable,
			Columns: []string{tubereceive.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tubereceive.SampleTable,
			Columns: []string{tubereceive.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TubeReceive{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tubereceive.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	truo.mutation.done = true
	return _node, nil
}
