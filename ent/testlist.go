// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/testlist"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TestList is the model entity for the TestList schema.
type TestList struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TestInstrument holds the value of the "test_instrument" field.
	TestInstrument testlist.TestInstrument `json:"test_instrument,omitempty"`
	// TubeType holds the value of the "tube_type" field.
	TubeType testlist.TubeType `json:"tube_type,omitempty"`
	// DIGroupName holds the value of the "DI_group_name" field.
	DIGroupName string `json:"DI_group_name,omitempty"`
	// VolumeRequired holds the value of the "volume_required" field.
	VolumeRequired float64 `json:"volume_required,omitempty"`
	// BloodType holds the value of the "blood_type" field.
	BloodType    bool `json:"blood_type,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestList) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testlist.FieldBloodType:
			values[i] = new(sql.NullBool)
		case testlist.FieldVolumeRequired:
			values[i] = new(sql.NullFloat64)
		case testlist.FieldID:
			values[i] = new(sql.NullInt64)
		case testlist.FieldTestInstrument, testlist.FieldTubeType, testlist.FieldDIGroupName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestList fields.
func (tl *TestList) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testlist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tl.ID = int(value.Int64)
		case testlist.FieldTestInstrument:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field test_instrument", values[i])
			} else if value.Valid {
				tl.TestInstrument = testlist.TestInstrument(value.String)
			}
		case testlist.FieldTubeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tube_type", values[i])
			} else if value.Valid {
				tl.TubeType = testlist.TubeType(value.String)
			}
		case testlist.FieldDIGroupName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DI_group_name", values[i])
			} else if value.Valid {
				tl.DIGroupName = value.String
			}
		case testlist.FieldVolumeRequired:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field volume_required", values[i])
			} else if value.Valid {
				tl.VolumeRequired = value.Float64
			}
		case testlist.FieldBloodType:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field blood_type", values[i])
			} else if value.Valid {
				tl.BloodType = value.Bool
			}
		default:
			tl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TestList.
// This includes values selected through modifiers, order, etc.
func (tl *TestList) Value(name string) (ent.Value, error) {
	return tl.selectValues.Get(name)
}

// Update returns a builder for updating this TestList.
// Note that you need to call TestList.Unwrap() before calling this method if this TestList
// was returned from a transaction, and the transaction was committed or rolled back.
func (tl *TestList) Update() *TestListUpdateOne {
	return NewTestListClient(tl.config).UpdateOne(tl)
}

// Unwrap unwraps the TestList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tl *TestList) Unwrap() *TestList {
	_tx, ok := tl.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestList is not a transactional entity")
	}
	tl.config.driver = _tx.drv
	return tl
}

// String implements the fmt.Stringer.
func (tl *TestList) String() string {
	var builder strings.Builder
	builder.WriteString("TestList(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tl.ID))
	builder.WriteString("test_instrument=")
	builder.WriteString(fmt.Sprintf("%v", tl.TestInstrument))
	builder.WriteString(", ")
	builder.WriteString("tube_type=")
	builder.WriteString(fmt.Sprintf("%v", tl.TubeType))
	builder.WriteString(", ")
	builder.WriteString("DI_group_name=")
	builder.WriteString(tl.DIGroupName)
	builder.WriteString(", ")
	builder.WriteString("volume_required=")
	builder.WriteString(fmt.Sprintf("%v", tl.VolumeRequired))
	builder.WriteString(", ")
	builder.WriteString("blood_type=")
	builder.WriteString(fmt.Sprintf("%v", tl.BloodType))
	builder.WriteByte(')')
	return builder.String()
}

// TestLists is a parsable slice of TestList.
type TestLists []*TestList
