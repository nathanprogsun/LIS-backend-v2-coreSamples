// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/patient"
	"coresamples/ent/patientweightheight"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PatientWeightHeightCreate is the builder for creating a PatientWeightHeight entity.
type PatientWeightHeightCreate struct {
	config
	mutation *PatientWeightHeightMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPatientID sets the "patient_id" field.
func (pwhc *PatientWeightHeightCreate) SetPatientID(i int) *PatientWeightHeightCreate {
	pwhc.mutation.SetPatientID(i)
	return pwhc
}

// SetWeight sets the "weight" field.
func (pwhc *PatientWeightHeightCreate) SetWeight(s string) *PatientWeightHeightCreate {
	pwhc.mutation.SetWeight(s)
	return pwhc
}

// SetHeight sets the "height" field.
func (pwhc *PatientWeightHeightCreate) SetHeight(s string) *PatientWeightHeightCreate {
	pwhc.mutation.SetHeight(s)
	return pwhc
}

// SetWeightUnit sets the "weight_unit" field.
func (pwhc *PatientWeightHeightCreate) SetWeightUnit(s string) *PatientWeightHeightCreate {
	pwhc.mutation.SetWeightUnit(s)
	return pwhc
}

// SetHeightUnit sets the "height_unit" field.
func (pwhc *PatientWeightHeightCreate) SetHeightUnit(s string) *PatientWeightHeightCreate {
	pwhc.mutation.SetHeightUnit(s)
	return pwhc
}

// SetCreatedTime sets the "created_time" field.
func (pwhc *PatientWeightHeightCreate) SetCreatedTime(t time.Time) *PatientWeightHeightCreate {
	pwhc.mutation.SetCreatedTime(t)
	return pwhc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (pwhc *PatientWeightHeightCreate) SetNillableCreatedTime(t *time.Time) *PatientWeightHeightCreate {
	if t != nil {
		pwhc.SetCreatedTime(*t)
	}
	return pwhc
}

// SetUpdatedTime sets the "updated_time" field.
func (pwhc *PatientWeightHeightCreate) SetUpdatedTime(t time.Time) *PatientWeightHeightCreate {
	pwhc.mutation.SetUpdatedTime(t)
	return pwhc
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (pwhc *PatientWeightHeightCreate) SetNillableUpdatedTime(t *time.Time) *PatientWeightHeightCreate {
	if t != nil {
		pwhc.SetUpdatedTime(*t)
	}
	return pwhc
}

// SetPatient sets the "patient" edge to the Patient entity.
func (pwhc *PatientWeightHeightCreate) SetPatient(p *Patient) *PatientWeightHeightCreate {
	return pwhc.SetPatientID(p.ID)
}

// Mutation returns the PatientWeightHeightMutation object of the builder.
func (pwhc *PatientWeightHeightCreate) Mutation() *PatientWeightHeightMutation {
	return pwhc.mutation
}

// Save creates the PatientWeightHeight in the database.
func (pwhc *PatientWeightHeightCreate) Save(ctx context.Context) (*PatientWeightHeight, error) {
	pwhc.defaults()
	return withHooks(ctx, pwhc.sqlSave, pwhc.mutation, pwhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pwhc *PatientWeightHeightCreate) SaveX(ctx context.Context) *PatientWeightHeight {
	v, err := pwhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pwhc *PatientWeightHeightCreate) Exec(ctx context.Context) error {
	_, err := pwhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pwhc *PatientWeightHeightCreate) ExecX(ctx context.Context) {
	if err := pwhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pwhc *PatientWeightHeightCreate) defaults() {
	if _, ok := pwhc.mutation.CreatedTime(); !ok {
		v := patientweightheight.DefaultCreatedTime()
		pwhc.mutation.SetCreatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pwhc *PatientWeightHeightCreate) check() error {
	if _, ok := pwhc.mutation.PatientID(); !ok {
		return &ValidationError{Name: "patient_id", err: errors.New(`ent: missing required field "PatientWeightHeight.patient_id"`)}
	}
	if _, ok := pwhc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`ent: missing required field "PatientWeightHeight.weight"`)}
	}
	if _, ok := pwhc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "PatientWeightHeight.height"`)}
	}
	if _, ok := pwhc.mutation.WeightUnit(); !ok {
		return &ValidationError{Name: "weight_unit", err: errors.New(`ent: missing required field "PatientWeightHeight.weight_unit"`)}
	}
	if _, ok := pwhc.mutation.HeightUnit(); !ok {
		return &ValidationError{Name: "height_unit", err: errors.New(`ent: missing required field "PatientWeightHeight.height_unit"`)}
	}
	if _, ok := pwhc.mutation.CreatedTime(); !ok {
		return &ValidationError{Name: "created_time", err: errors.New(`ent: missing required field "PatientWeightHeight.created_time"`)}
	}
	if _, ok := pwhc.mutation.PatientID(); !ok {
		return &ValidationError{Name: "patient", err: errors.New(`ent: missing required edge "PatientWeightHeight.patient"`)}
	}
	return nil
}

func (pwhc *PatientWeightHeightCreate) sqlSave(ctx context.Context) (*PatientWeightHeight, error) {
	if err := pwhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pwhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pwhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pwhc.mutation.id = &_node.ID
	pwhc.mutation.done = true
	return _node, nil
}

func (pwhc *PatientWeightHeightCreate) createSpec() (*PatientWeightHeight, *sqlgraph.CreateSpec) {
	var (
		_node = &PatientWeightHeight{config: pwhc.config}
		_spec = sqlgraph.NewCreateSpec(patientweightheight.Table, sqlgraph.NewFieldSpec(patientweightheight.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pwhc.conflict
	if value, ok := pwhc.mutation.Weight(); ok {
		_spec.SetField(patientweightheight.FieldWeight, field.TypeString, value)
		_node.Weight = value
	}
	if value, ok := pwhc.mutation.Height(); ok {
		_spec.SetField(patientweightheight.FieldHeight, field.TypeString, value)
		_node.Height = value
	}
	if value, ok := pwhc.mutation.WeightUnit(); ok {
		_spec.SetField(patientweightheight.FieldWeightUnit, field.TypeString, value)
		_node.WeightUnit = value
	}
	if value, ok := pwhc.mutation.HeightUnit(); ok {
		_spec.SetField(patientweightheight.FieldHeightUnit, field.TypeString, value)
		_node.HeightUnit = value
	}
	if value, ok := pwhc.mutation.CreatedTime(); ok {
		_spec.SetField(patientweightheight.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = value
	}
	if value, ok := pwhc.mutation.UpdatedTime(); ok {
		_spec.SetField(patientweightheight.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = value
	}
	if nodes := pwhc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientweightheight.PatientTable,
			Columns: []string{patientweightheight.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PatientID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PatientWeightHeight.Create().
//		SetPatientID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PatientWeightHeightUpsert) {
//			SetPatientID(v+v).
//		}).
//		Exec(ctx)
func (pwhc *PatientWeightHeightCreate) OnConflict(opts ...sql.ConflictOption) *PatientWeightHeightUpsertOne {
	pwhc.conflict = opts
	return &PatientWeightHeightUpsertOne{
		create: pwhc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PatientWeightHeight.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pwhc *PatientWeightHeightCreate) OnConflictColumns(columns ...string) *PatientWeightHeightUpsertOne {
	pwhc.conflict = append(pwhc.conflict, sql.ConflictColumns(columns...))
	return &PatientWeightHeightUpsertOne{
		create: pwhc,
	}
}

type (
	// PatientWeightHeightUpsertOne is the builder for "upsert"-ing
	//  one PatientWeightHeight node.
	PatientWeightHeightUpsertOne struct {
		create *PatientWeightHeightCreate
	}

	// PatientWeightHeightUpsert is the "OnConflict" setter.
	PatientWeightHeightUpsert struct {
		*sql.UpdateSet
	}
)

// SetPatientID sets the "patient_id" field.
func (u *PatientWeightHeightUpsert) SetPatientID(v int) *PatientWeightHeightUpsert {
	u.Set(patientweightheight.FieldPatientID, v)
	return u
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *PatientWeightHeightUpsert) UpdatePatientID() *PatientWeightHeightUpsert {
	u.SetExcluded(patientweightheight.FieldPatientID)
	return u
}

// SetWeight sets the "weight" field.
func (u *PatientWeightHeightUpsert) SetWeight(v string) *PatientWeightHeightUpsert {
	u.Set(patientweightheight.FieldWeight, v)
	return u
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *PatientWeightHeightUpsert) UpdateWeight() *PatientWeightHeightUpsert {
	u.SetExcluded(patientweightheight.FieldWeight)
	return u
}

// SetHeight sets the "height" field.
func (u *PatientWeightHeightUpsert) SetHeight(v string) *PatientWeightHeightUpsert {
	u.Set(patientweightheight.FieldHeight, v)
	return u
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *PatientWeightHeightUpsert) UpdateHeight() *PatientWeightHeightUpsert {
	u.SetExcluded(patientweightheight.FieldHeight)
	return u
}

// SetWeightUnit sets the "weight_unit" field.
func (u *PatientWeightHeightUpsert) SetWeightUnit(v string) *PatientWeightHeightUpsert {
	u.Set(patientweightheight.FieldWeightUnit, v)
	return u
}

// UpdateWeightUnit sets the "weight_unit" field to the value that was provided on create.
func (u *PatientWeightHeightUpsert) UpdateWeightUnit() *PatientWeightHeightUpsert {
	u.SetExcluded(patientweightheight.FieldWeightUnit)
	return u
}

// SetHeightUnit sets the "height_unit" field.
func (u *PatientWeightHeightUpsert) SetHeightUnit(v string) *PatientWeightHeightUpsert {
	u.Set(patientweightheight.FieldHeightUnit, v)
	return u
}

// UpdateHeightUnit sets the "height_unit" field to the value that was provided on create.
func (u *PatientWeightHeightUpsert) UpdateHeightUnit() *PatientWeightHeightUpsert {
	u.SetExcluded(patientweightheight.FieldHeightUnit)
	return u
}

// SetCreatedTime sets the "created_time" field.
func (u *PatientWeightHeightUpsert) SetCreatedTime(v time.Time) *PatientWeightHeightUpsert {
	u.Set(patientweightheight.FieldCreatedTime, v)
	return u
}

// UpdateCreatedTime sets the "created_time" field to the value that was provided on create.
func (u *PatientWeightHeightUpsert) UpdateCreatedTime() *PatientWeightHeightUpsert {
	u.SetExcluded(patientweightheight.FieldCreatedTime)
	return u
}

// SetUpdatedTime sets the "updated_time" field.
func (u *PatientWeightHeightUpsert) SetUpdatedTime(v time.Time) *PatientWeightHeightUpsert {
	u.Set(patientweightheight.FieldUpdatedTime, v)
	return u
}

// UpdateUpdatedTime sets the "updated_time" field to the value that was provided on create.
func (u *PatientWeightHeightUpsert) UpdateUpdatedTime() *PatientWeightHeightUpsert {
	u.SetExcluded(patientweightheight.FieldUpdatedTime)
	return u
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (u *PatientWeightHeightUpsert) ClearUpdatedTime() *PatientWeightHeightUpsert {
	u.SetNull(patientweightheight.FieldUpdatedTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PatientWeightHeight.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PatientWeightHeightUpsertOne) UpdateNewValues() *PatientWeightHeightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PatientWeightHeight.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PatientWeightHeightUpsertOne) Ignore() *PatientWeightHeightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PatientWeightHeightUpsertOne) DoNothing() *PatientWeightHeightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PatientWeightHeightCreate.OnConflict
// documentation for more info.
func (u *PatientWeightHeightUpsertOne) Update(set func(*PatientWeightHeightUpsert)) *PatientWeightHeightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PatientWeightHeightUpsert{UpdateSet: update})
	}))
	return u
}

// SetPatientID sets the "patient_id" field.
func (u *PatientWeightHeightUpsertOne) SetPatientID(v int) *PatientWeightHeightUpsertOne {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.SetPatientID(v)
	})
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *PatientWeightHeightUpsertOne) UpdatePatientID() *PatientWeightHeightUpsertOne {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.UpdatePatientID()
	})
}

// SetWeight sets the "weight" field.
func (u *PatientWeightHeightUpsertOne) SetWeight(v string) *PatientWeightHeightUpsertOne {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.SetWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *PatientWeightHeightUpsertOne) UpdateWeight() *PatientWeightHeightUpsertOne {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.UpdateWeight()
	})
}

// SetHeight sets the "height" field.
func (u *PatientWeightHeightUpsertOne) SetHeight(v string) *PatientWeightHeightUpsertOne {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.SetHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *PatientWeightHeightUpsertOne) UpdateHeight() *PatientWeightHeightUpsertOne {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.UpdateHeight()
	})
}

// SetWeightUnit sets the "weight_unit" field.
func (u *PatientWeightHeightUpsertOne) SetWeightUnit(v string) *PatientWeightHeightUpsertOne {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.SetWeightUnit(v)
	})
}

// UpdateWeightUnit sets the "weight_unit" field to the value that was provided on create.
func (u *PatientWeightHeightUpsertOne) UpdateWeightUnit() *PatientWeightHeightUpsertOne {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.UpdateWeightUnit()
	})
}

// SetHeightUnit sets the "height_unit" field.
func (u *PatientWeightHeightUpsertOne) SetHeightUnit(v string) *PatientWeightHeightUpsertOne {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.SetHeightUnit(v)
	})
}

// UpdateHeightUnit sets the "height_unit" field to the value that was provided on create.
func (u *PatientWeightHeightUpsertOne) UpdateHeightUnit() *PatientWeightHeightUpsertOne {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.UpdateHeightUnit()
	})
}

// SetCreatedTime sets the "created_time" field.
func (u *PatientWeightHeightUpsertOne) SetCreatedTime(v time.Time) *PatientWeightHeightUpsertOne {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.SetCreatedTime(v)
	})
}

// UpdateCreatedTime sets the "created_time" field to the value that was provided on create.
func (u *PatientWeightHeightUpsertOne) UpdateCreatedTime() *PatientWeightHeightUpsertOne {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.UpdateCreatedTime()
	})
}

// SetUpdatedTime sets the "updated_time" field.
func (u *PatientWeightHeightUpsertOne) SetUpdatedTime(v time.Time) *PatientWeightHeightUpsertOne {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.SetUpdatedTime(v)
	})
}

// UpdateUpdatedTime sets the "updated_time" field to the value that was provided on create.
func (u *PatientWeightHeightUpsertOne) UpdateUpdatedTime() *PatientWeightHeightUpsertOne {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.UpdateUpdatedTime()
	})
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (u *PatientWeightHeightUpsertOne) ClearUpdatedTime() *PatientWeightHeightUpsertOne {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.ClearUpdatedTime()
	})
}

// Exec executes the query.
func (u *PatientWeightHeightUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PatientWeightHeightCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PatientWeightHeightUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PatientWeightHeightUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PatientWeightHeightUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PatientWeightHeightCreateBulk is the builder for creating many PatientWeightHeight entities in bulk.
type PatientWeightHeightCreateBulk struct {
	config
	err      error
	builders []*PatientWeightHeightCreate
	conflict []sql.ConflictOption
}

// Save creates the PatientWeightHeight entities in the database.
func (pwhcb *PatientWeightHeightCreateBulk) Save(ctx context.Context) ([]*PatientWeightHeight, error) {
	if pwhcb.err != nil {
		return nil, pwhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pwhcb.builders))
	nodes := make([]*PatientWeightHeight, len(pwhcb.builders))
	mutators := make([]Mutator, len(pwhcb.builders))
	for i := range pwhcb.builders {
		func(i int, root context.Context) {
			builder := pwhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PatientWeightHeightMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pwhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pwhcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pwhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pwhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pwhcb *PatientWeightHeightCreateBulk) SaveX(ctx context.Context) []*PatientWeightHeight {
	v, err := pwhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pwhcb *PatientWeightHeightCreateBulk) Exec(ctx context.Context) error {
	_, err := pwhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pwhcb *PatientWeightHeightCreateBulk) ExecX(ctx context.Context) {
	if err := pwhcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PatientWeightHeight.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PatientWeightHeightUpsert) {
//			SetPatientID(v+v).
//		}).
//		Exec(ctx)
func (pwhcb *PatientWeightHeightCreateBulk) OnConflict(opts ...sql.ConflictOption) *PatientWeightHeightUpsertBulk {
	pwhcb.conflict = opts
	return &PatientWeightHeightUpsertBulk{
		create: pwhcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PatientWeightHeight.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pwhcb *PatientWeightHeightCreateBulk) OnConflictColumns(columns ...string) *PatientWeightHeightUpsertBulk {
	pwhcb.conflict = append(pwhcb.conflict, sql.ConflictColumns(columns...))
	return &PatientWeightHeightUpsertBulk{
		create: pwhcb,
	}
}

// PatientWeightHeightUpsertBulk is the builder for "upsert"-ing
// a bulk of PatientWeightHeight nodes.
type PatientWeightHeightUpsertBulk struct {
	create *PatientWeightHeightCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PatientWeightHeight.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PatientWeightHeightUpsertBulk) UpdateNewValues() *PatientWeightHeightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PatientWeightHeight.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PatientWeightHeightUpsertBulk) Ignore() *PatientWeightHeightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PatientWeightHeightUpsertBulk) DoNothing() *PatientWeightHeightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PatientWeightHeightCreateBulk.OnConflict
// documentation for more info.
func (u *PatientWeightHeightUpsertBulk) Update(set func(*PatientWeightHeightUpsert)) *PatientWeightHeightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PatientWeightHeightUpsert{UpdateSet: update})
	}))
	return u
}

// SetPatientID sets the "patient_id" field.
func (u *PatientWeightHeightUpsertBulk) SetPatientID(v int) *PatientWeightHeightUpsertBulk {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.SetPatientID(v)
	})
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *PatientWeightHeightUpsertBulk) UpdatePatientID() *PatientWeightHeightUpsertBulk {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.UpdatePatientID()
	})
}

// SetWeight sets the "weight" field.
func (u *PatientWeightHeightUpsertBulk) SetWeight(v string) *PatientWeightHeightUpsertBulk {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.SetWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *PatientWeightHeightUpsertBulk) UpdateWeight() *PatientWeightHeightUpsertBulk {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.UpdateWeight()
	})
}

// SetHeight sets the "height" field.
func (u *PatientWeightHeightUpsertBulk) SetHeight(v string) *PatientWeightHeightUpsertBulk {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.SetHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *PatientWeightHeightUpsertBulk) UpdateHeight() *PatientWeightHeightUpsertBulk {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.UpdateHeight()
	})
}

// SetWeightUnit sets the "weight_unit" field.
func (u *PatientWeightHeightUpsertBulk) SetWeightUnit(v string) *PatientWeightHeightUpsertBulk {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.SetWeightUnit(v)
	})
}

// UpdateWeightUnit sets the "weight_unit" field to the value that was provided on create.
func (u *PatientWeightHeightUpsertBulk) UpdateWeightUnit() *PatientWeightHeightUpsertBulk {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.UpdateWeightUnit()
	})
}

// SetHeightUnit sets the "height_unit" field.
func (u *PatientWeightHeightUpsertBulk) SetHeightUnit(v string) *PatientWeightHeightUpsertBulk {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.SetHeightUnit(v)
	})
}

// UpdateHeightUnit sets the "height_unit" field to the value that was provided on create.
func (u *PatientWeightHeightUpsertBulk) UpdateHeightUnit() *PatientWeightHeightUpsertBulk {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.UpdateHeightUnit()
	})
}

// SetCreatedTime sets the "created_time" field.
func (u *PatientWeightHeightUpsertBulk) SetCreatedTime(v time.Time) *PatientWeightHeightUpsertBulk {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.SetCreatedTime(v)
	})
}

// UpdateCreatedTime sets the "created_time" field to the value that was provided on create.
func (u *PatientWeightHeightUpsertBulk) UpdateCreatedTime() *PatientWeightHeightUpsertBulk {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.UpdateCreatedTime()
	})
}

// SetUpdatedTime sets the "updated_time" field.
func (u *PatientWeightHeightUpsertBulk) SetUpdatedTime(v time.Time) *PatientWeightHeightUpsertBulk {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.SetUpdatedTime(v)
	})
}

// UpdateUpdatedTime sets the "updated_time" field to the value that was provided on create.
func (u *PatientWeightHeightUpsertBulk) UpdateUpdatedTime() *PatientWeightHeightUpsertBulk {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.UpdateUpdatedTime()
	})
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (u *PatientWeightHeightUpsertBulk) ClearUpdatedTime() *PatientWeightHeightUpsertBulk {
	return u.Update(func(s *PatientWeightHeightUpsert) {
		s.ClearUpdatedTime()
	})
}

// Exec executes the query.
func (u *PatientWeightHeightUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PatientWeightHeightCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PatientWeightHeightCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PatientWeightHeightUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
