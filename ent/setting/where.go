// Code generated by ent, DO NOT EDIT.

package setting

import (
	"coresamples/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldID, id))
}

// SettingName applies equality check predicate on the "setting_name" field. It's identical to SettingNameEQ.
func SettingName(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldSettingName, v))
}

// SettingGroup applies equality check predicate on the "setting_group" field. It's identical to SettingGroupEQ.
func SettingGroup(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldSettingGroup, v))
}

// SettingDescription applies equality check predicate on the "setting_description" field. It's identical to SettingDescriptionEQ.
func SettingDescription(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldSettingDescription, v))
}

// SettingValue applies equality check predicate on the "setting_value" field. It's identical to SettingValueEQ.
func SettingValue(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldSettingValue, v))
}

// SettingType applies equality check predicate on the "setting_type" field. It's identical to SettingTypeEQ.
func SettingType(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldSettingType, v))
}

// SettingValueUpdatedTime applies equality check predicate on the "setting_value_updated_time" field. It's identical to SettingValueUpdatedTimeEQ.
func SettingValueUpdatedTime(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldSettingValueUpdatedTime, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldIsActive, v))
}

// ApplyToAllGroupMember applies equality check predicate on the "apply_to_all_group_member" field. It's identical to ApplyToAllGroupMemberEQ.
func ApplyToAllGroupMember(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldApplyToAllGroupMember, v))
}

// IsOfficial applies equality check predicate on the "is_official" field. It's identical to IsOfficialEQ.
func IsOfficial(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldIsOfficial, v))
}

// SettingLevel applies equality check predicate on the "setting_level" field. It's identical to SettingLevelEQ.
func SettingLevel(v int) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldSettingLevel, v))
}

// SettingLevelName applies equality check predicate on the "setting_level_name" field. It's identical to SettingLevelNameEQ.
func SettingLevelName(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldSettingLevelName, v))
}

// UseGroupSetting applies equality check predicate on the "use_group_setting" field. It's identical to UseGroupSettingEQ.
func UseGroupSetting(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldUseGroupSetting, v))
}

// SettingNameEQ applies the EQ predicate on the "setting_name" field.
func SettingNameEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldSettingName, v))
}

// SettingNameNEQ applies the NEQ predicate on the "setting_name" field.
func SettingNameNEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldSettingName, v))
}

// SettingNameIn applies the In predicate on the "setting_name" field.
func SettingNameIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldSettingName, vs...))
}

// SettingNameNotIn applies the NotIn predicate on the "setting_name" field.
func SettingNameNotIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldSettingName, vs...))
}

// SettingNameGT applies the GT predicate on the "setting_name" field.
func SettingNameGT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldSettingName, v))
}

// SettingNameGTE applies the GTE predicate on the "setting_name" field.
func SettingNameGTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldSettingName, v))
}

// SettingNameLT applies the LT predicate on the "setting_name" field.
func SettingNameLT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldSettingName, v))
}

// SettingNameLTE applies the LTE predicate on the "setting_name" field.
func SettingNameLTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldSettingName, v))
}

// SettingNameContains applies the Contains predicate on the "setting_name" field.
func SettingNameContains(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContains(FieldSettingName, v))
}

// SettingNameHasPrefix applies the HasPrefix predicate on the "setting_name" field.
func SettingNameHasPrefix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasPrefix(FieldSettingName, v))
}

// SettingNameHasSuffix applies the HasSuffix predicate on the "setting_name" field.
func SettingNameHasSuffix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasSuffix(FieldSettingName, v))
}

// SettingNameEqualFold applies the EqualFold predicate on the "setting_name" field.
func SettingNameEqualFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEqualFold(FieldSettingName, v))
}

// SettingNameContainsFold applies the ContainsFold predicate on the "setting_name" field.
func SettingNameContainsFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContainsFold(FieldSettingName, v))
}

// SettingGroupEQ applies the EQ predicate on the "setting_group" field.
func SettingGroupEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldSettingGroup, v))
}

// SettingGroupNEQ applies the NEQ predicate on the "setting_group" field.
func SettingGroupNEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldSettingGroup, v))
}

// SettingGroupIn applies the In predicate on the "setting_group" field.
func SettingGroupIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldSettingGroup, vs...))
}

// SettingGroupNotIn applies the NotIn predicate on the "setting_group" field.
func SettingGroupNotIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldSettingGroup, vs...))
}

// SettingGroupGT applies the GT predicate on the "setting_group" field.
func SettingGroupGT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldSettingGroup, v))
}

// SettingGroupGTE applies the GTE predicate on the "setting_group" field.
func SettingGroupGTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldSettingGroup, v))
}

// SettingGroupLT applies the LT predicate on the "setting_group" field.
func SettingGroupLT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldSettingGroup, v))
}

// SettingGroupLTE applies the LTE predicate on the "setting_group" field.
func SettingGroupLTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldSettingGroup, v))
}

// SettingGroupContains applies the Contains predicate on the "setting_group" field.
func SettingGroupContains(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContains(FieldSettingGroup, v))
}

// SettingGroupHasPrefix applies the HasPrefix predicate on the "setting_group" field.
func SettingGroupHasPrefix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasPrefix(FieldSettingGroup, v))
}

// SettingGroupHasSuffix applies the HasSuffix predicate on the "setting_group" field.
func SettingGroupHasSuffix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasSuffix(FieldSettingGroup, v))
}

// SettingGroupEqualFold applies the EqualFold predicate on the "setting_group" field.
func SettingGroupEqualFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEqualFold(FieldSettingGroup, v))
}

// SettingGroupContainsFold applies the ContainsFold predicate on the "setting_group" field.
func SettingGroupContainsFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContainsFold(FieldSettingGroup, v))
}

// SettingDescriptionEQ applies the EQ predicate on the "setting_description" field.
func SettingDescriptionEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldSettingDescription, v))
}

// SettingDescriptionNEQ applies the NEQ predicate on the "setting_description" field.
func SettingDescriptionNEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldSettingDescription, v))
}

// SettingDescriptionIn applies the In predicate on the "setting_description" field.
func SettingDescriptionIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldSettingDescription, vs...))
}

// SettingDescriptionNotIn applies the NotIn predicate on the "setting_description" field.
func SettingDescriptionNotIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldSettingDescription, vs...))
}

// SettingDescriptionGT applies the GT predicate on the "setting_description" field.
func SettingDescriptionGT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldSettingDescription, v))
}

// SettingDescriptionGTE applies the GTE predicate on the "setting_description" field.
func SettingDescriptionGTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldSettingDescription, v))
}

// SettingDescriptionLT applies the LT predicate on the "setting_description" field.
func SettingDescriptionLT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldSettingDescription, v))
}

// SettingDescriptionLTE applies the LTE predicate on the "setting_description" field.
func SettingDescriptionLTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldSettingDescription, v))
}

// SettingDescriptionContains applies the Contains predicate on the "setting_description" field.
func SettingDescriptionContains(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContains(FieldSettingDescription, v))
}

// SettingDescriptionHasPrefix applies the HasPrefix predicate on the "setting_description" field.
func SettingDescriptionHasPrefix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasPrefix(FieldSettingDescription, v))
}

// SettingDescriptionHasSuffix applies the HasSuffix predicate on the "setting_description" field.
func SettingDescriptionHasSuffix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasSuffix(FieldSettingDescription, v))
}

// SettingDescriptionEqualFold applies the EqualFold predicate on the "setting_description" field.
func SettingDescriptionEqualFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEqualFold(FieldSettingDescription, v))
}

// SettingDescriptionContainsFold applies the ContainsFold predicate on the "setting_description" field.
func SettingDescriptionContainsFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContainsFold(FieldSettingDescription, v))
}

// SettingValueEQ applies the EQ predicate on the "setting_value" field.
func SettingValueEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldSettingValue, v))
}

// SettingValueNEQ applies the NEQ predicate on the "setting_value" field.
func SettingValueNEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldSettingValue, v))
}

// SettingValueIn applies the In predicate on the "setting_value" field.
func SettingValueIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldSettingValue, vs...))
}

// SettingValueNotIn applies the NotIn predicate on the "setting_value" field.
func SettingValueNotIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldSettingValue, vs...))
}

// SettingValueGT applies the GT predicate on the "setting_value" field.
func SettingValueGT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldSettingValue, v))
}

// SettingValueGTE applies the GTE predicate on the "setting_value" field.
func SettingValueGTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldSettingValue, v))
}

// SettingValueLT applies the LT predicate on the "setting_value" field.
func SettingValueLT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldSettingValue, v))
}

// SettingValueLTE applies the LTE predicate on the "setting_value" field.
func SettingValueLTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldSettingValue, v))
}

// SettingValueContains applies the Contains predicate on the "setting_value" field.
func SettingValueContains(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContains(FieldSettingValue, v))
}

// SettingValueHasPrefix applies the HasPrefix predicate on the "setting_value" field.
func SettingValueHasPrefix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasPrefix(FieldSettingValue, v))
}

// SettingValueHasSuffix applies the HasSuffix predicate on the "setting_value" field.
func SettingValueHasSuffix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasSuffix(FieldSettingValue, v))
}

// SettingValueIsNil applies the IsNil predicate on the "setting_value" field.
func SettingValueIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldSettingValue))
}

// SettingValueNotNil applies the NotNil predicate on the "setting_value" field.
func SettingValueNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldSettingValue))
}

// SettingValueEqualFold applies the EqualFold predicate on the "setting_value" field.
func SettingValueEqualFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEqualFold(FieldSettingValue, v))
}

// SettingValueContainsFold applies the ContainsFold predicate on the "setting_value" field.
func SettingValueContainsFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContainsFold(FieldSettingValue, v))
}

// SettingTypeEQ applies the EQ predicate on the "setting_type" field.
func SettingTypeEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldSettingType, v))
}

// SettingTypeNEQ applies the NEQ predicate on the "setting_type" field.
func SettingTypeNEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldSettingType, v))
}

// SettingTypeIn applies the In predicate on the "setting_type" field.
func SettingTypeIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldSettingType, vs...))
}

// SettingTypeNotIn applies the NotIn predicate on the "setting_type" field.
func SettingTypeNotIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldSettingType, vs...))
}

// SettingTypeGT applies the GT predicate on the "setting_type" field.
func SettingTypeGT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldSettingType, v))
}

// SettingTypeGTE applies the GTE predicate on the "setting_type" field.
func SettingTypeGTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldSettingType, v))
}

// SettingTypeLT applies the LT predicate on the "setting_type" field.
func SettingTypeLT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldSettingType, v))
}

// SettingTypeLTE applies the LTE predicate on the "setting_type" field.
func SettingTypeLTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldSettingType, v))
}

// SettingTypeContains applies the Contains predicate on the "setting_type" field.
func SettingTypeContains(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContains(FieldSettingType, v))
}

// SettingTypeHasPrefix applies the HasPrefix predicate on the "setting_type" field.
func SettingTypeHasPrefix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasPrefix(FieldSettingType, v))
}

// SettingTypeHasSuffix applies the HasSuffix predicate on the "setting_type" field.
func SettingTypeHasSuffix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasSuffix(FieldSettingType, v))
}

// SettingTypeEqualFold applies the EqualFold predicate on the "setting_type" field.
func SettingTypeEqualFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEqualFold(FieldSettingType, v))
}

// SettingTypeContainsFold applies the ContainsFold predicate on the "setting_type" field.
func SettingTypeContainsFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContainsFold(FieldSettingType, v))
}

// SettingValueUpdatedTimeEQ applies the EQ predicate on the "setting_value_updated_time" field.
func SettingValueUpdatedTimeEQ(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldSettingValueUpdatedTime, v))
}

// SettingValueUpdatedTimeNEQ applies the NEQ predicate on the "setting_value_updated_time" field.
func SettingValueUpdatedTimeNEQ(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldSettingValueUpdatedTime, v))
}

// SettingValueUpdatedTimeIn applies the In predicate on the "setting_value_updated_time" field.
func SettingValueUpdatedTimeIn(vs ...time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldSettingValueUpdatedTime, vs...))
}

// SettingValueUpdatedTimeNotIn applies the NotIn predicate on the "setting_value_updated_time" field.
func SettingValueUpdatedTimeNotIn(vs ...time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldSettingValueUpdatedTime, vs...))
}

// SettingValueUpdatedTimeGT applies the GT predicate on the "setting_value_updated_time" field.
func SettingValueUpdatedTimeGT(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldSettingValueUpdatedTime, v))
}

// SettingValueUpdatedTimeGTE applies the GTE predicate on the "setting_value_updated_time" field.
func SettingValueUpdatedTimeGTE(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldSettingValueUpdatedTime, v))
}

// SettingValueUpdatedTimeLT applies the LT predicate on the "setting_value_updated_time" field.
func SettingValueUpdatedTimeLT(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldSettingValueUpdatedTime, v))
}

// SettingValueUpdatedTimeLTE applies the LTE predicate on the "setting_value_updated_time" field.
func SettingValueUpdatedTimeLTE(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldSettingValueUpdatedTime, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldIsActive, v))
}

// ApplyToAllGroupMemberEQ applies the EQ predicate on the "apply_to_all_group_member" field.
func ApplyToAllGroupMemberEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldApplyToAllGroupMember, v))
}

// ApplyToAllGroupMemberNEQ applies the NEQ predicate on the "apply_to_all_group_member" field.
func ApplyToAllGroupMemberNEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldApplyToAllGroupMember, v))
}

// IsOfficialEQ applies the EQ predicate on the "is_official" field.
func IsOfficialEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldIsOfficial, v))
}

// IsOfficialNEQ applies the NEQ predicate on the "is_official" field.
func IsOfficialNEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldIsOfficial, v))
}

// SettingLevelEQ applies the EQ predicate on the "setting_level" field.
func SettingLevelEQ(v int) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldSettingLevel, v))
}

// SettingLevelNEQ applies the NEQ predicate on the "setting_level" field.
func SettingLevelNEQ(v int) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldSettingLevel, v))
}

// SettingLevelIn applies the In predicate on the "setting_level" field.
func SettingLevelIn(vs ...int) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldSettingLevel, vs...))
}

// SettingLevelNotIn applies the NotIn predicate on the "setting_level" field.
func SettingLevelNotIn(vs ...int) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldSettingLevel, vs...))
}

// SettingLevelGT applies the GT predicate on the "setting_level" field.
func SettingLevelGT(v int) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldSettingLevel, v))
}

// SettingLevelGTE applies the GTE predicate on the "setting_level" field.
func SettingLevelGTE(v int) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldSettingLevel, v))
}

// SettingLevelLT applies the LT predicate on the "setting_level" field.
func SettingLevelLT(v int) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldSettingLevel, v))
}

// SettingLevelLTE applies the LTE predicate on the "setting_level" field.
func SettingLevelLTE(v int) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldSettingLevel, v))
}

// SettingLevelNameEQ applies the EQ predicate on the "setting_level_name" field.
func SettingLevelNameEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldSettingLevelName, v))
}

// SettingLevelNameNEQ applies the NEQ predicate on the "setting_level_name" field.
func SettingLevelNameNEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldSettingLevelName, v))
}

// SettingLevelNameIn applies the In predicate on the "setting_level_name" field.
func SettingLevelNameIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldSettingLevelName, vs...))
}

// SettingLevelNameNotIn applies the NotIn predicate on the "setting_level_name" field.
func SettingLevelNameNotIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldSettingLevelName, vs...))
}

// SettingLevelNameGT applies the GT predicate on the "setting_level_name" field.
func SettingLevelNameGT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldSettingLevelName, v))
}

// SettingLevelNameGTE applies the GTE predicate on the "setting_level_name" field.
func SettingLevelNameGTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldSettingLevelName, v))
}

// SettingLevelNameLT applies the LT predicate on the "setting_level_name" field.
func SettingLevelNameLT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldSettingLevelName, v))
}

// SettingLevelNameLTE applies the LTE predicate on the "setting_level_name" field.
func SettingLevelNameLTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldSettingLevelName, v))
}

// SettingLevelNameContains applies the Contains predicate on the "setting_level_name" field.
func SettingLevelNameContains(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContains(FieldSettingLevelName, v))
}

// SettingLevelNameHasPrefix applies the HasPrefix predicate on the "setting_level_name" field.
func SettingLevelNameHasPrefix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasPrefix(FieldSettingLevelName, v))
}

// SettingLevelNameHasSuffix applies the HasSuffix predicate on the "setting_level_name" field.
func SettingLevelNameHasSuffix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasSuffix(FieldSettingLevelName, v))
}

// SettingLevelNameEqualFold applies the EqualFold predicate on the "setting_level_name" field.
func SettingLevelNameEqualFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEqualFold(FieldSettingLevelName, v))
}

// SettingLevelNameContainsFold applies the ContainsFold predicate on the "setting_level_name" field.
func SettingLevelNameContainsFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContainsFold(FieldSettingLevelName, v))
}

// UseGroupSettingEQ applies the EQ predicate on the "use_group_setting" field.
func UseGroupSettingEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldUseGroupSetting, v))
}

// UseGroupSettingNEQ applies the NEQ predicate on the "use_group_setting" field.
func UseGroupSettingNEQ(v bool) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldUseGroupSetting, v))
}

// HasClinics applies the HasEdge predicate on the "clinics" edge.
func HasClinics() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ClinicsTable, ClinicsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicsWith applies the HasEdge predicate on the "clinics" edge with a given conditions (other predicates).
func HasClinicsWith(preds ...predicate.Clinic) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		step := newClinicsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInternalUsers applies the HasEdge predicate on the "internal_users" edge.
func HasInternalUsers() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, InternalUsersTable, InternalUsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInternalUsersWith applies the HasEdge predicate on the "internal_users" edge with a given conditions (other predicates).
func HasInternalUsersWith(preds ...predicate.InternalUser) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		step := newInternalUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatients applies the HasEdge predicate on the "patients" edge.
func HasPatients() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PatientsTable, PatientsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientsWith applies the HasEdge predicate on the "patients" edge with a given conditions (other predicates).
func HasPatientsWith(preds ...predicate.Patient) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		step := newPatientsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClinicCustomers applies the HasEdge predicate on the "clinic_customers" edge.
func HasClinicCustomers() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClinicCustomersTable, ClinicCustomersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicCustomersWith applies the HasEdge predicate on the "clinic_customers" edge with a given conditions (other predicates).
func HasClinicCustomersWith(preds ...predicate.CustomerSettingOnClinics) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		step := newClinicCustomersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Setting) predicate.Setting {
	return predicate.Setting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Setting) predicate.Setting {
	return predicate.Setting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Setting) predicate.Setting {
	return predicate.Setting(sql.NotPredicates(p))
}
