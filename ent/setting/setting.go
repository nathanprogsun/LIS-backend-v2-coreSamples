// Code generated by ent, DO NOT EDIT.

package setting

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the setting type in the database.
	Label = "setting"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "setting_id"
	// FieldSettingName holds the string denoting the setting_name field in the database.
	FieldSettingName = "setting_name"
	// FieldSettingGroup holds the string denoting the setting_group field in the database.
	FieldSettingGroup = "setting_group"
	// FieldSettingDescription holds the string denoting the setting_description field in the database.
	FieldSettingDescription = "setting_description"
	// FieldSettingValue holds the string denoting the setting_value field in the database.
	FieldSettingValue = "setting_value"
	// FieldSettingType holds the string denoting the setting_type field in the database.
	FieldSettingType = "setting_type"
	// FieldSettingValueUpdatedTime holds the string denoting the setting_value_updated_time field in the database.
	FieldSettingValueUpdatedTime = "setting_value_updated_time"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "isActive"
	// FieldApplyToAllGroupMember holds the string denoting the apply_to_all_group_member field in the database.
	FieldApplyToAllGroupMember = "apply_to_all_group_member"
	// FieldIsOfficial holds the string denoting the is_official field in the database.
	FieldIsOfficial = "is_official"
	// FieldSettingLevel holds the string denoting the setting_level field in the database.
	FieldSettingLevel = "setting_level"
	// FieldSettingLevelName holds the string denoting the setting_level_name field in the database.
	FieldSettingLevelName = "setting_level_name"
	// FieldUseGroupSetting holds the string denoting the use_group_setting field in the database.
	FieldUseGroupSetting = "use_group_setting"
	// EdgeClinics holds the string denoting the clinics edge name in mutations.
	EdgeClinics = "clinics"
	// EdgeInternalUsers holds the string denoting the internal_users edge name in mutations.
	EdgeInternalUsers = "internal_users"
	// EdgePatients holds the string denoting the patients edge name in mutations.
	EdgePatients = "patients"
	// EdgeClinicCustomers holds the string denoting the clinic_customers edge name in mutations.
	EdgeClinicCustomers = "clinic_customers"
	// ClinicFieldID holds the string denoting the ID field of the Clinic.
	ClinicFieldID = "clinic_id"
	// InternalUserFieldID holds the string denoting the ID field of the InternalUser.
	InternalUserFieldID = "internal_user_id"
	// PatientFieldID holds the string denoting the ID field of the Patient.
	PatientFieldID = "patient_id"
	// CustomerSettingOnClinicsFieldID holds the string denoting the ID field of the CustomerSettingOnClinics.
	CustomerSettingOnClinicsFieldID = "id"
	// Table holds the table name of the setting in the database.
	Table = "setting"
	// ClinicsTable is the table that holds the clinics relation/edge. The primary key declared below.
	ClinicsTable = "clinic_clinic_settings"
	// ClinicsInverseTable is the table name for the Clinic entity.
	// It exists in this package in order to avoid circular dependency with the "clinic" package.
	ClinicsInverseTable = "clinic"
	// InternalUsersTable is the table that holds the internal_users relation/edge. The primary key declared below.
	InternalUsersTable = "internal_user_internal_user_settings"
	// InternalUsersInverseTable is the table name for the InternalUser entity.
	// It exists in this package in order to avoid circular dependency with the "internaluser" package.
	InternalUsersInverseTable = "internal_user"
	// PatientsTable is the table that holds the patients relation/edge. The primary key declared below.
	PatientsTable = "patient_patient_settings"
	// PatientsInverseTable is the table name for the Patient entity.
	// It exists in this package in order to avoid circular dependency with the "patient" package.
	PatientsInverseTable = "patient"
	// ClinicCustomersTable is the table that holds the clinic_customers relation/edge.
	ClinicCustomersTable = "customer_setting_on_clinics"
	// ClinicCustomersInverseTable is the table name for the CustomerSettingOnClinics entity.
	// It exists in this package in order to avoid circular dependency with the "customersettingonclinics" package.
	ClinicCustomersInverseTable = "customer_setting_on_clinics"
	// ClinicCustomersColumn is the table column denoting the clinic_customers relation/edge.
	ClinicCustomersColumn = "setting_id"
)

// Columns holds all SQL columns for setting fields.
var Columns = []string{
	FieldID,
	FieldSettingName,
	FieldSettingGroup,
	FieldSettingDescription,
	FieldSettingValue,
	FieldSettingType,
	FieldSettingValueUpdatedTime,
	FieldIsActive,
	FieldApplyToAllGroupMember,
	FieldIsOfficial,
	FieldSettingLevel,
	FieldSettingLevelName,
	FieldUseGroupSetting,
}

var (
	// ClinicsPrimaryKey and ClinicsColumn2 are the table columns denoting the
	// primary key for the clinics relation (M2M).
	ClinicsPrimaryKey = []string{"clinic_id", "setting_id"}
	// InternalUsersPrimaryKey and InternalUsersColumn2 are the table columns denoting the
	// primary key for the internal_users relation (M2M).
	InternalUsersPrimaryKey = []string{"internal_user_id", "setting_id"}
	// PatientsPrimaryKey and PatientsColumn2 are the table columns denoting the
	// primary key for the patients relation (M2M).
	PatientsPrimaryKey = []string{"patient_id", "setting_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSettingGroup holds the default value on creation for the "setting_group" field.
	DefaultSettingGroup string
	// DefaultSettingValueUpdatedTime holds the default value on creation for the "setting_value_updated_time" field.
	DefaultSettingValueUpdatedTime func() time.Time
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultApplyToAllGroupMember holds the default value on creation for the "apply_to_all_group_member" field.
	DefaultApplyToAllGroupMember bool
	// DefaultIsOfficial holds the default value on creation for the "is_official" field.
	DefaultIsOfficial bool
	// DefaultSettingLevel holds the default value on creation for the "setting_level" field.
	DefaultSettingLevel int
	// DefaultSettingLevelName holds the default value on creation for the "setting_level_name" field.
	DefaultSettingLevelName string
	// DefaultUseGroupSetting holds the default value on creation for the "use_group_setting" field.
	DefaultUseGroupSetting bool
)

// OrderOption defines the ordering options for the Setting queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySettingName orders the results by the setting_name field.
func BySettingName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSettingName, opts...).ToFunc()
}

// BySettingGroup orders the results by the setting_group field.
func BySettingGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSettingGroup, opts...).ToFunc()
}

// BySettingDescription orders the results by the setting_description field.
func BySettingDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSettingDescription, opts...).ToFunc()
}

// BySettingValue orders the results by the setting_value field.
func BySettingValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSettingValue, opts...).ToFunc()
}

// BySettingType orders the results by the setting_type field.
func BySettingType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSettingType, opts...).ToFunc()
}

// BySettingValueUpdatedTime orders the results by the setting_value_updated_time field.
func BySettingValueUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSettingValueUpdatedTime, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByApplyToAllGroupMember orders the results by the apply_to_all_group_member field.
func ByApplyToAllGroupMember(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplyToAllGroupMember, opts...).ToFunc()
}

// ByIsOfficial orders the results by the is_official field.
func ByIsOfficial(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsOfficial, opts...).ToFunc()
}

// BySettingLevel orders the results by the setting_level field.
func BySettingLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSettingLevel, opts...).ToFunc()
}

// BySettingLevelName orders the results by the setting_level_name field.
func BySettingLevelName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSettingLevelName, opts...).ToFunc()
}

// ByUseGroupSetting orders the results by the use_group_setting field.
func ByUseGroupSetting(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseGroupSetting, opts...).ToFunc()
}

// ByClinicsCount orders the results by clinics count.
func ByClinicsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClinicsStep(), opts...)
	}
}

// ByClinics orders the results by clinics terms.
func ByClinics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInternalUsersCount orders the results by internal_users count.
func ByInternalUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInternalUsersStep(), opts...)
	}
}

// ByInternalUsers orders the results by internal_users terms.
func ByInternalUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInternalUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPatientsCount orders the results by patients count.
func ByPatientsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPatientsStep(), opts...)
	}
}

// ByPatients orders the results by patients terms.
func ByPatients(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPatientsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClinicCustomersCount orders the results by clinic_customers count.
func ByClinicCustomersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClinicCustomersStep(), opts...)
	}
}

// ByClinicCustomers orders the results by clinic_customers terms.
func ByClinicCustomers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicCustomersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newClinicsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicsInverseTable, ClinicFieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ClinicsTable, ClinicsPrimaryKey...),
	)
}
func newInternalUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InternalUsersInverseTable, InternalUserFieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, InternalUsersTable, InternalUsersPrimaryKey...),
	)
}
func newPatientsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PatientsInverseTable, PatientFieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PatientsTable, PatientsPrimaryKey...),
	)
}
func newClinicCustomersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicCustomersInverseTable, CustomerSettingOnClinicsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClinicCustomersTable, ClinicCustomersColumn),
	)
}
