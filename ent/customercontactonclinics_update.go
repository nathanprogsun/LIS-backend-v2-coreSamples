// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/clinic"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/customercontactonclinics"
	"coresamples/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerContactOnClinicsUpdate is the builder for updating CustomerContactOnClinics entities.
type CustomerContactOnClinicsUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerContactOnClinicsMutation
}

// Where appends a list predicates to the CustomerContactOnClinicsUpdate builder.
func (ccocu *CustomerContactOnClinicsUpdate) Where(ps ...predicate.CustomerContactOnClinics) *CustomerContactOnClinicsUpdate {
	ccocu.mutation.Where(ps...)
	return ccocu
}

// SetCustomerID sets the "customer_id" field.
func (ccocu *CustomerContactOnClinicsUpdate) SetCustomerID(i int) *CustomerContactOnClinicsUpdate {
	ccocu.mutation.SetCustomerID(i)
	return ccocu
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (ccocu *CustomerContactOnClinicsUpdate) SetNillableCustomerID(i *int) *CustomerContactOnClinicsUpdate {
	if i != nil {
		ccocu.SetCustomerID(*i)
	}
	return ccocu
}

// SetClinicID sets the "clinic_id" field.
func (ccocu *CustomerContactOnClinicsUpdate) SetClinicID(i int) *CustomerContactOnClinicsUpdate {
	ccocu.mutation.SetClinicID(i)
	return ccocu
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (ccocu *CustomerContactOnClinicsUpdate) SetNillableClinicID(i *int) *CustomerContactOnClinicsUpdate {
	if i != nil {
		ccocu.SetClinicID(*i)
	}
	return ccocu
}

// SetContactID sets the "contact_id" field.
func (ccocu *CustomerContactOnClinicsUpdate) SetContactID(i int) *CustomerContactOnClinicsUpdate {
	ccocu.mutation.SetContactID(i)
	return ccocu
}

// SetNillableContactID sets the "contact_id" field if the given value is not nil.
func (ccocu *CustomerContactOnClinicsUpdate) SetNillableContactID(i *int) *CustomerContactOnClinicsUpdate {
	if i != nil {
		ccocu.SetContactID(*i)
	}
	return ccocu
}

// SetContactType sets the "contact_type" field.
func (ccocu *CustomerContactOnClinicsUpdate) SetContactType(s string) *CustomerContactOnClinicsUpdate {
	ccocu.mutation.SetContactType(s)
	return ccocu
}

// SetNillableContactType sets the "contact_type" field if the given value is not nil.
func (ccocu *CustomerContactOnClinicsUpdate) SetNillableContactType(s *string) *CustomerContactOnClinicsUpdate {
	if s != nil {
		ccocu.SetContactType(*s)
	}
	return ccocu
}

// ClearContactType clears the value of the "contact_type" field.
func (ccocu *CustomerContactOnClinicsUpdate) ClearContactType() *CustomerContactOnClinicsUpdate {
	ccocu.mutation.ClearContactType()
	return ccocu
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (ccocu *CustomerContactOnClinicsUpdate) SetCustomer(c *Customer) *CustomerContactOnClinicsUpdate {
	return ccocu.SetCustomerID(c.ID)
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (ccocu *CustomerContactOnClinicsUpdate) SetClinic(c *Clinic) *CustomerContactOnClinicsUpdate {
	return ccocu.SetClinicID(c.ID)
}

// SetContact sets the "contact" edge to the Contact entity.
func (ccocu *CustomerContactOnClinicsUpdate) SetContact(c *Contact) *CustomerContactOnClinicsUpdate {
	return ccocu.SetContactID(c.ID)
}

// Mutation returns the CustomerContactOnClinicsMutation object of the builder.
func (ccocu *CustomerContactOnClinicsUpdate) Mutation() *CustomerContactOnClinicsMutation {
	return ccocu.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (ccocu *CustomerContactOnClinicsUpdate) ClearCustomer() *CustomerContactOnClinicsUpdate {
	ccocu.mutation.ClearCustomer()
	return ccocu
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (ccocu *CustomerContactOnClinicsUpdate) ClearClinic() *CustomerContactOnClinicsUpdate {
	ccocu.mutation.ClearClinic()
	return ccocu
}

// ClearContact clears the "contact" edge to the Contact entity.
func (ccocu *CustomerContactOnClinicsUpdate) ClearContact() *CustomerContactOnClinicsUpdate {
	ccocu.mutation.ClearContact()
	return ccocu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccocu *CustomerContactOnClinicsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ccocu.sqlSave, ccocu.mutation, ccocu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccocu *CustomerContactOnClinicsUpdate) SaveX(ctx context.Context) int {
	affected, err := ccocu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccocu *CustomerContactOnClinicsUpdate) Exec(ctx context.Context) error {
	_, err := ccocu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccocu *CustomerContactOnClinicsUpdate) ExecX(ctx context.Context) {
	if err := ccocu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccocu *CustomerContactOnClinicsUpdate) check() error {
	if _, ok := ccocu.mutation.CustomerID(); ccocu.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerContactOnClinics.customer"`)
	}
	if _, ok := ccocu.mutation.ClinicID(); ccocu.mutation.ClinicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerContactOnClinics.clinic"`)
	}
	if _, ok := ccocu.mutation.ContactID(); ccocu.mutation.ContactCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerContactOnClinics.contact"`)
	}
	return nil
}

func (ccocu *CustomerContactOnClinicsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ccocu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customercontactonclinics.Table, customercontactonclinics.Columns, sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt))
	if ps := ccocu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccocu.mutation.ContactType(); ok {
		_spec.SetField(customercontactonclinics.FieldContactType, field.TypeString, value)
	}
	if ccocu.mutation.ContactTypeCleared() {
		_spec.ClearField(customercontactonclinics.FieldContactType, field.TypeString)
	}
	if ccocu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customercontactonclinics.CustomerTable,
			Columns: []string{customercontactonclinics.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccocu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customercontactonclinics.CustomerTable,
			Columns: []string{customercontactonclinics.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccocu.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customercontactonclinics.ClinicTable,
			Columns: []string{customercontactonclinics.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccocu.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customercontactonclinics.ClinicTable,
			Columns: []string{customercontactonclinics.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccocu.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customercontactonclinics.ContactTable,
			Columns: []string{customercontactonclinics.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccocu.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customercontactonclinics.ContactTable,
			Columns: []string{customercontactonclinics.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccocu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customercontactonclinics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccocu.mutation.done = true
	return n, nil
}

// CustomerContactOnClinicsUpdateOne is the builder for updating a single CustomerContactOnClinics entity.
type CustomerContactOnClinicsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerContactOnClinicsMutation
}

// SetCustomerID sets the "customer_id" field.
func (ccocuo *CustomerContactOnClinicsUpdateOne) SetCustomerID(i int) *CustomerContactOnClinicsUpdateOne {
	ccocuo.mutation.SetCustomerID(i)
	return ccocuo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (ccocuo *CustomerContactOnClinicsUpdateOne) SetNillableCustomerID(i *int) *CustomerContactOnClinicsUpdateOne {
	if i != nil {
		ccocuo.SetCustomerID(*i)
	}
	return ccocuo
}

// SetClinicID sets the "clinic_id" field.
func (ccocuo *CustomerContactOnClinicsUpdateOne) SetClinicID(i int) *CustomerContactOnClinicsUpdateOne {
	ccocuo.mutation.SetClinicID(i)
	return ccocuo
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (ccocuo *CustomerContactOnClinicsUpdateOne) SetNillableClinicID(i *int) *CustomerContactOnClinicsUpdateOne {
	if i != nil {
		ccocuo.SetClinicID(*i)
	}
	return ccocuo
}

// SetContactID sets the "contact_id" field.
func (ccocuo *CustomerContactOnClinicsUpdateOne) SetContactID(i int) *CustomerContactOnClinicsUpdateOne {
	ccocuo.mutation.SetContactID(i)
	return ccocuo
}

// SetNillableContactID sets the "contact_id" field if the given value is not nil.
func (ccocuo *CustomerContactOnClinicsUpdateOne) SetNillableContactID(i *int) *CustomerContactOnClinicsUpdateOne {
	if i != nil {
		ccocuo.SetContactID(*i)
	}
	return ccocuo
}

// SetContactType sets the "contact_type" field.
func (ccocuo *CustomerContactOnClinicsUpdateOne) SetContactType(s string) *CustomerContactOnClinicsUpdateOne {
	ccocuo.mutation.SetContactType(s)
	return ccocuo
}

// SetNillableContactType sets the "contact_type" field if the given value is not nil.
func (ccocuo *CustomerContactOnClinicsUpdateOne) SetNillableContactType(s *string) *CustomerContactOnClinicsUpdateOne {
	if s != nil {
		ccocuo.SetContactType(*s)
	}
	return ccocuo
}

// ClearContactType clears the value of the "contact_type" field.
func (ccocuo *CustomerContactOnClinicsUpdateOne) ClearContactType() *CustomerContactOnClinicsUpdateOne {
	ccocuo.mutation.ClearContactType()
	return ccocuo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (ccocuo *CustomerContactOnClinicsUpdateOne) SetCustomer(c *Customer) *CustomerContactOnClinicsUpdateOne {
	return ccocuo.SetCustomerID(c.ID)
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (ccocuo *CustomerContactOnClinicsUpdateOne) SetClinic(c *Clinic) *CustomerContactOnClinicsUpdateOne {
	return ccocuo.SetClinicID(c.ID)
}

// SetContact sets the "contact" edge to the Contact entity.
func (ccocuo *CustomerContactOnClinicsUpdateOne) SetContact(c *Contact) *CustomerContactOnClinicsUpdateOne {
	return ccocuo.SetContactID(c.ID)
}

// Mutation returns the CustomerContactOnClinicsMutation object of the builder.
func (ccocuo *CustomerContactOnClinicsUpdateOne) Mutation() *CustomerContactOnClinicsMutation {
	return ccocuo.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (ccocuo *CustomerContactOnClinicsUpdateOne) ClearCustomer() *CustomerContactOnClinicsUpdateOne {
	ccocuo.mutation.ClearCustomer()
	return ccocuo
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (ccocuo *CustomerContactOnClinicsUpdateOne) ClearClinic() *CustomerContactOnClinicsUpdateOne {
	ccocuo.mutation.ClearClinic()
	return ccocuo
}

// ClearContact clears the "contact" edge to the Contact entity.
func (ccocuo *CustomerContactOnClinicsUpdateOne) ClearContact() *CustomerContactOnClinicsUpdateOne {
	ccocuo.mutation.ClearContact()
	return ccocuo
}

// Where appends a list predicates to the CustomerContactOnClinicsUpdate builder.
func (ccocuo *CustomerContactOnClinicsUpdateOne) Where(ps ...predicate.CustomerContactOnClinics) *CustomerContactOnClinicsUpdateOne {
	ccocuo.mutation.Where(ps...)
	return ccocuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccocuo *CustomerContactOnClinicsUpdateOne) Select(field string, fields ...string) *CustomerContactOnClinicsUpdateOne {
	ccocuo.fields = append([]string{field}, fields...)
	return ccocuo
}

// Save executes the query and returns the updated CustomerContactOnClinics entity.
func (ccocuo *CustomerContactOnClinicsUpdateOne) Save(ctx context.Context) (*CustomerContactOnClinics, error) {
	return withHooks(ctx, ccocuo.sqlSave, ccocuo.mutation, ccocuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccocuo *CustomerContactOnClinicsUpdateOne) SaveX(ctx context.Context) *CustomerContactOnClinics {
	node, err := ccocuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccocuo *CustomerContactOnClinicsUpdateOne) Exec(ctx context.Context) error {
	_, err := ccocuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccocuo *CustomerContactOnClinicsUpdateOne) ExecX(ctx context.Context) {
	if err := ccocuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccocuo *CustomerContactOnClinicsUpdateOne) check() error {
	if _, ok := ccocuo.mutation.CustomerID(); ccocuo.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerContactOnClinics.customer"`)
	}
	if _, ok := ccocuo.mutation.ClinicID(); ccocuo.mutation.ClinicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerContactOnClinics.clinic"`)
	}
	if _, ok := ccocuo.mutation.ContactID(); ccocuo.mutation.ContactCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerContactOnClinics.contact"`)
	}
	return nil
}

func (ccocuo *CustomerContactOnClinicsUpdateOne) sqlSave(ctx context.Context) (_node *CustomerContactOnClinics, err error) {
	if err := ccocuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customercontactonclinics.Table, customercontactonclinics.Columns, sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt))
	id, ok := ccocuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CustomerContactOnClinics.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccocuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customercontactonclinics.FieldID)
		for _, f := range fields {
			if !customercontactonclinics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customercontactonclinics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccocuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccocuo.mutation.ContactType(); ok {
		_spec.SetField(customercontactonclinics.FieldContactType, field.TypeString, value)
	}
	if ccocuo.mutation.ContactTypeCleared() {
		_spec.ClearField(customercontactonclinics.FieldContactType, field.TypeString)
	}
	if ccocuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customercontactonclinics.CustomerTable,
			Columns: []string{customercontactonclinics.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccocuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customercontactonclinics.CustomerTable,
			Columns: []string{customercontactonclinics.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccocuo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customercontactonclinics.ClinicTable,
			Columns: []string{customercontactonclinics.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccocuo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customercontactonclinics.ClinicTable,
			Columns: []string{customercontactonclinics.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccocuo.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customercontactonclinics.ContactTable,
			Columns: []string{customercontactonclinics.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccocuo.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customercontactonclinics.ContactTable,
			Columns: []string{customercontactonclinics.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CustomerContactOnClinics{config: ccocuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccocuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customercontactonclinics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccocuo.mutation.done = true
	return _node, nil
}
