// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/sample"
	"coresamples/ent/tube"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Tube is the model entity for the Tube schema.
type Tube struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TubeID holds the value of the "tube_id" field.
	TubeID string `json:"tube_id,omitempty"`
	// SampleID holds the value of the "sample_id" field.
	SampleID int `json:"sample_id,omitempty"`
	// TubeStorage holds the value of the "tube_storage" field.
	TubeStorage string `json:"tube_storage,omitempty"`
	// TubeReceiveTime holds the value of the "tube_receive_time" field.
	TubeReceiveTime time.Time `json:"tube_receive_time,omitempty"`
	// TubeTurnaroundTime holds the value of the "tube_turnaround_time" field.
	TubeTurnaroundTime int `json:"tube_turnaround_time,omitempty"`
	// TubeStability holds the value of the "tube_stability" field.
	TubeStability int `json:"tube_stability,omitempty"`
	// IsActive holds the value of the "isActive" field.
	IsActive bool `json:"isActive,omitempty"`
	// Issues holds the value of the "issues" field.
	Issues string `json:"issues,omitempty"`
	// TubeCollectionTime holds the value of the "tube_collection_time" field.
	TubeCollectionTime time.Time `json:"tube_collection_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TubeQuery when eager-loading is set.
	Edges        TubeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TubeEdges holds the relations/edges for other nodes in the graph.
type TubeEdges struct {
	// TubeType holds the value of the tube_type edge.
	TubeType []*TubeType `json:"tube_type,omitempty"`
	// Sample holds the value of the sample edge.
	Sample *Sample `json:"sample,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TubeTypeOrErr returns the TubeType value or an error if the edge
// was not loaded in eager-loading.
func (e TubeEdges) TubeTypeOrErr() ([]*TubeType, error) {
	if e.loadedTypes[0] {
		return e.TubeType, nil
	}
	return nil, &NotLoadedError{edge: "tube_type"}
}

// SampleOrErr returns the Sample value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TubeEdges) SampleOrErr() (*Sample, error) {
	if e.loadedTypes[1] {
		if e.Sample == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: sample.Label}
		}
		return e.Sample, nil
	}
	return nil, &NotLoadedError{edge: "sample"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tube) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tube.FieldIsActive:
			values[i] = new(sql.NullBool)
		case tube.FieldID, tube.FieldSampleID, tube.FieldTubeTurnaroundTime, tube.FieldTubeStability:
			values[i] = new(sql.NullInt64)
		case tube.FieldTubeID, tube.FieldTubeStorage, tube.FieldIssues:
			values[i] = new(sql.NullString)
		case tube.FieldTubeReceiveTime, tube.FieldTubeCollectionTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tube fields.
func (t *Tube) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tube.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tube.FieldTubeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tube_id", values[i])
			} else if value.Valid {
				t.TubeID = value.String
			}
		case tube.FieldSampleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sample_id", values[i])
			} else if value.Valid {
				t.SampleID = int(value.Int64)
			}
		case tube.FieldTubeStorage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tube_storage", values[i])
			} else if value.Valid {
				t.TubeStorage = value.String
			}
		case tube.FieldTubeReceiveTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field tube_receive_time", values[i])
			} else if value.Valid {
				t.TubeReceiveTime = value.Time
			}
		case tube.FieldTubeTurnaroundTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tube_turnaround_time", values[i])
			} else if value.Valid {
				t.TubeTurnaroundTime = int(value.Int64)
			}
		case tube.FieldTubeStability:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tube_stability", values[i])
			} else if value.Valid {
				t.TubeStability = int(value.Int64)
			}
		case tube.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isActive", values[i])
			} else if value.Valid {
				t.IsActive = value.Bool
			}
		case tube.FieldIssues:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issues", values[i])
			} else if value.Valid {
				t.Issues = value.String
			}
		case tube.FieldTubeCollectionTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field tube_collection_time", values[i])
			} else if value.Valid {
				t.TubeCollectionTime = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tube.
// This includes values selected through modifiers, order, etc.
func (t *Tube) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryTubeType queries the "tube_type" edge of the Tube entity.
func (t *Tube) QueryTubeType() *TubeTypeQuery {
	return NewTubeClient(t.config).QueryTubeType(t)
}

// QuerySample queries the "sample" edge of the Tube entity.
func (t *Tube) QuerySample() *SampleQuery {
	return NewTubeClient(t.config).QuerySample(t)
}

// Update returns a builder for updating this Tube.
// Note that you need to call Tube.Unwrap() before calling this method if this Tube
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tube) Update() *TubeUpdateOne {
	return NewTubeClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tube entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tube) Unwrap() *Tube {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tube is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tube) String() string {
	var builder strings.Builder
	builder.WriteString("Tube(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("tube_id=")
	builder.WriteString(t.TubeID)
	builder.WriteString(", ")
	builder.WriteString("sample_id=")
	builder.WriteString(fmt.Sprintf("%v", t.SampleID))
	builder.WriteString(", ")
	builder.WriteString("tube_storage=")
	builder.WriteString(t.TubeStorage)
	builder.WriteString(", ")
	builder.WriteString("tube_receive_time=")
	builder.WriteString(t.TubeReceiveTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tube_turnaround_time=")
	builder.WriteString(fmt.Sprintf("%v", t.TubeTurnaroundTime))
	builder.WriteString(", ")
	builder.WriteString("tube_stability=")
	builder.WriteString(fmt.Sprintf("%v", t.TubeStability))
	builder.WriteString(", ")
	builder.WriteString("isActive=")
	builder.WriteString(fmt.Sprintf("%v", t.IsActive))
	builder.WriteString(", ")
	builder.WriteString("issues=")
	builder.WriteString(t.Issues)
	builder.WriteString(", ")
	builder.WriteString("tube_collection_time=")
	builder.WriteString(t.TubeCollectionTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tubes is a parsable slice of Tube.
type Tubes []*Tube
