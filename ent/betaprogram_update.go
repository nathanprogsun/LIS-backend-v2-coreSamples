// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/betaprogram"
	"coresamples/ent/betaprogramparticipation"
	"coresamples/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BetaProgramUpdate is the builder for updating BetaProgram entities.
type BetaProgramUpdate struct {
	config
	hooks    []Hook
	mutation *BetaProgramMutation
}

// Where appends a list predicates to the BetaProgramUpdate builder.
func (bpu *BetaProgramUpdate) Where(ps ...predicate.BetaProgram) *BetaProgramUpdate {
	bpu.mutation.Where(ps...)
	return bpu
}

// SetBetaProgramName sets the "beta_program_name" field.
func (bpu *BetaProgramUpdate) SetBetaProgramName(s string) *BetaProgramUpdate {
	bpu.mutation.SetBetaProgramName(s)
	return bpu
}

// SetNillableBetaProgramName sets the "beta_program_name" field if the given value is not nil.
func (bpu *BetaProgramUpdate) SetNillableBetaProgramName(s *string) *BetaProgramUpdate {
	if s != nil {
		bpu.SetBetaProgramName(*s)
	}
	return bpu
}

// SetBetaProgramDescription sets the "beta_program_description" field.
func (bpu *BetaProgramUpdate) SetBetaProgramDescription(s string) *BetaProgramUpdate {
	bpu.mutation.SetBetaProgramDescription(s)
	return bpu
}

// SetNillableBetaProgramDescription sets the "beta_program_description" field if the given value is not nil.
func (bpu *BetaProgramUpdate) SetNillableBetaProgramDescription(s *string) *BetaProgramUpdate {
	if s != nil {
		bpu.SetBetaProgramDescription(*s)
	}
	return bpu
}

// SetIsActive sets the "is_active" field.
func (bpu *BetaProgramUpdate) SetIsActive(b bool) *BetaProgramUpdate {
	bpu.mutation.SetIsActive(b)
	return bpu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (bpu *BetaProgramUpdate) SetNillableIsActive(b *bool) *BetaProgramUpdate {
	if b != nil {
		bpu.SetIsActive(*b)
	}
	return bpu
}

// SetBetaProgramStartTime sets the "beta_program_start_time" field.
func (bpu *BetaProgramUpdate) SetBetaProgramStartTime(t time.Time) *BetaProgramUpdate {
	bpu.mutation.SetBetaProgramStartTime(t)
	return bpu
}

// SetNillableBetaProgramStartTime sets the "beta_program_start_time" field if the given value is not nil.
func (bpu *BetaProgramUpdate) SetNillableBetaProgramStartTime(t *time.Time) *BetaProgramUpdate {
	if t != nil {
		bpu.SetBetaProgramStartTime(*t)
	}
	return bpu
}

// SetBetaProgramEndTime sets the "beta_program_end_time" field.
func (bpu *BetaProgramUpdate) SetBetaProgramEndTime(t time.Time) *BetaProgramUpdate {
	bpu.mutation.SetBetaProgramEndTime(t)
	return bpu
}

// SetNillableBetaProgramEndTime sets the "beta_program_end_time" field if the given value is not nil.
func (bpu *BetaProgramUpdate) SetNillableBetaProgramEndTime(t *time.Time) *BetaProgramUpdate {
	if t != nil {
		bpu.SetBetaProgramEndTime(*t)
	}
	return bpu
}

// ClearBetaProgramEndTime clears the value of the "beta_program_end_time" field.
func (bpu *BetaProgramUpdate) ClearBetaProgramEndTime() *BetaProgramUpdate {
	bpu.mutation.ClearBetaProgramEndTime()
	return bpu
}

// SetUpdatedTime sets the "updated_time" field.
func (bpu *BetaProgramUpdate) SetUpdatedTime(t time.Time) *BetaProgramUpdate {
	bpu.mutation.SetUpdatedTime(t)
	return bpu
}

// SetBetaProgramAddedOn sets the "beta_program_added_on" field.
func (bpu *BetaProgramUpdate) SetBetaProgramAddedOn(t time.Time) *BetaProgramUpdate {
	bpu.mutation.SetBetaProgramAddedOn(t)
	return bpu
}

// SetNillableBetaProgramAddedOn sets the "beta_program_added_on" field if the given value is not nil.
func (bpu *BetaProgramUpdate) SetNillableBetaProgramAddedOn(t *time.Time) *BetaProgramUpdate {
	if t != nil {
		bpu.SetBetaProgramAddedOn(*t)
	}
	return bpu
}

// ClearBetaProgramAddedOn clears the value of the "beta_program_added_on" field.
func (bpu *BetaProgramUpdate) ClearBetaProgramAddedOn() *BetaProgramUpdate {
	bpu.mutation.ClearBetaProgramAddedOn()
	return bpu
}

// SetAllowSelfSignup sets the "allow_self_signup" field.
func (bpu *BetaProgramUpdate) SetAllowSelfSignup(b bool) *BetaProgramUpdate {
	bpu.mutation.SetAllowSelfSignup(b)
	return bpu
}

// SetNillableAllowSelfSignup sets the "allow_self_signup" field if the given value is not nil.
func (bpu *BetaProgramUpdate) SetNillableAllowSelfSignup(b *bool) *BetaProgramUpdate {
	if b != nil {
		bpu.SetAllowSelfSignup(*b)
	}
	return bpu
}

// ClearAllowSelfSignup clears the value of the "allow_self_signup" field.
func (bpu *BetaProgramUpdate) ClearAllowSelfSignup() *BetaProgramUpdate {
	bpu.mutation.ClearAllowSelfSignup()
	return bpu
}

// AddParticipationIDs adds the "participations" edge to the BetaProgramParticipation entity by IDs.
func (bpu *BetaProgramUpdate) AddParticipationIDs(ids ...int) *BetaProgramUpdate {
	bpu.mutation.AddParticipationIDs(ids...)
	return bpu
}

// AddParticipations adds the "participations" edges to the BetaProgramParticipation entity.
func (bpu *BetaProgramUpdate) AddParticipations(b ...*BetaProgramParticipation) *BetaProgramUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpu.AddParticipationIDs(ids...)
}

// Mutation returns the BetaProgramMutation object of the builder.
func (bpu *BetaProgramUpdate) Mutation() *BetaProgramMutation {
	return bpu.mutation
}

// ClearParticipations clears all "participations" edges to the BetaProgramParticipation entity.
func (bpu *BetaProgramUpdate) ClearParticipations() *BetaProgramUpdate {
	bpu.mutation.ClearParticipations()
	return bpu
}

// RemoveParticipationIDs removes the "participations" edge to BetaProgramParticipation entities by IDs.
func (bpu *BetaProgramUpdate) RemoveParticipationIDs(ids ...int) *BetaProgramUpdate {
	bpu.mutation.RemoveParticipationIDs(ids...)
	return bpu
}

// RemoveParticipations removes "participations" edges to BetaProgramParticipation entities.
func (bpu *BetaProgramUpdate) RemoveParticipations(b ...*BetaProgramParticipation) *BetaProgramUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpu.RemoveParticipationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bpu *BetaProgramUpdate) Save(ctx context.Context) (int, error) {
	bpu.defaults()
	return withHooks(ctx, bpu.sqlSave, bpu.mutation, bpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bpu *BetaProgramUpdate) SaveX(ctx context.Context) int {
	affected, err := bpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bpu *BetaProgramUpdate) Exec(ctx context.Context) error {
	_, err := bpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpu *BetaProgramUpdate) ExecX(ctx context.Context) {
	if err := bpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpu *BetaProgramUpdate) defaults() {
	if _, ok := bpu.mutation.UpdatedTime(); !ok {
		v := betaprogram.UpdateDefaultUpdatedTime()
		bpu.mutation.SetUpdatedTime(v)
	}
}

func (bpu *BetaProgramUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(betaprogram.Table, betaprogram.Columns, sqlgraph.NewFieldSpec(betaprogram.FieldID, field.TypeInt))
	if ps := bpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bpu.mutation.BetaProgramName(); ok {
		_spec.SetField(betaprogram.FieldBetaProgramName, field.TypeString, value)
	}
	if value, ok := bpu.mutation.BetaProgramDescription(); ok {
		_spec.SetField(betaprogram.FieldBetaProgramDescription, field.TypeString, value)
	}
	if value, ok := bpu.mutation.IsActive(); ok {
		_spec.SetField(betaprogram.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := bpu.mutation.BetaProgramStartTime(); ok {
		_spec.SetField(betaprogram.FieldBetaProgramStartTime, field.TypeTime, value)
	}
	if value, ok := bpu.mutation.BetaProgramEndTime(); ok {
		_spec.SetField(betaprogram.FieldBetaProgramEndTime, field.TypeTime, value)
	}
	if bpu.mutation.BetaProgramEndTimeCleared() {
		_spec.ClearField(betaprogram.FieldBetaProgramEndTime, field.TypeTime)
	}
	if value, ok := bpu.mutation.UpdatedTime(); ok {
		_spec.SetField(betaprogram.FieldUpdatedTime, field.TypeTime, value)
	}
	if value, ok := bpu.mutation.BetaProgramAddedOn(); ok {
		_spec.SetField(betaprogram.FieldBetaProgramAddedOn, field.TypeTime, value)
	}
	if bpu.mutation.BetaProgramAddedOnCleared() {
		_spec.ClearField(betaprogram.FieldBetaProgramAddedOn, field.TypeTime)
	}
	if value, ok := bpu.mutation.AllowSelfSignup(); ok {
		_spec.SetField(betaprogram.FieldAllowSelfSignup, field.TypeBool, value)
	}
	if bpu.mutation.AllowSelfSignupCleared() {
		_spec.ClearField(betaprogram.FieldAllowSelfSignup, field.TypeBool)
	}
	if bpu.mutation.ParticipationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   betaprogram.ParticipationsTable,
			Columns: []string{betaprogram.ParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.RemovedParticipationsIDs(); len(nodes) > 0 && !bpu.mutation.ParticipationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   betaprogram.ParticipationsTable,
			Columns: []string{betaprogram.ParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.ParticipationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   betaprogram.ParticipationsTable,
			Columns: []string{betaprogram.ParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{betaprogram.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bpu.mutation.done = true
	return n, nil
}

// BetaProgramUpdateOne is the builder for updating a single BetaProgram entity.
type BetaProgramUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BetaProgramMutation
}

// SetBetaProgramName sets the "beta_program_name" field.
func (bpuo *BetaProgramUpdateOne) SetBetaProgramName(s string) *BetaProgramUpdateOne {
	bpuo.mutation.SetBetaProgramName(s)
	return bpuo
}

// SetNillableBetaProgramName sets the "beta_program_name" field if the given value is not nil.
func (bpuo *BetaProgramUpdateOne) SetNillableBetaProgramName(s *string) *BetaProgramUpdateOne {
	if s != nil {
		bpuo.SetBetaProgramName(*s)
	}
	return bpuo
}

// SetBetaProgramDescription sets the "beta_program_description" field.
func (bpuo *BetaProgramUpdateOne) SetBetaProgramDescription(s string) *BetaProgramUpdateOne {
	bpuo.mutation.SetBetaProgramDescription(s)
	return bpuo
}

// SetNillableBetaProgramDescription sets the "beta_program_description" field if the given value is not nil.
func (bpuo *BetaProgramUpdateOne) SetNillableBetaProgramDescription(s *string) *BetaProgramUpdateOne {
	if s != nil {
		bpuo.SetBetaProgramDescription(*s)
	}
	return bpuo
}

// SetIsActive sets the "is_active" field.
func (bpuo *BetaProgramUpdateOne) SetIsActive(b bool) *BetaProgramUpdateOne {
	bpuo.mutation.SetIsActive(b)
	return bpuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (bpuo *BetaProgramUpdateOne) SetNillableIsActive(b *bool) *BetaProgramUpdateOne {
	if b != nil {
		bpuo.SetIsActive(*b)
	}
	return bpuo
}

// SetBetaProgramStartTime sets the "beta_program_start_time" field.
func (bpuo *BetaProgramUpdateOne) SetBetaProgramStartTime(t time.Time) *BetaProgramUpdateOne {
	bpuo.mutation.SetBetaProgramStartTime(t)
	return bpuo
}

// SetNillableBetaProgramStartTime sets the "beta_program_start_time" field if the given value is not nil.
func (bpuo *BetaProgramUpdateOne) SetNillableBetaProgramStartTime(t *time.Time) *BetaProgramUpdateOne {
	if t != nil {
		bpuo.SetBetaProgramStartTime(*t)
	}
	return bpuo
}

// SetBetaProgramEndTime sets the "beta_program_end_time" field.
func (bpuo *BetaProgramUpdateOne) SetBetaProgramEndTime(t time.Time) *BetaProgramUpdateOne {
	bpuo.mutation.SetBetaProgramEndTime(t)
	return bpuo
}

// SetNillableBetaProgramEndTime sets the "beta_program_end_time" field if the given value is not nil.
func (bpuo *BetaProgramUpdateOne) SetNillableBetaProgramEndTime(t *time.Time) *BetaProgramUpdateOne {
	if t != nil {
		bpuo.SetBetaProgramEndTime(*t)
	}
	return bpuo
}

// ClearBetaProgramEndTime clears the value of the "beta_program_end_time" field.
func (bpuo *BetaProgramUpdateOne) ClearBetaProgramEndTime() *BetaProgramUpdateOne {
	bpuo.mutation.ClearBetaProgramEndTime()
	return bpuo
}

// SetUpdatedTime sets the "updated_time" field.
func (bpuo *BetaProgramUpdateOne) SetUpdatedTime(t time.Time) *BetaProgramUpdateOne {
	bpuo.mutation.SetUpdatedTime(t)
	return bpuo
}

// SetBetaProgramAddedOn sets the "beta_program_added_on" field.
func (bpuo *BetaProgramUpdateOne) SetBetaProgramAddedOn(t time.Time) *BetaProgramUpdateOne {
	bpuo.mutation.SetBetaProgramAddedOn(t)
	return bpuo
}

// SetNillableBetaProgramAddedOn sets the "beta_program_added_on" field if the given value is not nil.
func (bpuo *BetaProgramUpdateOne) SetNillableBetaProgramAddedOn(t *time.Time) *BetaProgramUpdateOne {
	if t != nil {
		bpuo.SetBetaProgramAddedOn(*t)
	}
	return bpuo
}

// ClearBetaProgramAddedOn clears the value of the "beta_program_added_on" field.
func (bpuo *BetaProgramUpdateOne) ClearBetaProgramAddedOn() *BetaProgramUpdateOne {
	bpuo.mutation.ClearBetaProgramAddedOn()
	return bpuo
}

// SetAllowSelfSignup sets the "allow_self_signup" field.
func (bpuo *BetaProgramUpdateOne) SetAllowSelfSignup(b bool) *BetaProgramUpdateOne {
	bpuo.mutation.SetAllowSelfSignup(b)
	return bpuo
}

// SetNillableAllowSelfSignup sets the "allow_self_signup" field if the given value is not nil.
func (bpuo *BetaProgramUpdateOne) SetNillableAllowSelfSignup(b *bool) *BetaProgramUpdateOne {
	if b != nil {
		bpuo.SetAllowSelfSignup(*b)
	}
	return bpuo
}

// ClearAllowSelfSignup clears the value of the "allow_self_signup" field.
func (bpuo *BetaProgramUpdateOne) ClearAllowSelfSignup() *BetaProgramUpdateOne {
	bpuo.mutation.ClearAllowSelfSignup()
	return bpuo
}

// AddParticipationIDs adds the "participations" edge to the BetaProgramParticipation entity by IDs.
func (bpuo *BetaProgramUpdateOne) AddParticipationIDs(ids ...int) *BetaProgramUpdateOne {
	bpuo.mutation.AddParticipationIDs(ids...)
	return bpuo
}

// AddParticipations adds the "participations" edges to the BetaProgramParticipation entity.
func (bpuo *BetaProgramUpdateOne) AddParticipations(b ...*BetaProgramParticipation) *BetaProgramUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpuo.AddParticipationIDs(ids...)
}

// Mutation returns the BetaProgramMutation object of the builder.
func (bpuo *BetaProgramUpdateOne) Mutation() *BetaProgramMutation {
	return bpuo.mutation
}

// ClearParticipations clears all "participations" edges to the BetaProgramParticipation entity.
func (bpuo *BetaProgramUpdateOne) ClearParticipations() *BetaProgramUpdateOne {
	bpuo.mutation.ClearParticipations()
	return bpuo
}

// RemoveParticipationIDs removes the "participations" edge to BetaProgramParticipation entities by IDs.
func (bpuo *BetaProgramUpdateOne) RemoveParticipationIDs(ids ...int) *BetaProgramUpdateOne {
	bpuo.mutation.RemoveParticipationIDs(ids...)
	return bpuo
}

// RemoveParticipations removes "participations" edges to BetaProgramParticipation entities.
func (bpuo *BetaProgramUpdateOne) RemoveParticipations(b ...*BetaProgramParticipation) *BetaProgramUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpuo.RemoveParticipationIDs(ids...)
}

// Where appends a list predicates to the BetaProgramUpdate builder.
func (bpuo *BetaProgramUpdateOne) Where(ps ...predicate.BetaProgram) *BetaProgramUpdateOne {
	bpuo.mutation.Where(ps...)
	return bpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bpuo *BetaProgramUpdateOne) Select(field string, fields ...string) *BetaProgramUpdateOne {
	bpuo.fields = append([]string{field}, fields...)
	return bpuo
}

// Save executes the query and returns the updated BetaProgram entity.
func (bpuo *BetaProgramUpdateOne) Save(ctx context.Context) (*BetaProgram, error) {
	bpuo.defaults()
	return withHooks(ctx, bpuo.sqlSave, bpuo.mutation, bpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bpuo *BetaProgramUpdateOne) SaveX(ctx context.Context) *BetaProgram {
	node, err := bpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bpuo *BetaProgramUpdateOne) Exec(ctx context.Context) error {
	_, err := bpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpuo *BetaProgramUpdateOne) ExecX(ctx context.Context) {
	if err := bpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpuo *BetaProgramUpdateOne) defaults() {
	if _, ok := bpuo.mutation.UpdatedTime(); !ok {
		v := betaprogram.UpdateDefaultUpdatedTime()
		bpuo.mutation.SetUpdatedTime(v)
	}
}

func (bpuo *BetaProgramUpdateOne) sqlSave(ctx context.Context) (_node *BetaProgram, err error) {
	_spec := sqlgraph.NewUpdateSpec(betaprogram.Table, betaprogram.Columns, sqlgraph.NewFieldSpec(betaprogram.FieldID, field.TypeInt))
	id, ok := bpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BetaProgram.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, betaprogram.FieldID)
		for _, f := range fields {
			if !betaprogram.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != betaprogram.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bpuo.mutation.BetaProgramName(); ok {
		_spec.SetField(betaprogram.FieldBetaProgramName, field.TypeString, value)
	}
	if value, ok := bpuo.mutation.BetaProgramDescription(); ok {
		_spec.SetField(betaprogram.FieldBetaProgramDescription, field.TypeString, value)
	}
	if value, ok := bpuo.mutation.IsActive(); ok {
		_spec.SetField(betaprogram.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := bpuo.mutation.BetaProgramStartTime(); ok {
		_spec.SetField(betaprogram.FieldBetaProgramStartTime, field.TypeTime, value)
	}
	if value, ok := bpuo.mutation.BetaProgramEndTime(); ok {
		_spec.SetField(betaprogram.FieldBetaProgramEndTime, field.TypeTime, value)
	}
	if bpuo.mutation.BetaProgramEndTimeCleared() {
		_spec.ClearField(betaprogram.FieldBetaProgramEndTime, field.TypeTime)
	}
	if value, ok := bpuo.mutation.UpdatedTime(); ok {
		_spec.SetField(betaprogram.FieldUpdatedTime, field.TypeTime, value)
	}
	if value, ok := bpuo.mutation.BetaProgramAddedOn(); ok {
		_spec.SetField(betaprogram.FieldBetaProgramAddedOn, field.TypeTime, value)
	}
	if bpuo.mutation.BetaProgramAddedOnCleared() {
		_spec.ClearField(betaprogram.FieldBetaProgramAddedOn, field.TypeTime)
	}
	if value, ok := bpuo.mutation.AllowSelfSignup(); ok {
		_spec.SetField(betaprogram.FieldAllowSelfSignup, field.TypeBool, value)
	}
	if bpuo.mutation.AllowSelfSignupCleared() {
		_spec.ClearField(betaprogram.FieldAllowSelfSignup, field.TypeBool)
	}
	if bpuo.mutation.ParticipationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   betaprogram.ParticipationsTable,
			Columns: []string{betaprogram.ParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.RemovedParticipationsIDs(); len(nodes) > 0 && !bpuo.mutation.ParticipationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   betaprogram.ParticipationsTable,
			Columns: []string{betaprogram.ParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.ParticipationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   betaprogram.ParticipationsTable,
			Columns: []string{betaprogram.ParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BetaProgram{config: bpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{betaprogram.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bpuo.mutation.done = true
	return _node, nil
}
