// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/rbacresources"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RBACResourcesUpdate is the builder for updating RBACResources entities.
type RBACResourcesUpdate struct {
	config
	hooks    []Hook
	mutation *RBACResourcesMutation
}

// Where appends a list predicates to the RBACResourcesUpdate builder.
func (rru *RBACResourcesUpdate) Where(ps ...predicate.RBACResources) *RBACResourcesUpdate {
	rru.mutation.Where(ps...)
	return rru
}

// SetName sets the "name" field.
func (rru *RBACResourcesUpdate) SetName(s string) *RBACResourcesUpdate {
	rru.mutation.SetName(s)
	return rru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rru *RBACResourcesUpdate) SetNillableName(s *string) *RBACResourcesUpdate {
	if s != nil {
		rru.SetName(*s)
	}
	return rru
}

// SetDescription sets the "description" field.
func (rru *RBACResourcesUpdate) SetDescription(s string) *RBACResourcesUpdate {
	rru.mutation.SetDescription(s)
	return rru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rru *RBACResourcesUpdate) SetNillableDescription(s *string) *RBACResourcesUpdate {
	if s != nil {
		rru.SetDescription(*s)
	}
	return rru
}

// Mutation returns the RBACResourcesMutation object of the builder.
func (rru *RBACResourcesUpdate) Mutation() *RBACResourcesMutation {
	return rru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rru *RBACResourcesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rru.sqlSave, rru.mutation, rru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rru *RBACResourcesUpdate) SaveX(ctx context.Context) int {
	affected, err := rru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rru *RBACResourcesUpdate) Exec(ctx context.Context) error {
	_, err := rru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rru *RBACResourcesUpdate) ExecX(ctx context.Context) {
	if err := rru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rru *RBACResourcesUpdate) check() error {
	if v, ok := rru.mutation.Name(); ok {
		if err := rbacresources.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RBACResources.name": %w`, err)}
		}
	}
	return nil
}

func (rru *RBACResourcesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rbacresources.Table, rbacresources.Columns, sqlgraph.NewFieldSpec(rbacresources.FieldID, field.TypeInt))
	if ps := rru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rru.mutation.Name(); ok {
		_spec.SetField(rbacresources.FieldName, field.TypeString, value)
	}
	if value, ok := rru.mutation.Description(); ok {
		_spec.SetField(rbacresources.FieldDescription, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rbacresources.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rru.mutation.done = true
	return n, nil
}

// RBACResourcesUpdateOne is the builder for updating a single RBACResources entity.
type RBACResourcesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RBACResourcesMutation
}

// SetName sets the "name" field.
func (rruo *RBACResourcesUpdateOne) SetName(s string) *RBACResourcesUpdateOne {
	rruo.mutation.SetName(s)
	return rruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rruo *RBACResourcesUpdateOne) SetNillableName(s *string) *RBACResourcesUpdateOne {
	if s != nil {
		rruo.SetName(*s)
	}
	return rruo
}

// SetDescription sets the "description" field.
func (rruo *RBACResourcesUpdateOne) SetDescription(s string) *RBACResourcesUpdateOne {
	rruo.mutation.SetDescription(s)
	return rruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rruo *RBACResourcesUpdateOne) SetNillableDescription(s *string) *RBACResourcesUpdateOne {
	if s != nil {
		rruo.SetDescription(*s)
	}
	return rruo
}

// Mutation returns the RBACResourcesMutation object of the builder.
func (rruo *RBACResourcesUpdateOne) Mutation() *RBACResourcesMutation {
	return rruo.mutation
}

// Where appends a list predicates to the RBACResourcesUpdate builder.
func (rruo *RBACResourcesUpdateOne) Where(ps ...predicate.RBACResources) *RBACResourcesUpdateOne {
	rruo.mutation.Where(ps...)
	return rruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rruo *RBACResourcesUpdateOne) Select(field string, fields ...string) *RBACResourcesUpdateOne {
	rruo.fields = append([]string{field}, fields...)
	return rruo
}

// Save executes the query and returns the updated RBACResources entity.
func (rruo *RBACResourcesUpdateOne) Save(ctx context.Context) (*RBACResources, error) {
	return withHooks(ctx, rruo.sqlSave, rruo.mutation, rruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rruo *RBACResourcesUpdateOne) SaveX(ctx context.Context) *RBACResources {
	node, err := rruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rruo *RBACResourcesUpdateOne) Exec(ctx context.Context) error {
	_, err := rruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rruo *RBACResourcesUpdateOne) ExecX(ctx context.Context) {
	if err := rruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rruo *RBACResourcesUpdateOne) check() error {
	if v, ok := rruo.mutation.Name(); ok {
		if err := rbacresources.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RBACResources.name": %w`, err)}
		}
	}
	return nil
}

func (rruo *RBACResourcesUpdateOne) sqlSave(ctx context.Context) (_node *RBACResources, err error) {
	if err := rruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rbacresources.Table, rbacresources.Columns, sqlgraph.NewFieldSpec(rbacresources.FieldID, field.TypeInt))
	id, ok := rruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RBACResources.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rbacresources.FieldID)
		for _, f := range fields {
			if !rbacresources.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rbacresources.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rruo.mutation.Name(); ok {
		_spec.SetField(rbacresources.FieldName, field.TypeString, value)
	}
	if value, ok := rruo.mutation.Description(); ok {
		_spec.SetField(rbacresources.FieldDescription, field.TypeString, value)
	}
	_node = &RBACResources{config: rruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rbacresources.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rruo.mutation.done = true
	return _node, nil
}
