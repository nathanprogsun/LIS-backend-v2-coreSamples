// Code generated by ent, DO NOT EDIT.

package patient

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the patient type in the database.
	Label = "patient"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "patient_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldPatientType holds the string denoting the patient_type field in the database.
	FieldPatientType = "patient_type"
	// FieldOriginalPatientID holds the string denoting the original_patient_id field in the database.
	FieldOriginalPatientID = "original_patient_id"
	// FieldPatientGender holds the string denoting the patient_gender field in the database.
	FieldPatientGender = "patient_gender"
	// FieldPatientFirstName holds the string denoting the patient_first_name field in the database.
	FieldPatientFirstName = "patient_first_name"
	// FieldPatientLastName holds the string denoting the patient_last_name field in the database.
	FieldPatientLastName = "patient_last_name"
	// FieldPatientMiddleName holds the string denoting the patient_middle_name field in the database.
	FieldPatientMiddleName = "patient_middle_name"
	// FieldPatientMedicalRecordNumber holds the string denoting the patient_medical_record_number field in the database.
	FieldPatientMedicalRecordNumber = "patient_medical_record_number"
	// FieldPatientLegalFirstname holds the string denoting the patient_legal_firstname field in the database.
	FieldPatientLegalFirstname = "patient_legal_firstname"
	// FieldPatientLegalLastname holds the string denoting the patient_legal_lastname field in the database.
	FieldPatientLegalLastname = "patient_legal_lastname"
	// FieldPatientHonorific holds the string denoting the patient_honorific field in the database.
	FieldPatientHonorific = "patient_honorific"
	// FieldPatientSuffix holds the string denoting the patient_suffix field in the database.
	FieldPatientSuffix = "patient_suffix"
	// FieldPatientMarital holds the string denoting the patient_marital field in the database.
	FieldPatientMarital = "patient_marital"
	// FieldPatientEthnicity holds the string denoting the patient_ethnicity field in the database.
	FieldPatientEthnicity = "patient_ethnicity"
	// FieldPatientBirthdate holds the string denoting the patient_birthdate field in the database.
	FieldPatientBirthdate = "patient_birthdate"
	// FieldPatientSsn holds the string denoting the patient_ssn field in the database.
	FieldPatientSsn = "patient_ssn"
	// FieldPatientHeight holds the string denoting the patient_height field in the database.
	FieldPatientHeight = "patient_height"
	// FieldPatientWeight holds the string denoting the patient_weight field in the database.
	FieldPatientWeight = "patient_weight"
	// FieldOfficeallyID holds the string denoting the officeally_id field in the database.
	FieldOfficeallyID = "officeally_id"
	// FieldPatientNyWaiveFormIssueStatus holds the string denoting the patient_ny_waive_form_issue_status field in the database.
	FieldPatientNyWaiveFormIssueStatus = "patient_ny_waive_form_issue_status"
	// FieldPatientCreateTime holds the string denoting the patient_create_time field in the database.
	FieldPatientCreateTime = "patient_create_time"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldIsActive holds the string denoting the isactive field in the database.
	FieldIsActive = "isActive"
	// FieldPatientFlagged holds the string denoting the patient_flagged field in the database.
	FieldPatientFlagged = "patient_flagged"
	// FieldPatientServiceDate holds the string denoting the patient_service_date field in the database.
	FieldPatientServiceDate = "patient_service_date"
	// FieldPatientDescription holds the string denoting the patient_description field in the database.
	FieldPatientDescription = "patient_description"
	// FieldPatientLanguage holds the string denoting the patient_language field in the database.
	FieldPatientLanguage = "patient_language"
	// EdgeCurrentCustomer holds the string denoting the current_customer edge name in mutations.
	EdgeCurrentCustomer = "current_customer"
	// EdgePatientCustomers holds the string denoting the patient_customers edge name in mutations.
	EdgePatientCustomers = "patient_customers"
	// EdgeSamples holds the string denoting the samples edge name in mutations.
	EdgeSamples = "samples"
	// EdgePatientContacts holds the string denoting the patient_contacts edge name in mutations.
	EdgePatientContacts = "patient_contacts"
	// EdgePatientAddresses holds the string denoting the patient_addresses edge name in mutations.
	EdgePatientAddresses = "patient_addresses"
	// EdgePatientClinics holds the string denoting the patient_clinics edge name in mutations.
	EdgePatientClinics = "patient_clinics"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgePatientWeightHeightHistory holds the string denoting the patient_weight_height_history edge name in mutations.
	EdgePatientWeightHeightHistory = "patient_weight_height_history"
	// EdgePatientSettings holds the string denoting the patient_settings edge name in mutations.
	EdgePatientSettings = "patient_settings"
	// CustomerFieldID holds the string denoting the ID field of the Customer.
	CustomerFieldID = "customer_id"
	// SampleFieldID holds the string denoting the ID field of the Sample.
	SampleFieldID = "sample_id"
	// ContactFieldID holds the string denoting the ID field of the Contact.
	ContactFieldID = "contact_id"
	// AddressFieldID holds the string denoting the ID field of the Address.
	AddressFieldID = "address_id"
	// ClinicFieldID holds the string denoting the ID field of the Clinic.
	ClinicFieldID = "clinic_id"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "user_id"
	// PatientWeightHeightFieldID holds the string denoting the ID field of the PatientWeightHeight.
	PatientWeightHeightFieldID = "id"
	// SettingFieldID holds the string denoting the ID field of the Setting.
	SettingFieldID = "setting_id"
	// Table holds the table name of the patient in the database.
	Table = "patient"
	// CurrentCustomerTable is the table that holds the current_customer relation/edge.
	CurrentCustomerTable = "patient"
	// CurrentCustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CurrentCustomerInverseTable = "customer"
	// CurrentCustomerColumn is the table column denoting the current_customer relation/edge.
	CurrentCustomerColumn = "customer_id"
	// PatientCustomersTable is the table that holds the patient_customers relation/edge. The primary key declared below.
	PatientCustomersTable = "customer_patients"
	// PatientCustomersInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	PatientCustomersInverseTable = "customer"
	// SamplesTable is the table that holds the samples relation/edge.
	SamplesTable = "sample"
	// SamplesInverseTable is the table name for the Sample entity.
	// It exists in this package in order to avoid circular dependency with the "sample" package.
	SamplesInverseTable = "sample"
	// SamplesColumn is the table column denoting the samples relation/edge.
	SamplesColumn = "patient_id"
	// PatientContactsTable is the table that holds the patient_contacts relation/edge.
	PatientContactsTable = "contact"
	// PatientContactsInverseTable is the table name for the Contact entity.
	// It exists in this package in order to avoid circular dependency with the "contact" package.
	PatientContactsInverseTable = "contact"
	// PatientContactsColumn is the table column denoting the patient_contacts relation/edge.
	PatientContactsColumn = "patient_id"
	// PatientAddressesTable is the table that holds the patient_addresses relation/edge.
	PatientAddressesTable = "address"
	// PatientAddressesInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	PatientAddressesInverseTable = "address"
	// PatientAddressesColumn is the table column denoting the patient_addresses relation/edge.
	PatientAddressesColumn = "patient_id"
	// PatientClinicsTable is the table that holds the patient_clinics relation/edge. The primary key declared below.
	PatientClinicsTable = "clinic_clinic_patients"
	// PatientClinicsInverseTable is the table name for the Clinic entity.
	// It exists in this package in order to avoid circular dependency with the "clinic" package.
	PatientClinicsInverseTable = "clinic"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "patient"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "user"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// PatientWeightHeightHistoryTable is the table that holds the patient_weight_height_history relation/edge.
	PatientWeightHeightHistoryTable = "patient_weight_height"
	// PatientWeightHeightHistoryInverseTable is the table name for the PatientWeightHeight entity.
	// It exists in this package in order to avoid circular dependency with the "patientweightheight" package.
	PatientWeightHeightHistoryInverseTable = "patient_weight_height"
	// PatientWeightHeightHistoryColumn is the table column denoting the patient_weight_height_history relation/edge.
	PatientWeightHeightHistoryColumn = "patient_id"
	// PatientSettingsTable is the table that holds the patient_settings relation/edge. The primary key declared below.
	PatientSettingsTable = "patient_patient_settings"
	// PatientSettingsInverseTable is the table name for the Setting entity.
	// It exists in this package in order to avoid circular dependency with the "setting" package.
	PatientSettingsInverseTable = "setting"
)

// Columns holds all SQL columns for patient fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldPatientType,
	FieldOriginalPatientID,
	FieldPatientGender,
	FieldPatientFirstName,
	FieldPatientLastName,
	FieldPatientMiddleName,
	FieldPatientMedicalRecordNumber,
	FieldPatientLegalFirstname,
	FieldPatientLegalLastname,
	FieldPatientHonorific,
	FieldPatientSuffix,
	FieldPatientMarital,
	FieldPatientEthnicity,
	FieldPatientBirthdate,
	FieldPatientSsn,
	FieldPatientHeight,
	FieldPatientWeight,
	FieldOfficeallyID,
	FieldPatientNyWaiveFormIssueStatus,
	FieldPatientCreateTime,
	FieldCustomerID,
	FieldIsActive,
	FieldPatientFlagged,
	FieldPatientServiceDate,
	FieldPatientDescription,
	FieldPatientLanguage,
}

var (
	// PatientCustomersPrimaryKey and PatientCustomersColumn2 are the table columns denoting the
	// primary key for the patient_customers relation (M2M).
	PatientCustomersPrimaryKey = []string{"customer_id", "patient_id"}
	// PatientClinicsPrimaryKey and PatientClinicsColumn2 are the table columns denoting the
	// primary key for the patient_clinics relation (M2M).
	PatientClinicsPrimaryKey = []string{"clinic_id", "patient_id"}
	// PatientSettingsPrimaryKey and PatientSettingsColumn2 are the table columns denoting the
	// primary key for the patient_settings relation (M2M).
	PatientSettingsPrimaryKey = []string{"patient_id", "setting_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPatientType holds the default value on creation for the "patient_type" field.
	DefaultPatientType string
	// DefaultPatientNyWaiveFormIssueStatus holds the default value on creation for the "patient_ny_waive_form_issue_status" field.
	DefaultPatientNyWaiveFormIssueStatus string
	// DefaultPatientCreateTime holds the default value on creation for the "patient_create_time" field.
	DefaultPatientCreateTime func() time.Time
	// DefaultIsActive holds the default value on creation for the "isActive" field.
	DefaultIsActive bool
	// DefaultPatientFlagged holds the default value on creation for the "patient_flagged" field.
	DefaultPatientFlagged bool
	// DefaultPatientLanguage holds the default value on creation for the "patient_language" field.
	DefaultPatientLanguage string
)

// OrderOption defines the ordering options for the Patient queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByPatientType orders the results by the patient_type field.
func ByPatientType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientType, opts...).ToFunc()
}

// ByOriginalPatientID orders the results by the original_patient_id field.
func ByOriginalPatientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginalPatientID, opts...).ToFunc()
}

// ByPatientGender orders the results by the patient_gender field.
func ByPatientGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientGender, opts...).ToFunc()
}

// ByPatientFirstName orders the results by the patient_first_name field.
func ByPatientFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientFirstName, opts...).ToFunc()
}

// ByPatientLastName orders the results by the patient_last_name field.
func ByPatientLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientLastName, opts...).ToFunc()
}

// ByPatientMiddleName orders the results by the patient_middle_name field.
func ByPatientMiddleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientMiddleName, opts...).ToFunc()
}

// ByPatientMedicalRecordNumber orders the results by the patient_medical_record_number field.
func ByPatientMedicalRecordNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientMedicalRecordNumber, opts...).ToFunc()
}

// ByPatientLegalFirstname orders the results by the patient_legal_firstname field.
func ByPatientLegalFirstname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientLegalFirstname, opts...).ToFunc()
}

// ByPatientLegalLastname orders the results by the patient_legal_lastname field.
func ByPatientLegalLastname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientLegalLastname, opts...).ToFunc()
}

// ByPatientHonorific orders the results by the patient_honorific field.
func ByPatientHonorific(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientHonorific, opts...).ToFunc()
}

// ByPatientSuffix orders the results by the patient_suffix field.
func ByPatientSuffix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientSuffix, opts...).ToFunc()
}

// ByPatientMarital orders the results by the patient_marital field.
func ByPatientMarital(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientMarital, opts...).ToFunc()
}

// ByPatientEthnicity orders the results by the patient_ethnicity field.
func ByPatientEthnicity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientEthnicity, opts...).ToFunc()
}

// ByPatientBirthdate orders the results by the patient_birthdate field.
func ByPatientBirthdate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientBirthdate, opts...).ToFunc()
}

// ByPatientSsn orders the results by the patient_ssn field.
func ByPatientSsn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientSsn, opts...).ToFunc()
}

// ByPatientHeight orders the results by the patient_height field.
func ByPatientHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientHeight, opts...).ToFunc()
}

// ByPatientWeight orders the results by the patient_weight field.
func ByPatientWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientWeight, opts...).ToFunc()
}

// ByOfficeallyID orders the results by the officeally_id field.
func ByOfficeallyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOfficeallyID, opts...).ToFunc()
}

// ByPatientNyWaiveFormIssueStatus orders the results by the patient_ny_waive_form_issue_status field.
func ByPatientNyWaiveFormIssueStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientNyWaiveFormIssueStatus, opts...).ToFunc()
}

// ByPatientCreateTime orders the results by the patient_create_time field.
func ByPatientCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientCreateTime, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByIsActive orders the results by the isActive field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByPatientFlagged orders the results by the patient_flagged field.
func ByPatientFlagged(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientFlagged, opts...).ToFunc()
}

// ByPatientServiceDate orders the results by the patient_service_date field.
func ByPatientServiceDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientServiceDate, opts...).ToFunc()
}

// ByPatientDescription orders the results by the patient_description field.
func ByPatientDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientDescription, opts...).ToFunc()
}

// ByPatientLanguage orders the results by the patient_language field.
func ByPatientLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientLanguage, opts...).ToFunc()
}

// ByCurrentCustomerField orders the results by current_customer field.
func ByCurrentCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrentCustomerStep(), sql.OrderByField(field, opts...))
	}
}

// ByPatientCustomersCount orders the results by patient_customers count.
func ByPatientCustomersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPatientCustomersStep(), opts...)
	}
}

// ByPatientCustomers orders the results by patient_customers terms.
func ByPatientCustomers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPatientCustomersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySamplesCount orders the results by samples count.
func BySamplesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSamplesStep(), opts...)
	}
}

// BySamples orders the results by samples terms.
func BySamples(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSamplesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPatientContactsCount orders the results by patient_contacts count.
func ByPatientContactsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPatientContactsStep(), opts...)
	}
}

// ByPatientContacts orders the results by patient_contacts terms.
func ByPatientContacts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPatientContactsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPatientAddressesCount orders the results by patient_addresses count.
func ByPatientAddressesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPatientAddressesStep(), opts...)
	}
}

// ByPatientAddresses orders the results by patient_addresses terms.
func ByPatientAddresses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPatientAddressesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPatientClinicsCount orders the results by patient_clinics count.
func ByPatientClinicsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPatientClinicsStep(), opts...)
	}
}

// ByPatientClinics orders the results by patient_clinics terms.
func ByPatientClinics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPatientClinicsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByPatientWeightHeightHistoryCount orders the results by patient_weight_height_history count.
func ByPatientWeightHeightHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPatientWeightHeightHistoryStep(), opts...)
	}
}

// ByPatientWeightHeightHistory orders the results by patient_weight_height_history terms.
func ByPatientWeightHeightHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPatientWeightHeightHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPatientSettingsCount orders the results by patient_settings count.
func ByPatientSettingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPatientSettingsStep(), opts...)
	}
}

// ByPatientSettings orders the results by patient_settings terms.
func ByPatientSettings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPatientSettingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCurrentCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrentCustomerInverseTable, CustomerFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CurrentCustomerTable, CurrentCustomerColumn),
	)
}
func newPatientCustomersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PatientCustomersInverseTable, CustomerFieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PatientCustomersTable, PatientCustomersPrimaryKey...),
	)
}
func newSamplesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SamplesInverseTable, SampleFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SamplesTable, SamplesColumn),
	)
}
func newPatientContactsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PatientContactsInverseTable, ContactFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PatientContactsTable, PatientContactsColumn),
	)
}
func newPatientAddressesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PatientAddressesInverseTable, AddressFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PatientAddressesTable, PatientAddressesColumn),
	)
}
func newPatientClinicsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PatientClinicsInverseTable, ClinicFieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PatientClinicsTable, PatientClinicsPrimaryKey...),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newPatientWeightHeightHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PatientWeightHeightHistoryInverseTable, PatientWeightHeightFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PatientWeightHeightHistoryTable, PatientWeightHeightHistoryColumn),
	)
}
func newPatientSettingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PatientSettingsInverseTable, SettingFieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PatientSettingsTable, PatientSettingsPrimaryKey...),
	)
}
