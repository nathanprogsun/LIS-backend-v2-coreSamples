// Code generated by ent, DO NOT EDIT.

package patient

import (
	"coresamples/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldUserID, v))
}

// PatientType applies equality check predicate on the "patient_type" field. It's identical to PatientTypeEQ.
func PatientType(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientType, v))
}

// OriginalPatientID applies equality check predicate on the "original_patient_id" field. It's identical to OriginalPatientIDEQ.
func OriginalPatientID(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldOriginalPatientID, v))
}

// PatientGender applies equality check predicate on the "patient_gender" field. It's identical to PatientGenderEQ.
func PatientGender(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientGender, v))
}

// PatientFirstName applies equality check predicate on the "patient_first_name" field. It's identical to PatientFirstNameEQ.
func PatientFirstName(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientFirstName, v))
}

// PatientLastName applies equality check predicate on the "patient_last_name" field. It's identical to PatientLastNameEQ.
func PatientLastName(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientLastName, v))
}

// PatientMiddleName applies equality check predicate on the "patient_middle_name" field. It's identical to PatientMiddleNameEQ.
func PatientMiddleName(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientMiddleName, v))
}

// PatientMedicalRecordNumber applies equality check predicate on the "patient_medical_record_number" field. It's identical to PatientMedicalRecordNumberEQ.
func PatientMedicalRecordNumber(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientMedicalRecordNumber, v))
}

// PatientLegalFirstname applies equality check predicate on the "patient_legal_firstname" field. It's identical to PatientLegalFirstnameEQ.
func PatientLegalFirstname(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientLegalFirstname, v))
}

// PatientLegalLastname applies equality check predicate on the "patient_legal_lastname" field. It's identical to PatientLegalLastnameEQ.
func PatientLegalLastname(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientLegalLastname, v))
}

// PatientHonorific applies equality check predicate on the "patient_honorific" field. It's identical to PatientHonorificEQ.
func PatientHonorific(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientHonorific, v))
}

// PatientSuffix applies equality check predicate on the "patient_suffix" field. It's identical to PatientSuffixEQ.
func PatientSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientSuffix, v))
}

// PatientMarital applies equality check predicate on the "patient_marital" field. It's identical to PatientMaritalEQ.
func PatientMarital(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientMarital, v))
}

// PatientEthnicity applies equality check predicate on the "patient_ethnicity" field. It's identical to PatientEthnicityEQ.
func PatientEthnicity(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientEthnicity, v))
}

// PatientBirthdate applies equality check predicate on the "patient_birthdate" field. It's identical to PatientBirthdateEQ.
func PatientBirthdate(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientBirthdate, v))
}

// PatientSsn applies equality check predicate on the "patient_ssn" field. It's identical to PatientSsnEQ.
func PatientSsn(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientSsn, v))
}

// PatientHeight applies equality check predicate on the "patient_height" field. It's identical to PatientHeightEQ.
func PatientHeight(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientHeight, v))
}

// PatientWeight applies equality check predicate on the "patient_weight" field. It's identical to PatientWeightEQ.
func PatientWeight(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientWeight, v))
}

// OfficeallyID applies equality check predicate on the "officeally_id" field. It's identical to OfficeallyIDEQ.
func OfficeallyID(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldOfficeallyID, v))
}

// PatientNyWaiveFormIssueStatus applies equality check predicate on the "patient_ny_waive_form_issue_status" field. It's identical to PatientNyWaiveFormIssueStatusEQ.
func PatientNyWaiveFormIssueStatus(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientNyWaiveFormIssueStatus, v))
}

// PatientCreateTime applies equality check predicate on the "patient_create_time" field. It's identical to PatientCreateTimeEQ.
func PatientCreateTime(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientCreateTime, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldCustomerID, v))
}

// IsActive applies equality check predicate on the "isActive" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldIsActive, v))
}

// PatientFlagged applies equality check predicate on the "patient_flagged" field. It's identical to PatientFlaggedEQ.
func PatientFlagged(v bool) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientFlagged, v))
}

// PatientServiceDate applies equality check predicate on the "patient_service_date" field. It's identical to PatientServiceDateEQ.
func PatientServiceDate(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientServiceDate, v))
}

// PatientDescription applies equality check predicate on the "patient_description" field. It's identical to PatientDescriptionEQ.
func PatientDescription(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientDescription, v))
}

// PatientLanguage applies equality check predicate on the "patient_language" field. It's identical to PatientLanguageEQ.
func PatientLanguage(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientLanguage, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldUserID))
}

// PatientTypeEQ applies the EQ predicate on the "patient_type" field.
func PatientTypeEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientType, v))
}

// PatientTypeNEQ applies the NEQ predicate on the "patient_type" field.
func PatientTypeNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientType, v))
}

// PatientTypeIn applies the In predicate on the "patient_type" field.
func PatientTypeIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientType, vs...))
}

// PatientTypeNotIn applies the NotIn predicate on the "patient_type" field.
func PatientTypeNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientType, vs...))
}

// PatientTypeGT applies the GT predicate on the "patient_type" field.
func PatientTypeGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientType, v))
}

// PatientTypeGTE applies the GTE predicate on the "patient_type" field.
func PatientTypeGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientType, v))
}

// PatientTypeLT applies the LT predicate on the "patient_type" field.
func PatientTypeLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientType, v))
}

// PatientTypeLTE applies the LTE predicate on the "patient_type" field.
func PatientTypeLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientType, v))
}

// PatientTypeContains applies the Contains predicate on the "patient_type" field.
func PatientTypeContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientType, v))
}

// PatientTypeHasPrefix applies the HasPrefix predicate on the "patient_type" field.
func PatientTypeHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientType, v))
}

// PatientTypeHasSuffix applies the HasSuffix predicate on the "patient_type" field.
func PatientTypeHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientType, v))
}

// PatientTypeEqualFold applies the EqualFold predicate on the "patient_type" field.
func PatientTypeEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientType, v))
}

// PatientTypeContainsFold applies the ContainsFold predicate on the "patient_type" field.
func PatientTypeContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientType, v))
}

// OriginalPatientIDEQ applies the EQ predicate on the "original_patient_id" field.
func OriginalPatientIDEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldOriginalPatientID, v))
}

// OriginalPatientIDNEQ applies the NEQ predicate on the "original_patient_id" field.
func OriginalPatientIDNEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldOriginalPatientID, v))
}

// OriginalPatientIDIn applies the In predicate on the "original_patient_id" field.
func OriginalPatientIDIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldOriginalPatientID, vs...))
}

// OriginalPatientIDNotIn applies the NotIn predicate on the "original_patient_id" field.
func OriginalPatientIDNotIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldOriginalPatientID, vs...))
}

// OriginalPatientIDGT applies the GT predicate on the "original_patient_id" field.
func OriginalPatientIDGT(v int) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldOriginalPatientID, v))
}

// OriginalPatientIDGTE applies the GTE predicate on the "original_patient_id" field.
func OriginalPatientIDGTE(v int) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldOriginalPatientID, v))
}

// OriginalPatientIDLT applies the LT predicate on the "original_patient_id" field.
func OriginalPatientIDLT(v int) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldOriginalPatientID, v))
}

// OriginalPatientIDLTE applies the LTE predicate on the "original_patient_id" field.
func OriginalPatientIDLTE(v int) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldOriginalPatientID, v))
}

// OriginalPatientIDIsNil applies the IsNil predicate on the "original_patient_id" field.
func OriginalPatientIDIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldOriginalPatientID))
}

// OriginalPatientIDNotNil applies the NotNil predicate on the "original_patient_id" field.
func OriginalPatientIDNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldOriginalPatientID))
}

// PatientGenderEQ applies the EQ predicate on the "patient_gender" field.
func PatientGenderEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientGender, v))
}

// PatientGenderNEQ applies the NEQ predicate on the "patient_gender" field.
func PatientGenderNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientGender, v))
}

// PatientGenderIn applies the In predicate on the "patient_gender" field.
func PatientGenderIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientGender, vs...))
}

// PatientGenderNotIn applies the NotIn predicate on the "patient_gender" field.
func PatientGenderNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientGender, vs...))
}

// PatientGenderGT applies the GT predicate on the "patient_gender" field.
func PatientGenderGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientGender, v))
}

// PatientGenderGTE applies the GTE predicate on the "patient_gender" field.
func PatientGenderGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientGender, v))
}

// PatientGenderLT applies the LT predicate on the "patient_gender" field.
func PatientGenderLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientGender, v))
}

// PatientGenderLTE applies the LTE predicate on the "patient_gender" field.
func PatientGenderLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientGender, v))
}

// PatientGenderContains applies the Contains predicate on the "patient_gender" field.
func PatientGenderContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientGender, v))
}

// PatientGenderHasPrefix applies the HasPrefix predicate on the "patient_gender" field.
func PatientGenderHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientGender, v))
}

// PatientGenderHasSuffix applies the HasSuffix predicate on the "patient_gender" field.
func PatientGenderHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientGender, v))
}

// PatientGenderIsNil applies the IsNil predicate on the "patient_gender" field.
func PatientGenderIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientGender))
}

// PatientGenderNotNil applies the NotNil predicate on the "patient_gender" field.
func PatientGenderNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientGender))
}

// PatientGenderEqualFold applies the EqualFold predicate on the "patient_gender" field.
func PatientGenderEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientGender, v))
}

// PatientGenderContainsFold applies the ContainsFold predicate on the "patient_gender" field.
func PatientGenderContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientGender, v))
}

// PatientFirstNameEQ applies the EQ predicate on the "patient_first_name" field.
func PatientFirstNameEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientFirstName, v))
}

// PatientFirstNameNEQ applies the NEQ predicate on the "patient_first_name" field.
func PatientFirstNameNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientFirstName, v))
}

// PatientFirstNameIn applies the In predicate on the "patient_first_name" field.
func PatientFirstNameIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientFirstName, vs...))
}

// PatientFirstNameNotIn applies the NotIn predicate on the "patient_first_name" field.
func PatientFirstNameNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientFirstName, vs...))
}

// PatientFirstNameGT applies the GT predicate on the "patient_first_name" field.
func PatientFirstNameGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientFirstName, v))
}

// PatientFirstNameGTE applies the GTE predicate on the "patient_first_name" field.
func PatientFirstNameGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientFirstName, v))
}

// PatientFirstNameLT applies the LT predicate on the "patient_first_name" field.
func PatientFirstNameLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientFirstName, v))
}

// PatientFirstNameLTE applies the LTE predicate on the "patient_first_name" field.
func PatientFirstNameLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientFirstName, v))
}

// PatientFirstNameContains applies the Contains predicate on the "patient_first_name" field.
func PatientFirstNameContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientFirstName, v))
}

// PatientFirstNameHasPrefix applies the HasPrefix predicate on the "patient_first_name" field.
func PatientFirstNameHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientFirstName, v))
}

// PatientFirstNameHasSuffix applies the HasSuffix predicate on the "patient_first_name" field.
func PatientFirstNameHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientFirstName, v))
}

// PatientFirstNameIsNil applies the IsNil predicate on the "patient_first_name" field.
func PatientFirstNameIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientFirstName))
}

// PatientFirstNameNotNil applies the NotNil predicate on the "patient_first_name" field.
func PatientFirstNameNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientFirstName))
}

// PatientFirstNameEqualFold applies the EqualFold predicate on the "patient_first_name" field.
func PatientFirstNameEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientFirstName, v))
}

// PatientFirstNameContainsFold applies the ContainsFold predicate on the "patient_first_name" field.
func PatientFirstNameContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientFirstName, v))
}

// PatientLastNameEQ applies the EQ predicate on the "patient_last_name" field.
func PatientLastNameEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientLastName, v))
}

// PatientLastNameNEQ applies the NEQ predicate on the "patient_last_name" field.
func PatientLastNameNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientLastName, v))
}

// PatientLastNameIn applies the In predicate on the "patient_last_name" field.
func PatientLastNameIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientLastName, vs...))
}

// PatientLastNameNotIn applies the NotIn predicate on the "patient_last_name" field.
func PatientLastNameNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientLastName, vs...))
}

// PatientLastNameGT applies the GT predicate on the "patient_last_name" field.
func PatientLastNameGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientLastName, v))
}

// PatientLastNameGTE applies the GTE predicate on the "patient_last_name" field.
func PatientLastNameGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientLastName, v))
}

// PatientLastNameLT applies the LT predicate on the "patient_last_name" field.
func PatientLastNameLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientLastName, v))
}

// PatientLastNameLTE applies the LTE predicate on the "patient_last_name" field.
func PatientLastNameLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientLastName, v))
}

// PatientLastNameContains applies the Contains predicate on the "patient_last_name" field.
func PatientLastNameContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientLastName, v))
}

// PatientLastNameHasPrefix applies the HasPrefix predicate on the "patient_last_name" field.
func PatientLastNameHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientLastName, v))
}

// PatientLastNameHasSuffix applies the HasSuffix predicate on the "patient_last_name" field.
func PatientLastNameHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientLastName, v))
}

// PatientLastNameIsNil applies the IsNil predicate on the "patient_last_name" field.
func PatientLastNameIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientLastName))
}

// PatientLastNameNotNil applies the NotNil predicate on the "patient_last_name" field.
func PatientLastNameNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientLastName))
}

// PatientLastNameEqualFold applies the EqualFold predicate on the "patient_last_name" field.
func PatientLastNameEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientLastName, v))
}

// PatientLastNameContainsFold applies the ContainsFold predicate on the "patient_last_name" field.
func PatientLastNameContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientLastName, v))
}

// PatientMiddleNameEQ applies the EQ predicate on the "patient_middle_name" field.
func PatientMiddleNameEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientMiddleName, v))
}

// PatientMiddleNameNEQ applies the NEQ predicate on the "patient_middle_name" field.
func PatientMiddleNameNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientMiddleName, v))
}

// PatientMiddleNameIn applies the In predicate on the "patient_middle_name" field.
func PatientMiddleNameIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientMiddleName, vs...))
}

// PatientMiddleNameNotIn applies the NotIn predicate on the "patient_middle_name" field.
func PatientMiddleNameNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientMiddleName, vs...))
}

// PatientMiddleNameGT applies the GT predicate on the "patient_middle_name" field.
func PatientMiddleNameGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientMiddleName, v))
}

// PatientMiddleNameGTE applies the GTE predicate on the "patient_middle_name" field.
func PatientMiddleNameGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientMiddleName, v))
}

// PatientMiddleNameLT applies the LT predicate on the "patient_middle_name" field.
func PatientMiddleNameLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientMiddleName, v))
}

// PatientMiddleNameLTE applies the LTE predicate on the "patient_middle_name" field.
func PatientMiddleNameLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientMiddleName, v))
}

// PatientMiddleNameContains applies the Contains predicate on the "patient_middle_name" field.
func PatientMiddleNameContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientMiddleName, v))
}

// PatientMiddleNameHasPrefix applies the HasPrefix predicate on the "patient_middle_name" field.
func PatientMiddleNameHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientMiddleName, v))
}

// PatientMiddleNameHasSuffix applies the HasSuffix predicate on the "patient_middle_name" field.
func PatientMiddleNameHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientMiddleName, v))
}

// PatientMiddleNameIsNil applies the IsNil predicate on the "patient_middle_name" field.
func PatientMiddleNameIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientMiddleName))
}

// PatientMiddleNameNotNil applies the NotNil predicate on the "patient_middle_name" field.
func PatientMiddleNameNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientMiddleName))
}

// PatientMiddleNameEqualFold applies the EqualFold predicate on the "patient_middle_name" field.
func PatientMiddleNameEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientMiddleName, v))
}

// PatientMiddleNameContainsFold applies the ContainsFold predicate on the "patient_middle_name" field.
func PatientMiddleNameContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientMiddleName, v))
}

// PatientMedicalRecordNumberEQ applies the EQ predicate on the "patient_medical_record_number" field.
func PatientMedicalRecordNumberEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientMedicalRecordNumber, v))
}

// PatientMedicalRecordNumberNEQ applies the NEQ predicate on the "patient_medical_record_number" field.
func PatientMedicalRecordNumberNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientMedicalRecordNumber, v))
}

// PatientMedicalRecordNumberIn applies the In predicate on the "patient_medical_record_number" field.
func PatientMedicalRecordNumberIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientMedicalRecordNumber, vs...))
}

// PatientMedicalRecordNumberNotIn applies the NotIn predicate on the "patient_medical_record_number" field.
func PatientMedicalRecordNumberNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientMedicalRecordNumber, vs...))
}

// PatientMedicalRecordNumberGT applies the GT predicate on the "patient_medical_record_number" field.
func PatientMedicalRecordNumberGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientMedicalRecordNumber, v))
}

// PatientMedicalRecordNumberGTE applies the GTE predicate on the "patient_medical_record_number" field.
func PatientMedicalRecordNumberGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientMedicalRecordNumber, v))
}

// PatientMedicalRecordNumberLT applies the LT predicate on the "patient_medical_record_number" field.
func PatientMedicalRecordNumberLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientMedicalRecordNumber, v))
}

// PatientMedicalRecordNumberLTE applies the LTE predicate on the "patient_medical_record_number" field.
func PatientMedicalRecordNumberLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientMedicalRecordNumber, v))
}

// PatientMedicalRecordNumberContains applies the Contains predicate on the "patient_medical_record_number" field.
func PatientMedicalRecordNumberContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientMedicalRecordNumber, v))
}

// PatientMedicalRecordNumberHasPrefix applies the HasPrefix predicate on the "patient_medical_record_number" field.
func PatientMedicalRecordNumberHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientMedicalRecordNumber, v))
}

// PatientMedicalRecordNumberHasSuffix applies the HasSuffix predicate on the "patient_medical_record_number" field.
func PatientMedicalRecordNumberHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientMedicalRecordNumber, v))
}

// PatientMedicalRecordNumberIsNil applies the IsNil predicate on the "patient_medical_record_number" field.
func PatientMedicalRecordNumberIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientMedicalRecordNumber))
}

// PatientMedicalRecordNumberNotNil applies the NotNil predicate on the "patient_medical_record_number" field.
func PatientMedicalRecordNumberNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientMedicalRecordNumber))
}

// PatientMedicalRecordNumberEqualFold applies the EqualFold predicate on the "patient_medical_record_number" field.
func PatientMedicalRecordNumberEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientMedicalRecordNumber, v))
}

// PatientMedicalRecordNumberContainsFold applies the ContainsFold predicate on the "patient_medical_record_number" field.
func PatientMedicalRecordNumberContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientMedicalRecordNumber, v))
}

// PatientLegalFirstnameEQ applies the EQ predicate on the "patient_legal_firstname" field.
func PatientLegalFirstnameEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientLegalFirstname, v))
}

// PatientLegalFirstnameNEQ applies the NEQ predicate on the "patient_legal_firstname" field.
func PatientLegalFirstnameNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientLegalFirstname, v))
}

// PatientLegalFirstnameIn applies the In predicate on the "patient_legal_firstname" field.
func PatientLegalFirstnameIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientLegalFirstname, vs...))
}

// PatientLegalFirstnameNotIn applies the NotIn predicate on the "patient_legal_firstname" field.
func PatientLegalFirstnameNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientLegalFirstname, vs...))
}

// PatientLegalFirstnameGT applies the GT predicate on the "patient_legal_firstname" field.
func PatientLegalFirstnameGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientLegalFirstname, v))
}

// PatientLegalFirstnameGTE applies the GTE predicate on the "patient_legal_firstname" field.
func PatientLegalFirstnameGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientLegalFirstname, v))
}

// PatientLegalFirstnameLT applies the LT predicate on the "patient_legal_firstname" field.
func PatientLegalFirstnameLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientLegalFirstname, v))
}

// PatientLegalFirstnameLTE applies the LTE predicate on the "patient_legal_firstname" field.
func PatientLegalFirstnameLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientLegalFirstname, v))
}

// PatientLegalFirstnameContains applies the Contains predicate on the "patient_legal_firstname" field.
func PatientLegalFirstnameContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientLegalFirstname, v))
}

// PatientLegalFirstnameHasPrefix applies the HasPrefix predicate on the "patient_legal_firstname" field.
func PatientLegalFirstnameHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientLegalFirstname, v))
}

// PatientLegalFirstnameHasSuffix applies the HasSuffix predicate on the "patient_legal_firstname" field.
func PatientLegalFirstnameHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientLegalFirstname, v))
}

// PatientLegalFirstnameIsNil applies the IsNil predicate on the "patient_legal_firstname" field.
func PatientLegalFirstnameIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientLegalFirstname))
}

// PatientLegalFirstnameNotNil applies the NotNil predicate on the "patient_legal_firstname" field.
func PatientLegalFirstnameNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientLegalFirstname))
}

// PatientLegalFirstnameEqualFold applies the EqualFold predicate on the "patient_legal_firstname" field.
func PatientLegalFirstnameEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientLegalFirstname, v))
}

// PatientLegalFirstnameContainsFold applies the ContainsFold predicate on the "patient_legal_firstname" field.
func PatientLegalFirstnameContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientLegalFirstname, v))
}

// PatientLegalLastnameEQ applies the EQ predicate on the "patient_legal_lastname" field.
func PatientLegalLastnameEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientLegalLastname, v))
}

// PatientLegalLastnameNEQ applies the NEQ predicate on the "patient_legal_lastname" field.
func PatientLegalLastnameNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientLegalLastname, v))
}

// PatientLegalLastnameIn applies the In predicate on the "patient_legal_lastname" field.
func PatientLegalLastnameIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientLegalLastname, vs...))
}

// PatientLegalLastnameNotIn applies the NotIn predicate on the "patient_legal_lastname" field.
func PatientLegalLastnameNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientLegalLastname, vs...))
}

// PatientLegalLastnameGT applies the GT predicate on the "patient_legal_lastname" field.
func PatientLegalLastnameGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientLegalLastname, v))
}

// PatientLegalLastnameGTE applies the GTE predicate on the "patient_legal_lastname" field.
func PatientLegalLastnameGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientLegalLastname, v))
}

// PatientLegalLastnameLT applies the LT predicate on the "patient_legal_lastname" field.
func PatientLegalLastnameLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientLegalLastname, v))
}

// PatientLegalLastnameLTE applies the LTE predicate on the "patient_legal_lastname" field.
func PatientLegalLastnameLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientLegalLastname, v))
}

// PatientLegalLastnameContains applies the Contains predicate on the "patient_legal_lastname" field.
func PatientLegalLastnameContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientLegalLastname, v))
}

// PatientLegalLastnameHasPrefix applies the HasPrefix predicate on the "patient_legal_lastname" field.
func PatientLegalLastnameHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientLegalLastname, v))
}

// PatientLegalLastnameHasSuffix applies the HasSuffix predicate on the "patient_legal_lastname" field.
func PatientLegalLastnameHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientLegalLastname, v))
}

// PatientLegalLastnameIsNil applies the IsNil predicate on the "patient_legal_lastname" field.
func PatientLegalLastnameIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientLegalLastname))
}

// PatientLegalLastnameNotNil applies the NotNil predicate on the "patient_legal_lastname" field.
func PatientLegalLastnameNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientLegalLastname))
}

// PatientLegalLastnameEqualFold applies the EqualFold predicate on the "patient_legal_lastname" field.
func PatientLegalLastnameEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientLegalLastname, v))
}

// PatientLegalLastnameContainsFold applies the ContainsFold predicate on the "patient_legal_lastname" field.
func PatientLegalLastnameContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientLegalLastname, v))
}

// PatientHonorificEQ applies the EQ predicate on the "patient_honorific" field.
func PatientHonorificEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientHonorific, v))
}

// PatientHonorificNEQ applies the NEQ predicate on the "patient_honorific" field.
func PatientHonorificNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientHonorific, v))
}

// PatientHonorificIn applies the In predicate on the "patient_honorific" field.
func PatientHonorificIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientHonorific, vs...))
}

// PatientHonorificNotIn applies the NotIn predicate on the "patient_honorific" field.
func PatientHonorificNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientHonorific, vs...))
}

// PatientHonorificGT applies the GT predicate on the "patient_honorific" field.
func PatientHonorificGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientHonorific, v))
}

// PatientHonorificGTE applies the GTE predicate on the "patient_honorific" field.
func PatientHonorificGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientHonorific, v))
}

// PatientHonorificLT applies the LT predicate on the "patient_honorific" field.
func PatientHonorificLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientHonorific, v))
}

// PatientHonorificLTE applies the LTE predicate on the "patient_honorific" field.
func PatientHonorificLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientHonorific, v))
}

// PatientHonorificContains applies the Contains predicate on the "patient_honorific" field.
func PatientHonorificContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientHonorific, v))
}

// PatientHonorificHasPrefix applies the HasPrefix predicate on the "patient_honorific" field.
func PatientHonorificHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientHonorific, v))
}

// PatientHonorificHasSuffix applies the HasSuffix predicate on the "patient_honorific" field.
func PatientHonorificHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientHonorific, v))
}

// PatientHonorificIsNil applies the IsNil predicate on the "patient_honorific" field.
func PatientHonorificIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientHonorific))
}

// PatientHonorificNotNil applies the NotNil predicate on the "patient_honorific" field.
func PatientHonorificNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientHonorific))
}

// PatientHonorificEqualFold applies the EqualFold predicate on the "patient_honorific" field.
func PatientHonorificEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientHonorific, v))
}

// PatientHonorificContainsFold applies the ContainsFold predicate on the "patient_honorific" field.
func PatientHonorificContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientHonorific, v))
}

// PatientSuffixEQ applies the EQ predicate on the "patient_suffix" field.
func PatientSuffixEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientSuffix, v))
}

// PatientSuffixNEQ applies the NEQ predicate on the "patient_suffix" field.
func PatientSuffixNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientSuffix, v))
}

// PatientSuffixIn applies the In predicate on the "patient_suffix" field.
func PatientSuffixIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientSuffix, vs...))
}

// PatientSuffixNotIn applies the NotIn predicate on the "patient_suffix" field.
func PatientSuffixNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientSuffix, vs...))
}

// PatientSuffixGT applies the GT predicate on the "patient_suffix" field.
func PatientSuffixGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientSuffix, v))
}

// PatientSuffixGTE applies the GTE predicate on the "patient_suffix" field.
func PatientSuffixGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientSuffix, v))
}

// PatientSuffixLT applies the LT predicate on the "patient_suffix" field.
func PatientSuffixLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientSuffix, v))
}

// PatientSuffixLTE applies the LTE predicate on the "patient_suffix" field.
func PatientSuffixLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientSuffix, v))
}

// PatientSuffixContains applies the Contains predicate on the "patient_suffix" field.
func PatientSuffixContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientSuffix, v))
}

// PatientSuffixHasPrefix applies the HasPrefix predicate on the "patient_suffix" field.
func PatientSuffixHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientSuffix, v))
}

// PatientSuffixHasSuffix applies the HasSuffix predicate on the "patient_suffix" field.
func PatientSuffixHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientSuffix, v))
}

// PatientSuffixIsNil applies the IsNil predicate on the "patient_suffix" field.
func PatientSuffixIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientSuffix))
}

// PatientSuffixNotNil applies the NotNil predicate on the "patient_suffix" field.
func PatientSuffixNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientSuffix))
}

// PatientSuffixEqualFold applies the EqualFold predicate on the "patient_suffix" field.
func PatientSuffixEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientSuffix, v))
}

// PatientSuffixContainsFold applies the ContainsFold predicate on the "patient_suffix" field.
func PatientSuffixContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientSuffix, v))
}

// PatientMaritalEQ applies the EQ predicate on the "patient_marital" field.
func PatientMaritalEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientMarital, v))
}

// PatientMaritalNEQ applies the NEQ predicate on the "patient_marital" field.
func PatientMaritalNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientMarital, v))
}

// PatientMaritalIn applies the In predicate on the "patient_marital" field.
func PatientMaritalIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientMarital, vs...))
}

// PatientMaritalNotIn applies the NotIn predicate on the "patient_marital" field.
func PatientMaritalNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientMarital, vs...))
}

// PatientMaritalGT applies the GT predicate on the "patient_marital" field.
func PatientMaritalGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientMarital, v))
}

// PatientMaritalGTE applies the GTE predicate on the "patient_marital" field.
func PatientMaritalGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientMarital, v))
}

// PatientMaritalLT applies the LT predicate on the "patient_marital" field.
func PatientMaritalLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientMarital, v))
}

// PatientMaritalLTE applies the LTE predicate on the "patient_marital" field.
func PatientMaritalLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientMarital, v))
}

// PatientMaritalContains applies the Contains predicate on the "patient_marital" field.
func PatientMaritalContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientMarital, v))
}

// PatientMaritalHasPrefix applies the HasPrefix predicate on the "patient_marital" field.
func PatientMaritalHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientMarital, v))
}

// PatientMaritalHasSuffix applies the HasSuffix predicate on the "patient_marital" field.
func PatientMaritalHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientMarital, v))
}

// PatientMaritalIsNil applies the IsNil predicate on the "patient_marital" field.
func PatientMaritalIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientMarital))
}

// PatientMaritalNotNil applies the NotNil predicate on the "patient_marital" field.
func PatientMaritalNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientMarital))
}

// PatientMaritalEqualFold applies the EqualFold predicate on the "patient_marital" field.
func PatientMaritalEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientMarital, v))
}

// PatientMaritalContainsFold applies the ContainsFold predicate on the "patient_marital" field.
func PatientMaritalContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientMarital, v))
}

// PatientEthnicityEQ applies the EQ predicate on the "patient_ethnicity" field.
func PatientEthnicityEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientEthnicity, v))
}

// PatientEthnicityNEQ applies the NEQ predicate on the "patient_ethnicity" field.
func PatientEthnicityNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientEthnicity, v))
}

// PatientEthnicityIn applies the In predicate on the "patient_ethnicity" field.
func PatientEthnicityIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientEthnicity, vs...))
}

// PatientEthnicityNotIn applies the NotIn predicate on the "patient_ethnicity" field.
func PatientEthnicityNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientEthnicity, vs...))
}

// PatientEthnicityGT applies the GT predicate on the "patient_ethnicity" field.
func PatientEthnicityGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientEthnicity, v))
}

// PatientEthnicityGTE applies the GTE predicate on the "patient_ethnicity" field.
func PatientEthnicityGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientEthnicity, v))
}

// PatientEthnicityLT applies the LT predicate on the "patient_ethnicity" field.
func PatientEthnicityLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientEthnicity, v))
}

// PatientEthnicityLTE applies the LTE predicate on the "patient_ethnicity" field.
func PatientEthnicityLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientEthnicity, v))
}

// PatientEthnicityContains applies the Contains predicate on the "patient_ethnicity" field.
func PatientEthnicityContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientEthnicity, v))
}

// PatientEthnicityHasPrefix applies the HasPrefix predicate on the "patient_ethnicity" field.
func PatientEthnicityHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientEthnicity, v))
}

// PatientEthnicityHasSuffix applies the HasSuffix predicate on the "patient_ethnicity" field.
func PatientEthnicityHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientEthnicity, v))
}

// PatientEthnicityIsNil applies the IsNil predicate on the "patient_ethnicity" field.
func PatientEthnicityIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientEthnicity))
}

// PatientEthnicityNotNil applies the NotNil predicate on the "patient_ethnicity" field.
func PatientEthnicityNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientEthnicity))
}

// PatientEthnicityEqualFold applies the EqualFold predicate on the "patient_ethnicity" field.
func PatientEthnicityEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientEthnicity, v))
}

// PatientEthnicityContainsFold applies the ContainsFold predicate on the "patient_ethnicity" field.
func PatientEthnicityContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientEthnicity, v))
}

// PatientBirthdateEQ applies the EQ predicate on the "patient_birthdate" field.
func PatientBirthdateEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientBirthdate, v))
}

// PatientBirthdateNEQ applies the NEQ predicate on the "patient_birthdate" field.
func PatientBirthdateNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientBirthdate, v))
}

// PatientBirthdateIn applies the In predicate on the "patient_birthdate" field.
func PatientBirthdateIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientBirthdate, vs...))
}

// PatientBirthdateNotIn applies the NotIn predicate on the "patient_birthdate" field.
func PatientBirthdateNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientBirthdate, vs...))
}

// PatientBirthdateGT applies the GT predicate on the "patient_birthdate" field.
func PatientBirthdateGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientBirthdate, v))
}

// PatientBirthdateGTE applies the GTE predicate on the "patient_birthdate" field.
func PatientBirthdateGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientBirthdate, v))
}

// PatientBirthdateLT applies the LT predicate on the "patient_birthdate" field.
func PatientBirthdateLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientBirthdate, v))
}

// PatientBirthdateLTE applies the LTE predicate on the "patient_birthdate" field.
func PatientBirthdateLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientBirthdate, v))
}

// PatientBirthdateContains applies the Contains predicate on the "patient_birthdate" field.
func PatientBirthdateContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientBirthdate, v))
}

// PatientBirthdateHasPrefix applies the HasPrefix predicate on the "patient_birthdate" field.
func PatientBirthdateHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientBirthdate, v))
}

// PatientBirthdateHasSuffix applies the HasSuffix predicate on the "patient_birthdate" field.
func PatientBirthdateHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientBirthdate, v))
}

// PatientBirthdateIsNil applies the IsNil predicate on the "patient_birthdate" field.
func PatientBirthdateIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientBirthdate))
}

// PatientBirthdateNotNil applies the NotNil predicate on the "patient_birthdate" field.
func PatientBirthdateNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientBirthdate))
}

// PatientBirthdateEqualFold applies the EqualFold predicate on the "patient_birthdate" field.
func PatientBirthdateEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientBirthdate, v))
}

// PatientBirthdateContainsFold applies the ContainsFold predicate on the "patient_birthdate" field.
func PatientBirthdateContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientBirthdate, v))
}

// PatientSsnEQ applies the EQ predicate on the "patient_ssn" field.
func PatientSsnEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientSsn, v))
}

// PatientSsnNEQ applies the NEQ predicate on the "patient_ssn" field.
func PatientSsnNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientSsn, v))
}

// PatientSsnIn applies the In predicate on the "patient_ssn" field.
func PatientSsnIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientSsn, vs...))
}

// PatientSsnNotIn applies the NotIn predicate on the "patient_ssn" field.
func PatientSsnNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientSsn, vs...))
}

// PatientSsnGT applies the GT predicate on the "patient_ssn" field.
func PatientSsnGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientSsn, v))
}

// PatientSsnGTE applies the GTE predicate on the "patient_ssn" field.
func PatientSsnGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientSsn, v))
}

// PatientSsnLT applies the LT predicate on the "patient_ssn" field.
func PatientSsnLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientSsn, v))
}

// PatientSsnLTE applies the LTE predicate on the "patient_ssn" field.
func PatientSsnLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientSsn, v))
}

// PatientSsnContains applies the Contains predicate on the "patient_ssn" field.
func PatientSsnContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientSsn, v))
}

// PatientSsnHasPrefix applies the HasPrefix predicate on the "patient_ssn" field.
func PatientSsnHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientSsn, v))
}

// PatientSsnHasSuffix applies the HasSuffix predicate on the "patient_ssn" field.
func PatientSsnHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientSsn, v))
}

// PatientSsnIsNil applies the IsNil predicate on the "patient_ssn" field.
func PatientSsnIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientSsn))
}

// PatientSsnNotNil applies the NotNil predicate on the "patient_ssn" field.
func PatientSsnNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientSsn))
}

// PatientSsnEqualFold applies the EqualFold predicate on the "patient_ssn" field.
func PatientSsnEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientSsn, v))
}

// PatientSsnContainsFold applies the ContainsFold predicate on the "patient_ssn" field.
func PatientSsnContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientSsn, v))
}

// PatientHeightEQ applies the EQ predicate on the "patient_height" field.
func PatientHeightEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientHeight, v))
}

// PatientHeightNEQ applies the NEQ predicate on the "patient_height" field.
func PatientHeightNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientHeight, v))
}

// PatientHeightIn applies the In predicate on the "patient_height" field.
func PatientHeightIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientHeight, vs...))
}

// PatientHeightNotIn applies the NotIn predicate on the "patient_height" field.
func PatientHeightNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientHeight, vs...))
}

// PatientHeightGT applies the GT predicate on the "patient_height" field.
func PatientHeightGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientHeight, v))
}

// PatientHeightGTE applies the GTE predicate on the "patient_height" field.
func PatientHeightGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientHeight, v))
}

// PatientHeightLT applies the LT predicate on the "patient_height" field.
func PatientHeightLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientHeight, v))
}

// PatientHeightLTE applies the LTE predicate on the "patient_height" field.
func PatientHeightLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientHeight, v))
}

// PatientHeightContains applies the Contains predicate on the "patient_height" field.
func PatientHeightContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientHeight, v))
}

// PatientHeightHasPrefix applies the HasPrefix predicate on the "patient_height" field.
func PatientHeightHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientHeight, v))
}

// PatientHeightHasSuffix applies the HasSuffix predicate on the "patient_height" field.
func PatientHeightHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientHeight, v))
}

// PatientHeightIsNil applies the IsNil predicate on the "patient_height" field.
func PatientHeightIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientHeight))
}

// PatientHeightNotNil applies the NotNil predicate on the "patient_height" field.
func PatientHeightNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientHeight))
}

// PatientHeightEqualFold applies the EqualFold predicate on the "patient_height" field.
func PatientHeightEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientHeight, v))
}

// PatientHeightContainsFold applies the ContainsFold predicate on the "patient_height" field.
func PatientHeightContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientHeight, v))
}

// PatientWeightEQ applies the EQ predicate on the "patient_weight" field.
func PatientWeightEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientWeight, v))
}

// PatientWeightNEQ applies the NEQ predicate on the "patient_weight" field.
func PatientWeightNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientWeight, v))
}

// PatientWeightIn applies the In predicate on the "patient_weight" field.
func PatientWeightIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientWeight, vs...))
}

// PatientWeightNotIn applies the NotIn predicate on the "patient_weight" field.
func PatientWeightNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientWeight, vs...))
}

// PatientWeightGT applies the GT predicate on the "patient_weight" field.
func PatientWeightGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientWeight, v))
}

// PatientWeightGTE applies the GTE predicate on the "patient_weight" field.
func PatientWeightGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientWeight, v))
}

// PatientWeightLT applies the LT predicate on the "patient_weight" field.
func PatientWeightLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientWeight, v))
}

// PatientWeightLTE applies the LTE predicate on the "patient_weight" field.
func PatientWeightLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientWeight, v))
}

// PatientWeightContains applies the Contains predicate on the "patient_weight" field.
func PatientWeightContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientWeight, v))
}

// PatientWeightHasPrefix applies the HasPrefix predicate on the "patient_weight" field.
func PatientWeightHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientWeight, v))
}

// PatientWeightHasSuffix applies the HasSuffix predicate on the "patient_weight" field.
func PatientWeightHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientWeight, v))
}

// PatientWeightIsNil applies the IsNil predicate on the "patient_weight" field.
func PatientWeightIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientWeight))
}

// PatientWeightNotNil applies the NotNil predicate on the "patient_weight" field.
func PatientWeightNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientWeight))
}

// PatientWeightEqualFold applies the EqualFold predicate on the "patient_weight" field.
func PatientWeightEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientWeight, v))
}

// PatientWeightContainsFold applies the ContainsFold predicate on the "patient_weight" field.
func PatientWeightContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientWeight, v))
}

// OfficeallyIDEQ applies the EQ predicate on the "officeally_id" field.
func OfficeallyIDEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldOfficeallyID, v))
}

// OfficeallyIDNEQ applies the NEQ predicate on the "officeally_id" field.
func OfficeallyIDNEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldOfficeallyID, v))
}

// OfficeallyIDIn applies the In predicate on the "officeally_id" field.
func OfficeallyIDIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldOfficeallyID, vs...))
}

// OfficeallyIDNotIn applies the NotIn predicate on the "officeally_id" field.
func OfficeallyIDNotIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldOfficeallyID, vs...))
}

// OfficeallyIDGT applies the GT predicate on the "officeally_id" field.
func OfficeallyIDGT(v int) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldOfficeallyID, v))
}

// OfficeallyIDGTE applies the GTE predicate on the "officeally_id" field.
func OfficeallyIDGTE(v int) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldOfficeallyID, v))
}

// OfficeallyIDLT applies the LT predicate on the "officeally_id" field.
func OfficeallyIDLT(v int) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldOfficeallyID, v))
}

// OfficeallyIDLTE applies the LTE predicate on the "officeally_id" field.
func OfficeallyIDLTE(v int) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldOfficeallyID, v))
}

// OfficeallyIDIsNil applies the IsNil predicate on the "officeally_id" field.
func OfficeallyIDIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldOfficeallyID))
}

// OfficeallyIDNotNil applies the NotNil predicate on the "officeally_id" field.
func OfficeallyIDNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldOfficeallyID))
}

// PatientNyWaiveFormIssueStatusEQ applies the EQ predicate on the "patient_ny_waive_form_issue_status" field.
func PatientNyWaiveFormIssueStatusEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientNyWaiveFormIssueStatus, v))
}

// PatientNyWaiveFormIssueStatusNEQ applies the NEQ predicate on the "patient_ny_waive_form_issue_status" field.
func PatientNyWaiveFormIssueStatusNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientNyWaiveFormIssueStatus, v))
}

// PatientNyWaiveFormIssueStatusIn applies the In predicate on the "patient_ny_waive_form_issue_status" field.
func PatientNyWaiveFormIssueStatusIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientNyWaiveFormIssueStatus, vs...))
}

// PatientNyWaiveFormIssueStatusNotIn applies the NotIn predicate on the "patient_ny_waive_form_issue_status" field.
func PatientNyWaiveFormIssueStatusNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientNyWaiveFormIssueStatus, vs...))
}

// PatientNyWaiveFormIssueStatusGT applies the GT predicate on the "patient_ny_waive_form_issue_status" field.
func PatientNyWaiveFormIssueStatusGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientNyWaiveFormIssueStatus, v))
}

// PatientNyWaiveFormIssueStatusGTE applies the GTE predicate on the "patient_ny_waive_form_issue_status" field.
func PatientNyWaiveFormIssueStatusGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientNyWaiveFormIssueStatus, v))
}

// PatientNyWaiveFormIssueStatusLT applies the LT predicate on the "patient_ny_waive_form_issue_status" field.
func PatientNyWaiveFormIssueStatusLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientNyWaiveFormIssueStatus, v))
}

// PatientNyWaiveFormIssueStatusLTE applies the LTE predicate on the "patient_ny_waive_form_issue_status" field.
func PatientNyWaiveFormIssueStatusLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientNyWaiveFormIssueStatus, v))
}

// PatientNyWaiveFormIssueStatusContains applies the Contains predicate on the "patient_ny_waive_form_issue_status" field.
func PatientNyWaiveFormIssueStatusContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientNyWaiveFormIssueStatus, v))
}

// PatientNyWaiveFormIssueStatusHasPrefix applies the HasPrefix predicate on the "patient_ny_waive_form_issue_status" field.
func PatientNyWaiveFormIssueStatusHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientNyWaiveFormIssueStatus, v))
}

// PatientNyWaiveFormIssueStatusHasSuffix applies the HasSuffix predicate on the "patient_ny_waive_form_issue_status" field.
func PatientNyWaiveFormIssueStatusHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientNyWaiveFormIssueStatus, v))
}

// PatientNyWaiveFormIssueStatusEqualFold applies the EqualFold predicate on the "patient_ny_waive_form_issue_status" field.
func PatientNyWaiveFormIssueStatusEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientNyWaiveFormIssueStatus, v))
}

// PatientNyWaiveFormIssueStatusContainsFold applies the ContainsFold predicate on the "patient_ny_waive_form_issue_status" field.
func PatientNyWaiveFormIssueStatusContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientNyWaiveFormIssueStatus, v))
}

// PatientCreateTimeEQ applies the EQ predicate on the "patient_create_time" field.
func PatientCreateTimeEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientCreateTime, v))
}

// PatientCreateTimeNEQ applies the NEQ predicate on the "patient_create_time" field.
func PatientCreateTimeNEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientCreateTime, v))
}

// PatientCreateTimeIn applies the In predicate on the "patient_create_time" field.
func PatientCreateTimeIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientCreateTime, vs...))
}

// PatientCreateTimeNotIn applies the NotIn predicate on the "patient_create_time" field.
func PatientCreateTimeNotIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientCreateTime, vs...))
}

// PatientCreateTimeGT applies the GT predicate on the "patient_create_time" field.
func PatientCreateTimeGT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientCreateTime, v))
}

// PatientCreateTimeGTE applies the GTE predicate on the "patient_create_time" field.
func PatientCreateTimeGTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientCreateTime, v))
}

// PatientCreateTimeLT applies the LT predicate on the "patient_create_time" field.
func PatientCreateTimeLT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientCreateTime, v))
}

// PatientCreateTimeLTE applies the LTE predicate on the "patient_create_time" field.
func PatientCreateTimeLTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientCreateTime, v))
}

// PatientCreateTimeIsNil applies the IsNil predicate on the "patient_create_time" field.
func PatientCreateTimeIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientCreateTime))
}

// PatientCreateTimeNotNil applies the NotNil predicate on the "patient_create_time" field.
func PatientCreateTimeNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientCreateTime))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDIsNil applies the IsNil predicate on the "customer_id" field.
func CustomerIDIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldCustomerID))
}

// CustomerIDNotNil applies the NotNil predicate on the "customer_id" field.
func CustomerIDNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldCustomerID))
}

// IsActiveEQ applies the EQ predicate on the "isActive" field.
func IsActiveEQ(v bool) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "isActive" field.
func IsActiveNEQ(v bool) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldIsActive, v))
}

// PatientFlaggedEQ applies the EQ predicate on the "patient_flagged" field.
func PatientFlaggedEQ(v bool) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientFlagged, v))
}

// PatientFlaggedNEQ applies the NEQ predicate on the "patient_flagged" field.
func PatientFlaggedNEQ(v bool) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientFlagged, v))
}

// PatientServiceDateEQ applies the EQ predicate on the "patient_service_date" field.
func PatientServiceDateEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientServiceDate, v))
}

// PatientServiceDateNEQ applies the NEQ predicate on the "patient_service_date" field.
func PatientServiceDateNEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientServiceDate, v))
}

// PatientServiceDateIn applies the In predicate on the "patient_service_date" field.
func PatientServiceDateIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientServiceDate, vs...))
}

// PatientServiceDateNotIn applies the NotIn predicate on the "patient_service_date" field.
func PatientServiceDateNotIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientServiceDate, vs...))
}

// PatientServiceDateGT applies the GT predicate on the "patient_service_date" field.
func PatientServiceDateGT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientServiceDate, v))
}

// PatientServiceDateGTE applies the GTE predicate on the "patient_service_date" field.
func PatientServiceDateGTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientServiceDate, v))
}

// PatientServiceDateLT applies the LT predicate on the "patient_service_date" field.
func PatientServiceDateLT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientServiceDate, v))
}

// PatientServiceDateLTE applies the LTE predicate on the "patient_service_date" field.
func PatientServiceDateLTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientServiceDate, v))
}

// PatientServiceDateIsNil applies the IsNil predicate on the "patient_service_date" field.
func PatientServiceDateIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientServiceDate))
}

// PatientServiceDateNotNil applies the NotNil predicate on the "patient_service_date" field.
func PatientServiceDateNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientServiceDate))
}

// PatientDescriptionEQ applies the EQ predicate on the "patient_description" field.
func PatientDescriptionEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientDescription, v))
}

// PatientDescriptionNEQ applies the NEQ predicate on the "patient_description" field.
func PatientDescriptionNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientDescription, v))
}

// PatientDescriptionIn applies the In predicate on the "patient_description" field.
func PatientDescriptionIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientDescription, vs...))
}

// PatientDescriptionNotIn applies the NotIn predicate on the "patient_description" field.
func PatientDescriptionNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientDescription, vs...))
}

// PatientDescriptionGT applies the GT predicate on the "patient_description" field.
func PatientDescriptionGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientDescription, v))
}

// PatientDescriptionGTE applies the GTE predicate on the "patient_description" field.
func PatientDescriptionGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientDescription, v))
}

// PatientDescriptionLT applies the LT predicate on the "patient_description" field.
func PatientDescriptionLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientDescription, v))
}

// PatientDescriptionLTE applies the LTE predicate on the "patient_description" field.
func PatientDescriptionLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientDescription, v))
}

// PatientDescriptionContains applies the Contains predicate on the "patient_description" field.
func PatientDescriptionContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientDescription, v))
}

// PatientDescriptionHasPrefix applies the HasPrefix predicate on the "patient_description" field.
func PatientDescriptionHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientDescription, v))
}

// PatientDescriptionHasSuffix applies the HasSuffix predicate on the "patient_description" field.
func PatientDescriptionHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientDescription, v))
}

// PatientDescriptionIsNil applies the IsNil predicate on the "patient_description" field.
func PatientDescriptionIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientDescription))
}

// PatientDescriptionNotNil applies the NotNil predicate on the "patient_description" field.
func PatientDescriptionNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientDescription))
}

// PatientDescriptionEqualFold applies the EqualFold predicate on the "patient_description" field.
func PatientDescriptionEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientDescription, v))
}

// PatientDescriptionContainsFold applies the ContainsFold predicate on the "patient_description" field.
func PatientDescriptionContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientDescription, v))
}

// PatientLanguageEQ applies the EQ predicate on the "patient_language" field.
func PatientLanguageEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatientLanguage, v))
}

// PatientLanguageNEQ applies the NEQ predicate on the "patient_language" field.
func PatientLanguageNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatientLanguage, v))
}

// PatientLanguageIn applies the In predicate on the "patient_language" field.
func PatientLanguageIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatientLanguage, vs...))
}

// PatientLanguageNotIn applies the NotIn predicate on the "patient_language" field.
func PatientLanguageNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatientLanguage, vs...))
}

// PatientLanguageGT applies the GT predicate on the "patient_language" field.
func PatientLanguageGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatientLanguage, v))
}

// PatientLanguageGTE applies the GTE predicate on the "patient_language" field.
func PatientLanguageGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatientLanguage, v))
}

// PatientLanguageLT applies the LT predicate on the "patient_language" field.
func PatientLanguageLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatientLanguage, v))
}

// PatientLanguageLTE applies the LTE predicate on the "patient_language" field.
func PatientLanguageLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatientLanguage, v))
}

// PatientLanguageContains applies the Contains predicate on the "patient_language" field.
func PatientLanguageContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatientLanguage, v))
}

// PatientLanguageHasPrefix applies the HasPrefix predicate on the "patient_language" field.
func PatientLanguageHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatientLanguage, v))
}

// PatientLanguageHasSuffix applies the HasSuffix predicate on the "patient_language" field.
func PatientLanguageHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatientLanguage, v))
}

// PatientLanguageIsNil applies the IsNil predicate on the "patient_language" field.
func PatientLanguageIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldPatientLanguage))
}

// PatientLanguageNotNil applies the NotNil predicate on the "patient_language" field.
func PatientLanguageNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldPatientLanguage))
}

// PatientLanguageEqualFold applies the EqualFold predicate on the "patient_language" field.
func PatientLanguageEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatientLanguage, v))
}

// PatientLanguageContainsFold applies the ContainsFold predicate on the "patient_language" field.
func PatientLanguageContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatientLanguage, v))
}

// HasCurrentCustomer applies the HasEdge predicate on the "current_customer" edge.
func HasCurrentCustomer() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CurrentCustomerTable, CurrentCustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrentCustomerWith applies the HasEdge predicate on the "current_customer" edge with a given conditions (other predicates).
func HasCurrentCustomerWith(preds ...predicate.Customer) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newCurrentCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatientCustomers applies the HasEdge predicate on the "patient_customers" edge.
func HasPatientCustomers() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PatientCustomersTable, PatientCustomersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientCustomersWith applies the HasEdge predicate on the "patient_customers" edge with a given conditions (other predicates).
func HasPatientCustomersWith(preds ...predicate.Customer) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newPatientCustomersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSamples applies the HasEdge predicate on the "samples" edge.
func HasSamples() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SamplesTable, SamplesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSamplesWith applies the HasEdge predicate on the "samples" edge with a given conditions (other predicates).
func HasSamplesWith(preds ...predicate.Sample) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newSamplesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatientContacts applies the HasEdge predicate on the "patient_contacts" edge.
func HasPatientContacts() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PatientContactsTable, PatientContactsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientContactsWith applies the HasEdge predicate on the "patient_contacts" edge with a given conditions (other predicates).
func HasPatientContactsWith(preds ...predicate.Contact) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newPatientContactsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatientAddresses applies the HasEdge predicate on the "patient_addresses" edge.
func HasPatientAddresses() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PatientAddressesTable, PatientAddressesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientAddressesWith applies the HasEdge predicate on the "patient_addresses" edge with a given conditions (other predicates).
func HasPatientAddressesWith(preds ...predicate.Address) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newPatientAddressesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatientClinics applies the HasEdge predicate on the "patient_clinics" edge.
func HasPatientClinics() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PatientClinicsTable, PatientClinicsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientClinicsWith applies the HasEdge predicate on the "patient_clinics" edge with a given conditions (other predicates).
func HasPatientClinicsWith(preds ...predicate.Clinic) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newPatientClinicsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatientWeightHeightHistory applies the HasEdge predicate on the "patient_weight_height_history" edge.
func HasPatientWeightHeightHistory() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PatientWeightHeightHistoryTable, PatientWeightHeightHistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWeightHeightHistoryWith applies the HasEdge predicate on the "patient_weight_height_history" edge with a given conditions (other predicates).
func HasPatientWeightHeightHistoryWith(preds ...predicate.PatientWeightHeight) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newPatientWeightHeightHistoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatientSettings applies the HasEdge predicate on the "patient_settings" edge.
func HasPatientSettings() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PatientSettingsTable, PatientSettingsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientSettingsWith applies the HasEdge predicate on the "patient_settings" edge with a given conditions (other predicates).
func HasPatientSettingsWith(preds ...predicate.Setting) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newPatientSettingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Patient) predicate.Patient {
	return predicate.Patient(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Patient) predicate.Patient {
	return predicate.Patient(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Patient) predicate.Patient {
	return predicate.Patient(sql.NotPredicates(p))
}
