// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/patient"
	"coresamples/ent/patientweightheight"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PatientWeightHeight is the model entity for the PatientWeightHeight schema.
type PatientWeightHeight struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PatientID holds the value of the "patient_id" field.
	PatientID int `json:"patient_id,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight string `json:"weight,omitempty"`
	// Height holds the value of the "height" field.
	Height string `json:"height,omitempty"`
	// WeightUnit holds the value of the "weight_unit" field.
	WeightUnit string `json:"weight_unit,omitempty"`
	// HeightUnit holds the value of the "height_unit" field.
	HeightUnit string `json:"height_unit,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime time.Time `json:"created_time,omitempty"`
	// UpdatedTime holds the value of the "updated_time" field.
	UpdatedTime time.Time `json:"updated_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PatientWeightHeightQuery when eager-loading is set.
	Edges        PatientWeightHeightEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PatientWeightHeightEdges holds the relations/edges for other nodes in the graph.
type PatientWeightHeightEdges struct {
	// Patient holds the value of the patient edge.
	Patient *Patient `json:"patient,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientWeightHeightEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[0] {
		if e.Patient == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PatientWeightHeight) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case patientweightheight.FieldID, patientweightheight.FieldPatientID:
			values[i] = new(sql.NullInt64)
		case patientweightheight.FieldWeight, patientweightheight.FieldHeight, patientweightheight.FieldWeightUnit, patientweightheight.FieldHeightUnit:
			values[i] = new(sql.NullString)
		case patientweightheight.FieldCreatedTime, patientweightheight.FieldUpdatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PatientWeightHeight fields.
func (pwh *PatientWeightHeight) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case patientweightheight.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pwh.ID = int(value.Int64)
		case patientweightheight.FieldPatientID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field patient_id", values[i])
			} else if value.Valid {
				pwh.PatientID = int(value.Int64)
			}
		case patientweightheight.FieldWeight:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				pwh.Weight = value.String
			}
		case patientweightheight.FieldHeight:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				pwh.Height = value.String
			}
		case patientweightheight.FieldWeightUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field weight_unit", values[i])
			} else if value.Valid {
				pwh.WeightUnit = value.String
			}
		case patientweightheight.FieldHeightUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field height_unit", values[i])
			} else if value.Valid {
				pwh.HeightUnit = value.String
			}
		case patientweightheight.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				pwh.CreatedTime = value.Time
			}
		case patientweightheight.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				pwh.UpdatedTime = value.Time
			}
		default:
			pwh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PatientWeightHeight.
// This includes values selected through modifiers, order, etc.
func (pwh *PatientWeightHeight) Value(name string) (ent.Value, error) {
	return pwh.selectValues.Get(name)
}

// QueryPatient queries the "patient" edge of the PatientWeightHeight entity.
func (pwh *PatientWeightHeight) QueryPatient() *PatientQuery {
	return NewPatientWeightHeightClient(pwh.config).QueryPatient(pwh)
}

// Update returns a builder for updating this PatientWeightHeight.
// Note that you need to call PatientWeightHeight.Unwrap() before calling this method if this PatientWeightHeight
// was returned from a transaction, and the transaction was committed or rolled back.
func (pwh *PatientWeightHeight) Update() *PatientWeightHeightUpdateOne {
	return NewPatientWeightHeightClient(pwh.config).UpdateOne(pwh)
}

// Unwrap unwraps the PatientWeightHeight entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pwh *PatientWeightHeight) Unwrap() *PatientWeightHeight {
	_tx, ok := pwh.config.driver.(*txDriver)
	if !ok {
		panic("ent: PatientWeightHeight is not a transactional entity")
	}
	pwh.config.driver = _tx.drv
	return pwh
}

// String implements the fmt.Stringer.
func (pwh *PatientWeightHeight) String() string {
	var builder strings.Builder
	builder.WriteString("PatientWeightHeight(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pwh.ID))
	builder.WriteString("patient_id=")
	builder.WriteString(fmt.Sprintf("%v", pwh.PatientID))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(pwh.Weight)
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(pwh.Height)
	builder.WriteString(", ")
	builder.WriteString("weight_unit=")
	builder.WriteString(pwh.WeightUnit)
	builder.WriteString(", ")
	builder.WriteString("height_unit=")
	builder.WriteString(pwh.HeightUnit)
	builder.WriteString(", ")
	builder.WriteString("created_time=")
	builder.WriteString(pwh.CreatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_time=")
	builder.WriteString(pwh.UpdatedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PatientWeightHeights is a parsable slice of PatientWeightHeight.
type PatientWeightHeights []*PatientWeightHeight
