// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/clinic"
	"coresamples/ent/customer"
	"coresamples/ent/internaluser"
	"coresamples/ent/patient"
	"coresamples/ent/user"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserName sets the "user_name" field.
func (uc *UserCreate) SetUserName(s string) *UserCreate {
	uc.mutation.SetUserName(s)
	return uc
}

// SetEmailUserID sets the "email_user_id" field.
func (uc *UserCreate) SetEmailUserID(s string) *UserCreate {
	uc.mutation.SetEmailUserID(s)
	return uc
}

// SetNillableEmailUserID sets the "email_user_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmailUserID(s *string) *UserCreate {
	if s != nil {
		uc.SetEmailUserID(*s)
	}
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetTwoFactorAuthenticationSecret sets the "two_factor_authentication_secret" field.
func (uc *UserCreate) SetTwoFactorAuthenticationSecret(s string) *UserCreate {
	uc.mutation.SetTwoFactorAuthenticationSecret(s)
	return uc
}

// SetNillableTwoFactorAuthenticationSecret sets the "two_factor_authentication_secret" field if the given value is not nil.
func (uc *UserCreate) SetNillableTwoFactorAuthenticationSecret(s *string) *UserCreate {
	if s != nil {
		uc.SetTwoFactorAuthenticationSecret(*s)
	}
	return uc
}

// SetIsTwoFactorAuthenticationEnabled sets the "is_two_factor_authentication_enabled" field.
func (uc *UserCreate) SetIsTwoFactorAuthenticationEnabled(b bool) *UserCreate {
	uc.mutation.SetIsTwoFactorAuthenticationEnabled(b)
	return uc
}

// SetNillableIsTwoFactorAuthenticationEnabled sets the "is_two_factor_authentication_enabled" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsTwoFactorAuthenticationEnabled(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsTwoFactorAuthenticationEnabled(*b)
	}
	return uc
}

// SetUserGroup sets the "user_group" field.
func (uc *UserCreate) SetUserGroup(s string) *UserCreate {
	uc.mutation.SetUserGroup(s)
	return uc
}

// SetNillableUserGroup sets the "user_group" field if the given value is not nil.
func (uc *UserCreate) SetNillableUserGroup(s *string) *UserCreate {
	if s != nil {
		uc.SetUserGroup(*s)
	}
	return uc
}

// SetImportedUserWithSaltPassword sets the "imported_user_with_salt_password" field.
func (uc *UserCreate) SetImportedUserWithSaltPassword(b bool) *UserCreate {
	uc.mutation.SetImportedUserWithSaltPassword(b)
	return uc
}

// SetNillableImportedUserWithSaltPassword sets the "imported_user_with_salt_password" field if the given value is not nil.
func (uc *UserCreate) SetNillableImportedUserWithSaltPassword(b *bool) *UserCreate {
	if b != nil {
		uc.SetImportedUserWithSaltPassword(*b)
	}
	return uc
}

// SetIsActive sets the "is_active" field.
func (uc *UserCreate) SetIsActive(b bool) *UserCreate {
	uc.mutation.SetIsActive(b)
	return uc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsActive(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsActive(*b)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(i int) *UserCreate {
	uc.mutation.SetID(i)
	return uc
}

// AddClinicIDs adds the "clinic" edge to the Clinic entity by IDs.
func (uc *UserCreate) AddClinicIDs(ids ...int) *UserCreate {
	uc.mutation.AddClinicIDs(ids...)
	return uc
}

// AddClinic adds the "clinic" edges to the Clinic entity.
func (uc *UserCreate) AddClinic(c ...*Clinic) *UserCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddClinicIDs(ids...)
}

// AddCustomerIDs adds the "customer" edge to the Customer entity by IDs.
func (uc *UserCreate) AddCustomerIDs(ids ...int) *UserCreate {
	uc.mutation.AddCustomerIDs(ids...)
	return uc
}

// AddCustomer adds the "customer" edges to the Customer entity.
func (uc *UserCreate) AddCustomer(c ...*Customer) *UserCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddCustomerIDs(ids...)
}

// AddPatientIDs adds the "patient" edge to the Patient entity by IDs.
func (uc *UserCreate) AddPatientIDs(ids ...int) *UserCreate {
	uc.mutation.AddPatientIDs(ids...)
	return uc
}

// AddPatient adds the "patient" edges to the Patient entity.
func (uc *UserCreate) AddPatient(p ...*Patient) *UserCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddPatientIDs(ids...)
}

// AddInternalUserIDs adds the "internal_user" edge to the InternalUser entity by IDs.
func (uc *UserCreate) AddInternalUserIDs(ids ...int) *UserCreate {
	uc.mutation.AddInternalUserIDs(ids...)
	return uc
}

// AddInternalUser adds the "internal_user" edges to the InternalUser entity.
func (uc *UserCreate) AddInternalUser(i ...*InternalUser) *UserCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uc.AddInternalUserIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.IsTwoFactorAuthenticationEnabled(); !ok {
		v := user.DefaultIsTwoFactorAuthenticationEnabled
		uc.mutation.SetIsTwoFactorAuthenticationEnabled(v)
	}
	if _, ok := uc.mutation.ImportedUserWithSaltPassword(); !ok {
		v := user.DefaultImportedUserWithSaltPassword
		uc.mutation.SetImportedUserWithSaltPassword(v)
	}
	if _, ok := uc.mutation.IsActive(); !ok {
		v := user.DefaultIsActive
		uc.mutation.SetIsActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.UserName(); !ok {
		return &ValidationError{Name: "user_name", err: errors.New(`ent: missing required field "User.user_name"`)}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "User.password"`)}
	}
	if _, ok := uc.mutation.IsTwoFactorAuthenticationEnabled(); !ok {
		return &ValidationError{Name: "is_two_factor_authentication_enabled", err: errors.New(`ent: missing required field "User.is_two_factor_authentication_enabled"`)}
	}
	if _, ok := uc.mutation.ImportedUserWithSaltPassword(); !ok {
		return &ValidationError{Name: "imported_user_with_salt_password", err: errors.New(`ent: missing required field "User.imported_user_with_salt_password"`)}
	}
	if _, ok := uc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "User.is_active"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.UserName(); ok {
		_spec.SetField(user.FieldUserName, field.TypeString, value)
		_node.UserName = value
	}
	if value, ok := uc.mutation.EmailUserID(); ok {
		_spec.SetField(user.FieldEmailUserID, field.TypeString, value)
		_node.EmailUserID = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uc.mutation.TwoFactorAuthenticationSecret(); ok {
		_spec.SetField(user.FieldTwoFactorAuthenticationSecret, field.TypeString, value)
		_node.TwoFactorAuthenticationSecret = value
	}
	if value, ok := uc.mutation.IsTwoFactorAuthenticationEnabled(); ok {
		_spec.SetField(user.FieldIsTwoFactorAuthenticationEnabled, field.TypeBool, value)
		_node.IsTwoFactorAuthenticationEnabled = value
	}
	if value, ok := uc.mutation.UserGroup(); ok {
		_spec.SetField(user.FieldUserGroup, field.TypeString, value)
		_node.UserGroup = value
	}
	if value, ok := uc.mutation.ImportedUserWithSaltPassword(); ok {
		_spec.SetField(user.FieldImportedUserWithSaltPassword, field.TypeBool, value)
		_node.ImportedUserWithSaltPassword = value
	}
	if value, ok := uc.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if nodes := uc.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ClinicTable,
			Columns: []string{user.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CustomerTable,
			Columns: []string{user.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PatientTable,
			Columns: []string{user.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.InternalUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InternalUserTable,
			Columns: []string{user.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetUserName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetUserName(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserName sets the "user_name" field.
func (u *UserUpsert) SetUserName(v string) *UserUpsert {
	u.Set(user.FieldUserName, v)
	return u
}

// UpdateUserName sets the "user_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateUserName() *UserUpsert {
	u.SetExcluded(user.FieldUserName)
	return u
}

// SetEmailUserID sets the "email_user_id" field.
func (u *UserUpsert) SetEmailUserID(v string) *UserUpsert {
	u.Set(user.FieldEmailUserID, v)
	return u
}

// UpdateEmailUserID sets the "email_user_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmailUserID() *UserUpsert {
	u.SetExcluded(user.FieldEmailUserID)
	return u
}

// ClearEmailUserID clears the value of the "email_user_id" field.
func (u *UserUpsert) ClearEmailUserID() *UserUpsert {
	u.SetNull(user.FieldEmailUserID)
	return u
}

// SetPassword sets the "password" field.
func (u *UserUpsert) SetPassword(v string) *UserUpsert {
	u.Set(user.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsert) UpdatePassword() *UserUpsert {
	u.SetExcluded(user.FieldPassword)
	return u
}

// SetTwoFactorAuthenticationSecret sets the "two_factor_authentication_secret" field.
func (u *UserUpsert) SetTwoFactorAuthenticationSecret(v string) *UserUpsert {
	u.Set(user.FieldTwoFactorAuthenticationSecret, v)
	return u
}

// UpdateTwoFactorAuthenticationSecret sets the "two_factor_authentication_secret" field to the value that was provided on create.
func (u *UserUpsert) UpdateTwoFactorAuthenticationSecret() *UserUpsert {
	u.SetExcluded(user.FieldTwoFactorAuthenticationSecret)
	return u
}

// ClearTwoFactorAuthenticationSecret clears the value of the "two_factor_authentication_secret" field.
func (u *UserUpsert) ClearTwoFactorAuthenticationSecret() *UserUpsert {
	u.SetNull(user.FieldTwoFactorAuthenticationSecret)
	return u
}

// SetIsTwoFactorAuthenticationEnabled sets the "is_two_factor_authentication_enabled" field.
func (u *UserUpsert) SetIsTwoFactorAuthenticationEnabled(v bool) *UserUpsert {
	u.Set(user.FieldIsTwoFactorAuthenticationEnabled, v)
	return u
}

// UpdateIsTwoFactorAuthenticationEnabled sets the "is_two_factor_authentication_enabled" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsTwoFactorAuthenticationEnabled() *UserUpsert {
	u.SetExcluded(user.FieldIsTwoFactorAuthenticationEnabled)
	return u
}

// SetUserGroup sets the "user_group" field.
func (u *UserUpsert) SetUserGroup(v string) *UserUpsert {
	u.Set(user.FieldUserGroup, v)
	return u
}

// UpdateUserGroup sets the "user_group" field to the value that was provided on create.
func (u *UserUpsert) UpdateUserGroup() *UserUpsert {
	u.SetExcluded(user.FieldUserGroup)
	return u
}

// ClearUserGroup clears the value of the "user_group" field.
func (u *UserUpsert) ClearUserGroup() *UserUpsert {
	u.SetNull(user.FieldUserGroup)
	return u
}

// SetImportedUserWithSaltPassword sets the "imported_user_with_salt_password" field.
func (u *UserUpsert) SetImportedUserWithSaltPassword(v bool) *UserUpsert {
	u.Set(user.FieldImportedUserWithSaltPassword, v)
	return u
}

// UpdateImportedUserWithSaltPassword sets the "imported_user_with_salt_password" field to the value that was provided on create.
func (u *UserUpsert) UpdateImportedUserWithSaltPassword() *UserUpsert {
	u.SetExcluded(user.FieldImportedUserWithSaltPassword)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *UserUpsert) SetIsActive(v bool) *UserUpsert {
	u.Set(user.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsActive() *UserUpsert {
	u.SetExcluded(user.FieldIsActive)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(user.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserName sets the "user_name" field.
func (u *UserUpsertOne) SetUserName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUserName(v)
	})
}

// UpdateUserName sets the "user_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUserName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUserName()
	})
}

// SetEmailUserID sets the "email_user_id" field.
func (u *UserUpsertOne) SetEmailUserID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmailUserID(v)
	})
}

// UpdateEmailUserID sets the "email_user_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmailUserID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmailUserID()
	})
}

// ClearEmailUserID clears the value of the "email_user_id" field.
func (u *UserUpsertOne) ClearEmailUserID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmailUserID()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertOne) SetPassword(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePassword() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// SetTwoFactorAuthenticationSecret sets the "two_factor_authentication_secret" field.
func (u *UserUpsertOne) SetTwoFactorAuthenticationSecret(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetTwoFactorAuthenticationSecret(v)
	})
}

// UpdateTwoFactorAuthenticationSecret sets the "two_factor_authentication_secret" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateTwoFactorAuthenticationSecret() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateTwoFactorAuthenticationSecret()
	})
}

// ClearTwoFactorAuthenticationSecret clears the value of the "two_factor_authentication_secret" field.
func (u *UserUpsertOne) ClearTwoFactorAuthenticationSecret() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearTwoFactorAuthenticationSecret()
	})
}

// SetIsTwoFactorAuthenticationEnabled sets the "is_two_factor_authentication_enabled" field.
func (u *UserUpsertOne) SetIsTwoFactorAuthenticationEnabled(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsTwoFactorAuthenticationEnabled(v)
	})
}

// UpdateIsTwoFactorAuthenticationEnabled sets the "is_two_factor_authentication_enabled" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsTwoFactorAuthenticationEnabled() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsTwoFactorAuthenticationEnabled()
	})
}

// SetUserGroup sets the "user_group" field.
func (u *UserUpsertOne) SetUserGroup(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUserGroup(v)
	})
}

// UpdateUserGroup sets the "user_group" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUserGroup() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUserGroup()
	})
}

// ClearUserGroup clears the value of the "user_group" field.
func (u *UserUpsertOne) ClearUserGroup() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearUserGroup()
	})
}

// SetImportedUserWithSaltPassword sets the "imported_user_with_salt_password" field.
func (u *UserUpsertOne) SetImportedUserWithSaltPassword(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetImportedUserWithSaltPassword(v)
	})
}

// UpdateImportedUserWithSaltPassword sets the "imported_user_with_salt_password" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateImportedUserWithSaltPassword() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateImportedUserWithSaltPassword()
	})
}

// SetIsActive sets the "is_active" field.
func (u *UserUpsertOne) SetIsActive(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsActive() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsActive()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetUserName(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(user.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserName sets the "user_name" field.
func (u *UserUpsertBulk) SetUserName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUserName(v)
	})
}

// UpdateUserName sets the "user_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUserName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUserName()
	})
}

// SetEmailUserID sets the "email_user_id" field.
func (u *UserUpsertBulk) SetEmailUserID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmailUserID(v)
	})
}

// UpdateEmailUserID sets the "email_user_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmailUserID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmailUserID()
	})
}

// ClearEmailUserID clears the value of the "email_user_id" field.
func (u *UserUpsertBulk) ClearEmailUserID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmailUserID()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertBulk) SetPassword(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePassword() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// SetTwoFactorAuthenticationSecret sets the "two_factor_authentication_secret" field.
func (u *UserUpsertBulk) SetTwoFactorAuthenticationSecret(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetTwoFactorAuthenticationSecret(v)
	})
}

// UpdateTwoFactorAuthenticationSecret sets the "two_factor_authentication_secret" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateTwoFactorAuthenticationSecret() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateTwoFactorAuthenticationSecret()
	})
}

// ClearTwoFactorAuthenticationSecret clears the value of the "two_factor_authentication_secret" field.
func (u *UserUpsertBulk) ClearTwoFactorAuthenticationSecret() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearTwoFactorAuthenticationSecret()
	})
}

// SetIsTwoFactorAuthenticationEnabled sets the "is_two_factor_authentication_enabled" field.
func (u *UserUpsertBulk) SetIsTwoFactorAuthenticationEnabled(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsTwoFactorAuthenticationEnabled(v)
	})
}

// UpdateIsTwoFactorAuthenticationEnabled sets the "is_two_factor_authentication_enabled" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsTwoFactorAuthenticationEnabled() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsTwoFactorAuthenticationEnabled()
	})
}

// SetUserGroup sets the "user_group" field.
func (u *UserUpsertBulk) SetUserGroup(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUserGroup(v)
	})
}

// UpdateUserGroup sets the "user_group" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUserGroup() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUserGroup()
	})
}

// ClearUserGroup clears the value of the "user_group" field.
func (u *UserUpsertBulk) ClearUserGroup() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearUserGroup()
	})
}

// SetImportedUserWithSaltPassword sets the "imported_user_with_salt_password" field.
func (u *UserUpsertBulk) SetImportedUserWithSaltPassword(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetImportedUserWithSaltPassword(v)
	})
}

// UpdateImportedUserWithSaltPassword sets the "imported_user_with_salt_password" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateImportedUserWithSaltPassword() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateImportedUserWithSaltPassword()
	})
}

// SetIsActive sets the "is_active" field.
func (u *UserUpsertBulk) SetIsActive(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsActive() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsActive()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
