// Code generated by ent, DO NOT EDIT.

package testdetail

import (
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldLTE(FieldID, id))
}

// TestID applies equality check predicate on the "test_id" field. It's identical to TestIDEQ.
func TestID(v int) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldEQ(FieldTestID, v))
}

// TestDetailName applies equality check predicate on the "test_detail_name" field. It's identical to TestDetailNameEQ.
func TestDetailName(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldEQ(FieldTestDetailName, v))
}

// TestDetailsValue applies equality check predicate on the "test_details_value" field. It's identical to TestDetailsValueEQ.
func TestDetailsValue(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldEQ(FieldTestDetailsValue, v))
}

// IsActive applies equality check predicate on the "isActive" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldEQ(FieldIsActive, v))
}

// TestIDEQ applies the EQ predicate on the "test_id" field.
func TestIDEQ(v int) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldEQ(FieldTestID, v))
}

// TestIDNEQ applies the NEQ predicate on the "test_id" field.
func TestIDNEQ(v int) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldNEQ(FieldTestID, v))
}

// TestIDIn applies the In predicate on the "test_id" field.
func TestIDIn(vs ...int) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldIn(FieldTestID, vs...))
}

// TestIDNotIn applies the NotIn predicate on the "test_id" field.
func TestIDNotIn(vs ...int) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldNotIn(FieldTestID, vs...))
}

// TestDetailNameEQ applies the EQ predicate on the "test_detail_name" field.
func TestDetailNameEQ(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldEQ(FieldTestDetailName, v))
}

// TestDetailNameNEQ applies the NEQ predicate on the "test_detail_name" field.
func TestDetailNameNEQ(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldNEQ(FieldTestDetailName, v))
}

// TestDetailNameIn applies the In predicate on the "test_detail_name" field.
func TestDetailNameIn(vs ...string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldIn(FieldTestDetailName, vs...))
}

// TestDetailNameNotIn applies the NotIn predicate on the "test_detail_name" field.
func TestDetailNameNotIn(vs ...string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldNotIn(FieldTestDetailName, vs...))
}

// TestDetailNameGT applies the GT predicate on the "test_detail_name" field.
func TestDetailNameGT(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldGT(FieldTestDetailName, v))
}

// TestDetailNameGTE applies the GTE predicate on the "test_detail_name" field.
func TestDetailNameGTE(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldGTE(FieldTestDetailName, v))
}

// TestDetailNameLT applies the LT predicate on the "test_detail_name" field.
func TestDetailNameLT(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldLT(FieldTestDetailName, v))
}

// TestDetailNameLTE applies the LTE predicate on the "test_detail_name" field.
func TestDetailNameLTE(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldLTE(FieldTestDetailName, v))
}

// TestDetailNameContains applies the Contains predicate on the "test_detail_name" field.
func TestDetailNameContains(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldContains(FieldTestDetailName, v))
}

// TestDetailNameHasPrefix applies the HasPrefix predicate on the "test_detail_name" field.
func TestDetailNameHasPrefix(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldHasPrefix(FieldTestDetailName, v))
}

// TestDetailNameHasSuffix applies the HasSuffix predicate on the "test_detail_name" field.
func TestDetailNameHasSuffix(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldHasSuffix(FieldTestDetailName, v))
}

// TestDetailNameEqualFold applies the EqualFold predicate on the "test_detail_name" field.
func TestDetailNameEqualFold(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldEqualFold(FieldTestDetailName, v))
}

// TestDetailNameContainsFold applies the ContainsFold predicate on the "test_detail_name" field.
func TestDetailNameContainsFold(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldContainsFold(FieldTestDetailName, v))
}

// TestDetailsValueEQ applies the EQ predicate on the "test_details_value" field.
func TestDetailsValueEQ(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldEQ(FieldTestDetailsValue, v))
}

// TestDetailsValueNEQ applies the NEQ predicate on the "test_details_value" field.
func TestDetailsValueNEQ(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldNEQ(FieldTestDetailsValue, v))
}

// TestDetailsValueIn applies the In predicate on the "test_details_value" field.
func TestDetailsValueIn(vs ...string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldIn(FieldTestDetailsValue, vs...))
}

// TestDetailsValueNotIn applies the NotIn predicate on the "test_details_value" field.
func TestDetailsValueNotIn(vs ...string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldNotIn(FieldTestDetailsValue, vs...))
}

// TestDetailsValueGT applies the GT predicate on the "test_details_value" field.
func TestDetailsValueGT(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldGT(FieldTestDetailsValue, v))
}

// TestDetailsValueGTE applies the GTE predicate on the "test_details_value" field.
func TestDetailsValueGTE(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldGTE(FieldTestDetailsValue, v))
}

// TestDetailsValueLT applies the LT predicate on the "test_details_value" field.
func TestDetailsValueLT(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldLT(FieldTestDetailsValue, v))
}

// TestDetailsValueLTE applies the LTE predicate on the "test_details_value" field.
func TestDetailsValueLTE(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldLTE(FieldTestDetailsValue, v))
}

// TestDetailsValueContains applies the Contains predicate on the "test_details_value" field.
func TestDetailsValueContains(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldContains(FieldTestDetailsValue, v))
}

// TestDetailsValueHasPrefix applies the HasPrefix predicate on the "test_details_value" field.
func TestDetailsValueHasPrefix(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldHasPrefix(FieldTestDetailsValue, v))
}

// TestDetailsValueHasSuffix applies the HasSuffix predicate on the "test_details_value" field.
func TestDetailsValueHasSuffix(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldHasSuffix(FieldTestDetailsValue, v))
}

// TestDetailsValueEqualFold applies the EqualFold predicate on the "test_details_value" field.
func TestDetailsValueEqualFold(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldEqualFold(FieldTestDetailsValue, v))
}

// TestDetailsValueContainsFold applies the ContainsFold predicate on the "test_details_value" field.
func TestDetailsValueContainsFold(v string) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldContainsFold(FieldTestDetailsValue, v))
}

// IsActiveEQ applies the EQ predicate on the "isActive" field.
func IsActiveEQ(v bool) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "isActive" field.
func IsActiveNEQ(v bool) predicate.TestDetail {
	return predicate.TestDetail(sql.FieldNEQ(FieldIsActive, v))
}

// HasTest applies the HasEdge predicate on the "test" edge.
func HasTest() predicate.TestDetail {
	return predicate.TestDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TestTable, TestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestWith applies the HasEdge predicate on the "test" edge with a given conditions (other predicates).
func HasTestWith(preds ...predicate.Test) predicate.TestDetail {
	return predicate.TestDetail(func(s *sql.Selector) {
		step := newTestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TestDetail) predicate.TestDetail {
	return predicate.TestDetail(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TestDetail) predicate.TestDetail {
	return predicate.TestDetail(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TestDetail) predicate.TestDetail {
	return predicate.TestDetail(sql.NotPredicates(p))
}
