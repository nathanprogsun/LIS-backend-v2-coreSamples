// Code generated by ent, DO NOT EDIT.

package testdetail

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the testdetail type in the database.
	Label = "test_detail"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTestID holds the string denoting the test_id field in the database.
	FieldTestID = "test_id"
	// FieldTestDetailName holds the string denoting the test_detail_name field in the database.
	FieldTestDetailName = "test_detail_name"
	// FieldTestDetailsValue holds the string denoting the test_details_value field in the database.
	FieldTestDetailsValue = "test_details_value"
	// FieldIsActive holds the string denoting the isactive field in the database.
	FieldIsActive = "isActive"
	// EdgeTest holds the string denoting the test edge name in mutations.
	EdgeTest = "test"
	// TestFieldID holds the string denoting the ID field of the Test.
	TestFieldID = "test_id"
	// Table holds the table name of the testdetail in the database.
	Table = "test_detail"
	// TestTable is the table that holds the test relation/edge.
	TestTable = "test_detail"
	// TestInverseTable is the table name for the Test entity.
	// It exists in this package in order to avoid circular dependency with the "test" package.
	TestInverseTable = "test"
	// TestColumn is the table column denoting the test relation/edge.
	TestColumn = "test_id"
)

// Columns holds all SQL columns for testdetail fields.
var Columns = []string{
	FieldID,
	FieldTestID,
	FieldTestDetailName,
	FieldTestDetailsValue,
	FieldIsActive,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsActive holds the default value on creation for the "isActive" field.
	DefaultIsActive bool
)

// OrderOption defines the ordering options for the TestDetail queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTestID orders the results by the test_id field.
func ByTestID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTestID, opts...).ToFunc()
}

// ByTestDetailName orders the results by the test_detail_name field.
func ByTestDetailName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTestDetailName, opts...).ToFunc()
}

// ByTestDetailsValue orders the results by the test_details_value field.
func ByTestDetailsValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTestDetailsValue, opts...).ToFunc()
}

// ByIsActive orders the results by the isActive field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByTestField orders the results by test field.
func ByTestField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestStep(), sql.OrderByField(field, opts...))
	}
}
func newTestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestInverseTable, TestFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TestTable, TestColumn),
	)
}
