// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/address"
	"coresamples/ent/clinic"
	"coresamples/ent/customer"
	"coresamples/ent/customeraddressonclinics"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerAddressOnClinicsCreate is the builder for creating a CustomerAddressOnClinics entity.
type CustomerAddressOnClinicsCreate struct {
	config
	mutation *CustomerAddressOnClinicsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCustomerID sets the "customer_id" field.
func (caocc *CustomerAddressOnClinicsCreate) SetCustomerID(i int) *CustomerAddressOnClinicsCreate {
	caocc.mutation.SetCustomerID(i)
	return caocc
}

// SetClinicID sets the "clinic_id" field.
func (caocc *CustomerAddressOnClinicsCreate) SetClinicID(i int) *CustomerAddressOnClinicsCreate {
	caocc.mutation.SetClinicID(i)
	return caocc
}

// SetAddressID sets the "address_id" field.
func (caocc *CustomerAddressOnClinicsCreate) SetAddressID(i int) *CustomerAddressOnClinicsCreate {
	caocc.mutation.SetAddressID(i)
	return caocc
}

// SetAddressType sets the "address_type" field.
func (caocc *CustomerAddressOnClinicsCreate) SetAddressType(s string) *CustomerAddressOnClinicsCreate {
	caocc.mutation.SetAddressType(s)
	return caocc
}

// SetNillableAddressType sets the "address_type" field if the given value is not nil.
func (caocc *CustomerAddressOnClinicsCreate) SetNillableAddressType(s *string) *CustomerAddressOnClinicsCreate {
	if s != nil {
		caocc.SetAddressType(*s)
	}
	return caocc
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (caocc *CustomerAddressOnClinicsCreate) SetCustomer(c *Customer) *CustomerAddressOnClinicsCreate {
	return caocc.SetCustomerID(c.ID)
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (caocc *CustomerAddressOnClinicsCreate) SetClinic(c *Clinic) *CustomerAddressOnClinicsCreate {
	return caocc.SetClinicID(c.ID)
}

// SetAddress sets the "address" edge to the Address entity.
func (caocc *CustomerAddressOnClinicsCreate) SetAddress(a *Address) *CustomerAddressOnClinicsCreate {
	return caocc.SetAddressID(a.ID)
}

// Mutation returns the CustomerAddressOnClinicsMutation object of the builder.
func (caocc *CustomerAddressOnClinicsCreate) Mutation() *CustomerAddressOnClinicsMutation {
	return caocc.mutation
}

// Save creates the CustomerAddressOnClinics in the database.
func (caocc *CustomerAddressOnClinicsCreate) Save(ctx context.Context) (*CustomerAddressOnClinics, error) {
	return withHooks(ctx, caocc.sqlSave, caocc.mutation, caocc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (caocc *CustomerAddressOnClinicsCreate) SaveX(ctx context.Context) *CustomerAddressOnClinics {
	v, err := caocc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (caocc *CustomerAddressOnClinicsCreate) Exec(ctx context.Context) error {
	_, err := caocc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (caocc *CustomerAddressOnClinicsCreate) ExecX(ctx context.Context) {
	if err := caocc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (caocc *CustomerAddressOnClinicsCreate) check() error {
	if _, ok := caocc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "CustomerAddressOnClinics.customer_id"`)}
	}
	if _, ok := caocc.mutation.ClinicID(); !ok {
		return &ValidationError{Name: "clinic_id", err: errors.New(`ent: missing required field "CustomerAddressOnClinics.clinic_id"`)}
	}
	if _, ok := caocc.mutation.AddressID(); !ok {
		return &ValidationError{Name: "address_id", err: errors.New(`ent: missing required field "CustomerAddressOnClinics.address_id"`)}
	}
	if _, ok := caocc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "CustomerAddressOnClinics.customer"`)}
	}
	if _, ok := caocc.mutation.ClinicID(); !ok {
		return &ValidationError{Name: "clinic", err: errors.New(`ent: missing required edge "CustomerAddressOnClinics.clinic"`)}
	}
	if _, ok := caocc.mutation.AddressID(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required edge "CustomerAddressOnClinics.address"`)}
	}
	return nil
}

func (caocc *CustomerAddressOnClinicsCreate) sqlSave(ctx context.Context) (*CustomerAddressOnClinics, error) {
	if err := caocc.check(); err != nil {
		return nil, err
	}
	_node, _spec := caocc.createSpec()
	if err := sqlgraph.CreateNode(ctx, caocc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	caocc.mutation.id = &_node.ID
	caocc.mutation.done = true
	return _node, nil
}

func (caocc *CustomerAddressOnClinicsCreate) createSpec() (*CustomerAddressOnClinics, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomerAddressOnClinics{config: caocc.config}
		_spec = sqlgraph.NewCreateSpec(customeraddressonclinics.Table, sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt))
	)
	_spec.OnConflict = caocc.conflict
	if value, ok := caocc.mutation.AddressType(); ok {
		_spec.SetField(customeraddressonclinics.FieldAddressType, field.TypeString, value)
		_node.AddressType = value
	}
	if nodes := caocc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddressonclinics.CustomerTable,
			Columns: []string{customeraddressonclinics.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := caocc.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddressonclinics.ClinicTable,
			Columns: []string{customeraddressonclinics.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClinicID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := caocc.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddressonclinics.AddressTable,
			Columns: []string{customeraddressonclinics.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AddressID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CustomerAddressOnClinics.Create().
//		SetCustomerID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerAddressOnClinicsUpsert) {
//			SetCustomerID(v+v).
//		}).
//		Exec(ctx)
func (caocc *CustomerAddressOnClinicsCreate) OnConflict(opts ...sql.ConflictOption) *CustomerAddressOnClinicsUpsertOne {
	caocc.conflict = opts
	return &CustomerAddressOnClinicsUpsertOne{
		create: caocc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CustomerAddressOnClinics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (caocc *CustomerAddressOnClinicsCreate) OnConflictColumns(columns ...string) *CustomerAddressOnClinicsUpsertOne {
	caocc.conflict = append(caocc.conflict, sql.ConflictColumns(columns...))
	return &CustomerAddressOnClinicsUpsertOne{
		create: caocc,
	}
}

type (
	// CustomerAddressOnClinicsUpsertOne is the builder for "upsert"-ing
	//  one CustomerAddressOnClinics node.
	CustomerAddressOnClinicsUpsertOne struct {
		create *CustomerAddressOnClinicsCreate
	}

	// CustomerAddressOnClinicsUpsert is the "OnConflict" setter.
	CustomerAddressOnClinicsUpsert struct {
		*sql.UpdateSet
	}
)

// SetCustomerID sets the "customer_id" field.
func (u *CustomerAddressOnClinicsUpsert) SetCustomerID(v int) *CustomerAddressOnClinicsUpsert {
	u.Set(customeraddressonclinics.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CustomerAddressOnClinicsUpsert) UpdateCustomerID() *CustomerAddressOnClinicsUpsert {
	u.SetExcluded(customeraddressonclinics.FieldCustomerID)
	return u
}

// SetClinicID sets the "clinic_id" field.
func (u *CustomerAddressOnClinicsUpsert) SetClinicID(v int) *CustomerAddressOnClinicsUpsert {
	u.Set(customeraddressonclinics.FieldClinicID, v)
	return u
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *CustomerAddressOnClinicsUpsert) UpdateClinicID() *CustomerAddressOnClinicsUpsert {
	u.SetExcluded(customeraddressonclinics.FieldClinicID)
	return u
}

// SetAddressID sets the "address_id" field.
func (u *CustomerAddressOnClinicsUpsert) SetAddressID(v int) *CustomerAddressOnClinicsUpsert {
	u.Set(customeraddressonclinics.FieldAddressID, v)
	return u
}

// UpdateAddressID sets the "address_id" field to the value that was provided on create.
func (u *CustomerAddressOnClinicsUpsert) UpdateAddressID() *CustomerAddressOnClinicsUpsert {
	u.SetExcluded(customeraddressonclinics.FieldAddressID)
	return u
}

// SetAddressType sets the "address_type" field.
func (u *CustomerAddressOnClinicsUpsert) SetAddressType(v string) *CustomerAddressOnClinicsUpsert {
	u.Set(customeraddressonclinics.FieldAddressType, v)
	return u
}

// UpdateAddressType sets the "address_type" field to the value that was provided on create.
func (u *CustomerAddressOnClinicsUpsert) UpdateAddressType() *CustomerAddressOnClinicsUpsert {
	u.SetExcluded(customeraddressonclinics.FieldAddressType)
	return u
}

// ClearAddressType clears the value of the "address_type" field.
func (u *CustomerAddressOnClinicsUpsert) ClearAddressType() *CustomerAddressOnClinicsUpsert {
	u.SetNull(customeraddressonclinics.FieldAddressType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CustomerAddressOnClinics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CustomerAddressOnClinicsUpsertOne) UpdateNewValues() *CustomerAddressOnClinicsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CustomerAddressOnClinics.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CustomerAddressOnClinicsUpsertOne) Ignore() *CustomerAddressOnClinicsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerAddressOnClinicsUpsertOne) DoNothing() *CustomerAddressOnClinicsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerAddressOnClinicsCreate.OnConflict
// documentation for more info.
func (u *CustomerAddressOnClinicsUpsertOne) Update(set func(*CustomerAddressOnClinicsUpsert)) *CustomerAddressOnClinicsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerAddressOnClinicsUpsert{UpdateSet: update})
	}))
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *CustomerAddressOnClinicsUpsertOne) SetCustomerID(v int) *CustomerAddressOnClinicsUpsertOne {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CustomerAddressOnClinicsUpsertOne) UpdateCustomerID() *CustomerAddressOnClinicsUpsertOne {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.UpdateCustomerID()
	})
}

// SetClinicID sets the "clinic_id" field.
func (u *CustomerAddressOnClinicsUpsertOne) SetClinicID(v int) *CustomerAddressOnClinicsUpsertOne {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.SetClinicID(v)
	})
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *CustomerAddressOnClinicsUpsertOne) UpdateClinicID() *CustomerAddressOnClinicsUpsertOne {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.UpdateClinicID()
	})
}

// SetAddressID sets the "address_id" field.
func (u *CustomerAddressOnClinicsUpsertOne) SetAddressID(v int) *CustomerAddressOnClinicsUpsertOne {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.SetAddressID(v)
	})
}

// UpdateAddressID sets the "address_id" field to the value that was provided on create.
func (u *CustomerAddressOnClinicsUpsertOne) UpdateAddressID() *CustomerAddressOnClinicsUpsertOne {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.UpdateAddressID()
	})
}

// SetAddressType sets the "address_type" field.
func (u *CustomerAddressOnClinicsUpsertOne) SetAddressType(v string) *CustomerAddressOnClinicsUpsertOne {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.SetAddressType(v)
	})
}

// UpdateAddressType sets the "address_type" field to the value that was provided on create.
func (u *CustomerAddressOnClinicsUpsertOne) UpdateAddressType() *CustomerAddressOnClinicsUpsertOne {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.UpdateAddressType()
	})
}

// ClearAddressType clears the value of the "address_type" field.
func (u *CustomerAddressOnClinicsUpsertOne) ClearAddressType() *CustomerAddressOnClinicsUpsertOne {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.ClearAddressType()
	})
}

// Exec executes the query.
func (u *CustomerAddressOnClinicsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CustomerAddressOnClinicsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerAddressOnClinicsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CustomerAddressOnClinicsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CustomerAddressOnClinicsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CustomerAddressOnClinicsCreateBulk is the builder for creating many CustomerAddressOnClinics entities in bulk.
type CustomerAddressOnClinicsCreateBulk struct {
	config
	err      error
	builders []*CustomerAddressOnClinicsCreate
	conflict []sql.ConflictOption
}

// Save creates the CustomerAddressOnClinics entities in the database.
func (caoccb *CustomerAddressOnClinicsCreateBulk) Save(ctx context.Context) ([]*CustomerAddressOnClinics, error) {
	if caoccb.err != nil {
		return nil, caoccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(caoccb.builders))
	nodes := make([]*CustomerAddressOnClinics, len(caoccb.builders))
	mutators := make([]Mutator, len(caoccb.builders))
	for i := range caoccb.builders {
		func(i int, root context.Context) {
			builder := caoccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerAddressOnClinicsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, caoccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = caoccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, caoccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, caoccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (caoccb *CustomerAddressOnClinicsCreateBulk) SaveX(ctx context.Context) []*CustomerAddressOnClinics {
	v, err := caoccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (caoccb *CustomerAddressOnClinicsCreateBulk) Exec(ctx context.Context) error {
	_, err := caoccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (caoccb *CustomerAddressOnClinicsCreateBulk) ExecX(ctx context.Context) {
	if err := caoccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CustomerAddressOnClinics.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerAddressOnClinicsUpsert) {
//			SetCustomerID(v+v).
//		}).
//		Exec(ctx)
func (caoccb *CustomerAddressOnClinicsCreateBulk) OnConflict(opts ...sql.ConflictOption) *CustomerAddressOnClinicsUpsertBulk {
	caoccb.conflict = opts
	return &CustomerAddressOnClinicsUpsertBulk{
		create: caoccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CustomerAddressOnClinics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (caoccb *CustomerAddressOnClinicsCreateBulk) OnConflictColumns(columns ...string) *CustomerAddressOnClinicsUpsertBulk {
	caoccb.conflict = append(caoccb.conflict, sql.ConflictColumns(columns...))
	return &CustomerAddressOnClinicsUpsertBulk{
		create: caoccb,
	}
}

// CustomerAddressOnClinicsUpsertBulk is the builder for "upsert"-ing
// a bulk of CustomerAddressOnClinics nodes.
type CustomerAddressOnClinicsUpsertBulk struct {
	create *CustomerAddressOnClinicsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CustomerAddressOnClinics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CustomerAddressOnClinicsUpsertBulk) UpdateNewValues() *CustomerAddressOnClinicsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CustomerAddressOnClinics.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CustomerAddressOnClinicsUpsertBulk) Ignore() *CustomerAddressOnClinicsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerAddressOnClinicsUpsertBulk) DoNothing() *CustomerAddressOnClinicsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerAddressOnClinicsCreateBulk.OnConflict
// documentation for more info.
func (u *CustomerAddressOnClinicsUpsertBulk) Update(set func(*CustomerAddressOnClinicsUpsert)) *CustomerAddressOnClinicsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerAddressOnClinicsUpsert{UpdateSet: update})
	}))
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *CustomerAddressOnClinicsUpsertBulk) SetCustomerID(v int) *CustomerAddressOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CustomerAddressOnClinicsUpsertBulk) UpdateCustomerID() *CustomerAddressOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.UpdateCustomerID()
	})
}

// SetClinicID sets the "clinic_id" field.
func (u *CustomerAddressOnClinicsUpsertBulk) SetClinicID(v int) *CustomerAddressOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.SetClinicID(v)
	})
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *CustomerAddressOnClinicsUpsertBulk) UpdateClinicID() *CustomerAddressOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.UpdateClinicID()
	})
}

// SetAddressID sets the "address_id" field.
func (u *CustomerAddressOnClinicsUpsertBulk) SetAddressID(v int) *CustomerAddressOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.SetAddressID(v)
	})
}

// UpdateAddressID sets the "address_id" field to the value that was provided on create.
func (u *CustomerAddressOnClinicsUpsertBulk) UpdateAddressID() *CustomerAddressOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.UpdateAddressID()
	})
}

// SetAddressType sets the "address_type" field.
func (u *CustomerAddressOnClinicsUpsertBulk) SetAddressType(v string) *CustomerAddressOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.SetAddressType(v)
	})
}

// UpdateAddressType sets the "address_type" field to the value that was provided on create.
func (u *CustomerAddressOnClinicsUpsertBulk) UpdateAddressType() *CustomerAddressOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.UpdateAddressType()
	})
}

// ClearAddressType clears the value of the "address_type" field.
func (u *CustomerAddressOnClinicsUpsertBulk) ClearAddressType() *CustomerAddressOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerAddressOnClinicsUpsert) {
		s.ClearAddressType()
	})
}

// Exec executes the query.
func (u *CustomerAddressOnClinicsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CustomerAddressOnClinicsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CustomerAddressOnClinicsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerAddressOnClinicsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
