// Code generated by ent, DO NOT EDIT.

package customersettingonclinics

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the customersettingonclinics type in the database.
	Label = "customer_setting_on_clinics"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldClinicID holds the string denoting the clinic_id field in the database.
	FieldClinicID = "clinic_id"
	// FieldSettingID holds the string denoting the setting_id field in the database.
	FieldSettingID = "setting_id"
	// FieldSettingName holds the string denoting the setting_name field in the database.
	FieldSettingName = "setting_name"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeClinic holds the string denoting the clinic edge name in mutations.
	EdgeClinic = "clinic"
	// EdgeSetting holds the string denoting the setting edge name in mutations.
	EdgeSetting = "setting"
	// CustomerFieldID holds the string denoting the ID field of the Customer.
	CustomerFieldID = "customer_id"
	// ClinicFieldID holds the string denoting the ID field of the Clinic.
	ClinicFieldID = "clinic_id"
	// SettingFieldID holds the string denoting the ID field of the Setting.
	SettingFieldID = "setting_id"
	// Table holds the table name of the customersettingonclinics in the database.
	Table = "customer_setting_on_clinics"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "customer_setting_on_clinics"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customer"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_id"
	// ClinicTable is the table that holds the clinic relation/edge.
	ClinicTable = "customer_setting_on_clinics"
	// ClinicInverseTable is the table name for the Clinic entity.
	// It exists in this package in order to avoid circular dependency with the "clinic" package.
	ClinicInverseTable = "clinic"
	// ClinicColumn is the table column denoting the clinic relation/edge.
	ClinicColumn = "clinic_id"
	// SettingTable is the table that holds the setting relation/edge.
	SettingTable = "customer_setting_on_clinics"
	// SettingInverseTable is the table name for the Setting entity.
	// It exists in this package in order to avoid circular dependency with the "setting" package.
	SettingInverseTable = "setting"
	// SettingColumn is the table column denoting the setting relation/edge.
	SettingColumn = "setting_id"
)

// Columns holds all SQL columns for customersettingonclinics fields.
var Columns = []string{
	FieldID,
	FieldCustomerID,
	FieldClinicID,
	FieldSettingID,
	FieldSettingName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CustomerSettingOnClinics queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByClinicID orders the results by the clinic_id field.
func ByClinicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClinicID, opts...).ToFunc()
}

// BySettingID orders the results by the setting_id field.
func BySettingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSettingID, opts...).ToFunc()
}

// BySettingName orders the results by the setting_name field.
func BySettingName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSettingName, opts...).ToFunc()
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}

// ByClinicField orders the results by clinic field.
func ByClinicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicStep(), sql.OrderByField(field, opts...))
	}
}

// BySettingField orders the results by setting field.
func BySettingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSettingStep(), sql.OrderByField(field, opts...))
	}
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, CustomerFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
	)
}
func newClinicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicInverseTable, ClinicFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
	)
}
func newSettingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SettingInverseTable, SettingFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SettingTable, SettingColumn),
	)
}
