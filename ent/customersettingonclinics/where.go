// Code generated by ent, DO NOT EDIT.

package customersettingonclinics

import (
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldLTE(FieldID, id))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldEQ(FieldCustomerID, v))
}

// ClinicID applies equality check predicate on the "clinic_id" field. It's identical to ClinicIDEQ.
func ClinicID(v int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldEQ(FieldClinicID, v))
}

// SettingID applies equality check predicate on the "setting_id" field. It's identical to SettingIDEQ.
func SettingID(v int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldEQ(FieldSettingID, v))
}

// SettingName applies equality check predicate on the "setting_name" field. It's identical to SettingNameEQ.
func SettingName(v string) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldEQ(FieldSettingName, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldNotIn(FieldCustomerID, vs...))
}

// ClinicIDEQ applies the EQ predicate on the "clinic_id" field.
func ClinicIDEQ(v int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldEQ(FieldClinicID, v))
}

// ClinicIDNEQ applies the NEQ predicate on the "clinic_id" field.
func ClinicIDNEQ(v int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldNEQ(FieldClinicID, v))
}

// ClinicIDIn applies the In predicate on the "clinic_id" field.
func ClinicIDIn(vs ...int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldIn(FieldClinicID, vs...))
}

// ClinicIDNotIn applies the NotIn predicate on the "clinic_id" field.
func ClinicIDNotIn(vs ...int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldNotIn(FieldClinicID, vs...))
}

// SettingIDEQ applies the EQ predicate on the "setting_id" field.
func SettingIDEQ(v int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldEQ(FieldSettingID, v))
}

// SettingIDNEQ applies the NEQ predicate on the "setting_id" field.
func SettingIDNEQ(v int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldNEQ(FieldSettingID, v))
}

// SettingIDIn applies the In predicate on the "setting_id" field.
func SettingIDIn(vs ...int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldIn(FieldSettingID, vs...))
}

// SettingIDNotIn applies the NotIn predicate on the "setting_id" field.
func SettingIDNotIn(vs ...int) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldNotIn(FieldSettingID, vs...))
}

// SettingNameEQ applies the EQ predicate on the "setting_name" field.
func SettingNameEQ(v string) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldEQ(FieldSettingName, v))
}

// SettingNameNEQ applies the NEQ predicate on the "setting_name" field.
func SettingNameNEQ(v string) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldNEQ(FieldSettingName, v))
}

// SettingNameIn applies the In predicate on the "setting_name" field.
func SettingNameIn(vs ...string) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldIn(FieldSettingName, vs...))
}

// SettingNameNotIn applies the NotIn predicate on the "setting_name" field.
func SettingNameNotIn(vs ...string) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldNotIn(FieldSettingName, vs...))
}

// SettingNameGT applies the GT predicate on the "setting_name" field.
func SettingNameGT(v string) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldGT(FieldSettingName, v))
}

// SettingNameGTE applies the GTE predicate on the "setting_name" field.
func SettingNameGTE(v string) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldGTE(FieldSettingName, v))
}

// SettingNameLT applies the LT predicate on the "setting_name" field.
func SettingNameLT(v string) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldLT(FieldSettingName, v))
}

// SettingNameLTE applies the LTE predicate on the "setting_name" field.
func SettingNameLTE(v string) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldLTE(FieldSettingName, v))
}

// SettingNameContains applies the Contains predicate on the "setting_name" field.
func SettingNameContains(v string) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldContains(FieldSettingName, v))
}

// SettingNameHasPrefix applies the HasPrefix predicate on the "setting_name" field.
func SettingNameHasPrefix(v string) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldHasPrefix(FieldSettingName, v))
}

// SettingNameHasSuffix applies the HasSuffix predicate on the "setting_name" field.
func SettingNameHasSuffix(v string) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldHasSuffix(FieldSettingName, v))
}

// SettingNameEqualFold applies the EqualFold predicate on the "setting_name" field.
func SettingNameEqualFold(v string) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldEqualFold(FieldSettingName, v))
}

// SettingNameContainsFold applies the ContainsFold predicate on the "setting_name" field.
func SettingNameContainsFold(v string) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.FieldContainsFold(FieldSettingName, v))
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClinic applies the HasEdge predicate on the "clinic" edge.
func HasClinic() predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicWith applies the HasEdge predicate on the "clinic" edge with a given conditions (other predicates).
func HasClinicWith(preds ...predicate.Clinic) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(func(s *sql.Selector) {
		step := newClinicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSetting applies the HasEdge predicate on the "setting" edge.
func HasSetting() predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SettingTable, SettingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSettingWith applies the HasEdge predicate on the "setting" edge with a given conditions (other predicates).
func HasSettingWith(preds ...predicate.Setting) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(func(s *sql.Selector) {
		step := newSettingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CustomerSettingOnClinics) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CustomerSettingOnClinics) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CustomerSettingOnClinics) predicate.CustomerSettingOnClinics {
	return predicate.CustomerSettingOnClinics(sql.NotPredicates(p))
}
