// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/internaluser"
	"coresamples/ent/salesteam"
	"coresamples/ent/salestitle"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SalesTeam is the model entity for the SalesTeam schema.
type SalesTeam struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// InternalUserID holds the value of the "internal_user_id" field.
	InternalUserID int `json:"internal_user_id,omitempty"`
	// SupervisorID holds the value of the "supervisor_id" field.
	SupervisorID int `json:"supervisor_id,omitempty"`
	// TitleID holds the value of the "title_id" field.
	TitleID int `json:"title_id,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime time.Time `json:"created_time,omitempty"`
	// UpdatedTime holds the value of the "updated_time" field.
	UpdatedTime time.Time `json:"updated_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SalesTeamQuery when eager-loading is set.
	Edges        SalesTeamEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SalesTeamEdges holds the relations/edges for other nodes in the graph.
type SalesTeamEdges struct {
	// Subordinates holds the value of the subordinates edge.
	Subordinates []*SalesTeam `json:"subordinates,omitempty"`
	// Supervisor holds the value of the supervisor edge.
	Supervisor *SalesTeam `json:"supervisor,omitempty"`
	// InternalUser holds the value of the internal_user edge.
	InternalUser *InternalUser `json:"internal_user,omitempty"`
	// Title holds the value of the title edge.
	Title *SalesTitle `json:"title,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// SubordinatesOrErr returns the Subordinates value or an error if the edge
// was not loaded in eager-loading.
func (e SalesTeamEdges) SubordinatesOrErr() ([]*SalesTeam, error) {
	if e.loadedTypes[0] {
		return e.Subordinates, nil
	}
	return nil, &NotLoadedError{edge: "subordinates"}
}

// SupervisorOrErr returns the Supervisor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SalesTeamEdges) SupervisorOrErr() (*SalesTeam, error) {
	if e.loadedTypes[1] {
		if e.Supervisor == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: salesteam.Label}
		}
		return e.Supervisor, nil
	}
	return nil, &NotLoadedError{edge: "supervisor"}
}

// InternalUserOrErr returns the InternalUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SalesTeamEdges) InternalUserOrErr() (*InternalUser, error) {
	if e.loadedTypes[2] {
		if e.InternalUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: internaluser.Label}
		}
		return e.InternalUser, nil
	}
	return nil, &NotLoadedError{edge: "internal_user"}
}

// TitleOrErr returns the Title value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SalesTeamEdges) TitleOrErr() (*SalesTitle, error) {
	if e.loadedTypes[3] {
		if e.Title == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: salestitle.Label}
		}
		return e.Title, nil
	}
	return nil, &NotLoadedError{edge: "title"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SalesTeam) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case salesteam.FieldID, salesteam.FieldInternalUserID, salesteam.FieldSupervisorID, salesteam.FieldTitleID:
			values[i] = new(sql.NullInt64)
		case salesteam.FieldCreatedTime, salesteam.FieldUpdatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SalesTeam fields.
func (st *SalesTeam) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case salesteam.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case salesteam.FieldInternalUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field internal_user_id", values[i])
			} else if value.Valid {
				st.InternalUserID = int(value.Int64)
			}
		case salesteam.FieldSupervisorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field supervisor_id", values[i])
			} else if value.Valid {
				st.SupervisorID = int(value.Int64)
			}
		case salesteam.FieldTitleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field title_id", values[i])
			} else if value.Valid {
				st.TitleID = int(value.Int64)
			}
		case salesteam.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				st.CreatedTime = value.Time
			}
		case salesteam.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				st.UpdatedTime = value.Time
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SalesTeam.
// This includes values selected through modifiers, order, etc.
func (st *SalesTeam) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// QuerySubordinates queries the "subordinates" edge of the SalesTeam entity.
func (st *SalesTeam) QuerySubordinates() *SalesTeamQuery {
	return NewSalesTeamClient(st.config).QuerySubordinates(st)
}

// QuerySupervisor queries the "supervisor" edge of the SalesTeam entity.
func (st *SalesTeam) QuerySupervisor() *SalesTeamQuery {
	return NewSalesTeamClient(st.config).QuerySupervisor(st)
}

// QueryInternalUser queries the "internal_user" edge of the SalesTeam entity.
func (st *SalesTeam) QueryInternalUser() *InternalUserQuery {
	return NewSalesTeamClient(st.config).QueryInternalUser(st)
}

// QueryTitle queries the "title" edge of the SalesTeam entity.
func (st *SalesTeam) QueryTitle() *SalesTitleQuery {
	return NewSalesTeamClient(st.config).QueryTitle(st)
}

// Update returns a builder for updating this SalesTeam.
// Note that you need to call SalesTeam.Unwrap() before calling this method if this SalesTeam
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SalesTeam) Update() *SalesTeamUpdateOne {
	return NewSalesTeamClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the SalesTeam entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SalesTeam) Unwrap() *SalesTeam {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SalesTeam is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SalesTeam) String() string {
	var builder strings.Builder
	builder.WriteString("SalesTeam(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("internal_user_id=")
	builder.WriteString(fmt.Sprintf("%v", st.InternalUserID))
	builder.WriteString(", ")
	builder.WriteString("supervisor_id=")
	builder.WriteString(fmt.Sprintf("%v", st.SupervisorID))
	builder.WriteString(", ")
	builder.WriteString("title_id=")
	builder.WriteString(fmt.Sprintf("%v", st.TitleID))
	builder.WriteString(", ")
	builder.WriteString("created_time=")
	builder.WriteString(st.CreatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_time=")
	builder.WriteString(st.UpdatedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SalesTeams is a parsable slice of SalesTeam.
type SalesTeams []*SalesTeam
