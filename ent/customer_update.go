// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/address"
	"coresamples/ent/betaprogramparticipation"
	"coresamples/ent/clinic"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/customeraddressonclinics"
	"coresamples/ent/customercontactonclinics"
	"coresamples/ent/customersettingonclinics"
	"coresamples/ent/internaluser"
	"coresamples/ent/orderinfo"
	"coresamples/ent/patient"
	"coresamples/ent/predicate"
	"coresamples/ent/sample"
	"coresamples/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerMutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *CustomerUpdate) SetUserID(i int) *CustomerUpdate {
	cu.mutation.SetUserID(i)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableUserID(i *int) *CustomerUpdate {
	if i != nil {
		cu.SetUserID(*i)
	}
	return cu
}

// ClearUserID clears the value of the "user_id" field.
func (cu *CustomerUpdate) ClearUserID() *CustomerUpdate {
	cu.mutation.ClearUserID()
	return cu
}

// SetCustomerType sets the "customer_type" field.
func (cu *CustomerUpdate) SetCustomerType(s string) *CustomerUpdate {
	cu.mutation.SetCustomerType(s)
	return cu
}

// SetNillableCustomerType sets the "customer_type" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCustomerType(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetCustomerType(*s)
	}
	return cu
}

// SetCustomerFirstName sets the "customer_first_name" field.
func (cu *CustomerUpdate) SetCustomerFirstName(s string) *CustomerUpdate {
	cu.mutation.SetCustomerFirstName(s)
	return cu
}

// SetNillableCustomerFirstName sets the "customer_first_name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCustomerFirstName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetCustomerFirstName(*s)
	}
	return cu
}

// ClearCustomerFirstName clears the value of the "customer_first_name" field.
func (cu *CustomerUpdate) ClearCustomerFirstName() *CustomerUpdate {
	cu.mutation.ClearCustomerFirstName()
	return cu
}

// SetCustomerLastName sets the "customer_last_name" field.
func (cu *CustomerUpdate) SetCustomerLastName(s string) *CustomerUpdate {
	cu.mutation.SetCustomerLastName(s)
	return cu
}

// SetNillableCustomerLastName sets the "customer_last_name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCustomerLastName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetCustomerLastName(*s)
	}
	return cu
}

// ClearCustomerLastName clears the value of the "customer_last_name" field.
func (cu *CustomerUpdate) ClearCustomerLastName() *CustomerUpdate {
	cu.mutation.ClearCustomerLastName()
	return cu
}

// SetCustomerMiddleName sets the "customer_middle_name" field.
func (cu *CustomerUpdate) SetCustomerMiddleName(s string) *CustomerUpdate {
	cu.mutation.SetCustomerMiddleName(s)
	return cu
}

// SetNillableCustomerMiddleName sets the "customer_middle_name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCustomerMiddleName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetCustomerMiddleName(*s)
	}
	return cu
}

// ClearCustomerMiddleName clears the value of the "customer_middle_name" field.
func (cu *CustomerUpdate) ClearCustomerMiddleName() *CustomerUpdate {
	cu.mutation.ClearCustomerMiddleName()
	return cu
}

// SetCustomerTypeID sets the "customer_type_id" field.
func (cu *CustomerUpdate) SetCustomerTypeID(s string) *CustomerUpdate {
	cu.mutation.SetCustomerTypeID(s)
	return cu
}

// SetNillableCustomerTypeID sets the "customer_type_id" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCustomerTypeID(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetCustomerTypeID(*s)
	}
	return cu
}

// ClearCustomerTypeID clears the value of the "customer_type_id" field.
func (cu *CustomerUpdate) ClearCustomerTypeID() *CustomerUpdate {
	cu.mutation.ClearCustomerTypeID()
	return cu
}

// SetCustomerSuffix sets the "customer_suffix" field.
func (cu *CustomerUpdate) SetCustomerSuffix(s string) *CustomerUpdate {
	cu.mutation.SetCustomerSuffix(s)
	return cu
}

// SetNillableCustomerSuffix sets the "customer_suffix" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCustomerSuffix(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetCustomerSuffix(*s)
	}
	return cu
}

// ClearCustomerSuffix clears the value of the "customer_suffix" field.
func (cu *CustomerUpdate) ClearCustomerSuffix() *CustomerUpdate {
	cu.mutation.ClearCustomerSuffix()
	return cu
}

// SetCustomerSamplesReceived sets the "customer_samples_received" field.
func (cu *CustomerUpdate) SetCustomerSamplesReceived(s string) *CustomerUpdate {
	cu.mutation.SetCustomerSamplesReceived(s)
	return cu
}

// SetNillableCustomerSamplesReceived sets the "customer_samples_received" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCustomerSamplesReceived(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetCustomerSamplesReceived(*s)
	}
	return cu
}

// ClearCustomerSamplesReceived clears the value of the "customer_samples_received" field.
func (cu *CustomerUpdate) ClearCustomerSamplesReceived() *CustomerUpdate {
	cu.mutation.ClearCustomerSamplesReceived()
	return cu
}

// SetCustomerRequestSubmitTime sets the "customer_request_submit_time" field.
func (cu *CustomerUpdate) SetCustomerRequestSubmitTime(t time.Time) *CustomerUpdate {
	cu.mutation.SetCustomerRequestSubmitTime(t)
	return cu
}

// SetNillableCustomerRequestSubmitTime sets the "customer_request_submit_time" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCustomerRequestSubmitTime(t *time.Time) *CustomerUpdate {
	if t != nil {
		cu.SetCustomerRequestSubmitTime(*t)
	}
	return cu
}

// ClearCustomerRequestSubmitTime clears the value of the "customer_request_submit_time" field.
func (cu *CustomerUpdate) ClearCustomerRequestSubmitTime() *CustomerUpdate {
	cu.mutation.ClearCustomerRequestSubmitTime()
	return cu
}

// SetCustomerSignupTime sets the "customer_signup_time" field.
func (cu *CustomerUpdate) SetCustomerSignupTime(t time.Time) *CustomerUpdate {
	cu.mutation.SetCustomerSignupTime(t)
	return cu
}

// SetNillableCustomerSignupTime sets the "customer_signup_time" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCustomerSignupTime(t *time.Time) *CustomerUpdate {
	if t != nil {
		cu.SetCustomerSignupTime(*t)
	}
	return cu
}

// ClearCustomerSignupTime clears the value of the "customer_signup_time" field.
func (cu *CustomerUpdate) ClearCustomerSignupTime() *CustomerUpdate {
	cu.mutation.ClearCustomerSignupTime()
	return cu
}

// SetIsActive sets the "is_active" field.
func (cu *CustomerUpdate) SetIsActive(b bool) *CustomerUpdate {
	cu.mutation.SetIsActive(b)
	return cu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableIsActive(b *bool) *CustomerUpdate {
	if b != nil {
		cu.SetIsActive(*b)
	}
	return cu
}

// SetSalesID sets the "sales_id" field.
func (cu *CustomerUpdate) SetSalesID(i int) *CustomerUpdate {
	cu.mutation.SetSalesID(i)
	return cu
}

// SetNillableSalesID sets the "sales_id" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableSalesID(i *int) *CustomerUpdate {
	if i != nil {
		cu.SetSalesID(*i)
	}
	return cu
}

// ClearSalesID clears the value of the "sales_id" field.
func (cu *CustomerUpdate) ClearSalesID() *CustomerUpdate {
	cu.mutation.ClearSalesID()
	return cu
}

// SetCustomerNpiNumber sets the "customer_npi_number" field.
func (cu *CustomerUpdate) SetCustomerNpiNumber(s string) *CustomerUpdate {
	cu.mutation.SetCustomerNpiNumber(s)
	return cu
}

// SetNillableCustomerNpiNumber sets the "customer_npi_number" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCustomerNpiNumber(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetCustomerNpiNumber(*s)
	}
	return cu
}

// ClearCustomerNpiNumber clears the value of the "customer_npi_number" field.
func (cu *CustomerUpdate) ClearCustomerNpiNumber() *CustomerUpdate {
	cu.mutation.ClearCustomerNpiNumber()
	return cu
}

// SetReferralSource sets the "referral_source" field.
func (cu *CustomerUpdate) SetReferralSource(s string) *CustomerUpdate {
	cu.mutation.SetReferralSource(s)
	return cu
}

// SetNillableReferralSource sets the "referral_source" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableReferralSource(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetReferralSource(*s)
	}
	return cu
}

// ClearReferralSource clears the value of the "referral_source" field.
func (cu *CustomerUpdate) ClearReferralSource() *CustomerUpdate {
	cu.mutation.ClearReferralSource()
	return cu
}

// SetOrderPlacementAllowed sets the "order_placement_allowed" field.
func (cu *CustomerUpdate) SetOrderPlacementAllowed(b bool) *CustomerUpdate {
	cu.mutation.SetOrderPlacementAllowed(b)
	return cu
}

// SetNillableOrderPlacementAllowed sets the "order_placement_allowed" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableOrderPlacementAllowed(b *bool) *CustomerUpdate {
	if b != nil {
		cu.SetOrderPlacementAllowed(*b)
	}
	return cu
}

// ClearOrderPlacementAllowed clears the value of the "order_placement_allowed" field.
func (cu *CustomerUpdate) ClearOrderPlacementAllowed() *CustomerUpdate {
	cu.mutation.ClearOrderPlacementAllowed()
	return cu
}

// SetBetaProgramEnabled sets the "beta_program_enabled" field.
func (cu *CustomerUpdate) SetBetaProgramEnabled(b bool) *CustomerUpdate {
	cu.mutation.SetBetaProgramEnabled(b)
	return cu
}

// SetNillableBetaProgramEnabled sets the "beta_program_enabled" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableBetaProgramEnabled(b *bool) *CustomerUpdate {
	if b != nil {
		cu.SetBetaProgramEnabled(*b)
	}
	return cu
}

// ClearBetaProgramEnabled clears the value of the "beta_program_enabled" field.
func (cu *CustomerUpdate) ClearBetaProgramEnabled() *CustomerUpdate {
	cu.mutation.ClearBetaProgramEnabled()
	return cu
}

// SetOnboardingQuestionnaireFilledOn sets the "onboarding_questionnaire_filled_on" field.
func (cu *CustomerUpdate) SetOnboardingQuestionnaireFilledOn(t time.Time) *CustomerUpdate {
	cu.mutation.SetOnboardingQuestionnaireFilledOn(t)
	return cu
}

// SetNillableOnboardingQuestionnaireFilledOn sets the "onboarding_questionnaire_filled_on" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableOnboardingQuestionnaireFilledOn(t *time.Time) *CustomerUpdate {
	if t != nil {
		cu.SetOnboardingQuestionnaireFilledOn(*t)
	}
	return cu
}

// ClearOnboardingQuestionnaireFilledOn clears the value of the "onboarding_questionnaire_filled_on" field.
func (cu *CustomerUpdate) ClearOnboardingQuestionnaireFilledOn() *CustomerUpdate {
	cu.mutation.ClearOnboardingQuestionnaireFilledOn()
	return cu
}

// AddSampleIDs adds the "samples" edge to the Sample entity by IDs.
func (cu *CustomerUpdate) AddSampleIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddSampleIDs(ids...)
	return cu
}

// AddSamples adds the "samples" edges to the Sample entity.
func (cu *CustomerUpdate) AddSamples(s ...*Sample) *CustomerUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddSampleIDs(ids...)
}

// AddCustomerContactIDs adds the "customer_contacts" edge to the Contact entity by IDs.
func (cu *CustomerUpdate) AddCustomerContactIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddCustomerContactIDs(ids...)
	return cu
}

// AddCustomerContacts adds the "customer_contacts" edges to the Contact entity.
func (cu *CustomerUpdate) AddCustomerContacts(c ...*Contact) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCustomerContactIDs(ids...)
}

// AddCustomerAddressIDs adds the "customer_addresses" edge to the Address entity by IDs.
func (cu *CustomerUpdate) AddCustomerAddressIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddCustomerAddressIDs(ids...)
	return cu
}

// AddCustomerAddresses adds the "customer_addresses" edges to the Address entity.
func (cu *CustomerUpdate) AddCustomerAddresses(a ...*Address) *CustomerUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddCustomerAddressIDs(ids...)
}

// AddClinicIDs adds the "clinics" edge to the Clinic entity by IDs.
func (cu *CustomerUpdate) AddClinicIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddClinicIDs(ids...)
	return cu
}

// AddClinics adds the "clinics" edges to the Clinic entity.
func (cu *CustomerUpdate) AddClinics(c ...*Clinic) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddClinicIDs(ids...)
}

// SetSales sets the "sales" edge to the InternalUser entity.
func (cu *CustomerUpdate) SetSales(i *InternalUser) *CustomerUpdate {
	return cu.SetSalesID(i.ID)
}

// SetUser sets the "user" edge to the User entity.
func (cu *CustomerUpdate) SetUser(u *User) *CustomerUpdate {
	return cu.SetUserID(u.ID)
}

// AddOrderIDs adds the "orders" edge to the OrderInfo entity by IDs.
func (cu *CustomerUpdate) AddOrderIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddOrderIDs(ids...)
	return cu
}

// AddOrders adds the "orders" edges to the OrderInfo entity.
func (cu *CustomerUpdate) AddOrders(o ...*OrderInfo) *CustomerUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.AddOrderIDs(ids...)
}

// AddCurrentPatientIDs adds the "current_patients" edge to the Patient entity by IDs.
func (cu *CustomerUpdate) AddCurrentPatientIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddCurrentPatientIDs(ids...)
	return cu
}

// AddCurrentPatients adds the "current_patients" edges to the Patient entity.
func (cu *CustomerUpdate) AddCurrentPatients(p ...*Patient) *CustomerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddCurrentPatientIDs(ids...)
}

// AddPatientIDs adds the "patients" edge to the Patient entity by IDs.
func (cu *CustomerUpdate) AddPatientIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddPatientIDs(ids...)
	return cu
}

// AddPatients adds the "patients" edges to the Patient entity.
func (cu *CustomerUpdate) AddPatients(p ...*Patient) *CustomerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPatientIDs(ids...)
}

// AddCustomerBetaProgramParticipationIDs adds the "customer_beta_program_participations" edge to the BetaProgramParticipation entity by IDs.
func (cu *CustomerUpdate) AddCustomerBetaProgramParticipationIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddCustomerBetaProgramParticipationIDs(ids...)
	return cu
}

// AddCustomerBetaProgramParticipations adds the "customer_beta_program_participations" edges to the BetaProgramParticipation entity.
func (cu *CustomerUpdate) AddCustomerBetaProgramParticipations(b ...*BetaProgramParticipation) *CustomerUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.AddCustomerBetaProgramParticipationIDs(ids...)
}

// AddCustomerSettingsOnClinicIDs adds the "customer_settings_on_clinics" edge to the CustomerSettingOnClinics entity by IDs.
func (cu *CustomerUpdate) AddCustomerSettingsOnClinicIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddCustomerSettingsOnClinicIDs(ids...)
	return cu
}

// AddCustomerSettingsOnClinics adds the "customer_settings_on_clinics" edges to the CustomerSettingOnClinics entity.
func (cu *CustomerUpdate) AddCustomerSettingsOnClinics(c ...*CustomerSettingOnClinics) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCustomerSettingsOnClinicIDs(ids...)
}

// AddCustomerAddressesOnClinicIDs adds the "customer_addresses_on_clinics" edge to the CustomerAddressOnClinics entity by IDs.
func (cu *CustomerUpdate) AddCustomerAddressesOnClinicIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddCustomerAddressesOnClinicIDs(ids...)
	return cu
}

// AddCustomerAddressesOnClinics adds the "customer_addresses_on_clinics" edges to the CustomerAddressOnClinics entity.
func (cu *CustomerUpdate) AddCustomerAddressesOnClinics(c ...*CustomerAddressOnClinics) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCustomerAddressesOnClinicIDs(ids...)
}

// AddCustomerContactsOnClinicIDs adds the "customer_contacts_on_clinics" edge to the CustomerContactOnClinics entity by IDs.
func (cu *CustomerUpdate) AddCustomerContactsOnClinicIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddCustomerContactsOnClinicIDs(ids...)
	return cu
}

// AddCustomerContactsOnClinics adds the "customer_contacts_on_clinics" edges to the CustomerContactOnClinics entity.
func (cu *CustomerUpdate) AddCustomerContactsOnClinics(c ...*CustomerContactOnClinics) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCustomerContactsOnClinicIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// ClearSamples clears all "samples" edges to the Sample entity.
func (cu *CustomerUpdate) ClearSamples() *CustomerUpdate {
	cu.mutation.ClearSamples()
	return cu
}

// RemoveSampleIDs removes the "samples" edge to Sample entities by IDs.
func (cu *CustomerUpdate) RemoveSampleIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveSampleIDs(ids...)
	return cu
}

// RemoveSamples removes "samples" edges to Sample entities.
func (cu *CustomerUpdate) RemoveSamples(s ...*Sample) *CustomerUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveSampleIDs(ids...)
}

// ClearCustomerContacts clears all "customer_contacts" edges to the Contact entity.
func (cu *CustomerUpdate) ClearCustomerContacts() *CustomerUpdate {
	cu.mutation.ClearCustomerContacts()
	return cu
}

// RemoveCustomerContactIDs removes the "customer_contacts" edge to Contact entities by IDs.
func (cu *CustomerUpdate) RemoveCustomerContactIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveCustomerContactIDs(ids...)
	return cu
}

// RemoveCustomerContacts removes "customer_contacts" edges to Contact entities.
func (cu *CustomerUpdate) RemoveCustomerContacts(c ...*Contact) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCustomerContactIDs(ids...)
}

// ClearCustomerAddresses clears all "customer_addresses" edges to the Address entity.
func (cu *CustomerUpdate) ClearCustomerAddresses() *CustomerUpdate {
	cu.mutation.ClearCustomerAddresses()
	return cu
}

// RemoveCustomerAddressIDs removes the "customer_addresses" edge to Address entities by IDs.
func (cu *CustomerUpdate) RemoveCustomerAddressIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveCustomerAddressIDs(ids...)
	return cu
}

// RemoveCustomerAddresses removes "customer_addresses" edges to Address entities.
func (cu *CustomerUpdate) RemoveCustomerAddresses(a ...*Address) *CustomerUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveCustomerAddressIDs(ids...)
}

// ClearClinics clears all "clinics" edges to the Clinic entity.
func (cu *CustomerUpdate) ClearClinics() *CustomerUpdate {
	cu.mutation.ClearClinics()
	return cu
}

// RemoveClinicIDs removes the "clinics" edge to Clinic entities by IDs.
func (cu *CustomerUpdate) RemoveClinicIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveClinicIDs(ids...)
	return cu
}

// RemoveClinics removes "clinics" edges to Clinic entities.
func (cu *CustomerUpdate) RemoveClinics(c ...*Clinic) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveClinicIDs(ids...)
}

// ClearSales clears the "sales" edge to the InternalUser entity.
func (cu *CustomerUpdate) ClearSales() *CustomerUpdate {
	cu.mutation.ClearSales()
	return cu
}

// ClearUser clears the "user" edge to the User entity.
func (cu *CustomerUpdate) ClearUser() *CustomerUpdate {
	cu.mutation.ClearUser()
	return cu
}

// ClearOrders clears all "orders" edges to the OrderInfo entity.
func (cu *CustomerUpdate) ClearOrders() *CustomerUpdate {
	cu.mutation.ClearOrders()
	return cu
}

// RemoveOrderIDs removes the "orders" edge to OrderInfo entities by IDs.
func (cu *CustomerUpdate) RemoveOrderIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveOrderIDs(ids...)
	return cu
}

// RemoveOrders removes "orders" edges to OrderInfo entities.
func (cu *CustomerUpdate) RemoveOrders(o ...*OrderInfo) *CustomerUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.RemoveOrderIDs(ids...)
}

// ClearCurrentPatients clears all "current_patients" edges to the Patient entity.
func (cu *CustomerUpdate) ClearCurrentPatients() *CustomerUpdate {
	cu.mutation.ClearCurrentPatients()
	return cu
}

// RemoveCurrentPatientIDs removes the "current_patients" edge to Patient entities by IDs.
func (cu *CustomerUpdate) RemoveCurrentPatientIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveCurrentPatientIDs(ids...)
	return cu
}

// RemoveCurrentPatients removes "current_patients" edges to Patient entities.
func (cu *CustomerUpdate) RemoveCurrentPatients(p ...*Patient) *CustomerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveCurrentPatientIDs(ids...)
}

// ClearPatients clears all "patients" edges to the Patient entity.
func (cu *CustomerUpdate) ClearPatients() *CustomerUpdate {
	cu.mutation.ClearPatients()
	return cu
}

// RemovePatientIDs removes the "patients" edge to Patient entities by IDs.
func (cu *CustomerUpdate) RemovePatientIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemovePatientIDs(ids...)
	return cu
}

// RemovePatients removes "patients" edges to Patient entities.
func (cu *CustomerUpdate) RemovePatients(p ...*Patient) *CustomerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePatientIDs(ids...)
}

// ClearCustomerBetaProgramParticipations clears all "customer_beta_program_participations" edges to the BetaProgramParticipation entity.
func (cu *CustomerUpdate) ClearCustomerBetaProgramParticipations() *CustomerUpdate {
	cu.mutation.ClearCustomerBetaProgramParticipations()
	return cu
}

// RemoveCustomerBetaProgramParticipationIDs removes the "customer_beta_program_participations" edge to BetaProgramParticipation entities by IDs.
func (cu *CustomerUpdate) RemoveCustomerBetaProgramParticipationIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveCustomerBetaProgramParticipationIDs(ids...)
	return cu
}

// RemoveCustomerBetaProgramParticipations removes "customer_beta_program_participations" edges to BetaProgramParticipation entities.
func (cu *CustomerUpdate) RemoveCustomerBetaProgramParticipations(b ...*BetaProgramParticipation) *CustomerUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.RemoveCustomerBetaProgramParticipationIDs(ids...)
}

// ClearCustomerSettingsOnClinics clears all "customer_settings_on_clinics" edges to the CustomerSettingOnClinics entity.
func (cu *CustomerUpdate) ClearCustomerSettingsOnClinics() *CustomerUpdate {
	cu.mutation.ClearCustomerSettingsOnClinics()
	return cu
}

// RemoveCustomerSettingsOnClinicIDs removes the "customer_settings_on_clinics" edge to CustomerSettingOnClinics entities by IDs.
func (cu *CustomerUpdate) RemoveCustomerSettingsOnClinicIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveCustomerSettingsOnClinicIDs(ids...)
	return cu
}

// RemoveCustomerSettingsOnClinics removes "customer_settings_on_clinics" edges to CustomerSettingOnClinics entities.
func (cu *CustomerUpdate) RemoveCustomerSettingsOnClinics(c ...*CustomerSettingOnClinics) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCustomerSettingsOnClinicIDs(ids...)
}

// ClearCustomerAddressesOnClinics clears all "customer_addresses_on_clinics" edges to the CustomerAddressOnClinics entity.
func (cu *CustomerUpdate) ClearCustomerAddressesOnClinics() *CustomerUpdate {
	cu.mutation.ClearCustomerAddressesOnClinics()
	return cu
}

// RemoveCustomerAddressesOnClinicIDs removes the "customer_addresses_on_clinics" edge to CustomerAddressOnClinics entities by IDs.
func (cu *CustomerUpdate) RemoveCustomerAddressesOnClinicIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveCustomerAddressesOnClinicIDs(ids...)
	return cu
}

// RemoveCustomerAddressesOnClinics removes "customer_addresses_on_clinics" edges to CustomerAddressOnClinics entities.
func (cu *CustomerUpdate) RemoveCustomerAddressesOnClinics(c ...*CustomerAddressOnClinics) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCustomerAddressesOnClinicIDs(ids...)
}

// ClearCustomerContactsOnClinics clears all "customer_contacts_on_clinics" edges to the CustomerContactOnClinics entity.
func (cu *CustomerUpdate) ClearCustomerContactsOnClinics() *CustomerUpdate {
	cu.mutation.ClearCustomerContactsOnClinics()
	return cu
}

// RemoveCustomerContactsOnClinicIDs removes the "customer_contacts_on_clinics" edge to CustomerContactOnClinics entities by IDs.
func (cu *CustomerUpdate) RemoveCustomerContactsOnClinicIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveCustomerContactsOnClinicIDs(ids...)
	return cu
}

// RemoveCustomerContactsOnClinics removes "customer_contacts_on_clinics" edges to CustomerContactOnClinics entities.
func (cu *CustomerUpdate) RemoveCustomerContactsOnClinics(c ...*CustomerContactOnClinics) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCustomerContactsOnClinicIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CustomerType(); ok {
		_spec.SetField(customer.FieldCustomerType, field.TypeString, value)
	}
	if value, ok := cu.mutation.CustomerFirstName(); ok {
		_spec.SetField(customer.FieldCustomerFirstName, field.TypeString, value)
	}
	if cu.mutation.CustomerFirstNameCleared() {
		_spec.ClearField(customer.FieldCustomerFirstName, field.TypeString)
	}
	if value, ok := cu.mutation.CustomerLastName(); ok {
		_spec.SetField(customer.FieldCustomerLastName, field.TypeString, value)
	}
	if cu.mutation.CustomerLastNameCleared() {
		_spec.ClearField(customer.FieldCustomerLastName, field.TypeString)
	}
	if value, ok := cu.mutation.CustomerMiddleName(); ok {
		_spec.SetField(customer.FieldCustomerMiddleName, field.TypeString, value)
	}
	if cu.mutation.CustomerMiddleNameCleared() {
		_spec.ClearField(customer.FieldCustomerMiddleName, field.TypeString)
	}
	if value, ok := cu.mutation.CustomerTypeID(); ok {
		_spec.SetField(customer.FieldCustomerTypeID, field.TypeString, value)
	}
	if cu.mutation.CustomerTypeIDCleared() {
		_spec.ClearField(customer.FieldCustomerTypeID, field.TypeString)
	}
	if value, ok := cu.mutation.CustomerSuffix(); ok {
		_spec.SetField(customer.FieldCustomerSuffix, field.TypeString, value)
	}
	if cu.mutation.CustomerSuffixCleared() {
		_spec.ClearField(customer.FieldCustomerSuffix, field.TypeString)
	}
	if value, ok := cu.mutation.CustomerSamplesReceived(); ok {
		_spec.SetField(customer.FieldCustomerSamplesReceived, field.TypeString, value)
	}
	if cu.mutation.CustomerSamplesReceivedCleared() {
		_spec.ClearField(customer.FieldCustomerSamplesReceived, field.TypeString)
	}
	if value, ok := cu.mutation.CustomerRequestSubmitTime(); ok {
		_spec.SetField(customer.FieldCustomerRequestSubmitTime, field.TypeTime, value)
	}
	if cu.mutation.CustomerRequestSubmitTimeCleared() {
		_spec.ClearField(customer.FieldCustomerRequestSubmitTime, field.TypeTime)
	}
	if value, ok := cu.mutation.CustomerSignupTime(); ok {
		_spec.SetField(customer.FieldCustomerSignupTime, field.TypeTime, value)
	}
	if cu.mutation.CustomerSignupTimeCleared() {
		_spec.ClearField(customer.FieldCustomerSignupTime, field.TypeTime)
	}
	if value, ok := cu.mutation.IsActive(); ok {
		_spec.SetField(customer.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := cu.mutation.CustomerNpiNumber(); ok {
		_spec.SetField(customer.FieldCustomerNpiNumber, field.TypeString, value)
	}
	if cu.mutation.CustomerNpiNumberCleared() {
		_spec.ClearField(customer.FieldCustomerNpiNumber, field.TypeString)
	}
	if value, ok := cu.mutation.ReferralSource(); ok {
		_spec.SetField(customer.FieldReferralSource, field.TypeString, value)
	}
	if cu.mutation.ReferralSourceCleared() {
		_spec.ClearField(customer.FieldReferralSource, field.TypeString)
	}
	if value, ok := cu.mutation.OrderPlacementAllowed(); ok {
		_spec.SetField(customer.FieldOrderPlacementAllowed, field.TypeBool, value)
	}
	if cu.mutation.OrderPlacementAllowedCleared() {
		_spec.ClearField(customer.FieldOrderPlacementAllowed, field.TypeBool)
	}
	if value, ok := cu.mutation.BetaProgramEnabled(); ok {
		_spec.SetField(customer.FieldBetaProgramEnabled, field.TypeBool, value)
	}
	if cu.mutation.BetaProgramEnabledCleared() {
		_spec.ClearField(customer.FieldBetaProgramEnabled, field.TypeBool)
	}
	if value, ok := cu.mutation.OnboardingQuestionnaireFilledOn(); ok {
		_spec.SetField(customer.FieldOnboardingQuestionnaireFilledOn, field.TypeTime, value)
	}
	if cu.mutation.OnboardingQuestionnaireFilledOnCleared() {
		_spec.ClearField(customer.FieldOnboardingQuestionnaireFilledOn, field.TypeTime)
	}
	if cu.mutation.SamplesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SamplesTable,
			Columns: []string{customer.SamplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedSamplesIDs(); len(nodes) > 0 && !cu.mutation.SamplesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SamplesTable,
			Columns: []string{customer.SamplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SamplesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SamplesTable,
			Columns: []string{customer.SamplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CustomerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerContactsTable,
			Columns: []string{customer.CustomerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCustomerContactsIDs(); len(nodes) > 0 && !cu.mutation.CustomerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerContactsTable,
			Columns: []string{customer.CustomerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CustomerContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerContactsTable,
			Columns: []string{customer.CustomerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CustomerAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerAddressesTable,
			Columns: []string{customer.CustomerAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCustomerAddressesIDs(); len(nodes) > 0 && !cu.mutation.CustomerAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerAddressesTable,
			Columns: []string{customer.CustomerAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CustomerAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerAddressesTable,
			Columns: []string{customer.CustomerAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customer.ClinicsTable,
			Columns: customer.ClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedClinicsIDs(); len(nodes) > 0 && !cu.mutation.ClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customer.ClinicsTable,
			Columns: customer.ClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customer.ClinicsTable,
			Columns: customer.ClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.SalesTable,
			Columns: []string{customer.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.SalesTable,
			Columns: []string{customer.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.UserTable,
			Columns: []string{customer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.UserTable,
			Columns: []string{customer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrdersTable,
			Columns: []string{customer.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !cu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrdersTable,
			Columns: []string{customer.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrdersTable,
			Columns: []string{customer.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CurrentPatientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CurrentPatientsTable,
			Columns: []string{customer.CurrentPatientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCurrentPatientsIDs(); len(nodes) > 0 && !cu.mutation.CurrentPatientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CurrentPatientsTable,
			Columns: []string{customer.CurrentPatientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CurrentPatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CurrentPatientsTable,
			Columns: []string{customer.CurrentPatientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PatientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.PatientsTable,
			Columns: customer.PatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPatientsIDs(); len(nodes) > 0 && !cu.mutation.PatientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.PatientsTable,
			Columns: customer.PatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.PatientsTable,
			Columns: customer.PatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CustomerBetaProgramParticipationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerBetaProgramParticipationsTable,
			Columns: []string{customer.CustomerBetaProgramParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCustomerBetaProgramParticipationsIDs(); len(nodes) > 0 && !cu.mutation.CustomerBetaProgramParticipationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerBetaProgramParticipationsTable,
			Columns: []string{customer.CustomerBetaProgramParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CustomerBetaProgramParticipationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerBetaProgramParticipationsTable,
			Columns: []string{customer.CustomerBetaProgramParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CustomerSettingsOnClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerSettingsOnClinicsTable,
			Columns: []string{customer.CustomerSettingsOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCustomerSettingsOnClinicsIDs(); len(nodes) > 0 && !cu.mutation.CustomerSettingsOnClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerSettingsOnClinicsTable,
			Columns: []string{customer.CustomerSettingsOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CustomerSettingsOnClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerSettingsOnClinicsTable,
			Columns: []string{customer.CustomerSettingsOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CustomerAddressesOnClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerAddressesOnClinicsTable,
			Columns: []string{customer.CustomerAddressesOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCustomerAddressesOnClinicsIDs(); len(nodes) > 0 && !cu.mutation.CustomerAddressesOnClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerAddressesOnClinicsTable,
			Columns: []string{customer.CustomerAddressesOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CustomerAddressesOnClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerAddressesOnClinicsTable,
			Columns: []string{customer.CustomerAddressesOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CustomerContactsOnClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerContactsOnClinicsTable,
			Columns: []string{customer.CustomerContactsOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCustomerContactsOnClinicsIDs(); len(nodes) > 0 && !cu.mutation.CustomerContactsOnClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerContactsOnClinicsTable,
			Columns: []string{customer.CustomerContactsOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CustomerContactsOnClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerContactsOnClinicsTable,
			Columns: []string{customer.CustomerContactsOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerMutation
}

// SetUserID sets the "user_id" field.
func (cuo *CustomerUpdateOne) SetUserID(i int) *CustomerUpdateOne {
	cuo.mutation.SetUserID(i)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableUserID(i *int) *CustomerUpdateOne {
	if i != nil {
		cuo.SetUserID(*i)
	}
	return cuo
}

// ClearUserID clears the value of the "user_id" field.
func (cuo *CustomerUpdateOne) ClearUserID() *CustomerUpdateOne {
	cuo.mutation.ClearUserID()
	return cuo
}

// SetCustomerType sets the "customer_type" field.
func (cuo *CustomerUpdateOne) SetCustomerType(s string) *CustomerUpdateOne {
	cuo.mutation.SetCustomerType(s)
	return cuo
}

// SetNillableCustomerType sets the "customer_type" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCustomerType(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetCustomerType(*s)
	}
	return cuo
}

// SetCustomerFirstName sets the "customer_first_name" field.
func (cuo *CustomerUpdateOne) SetCustomerFirstName(s string) *CustomerUpdateOne {
	cuo.mutation.SetCustomerFirstName(s)
	return cuo
}

// SetNillableCustomerFirstName sets the "customer_first_name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCustomerFirstName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetCustomerFirstName(*s)
	}
	return cuo
}

// ClearCustomerFirstName clears the value of the "customer_first_name" field.
func (cuo *CustomerUpdateOne) ClearCustomerFirstName() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerFirstName()
	return cuo
}

// SetCustomerLastName sets the "customer_last_name" field.
func (cuo *CustomerUpdateOne) SetCustomerLastName(s string) *CustomerUpdateOne {
	cuo.mutation.SetCustomerLastName(s)
	return cuo
}

// SetNillableCustomerLastName sets the "customer_last_name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCustomerLastName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetCustomerLastName(*s)
	}
	return cuo
}

// ClearCustomerLastName clears the value of the "customer_last_name" field.
func (cuo *CustomerUpdateOne) ClearCustomerLastName() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerLastName()
	return cuo
}

// SetCustomerMiddleName sets the "customer_middle_name" field.
func (cuo *CustomerUpdateOne) SetCustomerMiddleName(s string) *CustomerUpdateOne {
	cuo.mutation.SetCustomerMiddleName(s)
	return cuo
}

// SetNillableCustomerMiddleName sets the "customer_middle_name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCustomerMiddleName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetCustomerMiddleName(*s)
	}
	return cuo
}

// ClearCustomerMiddleName clears the value of the "customer_middle_name" field.
func (cuo *CustomerUpdateOne) ClearCustomerMiddleName() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerMiddleName()
	return cuo
}

// SetCustomerTypeID sets the "customer_type_id" field.
func (cuo *CustomerUpdateOne) SetCustomerTypeID(s string) *CustomerUpdateOne {
	cuo.mutation.SetCustomerTypeID(s)
	return cuo
}

// SetNillableCustomerTypeID sets the "customer_type_id" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCustomerTypeID(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetCustomerTypeID(*s)
	}
	return cuo
}

// ClearCustomerTypeID clears the value of the "customer_type_id" field.
func (cuo *CustomerUpdateOne) ClearCustomerTypeID() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerTypeID()
	return cuo
}

// SetCustomerSuffix sets the "customer_suffix" field.
func (cuo *CustomerUpdateOne) SetCustomerSuffix(s string) *CustomerUpdateOne {
	cuo.mutation.SetCustomerSuffix(s)
	return cuo
}

// SetNillableCustomerSuffix sets the "customer_suffix" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCustomerSuffix(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetCustomerSuffix(*s)
	}
	return cuo
}

// ClearCustomerSuffix clears the value of the "customer_suffix" field.
func (cuo *CustomerUpdateOne) ClearCustomerSuffix() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerSuffix()
	return cuo
}

// SetCustomerSamplesReceived sets the "customer_samples_received" field.
func (cuo *CustomerUpdateOne) SetCustomerSamplesReceived(s string) *CustomerUpdateOne {
	cuo.mutation.SetCustomerSamplesReceived(s)
	return cuo
}

// SetNillableCustomerSamplesReceived sets the "customer_samples_received" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCustomerSamplesReceived(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetCustomerSamplesReceived(*s)
	}
	return cuo
}

// ClearCustomerSamplesReceived clears the value of the "customer_samples_received" field.
func (cuo *CustomerUpdateOne) ClearCustomerSamplesReceived() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerSamplesReceived()
	return cuo
}

// SetCustomerRequestSubmitTime sets the "customer_request_submit_time" field.
func (cuo *CustomerUpdateOne) SetCustomerRequestSubmitTime(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetCustomerRequestSubmitTime(t)
	return cuo
}

// SetNillableCustomerRequestSubmitTime sets the "customer_request_submit_time" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCustomerRequestSubmitTime(t *time.Time) *CustomerUpdateOne {
	if t != nil {
		cuo.SetCustomerRequestSubmitTime(*t)
	}
	return cuo
}

// ClearCustomerRequestSubmitTime clears the value of the "customer_request_submit_time" field.
func (cuo *CustomerUpdateOne) ClearCustomerRequestSubmitTime() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerRequestSubmitTime()
	return cuo
}

// SetCustomerSignupTime sets the "customer_signup_time" field.
func (cuo *CustomerUpdateOne) SetCustomerSignupTime(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetCustomerSignupTime(t)
	return cuo
}

// SetNillableCustomerSignupTime sets the "customer_signup_time" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCustomerSignupTime(t *time.Time) *CustomerUpdateOne {
	if t != nil {
		cuo.SetCustomerSignupTime(*t)
	}
	return cuo
}

// ClearCustomerSignupTime clears the value of the "customer_signup_time" field.
func (cuo *CustomerUpdateOne) ClearCustomerSignupTime() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerSignupTime()
	return cuo
}

// SetIsActive sets the "is_active" field.
func (cuo *CustomerUpdateOne) SetIsActive(b bool) *CustomerUpdateOne {
	cuo.mutation.SetIsActive(b)
	return cuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableIsActive(b *bool) *CustomerUpdateOne {
	if b != nil {
		cuo.SetIsActive(*b)
	}
	return cuo
}

// SetSalesID sets the "sales_id" field.
func (cuo *CustomerUpdateOne) SetSalesID(i int) *CustomerUpdateOne {
	cuo.mutation.SetSalesID(i)
	return cuo
}

// SetNillableSalesID sets the "sales_id" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableSalesID(i *int) *CustomerUpdateOne {
	if i != nil {
		cuo.SetSalesID(*i)
	}
	return cuo
}

// ClearSalesID clears the value of the "sales_id" field.
func (cuo *CustomerUpdateOne) ClearSalesID() *CustomerUpdateOne {
	cuo.mutation.ClearSalesID()
	return cuo
}

// SetCustomerNpiNumber sets the "customer_npi_number" field.
func (cuo *CustomerUpdateOne) SetCustomerNpiNumber(s string) *CustomerUpdateOne {
	cuo.mutation.SetCustomerNpiNumber(s)
	return cuo
}

// SetNillableCustomerNpiNumber sets the "customer_npi_number" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCustomerNpiNumber(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetCustomerNpiNumber(*s)
	}
	return cuo
}

// ClearCustomerNpiNumber clears the value of the "customer_npi_number" field.
func (cuo *CustomerUpdateOne) ClearCustomerNpiNumber() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerNpiNumber()
	return cuo
}

// SetReferralSource sets the "referral_source" field.
func (cuo *CustomerUpdateOne) SetReferralSource(s string) *CustomerUpdateOne {
	cuo.mutation.SetReferralSource(s)
	return cuo
}

// SetNillableReferralSource sets the "referral_source" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableReferralSource(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetReferralSource(*s)
	}
	return cuo
}

// ClearReferralSource clears the value of the "referral_source" field.
func (cuo *CustomerUpdateOne) ClearReferralSource() *CustomerUpdateOne {
	cuo.mutation.ClearReferralSource()
	return cuo
}

// SetOrderPlacementAllowed sets the "order_placement_allowed" field.
func (cuo *CustomerUpdateOne) SetOrderPlacementAllowed(b bool) *CustomerUpdateOne {
	cuo.mutation.SetOrderPlacementAllowed(b)
	return cuo
}

// SetNillableOrderPlacementAllowed sets the "order_placement_allowed" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableOrderPlacementAllowed(b *bool) *CustomerUpdateOne {
	if b != nil {
		cuo.SetOrderPlacementAllowed(*b)
	}
	return cuo
}

// ClearOrderPlacementAllowed clears the value of the "order_placement_allowed" field.
func (cuo *CustomerUpdateOne) ClearOrderPlacementAllowed() *CustomerUpdateOne {
	cuo.mutation.ClearOrderPlacementAllowed()
	return cuo
}

// SetBetaProgramEnabled sets the "beta_program_enabled" field.
func (cuo *CustomerUpdateOne) SetBetaProgramEnabled(b bool) *CustomerUpdateOne {
	cuo.mutation.SetBetaProgramEnabled(b)
	return cuo
}

// SetNillableBetaProgramEnabled sets the "beta_program_enabled" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableBetaProgramEnabled(b *bool) *CustomerUpdateOne {
	if b != nil {
		cuo.SetBetaProgramEnabled(*b)
	}
	return cuo
}

// ClearBetaProgramEnabled clears the value of the "beta_program_enabled" field.
func (cuo *CustomerUpdateOne) ClearBetaProgramEnabled() *CustomerUpdateOne {
	cuo.mutation.ClearBetaProgramEnabled()
	return cuo
}

// SetOnboardingQuestionnaireFilledOn sets the "onboarding_questionnaire_filled_on" field.
func (cuo *CustomerUpdateOne) SetOnboardingQuestionnaireFilledOn(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetOnboardingQuestionnaireFilledOn(t)
	return cuo
}

// SetNillableOnboardingQuestionnaireFilledOn sets the "onboarding_questionnaire_filled_on" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableOnboardingQuestionnaireFilledOn(t *time.Time) *CustomerUpdateOne {
	if t != nil {
		cuo.SetOnboardingQuestionnaireFilledOn(*t)
	}
	return cuo
}

// ClearOnboardingQuestionnaireFilledOn clears the value of the "onboarding_questionnaire_filled_on" field.
func (cuo *CustomerUpdateOne) ClearOnboardingQuestionnaireFilledOn() *CustomerUpdateOne {
	cuo.mutation.ClearOnboardingQuestionnaireFilledOn()
	return cuo
}

// AddSampleIDs adds the "samples" edge to the Sample entity by IDs.
func (cuo *CustomerUpdateOne) AddSampleIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddSampleIDs(ids...)
	return cuo
}

// AddSamples adds the "samples" edges to the Sample entity.
func (cuo *CustomerUpdateOne) AddSamples(s ...*Sample) *CustomerUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddSampleIDs(ids...)
}

// AddCustomerContactIDs adds the "customer_contacts" edge to the Contact entity by IDs.
func (cuo *CustomerUpdateOne) AddCustomerContactIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddCustomerContactIDs(ids...)
	return cuo
}

// AddCustomerContacts adds the "customer_contacts" edges to the Contact entity.
func (cuo *CustomerUpdateOne) AddCustomerContacts(c ...*Contact) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCustomerContactIDs(ids...)
}

// AddCustomerAddressIDs adds the "customer_addresses" edge to the Address entity by IDs.
func (cuo *CustomerUpdateOne) AddCustomerAddressIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddCustomerAddressIDs(ids...)
	return cuo
}

// AddCustomerAddresses adds the "customer_addresses" edges to the Address entity.
func (cuo *CustomerUpdateOne) AddCustomerAddresses(a ...*Address) *CustomerUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddCustomerAddressIDs(ids...)
}

// AddClinicIDs adds the "clinics" edge to the Clinic entity by IDs.
func (cuo *CustomerUpdateOne) AddClinicIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddClinicIDs(ids...)
	return cuo
}

// AddClinics adds the "clinics" edges to the Clinic entity.
func (cuo *CustomerUpdateOne) AddClinics(c ...*Clinic) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddClinicIDs(ids...)
}

// SetSales sets the "sales" edge to the InternalUser entity.
func (cuo *CustomerUpdateOne) SetSales(i *InternalUser) *CustomerUpdateOne {
	return cuo.SetSalesID(i.ID)
}

// SetUser sets the "user" edge to the User entity.
func (cuo *CustomerUpdateOne) SetUser(u *User) *CustomerUpdateOne {
	return cuo.SetUserID(u.ID)
}

// AddOrderIDs adds the "orders" edge to the OrderInfo entity by IDs.
func (cuo *CustomerUpdateOne) AddOrderIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddOrderIDs(ids...)
	return cuo
}

// AddOrders adds the "orders" edges to the OrderInfo entity.
func (cuo *CustomerUpdateOne) AddOrders(o ...*OrderInfo) *CustomerUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.AddOrderIDs(ids...)
}

// AddCurrentPatientIDs adds the "current_patients" edge to the Patient entity by IDs.
func (cuo *CustomerUpdateOne) AddCurrentPatientIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddCurrentPatientIDs(ids...)
	return cuo
}

// AddCurrentPatients adds the "current_patients" edges to the Patient entity.
func (cuo *CustomerUpdateOne) AddCurrentPatients(p ...*Patient) *CustomerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddCurrentPatientIDs(ids...)
}

// AddPatientIDs adds the "patients" edge to the Patient entity by IDs.
func (cuo *CustomerUpdateOne) AddPatientIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddPatientIDs(ids...)
	return cuo
}

// AddPatients adds the "patients" edges to the Patient entity.
func (cuo *CustomerUpdateOne) AddPatients(p ...*Patient) *CustomerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPatientIDs(ids...)
}

// AddCustomerBetaProgramParticipationIDs adds the "customer_beta_program_participations" edge to the BetaProgramParticipation entity by IDs.
func (cuo *CustomerUpdateOne) AddCustomerBetaProgramParticipationIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddCustomerBetaProgramParticipationIDs(ids...)
	return cuo
}

// AddCustomerBetaProgramParticipations adds the "customer_beta_program_participations" edges to the BetaProgramParticipation entity.
func (cuo *CustomerUpdateOne) AddCustomerBetaProgramParticipations(b ...*BetaProgramParticipation) *CustomerUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.AddCustomerBetaProgramParticipationIDs(ids...)
}

// AddCustomerSettingsOnClinicIDs adds the "customer_settings_on_clinics" edge to the CustomerSettingOnClinics entity by IDs.
func (cuo *CustomerUpdateOne) AddCustomerSettingsOnClinicIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddCustomerSettingsOnClinicIDs(ids...)
	return cuo
}

// AddCustomerSettingsOnClinics adds the "customer_settings_on_clinics" edges to the CustomerSettingOnClinics entity.
func (cuo *CustomerUpdateOne) AddCustomerSettingsOnClinics(c ...*CustomerSettingOnClinics) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCustomerSettingsOnClinicIDs(ids...)
}

// AddCustomerAddressesOnClinicIDs adds the "customer_addresses_on_clinics" edge to the CustomerAddressOnClinics entity by IDs.
func (cuo *CustomerUpdateOne) AddCustomerAddressesOnClinicIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddCustomerAddressesOnClinicIDs(ids...)
	return cuo
}

// AddCustomerAddressesOnClinics adds the "customer_addresses_on_clinics" edges to the CustomerAddressOnClinics entity.
func (cuo *CustomerUpdateOne) AddCustomerAddressesOnClinics(c ...*CustomerAddressOnClinics) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCustomerAddressesOnClinicIDs(ids...)
}

// AddCustomerContactsOnClinicIDs adds the "customer_contacts_on_clinics" edge to the CustomerContactOnClinics entity by IDs.
func (cuo *CustomerUpdateOne) AddCustomerContactsOnClinicIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddCustomerContactsOnClinicIDs(ids...)
	return cuo
}

// AddCustomerContactsOnClinics adds the "customer_contacts_on_clinics" edges to the CustomerContactOnClinics entity.
func (cuo *CustomerUpdateOne) AddCustomerContactsOnClinics(c ...*CustomerContactOnClinics) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCustomerContactsOnClinicIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// ClearSamples clears all "samples" edges to the Sample entity.
func (cuo *CustomerUpdateOne) ClearSamples() *CustomerUpdateOne {
	cuo.mutation.ClearSamples()
	return cuo
}

// RemoveSampleIDs removes the "samples" edge to Sample entities by IDs.
func (cuo *CustomerUpdateOne) RemoveSampleIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveSampleIDs(ids...)
	return cuo
}

// RemoveSamples removes "samples" edges to Sample entities.
func (cuo *CustomerUpdateOne) RemoveSamples(s ...*Sample) *CustomerUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveSampleIDs(ids...)
}

// ClearCustomerContacts clears all "customer_contacts" edges to the Contact entity.
func (cuo *CustomerUpdateOne) ClearCustomerContacts() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerContacts()
	return cuo
}

// RemoveCustomerContactIDs removes the "customer_contacts" edge to Contact entities by IDs.
func (cuo *CustomerUpdateOne) RemoveCustomerContactIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveCustomerContactIDs(ids...)
	return cuo
}

// RemoveCustomerContacts removes "customer_contacts" edges to Contact entities.
func (cuo *CustomerUpdateOne) RemoveCustomerContacts(c ...*Contact) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCustomerContactIDs(ids...)
}

// ClearCustomerAddresses clears all "customer_addresses" edges to the Address entity.
func (cuo *CustomerUpdateOne) ClearCustomerAddresses() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerAddresses()
	return cuo
}

// RemoveCustomerAddressIDs removes the "customer_addresses" edge to Address entities by IDs.
func (cuo *CustomerUpdateOne) RemoveCustomerAddressIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveCustomerAddressIDs(ids...)
	return cuo
}

// RemoveCustomerAddresses removes "customer_addresses" edges to Address entities.
func (cuo *CustomerUpdateOne) RemoveCustomerAddresses(a ...*Address) *CustomerUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveCustomerAddressIDs(ids...)
}

// ClearClinics clears all "clinics" edges to the Clinic entity.
func (cuo *CustomerUpdateOne) ClearClinics() *CustomerUpdateOne {
	cuo.mutation.ClearClinics()
	return cuo
}

// RemoveClinicIDs removes the "clinics" edge to Clinic entities by IDs.
func (cuo *CustomerUpdateOne) RemoveClinicIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveClinicIDs(ids...)
	return cuo
}

// RemoveClinics removes "clinics" edges to Clinic entities.
func (cuo *CustomerUpdateOne) RemoveClinics(c ...*Clinic) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveClinicIDs(ids...)
}

// ClearSales clears the "sales" edge to the InternalUser entity.
func (cuo *CustomerUpdateOne) ClearSales() *CustomerUpdateOne {
	cuo.mutation.ClearSales()
	return cuo
}

// ClearUser clears the "user" edge to the User entity.
func (cuo *CustomerUpdateOne) ClearUser() *CustomerUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// ClearOrders clears all "orders" edges to the OrderInfo entity.
func (cuo *CustomerUpdateOne) ClearOrders() *CustomerUpdateOne {
	cuo.mutation.ClearOrders()
	return cuo
}

// RemoveOrderIDs removes the "orders" edge to OrderInfo entities by IDs.
func (cuo *CustomerUpdateOne) RemoveOrderIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveOrderIDs(ids...)
	return cuo
}

// RemoveOrders removes "orders" edges to OrderInfo entities.
func (cuo *CustomerUpdateOne) RemoveOrders(o ...*OrderInfo) *CustomerUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.RemoveOrderIDs(ids...)
}

// ClearCurrentPatients clears all "current_patients" edges to the Patient entity.
func (cuo *CustomerUpdateOne) ClearCurrentPatients() *CustomerUpdateOne {
	cuo.mutation.ClearCurrentPatients()
	return cuo
}

// RemoveCurrentPatientIDs removes the "current_patients" edge to Patient entities by IDs.
func (cuo *CustomerUpdateOne) RemoveCurrentPatientIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveCurrentPatientIDs(ids...)
	return cuo
}

// RemoveCurrentPatients removes "current_patients" edges to Patient entities.
func (cuo *CustomerUpdateOne) RemoveCurrentPatients(p ...*Patient) *CustomerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveCurrentPatientIDs(ids...)
}

// ClearPatients clears all "patients" edges to the Patient entity.
func (cuo *CustomerUpdateOne) ClearPatients() *CustomerUpdateOne {
	cuo.mutation.ClearPatients()
	return cuo
}

// RemovePatientIDs removes the "patients" edge to Patient entities by IDs.
func (cuo *CustomerUpdateOne) RemovePatientIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemovePatientIDs(ids...)
	return cuo
}

// RemovePatients removes "patients" edges to Patient entities.
func (cuo *CustomerUpdateOne) RemovePatients(p ...*Patient) *CustomerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePatientIDs(ids...)
}

// ClearCustomerBetaProgramParticipations clears all "customer_beta_program_participations" edges to the BetaProgramParticipation entity.
func (cuo *CustomerUpdateOne) ClearCustomerBetaProgramParticipations() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerBetaProgramParticipations()
	return cuo
}

// RemoveCustomerBetaProgramParticipationIDs removes the "customer_beta_program_participations" edge to BetaProgramParticipation entities by IDs.
func (cuo *CustomerUpdateOne) RemoveCustomerBetaProgramParticipationIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveCustomerBetaProgramParticipationIDs(ids...)
	return cuo
}

// RemoveCustomerBetaProgramParticipations removes "customer_beta_program_participations" edges to BetaProgramParticipation entities.
func (cuo *CustomerUpdateOne) RemoveCustomerBetaProgramParticipations(b ...*BetaProgramParticipation) *CustomerUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.RemoveCustomerBetaProgramParticipationIDs(ids...)
}

// ClearCustomerSettingsOnClinics clears all "customer_settings_on_clinics" edges to the CustomerSettingOnClinics entity.
func (cuo *CustomerUpdateOne) ClearCustomerSettingsOnClinics() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerSettingsOnClinics()
	return cuo
}

// RemoveCustomerSettingsOnClinicIDs removes the "customer_settings_on_clinics" edge to CustomerSettingOnClinics entities by IDs.
func (cuo *CustomerUpdateOne) RemoveCustomerSettingsOnClinicIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveCustomerSettingsOnClinicIDs(ids...)
	return cuo
}

// RemoveCustomerSettingsOnClinics removes "customer_settings_on_clinics" edges to CustomerSettingOnClinics entities.
func (cuo *CustomerUpdateOne) RemoveCustomerSettingsOnClinics(c ...*CustomerSettingOnClinics) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCustomerSettingsOnClinicIDs(ids...)
}

// ClearCustomerAddressesOnClinics clears all "customer_addresses_on_clinics" edges to the CustomerAddressOnClinics entity.
func (cuo *CustomerUpdateOne) ClearCustomerAddressesOnClinics() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerAddressesOnClinics()
	return cuo
}

// RemoveCustomerAddressesOnClinicIDs removes the "customer_addresses_on_clinics" edge to CustomerAddressOnClinics entities by IDs.
func (cuo *CustomerUpdateOne) RemoveCustomerAddressesOnClinicIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveCustomerAddressesOnClinicIDs(ids...)
	return cuo
}

// RemoveCustomerAddressesOnClinics removes "customer_addresses_on_clinics" edges to CustomerAddressOnClinics entities.
func (cuo *CustomerUpdateOne) RemoveCustomerAddressesOnClinics(c ...*CustomerAddressOnClinics) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCustomerAddressesOnClinicIDs(ids...)
}

// ClearCustomerContactsOnClinics clears all "customer_contacts_on_clinics" edges to the CustomerContactOnClinics entity.
func (cuo *CustomerUpdateOne) ClearCustomerContactsOnClinics() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerContactsOnClinics()
	return cuo
}

// RemoveCustomerContactsOnClinicIDs removes the "customer_contacts_on_clinics" edge to CustomerContactOnClinics entities by IDs.
func (cuo *CustomerUpdateOne) RemoveCustomerContactsOnClinicIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveCustomerContactsOnClinicIDs(ids...)
	return cuo
}

// RemoveCustomerContactsOnClinics removes "customer_contacts_on_clinics" edges to CustomerContactOnClinics entities.
func (cuo *CustomerUpdateOne) RemoveCustomerContactsOnClinics(c ...*CustomerContactOnClinics) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCustomerContactsOnClinicIDs(ids...)
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cuo *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CustomerType(); ok {
		_spec.SetField(customer.FieldCustomerType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CustomerFirstName(); ok {
		_spec.SetField(customer.FieldCustomerFirstName, field.TypeString, value)
	}
	if cuo.mutation.CustomerFirstNameCleared() {
		_spec.ClearField(customer.FieldCustomerFirstName, field.TypeString)
	}
	if value, ok := cuo.mutation.CustomerLastName(); ok {
		_spec.SetField(customer.FieldCustomerLastName, field.TypeString, value)
	}
	if cuo.mutation.CustomerLastNameCleared() {
		_spec.ClearField(customer.FieldCustomerLastName, field.TypeString)
	}
	if value, ok := cuo.mutation.CustomerMiddleName(); ok {
		_spec.SetField(customer.FieldCustomerMiddleName, field.TypeString, value)
	}
	if cuo.mutation.CustomerMiddleNameCleared() {
		_spec.ClearField(customer.FieldCustomerMiddleName, field.TypeString)
	}
	if value, ok := cuo.mutation.CustomerTypeID(); ok {
		_spec.SetField(customer.FieldCustomerTypeID, field.TypeString, value)
	}
	if cuo.mutation.CustomerTypeIDCleared() {
		_spec.ClearField(customer.FieldCustomerTypeID, field.TypeString)
	}
	if value, ok := cuo.mutation.CustomerSuffix(); ok {
		_spec.SetField(customer.FieldCustomerSuffix, field.TypeString, value)
	}
	if cuo.mutation.CustomerSuffixCleared() {
		_spec.ClearField(customer.FieldCustomerSuffix, field.TypeString)
	}
	if value, ok := cuo.mutation.CustomerSamplesReceived(); ok {
		_spec.SetField(customer.FieldCustomerSamplesReceived, field.TypeString, value)
	}
	if cuo.mutation.CustomerSamplesReceivedCleared() {
		_spec.ClearField(customer.FieldCustomerSamplesReceived, field.TypeString)
	}
	if value, ok := cuo.mutation.CustomerRequestSubmitTime(); ok {
		_spec.SetField(customer.FieldCustomerRequestSubmitTime, field.TypeTime, value)
	}
	if cuo.mutation.CustomerRequestSubmitTimeCleared() {
		_spec.ClearField(customer.FieldCustomerRequestSubmitTime, field.TypeTime)
	}
	if value, ok := cuo.mutation.CustomerSignupTime(); ok {
		_spec.SetField(customer.FieldCustomerSignupTime, field.TypeTime, value)
	}
	if cuo.mutation.CustomerSignupTimeCleared() {
		_spec.ClearField(customer.FieldCustomerSignupTime, field.TypeTime)
	}
	if value, ok := cuo.mutation.IsActive(); ok {
		_spec.SetField(customer.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.CustomerNpiNumber(); ok {
		_spec.SetField(customer.FieldCustomerNpiNumber, field.TypeString, value)
	}
	if cuo.mutation.CustomerNpiNumberCleared() {
		_spec.ClearField(customer.FieldCustomerNpiNumber, field.TypeString)
	}
	if value, ok := cuo.mutation.ReferralSource(); ok {
		_spec.SetField(customer.FieldReferralSource, field.TypeString, value)
	}
	if cuo.mutation.ReferralSourceCleared() {
		_spec.ClearField(customer.FieldReferralSource, field.TypeString)
	}
	if value, ok := cuo.mutation.OrderPlacementAllowed(); ok {
		_spec.SetField(customer.FieldOrderPlacementAllowed, field.TypeBool, value)
	}
	if cuo.mutation.OrderPlacementAllowedCleared() {
		_spec.ClearField(customer.FieldOrderPlacementAllowed, field.TypeBool)
	}
	if value, ok := cuo.mutation.BetaProgramEnabled(); ok {
		_spec.SetField(customer.FieldBetaProgramEnabled, field.TypeBool, value)
	}
	if cuo.mutation.BetaProgramEnabledCleared() {
		_spec.ClearField(customer.FieldBetaProgramEnabled, field.TypeBool)
	}
	if value, ok := cuo.mutation.OnboardingQuestionnaireFilledOn(); ok {
		_spec.SetField(customer.FieldOnboardingQuestionnaireFilledOn, field.TypeTime, value)
	}
	if cuo.mutation.OnboardingQuestionnaireFilledOnCleared() {
		_spec.ClearField(customer.FieldOnboardingQuestionnaireFilledOn, field.TypeTime)
	}
	if cuo.mutation.SamplesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SamplesTable,
			Columns: []string{customer.SamplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedSamplesIDs(); len(nodes) > 0 && !cuo.mutation.SamplesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SamplesTable,
			Columns: []string{customer.SamplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SamplesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SamplesTable,
			Columns: []string{customer.SamplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CustomerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerContactsTable,
			Columns: []string{customer.CustomerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCustomerContactsIDs(); len(nodes) > 0 && !cuo.mutation.CustomerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerContactsTable,
			Columns: []string{customer.CustomerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CustomerContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerContactsTable,
			Columns: []string{customer.CustomerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CustomerAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerAddressesTable,
			Columns: []string{customer.CustomerAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCustomerAddressesIDs(); len(nodes) > 0 && !cuo.mutation.CustomerAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerAddressesTable,
			Columns: []string{customer.CustomerAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CustomerAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerAddressesTable,
			Columns: []string{customer.CustomerAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customer.ClinicsTable,
			Columns: customer.ClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedClinicsIDs(); len(nodes) > 0 && !cuo.mutation.ClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customer.ClinicsTable,
			Columns: customer.ClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customer.ClinicsTable,
			Columns: customer.ClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.SalesTable,
			Columns: []string{customer.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.SalesTable,
			Columns: []string{customer.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.UserTable,
			Columns: []string{customer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.UserTable,
			Columns: []string{customer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrdersTable,
			Columns: []string{customer.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !cuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrdersTable,
			Columns: []string{customer.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrdersTable,
			Columns: []string{customer.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CurrentPatientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CurrentPatientsTable,
			Columns: []string{customer.CurrentPatientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCurrentPatientsIDs(); len(nodes) > 0 && !cuo.mutation.CurrentPatientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CurrentPatientsTable,
			Columns: []string{customer.CurrentPatientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CurrentPatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CurrentPatientsTable,
			Columns: []string{customer.CurrentPatientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PatientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.PatientsTable,
			Columns: customer.PatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPatientsIDs(); len(nodes) > 0 && !cuo.mutation.PatientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.PatientsTable,
			Columns: customer.PatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.PatientsTable,
			Columns: customer.PatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CustomerBetaProgramParticipationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerBetaProgramParticipationsTable,
			Columns: []string{customer.CustomerBetaProgramParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCustomerBetaProgramParticipationsIDs(); len(nodes) > 0 && !cuo.mutation.CustomerBetaProgramParticipationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerBetaProgramParticipationsTable,
			Columns: []string{customer.CustomerBetaProgramParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CustomerBetaProgramParticipationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerBetaProgramParticipationsTable,
			Columns: []string{customer.CustomerBetaProgramParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CustomerSettingsOnClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerSettingsOnClinicsTable,
			Columns: []string{customer.CustomerSettingsOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCustomerSettingsOnClinicsIDs(); len(nodes) > 0 && !cuo.mutation.CustomerSettingsOnClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerSettingsOnClinicsTable,
			Columns: []string{customer.CustomerSettingsOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CustomerSettingsOnClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerSettingsOnClinicsTable,
			Columns: []string{customer.CustomerSettingsOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CustomerAddressesOnClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerAddressesOnClinicsTable,
			Columns: []string{customer.CustomerAddressesOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCustomerAddressesOnClinicsIDs(); len(nodes) > 0 && !cuo.mutation.CustomerAddressesOnClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerAddressesOnClinicsTable,
			Columns: []string{customer.CustomerAddressesOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CustomerAddressesOnClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerAddressesOnClinicsTable,
			Columns: []string{customer.CustomerAddressesOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CustomerContactsOnClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerContactsOnClinicsTable,
			Columns: []string{customer.CustomerContactsOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCustomerContactsOnClinicsIDs(); len(nodes) > 0 && !cuo.mutation.CustomerContactsOnClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerContactsOnClinicsTable,
			Columns: []string{customer.CustomerContactsOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CustomerContactsOnClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerContactsOnClinicsTable,
			Columns: []string{customer.CustomerContactsOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
