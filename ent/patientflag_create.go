// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/patientflag"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PatientFlagCreate is the builder for creating a PatientFlag entity.
type PatientFlagCreate struct {
	config
	mutation *PatientFlagMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPatientFlagName sets the "patient_flag_name" field.
func (pfc *PatientFlagCreate) SetPatientFlagName(s string) *PatientFlagCreate {
	pfc.mutation.SetPatientFlagName(s)
	return pfc
}

// SetPatientFlagDisplayName sets the "patient_flag_display_name" field.
func (pfc *PatientFlagCreate) SetPatientFlagDisplayName(s string) *PatientFlagCreate {
	pfc.mutation.SetPatientFlagDisplayName(s)
	return pfc
}

// SetNillablePatientFlagDisplayName sets the "patient_flag_display_name" field if the given value is not nil.
func (pfc *PatientFlagCreate) SetNillablePatientFlagDisplayName(s *string) *PatientFlagCreate {
	if s != nil {
		pfc.SetPatientFlagDisplayName(*s)
	}
	return pfc
}

// SetPatientFlagDescription sets the "patient_flag_description" field.
func (pfc *PatientFlagCreate) SetPatientFlagDescription(s string) *PatientFlagCreate {
	pfc.mutation.SetPatientFlagDescription(s)
	return pfc
}

// SetNillablePatientFlagDescription sets the "patient_flag_description" field if the given value is not nil.
func (pfc *PatientFlagCreate) SetNillablePatientFlagDescription(s *string) *PatientFlagCreate {
	if s != nil {
		pfc.SetPatientFlagDescription(*s)
	}
	return pfc
}

// SetPatientFlagIsActive sets the "patient_flag_is_active" field.
func (pfc *PatientFlagCreate) SetPatientFlagIsActive(b bool) *PatientFlagCreate {
	pfc.mutation.SetPatientFlagIsActive(b)
	return pfc
}

// SetNillablePatientFlagIsActive sets the "patient_flag_is_active" field if the given value is not nil.
func (pfc *PatientFlagCreate) SetNillablePatientFlagIsActive(b *bool) *PatientFlagCreate {
	if b != nil {
		pfc.SetPatientFlagIsActive(*b)
	}
	return pfc
}

// SetPatientFlagCreatedAt sets the "patient_flag_created_at" field.
func (pfc *PatientFlagCreate) SetPatientFlagCreatedAt(t time.Time) *PatientFlagCreate {
	pfc.mutation.SetPatientFlagCreatedAt(t)
	return pfc
}

// SetNillablePatientFlagCreatedAt sets the "patient_flag_created_at" field if the given value is not nil.
func (pfc *PatientFlagCreate) SetNillablePatientFlagCreatedAt(t *time.Time) *PatientFlagCreate {
	if t != nil {
		pfc.SetPatientFlagCreatedAt(*t)
	}
	return pfc
}

// SetPatientFlagColor sets the "patient_flag_color" field.
func (pfc *PatientFlagCreate) SetPatientFlagColor(s string) *PatientFlagCreate {
	pfc.mutation.SetPatientFlagColor(s)
	return pfc
}

// SetNillablePatientFlagColor sets the "patient_flag_color" field if the given value is not nil.
func (pfc *PatientFlagCreate) SetNillablePatientFlagColor(s *string) *PatientFlagCreate {
	if s != nil {
		pfc.SetPatientFlagColor(*s)
	}
	return pfc
}

// SetPatientFlagedBy sets the "patient_flaged_by" field.
func (pfc *PatientFlagCreate) SetPatientFlagedBy(s string) *PatientFlagCreate {
	pfc.mutation.SetPatientFlagedBy(s)
	return pfc
}

// SetNillablePatientFlagedBy sets the "patient_flaged_by" field if the given value is not nil.
func (pfc *PatientFlagCreate) SetNillablePatientFlagedBy(s *string) *PatientFlagCreate {
	if s != nil {
		pfc.SetPatientFlagedBy(*s)
	}
	return pfc
}

// SetID sets the "id" field.
func (pfc *PatientFlagCreate) SetID(i int) *PatientFlagCreate {
	pfc.mutation.SetID(i)
	return pfc
}

// Mutation returns the PatientFlagMutation object of the builder.
func (pfc *PatientFlagCreate) Mutation() *PatientFlagMutation {
	return pfc.mutation
}

// Save creates the PatientFlag in the database.
func (pfc *PatientFlagCreate) Save(ctx context.Context) (*PatientFlag, error) {
	pfc.defaults()
	return withHooks(ctx, pfc.sqlSave, pfc.mutation, pfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pfc *PatientFlagCreate) SaveX(ctx context.Context) *PatientFlag {
	v, err := pfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pfc *PatientFlagCreate) Exec(ctx context.Context) error {
	_, err := pfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfc *PatientFlagCreate) ExecX(ctx context.Context) {
	if err := pfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfc *PatientFlagCreate) defaults() {
	if _, ok := pfc.mutation.PatientFlagIsActive(); !ok {
		v := patientflag.DefaultPatientFlagIsActive
		pfc.mutation.SetPatientFlagIsActive(v)
	}
	if _, ok := pfc.mutation.PatientFlagCreatedAt(); !ok {
		v := patientflag.DefaultPatientFlagCreatedAt()
		pfc.mutation.SetPatientFlagCreatedAt(v)
	}
	if _, ok := pfc.mutation.PatientFlagColor(); !ok {
		v := patientflag.DefaultPatientFlagColor
		pfc.mutation.SetPatientFlagColor(v)
	}
	if _, ok := pfc.mutation.PatientFlagedBy(); !ok {
		v := patientflag.DefaultPatientFlagedBy
		pfc.mutation.SetPatientFlagedBy(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfc *PatientFlagCreate) check() error {
	if _, ok := pfc.mutation.PatientFlagName(); !ok {
		return &ValidationError{Name: "patient_flag_name", err: errors.New(`ent: missing required field "PatientFlag.patient_flag_name"`)}
	}
	if _, ok := pfc.mutation.PatientFlagIsActive(); !ok {
		return &ValidationError{Name: "patient_flag_is_active", err: errors.New(`ent: missing required field "PatientFlag.patient_flag_is_active"`)}
	}
	if _, ok := pfc.mutation.PatientFlagCreatedAt(); !ok {
		return &ValidationError{Name: "patient_flag_created_at", err: errors.New(`ent: missing required field "PatientFlag.patient_flag_created_at"`)}
	}
	if _, ok := pfc.mutation.PatientFlagedBy(); !ok {
		return &ValidationError{Name: "patient_flaged_by", err: errors.New(`ent: missing required field "PatientFlag.patient_flaged_by"`)}
	}
	return nil
}

func (pfc *PatientFlagCreate) sqlSave(ctx context.Context) (*PatientFlag, error) {
	if err := pfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pfc.mutation.id = &_node.ID
	pfc.mutation.done = true
	return _node, nil
}

func (pfc *PatientFlagCreate) createSpec() (*PatientFlag, *sqlgraph.CreateSpec) {
	var (
		_node = &PatientFlag{config: pfc.config}
		_spec = sqlgraph.NewCreateSpec(patientflag.Table, sqlgraph.NewFieldSpec(patientflag.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pfc.conflict
	if id, ok := pfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pfc.mutation.PatientFlagName(); ok {
		_spec.SetField(patientflag.FieldPatientFlagName, field.TypeString, value)
		_node.PatientFlagName = value
	}
	if value, ok := pfc.mutation.PatientFlagDisplayName(); ok {
		_spec.SetField(patientflag.FieldPatientFlagDisplayName, field.TypeString, value)
		_node.PatientFlagDisplayName = value
	}
	if value, ok := pfc.mutation.PatientFlagDescription(); ok {
		_spec.SetField(patientflag.FieldPatientFlagDescription, field.TypeString, value)
		_node.PatientFlagDescription = value
	}
	if value, ok := pfc.mutation.PatientFlagIsActive(); ok {
		_spec.SetField(patientflag.FieldPatientFlagIsActive, field.TypeBool, value)
		_node.PatientFlagIsActive = value
	}
	if value, ok := pfc.mutation.PatientFlagCreatedAt(); ok {
		_spec.SetField(patientflag.FieldPatientFlagCreatedAt, field.TypeTime, value)
		_node.PatientFlagCreatedAt = value
	}
	if value, ok := pfc.mutation.PatientFlagColor(); ok {
		_spec.SetField(patientflag.FieldPatientFlagColor, field.TypeString, value)
		_node.PatientFlagColor = value
	}
	if value, ok := pfc.mutation.PatientFlagedBy(); ok {
		_spec.SetField(patientflag.FieldPatientFlagedBy, field.TypeString, value)
		_node.PatientFlagedBy = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PatientFlag.Create().
//		SetPatientFlagName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PatientFlagUpsert) {
//			SetPatientFlagName(v+v).
//		}).
//		Exec(ctx)
func (pfc *PatientFlagCreate) OnConflict(opts ...sql.ConflictOption) *PatientFlagUpsertOne {
	pfc.conflict = opts
	return &PatientFlagUpsertOne{
		create: pfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PatientFlag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pfc *PatientFlagCreate) OnConflictColumns(columns ...string) *PatientFlagUpsertOne {
	pfc.conflict = append(pfc.conflict, sql.ConflictColumns(columns...))
	return &PatientFlagUpsertOne{
		create: pfc,
	}
}

type (
	// PatientFlagUpsertOne is the builder for "upsert"-ing
	//  one PatientFlag node.
	PatientFlagUpsertOne struct {
		create *PatientFlagCreate
	}

	// PatientFlagUpsert is the "OnConflict" setter.
	PatientFlagUpsert struct {
		*sql.UpdateSet
	}
)

// SetPatientFlagName sets the "patient_flag_name" field.
func (u *PatientFlagUpsert) SetPatientFlagName(v string) *PatientFlagUpsert {
	u.Set(patientflag.FieldPatientFlagName, v)
	return u
}

// UpdatePatientFlagName sets the "patient_flag_name" field to the value that was provided on create.
func (u *PatientFlagUpsert) UpdatePatientFlagName() *PatientFlagUpsert {
	u.SetExcluded(patientflag.FieldPatientFlagName)
	return u
}

// SetPatientFlagDisplayName sets the "patient_flag_display_name" field.
func (u *PatientFlagUpsert) SetPatientFlagDisplayName(v string) *PatientFlagUpsert {
	u.Set(patientflag.FieldPatientFlagDisplayName, v)
	return u
}

// UpdatePatientFlagDisplayName sets the "patient_flag_display_name" field to the value that was provided on create.
func (u *PatientFlagUpsert) UpdatePatientFlagDisplayName() *PatientFlagUpsert {
	u.SetExcluded(patientflag.FieldPatientFlagDisplayName)
	return u
}

// ClearPatientFlagDisplayName clears the value of the "patient_flag_display_name" field.
func (u *PatientFlagUpsert) ClearPatientFlagDisplayName() *PatientFlagUpsert {
	u.SetNull(patientflag.FieldPatientFlagDisplayName)
	return u
}

// SetPatientFlagDescription sets the "patient_flag_description" field.
func (u *PatientFlagUpsert) SetPatientFlagDescription(v string) *PatientFlagUpsert {
	u.Set(patientflag.FieldPatientFlagDescription, v)
	return u
}

// UpdatePatientFlagDescription sets the "patient_flag_description" field to the value that was provided on create.
func (u *PatientFlagUpsert) UpdatePatientFlagDescription() *PatientFlagUpsert {
	u.SetExcluded(patientflag.FieldPatientFlagDescription)
	return u
}

// ClearPatientFlagDescription clears the value of the "patient_flag_description" field.
func (u *PatientFlagUpsert) ClearPatientFlagDescription() *PatientFlagUpsert {
	u.SetNull(patientflag.FieldPatientFlagDescription)
	return u
}

// SetPatientFlagIsActive sets the "patient_flag_is_active" field.
func (u *PatientFlagUpsert) SetPatientFlagIsActive(v bool) *PatientFlagUpsert {
	u.Set(patientflag.FieldPatientFlagIsActive, v)
	return u
}

// UpdatePatientFlagIsActive sets the "patient_flag_is_active" field to the value that was provided on create.
func (u *PatientFlagUpsert) UpdatePatientFlagIsActive() *PatientFlagUpsert {
	u.SetExcluded(patientflag.FieldPatientFlagIsActive)
	return u
}

// SetPatientFlagCreatedAt sets the "patient_flag_created_at" field.
func (u *PatientFlagUpsert) SetPatientFlagCreatedAt(v time.Time) *PatientFlagUpsert {
	u.Set(patientflag.FieldPatientFlagCreatedAt, v)
	return u
}

// UpdatePatientFlagCreatedAt sets the "patient_flag_created_at" field to the value that was provided on create.
func (u *PatientFlagUpsert) UpdatePatientFlagCreatedAt() *PatientFlagUpsert {
	u.SetExcluded(patientflag.FieldPatientFlagCreatedAt)
	return u
}

// SetPatientFlagColor sets the "patient_flag_color" field.
func (u *PatientFlagUpsert) SetPatientFlagColor(v string) *PatientFlagUpsert {
	u.Set(patientflag.FieldPatientFlagColor, v)
	return u
}

// UpdatePatientFlagColor sets the "patient_flag_color" field to the value that was provided on create.
func (u *PatientFlagUpsert) UpdatePatientFlagColor() *PatientFlagUpsert {
	u.SetExcluded(patientflag.FieldPatientFlagColor)
	return u
}

// ClearPatientFlagColor clears the value of the "patient_flag_color" field.
func (u *PatientFlagUpsert) ClearPatientFlagColor() *PatientFlagUpsert {
	u.SetNull(patientflag.FieldPatientFlagColor)
	return u
}

// SetPatientFlagedBy sets the "patient_flaged_by" field.
func (u *PatientFlagUpsert) SetPatientFlagedBy(v string) *PatientFlagUpsert {
	u.Set(patientflag.FieldPatientFlagedBy, v)
	return u
}

// UpdatePatientFlagedBy sets the "patient_flaged_by" field to the value that was provided on create.
func (u *PatientFlagUpsert) UpdatePatientFlagedBy() *PatientFlagUpsert {
	u.SetExcluded(patientflag.FieldPatientFlagedBy)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PatientFlag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(patientflag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PatientFlagUpsertOne) UpdateNewValues() *PatientFlagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(patientflag.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PatientFlag.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PatientFlagUpsertOne) Ignore() *PatientFlagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PatientFlagUpsertOne) DoNothing() *PatientFlagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PatientFlagCreate.OnConflict
// documentation for more info.
func (u *PatientFlagUpsertOne) Update(set func(*PatientFlagUpsert)) *PatientFlagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PatientFlagUpsert{UpdateSet: update})
	}))
	return u
}

// SetPatientFlagName sets the "patient_flag_name" field.
func (u *PatientFlagUpsertOne) SetPatientFlagName(v string) *PatientFlagUpsertOne {
	return u.Update(func(s *PatientFlagUpsert) {
		s.SetPatientFlagName(v)
	})
}

// UpdatePatientFlagName sets the "patient_flag_name" field to the value that was provided on create.
func (u *PatientFlagUpsertOne) UpdatePatientFlagName() *PatientFlagUpsertOne {
	return u.Update(func(s *PatientFlagUpsert) {
		s.UpdatePatientFlagName()
	})
}

// SetPatientFlagDisplayName sets the "patient_flag_display_name" field.
func (u *PatientFlagUpsertOne) SetPatientFlagDisplayName(v string) *PatientFlagUpsertOne {
	return u.Update(func(s *PatientFlagUpsert) {
		s.SetPatientFlagDisplayName(v)
	})
}

// UpdatePatientFlagDisplayName sets the "patient_flag_display_name" field to the value that was provided on create.
func (u *PatientFlagUpsertOne) UpdatePatientFlagDisplayName() *PatientFlagUpsertOne {
	return u.Update(func(s *PatientFlagUpsert) {
		s.UpdatePatientFlagDisplayName()
	})
}

// ClearPatientFlagDisplayName clears the value of the "patient_flag_display_name" field.
func (u *PatientFlagUpsertOne) ClearPatientFlagDisplayName() *PatientFlagUpsertOne {
	return u.Update(func(s *PatientFlagUpsert) {
		s.ClearPatientFlagDisplayName()
	})
}

// SetPatientFlagDescription sets the "patient_flag_description" field.
func (u *PatientFlagUpsertOne) SetPatientFlagDescription(v string) *PatientFlagUpsertOne {
	return u.Update(func(s *PatientFlagUpsert) {
		s.SetPatientFlagDescription(v)
	})
}

// UpdatePatientFlagDescription sets the "patient_flag_description" field to the value that was provided on create.
func (u *PatientFlagUpsertOne) UpdatePatientFlagDescription() *PatientFlagUpsertOne {
	return u.Update(func(s *PatientFlagUpsert) {
		s.UpdatePatientFlagDescription()
	})
}

// ClearPatientFlagDescription clears the value of the "patient_flag_description" field.
func (u *PatientFlagUpsertOne) ClearPatientFlagDescription() *PatientFlagUpsertOne {
	return u.Update(func(s *PatientFlagUpsert) {
		s.ClearPatientFlagDescription()
	})
}

// SetPatientFlagIsActive sets the "patient_flag_is_active" field.
func (u *PatientFlagUpsertOne) SetPatientFlagIsActive(v bool) *PatientFlagUpsertOne {
	return u.Update(func(s *PatientFlagUpsert) {
		s.SetPatientFlagIsActive(v)
	})
}

// UpdatePatientFlagIsActive sets the "patient_flag_is_active" field to the value that was provided on create.
func (u *PatientFlagUpsertOne) UpdatePatientFlagIsActive() *PatientFlagUpsertOne {
	return u.Update(func(s *PatientFlagUpsert) {
		s.UpdatePatientFlagIsActive()
	})
}

// SetPatientFlagCreatedAt sets the "patient_flag_created_at" field.
func (u *PatientFlagUpsertOne) SetPatientFlagCreatedAt(v time.Time) *PatientFlagUpsertOne {
	return u.Update(func(s *PatientFlagUpsert) {
		s.SetPatientFlagCreatedAt(v)
	})
}

// UpdatePatientFlagCreatedAt sets the "patient_flag_created_at" field to the value that was provided on create.
func (u *PatientFlagUpsertOne) UpdatePatientFlagCreatedAt() *PatientFlagUpsertOne {
	return u.Update(func(s *PatientFlagUpsert) {
		s.UpdatePatientFlagCreatedAt()
	})
}

// SetPatientFlagColor sets the "patient_flag_color" field.
func (u *PatientFlagUpsertOne) SetPatientFlagColor(v string) *PatientFlagUpsertOne {
	return u.Update(func(s *PatientFlagUpsert) {
		s.SetPatientFlagColor(v)
	})
}

// UpdatePatientFlagColor sets the "patient_flag_color" field to the value that was provided on create.
func (u *PatientFlagUpsertOne) UpdatePatientFlagColor() *PatientFlagUpsertOne {
	return u.Update(func(s *PatientFlagUpsert) {
		s.UpdatePatientFlagColor()
	})
}

// ClearPatientFlagColor clears the value of the "patient_flag_color" field.
func (u *PatientFlagUpsertOne) ClearPatientFlagColor() *PatientFlagUpsertOne {
	return u.Update(func(s *PatientFlagUpsert) {
		s.ClearPatientFlagColor()
	})
}

// SetPatientFlagedBy sets the "patient_flaged_by" field.
func (u *PatientFlagUpsertOne) SetPatientFlagedBy(v string) *PatientFlagUpsertOne {
	return u.Update(func(s *PatientFlagUpsert) {
		s.SetPatientFlagedBy(v)
	})
}

// UpdatePatientFlagedBy sets the "patient_flaged_by" field to the value that was provided on create.
func (u *PatientFlagUpsertOne) UpdatePatientFlagedBy() *PatientFlagUpsertOne {
	return u.Update(func(s *PatientFlagUpsert) {
		s.UpdatePatientFlagedBy()
	})
}

// Exec executes the query.
func (u *PatientFlagUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PatientFlagCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PatientFlagUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PatientFlagUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PatientFlagUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PatientFlagCreateBulk is the builder for creating many PatientFlag entities in bulk.
type PatientFlagCreateBulk struct {
	config
	err      error
	builders []*PatientFlagCreate
	conflict []sql.ConflictOption
}

// Save creates the PatientFlag entities in the database.
func (pfcb *PatientFlagCreateBulk) Save(ctx context.Context) ([]*PatientFlag, error) {
	if pfcb.err != nil {
		return nil, pfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pfcb.builders))
	nodes := make([]*PatientFlag, len(pfcb.builders))
	mutators := make([]Mutator, len(pfcb.builders))
	for i := range pfcb.builders {
		func(i int, root context.Context) {
			builder := pfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PatientFlagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pfcb *PatientFlagCreateBulk) SaveX(ctx context.Context) []*PatientFlag {
	v, err := pfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pfcb *PatientFlagCreateBulk) Exec(ctx context.Context) error {
	_, err := pfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfcb *PatientFlagCreateBulk) ExecX(ctx context.Context) {
	if err := pfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PatientFlag.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PatientFlagUpsert) {
//			SetPatientFlagName(v+v).
//		}).
//		Exec(ctx)
func (pfcb *PatientFlagCreateBulk) OnConflict(opts ...sql.ConflictOption) *PatientFlagUpsertBulk {
	pfcb.conflict = opts
	return &PatientFlagUpsertBulk{
		create: pfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PatientFlag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pfcb *PatientFlagCreateBulk) OnConflictColumns(columns ...string) *PatientFlagUpsertBulk {
	pfcb.conflict = append(pfcb.conflict, sql.ConflictColumns(columns...))
	return &PatientFlagUpsertBulk{
		create: pfcb,
	}
}

// PatientFlagUpsertBulk is the builder for "upsert"-ing
// a bulk of PatientFlag nodes.
type PatientFlagUpsertBulk struct {
	create *PatientFlagCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PatientFlag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(patientflag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PatientFlagUpsertBulk) UpdateNewValues() *PatientFlagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(patientflag.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PatientFlag.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PatientFlagUpsertBulk) Ignore() *PatientFlagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PatientFlagUpsertBulk) DoNothing() *PatientFlagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PatientFlagCreateBulk.OnConflict
// documentation for more info.
func (u *PatientFlagUpsertBulk) Update(set func(*PatientFlagUpsert)) *PatientFlagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PatientFlagUpsert{UpdateSet: update})
	}))
	return u
}

// SetPatientFlagName sets the "patient_flag_name" field.
func (u *PatientFlagUpsertBulk) SetPatientFlagName(v string) *PatientFlagUpsertBulk {
	return u.Update(func(s *PatientFlagUpsert) {
		s.SetPatientFlagName(v)
	})
}

// UpdatePatientFlagName sets the "patient_flag_name" field to the value that was provided on create.
func (u *PatientFlagUpsertBulk) UpdatePatientFlagName() *PatientFlagUpsertBulk {
	return u.Update(func(s *PatientFlagUpsert) {
		s.UpdatePatientFlagName()
	})
}

// SetPatientFlagDisplayName sets the "patient_flag_display_name" field.
func (u *PatientFlagUpsertBulk) SetPatientFlagDisplayName(v string) *PatientFlagUpsertBulk {
	return u.Update(func(s *PatientFlagUpsert) {
		s.SetPatientFlagDisplayName(v)
	})
}

// UpdatePatientFlagDisplayName sets the "patient_flag_display_name" field to the value that was provided on create.
func (u *PatientFlagUpsertBulk) UpdatePatientFlagDisplayName() *PatientFlagUpsertBulk {
	return u.Update(func(s *PatientFlagUpsert) {
		s.UpdatePatientFlagDisplayName()
	})
}

// ClearPatientFlagDisplayName clears the value of the "patient_flag_display_name" field.
func (u *PatientFlagUpsertBulk) ClearPatientFlagDisplayName() *PatientFlagUpsertBulk {
	return u.Update(func(s *PatientFlagUpsert) {
		s.ClearPatientFlagDisplayName()
	})
}

// SetPatientFlagDescription sets the "patient_flag_description" field.
func (u *PatientFlagUpsertBulk) SetPatientFlagDescription(v string) *PatientFlagUpsertBulk {
	return u.Update(func(s *PatientFlagUpsert) {
		s.SetPatientFlagDescription(v)
	})
}

// UpdatePatientFlagDescription sets the "patient_flag_description" field to the value that was provided on create.
func (u *PatientFlagUpsertBulk) UpdatePatientFlagDescription() *PatientFlagUpsertBulk {
	return u.Update(func(s *PatientFlagUpsert) {
		s.UpdatePatientFlagDescription()
	})
}

// ClearPatientFlagDescription clears the value of the "patient_flag_description" field.
func (u *PatientFlagUpsertBulk) ClearPatientFlagDescription() *PatientFlagUpsertBulk {
	return u.Update(func(s *PatientFlagUpsert) {
		s.ClearPatientFlagDescription()
	})
}

// SetPatientFlagIsActive sets the "patient_flag_is_active" field.
func (u *PatientFlagUpsertBulk) SetPatientFlagIsActive(v bool) *PatientFlagUpsertBulk {
	return u.Update(func(s *PatientFlagUpsert) {
		s.SetPatientFlagIsActive(v)
	})
}

// UpdatePatientFlagIsActive sets the "patient_flag_is_active" field to the value that was provided on create.
func (u *PatientFlagUpsertBulk) UpdatePatientFlagIsActive() *PatientFlagUpsertBulk {
	return u.Update(func(s *PatientFlagUpsert) {
		s.UpdatePatientFlagIsActive()
	})
}

// SetPatientFlagCreatedAt sets the "patient_flag_created_at" field.
func (u *PatientFlagUpsertBulk) SetPatientFlagCreatedAt(v time.Time) *PatientFlagUpsertBulk {
	return u.Update(func(s *PatientFlagUpsert) {
		s.SetPatientFlagCreatedAt(v)
	})
}

// UpdatePatientFlagCreatedAt sets the "patient_flag_created_at" field to the value that was provided on create.
func (u *PatientFlagUpsertBulk) UpdatePatientFlagCreatedAt() *PatientFlagUpsertBulk {
	return u.Update(func(s *PatientFlagUpsert) {
		s.UpdatePatientFlagCreatedAt()
	})
}

// SetPatientFlagColor sets the "patient_flag_color" field.
func (u *PatientFlagUpsertBulk) SetPatientFlagColor(v string) *PatientFlagUpsertBulk {
	return u.Update(func(s *PatientFlagUpsert) {
		s.SetPatientFlagColor(v)
	})
}

// UpdatePatientFlagColor sets the "patient_flag_color" field to the value that was provided on create.
func (u *PatientFlagUpsertBulk) UpdatePatientFlagColor() *PatientFlagUpsertBulk {
	return u.Update(func(s *PatientFlagUpsert) {
		s.UpdatePatientFlagColor()
	})
}

// ClearPatientFlagColor clears the value of the "patient_flag_color" field.
func (u *PatientFlagUpsertBulk) ClearPatientFlagColor() *PatientFlagUpsertBulk {
	return u.Update(func(s *PatientFlagUpsert) {
		s.ClearPatientFlagColor()
	})
}

// SetPatientFlagedBy sets the "patient_flaged_by" field.
func (u *PatientFlagUpsertBulk) SetPatientFlagedBy(v string) *PatientFlagUpsertBulk {
	return u.Update(func(s *PatientFlagUpsert) {
		s.SetPatientFlagedBy(v)
	})
}

// UpdatePatientFlagedBy sets the "patient_flaged_by" field to the value that was provided on create.
func (u *PatientFlagUpsertBulk) UpdatePatientFlagedBy() *PatientFlagUpsertBulk {
	return u.Update(func(s *PatientFlagUpsert) {
		s.UpdatePatientFlagedBy()
	})
}

// Exec executes the query.
func (u *PatientFlagUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PatientFlagCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PatientFlagCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PatientFlagUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
