// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/customer"
	"coresamples/ent/internaluser"
	"coresamples/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Customer is the model entity for the Customer schema.
type Customer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"customer_id"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// CustomerType holds the value of the "customer_type" field.
	CustomerType string `json:"customer_type,omitempty"`
	// CustomerFirstName holds the value of the "customer_first_name" field.
	CustomerFirstName string `json:"customer_first_name,omitempty"`
	// CustomerLastName holds the value of the "customer_last_name" field.
	CustomerLastName string `json:"customer_last_name,omitempty"`
	// CustomerMiddleName holds the value of the "customer_middle_name" field.
	CustomerMiddleName string `json:"customer_middle_name,omitempty"`
	// CustomerTypeID holds the value of the "customer_type_id" field.
	CustomerTypeID string `json:"customer_type_id,omitempty"`
	// CustomerSuffix holds the value of the "customer_suffix" field.
	CustomerSuffix string `json:"customer_suffix,omitempty"`
	// CustomerSamplesReceived holds the value of the "customer_samples_received" field.
	CustomerSamplesReceived string `json:"customer_samples_received,omitempty"`
	// CustomerRequestSubmitTime holds the value of the "customer_request_submit_time" field.
	CustomerRequestSubmitTime time.Time `json:"customer_request_submit_time,omitempty"`
	// CustomerSignupTime holds the value of the "customer_signup_time" field.
	CustomerSignupTime time.Time `json:"customer_signup_time,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"isActive"`
	// SalesID holds the value of the "sales_id" field.
	SalesID int `json:"sales_id,omitempty"`
	// CustomerNpiNumber holds the value of the "customer_npi_number" field.
	CustomerNpiNumber string `json:"customer_npi_number,omitempty"`
	// ReferralSource holds the value of the "referral_source" field.
	ReferralSource string `json:"referral_source,omitempty"`
	// OrderPlacementAllowed holds the value of the "order_placement_allowed" field.
	OrderPlacementAllowed bool `json:"order_placement_allowed,omitempty"`
	// BetaProgramEnabled holds the value of the "beta_program_enabled" field.
	BetaProgramEnabled bool `json:"beta_program_enabled,omitempty"`
	// OnboardingQuestionnaireFilledOn holds the value of the "onboarding_questionnaire_filled_on" field.
	OnboardingQuestionnaireFilledOn time.Time `json:"onboarding_questionnaire_filled_on,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerQuery when eager-loading is set.
	Edges        CustomerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CustomerEdges holds the relations/edges for other nodes in the graph.
type CustomerEdges struct {
	// Samples holds the value of the samples edge.
	Samples []*Sample `json:"samples,omitempty"`
	// CustomerContacts holds the value of the customer_contacts edge.
	CustomerContacts []*Contact `json:"customer_contacts,omitempty"`
	// CustomerAddresses holds the value of the customer_addresses edge.
	CustomerAddresses []*Address `json:"customer_addresses,omitempty"`
	// Clinics holds the value of the clinics edge.
	Clinics []*Clinic `json:"clinics,omitempty"`
	// Sales holds the value of the sales edge.
	Sales *InternalUser `json:"sales,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*OrderInfo `json:"orders,omitempty"`
	// CurrentPatients holds the value of the current_patients edge.
	CurrentPatients []*Patient `json:"current_patients,omitempty"`
	// Patients holds the value of the patients edge.
	Patients []*Patient `json:"patients,omitempty"`
	// CustomerBetaProgramParticipations holds the value of the customer_beta_program_participations edge.
	CustomerBetaProgramParticipations []*BetaProgramParticipation `json:"customer_beta_program_participations,omitempty"`
	// CustomerSettingsOnClinics holds the value of the customer_settings_on_clinics edge.
	CustomerSettingsOnClinics []*CustomerSettingOnClinics `json:"customer_settings_on_clinics,omitempty"`
	// CustomerAddressesOnClinics holds the value of the customer_addresses_on_clinics edge.
	CustomerAddressesOnClinics []*CustomerAddressOnClinics `json:"customer_addresses_on_clinics,omitempty"`
	// CustomerContactsOnClinics holds the value of the customer_contacts_on_clinics edge.
	CustomerContactsOnClinics []*CustomerContactOnClinics `json:"customer_contacts_on_clinics,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [13]bool
}

// SamplesOrErr returns the Samples value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) SamplesOrErr() ([]*Sample, error) {
	if e.loadedTypes[0] {
		return e.Samples, nil
	}
	return nil, &NotLoadedError{edge: "samples"}
}

// CustomerContactsOrErr returns the CustomerContacts value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) CustomerContactsOrErr() ([]*Contact, error) {
	if e.loadedTypes[1] {
		return e.CustomerContacts, nil
	}
	return nil, &NotLoadedError{edge: "customer_contacts"}
}

// CustomerAddressesOrErr returns the CustomerAddresses value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) CustomerAddressesOrErr() ([]*Address, error) {
	if e.loadedTypes[2] {
		return e.CustomerAddresses, nil
	}
	return nil, &NotLoadedError{edge: "customer_addresses"}
}

// ClinicsOrErr returns the Clinics value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) ClinicsOrErr() ([]*Clinic, error) {
	if e.loadedTypes[3] {
		return e.Clinics, nil
	}
	return nil, &NotLoadedError{edge: "clinics"}
}

// SalesOrErr returns the Sales value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEdges) SalesOrErr() (*InternalUser, error) {
	if e.loadedTypes[4] {
		if e.Sales == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: internaluser.Label}
		}
		return e.Sales, nil
	}
	return nil, &NotLoadedError{edge: "sales"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[5] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) OrdersOrErr() ([]*OrderInfo, error) {
	if e.loadedTypes[6] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// CurrentPatientsOrErr returns the CurrentPatients value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) CurrentPatientsOrErr() ([]*Patient, error) {
	if e.loadedTypes[7] {
		return e.CurrentPatients, nil
	}
	return nil, &NotLoadedError{edge: "current_patients"}
}

// PatientsOrErr returns the Patients value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) PatientsOrErr() ([]*Patient, error) {
	if e.loadedTypes[8] {
		return e.Patients, nil
	}
	return nil, &NotLoadedError{edge: "patients"}
}

// CustomerBetaProgramParticipationsOrErr returns the CustomerBetaProgramParticipations value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) CustomerBetaProgramParticipationsOrErr() ([]*BetaProgramParticipation, error) {
	if e.loadedTypes[9] {
		return e.CustomerBetaProgramParticipations, nil
	}
	return nil, &NotLoadedError{edge: "customer_beta_program_participations"}
}

// CustomerSettingsOnClinicsOrErr returns the CustomerSettingsOnClinics value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) CustomerSettingsOnClinicsOrErr() ([]*CustomerSettingOnClinics, error) {
	if e.loadedTypes[10] {
		return e.CustomerSettingsOnClinics, nil
	}
	return nil, &NotLoadedError{edge: "customer_settings_on_clinics"}
}

// CustomerAddressesOnClinicsOrErr returns the CustomerAddressesOnClinics value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) CustomerAddressesOnClinicsOrErr() ([]*CustomerAddressOnClinics, error) {
	if e.loadedTypes[11] {
		return e.CustomerAddressesOnClinics, nil
	}
	return nil, &NotLoadedError{edge: "customer_addresses_on_clinics"}
}

// CustomerContactsOnClinicsOrErr returns the CustomerContactsOnClinics value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) CustomerContactsOnClinicsOrErr() ([]*CustomerContactOnClinics, error) {
	if e.loadedTypes[12] {
		return e.CustomerContactsOnClinics, nil
	}
	return nil, &NotLoadedError{edge: "customer_contacts_on_clinics"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Customer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customer.FieldIsActive, customer.FieldOrderPlacementAllowed, customer.FieldBetaProgramEnabled:
			values[i] = new(sql.NullBool)
		case customer.FieldID, customer.FieldUserID, customer.FieldSalesID:
			values[i] = new(sql.NullInt64)
		case customer.FieldCustomerType, customer.FieldCustomerFirstName, customer.FieldCustomerLastName, customer.FieldCustomerMiddleName, customer.FieldCustomerTypeID, customer.FieldCustomerSuffix, customer.FieldCustomerSamplesReceived, customer.FieldCustomerNpiNumber, customer.FieldReferralSource:
			values[i] = new(sql.NullString)
		case customer.FieldCustomerRequestSubmitTime, customer.FieldCustomerSignupTime, customer.FieldOnboardingQuestionnaireFilledOn:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Customer fields.
func (c *Customer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case customer.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				c.UserID = int(value.Int64)
			}
		case customer.FieldCustomerType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_type", values[i])
			} else if value.Valid {
				c.CustomerType = value.String
			}
		case customer.FieldCustomerFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_first_name", values[i])
			} else if value.Valid {
				c.CustomerFirstName = value.String
			}
		case customer.FieldCustomerLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_last_name", values[i])
			} else if value.Valid {
				c.CustomerLastName = value.String
			}
		case customer.FieldCustomerMiddleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_middle_name", values[i])
			} else if value.Valid {
				c.CustomerMiddleName = value.String
			}
		case customer.FieldCustomerTypeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_type_id", values[i])
			} else if value.Valid {
				c.CustomerTypeID = value.String
			}
		case customer.FieldCustomerSuffix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_suffix", values[i])
			} else if value.Valid {
				c.CustomerSuffix = value.String
			}
		case customer.FieldCustomerSamplesReceived:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_samples_received", values[i])
			} else if value.Valid {
				c.CustomerSamplesReceived = value.String
			}
		case customer.FieldCustomerRequestSubmitTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field customer_request_submit_time", values[i])
			} else if value.Valid {
				c.CustomerRequestSubmitTime = value.Time
			}
		case customer.FieldCustomerSignupTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field customer_signup_time", values[i])
			} else if value.Valid {
				c.CustomerSignupTime = value.Time
			}
		case customer.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				c.IsActive = value.Bool
			}
		case customer.FieldSalesID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sales_id", values[i])
			} else if value.Valid {
				c.SalesID = int(value.Int64)
			}
		case customer.FieldCustomerNpiNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_npi_number", values[i])
			} else if value.Valid {
				c.CustomerNpiNumber = value.String
			}
		case customer.FieldReferralSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field referral_source", values[i])
			} else if value.Valid {
				c.ReferralSource = value.String
			}
		case customer.FieldOrderPlacementAllowed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field order_placement_allowed", values[i])
			} else if value.Valid {
				c.OrderPlacementAllowed = value.Bool
			}
		case customer.FieldBetaProgramEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field beta_program_enabled", values[i])
			} else if value.Valid {
				c.BetaProgramEnabled = value.Bool
			}
		case customer.FieldOnboardingQuestionnaireFilledOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field onboarding_questionnaire_filled_on", values[i])
			} else if value.Valid {
				c.OnboardingQuestionnaireFilledOn = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Customer.
// This includes values selected through modifiers, order, etc.
func (c *Customer) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QuerySamples queries the "samples" edge of the Customer entity.
func (c *Customer) QuerySamples() *SampleQuery {
	return NewCustomerClient(c.config).QuerySamples(c)
}

// QueryCustomerContacts queries the "customer_contacts" edge of the Customer entity.
func (c *Customer) QueryCustomerContacts() *ContactQuery {
	return NewCustomerClient(c.config).QueryCustomerContacts(c)
}

// QueryCustomerAddresses queries the "customer_addresses" edge of the Customer entity.
func (c *Customer) QueryCustomerAddresses() *AddressQuery {
	return NewCustomerClient(c.config).QueryCustomerAddresses(c)
}

// QueryClinics queries the "clinics" edge of the Customer entity.
func (c *Customer) QueryClinics() *ClinicQuery {
	return NewCustomerClient(c.config).QueryClinics(c)
}

// QuerySales queries the "sales" edge of the Customer entity.
func (c *Customer) QuerySales() *InternalUserQuery {
	return NewCustomerClient(c.config).QuerySales(c)
}

// QueryUser queries the "user" edge of the Customer entity.
func (c *Customer) QueryUser() *UserQuery {
	return NewCustomerClient(c.config).QueryUser(c)
}

// QueryOrders queries the "orders" edge of the Customer entity.
func (c *Customer) QueryOrders() *OrderInfoQuery {
	return NewCustomerClient(c.config).QueryOrders(c)
}

// QueryCurrentPatients queries the "current_patients" edge of the Customer entity.
func (c *Customer) QueryCurrentPatients() *PatientQuery {
	return NewCustomerClient(c.config).QueryCurrentPatients(c)
}

// QueryPatients queries the "patients" edge of the Customer entity.
func (c *Customer) QueryPatients() *PatientQuery {
	return NewCustomerClient(c.config).QueryPatients(c)
}

// QueryCustomerBetaProgramParticipations queries the "customer_beta_program_participations" edge of the Customer entity.
func (c *Customer) QueryCustomerBetaProgramParticipations() *BetaProgramParticipationQuery {
	return NewCustomerClient(c.config).QueryCustomerBetaProgramParticipations(c)
}

// QueryCustomerSettingsOnClinics queries the "customer_settings_on_clinics" edge of the Customer entity.
func (c *Customer) QueryCustomerSettingsOnClinics() *CustomerSettingOnClinicsQuery {
	return NewCustomerClient(c.config).QueryCustomerSettingsOnClinics(c)
}

// QueryCustomerAddressesOnClinics queries the "customer_addresses_on_clinics" edge of the Customer entity.
func (c *Customer) QueryCustomerAddressesOnClinics() *CustomerAddressOnClinicsQuery {
	return NewCustomerClient(c.config).QueryCustomerAddressesOnClinics(c)
}

// QueryCustomerContactsOnClinics queries the "customer_contacts_on_clinics" edge of the Customer entity.
func (c *Customer) QueryCustomerContactsOnClinics() *CustomerContactOnClinicsQuery {
	return NewCustomerClient(c.config).QueryCustomerContactsOnClinics(c)
}

// Update returns a builder for updating this Customer.
// Note that you need to call Customer.Unwrap() before calling this method if this Customer
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Customer) Update() *CustomerUpdateOne {
	return NewCustomerClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Customer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Customer) Unwrap() *Customer {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Customer is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Customer) String() string {
	var builder strings.Builder
	builder.WriteString("Customer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", c.UserID))
	builder.WriteString(", ")
	builder.WriteString("customer_type=")
	builder.WriteString(c.CustomerType)
	builder.WriteString(", ")
	builder.WriteString("customer_first_name=")
	builder.WriteString(c.CustomerFirstName)
	builder.WriteString(", ")
	builder.WriteString("customer_last_name=")
	builder.WriteString(c.CustomerLastName)
	builder.WriteString(", ")
	builder.WriteString("customer_middle_name=")
	builder.WriteString(c.CustomerMiddleName)
	builder.WriteString(", ")
	builder.WriteString("customer_type_id=")
	builder.WriteString(c.CustomerTypeID)
	builder.WriteString(", ")
	builder.WriteString("customer_suffix=")
	builder.WriteString(c.CustomerSuffix)
	builder.WriteString(", ")
	builder.WriteString("customer_samples_received=")
	builder.WriteString(c.CustomerSamplesReceived)
	builder.WriteString(", ")
	builder.WriteString("customer_request_submit_time=")
	builder.WriteString(c.CustomerRequestSubmitTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("customer_signup_time=")
	builder.WriteString(c.CustomerSignupTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", c.IsActive))
	builder.WriteString(", ")
	builder.WriteString("sales_id=")
	builder.WriteString(fmt.Sprintf("%v", c.SalesID))
	builder.WriteString(", ")
	builder.WriteString("customer_npi_number=")
	builder.WriteString(c.CustomerNpiNumber)
	builder.WriteString(", ")
	builder.WriteString("referral_source=")
	builder.WriteString(c.ReferralSource)
	builder.WriteString(", ")
	builder.WriteString("order_placement_allowed=")
	builder.WriteString(fmt.Sprintf("%v", c.OrderPlacementAllowed))
	builder.WriteString(", ")
	builder.WriteString("beta_program_enabled=")
	builder.WriteString(fmt.Sprintf("%v", c.BetaProgramEnabled))
	builder.WriteString(", ")
	builder.WriteString("onboarding_questionnaire_filled_on=")
	builder.WriteString(c.OnboardingQuestionnaireFilledOn.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Customers is a parsable slice of Customer.
type Customers []*Customer
