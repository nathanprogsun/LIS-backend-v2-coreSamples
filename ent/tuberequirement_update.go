// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/sample"
	"coresamples/ent/tuberequirement"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TubeRequirementUpdate is the builder for updating TubeRequirement entities.
type TubeRequirementUpdate struct {
	config
	hooks    []Hook
	mutation *TubeRequirementMutation
}

// Where appends a list predicates to the TubeRequirementUpdate builder.
func (tru *TubeRequirementUpdate) Where(ps ...predicate.TubeRequirement) *TubeRequirementUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetSampleID sets the "sample_id" field.
func (tru *TubeRequirementUpdate) SetSampleID(i int) *TubeRequirementUpdate {
	tru.mutation.SetSampleID(i)
	return tru
}

// SetNillableSampleID sets the "sample_id" field if the given value is not nil.
func (tru *TubeRequirementUpdate) SetNillableSampleID(i *int) *TubeRequirementUpdate {
	if i != nil {
		tru.SetSampleID(*i)
	}
	return tru
}

// ClearSampleID clears the value of the "sample_id" field.
func (tru *TubeRequirementUpdate) ClearSampleID() *TubeRequirementUpdate {
	tru.mutation.ClearSampleID()
	return tru
}

// SetTubeType sets the "tube_type" field.
func (tru *TubeRequirementUpdate) SetTubeType(s string) *TubeRequirementUpdate {
	tru.mutation.SetTubeType(s)
	return tru
}

// SetNillableTubeType sets the "tube_type" field if the given value is not nil.
func (tru *TubeRequirementUpdate) SetNillableTubeType(s *string) *TubeRequirementUpdate {
	if s != nil {
		tru.SetTubeType(*s)
	}
	return tru
}

// SetRequiredCount sets the "required_count" field.
func (tru *TubeRequirementUpdate) SetRequiredCount(i int) *TubeRequirementUpdate {
	tru.mutation.ResetRequiredCount()
	tru.mutation.SetRequiredCount(i)
	return tru
}

// SetNillableRequiredCount sets the "required_count" field if the given value is not nil.
func (tru *TubeRequirementUpdate) SetNillableRequiredCount(i *int) *TubeRequirementUpdate {
	if i != nil {
		tru.SetRequiredCount(*i)
	}
	return tru
}

// AddRequiredCount adds i to the "required_count" field.
func (tru *TubeRequirementUpdate) AddRequiredCount(i int) *TubeRequirementUpdate {
	tru.mutation.AddRequiredCount(i)
	return tru
}

// SetRequiredCountCreateTime sets the "required_count_create_time" field.
func (tru *TubeRequirementUpdate) SetRequiredCountCreateTime(t time.Time) *TubeRequirementUpdate {
	tru.mutation.SetRequiredCountCreateTime(t)
	return tru
}

// SetNillableRequiredCountCreateTime sets the "required_count_create_time" field if the given value is not nil.
func (tru *TubeRequirementUpdate) SetNillableRequiredCountCreateTime(t *time.Time) *TubeRequirementUpdate {
	if t != nil {
		tru.SetRequiredCountCreateTime(*t)
	}
	return tru
}

// SetRequiredBy sets the "required_by" field.
func (tru *TubeRequirementUpdate) SetRequiredBy(s string) *TubeRequirementUpdate {
	tru.mutation.SetRequiredBy(s)
	return tru
}

// SetNillableRequiredBy sets the "required_by" field if the given value is not nil.
func (tru *TubeRequirementUpdate) SetNillableRequiredBy(s *string) *TubeRequirementUpdate {
	if s != nil {
		tru.SetRequiredBy(*s)
	}
	return tru
}

// SetModifiedBy sets the "modified_by" field.
func (tru *TubeRequirementUpdate) SetModifiedBy(s string) *TubeRequirementUpdate {
	tru.mutation.SetModifiedBy(s)
	return tru
}

// SetNillableModifiedBy sets the "modified_by" field if the given value is not nil.
func (tru *TubeRequirementUpdate) SetNillableModifiedBy(s *string) *TubeRequirementUpdate {
	if s != nil {
		tru.SetModifiedBy(*s)
	}
	return tru
}

// ClearModifiedBy clears the value of the "modified_by" field.
func (tru *TubeRequirementUpdate) ClearModifiedBy() *TubeRequirementUpdate {
	tru.mutation.ClearModifiedBy()
	return tru
}

// SetModifiedTime sets the "modified_time" field.
func (tru *TubeRequirementUpdate) SetModifiedTime(t time.Time) *TubeRequirementUpdate {
	tru.mutation.SetModifiedTime(t)
	return tru
}

// SetSample sets the "sample" edge to the Sample entity.
func (tru *TubeRequirementUpdate) SetSample(s *Sample) *TubeRequirementUpdate {
	return tru.SetSampleID(s.ID)
}

// Mutation returns the TubeRequirementMutation object of the builder.
func (tru *TubeRequirementUpdate) Mutation() *TubeRequirementMutation {
	return tru.mutation
}

// ClearSample clears the "sample" edge to the Sample entity.
func (tru *TubeRequirementUpdate) ClearSample() *TubeRequirementUpdate {
	tru.mutation.ClearSample()
	return tru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TubeRequirementUpdate) Save(ctx context.Context) (int, error) {
	tru.defaults()
	return withHooks(ctx, tru.sqlSave, tru.mutation, tru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TubeRequirementUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TubeRequirementUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TubeRequirementUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tru *TubeRequirementUpdate) defaults() {
	if _, ok := tru.mutation.ModifiedTime(); !ok {
		v := tuberequirement.UpdateDefaultModifiedTime()
		tru.mutation.SetModifiedTime(v)
	}
}

func (tru *TubeRequirementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tuberequirement.Table, tuberequirement.Columns, sqlgraph.NewFieldSpec(tuberequirement.FieldID, field.TypeInt))
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tru.mutation.TubeType(); ok {
		_spec.SetField(tuberequirement.FieldTubeType, field.TypeString, value)
	}
	if value, ok := tru.mutation.RequiredCount(); ok {
		_spec.SetField(tuberequirement.FieldRequiredCount, field.TypeInt, value)
	}
	if value, ok := tru.mutation.AddedRequiredCount(); ok {
		_spec.AddField(tuberequirement.FieldRequiredCount, field.TypeInt, value)
	}
	if value, ok := tru.mutation.RequiredCountCreateTime(); ok {
		_spec.SetField(tuberequirement.FieldRequiredCountCreateTime, field.TypeTime, value)
	}
	if value, ok := tru.mutation.RequiredBy(); ok {
		_spec.SetField(tuberequirement.FieldRequiredBy, field.TypeString, value)
	}
	if value, ok := tru.mutation.ModifiedBy(); ok {
		_spec.SetField(tuberequirement.FieldModifiedBy, field.TypeString, value)
	}
	if tru.mutation.ModifiedByCleared() {
		_spec.ClearField(tuberequirement.FieldModifiedBy, field.TypeString)
	}
	if value, ok := tru.mutation.ModifiedTime(); ok {
		_spec.SetField(tuberequirement.FieldModifiedTime, field.TypeTime, value)
	}
	if tru.mutation.SampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tuberequirement.SampleTable,
			Columns: []string{tuberequirement.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tuberequirement.SampleTable,
			Columns: []string{tuberequirement.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tuberequirement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tru.mutation.done = true
	return n, nil
}

// TubeRequirementUpdateOne is the builder for updating a single TubeRequirement entity.
type TubeRequirementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TubeRequirementMutation
}

// SetSampleID sets the "sample_id" field.
func (truo *TubeRequirementUpdateOne) SetSampleID(i int) *TubeRequirementUpdateOne {
	truo.mutation.SetSampleID(i)
	return truo
}

// SetNillableSampleID sets the "sample_id" field if the given value is not nil.
func (truo *TubeRequirementUpdateOne) SetNillableSampleID(i *int) *TubeRequirementUpdateOne {
	if i != nil {
		truo.SetSampleID(*i)
	}
	return truo
}

// ClearSampleID clears the value of the "sample_id" field.
func (truo *TubeRequirementUpdateOne) ClearSampleID() *TubeRequirementUpdateOne {
	truo.mutation.ClearSampleID()
	return truo
}

// SetTubeType sets the "tube_type" field.
func (truo *TubeRequirementUpdateOne) SetTubeType(s string) *TubeRequirementUpdateOne {
	truo.mutation.SetTubeType(s)
	return truo
}

// SetNillableTubeType sets the "tube_type" field if the given value is not nil.
func (truo *TubeRequirementUpdateOne) SetNillableTubeType(s *string) *TubeRequirementUpdateOne {
	if s != nil {
		truo.SetTubeType(*s)
	}
	return truo
}

// SetRequiredCount sets the "required_count" field.
func (truo *TubeRequirementUpdateOne) SetRequiredCount(i int) *TubeRequirementUpdateOne {
	truo.mutation.ResetRequiredCount()
	truo.mutation.SetRequiredCount(i)
	return truo
}

// SetNillableRequiredCount sets the "required_count" field if the given value is not nil.
func (truo *TubeRequirementUpdateOne) SetNillableRequiredCount(i *int) *TubeRequirementUpdateOne {
	if i != nil {
		truo.SetRequiredCount(*i)
	}
	return truo
}

// AddRequiredCount adds i to the "required_count" field.
func (truo *TubeRequirementUpdateOne) AddRequiredCount(i int) *TubeRequirementUpdateOne {
	truo.mutation.AddRequiredCount(i)
	return truo
}

// SetRequiredCountCreateTime sets the "required_count_create_time" field.
func (truo *TubeRequirementUpdateOne) SetRequiredCountCreateTime(t time.Time) *TubeRequirementUpdateOne {
	truo.mutation.SetRequiredCountCreateTime(t)
	return truo
}

// SetNillableRequiredCountCreateTime sets the "required_count_create_time" field if the given value is not nil.
func (truo *TubeRequirementUpdateOne) SetNillableRequiredCountCreateTime(t *time.Time) *TubeRequirementUpdateOne {
	if t != nil {
		truo.SetRequiredCountCreateTime(*t)
	}
	return truo
}

// SetRequiredBy sets the "required_by" field.
func (truo *TubeRequirementUpdateOne) SetRequiredBy(s string) *TubeRequirementUpdateOne {
	truo.mutation.SetRequiredBy(s)
	return truo
}

// SetNillableRequiredBy sets the "required_by" field if the given value is not nil.
func (truo *TubeRequirementUpdateOne) SetNillableRequiredBy(s *string) *TubeRequirementUpdateOne {
	if s != nil {
		truo.SetRequiredBy(*s)
	}
	return truo
}

// SetModifiedBy sets the "modified_by" field.
func (truo *TubeRequirementUpdateOne) SetModifiedBy(s string) *TubeRequirementUpdateOne {
	truo.mutation.SetModifiedBy(s)
	return truo
}

// SetNillableModifiedBy sets the "modified_by" field if the given value is not nil.
func (truo *TubeRequirementUpdateOne) SetNillableModifiedBy(s *string) *TubeRequirementUpdateOne {
	if s != nil {
		truo.SetModifiedBy(*s)
	}
	return truo
}

// ClearModifiedBy clears the value of the "modified_by" field.
func (truo *TubeRequirementUpdateOne) ClearModifiedBy() *TubeRequirementUpdateOne {
	truo.mutation.ClearModifiedBy()
	return truo
}

// SetModifiedTime sets the "modified_time" field.
func (truo *TubeRequirementUpdateOne) SetModifiedTime(t time.Time) *TubeRequirementUpdateOne {
	truo.mutation.SetModifiedTime(t)
	return truo
}

// SetSample sets the "sample" edge to the Sample entity.
func (truo *TubeRequirementUpdateOne) SetSample(s *Sample) *TubeRequirementUpdateOne {
	return truo.SetSampleID(s.ID)
}

// Mutation returns the TubeRequirementMutation object of the builder.
func (truo *TubeRequirementUpdateOne) Mutation() *TubeRequirementMutation {
	return truo.mutation
}

// ClearSample clears the "sample" edge to the Sample entity.
func (truo *TubeRequirementUpdateOne) ClearSample() *TubeRequirementUpdateOne {
	truo.mutation.ClearSample()
	return truo
}

// Where appends a list predicates to the TubeRequirementUpdate builder.
func (truo *TubeRequirementUpdateOne) Where(ps ...predicate.TubeRequirement) *TubeRequirementUpdateOne {
	truo.mutation.Where(ps...)
	return truo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TubeRequirementUpdateOne) Select(field string, fields ...string) *TubeRequirementUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TubeRequirement entity.
func (truo *TubeRequirementUpdateOne) Save(ctx context.Context) (*TubeRequirement, error) {
	truo.defaults()
	return withHooks(ctx, truo.sqlSave, truo.mutation, truo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TubeRequirementUpdateOne) SaveX(ctx context.Context) *TubeRequirement {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TubeRequirementUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TubeRequirementUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (truo *TubeRequirementUpdateOne) defaults() {
	if _, ok := truo.mutation.ModifiedTime(); !ok {
		v := tuberequirement.UpdateDefaultModifiedTime()
		truo.mutation.SetModifiedTime(v)
	}
}

func (truo *TubeRequirementUpdateOne) sqlSave(ctx context.Context) (_node *TubeRequirement, err error) {
	_spec := sqlgraph.NewUpdateSpec(tuberequirement.Table, tuberequirement.Columns, sqlgraph.NewFieldSpec(tuberequirement.FieldID, field.TypeInt))
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TubeRequirement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tuberequirement.FieldID)
		for _, f := range fields {
			if !tuberequirement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tuberequirement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := truo.mutation.TubeType(); ok {
		_spec.SetField(tuberequirement.FieldTubeType, field.TypeString, value)
	}
	if value, ok := truo.mutation.RequiredCount(); ok {
		_spec.SetField(tuberequirement.FieldRequiredCount, field.TypeInt, value)
	}
	if value, ok := truo.mutation.AddedRequiredCount(); ok {
		_spec.AddField(tuberequirement.FieldRequiredCount, field.TypeInt, value)
	}
	if value, ok := truo.mutation.RequiredCountCreateTime(); ok {
		_spec.SetField(tuberequirement.FieldRequiredCountCreateTime, field.TypeTime, value)
	}
	if value, ok := truo.mutation.RequiredBy(); ok {
		_spec.SetField(tuberequirement.FieldRequiredBy, field.TypeString, value)
	}
	if value, ok := truo.mutation.ModifiedBy(); ok {
		_spec.SetField(tuberequirement.FieldModifiedBy, field.TypeString, value)
	}
	if truo.mutation.ModifiedByCleared() {
		_spec.ClearField(tuberequirement.FieldModifiedBy, field.TypeString)
	}
	if value, ok := truo.mutation.ModifiedTime(); ok {
		_spec.SetField(tuberequirement.FieldModifiedTime, field.TypeTime, value)
	}
	if truo.mutation.SampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tuberequirement.SampleTable,
			Columns: []string{tuberequirement.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tuberequirement.SampleTable,
			Columns: []string{tuberequirement.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TubeRequirement{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tuberequirement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	truo.mutation.done = true
	return _node, nil
}
