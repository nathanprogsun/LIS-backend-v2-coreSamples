// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/accountsubscription"
	"coresamples/ent/predicate"
	"coresamples/ent/serviceship"
	"coresamples/ent/serviceshipbillingplan"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceshipBillingPlanUpdate is the builder for updating ServiceshipBillingPlan entities.
type ServiceshipBillingPlanUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceshipBillingPlanMutation
}

// Where appends a list predicates to the ServiceshipBillingPlanUpdate builder.
func (sbpu *ServiceshipBillingPlanUpdate) Where(ps ...predicate.ServiceshipBillingPlan) *ServiceshipBillingPlanUpdate {
	sbpu.mutation.Where(ps...)
	return sbpu
}

// SetFee sets the "fee" field.
func (sbpu *ServiceshipBillingPlanUpdate) SetFee(f float32) *ServiceshipBillingPlanUpdate {
	sbpu.mutation.ResetFee()
	sbpu.mutation.SetFee(f)
	return sbpu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (sbpu *ServiceshipBillingPlanUpdate) SetNillableFee(f *float32) *ServiceshipBillingPlanUpdate {
	if f != nil {
		sbpu.SetFee(*f)
	}
	return sbpu
}

// AddFee adds f to the "fee" field.
func (sbpu *ServiceshipBillingPlanUpdate) AddFee(f float32) *ServiceshipBillingPlanUpdate {
	sbpu.mutation.AddFee(f)
	return sbpu
}

// SetBillingCycle sets the "billing_cycle" field.
func (sbpu *ServiceshipBillingPlanUpdate) SetBillingCycle(i int32) *ServiceshipBillingPlanUpdate {
	sbpu.mutation.ResetBillingCycle()
	sbpu.mutation.SetBillingCycle(i)
	return sbpu
}

// SetNillableBillingCycle sets the "billing_cycle" field if the given value is not nil.
func (sbpu *ServiceshipBillingPlanUpdate) SetNillableBillingCycle(i *int32) *ServiceshipBillingPlanUpdate {
	if i != nil {
		sbpu.SetBillingCycle(*i)
	}
	return sbpu
}

// AddBillingCycle adds i to the "billing_cycle" field.
func (sbpu *ServiceshipBillingPlanUpdate) AddBillingCycle(i int32) *ServiceshipBillingPlanUpdate {
	sbpu.mutation.AddBillingCycle(i)
	return sbpu
}

// SetInterval sets the "interval" field.
func (sbpu *ServiceshipBillingPlanUpdate) SetInterval(s serviceshipbillingplan.Interval) *ServiceshipBillingPlanUpdate {
	sbpu.mutation.SetInterval(s)
	return sbpu
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (sbpu *ServiceshipBillingPlanUpdate) SetNillableInterval(s *serviceshipbillingplan.Interval) *ServiceshipBillingPlanUpdate {
	if s != nil {
		sbpu.SetInterval(*s)
	}
	return sbpu
}

// SetEffectiveTime sets the "effective_time" field.
func (sbpu *ServiceshipBillingPlanUpdate) SetEffectiveTime(t time.Time) *ServiceshipBillingPlanUpdate {
	sbpu.mutation.SetEffectiveTime(t)
	return sbpu
}

// SetNillableEffectiveTime sets the "effective_time" field if the given value is not nil.
func (sbpu *ServiceshipBillingPlanUpdate) SetNillableEffectiveTime(t *time.Time) *ServiceshipBillingPlanUpdate {
	if t != nil {
		sbpu.SetEffectiveTime(*t)
	}
	return sbpu
}

// AddAccountSubscriptionIDs adds the "account_subscription" edge to the AccountSubscription entity by IDs.
func (sbpu *ServiceshipBillingPlanUpdate) AddAccountSubscriptionIDs(ids ...int) *ServiceshipBillingPlanUpdate {
	sbpu.mutation.AddAccountSubscriptionIDs(ids...)
	return sbpu
}

// AddAccountSubscription adds the "account_subscription" edges to the AccountSubscription entity.
func (sbpu *ServiceshipBillingPlanUpdate) AddAccountSubscription(a ...*AccountSubscription) *ServiceshipBillingPlanUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sbpu.AddAccountSubscriptionIDs(ids...)
}

// SetServiceshipID sets the "serviceship" edge to the Serviceship entity by ID.
func (sbpu *ServiceshipBillingPlanUpdate) SetServiceshipID(id int) *ServiceshipBillingPlanUpdate {
	sbpu.mutation.SetServiceshipID(id)
	return sbpu
}

// SetServiceship sets the "serviceship" edge to the Serviceship entity.
func (sbpu *ServiceshipBillingPlanUpdate) SetServiceship(s *Serviceship) *ServiceshipBillingPlanUpdate {
	return sbpu.SetServiceshipID(s.ID)
}

// Mutation returns the ServiceshipBillingPlanMutation object of the builder.
func (sbpu *ServiceshipBillingPlanUpdate) Mutation() *ServiceshipBillingPlanMutation {
	return sbpu.mutation
}

// ClearAccountSubscription clears all "account_subscription" edges to the AccountSubscription entity.
func (sbpu *ServiceshipBillingPlanUpdate) ClearAccountSubscription() *ServiceshipBillingPlanUpdate {
	sbpu.mutation.ClearAccountSubscription()
	return sbpu
}

// RemoveAccountSubscriptionIDs removes the "account_subscription" edge to AccountSubscription entities by IDs.
func (sbpu *ServiceshipBillingPlanUpdate) RemoveAccountSubscriptionIDs(ids ...int) *ServiceshipBillingPlanUpdate {
	sbpu.mutation.RemoveAccountSubscriptionIDs(ids...)
	return sbpu
}

// RemoveAccountSubscription removes "account_subscription" edges to AccountSubscription entities.
func (sbpu *ServiceshipBillingPlanUpdate) RemoveAccountSubscription(a ...*AccountSubscription) *ServiceshipBillingPlanUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sbpu.RemoveAccountSubscriptionIDs(ids...)
}

// ClearServiceship clears the "serviceship" edge to the Serviceship entity.
func (sbpu *ServiceshipBillingPlanUpdate) ClearServiceship() *ServiceshipBillingPlanUpdate {
	sbpu.mutation.ClearServiceship()
	return sbpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sbpu *ServiceshipBillingPlanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sbpu.sqlSave, sbpu.mutation, sbpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sbpu *ServiceshipBillingPlanUpdate) SaveX(ctx context.Context) int {
	affected, err := sbpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sbpu *ServiceshipBillingPlanUpdate) Exec(ctx context.Context) error {
	_, err := sbpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbpu *ServiceshipBillingPlanUpdate) ExecX(ctx context.Context) {
	if err := sbpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbpu *ServiceshipBillingPlanUpdate) check() error {
	if v, ok := sbpu.mutation.BillingCycle(); ok {
		if err := serviceshipbillingplan.BillingCycleValidator(v); err != nil {
			return &ValidationError{Name: "billing_cycle", err: fmt.Errorf(`ent: validator failed for field "ServiceshipBillingPlan.billing_cycle": %w`, err)}
		}
	}
	if v, ok := sbpu.mutation.Interval(); ok {
		if err := serviceshipbillingplan.IntervalValidator(v); err != nil {
			return &ValidationError{Name: "interval", err: fmt.Errorf(`ent: validator failed for field "ServiceshipBillingPlan.interval": %w`, err)}
		}
	}
	if _, ok := sbpu.mutation.ServiceshipID(); sbpu.mutation.ServiceshipCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServiceshipBillingPlan.serviceship"`)
	}
	return nil
}

func (sbpu *ServiceshipBillingPlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sbpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceshipbillingplan.Table, serviceshipbillingplan.Columns, sqlgraph.NewFieldSpec(serviceshipbillingplan.FieldID, field.TypeInt))
	if ps := sbpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sbpu.mutation.Fee(); ok {
		_spec.SetField(serviceshipbillingplan.FieldFee, field.TypeFloat32, value)
	}
	if value, ok := sbpu.mutation.AddedFee(); ok {
		_spec.AddField(serviceshipbillingplan.FieldFee, field.TypeFloat32, value)
	}
	if value, ok := sbpu.mutation.BillingCycle(); ok {
		_spec.SetField(serviceshipbillingplan.FieldBillingCycle, field.TypeInt32, value)
	}
	if value, ok := sbpu.mutation.AddedBillingCycle(); ok {
		_spec.AddField(serviceshipbillingplan.FieldBillingCycle, field.TypeInt32, value)
	}
	if value, ok := sbpu.mutation.Interval(); ok {
		_spec.SetField(serviceshipbillingplan.FieldInterval, field.TypeEnum, value)
	}
	if value, ok := sbpu.mutation.EffectiveTime(); ok {
		_spec.SetField(serviceshipbillingplan.FieldEffectiveTime, field.TypeTime, value)
	}
	if sbpu.mutation.AccountSubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceshipbillingplan.AccountSubscriptionTable,
			Columns: []string{serviceshipbillingplan.AccountSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsubscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sbpu.mutation.RemovedAccountSubscriptionIDs(); len(nodes) > 0 && !sbpu.mutation.AccountSubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceshipbillingplan.AccountSubscriptionTable,
			Columns: []string{serviceshipbillingplan.AccountSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sbpu.mutation.AccountSubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceshipbillingplan.AccountSubscriptionTable,
			Columns: []string{serviceshipbillingplan.AccountSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sbpu.mutation.ServiceshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceshipbillingplan.ServiceshipTable,
			Columns: []string{serviceshipbillingplan.ServiceshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sbpu.mutation.ServiceshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceshipbillingplan.ServiceshipTable,
			Columns: []string{serviceshipbillingplan.ServiceshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sbpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceshipbillingplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sbpu.mutation.done = true
	return n, nil
}

// ServiceshipBillingPlanUpdateOne is the builder for updating a single ServiceshipBillingPlan entity.
type ServiceshipBillingPlanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceshipBillingPlanMutation
}

// SetFee sets the "fee" field.
func (sbpuo *ServiceshipBillingPlanUpdateOne) SetFee(f float32) *ServiceshipBillingPlanUpdateOne {
	sbpuo.mutation.ResetFee()
	sbpuo.mutation.SetFee(f)
	return sbpuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (sbpuo *ServiceshipBillingPlanUpdateOne) SetNillableFee(f *float32) *ServiceshipBillingPlanUpdateOne {
	if f != nil {
		sbpuo.SetFee(*f)
	}
	return sbpuo
}

// AddFee adds f to the "fee" field.
func (sbpuo *ServiceshipBillingPlanUpdateOne) AddFee(f float32) *ServiceshipBillingPlanUpdateOne {
	sbpuo.mutation.AddFee(f)
	return sbpuo
}

// SetBillingCycle sets the "billing_cycle" field.
func (sbpuo *ServiceshipBillingPlanUpdateOne) SetBillingCycle(i int32) *ServiceshipBillingPlanUpdateOne {
	sbpuo.mutation.ResetBillingCycle()
	sbpuo.mutation.SetBillingCycle(i)
	return sbpuo
}

// SetNillableBillingCycle sets the "billing_cycle" field if the given value is not nil.
func (sbpuo *ServiceshipBillingPlanUpdateOne) SetNillableBillingCycle(i *int32) *ServiceshipBillingPlanUpdateOne {
	if i != nil {
		sbpuo.SetBillingCycle(*i)
	}
	return sbpuo
}

// AddBillingCycle adds i to the "billing_cycle" field.
func (sbpuo *ServiceshipBillingPlanUpdateOne) AddBillingCycle(i int32) *ServiceshipBillingPlanUpdateOne {
	sbpuo.mutation.AddBillingCycle(i)
	return sbpuo
}

// SetInterval sets the "interval" field.
func (sbpuo *ServiceshipBillingPlanUpdateOne) SetInterval(s serviceshipbillingplan.Interval) *ServiceshipBillingPlanUpdateOne {
	sbpuo.mutation.SetInterval(s)
	return sbpuo
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (sbpuo *ServiceshipBillingPlanUpdateOne) SetNillableInterval(s *serviceshipbillingplan.Interval) *ServiceshipBillingPlanUpdateOne {
	if s != nil {
		sbpuo.SetInterval(*s)
	}
	return sbpuo
}

// SetEffectiveTime sets the "effective_time" field.
func (sbpuo *ServiceshipBillingPlanUpdateOne) SetEffectiveTime(t time.Time) *ServiceshipBillingPlanUpdateOne {
	sbpuo.mutation.SetEffectiveTime(t)
	return sbpuo
}

// SetNillableEffectiveTime sets the "effective_time" field if the given value is not nil.
func (sbpuo *ServiceshipBillingPlanUpdateOne) SetNillableEffectiveTime(t *time.Time) *ServiceshipBillingPlanUpdateOne {
	if t != nil {
		sbpuo.SetEffectiveTime(*t)
	}
	return sbpuo
}

// AddAccountSubscriptionIDs adds the "account_subscription" edge to the AccountSubscription entity by IDs.
func (sbpuo *ServiceshipBillingPlanUpdateOne) AddAccountSubscriptionIDs(ids ...int) *ServiceshipBillingPlanUpdateOne {
	sbpuo.mutation.AddAccountSubscriptionIDs(ids...)
	return sbpuo
}

// AddAccountSubscription adds the "account_subscription" edges to the AccountSubscription entity.
func (sbpuo *ServiceshipBillingPlanUpdateOne) AddAccountSubscription(a ...*AccountSubscription) *ServiceshipBillingPlanUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sbpuo.AddAccountSubscriptionIDs(ids...)
}

// SetServiceshipID sets the "serviceship" edge to the Serviceship entity by ID.
func (sbpuo *ServiceshipBillingPlanUpdateOne) SetServiceshipID(id int) *ServiceshipBillingPlanUpdateOne {
	sbpuo.mutation.SetServiceshipID(id)
	return sbpuo
}

// SetServiceship sets the "serviceship" edge to the Serviceship entity.
func (sbpuo *ServiceshipBillingPlanUpdateOne) SetServiceship(s *Serviceship) *ServiceshipBillingPlanUpdateOne {
	return sbpuo.SetServiceshipID(s.ID)
}

// Mutation returns the ServiceshipBillingPlanMutation object of the builder.
func (sbpuo *ServiceshipBillingPlanUpdateOne) Mutation() *ServiceshipBillingPlanMutation {
	return sbpuo.mutation
}

// ClearAccountSubscription clears all "account_subscription" edges to the AccountSubscription entity.
func (sbpuo *ServiceshipBillingPlanUpdateOne) ClearAccountSubscription() *ServiceshipBillingPlanUpdateOne {
	sbpuo.mutation.ClearAccountSubscription()
	return sbpuo
}

// RemoveAccountSubscriptionIDs removes the "account_subscription" edge to AccountSubscription entities by IDs.
func (sbpuo *ServiceshipBillingPlanUpdateOne) RemoveAccountSubscriptionIDs(ids ...int) *ServiceshipBillingPlanUpdateOne {
	sbpuo.mutation.RemoveAccountSubscriptionIDs(ids...)
	return sbpuo
}

// RemoveAccountSubscription removes "account_subscription" edges to AccountSubscription entities.
func (sbpuo *ServiceshipBillingPlanUpdateOne) RemoveAccountSubscription(a ...*AccountSubscription) *ServiceshipBillingPlanUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sbpuo.RemoveAccountSubscriptionIDs(ids...)
}

// ClearServiceship clears the "serviceship" edge to the Serviceship entity.
func (sbpuo *ServiceshipBillingPlanUpdateOne) ClearServiceship() *ServiceshipBillingPlanUpdateOne {
	sbpuo.mutation.ClearServiceship()
	return sbpuo
}

// Where appends a list predicates to the ServiceshipBillingPlanUpdate builder.
func (sbpuo *ServiceshipBillingPlanUpdateOne) Where(ps ...predicate.ServiceshipBillingPlan) *ServiceshipBillingPlanUpdateOne {
	sbpuo.mutation.Where(ps...)
	return sbpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sbpuo *ServiceshipBillingPlanUpdateOne) Select(field string, fields ...string) *ServiceshipBillingPlanUpdateOne {
	sbpuo.fields = append([]string{field}, fields...)
	return sbpuo
}

// Save executes the query and returns the updated ServiceshipBillingPlan entity.
func (sbpuo *ServiceshipBillingPlanUpdateOne) Save(ctx context.Context) (*ServiceshipBillingPlan, error) {
	return withHooks(ctx, sbpuo.sqlSave, sbpuo.mutation, sbpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sbpuo *ServiceshipBillingPlanUpdateOne) SaveX(ctx context.Context) *ServiceshipBillingPlan {
	node, err := sbpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sbpuo *ServiceshipBillingPlanUpdateOne) Exec(ctx context.Context) error {
	_, err := sbpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbpuo *ServiceshipBillingPlanUpdateOne) ExecX(ctx context.Context) {
	if err := sbpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbpuo *ServiceshipBillingPlanUpdateOne) check() error {
	if v, ok := sbpuo.mutation.BillingCycle(); ok {
		if err := serviceshipbillingplan.BillingCycleValidator(v); err != nil {
			return &ValidationError{Name: "billing_cycle", err: fmt.Errorf(`ent: validator failed for field "ServiceshipBillingPlan.billing_cycle": %w`, err)}
		}
	}
	if v, ok := sbpuo.mutation.Interval(); ok {
		if err := serviceshipbillingplan.IntervalValidator(v); err != nil {
			return &ValidationError{Name: "interval", err: fmt.Errorf(`ent: validator failed for field "ServiceshipBillingPlan.interval": %w`, err)}
		}
	}
	if _, ok := sbpuo.mutation.ServiceshipID(); sbpuo.mutation.ServiceshipCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServiceshipBillingPlan.serviceship"`)
	}
	return nil
}

func (sbpuo *ServiceshipBillingPlanUpdateOne) sqlSave(ctx context.Context) (_node *ServiceshipBillingPlan, err error) {
	if err := sbpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceshipbillingplan.Table, serviceshipbillingplan.Columns, sqlgraph.NewFieldSpec(serviceshipbillingplan.FieldID, field.TypeInt))
	id, ok := sbpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceshipBillingPlan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sbpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serviceshipbillingplan.FieldID)
		for _, f := range fields {
			if !serviceshipbillingplan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != serviceshipbillingplan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sbpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sbpuo.mutation.Fee(); ok {
		_spec.SetField(serviceshipbillingplan.FieldFee, field.TypeFloat32, value)
	}
	if value, ok := sbpuo.mutation.AddedFee(); ok {
		_spec.AddField(serviceshipbillingplan.FieldFee, field.TypeFloat32, value)
	}
	if value, ok := sbpuo.mutation.BillingCycle(); ok {
		_spec.SetField(serviceshipbillingplan.FieldBillingCycle, field.TypeInt32, value)
	}
	if value, ok := sbpuo.mutation.AddedBillingCycle(); ok {
		_spec.AddField(serviceshipbillingplan.FieldBillingCycle, field.TypeInt32, value)
	}
	if value, ok := sbpuo.mutation.Interval(); ok {
		_spec.SetField(serviceshipbillingplan.FieldInterval, field.TypeEnum, value)
	}
	if value, ok := sbpuo.mutation.EffectiveTime(); ok {
		_spec.SetField(serviceshipbillingplan.FieldEffectiveTime, field.TypeTime, value)
	}
	if sbpuo.mutation.AccountSubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceshipbillingplan.AccountSubscriptionTable,
			Columns: []string{serviceshipbillingplan.AccountSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsubscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sbpuo.mutation.RemovedAccountSubscriptionIDs(); len(nodes) > 0 && !sbpuo.mutation.AccountSubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceshipbillingplan.AccountSubscriptionTable,
			Columns: []string{serviceshipbillingplan.AccountSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sbpuo.mutation.AccountSubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceshipbillingplan.AccountSubscriptionTable,
			Columns: []string{serviceshipbillingplan.AccountSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sbpuo.mutation.ServiceshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceshipbillingplan.ServiceshipTable,
			Columns: []string{serviceshipbillingplan.ServiceshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sbpuo.mutation.ServiceshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceshipbillingplan.ServiceshipTable,
			Columns: []string{serviceshipbillingplan.ServiceshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServiceshipBillingPlan{config: sbpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sbpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceshipbillingplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sbpuo.mutation.done = true
	return _node, nil
}
