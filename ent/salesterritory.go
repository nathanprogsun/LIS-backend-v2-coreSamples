// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/salesterritory"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SalesTerritory is the model entity for the SalesTerritory schema.
type SalesTerritory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Sales holds the value of the "sales" field.
	Sales string `json:"sales,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Zipcode holds the value of the "zipcode" field.
	Zipcode int `json:"zipcode,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt    time.Time `json:"updated_at"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SalesTerritory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case salesterritory.FieldID, salesterritory.FieldZipcode:
			values[i] = new(sql.NullInt64)
		case salesterritory.FieldSales, salesterritory.FieldState, salesterritory.FieldCountry:
			values[i] = new(sql.NullString)
		case salesterritory.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SalesTerritory fields.
func (st *SalesTerritory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case salesterritory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case salesterritory.FieldSales:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sales", values[i])
			} else if value.Valid {
				st.Sales = value.String
			}
		case salesterritory.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				st.State = value.String
			}
		case salesterritory.FieldZipcode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field zipcode", values[i])
			} else if value.Valid {
				st.Zipcode = int(value.Int64)
			}
		case salesterritory.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				st.Country = value.String
			}
		case salesterritory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				st.UpdatedAt = value.Time
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SalesTerritory.
// This includes values selected through modifiers, order, etc.
func (st *SalesTerritory) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// Update returns a builder for updating this SalesTerritory.
// Note that you need to call SalesTerritory.Unwrap() before calling this method if this SalesTerritory
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SalesTerritory) Update() *SalesTerritoryUpdateOne {
	return NewSalesTerritoryClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the SalesTerritory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SalesTerritory) Unwrap() *SalesTerritory {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SalesTerritory is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SalesTerritory) String() string {
	var builder strings.Builder
	builder.WriteString("SalesTerritory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("sales=")
	builder.WriteString(st.Sales)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(st.State)
	builder.WriteString(", ")
	builder.WriteString("zipcode=")
	builder.WriteString(fmt.Sprintf("%v", st.Zipcode))
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(st.Country)
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(st.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SalesTerritories is a parsable slice of SalesTerritory.
type SalesTerritories []*SalesTerritory
