// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/loginhistory"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LoginHistory is the model entity for the LoginHistory schema.
type LoginHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// LoginTime holds the value of the "login_time" field.
	LoginTime time.Time `json:"login_time,omitempty"`
	// LoginIP holds the value of the "login_ip" field.
	LoginIP string `json:"login_ip,omitempty"`
	// LoginSuccessfully holds the value of the "login_successfully" field.
	LoginSuccessfully bool `json:"login_successfully,omitempty"`
	// FailureReason holds the value of the "failure_reason" field.
	FailureReason string `json:"failure_reason,omitempty"`
	// LoginPortal holds the value of the "login_portal" field.
	LoginPortal string `json:"login_portal,omitempty"`
	// Token holds the value of the "token" field.
	Token        string `json:"token,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LoginHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case loginhistory.FieldLoginSuccessfully:
			values[i] = new(sql.NullBool)
		case loginhistory.FieldID:
			values[i] = new(sql.NullInt64)
		case loginhistory.FieldUsername, loginhistory.FieldLoginIP, loginhistory.FieldFailureReason, loginhistory.FieldLoginPortal, loginhistory.FieldToken:
			values[i] = new(sql.NullString)
		case loginhistory.FieldLoginTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LoginHistory fields.
func (lh *LoginHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case loginhistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lh.ID = int(value.Int64)
		case loginhistory.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				lh.Username = value.String
			}
		case loginhistory.FieldLoginTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field login_time", values[i])
			} else if value.Valid {
				lh.LoginTime = value.Time
			}
		case loginhistory.FieldLoginIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field login_ip", values[i])
			} else if value.Valid {
				lh.LoginIP = value.String
			}
		case loginhistory.FieldLoginSuccessfully:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field login_successfully", values[i])
			} else if value.Valid {
				lh.LoginSuccessfully = value.Bool
			}
		case loginhistory.FieldFailureReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field failure_reason", values[i])
			} else if value.Valid {
				lh.FailureReason = value.String
			}
		case loginhistory.FieldLoginPortal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field login_portal", values[i])
			} else if value.Valid {
				lh.LoginPortal = value.String
			}
		case loginhistory.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				lh.Token = value.String
			}
		default:
			lh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LoginHistory.
// This includes values selected through modifiers, order, etc.
func (lh *LoginHistory) Value(name string) (ent.Value, error) {
	return lh.selectValues.Get(name)
}

// Update returns a builder for updating this LoginHistory.
// Note that you need to call LoginHistory.Unwrap() before calling this method if this LoginHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (lh *LoginHistory) Update() *LoginHistoryUpdateOne {
	return NewLoginHistoryClient(lh.config).UpdateOne(lh)
}

// Unwrap unwraps the LoginHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lh *LoginHistory) Unwrap() *LoginHistory {
	_tx, ok := lh.config.driver.(*txDriver)
	if !ok {
		panic("ent: LoginHistory is not a transactional entity")
	}
	lh.config.driver = _tx.drv
	return lh
}

// String implements the fmt.Stringer.
func (lh *LoginHistory) String() string {
	var builder strings.Builder
	builder.WriteString("LoginHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lh.ID))
	builder.WriteString("username=")
	builder.WriteString(lh.Username)
	builder.WriteString(", ")
	builder.WriteString("login_time=")
	builder.WriteString(lh.LoginTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("login_ip=")
	builder.WriteString(lh.LoginIP)
	builder.WriteString(", ")
	builder.WriteString("login_successfully=")
	builder.WriteString(fmt.Sprintf("%v", lh.LoginSuccessfully))
	builder.WriteString(", ")
	builder.WriteString("failure_reason=")
	builder.WriteString(lh.FailureReason)
	builder.WriteString(", ")
	builder.WriteString("login_portal=")
	builder.WriteString(lh.LoginPortal)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(lh.Token)
	builder.WriteByte(')')
	return builder.String()
}

// LoginHistories is a parsable slice of LoginHistory.
type LoginHistories []*LoginHistory
