// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/sampletype"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SampleType is the model entity for the SampleType schema.
type SampleType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"sample_type_id"`
	// SampleTypeName holds the value of the "sample_type_name" field.
	SampleTypeName string `json:"sample_type_name,omitempty"`
	// SampleTypeCode holds the value of the "sample_type_code" field.
	SampleTypeCode string `json:"sample_type_code,omitempty"`
	// SampleTypeEnum holds the value of the "sample_type_enum" field.
	SampleTypeEnum string `json:"sample_type_enum,omitempty"`
	// SampleTypeEnumOldLisRequest holds the value of the "sample_type_enum_old_lis_request" field.
	SampleTypeEnumOldLisRequest string `json:"sample_type_enum_old_lis_request,omitempty"`
	// SampleTypeDescription holds the value of the "sample_type_description" field.
	SampleTypeDescription string `json:"sample_type_description,omitempty"`
	// PrimarySampleTypeGroup holds the value of the "primary_sample_type_group" field.
	PrimarySampleTypeGroup string `json:"primary_sample_type_group,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime time.Time `json:"created_time,omitempty"`
	// UpdatedTime holds the value of the "updated_time" field.
	UpdatedTime time.Time `json:"updated_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SampleTypeQuery when eager-loading is set.
	Edges        SampleTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SampleTypeEdges holds the relations/edges for other nodes in the graph.
type SampleTypeEdges struct {
	// TubeTypes holds the value of the tube_types edge.
	TubeTypes []*TubeType `json:"tube_types,omitempty"`
	// Tests holds the value of the tests edge.
	Tests []*Test `json:"tests,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TubeTypesOrErr returns the TubeTypes value or an error if the edge
// was not loaded in eager-loading.
func (e SampleTypeEdges) TubeTypesOrErr() ([]*TubeType, error) {
	if e.loadedTypes[0] {
		return e.TubeTypes, nil
	}
	return nil, &NotLoadedError{edge: "tube_types"}
}

// TestsOrErr returns the Tests value or an error if the edge
// was not loaded in eager-loading.
func (e SampleTypeEdges) TestsOrErr() ([]*Test, error) {
	if e.loadedTypes[1] {
		return e.Tests, nil
	}
	return nil, &NotLoadedError{edge: "tests"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SampleType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sampletype.FieldIsActive:
			values[i] = new(sql.NullBool)
		case sampletype.FieldID:
			values[i] = new(sql.NullInt64)
		case sampletype.FieldSampleTypeName, sampletype.FieldSampleTypeCode, sampletype.FieldSampleTypeEnum, sampletype.FieldSampleTypeEnumOldLisRequest, sampletype.FieldSampleTypeDescription, sampletype.FieldPrimarySampleTypeGroup:
			values[i] = new(sql.NullString)
		case sampletype.FieldCreatedTime, sampletype.FieldUpdatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SampleType fields.
func (st *SampleType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sampletype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case sampletype.FieldSampleTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sample_type_name", values[i])
			} else if value.Valid {
				st.SampleTypeName = value.String
			}
		case sampletype.FieldSampleTypeCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sample_type_code", values[i])
			} else if value.Valid {
				st.SampleTypeCode = value.String
			}
		case sampletype.FieldSampleTypeEnum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sample_type_enum", values[i])
			} else if value.Valid {
				st.SampleTypeEnum = value.String
			}
		case sampletype.FieldSampleTypeEnumOldLisRequest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sample_type_enum_old_lis_request", values[i])
			} else if value.Valid {
				st.SampleTypeEnumOldLisRequest = value.String
			}
		case sampletype.FieldSampleTypeDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sample_type_description", values[i])
			} else if value.Valid {
				st.SampleTypeDescription = value.String
			}
		case sampletype.FieldPrimarySampleTypeGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primary_sample_type_group", values[i])
			} else if value.Valid {
				st.PrimarySampleTypeGroup = value.String
			}
		case sampletype.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				st.IsActive = value.Bool
			}
		case sampletype.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				st.CreatedTime = value.Time
			}
		case sampletype.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				st.UpdatedTime = value.Time
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SampleType.
// This includes values selected through modifiers, order, etc.
func (st *SampleType) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// QueryTubeTypes queries the "tube_types" edge of the SampleType entity.
func (st *SampleType) QueryTubeTypes() *TubeTypeQuery {
	return NewSampleTypeClient(st.config).QueryTubeTypes(st)
}

// QueryTests queries the "tests" edge of the SampleType entity.
func (st *SampleType) QueryTests() *TestQuery {
	return NewSampleTypeClient(st.config).QueryTests(st)
}

// Update returns a builder for updating this SampleType.
// Note that you need to call SampleType.Unwrap() before calling this method if this SampleType
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SampleType) Update() *SampleTypeUpdateOne {
	return NewSampleTypeClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the SampleType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SampleType) Unwrap() *SampleType {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SampleType is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SampleType) String() string {
	var builder strings.Builder
	builder.WriteString("SampleType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("sample_type_name=")
	builder.WriteString(st.SampleTypeName)
	builder.WriteString(", ")
	builder.WriteString("sample_type_code=")
	builder.WriteString(st.SampleTypeCode)
	builder.WriteString(", ")
	builder.WriteString("sample_type_enum=")
	builder.WriteString(st.SampleTypeEnum)
	builder.WriteString(", ")
	builder.WriteString("sample_type_enum_old_lis_request=")
	builder.WriteString(st.SampleTypeEnumOldLisRequest)
	builder.WriteString(", ")
	builder.WriteString("sample_type_description=")
	builder.WriteString(st.SampleTypeDescription)
	builder.WriteString(", ")
	builder.WriteString("primary_sample_type_group=")
	builder.WriteString(st.PrimarySampleTypeGroup)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", st.IsActive))
	builder.WriteString(", ")
	builder.WriteString("created_time=")
	builder.WriteString(st.CreatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_time=")
	builder.WriteString(st.UpdatedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SampleTypes is a parsable slice of SampleType.
type SampleTypes []*SampleType
