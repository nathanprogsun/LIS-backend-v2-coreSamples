// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/address"
	"coresamples/ent/betaprogramparticipation"
	"coresamples/ent/clinic"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/customeraddressonclinics"
	"coresamples/ent/customercontactonclinics"
	"coresamples/ent/customersettingonclinics"
	"coresamples/ent/orderinfo"
	"coresamples/ent/patient"
	"coresamples/ent/predicate"
	"coresamples/ent/setting"
	"coresamples/ent/user"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClinicQuery is the builder for querying Clinic entities.
type ClinicQuery struct {
	config
	ctx                                 *QueryContext
	order                               []clinic.OrderOption
	inters                              []Interceptor
	predicates                          []predicate.Clinic
	withUser                            *UserQuery
	withClinicContacts                  *ContactQuery
	withClinicAddresses                 *AddressQuery
	withCustomers                       *CustomerQuery
	withClinicSettings                  *SettingQuery
	withClinicOrders                    *OrderInfoQuery
	withClinicPatients                  *PatientQuery
	withClinicBetaProgramParticipations *BetaProgramParticipationQuery
	withClinicCustomerSettings          *CustomerSettingOnClinicsQuery
	withClinicCustomerAddresses         *CustomerAddressOnClinicsQuery
	withClinicCustomerContacts          *CustomerContactOnClinicsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ClinicQuery builder.
func (cq *ClinicQuery) Where(ps ...predicate.Clinic) *ClinicQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit the number of records to be returned by this query.
func (cq *ClinicQuery) Limit(limit int) *ClinicQuery {
	cq.ctx.Limit = &limit
	return cq
}

// Offset to start from.
func (cq *ClinicQuery) Offset(offset int) *ClinicQuery {
	cq.ctx.Offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *ClinicQuery) Unique(unique bool) *ClinicQuery {
	cq.ctx.Unique = &unique
	return cq
}

// Order specifies how the records should be ordered.
func (cq *ClinicQuery) Order(o ...clinic.OrderOption) *ClinicQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryUser chains the current query on the "user" edge.
func (cq *ClinicQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, clinic.UserTable, clinic.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClinicContacts chains the current query on the "clinic_contacts" edge.
func (cq *ClinicQuery) QueryClinicContacts() *ContactQuery {
	query := (&ContactClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(contact.Table, contact.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.ClinicContactsTable, clinic.ClinicContactsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClinicAddresses chains the current query on the "clinic_addresses" edge.
func (cq *ClinicQuery) QueryClinicAddresses() *AddressQuery {
	query := (&AddressClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.ClinicAddressesTable, clinic.ClinicAddressesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCustomers chains the current query on the "customers" edge.
func (cq *ClinicQuery) QueryCustomers() *CustomerQuery {
	query := (&CustomerClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, clinic.CustomersTable, clinic.CustomersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClinicSettings chains the current query on the "clinic_settings" edge.
func (cq *ClinicQuery) QueryClinicSettings() *SettingQuery {
	query := (&SettingClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(setting.Table, setting.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, clinic.ClinicSettingsTable, clinic.ClinicSettingsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClinicOrders chains the current query on the "clinic_orders" edge.
func (cq *ClinicQuery) QueryClinicOrders() *OrderInfoQuery {
	query := (&OrderInfoClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(orderinfo.Table, orderinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.ClinicOrdersTable, clinic.ClinicOrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClinicPatients chains the current query on the "clinic_patients" edge.
func (cq *ClinicQuery) QueryClinicPatients() *PatientQuery {
	query := (&PatientClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, clinic.ClinicPatientsTable, clinic.ClinicPatientsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClinicBetaProgramParticipations chains the current query on the "clinic_beta_program_participations" edge.
func (cq *ClinicQuery) QueryClinicBetaProgramParticipations() *BetaProgramParticipationQuery {
	query := (&BetaProgramParticipationClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(betaprogramparticipation.Table, betaprogramparticipation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.ClinicBetaProgramParticipationsTable, clinic.ClinicBetaProgramParticipationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClinicCustomerSettings chains the current query on the "clinic_customer_settings" edge.
func (cq *ClinicQuery) QueryClinicCustomerSettings() *CustomerSettingOnClinicsQuery {
	query := (&CustomerSettingOnClinicsClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(customersettingonclinics.Table, customersettingonclinics.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.ClinicCustomerSettingsTable, clinic.ClinicCustomerSettingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClinicCustomerAddresses chains the current query on the "clinic_customer_addresses" edge.
func (cq *ClinicQuery) QueryClinicCustomerAddresses() *CustomerAddressOnClinicsQuery {
	query := (&CustomerAddressOnClinicsClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(customeraddressonclinics.Table, customeraddressonclinics.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.ClinicCustomerAddressesTable, clinic.ClinicCustomerAddressesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClinicCustomerContacts chains the current query on the "clinic_customer_contacts" edge.
func (cq *ClinicQuery) QueryClinicCustomerContacts() *CustomerContactOnClinicsQuery {
	query := (&CustomerContactOnClinicsClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clinic.Table, clinic.FieldID, selector),
			sqlgraph.To(customercontactonclinics.Table, customercontactonclinics.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clinic.ClinicCustomerContactsTable, clinic.ClinicCustomerContactsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Clinic entity from the query.
// Returns a *NotFoundError when no Clinic was found.
func (cq *ClinicQuery) First(ctx context.Context) (*Clinic, error) {
	nodes, err := cq.Limit(1).All(setContextOp(ctx, cq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{clinic.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *ClinicQuery) FirstX(ctx context.Context) *Clinic {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Clinic ID from the query.
// Returns a *NotFoundError when no Clinic ID was found.
func (cq *ClinicQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cq.Limit(1).IDs(setContextOp(ctx, cq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{clinic.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *ClinicQuery) FirstIDX(ctx context.Context) int {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Clinic entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Clinic entity is found.
// Returns a *NotFoundError when no Clinic entities are found.
func (cq *ClinicQuery) Only(ctx context.Context) (*Clinic, error) {
	nodes, err := cq.Limit(2).All(setContextOp(ctx, cq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{clinic.Label}
	default:
		return nil, &NotSingularError{clinic.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *ClinicQuery) OnlyX(ctx context.Context) *Clinic {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Clinic ID in the query.
// Returns a *NotSingularError when more than one Clinic ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *ClinicQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cq.Limit(2).IDs(setContextOp(ctx, cq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{clinic.Label}
	default:
		err = &NotSingularError{clinic.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *ClinicQuery) OnlyIDX(ctx context.Context) int {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Clinics.
func (cq *ClinicQuery) All(ctx context.Context) ([]*Clinic, error) {
	ctx = setContextOp(ctx, cq.ctx, "All")
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Clinic, *ClinicQuery]()
	return withInterceptors[[]*Clinic](ctx, cq, qr, cq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cq *ClinicQuery) AllX(ctx context.Context) []*Clinic {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Clinic IDs.
func (cq *ClinicQuery) IDs(ctx context.Context) (ids []int, err error) {
	if cq.ctx.Unique == nil && cq.path != nil {
		cq.Unique(true)
	}
	ctx = setContextOp(ctx, cq.ctx, "IDs")
	if err = cq.Select(clinic.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *ClinicQuery) IDsX(ctx context.Context) []int {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *ClinicQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cq.ctx, "Count")
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cq, querierCount[*ClinicQuery](), cq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cq *ClinicQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *ClinicQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cq.ctx, "Exist")
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *ClinicQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ClinicQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *ClinicQuery) Clone() *ClinicQuery {
	if cq == nil {
		return nil
	}
	return &ClinicQuery{
		config:                              cq.config,
		ctx:                                 cq.ctx.Clone(),
		order:                               append([]clinic.OrderOption{}, cq.order...),
		inters:                              append([]Interceptor{}, cq.inters...),
		predicates:                          append([]predicate.Clinic{}, cq.predicates...),
		withUser:                            cq.withUser.Clone(),
		withClinicContacts:                  cq.withClinicContacts.Clone(),
		withClinicAddresses:                 cq.withClinicAddresses.Clone(),
		withCustomers:                       cq.withCustomers.Clone(),
		withClinicSettings:                  cq.withClinicSettings.Clone(),
		withClinicOrders:                    cq.withClinicOrders.Clone(),
		withClinicPatients:                  cq.withClinicPatients.Clone(),
		withClinicBetaProgramParticipations: cq.withClinicBetaProgramParticipations.Clone(),
		withClinicCustomerSettings:          cq.withClinicCustomerSettings.Clone(),
		withClinicCustomerAddresses:         cq.withClinicCustomerAddresses.Clone(),
		withClinicCustomerContacts:          cq.withClinicCustomerContacts.Clone(),
		// clone intermediate query.
		sql:  cq.sql.Clone(),
		path: cq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithUser(opts ...func(*UserQuery)) *ClinicQuery {
	query := (&UserClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withUser = query
	return cq
}

// WithClinicContacts tells the query-builder to eager-load the nodes that are connected to
// the "clinic_contacts" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithClinicContacts(opts ...func(*ContactQuery)) *ClinicQuery {
	query := (&ContactClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withClinicContacts = query
	return cq
}

// WithClinicAddresses tells the query-builder to eager-load the nodes that are connected to
// the "clinic_addresses" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithClinicAddresses(opts ...func(*AddressQuery)) *ClinicQuery {
	query := (&AddressClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withClinicAddresses = query
	return cq
}

// WithCustomers tells the query-builder to eager-load the nodes that are connected to
// the "customers" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithCustomers(opts ...func(*CustomerQuery)) *ClinicQuery {
	query := (&CustomerClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCustomers = query
	return cq
}

// WithClinicSettings tells the query-builder to eager-load the nodes that are connected to
// the "clinic_settings" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithClinicSettings(opts ...func(*SettingQuery)) *ClinicQuery {
	query := (&SettingClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withClinicSettings = query
	return cq
}

// WithClinicOrders tells the query-builder to eager-load the nodes that are connected to
// the "clinic_orders" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithClinicOrders(opts ...func(*OrderInfoQuery)) *ClinicQuery {
	query := (&OrderInfoClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withClinicOrders = query
	return cq
}

// WithClinicPatients tells the query-builder to eager-load the nodes that are connected to
// the "clinic_patients" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithClinicPatients(opts ...func(*PatientQuery)) *ClinicQuery {
	query := (&PatientClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withClinicPatients = query
	return cq
}

// WithClinicBetaProgramParticipations tells the query-builder to eager-load the nodes that are connected to
// the "clinic_beta_program_participations" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithClinicBetaProgramParticipations(opts ...func(*BetaProgramParticipationQuery)) *ClinicQuery {
	query := (&BetaProgramParticipationClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withClinicBetaProgramParticipations = query
	return cq
}

// WithClinicCustomerSettings tells the query-builder to eager-load the nodes that are connected to
// the "clinic_customer_settings" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithClinicCustomerSettings(opts ...func(*CustomerSettingOnClinicsQuery)) *ClinicQuery {
	query := (&CustomerSettingOnClinicsClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withClinicCustomerSettings = query
	return cq
}

// WithClinicCustomerAddresses tells the query-builder to eager-load the nodes that are connected to
// the "clinic_customer_addresses" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithClinicCustomerAddresses(opts ...func(*CustomerAddressOnClinicsQuery)) *ClinicQuery {
	query := (&CustomerAddressOnClinicsClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withClinicCustomerAddresses = query
	return cq
}

// WithClinicCustomerContacts tells the query-builder to eager-load the nodes that are connected to
// the "clinic_customer_contacts" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClinicQuery) WithClinicCustomerContacts(opts ...func(*CustomerContactOnClinicsQuery)) *ClinicQuery {
	query := (&CustomerContactOnClinicsClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withClinicCustomerContacts = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ClinicName string `json:"clinic_name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Clinic.Query().
//		GroupBy(clinic.FieldClinicName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cq *ClinicQuery) GroupBy(field string, fields ...string) *ClinicGroupBy {
	cq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ClinicGroupBy{build: cq}
	grbuild.flds = &cq.ctx.Fields
	grbuild.label = clinic.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ClinicName string `json:"clinic_name,omitempty"`
//	}
//
//	client.Clinic.Query().
//		Select(clinic.FieldClinicName).
//		Scan(ctx, &v)
func (cq *ClinicQuery) Select(fields ...string) *ClinicSelect {
	cq.ctx.Fields = append(cq.ctx.Fields, fields...)
	sbuild := &ClinicSelect{ClinicQuery: cq}
	sbuild.label = clinic.Label
	sbuild.flds, sbuild.scan = &cq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ClinicSelect configured with the given aggregations.
func (cq *ClinicQuery) Aggregate(fns ...AggregateFunc) *ClinicSelect {
	return cq.Select().Aggregate(fns...)
}

func (cq *ClinicQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cq); err != nil {
				return err
			}
		}
	}
	for _, f := range cq.ctx.Fields {
		if !clinic.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	return nil
}

func (cq *ClinicQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Clinic, error) {
	var (
		nodes       = []*Clinic{}
		_spec       = cq.querySpec()
		loadedTypes = [11]bool{
			cq.withUser != nil,
			cq.withClinicContacts != nil,
			cq.withClinicAddresses != nil,
			cq.withCustomers != nil,
			cq.withClinicSettings != nil,
			cq.withClinicOrders != nil,
			cq.withClinicPatients != nil,
			cq.withClinicBetaProgramParticipations != nil,
			cq.withClinicCustomerSettings != nil,
			cq.withClinicCustomerAddresses != nil,
			cq.withClinicCustomerContacts != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Clinic).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Clinic{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withUser; query != nil {
		if err := cq.loadUser(ctx, query, nodes, nil,
			func(n *Clinic, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withClinicContacts; query != nil {
		if err := cq.loadClinicContacts(ctx, query, nodes,
			func(n *Clinic) { n.Edges.ClinicContacts = []*Contact{} },
			func(n *Clinic, e *Contact) { n.Edges.ClinicContacts = append(n.Edges.ClinicContacts, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withClinicAddresses; query != nil {
		if err := cq.loadClinicAddresses(ctx, query, nodes,
			func(n *Clinic) { n.Edges.ClinicAddresses = []*Address{} },
			func(n *Clinic, e *Address) { n.Edges.ClinicAddresses = append(n.Edges.ClinicAddresses, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withCustomers; query != nil {
		if err := cq.loadCustomers(ctx, query, nodes,
			func(n *Clinic) { n.Edges.Customers = []*Customer{} },
			func(n *Clinic, e *Customer) { n.Edges.Customers = append(n.Edges.Customers, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withClinicSettings; query != nil {
		if err := cq.loadClinicSettings(ctx, query, nodes,
			func(n *Clinic) { n.Edges.ClinicSettings = []*Setting{} },
			func(n *Clinic, e *Setting) { n.Edges.ClinicSettings = append(n.Edges.ClinicSettings, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withClinicOrders; query != nil {
		if err := cq.loadClinicOrders(ctx, query, nodes,
			func(n *Clinic) { n.Edges.ClinicOrders = []*OrderInfo{} },
			func(n *Clinic, e *OrderInfo) { n.Edges.ClinicOrders = append(n.Edges.ClinicOrders, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withClinicPatients; query != nil {
		if err := cq.loadClinicPatients(ctx, query, nodes,
			func(n *Clinic) { n.Edges.ClinicPatients = []*Patient{} },
			func(n *Clinic, e *Patient) { n.Edges.ClinicPatients = append(n.Edges.ClinicPatients, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withClinicBetaProgramParticipations; query != nil {
		if err := cq.loadClinicBetaProgramParticipations(ctx, query, nodes,
			func(n *Clinic) { n.Edges.ClinicBetaProgramParticipations = []*BetaProgramParticipation{} },
			func(n *Clinic, e *BetaProgramParticipation) {
				n.Edges.ClinicBetaProgramParticipations = append(n.Edges.ClinicBetaProgramParticipations, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := cq.withClinicCustomerSettings; query != nil {
		if err := cq.loadClinicCustomerSettings(ctx, query, nodes,
			func(n *Clinic) { n.Edges.ClinicCustomerSettings = []*CustomerSettingOnClinics{} },
			func(n *Clinic, e *CustomerSettingOnClinics) {
				n.Edges.ClinicCustomerSettings = append(n.Edges.ClinicCustomerSettings, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := cq.withClinicCustomerAddresses; query != nil {
		if err := cq.loadClinicCustomerAddresses(ctx, query, nodes,
			func(n *Clinic) { n.Edges.ClinicCustomerAddresses = []*CustomerAddressOnClinics{} },
			func(n *Clinic, e *CustomerAddressOnClinics) {
				n.Edges.ClinicCustomerAddresses = append(n.Edges.ClinicCustomerAddresses, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := cq.withClinicCustomerContacts; query != nil {
		if err := cq.loadClinicCustomerContacts(ctx, query, nodes,
			func(n *Clinic) { n.Edges.ClinicCustomerContacts = []*CustomerContactOnClinics{} },
			func(n *Clinic, e *CustomerContactOnClinics) {
				n.Edges.ClinicCustomerContacts = append(n.Edges.ClinicCustomerContacts, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *ClinicQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Clinic)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ClinicQuery) loadClinicContacts(ctx context.Context, query *ContactQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *Contact)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(contact.FieldClinicID)
	}
	query.Where(predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.ClinicContactsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ClinicID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadClinicAddresses(ctx context.Context, query *AddressQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *Address)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(address.FieldClinicID)
	}
	query.Where(predicate.Address(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.ClinicAddressesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ClinicID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadCustomers(ctx context.Context, query *CustomerQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *Customer)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Clinic)
	nids := make(map[int]map[*Clinic]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(clinic.CustomersTable)
		s.Join(joinT).On(s.C(customer.FieldID), joinT.C(clinic.CustomersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(clinic.CustomersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(clinic.CustomersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Clinic]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Customer](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "customers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *ClinicQuery) loadClinicSettings(ctx context.Context, query *SettingQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *Setting)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Clinic)
	nids := make(map[int]map[*Clinic]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(clinic.ClinicSettingsTable)
		s.Join(joinT).On(s.C(setting.FieldID), joinT.C(clinic.ClinicSettingsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(clinic.ClinicSettingsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(clinic.ClinicSettingsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Clinic]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Setting](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "clinic_settings" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *ClinicQuery) loadClinicOrders(ctx context.Context, query *OrderInfoQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *OrderInfo)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orderinfo.FieldClinicID)
	}
	query.Where(predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.ClinicOrdersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ClinicID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadClinicPatients(ctx context.Context, query *PatientQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *Patient)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Clinic)
	nids := make(map[int]map[*Clinic]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(clinic.ClinicPatientsTable)
		s.Join(joinT).On(s.C(patient.FieldID), joinT.C(clinic.ClinicPatientsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(clinic.ClinicPatientsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(clinic.ClinicPatientsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Clinic]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Patient](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "clinic_patients" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *ClinicQuery) loadClinicBetaProgramParticipations(ctx context.Context, query *BetaProgramParticipationQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *BetaProgramParticipation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(betaprogramparticipation.FieldClinicID)
	}
	query.Where(predicate.BetaProgramParticipation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.ClinicBetaProgramParticipationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ClinicID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadClinicCustomerSettings(ctx context.Context, query *CustomerSettingOnClinicsQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *CustomerSettingOnClinics)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(customersettingonclinics.FieldClinicID)
	}
	query.Where(predicate.CustomerSettingOnClinics(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.ClinicCustomerSettingsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ClinicID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadClinicCustomerAddresses(ctx context.Context, query *CustomerAddressOnClinicsQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *CustomerAddressOnClinics)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(customeraddressonclinics.FieldClinicID)
	}
	query.Where(predicate.CustomerAddressOnClinics(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.ClinicCustomerAddressesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ClinicID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ClinicQuery) loadClinicCustomerContacts(ctx context.Context, query *CustomerContactOnClinicsQuery, nodes []*Clinic, init func(*Clinic), assign func(*Clinic, *CustomerContactOnClinics)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Clinic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(customercontactonclinics.FieldClinicID)
	}
	query.Where(predicate.CustomerContactOnClinics(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(clinic.ClinicCustomerContactsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ClinicID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clinic_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (cq *ClinicQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	_spec.Node.Columns = cq.ctx.Fields
	if len(cq.ctx.Fields) > 0 {
		_spec.Unique = cq.ctx.Unique != nil && *cq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *ClinicQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(clinic.Table, clinic.Columns, sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt))
	_spec.From = cq.sql
	if unique := cq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cq.path != nil {
		_spec.Unique = true
	}
	if fields := cq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clinic.FieldID)
		for i := range fields {
			if fields[i] != clinic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cq.withUser != nil {
			_spec.Node.AddColumnOnce(clinic.FieldUserID)
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *ClinicQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(clinic.Table)
	columns := cq.ctx.Fields
	if len(columns) == 0 {
		columns = clinic.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.ctx.Unique != nil && *cq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ClinicGroupBy is the group-by builder for Clinic entities.
type ClinicGroupBy struct {
	selector
	build *ClinicQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *ClinicGroupBy) Aggregate(fns ...AggregateFunc) *ClinicGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the selector query and scans the result into the given value.
func (cgb *ClinicGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cgb.build.ctx, "GroupBy")
	if err := cgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClinicQuery, *ClinicGroupBy](ctx, cgb.build, cgb, cgb.build.inters, v)
}

func (cgb *ClinicGroupBy) sqlScan(ctx context.Context, root *ClinicQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cgb.flds)+len(cgb.fns))
		for _, f := range *cgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ClinicSelect is the builder for selecting fields of Clinic entities.
type ClinicSelect struct {
	*ClinicQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cs *ClinicSelect) Aggregate(fns ...AggregateFunc) *ClinicSelect {
	cs.fns = append(cs.fns, fns...)
	return cs
}

// Scan applies the selector query and scans the result into the given value.
func (cs *ClinicSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cs.ctx, "Select")
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClinicQuery, *ClinicSelect](ctx, cs.ClinicQuery, cs, cs.inters, v)
}

func (cs *ClinicSelect) sqlScan(ctx context.Context, root *ClinicQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cs.fns))
	for _, fn := range cs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
