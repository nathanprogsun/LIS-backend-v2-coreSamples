// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/loginhistory"
	"coresamples/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoginHistoryUpdate is the builder for updating LoginHistory entities.
type LoginHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *LoginHistoryMutation
}

// Where appends a list predicates to the LoginHistoryUpdate builder.
func (lhu *LoginHistoryUpdate) Where(ps ...predicate.LoginHistory) *LoginHistoryUpdate {
	lhu.mutation.Where(ps...)
	return lhu
}

// SetUsername sets the "username" field.
func (lhu *LoginHistoryUpdate) SetUsername(s string) *LoginHistoryUpdate {
	lhu.mutation.SetUsername(s)
	return lhu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (lhu *LoginHistoryUpdate) SetNillableUsername(s *string) *LoginHistoryUpdate {
	if s != nil {
		lhu.SetUsername(*s)
	}
	return lhu
}

// SetLoginTime sets the "login_time" field.
func (lhu *LoginHistoryUpdate) SetLoginTime(t time.Time) *LoginHistoryUpdate {
	lhu.mutation.SetLoginTime(t)
	return lhu
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (lhu *LoginHistoryUpdate) SetNillableLoginTime(t *time.Time) *LoginHistoryUpdate {
	if t != nil {
		lhu.SetLoginTime(*t)
	}
	return lhu
}

// SetLoginIP sets the "login_ip" field.
func (lhu *LoginHistoryUpdate) SetLoginIP(s string) *LoginHistoryUpdate {
	lhu.mutation.SetLoginIP(s)
	return lhu
}

// SetNillableLoginIP sets the "login_ip" field if the given value is not nil.
func (lhu *LoginHistoryUpdate) SetNillableLoginIP(s *string) *LoginHistoryUpdate {
	if s != nil {
		lhu.SetLoginIP(*s)
	}
	return lhu
}

// SetLoginSuccessfully sets the "login_successfully" field.
func (lhu *LoginHistoryUpdate) SetLoginSuccessfully(b bool) *LoginHistoryUpdate {
	lhu.mutation.SetLoginSuccessfully(b)
	return lhu
}

// SetNillableLoginSuccessfully sets the "login_successfully" field if the given value is not nil.
func (lhu *LoginHistoryUpdate) SetNillableLoginSuccessfully(b *bool) *LoginHistoryUpdate {
	if b != nil {
		lhu.SetLoginSuccessfully(*b)
	}
	return lhu
}

// SetFailureReason sets the "failure_reason" field.
func (lhu *LoginHistoryUpdate) SetFailureReason(s string) *LoginHistoryUpdate {
	lhu.mutation.SetFailureReason(s)
	return lhu
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (lhu *LoginHistoryUpdate) SetNillableFailureReason(s *string) *LoginHistoryUpdate {
	if s != nil {
		lhu.SetFailureReason(*s)
	}
	return lhu
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (lhu *LoginHistoryUpdate) ClearFailureReason() *LoginHistoryUpdate {
	lhu.mutation.ClearFailureReason()
	return lhu
}

// SetLoginPortal sets the "login_portal" field.
func (lhu *LoginHistoryUpdate) SetLoginPortal(s string) *LoginHistoryUpdate {
	lhu.mutation.SetLoginPortal(s)
	return lhu
}

// SetNillableLoginPortal sets the "login_portal" field if the given value is not nil.
func (lhu *LoginHistoryUpdate) SetNillableLoginPortal(s *string) *LoginHistoryUpdate {
	if s != nil {
		lhu.SetLoginPortal(*s)
	}
	return lhu
}

// ClearLoginPortal clears the value of the "login_portal" field.
func (lhu *LoginHistoryUpdate) ClearLoginPortal() *LoginHistoryUpdate {
	lhu.mutation.ClearLoginPortal()
	return lhu
}

// SetToken sets the "token" field.
func (lhu *LoginHistoryUpdate) SetToken(s string) *LoginHistoryUpdate {
	lhu.mutation.SetToken(s)
	return lhu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (lhu *LoginHistoryUpdate) SetNillableToken(s *string) *LoginHistoryUpdate {
	if s != nil {
		lhu.SetToken(*s)
	}
	return lhu
}

// ClearToken clears the value of the "token" field.
func (lhu *LoginHistoryUpdate) ClearToken() *LoginHistoryUpdate {
	lhu.mutation.ClearToken()
	return lhu
}

// Mutation returns the LoginHistoryMutation object of the builder.
func (lhu *LoginHistoryUpdate) Mutation() *LoginHistoryMutation {
	return lhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lhu *LoginHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lhu.sqlSave, lhu.mutation, lhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lhu *LoginHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := lhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lhu *LoginHistoryUpdate) Exec(ctx context.Context) error {
	_, err := lhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lhu *LoginHistoryUpdate) ExecX(ctx context.Context) {
	if err := lhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lhu *LoginHistoryUpdate) check() error {
	if v, ok := lhu.mutation.Token(); ok {
		if err := loginhistory.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "LoginHistory.token": %w`, err)}
		}
	}
	return nil
}

func (lhu *LoginHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lhu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(loginhistory.Table, loginhistory.Columns, sqlgraph.NewFieldSpec(loginhistory.FieldID, field.TypeInt))
	if ps := lhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lhu.mutation.Username(); ok {
		_spec.SetField(loginhistory.FieldUsername, field.TypeString, value)
	}
	if value, ok := lhu.mutation.LoginTime(); ok {
		_spec.SetField(loginhistory.FieldLoginTime, field.TypeTime, value)
	}
	if value, ok := lhu.mutation.LoginIP(); ok {
		_spec.SetField(loginhistory.FieldLoginIP, field.TypeString, value)
	}
	if value, ok := lhu.mutation.LoginSuccessfully(); ok {
		_spec.SetField(loginhistory.FieldLoginSuccessfully, field.TypeBool, value)
	}
	if value, ok := lhu.mutation.FailureReason(); ok {
		_spec.SetField(loginhistory.FieldFailureReason, field.TypeString, value)
	}
	if lhu.mutation.FailureReasonCleared() {
		_spec.ClearField(loginhistory.FieldFailureReason, field.TypeString)
	}
	if value, ok := lhu.mutation.LoginPortal(); ok {
		_spec.SetField(loginhistory.FieldLoginPortal, field.TypeString, value)
	}
	if lhu.mutation.LoginPortalCleared() {
		_spec.ClearField(loginhistory.FieldLoginPortal, field.TypeString)
	}
	if value, ok := lhu.mutation.Token(); ok {
		_spec.SetField(loginhistory.FieldToken, field.TypeString, value)
	}
	if lhu.mutation.TokenCleared() {
		_spec.ClearField(loginhistory.FieldToken, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lhu.mutation.done = true
	return n, nil
}

// LoginHistoryUpdateOne is the builder for updating a single LoginHistory entity.
type LoginHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoginHistoryMutation
}

// SetUsername sets the "username" field.
func (lhuo *LoginHistoryUpdateOne) SetUsername(s string) *LoginHistoryUpdateOne {
	lhuo.mutation.SetUsername(s)
	return lhuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (lhuo *LoginHistoryUpdateOne) SetNillableUsername(s *string) *LoginHistoryUpdateOne {
	if s != nil {
		lhuo.SetUsername(*s)
	}
	return lhuo
}

// SetLoginTime sets the "login_time" field.
func (lhuo *LoginHistoryUpdateOne) SetLoginTime(t time.Time) *LoginHistoryUpdateOne {
	lhuo.mutation.SetLoginTime(t)
	return lhuo
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (lhuo *LoginHistoryUpdateOne) SetNillableLoginTime(t *time.Time) *LoginHistoryUpdateOne {
	if t != nil {
		lhuo.SetLoginTime(*t)
	}
	return lhuo
}

// SetLoginIP sets the "login_ip" field.
func (lhuo *LoginHistoryUpdateOne) SetLoginIP(s string) *LoginHistoryUpdateOne {
	lhuo.mutation.SetLoginIP(s)
	return lhuo
}

// SetNillableLoginIP sets the "login_ip" field if the given value is not nil.
func (lhuo *LoginHistoryUpdateOne) SetNillableLoginIP(s *string) *LoginHistoryUpdateOne {
	if s != nil {
		lhuo.SetLoginIP(*s)
	}
	return lhuo
}

// SetLoginSuccessfully sets the "login_successfully" field.
func (lhuo *LoginHistoryUpdateOne) SetLoginSuccessfully(b bool) *LoginHistoryUpdateOne {
	lhuo.mutation.SetLoginSuccessfully(b)
	return lhuo
}

// SetNillableLoginSuccessfully sets the "login_successfully" field if the given value is not nil.
func (lhuo *LoginHistoryUpdateOne) SetNillableLoginSuccessfully(b *bool) *LoginHistoryUpdateOne {
	if b != nil {
		lhuo.SetLoginSuccessfully(*b)
	}
	return lhuo
}

// SetFailureReason sets the "failure_reason" field.
func (lhuo *LoginHistoryUpdateOne) SetFailureReason(s string) *LoginHistoryUpdateOne {
	lhuo.mutation.SetFailureReason(s)
	return lhuo
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (lhuo *LoginHistoryUpdateOne) SetNillableFailureReason(s *string) *LoginHistoryUpdateOne {
	if s != nil {
		lhuo.SetFailureReason(*s)
	}
	return lhuo
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (lhuo *LoginHistoryUpdateOne) ClearFailureReason() *LoginHistoryUpdateOne {
	lhuo.mutation.ClearFailureReason()
	return lhuo
}

// SetLoginPortal sets the "login_portal" field.
func (lhuo *LoginHistoryUpdateOne) SetLoginPortal(s string) *LoginHistoryUpdateOne {
	lhuo.mutation.SetLoginPortal(s)
	return lhuo
}

// SetNillableLoginPortal sets the "login_portal" field if the given value is not nil.
func (lhuo *LoginHistoryUpdateOne) SetNillableLoginPortal(s *string) *LoginHistoryUpdateOne {
	if s != nil {
		lhuo.SetLoginPortal(*s)
	}
	return lhuo
}

// ClearLoginPortal clears the value of the "login_portal" field.
func (lhuo *LoginHistoryUpdateOne) ClearLoginPortal() *LoginHistoryUpdateOne {
	lhuo.mutation.ClearLoginPortal()
	return lhuo
}

// SetToken sets the "token" field.
func (lhuo *LoginHistoryUpdateOne) SetToken(s string) *LoginHistoryUpdateOne {
	lhuo.mutation.SetToken(s)
	return lhuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (lhuo *LoginHistoryUpdateOne) SetNillableToken(s *string) *LoginHistoryUpdateOne {
	if s != nil {
		lhuo.SetToken(*s)
	}
	return lhuo
}

// ClearToken clears the value of the "token" field.
func (lhuo *LoginHistoryUpdateOne) ClearToken() *LoginHistoryUpdateOne {
	lhuo.mutation.ClearToken()
	return lhuo
}

// Mutation returns the LoginHistoryMutation object of the builder.
func (lhuo *LoginHistoryUpdateOne) Mutation() *LoginHistoryMutation {
	return lhuo.mutation
}

// Where appends a list predicates to the LoginHistoryUpdate builder.
func (lhuo *LoginHistoryUpdateOne) Where(ps ...predicate.LoginHistory) *LoginHistoryUpdateOne {
	lhuo.mutation.Where(ps...)
	return lhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lhuo *LoginHistoryUpdateOne) Select(field string, fields ...string) *LoginHistoryUpdateOne {
	lhuo.fields = append([]string{field}, fields...)
	return lhuo
}

// Save executes the query and returns the updated LoginHistory entity.
func (lhuo *LoginHistoryUpdateOne) Save(ctx context.Context) (*LoginHistory, error) {
	return withHooks(ctx, lhuo.sqlSave, lhuo.mutation, lhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lhuo *LoginHistoryUpdateOne) SaveX(ctx context.Context) *LoginHistory {
	node, err := lhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lhuo *LoginHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := lhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lhuo *LoginHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := lhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lhuo *LoginHistoryUpdateOne) check() error {
	if v, ok := lhuo.mutation.Token(); ok {
		if err := loginhistory.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "LoginHistory.token": %w`, err)}
		}
	}
	return nil
}

func (lhuo *LoginHistoryUpdateOne) sqlSave(ctx context.Context) (_node *LoginHistory, err error) {
	if err := lhuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(loginhistory.Table, loginhistory.Columns, sqlgraph.NewFieldSpec(loginhistory.FieldID, field.TypeInt))
	id, ok := lhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LoginHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loginhistory.FieldID)
		for _, f := range fields {
			if !loginhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != loginhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lhuo.mutation.Username(); ok {
		_spec.SetField(loginhistory.FieldUsername, field.TypeString, value)
	}
	if value, ok := lhuo.mutation.LoginTime(); ok {
		_spec.SetField(loginhistory.FieldLoginTime, field.TypeTime, value)
	}
	if value, ok := lhuo.mutation.LoginIP(); ok {
		_spec.SetField(loginhistory.FieldLoginIP, field.TypeString, value)
	}
	if value, ok := lhuo.mutation.LoginSuccessfully(); ok {
		_spec.SetField(loginhistory.FieldLoginSuccessfully, field.TypeBool, value)
	}
	if value, ok := lhuo.mutation.FailureReason(); ok {
		_spec.SetField(loginhistory.FieldFailureReason, field.TypeString, value)
	}
	if lhuo.mutation.FailureReasonCleared() {
		_spec.ClearField(loginhistory.FieldFailureReason, field.TypeString)
	}
	if value, ok := lhuo.mutation.LoginPortal(); ok {
		_spec.SetField(loginhistory.FieldLoginPortal, field.TypeString, value)
	}
	if lhuo.mutation.LoginPortalCleared() {
		_spec.ClearField(loginhistory.FieldLoginPortal, field.TypeString)
	}
	if value, ok := lhuo.mutation.Token(); ok {
		_spec.SetField(loginhistory.FieldToken, field.TypeString, value)
	}
	if lhuo.mutation.TokenCleared() {
		_spec.ClearField(loginhistory.FieldToken, field.TypeString)
	}
	_node = &LoginHistory{config: lhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lhuo.mutation.done = true
	return _node, nil
}
