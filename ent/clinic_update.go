// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/address"
	"coresamples/ent/betaprogramparticipation"
	"coresamples/ent/clinic"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/customeraddressonclinics"
	"coresamples/ent/customercontactonclinics"
	"coresamples/ent/customersettingonclinics"
	"coresamples/ent/orderinfo"
	"coresamples/ent/patient"
	"coresamples/ent/predicate"
	"coresamples/ent/setting"
	"coresamples/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClinicUpdate is the builder for updating Clinic entities.
type ClinicUpdate struct {
	config
	hooks    []Hook
	mutation *ClinicMutation
}

// Where appends a list predicates to the ClinicUpdate builder.
func (cu *ClinicUpdate) Where(ps ...predicate.Clinic) *ClinicUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetClinicName sets the "clinic_name" field.
func (cu *ClinicUpdate) SetClinicName(s string) *ClinicUpdate {
	cu.mutation.SetClinicName(s)
	return cu
}

// SetNillableClinicName sets the "clinic_name" field if the given value is not nil.
func (cu *ClinicUpdate) SetNillableClinicName(s *string) *ClinicUpdate {
	if s != nil {
		cu.SetClinicName(*s)
	}
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *ClinicUpdate) SetUserID(i int) *ClinicUpdate {
	cu.mutation.SetUserID(i)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *ClinicUpdate) SetNillableUserID(i *int) *ClinicUpdate {
	if i != nil {
		cu.SetUserID(*i)
	}
	return cu
}

// ClearUserID clears the value of the "user_id" field.
func (cu *ClinicUpdate) ClearUserID() *ClinicUpdate {
	cu.mutation.ClearUserID()
	return cu
}

// SetIsActive sets the "is_active" field.
func (cu *ClinicUpdate) SetIsActive(b bool) *ClinicUpdate {
	cu.mutation.SetIsActive(b)
	return cu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (cu *ClinicUpdate) SetNillableIsActive(b *bool) *ClinicUpdate {
	if b != nil {
		cu.SetIsActive(*b)
	}
	return cu
}

// SetClinicAccountID sets the "clinic_account_id" field.
func (cu *ClinicUpdate) SetClinicAccountID(i int) *ClinicUpdate {
	cu.mutation.ResetClinicAccountID()
	cu.mutation.SetClinicAccountID(i)
	return cu
}

// SetNillableClinicAccountID sets the "clinic_account_id" field if the given value is not nil.
func (cu *ClinicUpdate) SetNillableClinicAccountID(i *int) *ClinicUpdate {
	if i != nil {
		cu.SetClinicAccountID(*i)
	}
	return cu
}

// AddClinicAccountID adds i to the "clinic_account_id" field.
func (cu *ClinicUpdate) AddClinicAccountID(i int) *ClinicUpdate {
	cu.mutation.AddClinicAccountID(i)
	return cu
}

// ClearClinicAccountID clears the value of the "clinic_account_id" field.
func (cu *ClinicUpdate) ClearClinicAccountID() *ClinicUpdate {
	cu.mutation.ClearClinicAccountID()
	return cu
}

// SetClinicNameOldSystem sets the "clinic_name_old_system" field.
func (cu *ClinicUpdate) SetClinicNameOldSystem(s string) *ClinicUpdate {
	cu.mutation.SetClinicNameOldSystem(s)
	return cu
}

// SetNillableClinicNameOldSystem sets the "clinic_name_old_system" field if the given value is not nil.
func (cu *ClinicUpdate) SetNillableClinicNameOldSystem(s *string) *ClinicUpdate {
	if s != nil {
		cu.SetClinicNameOldSystem(*s)
	}
	return cu
}

// ClearClinicNameOldSystem clears the value of the "clinic_name_old_system" field.
func (cu *ClinicUpdate) ClearClinicNameOldSystem() *ClinicUpdate {
	cu.mutation.ClearClinicNameOldSystem()
	return cu
}

// SetClinicSignupTime sets the "clinic_signup_time" field.
func (cu *ClinicUpdate) SetClinicSignupTime(t time.Time) *ClinicUpdate {
	cu.mutation.SetClinicSignupTime(t)
	return cu
}

// SetNillableClinicSignupTime sets the "clinic_signup_time" field if the given value is not nil.
func (cu *ClinicUpdate) SetNillableClinicSignupTime(t *time.Time) *ClinicUpdate {
	if t != nil {
		cu.SetClinicSignupTime(*t)
	}
	return cu
}

// SetClinicUpdatedTime sets the "clinic_updated_time" field.
func (cu *ClinicUpdate) SetClinicUpdatedTime(t time.Time) *ClinicUpdate {
	cu.mutation.SetClinicUpdatedTime(t)
	return cu
}

// ClearClinicUpdatedTime clears the value of the "clinic_updated_time" field.
func (cu *ClinicUpdate) ClearClinicUpdatedTime() *ClinicUpdate {
	cu.mutation.ClearClinicUpdatedTime()
	return cu
}

// SetUser sets the "user" edge to the User entity.
func (cu *ClinicUpdate) SetUser(u *User) *ClinicUpdate {
	return cu.SetUserID(u.ID)
}

// AddClinicContactIDs adds the "clinic_contacts" edge to the Contact entity by IDs.
func (cu *ClinicUpdate) AddClinicContactIDs(ids ...int) *ClinicUpdate {
	cu.mutation.AddClinicContactIDs(ids...)
	return cu
}

// AddClinicContacts adds the "clinic_contacts" edges to the Contact entity.
func (cu *ClinicUpdate) AddClinicContacts(c ...*Contact) *ClinicUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddClinicContactIDs(ids...)
}

// AddClinicAddressIDs adds the "clinic_addresses" edge to the Address entity by IDs.
func (cu *ClinicUpdate) AddClinicAddressIDs(ids ...int) *ClinicUpdate {
	cu.mutation.AddClinicAddressIDs(ids...)
	return cu
}

// AddClinicAddresses adds the "clinic_addresses" edges to the Address entity.
func (cu *ClinicUpdate) AddClinicAddresses(a ...*Address) *ClinicUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddClinicAddressIDs(ids...)
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (cu *ClinicUpdate) AddCustomerIDs(ids ...int) *ClinicUpdate {
	cu.mutation.AddCustomerIDs(ids...)
	return cu
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (cu *ClinicUpdate) AddCustomers(c ...*Customer) *ClinicUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCustomerIDs(ids...)
}

// AddClinicSettingIDs adds the "clinic_settings" edge to the Setting entity by IDs.
func (cu *ClinicUpdate) AddClinicSettingIDs(ids ...int) *ClinicUpdate {
	cu.mutation.AddClinicSettingIDs(ids...)
	return cu
}

// AddClinicSettings adds the "clinic_settings" edges to the Setting entity.
func (cu *ClinicUpdate) AddClinicSettings(s ...*Setting) *ClinicUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddClinicSettingIDs(ids...)
}

// AddClinicOrderIDs adds the "clinic_orders" edge to the OrderInfo entity by IDs.
func (cu *ClinicUpdate) AddClinicOrderIDs(ids ...int) *ClinicUpdate {
	cu.mutation.AddClinicOrderIDs(ids...)
	return cu
}

// AddClinicOrders adds the "clinic_orders" edges to the OrderInfo entity.
func (cu *ClinicUpdate) AddClinicOrders(o ...*OrderInfo) *ClinicUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.AddClinicOrderIDs(ids...)
}

// AddClinicPatientIDs adds the "clinic_patients" edge to the Patient entity by IDs.
func (cu *ClinicUpdate) AddClinicPatientIDs(ids ...int) *ClinicUpdate {
	cu.mutation.AddClinicPatientIDs(ids...)
	return cu
}

// AddClinicPatients adds the "clinic_patients" edges to the Patient entity.
func (cu *ClinicUpdate) AddClinicPatients(p ...*Patient) *ClinicUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddClinicPatientIDs(ids...)
}

// AddClinicBetaProgramParticipationIDs adds the "clinic_beta_program_participations" edge to the BetaProgramParticipation entity by IDs.
func (cu *ClinicUpdate) AddClinicBetaProgramParticipationIDs(ids ...int) *ClinicUpdate {
	cu.mutation.AddClinicBetaProgramParticipationIDs(ids...)
	return cu
}

// AddClinicBetaProgramParticipations adds the "clinic_beta_program_participations" edges to the BetaProgramParticipation entity.
func (cu *ClinicUpdate) AddClinicBetaProgramParticipations(b ...*BetaProgramParticipation) *ClinicUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.AddClinicBetaProgramParticipationIDs(ids...)
}

// AddClinicCustomerSettingIDs adds the "clinic_customer_settings" edge to the CustomerSettingOnClinics entity by IDs.
func (cu *ClinicUpdate) AddClinicCustomerSettingIDs(ids ...int) *ClinicUpdate {
	cu.mutation.AddClinicCustomerSettingIDs(ids...)
	return cu
}

// AddClinicCustomerSettings adds the "clinic_customer_settings" edges to the CustomerSettingOnClinics entity.
func (cu *ClinicUpdate) AddClinicCustomerSettings(c ...*CustomerSettingOnClinics) *ClinicUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddClinicCustomerSettingIDs(ids...)
}

// AddClinicCustomerAddressIDs adds the "clinic_customer_addresses" edge to the CustomerAddressOnClinics entity by IDs.
func (cu *ClinicUpdate) AddClinicCustomerAddressIDs(ids ...int) *ClinicUpdate {
	cu.mutation.AddClinicCustomerAddressIDs(ids...)
	return cu
}

// AddClinicCustomerAddresses adds the "clinic_customer_addresses" edges to the CustomerAddressOnClinics entity.
func (cu *ClinicUpdate) AddClinicCustomerAddresses(c ...*CustomerAddressOnClinics) *ClinicUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddClinicCustomerAddressIDs(ids...)
}

// AddClinicCustomerContactIDs adds the "clinic_customer_contacts" edge to the CustomerContactOnClinics entity by IDs.
func (cu *ClinicUpdate) AddClinicCustomerContactIDs(ids ...int) *ClinicUpdate {
	cu.mutation.AddClinicCustomerContactIDs(ids...)
	return cu
}

// AddClinicCustomerContacts adds the "clinic_customer_contacts" edges to the CustomerContactOnClinics entity.
func (cu *ClinicUpdate) AddClinicCustomerContacts(c ...*CustomerContactOnClinics) *ClinicUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddClinicCustomerContactIDs(ids...)
}

// Mutation returns the ClinicMutation object of the builder.
func (cu *ClinicUpdate) Mutation() *ClinicMutation {
	return cu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cu *ClinicUpdate) ClearUser() *ClinicUpdate {
	cu.mutation.ClearUser()
	return cu
}

// ClearClinicContacts clears all "clinic_contacts" edges to the Contact entity.
func (cu *ClinicUpdate) ClearClinicContacts() *ClinicUpdate {
	cu.mutation.ClearClinicContacts()
	return cu
}

// RemoveClinicContactIDs removes the "clinic_contacts" edge to Contact entities by IDs.
func (cu *ClinicUpdate) RemoveClinicContactIDs(ids ...int) *ClinicUpdate {
	cu.mutation.RemoveClinicContactIDs(ids...)
	return cu
}

// RemoveClinicContacts removes "clinic_contacts" edges to Contact entities.
func (cu *ClinicUpdate) RemoveClinicContacts(c ...*Contact) *ClinicUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveClinicContactIDs(ids...)
}

// ClearClinicAddresses clears all "clinic_addresses" edges to the Address entity.
func (cu *ClinicUpdate) ClearClinicAddresses() *ClinicUpdate {
	cu.mutation.ClearClinicAddresses()
	return cu
}

// RemoveClinicAddressIDs removes the "clinic_addresses" edge to Address entities by IDs.
func (cu *ClinicUpdate) RemoveClinicAddressIDs(ids ...int) *ClinicUpdate {
	cu.mutation.RemoveClinicAddressIDs(ids...)
	return cu
}

// RemoveClinicAddresses removes "clinic_addresses" edges to Address entities.
func (cu *ClinicUpdate) RemoveClinicAddresses(a ...*Address) *ClinicUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveClinicAddressIDs(ids...)
}

// ClearCustomers clears all "customers" edges to the Customer entity.
func (cu *ClinicUpdate) ClearCustomers() *ClinicUpdate {
	cu.mutation.ClearCustomers()
	return cu
}

// RemoveCustomerIDs removes the "customers" edge to Customer entities by IDs.
func (cu *ClinicUpdate) RemoveCustomerIDs(ids ...int) *ClinicUpdate {
	cu.mutation.RemoveCustomerIDs(ids...)
	return cu
}

// RemoveCustomers removes "customers" edges to Customer entities.
func (cu *ClinicUpdate) RemoveCustomers(c ...*Customer) *ClinicUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCustomerIDs(ids...)
}

// ClearClinicSettings clears all "clinic_settings" edges to the Setting entity.
func (cu *ClinicUpdate) ClearClinicSettings() *ClinicUpdate {
	cu.mutation.ClearClinicSettings()
	return cu
}

// RemoveClinicSettingIDs removes the "clinic_settings" edge to Setting entities by IDs.
func (cu *ClinicUpdate) RemoveClinicSettingIDs(ids ...int) *ClinicUpdate {
	cu.mutation.RemoveClinicSettingIDs(ids...)
	return cu
}

// RemoveClinicSettings removes "clinic_settings" edges to Setting entities.
func (cu *ClinicUpdate) RemoveClinicSettings(s ...*Setting) *ClinicUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveClinicSettingIDs(ids...)
}

// ClearClinicOrders clears all "clinic_orders" edges to the OrderInfo entity.
func (cu *ClinicUpdate) ClearClinicOrders() *ClinicUpdate {
	cu.mutation.ClearClinicOrders()
	return cu
}

// RemoveClinicOrderIDs removes the "clinic_orders" edge to OrderInfo entities by IDs.
func (cu *ClinicUpdate) RemoveClinicOrderIDs(ids ...int) *ClinicUpdate {
	cu.mutation.RemoveClinicOrderIDs(ids...)
	return cu
}

// RemoveClinicOrders removes "clinic_orders" edges to OrderInfo entities.
func (cu *ClinicUpdate) RemoveClinicOrders(o ...*OrderInfo) *ClinicUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.RemoveClinicOrderIDs(ids...)
}

// ClearClinicPatients clears all "clinic_patients" edges to the Patient entity.
func (cu *ClinicUpdate) ClearClinicPatients() *ClinicUpdate {
	cu.mutation.ClearClinicPatients()
	return cu
}

// RemoveClinicPatientIDs removes the "clinic_patients" edge to Patient entities by IDs.
func (cu *ClinicUpdate) RemoveClinicPatientIDs(ids ...int) *ClinicUpdate {
	cu.mutation.RemoveClinicPatientIDs(ids...)
	return cu
}

// RemoveClinicPatients removes "clinic_patients" edges to Patient entities.
func (cu *ClinicUpdate) RemoveClinicPatients(p ...*Patient) *ClinicUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveClinicPatientIDs(ids...)
}

// ClearClinicBetaProgramParticipations clears all "clinic_beta_program_participations" edges to the BetaProgramParticipation entity.
func (cu *ClinicUpdate) ClearClinicBetaProgramParticipations() *ClinicUpdate {
	cu.mutation.ClearClinicBetaProgramParticipations()
	return cu
}

// RemoveClinicBetaProgramParticipationIDs removes the "clinic_beta_program_participations" edge to BetaProgramParticipation entities by IDs.
func (cu *ClinicUpdate) RemoveClinicBetaProgramParticipationIDs(ids ...int) *ClinicUpdate {
	cu.mutation.RemoveClinicBetaProgramParticipationIDs(ids...)
	return cu
}

// RemoveClinicBetaProgramParticipations removes "clinic_beta_program_participations" edges to BetaProgramParticipation entities.
func (cu *ClinicUpdate) RemoveClinicBetaProgramParticipations(b ...*BetaProgramParticipation) *ClinicUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.RemoveClinicBetaProgramParticipationIDs(ids...)
}

// ClearClinicCustomerSettings clears all "clinic_customer_settings" edges to the CustomerSettingOnClinics entity.
func (cu *ClinicUpdate) ClearClinicCustomerSettings() *ClinicUpdate {
	cu.mutation.ClearClinicCustomerSettings()
	return cu
}

// RemoveClinicCustomerSettingIDs removes the "clinic_customer_settings" edge to CustomerSettingOnClinics entities by IDs.
func (cu *ClinicUpdate) RemoveClinicCustomerSettingIDs(ids ...int) *ClinicUpdate {
	cu.mutation.RemoveClinicCustomerSettingIDs(ids...)
	return cu
}

// RemoveClinicCustomerSettings removes "clinic_customer_settings" edges to CustomerSettingOnClinics entities.
func (cu *ClinicUpdate) RemoveClinicCustomerSettings(c ...*CustomerSettingOnClinics) *ClinicUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveClinicCustomerSettingIDs(ids...)
}

// ClearClinicCustomerAddresses clears all "clinic_customer_addresses" edges to the CustomerAddressOnClinics entity.
func (cu *ClinicUpdate) ClearClinicCustomerAddresses() *ClinicUpdate {
	cu.mutation.ClearClinicCustomerAddresses()
	return cu
}

// RemoveClinicCustomerAddressIDs removes the "clinic_customer_addresses" edge to CustomerAddressOnClinics entities by IDs.
func (cu *ClinicUpdate) RemoveClinicCustomerAddressIDs(ids ...int) *ClinicUpdate {
	cu.mutation.RemoveClinicCustomerAddressIDs(ids...)
	return cu
}

// RemoveClinicCustomerAddresses removes "clinic_customer_addresses" edges to CustomerAddressOnClinics entities.
func (cu *ClinicUpdate) RemoveClinicCustomerAddresses(c ...*CustomerAddressOnClinics) *ClinicUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveClinicCustomerAddressIDs(ids...)
}

// ClearClinicCustomerContacts clears all "clinic_customer_contacts" edges to the CustomerContactOnClinics entity.
func (cu *ClinicUpdate) ClearClinicCustomerContacts() *ClinicUpdate {
	cu.mutation.ClearClinicCustomerContacts()
	return cu
}

// RemoveClinicCustomerContactIDs removes the "clinic_customer_contacts" edge to CustomerContactOnClinics entities by IDs.
func (cu *ClinicUpdate) RemoveClinicCustomerContactIDs(ids ...int) *ClinicUpdate {
	cu.mutation.RemoveClinicCustomerContactIDs(ids...)
	return cu
}

// RemoveClinicCustomerContacts removes "clinic_customer_contacts" edges to CustomerContactOnClinics entities.
func (cu *ClinicUpdate) RemoveClinicCustomerContacts(c ...*CustomerContactOnClinics) *ClinicUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveClinicCustomerContactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClinicUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClinicUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClinicUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClinicUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ClinicUpdate) defaults() {
	if _, ok := cu.mutation.ClinicUpdatedTime(); !ok && !cu.mutation.ClinicUpdatedTimeCleared() {
		v := clinic.UpdateDefaultClinicUpdatedTime()
		cu.mutation.SetClinicUpdatedTime(v)
	}
}

func (cu *ClinicUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(clinic.Table, clinic.Columns, sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.ClinicName(); ok {
		_spec.SetField(clinic.FieldClinicName, field.TypeString, value)
	}
	if value, ok := cu.mutation.IsActive(); ok {
		_spec.SetField(clinic.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := cu.mutation.ClinicAccountID(); ok {
		_spec.SetField(clinic.FieldClinicAccountID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedClinicAccountID(); ok {
		_spec.AddField(clinic.FieldClinicAccountID, field.TypeInt, value)
	}
	if cu.mutation.ClinicAccountIDCleared() {
		_spec.ClearField(clinic.FieldClinicAccountID, field.TypeInt)
	}
	if value, ok := cu.mutation.ClinicNameOldSystem(); ok {
		_spec.SetField(clinic.FieldClinicNameOldSystem, field.TypeString, value)
	}
	if cu.mutation.ClinicNameOldSystemCleared() {
		_spec.ClearField(clinic.FieldClinicNameOldSystem, field.TypeString)
	}
	if value, ok := cu.mutation.ClinicSignupTime(); ok {
		_spec.SetField(clinic.FieldClinicSignupTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.ClinicUpdatedTime(); ok {
		_spec.SetField(clinic.FieldClinicUpdatedTime, field.TypeTime, value)
	}
	if cu.mutation.ClinicUpdatedTimeCleared() {
		_spec.ClearField(clinic.FieldClinicUpdatedTime, field.TypeTime)
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clinic.UserTable,
			Columns: []string{clinic.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clinic.UserTable,
			Columns: []string{clinic.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClinicContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicContactsTable,
			Columns: []string{clinic.ClinicContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedClinicContactsIDs(); len(nodes) > 0 && !cu.mutation.ClinicContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicContactsTable,
			Columns: []string{clinic.ClinicContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClinicContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicContactsTable,
			Columns: []string{clinic.ClinicContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClinicAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicAddressesTable,
			Columns: []string{clinic.ClinicAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedClinicAddressesIDs(); len(nodes) > 0 && !cu.mutation.ClinicAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicAddressesTable,
			Columns: []string{clinic.ClinicAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClinicAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicAddressesTable,
			Columns: []string{clinic.ClinicAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.CustomersTable,
			Columns: clinic.CustomersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCustomersIDs(); len(nodes) > 0 && !cu.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.CustomersTable,
			Columns: clinic.CustomersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.CustomersTable,
			Columns: clinic.CustomersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClinicSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.ClinicSettingsTable,
			Columns: clinic.ClinicSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedClinicSettingsIDs(); len(nodes) > 0 && !cu.mutation.ClinicSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.ClinicSettingsTable,
			Columns: clinic.ClinicSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClinicSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.ClinicSettingsTable,
			Columns: clinic.ClinicSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClinicOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicOrdersTable,
			Columns: []string{clinic.ClinicOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedClinicOrdersIDs(); len(nodes) > 0 && !cu.mutation.ClinicOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicOrdersTable,
			Columns: []string{clinic.ClinicOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClinicOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicOrdersTable,
			Columns: []string{clinic.ClinicOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClinicPatientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.ClinicPatientsTable,
			Columns: clinic.ClinicPatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedClinicPatientsIDs(); len(nodes) > 0 && !cu.mutation.ClinicPatientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.ClinicPatientsTable,
			Columns: clinic.ClinicPatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClinicPatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.ClinicPatientsTable,
			Columns: clinic.ClinicPatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClinicBetaProgramParticipationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicBetaProgramParticipationsTable,
			Columns: []string{clinic.ClinicBetaProgramParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedClinicBetaProgramParticipationsIDs(); len(nodes) > 0 && !cu.mutation.ClinicBetaProgramParticipationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicBetaProgramParticipationsTable,
			Columns: []string{clinic.ClinicBetaProgramParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClinicBetaProgramParticipationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicBetaProgramParticipationsTable,
			Columns: []string{clinic.ClinicBetaProgramParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClinicCustomerSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerSettingsTable,
			Columns: []string{clinic.ClinicCustomerSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedClinicCustomerSettingsIDs(); len(nodes) > 0 && !cu.mutation.ClinicCustomerSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerSettingsTable,
			Columns: []string{clinic.ClinicCustomerSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClinicCustomerSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerSettingsTable,
			Columns: []string{clinic.ClinicCustomerSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClinicCustomerAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerAddressesTable,
			Columns: []string{clinic.ClinicCustomerAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedClinicCustomerAddressesIDs(); len(nodes) > 0 && !cu.mutation.ClinicCustomerAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerAddressesTable,
			Columns: []string{clinic.ClinicCustomerAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClinicCustomerAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerAddressesTable,
			Columns: []string{clinic.ClinicCustomerAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClinicCustomerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerContactsTable,
			Columns: []string{clinic.ClinicCustomerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedClinicCustomerContactsIDs(); len(nodes) > 0 && !cu.mutation.ClinicCustomerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerContactsTable,
			Columns: []string{clinic.ClinicCustomerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClinicCustomerContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerContactsTable,
			Columns: []string{clinic.ClinicCustomerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clinic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ClinicUpdateOne is the builder for updating a single Clinic entity.
type ClinicUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClinicMutation
}

// SetClinicName sets the "clinic_name" field.
func (cuo *ClinicUpdateOne) SetClinicName(s string) *ClinicUpdateOne {
	cuo.mutation.SetClinicName(s)
	return cuo
}

// SetNillableClinicName sets the "clinic_name" field if the given value is not nil.
func (cuo *ClinicUpdateOne) SetNillableClinicName(s *string) *ClinicUpdateOne {
	if s != nil {
		cuo.SetClinicName(*s)
	}
	return cuo
}

// SetUserID sets the "user_id" field.
func (cuo *ClinicUpdateOne) SetUserID(i int) *ClinicUpdateOne {
	cuo.mutation.SetUserID(i)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *ClinicUpdateOne) SetNillableUserID(i *int) *ClinicUpdateOne {
	if i != nil {
		cuo.SetUserID(*i)
	}
	return cuo
}

// ClearUserID clears the value of the "user_id" field.
func (cuo *ClinicUpdateOne) ClearUserID() *ClinicUpdateOne {
	cuo.mutation.ClearUserID()
	return cuo
}

// SetIsActive sets the "is_active" field.
func (cuo *ClinicUpdateOne) SetIsActive(b bool) *ClinicUpdateOne {
	cuo.mutation.SetIsActive(b)
	return cuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (cuo *ClinicUpdateOne) SetNillableIsActive(b *bool) *ClinicUpdateOne {
	if b != nil {
		cuo.SetIsActive(*b)
	}
	return cuo
}

// SetClinicAccountID sets the "clinic_account_id" field.
func (cuo *ClinicUpdateOne) SetClinicAccountID(i int) *ClinicUpdateOne {
	cuo.mutation.ResetClinicAccountID()
	cuo.mutation.SetClinicAccountID(i)
	return cuo
}

// SetNillableClinicAccountID sets the "clinic_account_id" field if the given value is not nil.
func (cuo *ClinicUpdateOne) SetNillableClinicAccountID(i *int) *ClinicUpdateOne {
	if i != nil {
		cuo.SetClinicAccountID(*i)
	}
	return cuo
}

// AddClinicAccountID adds i to the "clinic_account_id" field.
func (cuo *ClinicUpdateOne) AddClinicAccountID(i int) *ClinicUpdateOne {
	cuo.mutation.AddClinicAccountID(i)
	return cuo
}

// ClearClinicAccountID clears the value of the "clinic_account_id" field.
func (cuo *ClinicUpdateOne) ClearClinicAccountID() *ClinicUpdateOne {
	cuo.mutation.ClearClinicAccountID()
	return cuo
}

// SetClinicNameOldSystem sets the "clinic_name_old_system" field.
func (cuo *ClinicUpdateOne) SetClinicNameOldSystem(s string) *ClinicUpdateOne {
	cuo.mutation.SetClinicNameOldSystem(s)
	return cuo
}

// SetNillableClinicNameOldSystem sets the "clinic_name_old_system" field if the given value is not nil.
func (cuo *ClinicUpdateOne) SetNillableClinicNameOldSystem(s *string) *ClinicUpdateOne {
	if s != nil {
		cuo.SetClinicNameOldSystem(*s)
	}
	return cuo
}

// ClearClinicNameOldSystem clears the value of the "clinic_name_old_system" field.
func (cuo *ClinicUpdateOne) ClearClinicNameOldSystem() *ClinicUpdateOne {
	cuo.mutation.ClearClinicNameOldSystem()
	return cuo
}

// SetClinicSignupTime sets the "clinic_signup_time" field.
func (cuo *ClinicUpdateOne) SetClinicSignupTime(t time.Time) *ClinicUpdateOne {
	cuo.mutation.SetClinicSignupTime(t)
	return cuo
}

// SetNillableClinicSignupTime sets the "clinic_signup_time" field if the given value is not nil.
func (cuo *ClinicUpdateOne) SetNillableClinicSignupTime(t *time.Time) *ClinicUpdateOne {
	if t != nil {
		cuo.SetClinicSignupTime(*t)
	}
	return cuo
}

// SetClinicUpdatedTime sets the "clinic_updated_time" field.
func (cuo *ClinicUpdateOne) SetClinicUpdatedTime(t time.Time) *ClinicUpdateOne {
	cuo.mutation.SetClinicUpdatedTime(t)
	return cuo
}

// ClearClinicUpdatedTime clears the value of the "clinic_updated_time" field.
func (cuo *ClinicUpdateOne) ClearClinicUpdatedTime() *ClinicUpdateOne {
	cuo.mutation.ClearClinicUpdatedTime()
	return cuo
}

// SetUser sets the "user" edge to the User entity.
func (cuo *ClinicUpdateOne) SetUser(u *User) *ClinicUpdateOne {
	return cuo.SetUserID(u.ID)
}

// AddClinicContactIDs adds the "clinic_contacts" edge to the Contact entity by IDs.
func (cuo *ClinicUpdateOne) AddClinicContactIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.AddClinicContactIDs(ids...)
	return cuo
}

// AddClinicContacts adds the "clinic_contacts" edges to the Contact entity.
func (cuo *ClinicUpdateOne) AddClinicContacts(c ...*Contact) *ClinicUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddClinicContactIDs(ids...)
}

// AddClinicAddressIDs adds the "clinic_addresses" edge to the Address entity by IDs.
func (cuo *ClinicUpdateOne) AddClinicAddressIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.AddClinicAddressIDs(ids...)
	return cuo
}

// AddClinicAddresses adds the "clinic_addresses" edges to the Address entity.
func (cuo *ClinicUpdateOne) AddClinicAddresses(a ...*Address) *ClinicUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddClinicAddressIDs(ids...)
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (cuo *ClinicUpdateOne) AddCustomerIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.AddCustomerIDs(ids...)
	return cuo
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (cuo *ClinicUpdateOne) AddCustomers(c ...*Customer) *ClinicUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCustomerIDs(ids...)
}

// AddClinicSettingIDs adds the "clinic_settings" edge to the Setting entity by IDs.
func (cuo *ClinicUpdateOne) AddClinicSettingIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.AddClinicSettingIDs(ids...)
	return cuo
}

// AddClinicSettings adds the "clinic_settings" edges to the Setting entity.
func (cuo *ClinicUpdateOne) AddClinicSettings(s ...*Setting) *ClinicUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddClinicSettingIDs(ids...)
}

// AddClinicOrderIDs adds the "clinic_orders" edge to the OrderInfo entity by IDs.
func (cuo *ClinicUpdateOne) AddClinicOrderIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.AddClinicOrderIDs(ids...)
	return cuo
}

// AddClinicOrders adds the "clinic_orders" edges to the OrderInfo entity.
func (cuo *ClinicUpdateOne) AddClinicOrders(o ...*OrderInfo) *ClinicUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.AddClinicOrderIDs(ids...)
}

// AddClinicPatientIDs adds the "clinic_patients" edge to the Patient entity by IDs.
func (cuo *ClinicUpdateOne) AddClinicPatientIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.AddClinicPatientIDs(ids...)
	return cuo
}

// AddClinicPatients adds the "clinic_patients" edges to the Patient entity.
func (cuo *ClinicUpdateOne) AddClinicPatients(p ...*Patient) *ClinicUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddClinicPatientIDs(ids...)
}

// AddClinicBetaProgramParticipationIDs adds the "clinic_beta_program_participations" edge to the BetaProgramParticipation entity by IDs.
func (cuo *ClinicUpdateOne) AddClinicBetaProgramParticipationIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.AddClinicBetaProgramParticipationIDs(ids...)
	return cuo
}

// AddClinicBetaProgramParticipations adds the "clinic_beta_program_participations" edges to the BetaProgramParticipation entity.
func (cuo *ClinicUpdateOne) AddClinicBetaProgramParticipations(b ...*BetaProgramParticipation) *ClinicUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.AddClinicBetaProgramParticipationIDs(ids...)
}

// AddClinicCustomerSettingIDs adds the "clinic_customer_settings" edge to the CustomerSettingOnClinics entity by IDs.
func (cuo *ClinicUpdateOne) AddClinicCustomerSettingIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.AddClinicCustomerSettingIDs(ids...)
	return cuo
}

// AddClinicCustomerSettings adds the "clinic_customer_settings" edges to the CustomerSettingOnClinics entity.
func (cuo *ClinicUpdateOne) AddClinicCustomerSettings(c ...*CustomerSettingOnClinics) *ClinicUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddClinicCustomerSettingIDs(ids...)
}

// AddClinicCustomerAddressIDs adds the "clinic_customer_addresses" edge to the CustomerAddressOnClinics entity by IDs.
func (cuo *ClinicUpdateOne) AddClinicCustomerAddressIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.AddClinicCustomerAddressIDs(ids...)
	return cuo
}

// AddClinicCustomerAddresses adds the "clinic_customer_addresses" edges to the CustomerAddressOnClinics entity.
func (cuo *ClinicUpdateOne) AddClinicCustomerAddresses(c ...*CustomerAddressOnClinics) *ClinicUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddClinicCustomerAddressIDs(ids...)
}

// AddClinicCustomerContactIDs adds the "clinic_customer_contacts" edge to the CustomerContactOnClinics entity by IDs.
func (cuo *ClinicUpdateOne) AddClinicCustomerContactIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.AddClinicCustomerContactIDs(ids...)
	return cuo
}

// AddClinicCustomerContacts adds the "clinic_customer_contacts" edges to the CustomerContactOnClinics entity.
func (cuo *ClinicUpdateOne) AddClinicCustomerContacts(c ...*CustomerContactOnClinics) *ClinicUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddClinicCustomerContactIDs(ids...)
}

// Mutation returns the ClinicMutation object of the builder.
func (cuo *ClinicUpdateOne) Mutation() *ClinicMutation {
	return cuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cuo *ClinicUpdateOne) ClearUser() *ClinicUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// ClearClinicContacts clears all "clinic_contacts" edges to the Contact entity.
func (cuo *ClinicUpdateOne) ClearClinicContacts() *ClinicUpdateOne {
	cuo.mutation.ClearClinicContacts()
	return cuo
}

// RemoveClinicContactIDs removes the "clinic_contacts" edge to Contact entities by IDs.
func (cuo *ClinicUpdateOne) RemoveClinicContactIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.RemoveClinicContactIDs(ids...)
	return cuo
}

// RemoveClinicContacts removes "clinic_contacts" edges to Contact entities.
func (cuo *ClinicUpdateOne) RemoveClinicContacts(c ...*Contact) *ClinicUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveClinicContactIDs(ids...)
}

// ClearClinicAddresses clears all "clinic_addresses" edges to the Address entity.
func (cuo *ClinicUpdateOne) ClearClinicAddresses() *ClinicUpdateOne {
	cuo.mutation.ClearClinicAddresses()
	return cuo
}

// RemoveClinicAddressIDs removes the "clinic_addresses" edge to Address entities by IDs.
func (cuo *ClinicUpdateOne) RemoveClinicAddressIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.RemoveClinicAddressIDs(ids...)
	return cuo
}

// RemoveClinicAddresses removes "clinic_addresses" edges to Address entities.
func (cuo *ClinicUpdateOne) RemoveClinicAddresses(a ...*Address) *ClinicUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveClinicAddressIDs(ids...)
}

// ClearCustomers clears all "customers" edges to the Customer entity.
func (cuo *ClinicUpdateOne) ClearCustomers() *ClinicUpdateOne {
	cuo.mutation.ClearCustomers()
	return cuo
}

// RemoveCustomerIDs removes the "customers" edge to Customer entities by IDs.
func (cuo *ClinicUpdateOne) RemoveCustomerIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.RemoveCustomerIDs(ids...)
	return cuo
}

// RemoveCustomers removes "customers" edges to Customer entities.
func (cuo *ClinicUpdateOne) RemoveCustomers(c ...*Customer) *ClinicUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCustomerIDs(ids...)
}

// ClearClinicSettings clears all "clinic_settings" edges to the Setting entity.
func (cuo *ClinicUpdateOne) ClearClinicSettings() *ClinicUpdateOne {
	cuo.mutation.ClearClinicSettings()
	return cuo
}

// RemoveClinicSettingIDs removes the "clinic_settings" edge to Setting entities by IDs.
func (cuo *ClinicUpdateOne) RemoveClinicSettingIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.RemoveClinicSettingIDs(ids...)
	return cuo
}

// RemoveClinicSettings removes "clinic_settings" edges to Setting entities.
func (cuo *ClinicUpdateOne) RemoveClinicSettings(s ...*Setting) *ClinicUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveClinicSettingIDs(ids...)
}

// ClearClinicOrders clears all "clinic_orders" edges to the OrderInfo entity.
func (cuo *ClinicUpdateOne) ClearClinicOrders() *ClinicUpdateOne {
	cuo.mutation.ClearClinicOrders()
	return cuo
}

// RemoveClinicOrderIDs removes the "clinic_orders" edge to OrderInfo entities by IDs.
func (cuo *ClinicUpdateOne) RemoveClinicOrderIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.RemoveClinicOrderIDs(ids...)
	return cuo
}

// RemoveClinicOrders removes "clinic_orders" edges to OrderInfo entities.
func (cuo *ClinicUpdateOne) RemoveClinicOrders(o ...*OrderInfo) *ClinicUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.RemoveClinicOrderIDs(ids...)
}

// ClearClinicPatients clears all "clinic_patients" edges to the Patient entity.
func (cuo *ClinicUpdateOne) ClearClinicPatients() *ClinicUpdateOne {
	cuo.mutation.ClearClinicPatients()
	return cuo
}

// RemoveClinicPatientIDs removes the "clinic_patients" edge to Patient entities by IDs.
func (cuo *ClinicUpdateOne) RemoveClinicPatientIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.RemoveClinicPatientIDs(ids...)
	return cuo
}

// RemoveClinicPatients removes "clinic_patients" edges to Patient entities.
func (cuo *ClinicUpdateOne) RemoveClinicPatients(p ...*Patient) *ClinicUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveClinicPatientIDs(ids...)
}

// ClearClinicBetaProgramParticipations clears all "clinic_beta_program_participations" edges to the BetaProgramParticipation entity.
func (cuo *ClinicUpdateOne) ClearClinicBetaProgramParticipations() *ClinicUpdateOne {
	cuo.mutation.ClearClinicBetaProgramParticipations()
	return cuo
}

// RemoveClinicBetaProgramParticipationIDs removes the "clinic_beta_program_participations" edge to BetaProgramParticipation entities by IDs.
func (cuo *ClinicUpdateOne) RemoveClinicBetaProgramParticipationIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.RemoveClinicBetaProgramParticipationIDs(ids...)
	return cuo
}

// RemoveClinicBetaProgramParticipations removes "clinic_beta_program_participations" edges to BetaProgramParticipation entities.
func (cuo *ClinicUpdateOne) RemoveClinicBetaProgramParticipations(b ...*BetaProgramParticipation) *ClinicUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.RemoveClinicBetaProgramParticipationIDs(ids...)
}

// ClearClinicCustomerSettings clears all "clinic_customer_settings" edges to the CustomerSettingOnClinics entity.
func (cuo *ClinicUpdateOne) ClearClinicCustomerSettings() *ClinicUpdateOne {
	cuo.mutation.ClearClinicCustomerSettings()
	return cuo
}

// RemoveClinicCustomerSettingIDs removes the "clinic_customer_settings" edge to CustomerSettingOnClinics entities by IDs.
func (cuo *ClinicUpdateOne) RemoveClinicCustomerSettingIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.RemoveClinicCustomerSettingIDs(ids...)
	return cuo
}

// RemoveClinicCustomerSettings removes "clinic_customer_settings" edges to CustomerSettingOnClinics entities.
func (cuo *ClinicUpdateOne) RemoveClinicCustomerSettings(c ...*CustomerSettingOnClinics) *ClinicUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveClinicCustomerSettingIDs(ids...)
}

// ClearClinicCustomerAddresses clears all "clinic_customer_addresses" edges to the CustomerAddressOnClinics entity.
func (cuo *ClinicUpdateOne) ClearClinicCustomerAddresses() *ClinicUpdateOne {
	cuo.mutation.ClearClinicCustomerAddresses()
	return cuo
}

// RemoveClinicCustomerAddressIDs removes the "clinic_customer_addresses" edge to CustomerAddressOnClinics entities by IDs.
func (cuo *ClinicUpdateOne) RemoveClinicCustomerAddressIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.RemoveClinicCustomerAddressIDs(ids...)
	return cuo
}

// RemoveClinicCustomerAddresses removes "clinic_customer_addresses" edges to CustomerAddressOnClinics entities.
func (cuo *ClinicUpdateOne) RemoveClinicCustomerAddresses(c ...*CustomerAddressOnClinics) *ClinicUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveClinicCustomerAddressIDs(ids...)
}

// ClearClinicCustomerContacts clears all "clinic_customer_contacts" edges to the CustomerContactOnClinics entity.
func (cuo *ClinicUpdateOne) ClearClinicCustomerContacts() *ClinicUpdateOne {
	cuo.mutation.ClearClinicCustomerContacts()
	return cuo
}

// RemoveClinicCustomerContactIDs removes the "clinic_customer_contacts" edge to CustomerContactOnClinics entities by IDs.
func (cuo *ClinicUpdateOne) RemoveClinicCustomerContactIDs(ids ...int) *ClinicUpdateOne {
	cuo.mutation.RemoveClinicCustomerContactIDs(ids...)
	return cuo
}

// RemoveClinicCustomerContacts removes "clinic_customer_contacts" edges to CustomerContactOnClinics entities.
func (cuo *ClinicUpdateOne) RemoveClinicCustomerContacts(c ...*CustomerContactOnClinics) *ClinicUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveClinicCustomerContactIDs(ids...)
}

// Where appends a list predicates to the ClinicUpdate builder.
func (cuo *ClinicUpdateOne) Where(ps ...predicate.Clinic) *ClinicUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClinicUpdateOne) Select(field string, fields ...string) *ClinicUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Clinic entity.
func (cuo *ClinicUpdateOne) Save(ctx context.Context) (*Clinic, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClinicUpdateOne) SaveX(ctx context.Context) *Clinic {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClinicUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClinicUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ClinicUpdateOne) defaults() {
	if _, ok := cuo.mutation.ClinicUpdatedTime(); !ok && !cuo.mutation.ClinicUpdatedTimeCleared() {
		v := clinic.UpdateDefaultClinicUpdatedTime()
		cuo.mutation.SetClinicUpdatedTime(v)
	}
}

func (cuo *ClinicUpdateOne) sqlSave(ctx context.Context) (_node *Clinic, err error) {
	_spec := sqlgraph.NewUpdateSpec(clinic.Table, clinic.Columns, sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Clinic.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clinic.FieldID)
		for _, f := range fields {
			if !clinic.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != clinic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.ClinicName(); ok {
		_spec.SetField(clinic.FieldClinicName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.IsActive(); ok {
		_spec.SetField(clinic.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.ClinicAccountID(); ok {
		_spec.SetField(clinic.FieldClinicAccountID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedClinicAccountID(); ok {
		_spec.AddField(clinic.FieldClinicAccountID, field.TypeInt, value)
	}
	if cuo.mutation.ClinicAccountIDCleared() {
		_spec.ClearField(clinic.FieldClinicAccountID, field.TypeInt)
	}
	if value, ok := cuo.mutation.ClinicNameOldSystem(); ok {
		_spec.SetField(clinic.FieldClinicNameOldSystem, field.TypeString, value)
	}
	if cuo.mutation.ClinicNameOldSystemCleared() {
		_spec.ClearField(clinic.FieldClinicNameOldSystem, field.TypeString)
	}
	if value, ok := cuo.mutation.ClinicSignupTime(); ok {
		_spec.SetField(clinic.FieldClinicSignupTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.ClinicUpdatedTime(); ok {
		_spec.SetField(clinic.FieldClinicUpdatedTime, field.TypeTime, value)
	}
	if cuo.mutation.ClinicUpdatedTimeCleared() {
		_spec.ClearField(clinic.FieldClinicUpdatedTime, field.TypeTime)
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clinic.UserTable,
			Columns: []string{clinic.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clinic.UserTable,
			Columns: []string{clinic.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClinicContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicContactsTable,
			Columns: []string{clinic.ClinicContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedClinicContactsIDs(); len(nodes) > 0 && !cuo.mutation.ClinicContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicContactsTable,
			Columns: []string{clinic.ClinicContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClinicContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicContactsTable,
			Columns: []string{clinic.ClinicContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClinicAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicAddressesTable,
			Columns: []string{clinic.ClinicAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedClinicAddressesIDs(); len(nodes) > 0 && !cuo.mutation.ClinicAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicAddressesTable,
			Columns: []string{clinic.ClinicAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClinicAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicAddressesTable,
			Columns: []string{clinic.ClinicAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.CustomersTable,
			Columns: clinic.CustomersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCustomersIDs(); len(nodes) > 0 && !cuo.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.CustomersTable,
			Columns: clinic.CustomersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.CustomersTable,
			Columns: clinic.CustomersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClinicSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.ClinicSettingsTable,
			Columns: clinic.ClinicSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedClinicSettingsIDs(); len(nodes) > 0 && !cuo.mutation.ClinicSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.ClinicSettingsTable,
			Columns: clinic.ClinicSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClinicSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.ClinicSettingsTable,
			Columns: clinic.ClinicSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClinicOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicOrdersTable,
			Columns: []string{clinic.ClinicOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedClinicOrdersIDs(); len(nodes) > 0 && !cuo.mutation.ClinicOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicOrdersTable,
			Columns: []string{clinic.ClinicOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClinicOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicOrdersTable,
			Columns: []string{clinic.ClinicOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClinicPatientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.ClinicPatientsTable,
			Columns: clinic.ClinicPatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedClinicPatientsIDs(); len(nodes) > 0 && !cuo.mutation.ClinicPatientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.ClinicPatientsTable,
			Columns: clinic.ClinicPatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClinicPatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clinic.ClinicPatientsTable,
			Columns: clinic.ClinicPatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClinicBetaProgramParticipationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicBetaProgramParticipationsTable,
			Columns: []string{clinic.ClinicBetaProgramParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedClinicBetaProgramParticipationsIDs(); len(nodes) > 0 && !cuo.mutation.ClinicBetaProgramParticipationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicBetaProgramParticipationsTable,
			Columns: []string{clinic.ClinicBetaProgramParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClinicBetaProgramParticipationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicBetaProgramParticipationsTable,
			Columns: []string{clinic.ClinicBetaProgramParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClinicCustomerSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerSettingsTable,
			Columns: []string{clinic.ClinicCustomerSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedClinicCustomerSettingsIDs(); len(nodes) > 0 && !cuo.mutation.ClinicCustomerSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerSettingsTable,
			Columns: []string{clinic.ClinicCustomerSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClinicCustomerSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerSettingsTable,
			Columns: []string{clinic.ClinicCustomerSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClinicCustomerAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerAddressesTable,
			Columns: []string{clinic.ClinicCustomerAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedClinicCustomerAddressesIDs(); len(nodes) > 0 && !cuo.mutation.ClinicCustomerAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerAddressesTable,
			Columns: []string{clinic.ClinicCustomerAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClinicCustomerAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerAddressesTable,
			Columns: []string{clinic.ClinicCustomerAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClinicCustomerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerContactsTable,
			Columns: []string{clinic.ClinicCustomerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedClinicCustomerContactsIDs(); len(nodes) > 0 && !cuo.mutation.ClinicCustomerContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerContactsTable,
			Columns: []string{clinic.ClinicCustomerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClinicCustomerContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.ClinicCustomerContactsTable,
			Columns: []string{clinic.ClinicCustomerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Clinic{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clinic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
