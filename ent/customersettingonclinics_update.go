// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/clinic"
	"coresamples/ent/customer"
	"coresamples/ent/customersettingonclinics"
	"coresamples/ent/predicate"
	"coresamples/ent/setting"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerSettingOnClinicsUpdate is the builder for updating CustomerSettingOnClinics entities.
type CustomerSettingOnClinicsUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerSettingOnClinicsMutation
}

// Where appends a list predicates to the CustomerSettingOnClinicsUpdate builder.
func (csocu *CustomerSettingOnClinicsUpdate) Where(ps ...predicate.CustomerSettingOnClinics) *CustomerSettingOnClinicsUpdate {
	csocu.mutation.Where(ps...)
	return csocu
}

// SetCustomerID sets the "customer_id" field.
func (csocu *CustomerSettingOnClinicsUpdate) SetCustomerID(i int) *CustomerSettingOnClinicsUpdate {
	csocu.mutation.SetCustomerID(i)
	return csocu
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (csocu *CustomerSettingOnClinicsUpdate) SetNillableCustomerID(i *int) *CustomerSettingOnClinicsUpdate {
	if i != nil {
		csocu.SetCustomerID(*i)
	}
	return csocu
}

// SetClinicID sets the "clinic_id" field.
func (csocu *CustomerSettingOnClinicsUpdate) SetClinicID(i int) *CustomerSettingOnClinicsUpdate {
	csocu.mutation.SetClinicID(i)
	return csocu
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (csocu *CustomerSettingOnClinicsUpdate) SetNillableClinicID(i *int) *CustomerSettingOnClinicsUpdate {
	if i != nil {
		csocu.SetClinicID(*i)
	}
	return csocu
}

// SetSettingID sets the "setting_id" field.
func (csocu *CustomerSettingOnClinicsUpdate) SetSettingID(i int) *CustomerSettingOnClinicsUpdate {
	csocu.mutation.SetSettingID(i)
	return csocu
}

// SetNillableSettingID sets the "setting_id" field if the given value is not nil.
func (csocu *CustomerSettingOnClinicsUpdate) SetNillableSettingID(i *int) *CustomerSettingOnClinicsUpdate {
	if i != nil {
		csocu.SetSettingID(*i)
	}
	return csocu
}

// SetSettingName sets the "setting_name" field.
func (csocu *CustomerSettingOnClinicsUpdate) SetSettingName(s string) *CustomerSettingOnClinicsUpdate {
	csocu.mutation.SetSettingName(s)
	return csocu
}

// SetNillableSettingName sets the "setting_name" field if the given value is not nil.
func (csocu *CustomerSettingOnClinicsUpdate) SetNillableSettingName(s *string) *CustomerSettingOnClinicsUpdate {
	if s != nil {
		csocu.SetSettingName(*s)
	}
	return csocu
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (csocu *CustomerSettingOnClinicsUpdate) SetCustomer(c *Customer) *CustomerSettingOnClinicsUpdate {
	return csocu.SetCustomerID(c.ID)
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (csocu *CustomerSettingOnClinicsUpdate) SetClinic(c *Clinic) *CustomerSettingOnClinicsUpdate {
	return csocu.SetClinicID(c.ID)
}

// SetSetting sets the "setting" edge to the Setting entity.
func (csocu *CustomerSettingOnClinicsUpdate) SetSetting(s *Setting) *CustomerSettingOnClinicsUpdate {
	return csocu.SetSettingID(s.ID)
}

// Mutation returns the CustomerSettingOnClinicsMutation object of the builder.
func (csocu *CustomerSettingOnClinicsUpdate) Mutation() *CustomerSettingOnClinicsMutation {
	return csocu.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (csocu *CustomerSettingOnClinicsUpdate) ClearCustomer() *CustomerSettingOnClinicsUpdate {
	csocu.mutation.ClearCustomer()
	return csocu
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (csocu *CustomerSettingOnClinicsUpdate) ClearClinic() *CustomerSettingOnClinicsUpdate {
	csocu.mutation.ClearClinic()
	return csocu
}

// ClearSetting clears the "setting" edge to the Setting entity.
func (csocu *CustomerSettingOnClinicsUpdate) ClearSetting() *CustomerSettingOnClinicsUpdate {
	csocu.mutation.ClearSetting()
	return csocu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csocu *CustomerSettingOnClinicsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csocu.sqlSave, csocu.mutation, csocu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csocu *CustomerSettingOnClinicsUpdate) SaveX(ctx context.Context) int {
	affected, err := csocu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csocu *CustomerSettingOnClinicsUpdate) Exec(ctx context.Context) error {
	_, err := csocu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csocu *CustomerSettingOnClinicsUpdate) ExecX(ctx context.Context) {
	if err := csocu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csocu *CustomerSettingOnClinicsUpdate) check() error {
	if _, ok := csocu.mutation.CustomerID(); csocu.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerSettingOnClinics.customer"`)
	}
	if _, ok := csocu.mutation.ClinicID(); csocu.mutation.ClinicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerSettingOnClinics.clinic"`)
	}
	if _, ok := csocu.mutation.SettingID(); csocu.mutation.SettingCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerSettingOnClinics.setting"`)
	}
	return nil
}

func (csocu *CustomerSettingOnClinicsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csocu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customersettingonclinics.Table, customersettingonclinics.Columns, sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt))
	if ps := csocu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csocu.mutation.SettingName(); ok {
		_spec.SetField(customersettingonclinics.FieldSettingName, field.TypeString, value)
	}
	if csocu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customersettingonclinics.CustomerTable,
			Columns: []string{customersettingonclinics.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csocu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customersettingonclinics.CustomerTable,
			Columns: []string{customersettingonclinics.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csocu.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customersettingonclinics.ClinicTable,
			Columns: []string{customersettingonclinics.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csocu.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customersettingonclinics.ClinicTable,
			Columns: []string{customersettingonclinics.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csocu.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customersettingonclinics.SettingTable,
			Columns: []string{customersettingonclinics.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csocu.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customersettingonclinics.SettingTable,
			Columns: []string{customersettingonclinics.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csocu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customersettingonclinics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csocu.mutation.done = true
	return n, nil
}

// CustomerSettingOnClinicsUpdateOne is the builder for updating a single CustomerSettingOnClinics entity.
type CustomerSettingOnClinicsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerSettingOnClinicsMutation
}

// SetCustomerID sets the "customer_id" field.
func (csocuo *CustomerSettingOnClinicsUpdateOne) SetCustomerID(i int) *CustomerSettingOnClinicsUpdateOne {
	csocuo.mutation.SetCustomerID(i)
	return csocuo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (csocuo *CustomerSettingOnClinicsUpdateOne) SetNillableCustomerID(i *int) *CustomerSettingOnClinicsUpdateOne {
	if i != nil {
		csocuo.SetCustomerID(*i)
	}
	return csocuo
}

// SetClinicID sets the "clinic_id" field.
func (csocuo *CustomerSettingOnClinicsUpdateOne) SetClinicID(i int) *CustomerSettingOnClinicsUpdateOne {
	csocuo.mutation.SetClinicID(i)
	return csocuo
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (csocuo *CustomerSettingOnClinicsUpdateOne) SetNillableClinicID(i *int) *CustomerSettingOnClinicsUpdateOne {
	if i != nil {
		csocuo.SetClinicID(*i)
	}
	return csocuo
}

// SetSettingID sets the "setting_id" field.
func (csocuo *CustomerSettingOnClinicsUpdateOne) SetSettingID(i int) *CustomerSettingOnClinicsUpdateOne {
	csocuo.mutation.SetSettingID(i)
	return csocuo
}

// SetNillableSettingID sets the "setting_id" field if the given value is not nil.
func (csocuo *CustomerSettingOnClinicsUpdateOne) SetNillableSettingID(i *int) *CustomerSettingOnClinicsUpdateOne {
	if i != nil {
		csocuo.SetSettingID(*i)
	}
	return csocuo
}

// SetSettingName sets the "setting_name" field.
func (csocuo *CustomerSettingOnClinicsUpdateOne) SetSettingName(s string) *CustomerSettingOnClinicsUpdateOne {
	csocuo.mutation.SetSettingName(s)
	return csocuo
}

// SetNillableSettingName sets the "setting_name" field if the given value is not nil.
func (csocuo *CustomerSettingOnClinicsUpdateOne) SetNillableSettingName(s *string) *CustomerSettingOnClinicsUpdateOne {
	if s != nil {
		csocuo.SetSettingName(*s)
	}
	return csocuo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (csocuo *CustomerSettingOnClinicsUpdateOne) SetCustomer(c *Customer) *CustomerSettingOnClinicsUpdateOne {
	return csocuo.SetCustomerID(c.ID)
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (csocuo *CustomerSettingOnClinicsUpdateOne) SetClinic(c *Clinic) *CustomerSettingOnClinicsUpdateOne {
	return csocuo.SetClinicID(c.ID)
}

// SetSetting sets the "setting" edge to the Setting entity.
func (csocuo *CustomerSettingOnClinicsUpdateOne) SetSetting(s *Setting) *CustomerSettingOnClinicsUpdateOne {
	return csocuo.SetSettingID(s.ID)
}

// Mutation returns the CustomerSettingOnClinicsMutation object of the builder.
func (csocuo *CustomerSettingOnClinicsUpdateOne) Mutation() *CustomerSettingOnClinicsMutation {
	return csocuo.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (csocuo *CustomerSettingOnClinicsUpdateOne) ClearCustomer() *CustomerSettingOnClinicsUpdateOne {
	csocuo.mutation.ClearCustomer()
	return csocuo
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (csocuo *CustomerSettingOnClinicsUpdateOne) ClearClinic() *CustomerSettingOnClinicsUpdateOne {
	csocuo.mutation.ClearClinic()
	return csocuo
}

// ClearSetting clears the "setting" edge to the Setting entity.
func (csocuo *CustomerSettingOnClinicsUpdateOne) ClearSetting() *CustomerSettingOnClinicsUpdateOne {
	csocuo.mutation.ClearSetting()
	return csocuo
}

// Where appends a list predicates to the CustomerSettingOnClinicsUpdate builder.
func (csocuo *CustomerSettingOnClinicsUpdateOne) Where(ps ...predicate.CustomerSettingOnClinics) *CustomerSettingOnClinicsUpdateOne {
	csocuo.mutation.Where(ps...)
	return csocuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csocuo *CustomerSettingOnClinicsUpdateOne) Select(field string, fields ...string) *CustomerSettingOnClinicsUpdateOne {
	csocuo.fields = append([]string{field}, fields...)
	return csocuo
}

// Save executes the query and returns the updated CustomerSettingOnClinics entity.
func (csocuo *CustomerSettingOnClinicsUpdateOne) Save(ctx context.Context) (*CustomerSettingOnClinics, error) {
	return withHooks(ctx, csocuo.sqlSave, csocuo.mutation, csocuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csocuo *CustomerSettingOnClinicsUpdateOne) SaveX(ctx context.Context) *CustomerSettingOnClinics {
	node, err := csocuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csocuo *CustomerSettingOnClinicsUpdateOne) Exec(ctx context.Context) error {
	_, err := csocuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csocuo *CustomerSettingOnClinicsUpdateOne) ExecX(ctx context.Context) {
	if err := csocuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csocuo *CustomerSettingOnClinicsUpdateOne) check() error {
	if _, ok := csocuo.mutation.CustomerID(); csocuo.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerSettingOnClinics.customer"`)
	}
	if _, ok := csocuo.mutation.ClinicID(); csocuo.mutation.ClinicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerSettingOnClinics.clinic"`)
	}
	if _, ok := csocuo.mutation.SettingID(); csocuo.mutation.SettingCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerSettingOnClinics.setting"`)
	}
	return nil
}

func (csocuo *CustomerSettingOnClinicsUpdateOne) sqlSave(ctx context.Context) (_node *CustomerSettingOnClinics, err error) {
	if err := csocuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customersettingonclinics.Table, customersettingonclinics.Columns, sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt))
	id, ok := csocuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CustomerSettingOnClinics.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csocuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customersettingonclinics.FieldID)
		for _, f := range fields {
			if !customersettingonclinics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customersettingonclinics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csocuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csocuo.mutation.SettingName(); ok {
		_spec.SetField(customersettingonclinics.FieldSettingName, field.TypeString, value)
	}
	if csocuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customersettingonclinics.CustomerTable,
			Columns: []string{customersettingonclinics.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csocuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customersettingonclinics.CustomerTable,
			Columns: []string{customersettingonclinics.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csocuo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customersettingonclinics.ClinicTable,
			Columns: []string{customersettingonclinics.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csocuo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customersettingonclinics.ClinicTable,
			Columns: []string{customersettingonclinics.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csocuo.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customersettingonclinics.SettingTable,
			Columns: []string{customersettingonclinics.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csocuo.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customersettingonclinics.SettingTable,
			Columns: []string{customersettingonclinics.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CustomerSettingOnClinics{config: csocuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csocuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customersettingonclinics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csocuo.mutation.done = true
	return _node, nil
}
