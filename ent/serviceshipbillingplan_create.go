// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/accountsubscription"
	"coresamples/ent/serviceship"
	"coresamples/ent/serviceshipbillingplan"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceshipBillingPlanCreate is the builder for creating a ServiceshipBillingPlan entity.
type ServiceshipBillingPlanCreate struct {
	config
	mutation *ServiceshipBillingPlanMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFee sets the "fee" field.
func (sbpc *ServiceshipBillingPlanCreate) SetFee(f float32) *ServiceshipBillingPlanCreate {
	sbpc.mutation.SetFee(f)
	return sbpc
}

// SetBillingCycle sets the "billing_cycle" field.
func (sbpc *ServiceshipBillingPlanCreate) SetBillingCycle(i int32) *ServiceshipBillingPlanCreate {
	sbpc.mutation.SetBillingCycle(i)
	return sbpc
}

// SetInterval sets the "interval" field.
func (sbpc *ServiceshipBillingPlanCreate) SetInterval(s serviceshipbillingplan.Interval) *ServiceshipBillingPlanCreate {
	sbpc.mutation.SetInterval(s)
	return sbpc
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (sbpc *ServiceshipBillingPlanCreate) SetNillableInterval(s *serviceshipbillingplan.Interval) *ServiceshipBillingPlanCreate {
	if s != nil {
		sbpc.SetInterval(*s)
	}
	return sbpc
}

// SetEffectiveTime sets the "effective_time" field.
func (sbpc *ServiceshipBillingPlanCreate) SetEffectiveTime(t time.Time) *ServiceshipBillingPlanCreate {
	sbpc.mutation.SetEffectiveTime(t)
	return sbpc
}

// AddAccountSubscriptionIDs adds the "account_subscription" edge to the AccountSubscription entity by IDs.
func (sbpc *ServiceshipBillingPlanCreate) AddAccountSubscriptionIDs(ids ...int) *ServiceshipBillingPlanCreate {
	sbpc.mutation.AddAccountSubscriptionIDs(ids...)
	return sbpc
}

// AddAccountSubscription adds the "account_subscription" edges to the AccountSubscription entity.
func (sbpc *ServiceshipBillingPlanCreate) AddAccountSubscription(a ...*AccountSubscription) *ServiceshipBillingPlanCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sbpc.AddAccountSubscriptionIDs(ids...)
}

// SetServiceshipID sets the "serviceship" edge to the Serviceship entity by ID.
func (sbpc *ServiceshipBillingPlanCreate) SetServiceshipID(id int) *ServiceshipBillingPlanCreate {
	sbpc.mutation.SetServiceshipID(id)
	return sbpc
}

// SetServiceship sets the "serviceship" edge to the Serviceship entity.
func (sbpc *ServiceshipBillingPlanCreate) SetServiceship(s *Serviceship) *ServiceshipBillingPlanCreate {
	return sbpc.SetServiceshipID(s.ID)
}

// Mutation returns the ServiceshipBillingPlanMutation object of the builder.
func (sbpc *ServiceshipBillingPlanCreate) Mutation() *ServiceshipBillingPlanMutation {
	return sbpc.mutation
}

// Save creates the ServiceshipBillingPlan in the database.
func (sbpc *ServiceshipBillingPlanCreate) Save(ctx context.Context) (*ServiceshipBillingPlan, error) {
	sbpc.defaults()
	return withHooks(ctx, sbpc.sqlSave, sbpc.mutation, sbpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sbpc *ServiceshipBillingPlanCreate) SaveX(ctx context.Context) *ServiceshipBillingPlan {
	v, err := sbpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sbpc *ServiceshipBillingPlanCreate) Exec(ctx context.Context) error {
	_, err := sbpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbpc *ServiceshipBillingPlanCreate) ExecX(ctx context.Context) {
	if err := sbpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sbpc *ServiceshipBillingPlanCreate) defaults() {
	if _, ok := sbpc.mutation.Interval(); !ok {
		v := serviceshipbillingplan.DefaultInterval
		sbpc.mutation.SetInterval(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbpc *ServiceshipBillingPlanCreate) check() error {
	if _, ok := sbpc.mutation.Fee(); !ok {
		return &ValidationError{Name: "fee", err: errors.New(`ent: missing required field "ServiceshipBillingPlan.fee"`)}
	}
	if _, ok := sbpc.mutation.BillingCycle(); !ok {
		return &ValidationError{Name: "billing_cycle", err: errors.New(`ent: missing required field "ServiceshipBillingPlan.billing_cycle"`)}
	}
	if v, ok := sbpc.mutation.BillingCycle(); ok {
		if err := serviceshipbillingplan.BillingCycleValidator(v); err != nil {
			return &ValidationError{Name: "billing_cycle", err: fmt.Errorf(`ent: validator failed for field "ServiceshipBillingPlan.billing_cycle": %w`, err)}
		}
	}
	if _, ok := sbpc.mutation.Interval(); !ok {
		return &ValidationError{Name: "interval", err: errors.New(`ent: missing required field "ServiceshipBillingPlan.interval"`)}
	}
	if v, ok := sbpc.mutation.Interval(); ok {
		if err := serviceshipbillingplan.IntervalValidator(v); err != nil {
			return &ValidationError{Name: "interval", err: fmt.Errorf(`ent: validator failed for field "ServiceshipBillingPlan.interval": %w`, err)}
		}
	}
	if _, ok := sbpc.mutation.EffectiveTime(); !ok {
		return &ValidationError{Name: "effective_time", err: errors.New(`ent: missing required field "ServiceshipBillingPlan.effective_time"`)}
	}
	if _, ok := sbpc.mutation.ServiceshipID(); !ok {
		return &ValidationError{Name: "serviceship", err: errors.New(`ent: missing required edge "ServiceshipBillingPlan.serviceship"`)}
	}
	return nil
}

func (sbpc *ServiceshipBillingPlanCreate) sqlSave(ctx context.Context) (*ServiceshipBillingPlan, error) {
	if err := sbpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sbpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sbpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sbpc.mutation.id = &_node.ID
	sbpc.mutation.done = true
	return _node, nil
}

func (sbpc *ServiceshipBillingPlanCreate) createSpec() (*ServiceshipBillingPlan, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceshipBillingPlan{config: sbpc.config}
		_spec = sqlgraph.NewCreateSpec(serviceshipbillingplan.Table, sqlgraph.NewFieldSpec(serviceshipbillingplan.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sbpc.conflict
	if value, ok := sbpc.mutation.Fee(); ok {
		_spec.SetField(serviceshipbillingplan.FieldFee, field.TypeFloat32, value)
		_node.Fee = value
	}
	if value, ok := sbpc.mutation.BillingCycle(); ok {
		_spec.SetField(serviceshipbillingplan.FieldBillingCycle, field.TypeInt32, value)
		_node.BillingCycle = value
	}
	if value, ok := sbpc.mutation.Interval(); ok {
		_spec.SetField(serviceshipbillingplan.FieldInterval, field.TypeEnum, value)
		_node.Interval = value
	}
	if value, ok := sbpc.mutation.EffectiveTime(); ok {
		_spec.SetField(serviceshipbillingplan.FieldEffectiveTime, field.TypeTime, value)
		_node.EffectiveTime = value
	}
	if nodes := sbpc.mutation.AccountSubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceshipbillingplan.AccountSubscriptionTable,
			Columns: []string{serviceshipbillingplan.AccountSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sbpc.mutation.ServiceshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceshipbillingplan.ServiceshipTable,
			Columns: []string{serviceshipbillingplan.ServiceshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.serviceship_serviceship_billing_plan = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ServiceshipBillingPlan.Create().
//		SetFee(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServiceshipBillingPlanUpsert) {
//			SetFee(v+v).
//		}).
//		Exec(ctx)
func (sbpc *ServiceshipBillingPlanCreate) OnConflict(opts ...sql.ConflictOption) *ServiceshipBillingPlanUpsertOne {
	sbpc.conflict = opts
	return &ServiceshipBillingPlanUpsertOne{
		create: sbpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ServiceshipBillingPlan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sbpc *ServiceshipBillingPlanCreate) OnConflictColumns(columns ...string) *ServiceshipBillingPlanUpsertOne {
	sbpc.conflict = append(sbpc.conflict, sql.ConflictColumns(columns...))
	return &ServiceshipBillingPlanUpsertOne{
		create: sbpc,
	}
}

type (
	// ServiceshipBillingPlanUpsertOne is the builder for "upsert"-ing
	//  one ServiceshipBillingPlan node.
	ServiceshipBillingPlanUpsertOne struct {
		create *ServiceshipBillingPlanCreate
	}

	// ServiceshipBillingPlanUpsert is the "OnConflict" setter.
	ServiceshipBillingPlanUpsert struct {
		*sql.UpdateSet
	}
)

// SetFee sets the "fee" field.
func (u *ServiceshipBillingPlanUpsert) SetFee(v float32) *ServiceshipBillingPlanUpsert {
	u.Set(serviceshipbillingplan.FieldFee, v)
	return u
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *ServiceshipBillingPlanUpsert) UpdateFee() *ServiceshipBillingPlanUpsert {
	u.SetExcluded(serviceshipbillingplan.FieldFee)
	return u
}

// AddFee adds v to the "fee" field.
func (u *ServiceshipBillingPlanUpsert) AddFee(v float32) *ServiceshipBillingPlanUpsert {
	u.Add(serviceshipbillingplan.FieldFee, v)
	return u
}

// SetBillingCycle sets the "billing_cycle" field.
func (u *ServiceshipBillingPlanUpsert) SetBillingCycle(v int32) *ServiceshipBillingPlanUpsert {
	u.Set(serviceshipbillingplan.FieldBillingCycle, v)
	return u
}

// UpdateBillingCycle sets the "billing_cycle" field to the value that was provided on create.
func (u *ServiceshipBillingPlanUpsert) UpdateBillingCycle() *ServiceshipBillingPlanUpsert {
	u.SetExcluded(serviceshipbillingplan.FieldBillingCycle)
	return u
}

// AddBillingCycle adds v to the "billing_cycle" field.
func (u *ServiceshipBillingPlanUpsert) AddBillingCycle(v int32) *ServiceshipBillingPlanUpsert {
	u.Add(serviceshipbillingplan.FieldBillingCycle, v)
	return u
}

// SetInterval sets the "interval" field.
func (u *ServiceshipBillingPlanUpsert) SetInterval(v serviceshipbillingplan.Interval) *ServiceshipBillingPlanUpsert {
	u.Set(serviceshipbillingplan.FieldInterval, v)
	return u
}

// UpdateInterval sets the "interval" field to the value that was provided on create.
func (u *ServiceshipBillingPlanUpsert) UpdateInterval() *ServiceshipBillingPlanUpsert {
	u.SetExcluded(serviceshipbillingplan.FieldInterval)
	return u
}

// SetEffectiveTime sets the "effective_time" field.
func (u *ServiceshipBillingPlanUpsert) SetEffectiveTime(v time.Time) *ServiceshipBillingPlanUpsert {
	u.Set(serviceshipbillingplan.FieldEffectiveTime, v)
	return u
}

// UpdateEffectiveTime sets the "effective_time" field to the value that was provided on create.
func (u *ServiceshipBillingPlanUpsert) UpdateEffectiveTime() *ServiceshipBillingPlanUpsert {
	u.SetExcluded(serviceshipbillingplan.FieldEffectiveTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ServiceshipBillingPlan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ServiceshipBillingPlanUpsertOne) UpdateNewValues() *ServiceshipBillingPlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ServiceshipBillingPlan.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ServiceshipBillingPlanUpsertOne) Ignore() *ServiceshipBillingPlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServiceshipBillingPlanUpsertOne) DoNothing() *ServiceshipBillingPlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServiceshipBillingPlanCreate.OnConflict
// documentation for more info.
func (u *ServiceshipBillingPlanUpsertOne) Update(set func(*ServiceshipBillingPlanUpsert)) *ServiceshipBillingPlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServiceshipBillingPlanUpsert{UpdateSet: update})
	}))
	return u
}

// SetFee sets the "fee" field.
func (u *ServiceshipBillingPlanUpsertOne) SetFee(v float32) *ServiceshipBillingPlanUpsertOne {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *ServiceshipBillingPlanUpsertOne) AddFee(v float32) *ServiceshipBillingPlanUpsertOne {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *ServiceshipBillingPlanUpsertOne) UpdateFee() *ServiceshipBillingPlanUpsertOne {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.UpdateFee()
	})
}

// SetBillingCycle sets the "billing_cycle" field.
func (u *ServiceshipBillingPlanUpsertOne) SetBillingCycle(v int32) *ServiceshipBillingPlanUpsertOne {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.SetBillingCycle(v)
	})
}

// AddBillingCycle adds v to the "billing_cycle" field.
func (u *ServiceshipBillingPlanUpsertOne) AddBillingCycle(v int32) *ServiceshipBillingPlanUpsertOne {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.AddBillingCycle(v)
	})
}

// UpdateBillingCycle sets the "billing_cycle" field to the value that was provided on create.
func (u *ServiceshipBillingPlanUpsertOne) UpdateBillingCycle() *ServiceshipBillingPlanUpsertOne {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.UpdateBillingCycle()
	})
}

// SetInterval sets the "interval" field.
func (u *ServiceshipBillingPlanUpsertOne) SetInterval(v serviceshipbillingplan.Interval) *ServiceshipBillingPlanUpsertOne {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.SetInterval(v)
	})
}

// UpdateInterval sets the "interval" field to the value that was provided on create.
func (u *ServiceshipBillingPlanUpsertOne) UpdateInterval() *ServiceshipBillingPlanUpsertOne {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.UpdateInterval()
	})
}

// SetEffectiveTime sets the "effective_time" field.
func (u *ServiceshipBillingPlanUpsertOne) SetEffectiveTime(v time.Time) *ServiceshipBillingPlanUpsertOne {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.SetEffectiveTime(v)
	})
}

// UpdateEffectiveTime sets the "effective_time" field to the value that was provided on create.
func (u *ServiceshipBillingPlanUpsertOne) UpdateEffectiveTime() *ServiceshipBillingPlanUpsertOne {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.UpdateEffectiveTime()
	})
}

// Exec executes the query.
func (u *ServiceshipBillingPlanUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ServiceshipBillingPlanCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServiceshipBillingPlanUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ServiceshipBillingPlanUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ServiceshipBillingPlanUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ServiceshipBillingPlanCreateBulk is the builder for creating many ServiceshipBillingPlan entities in bulk.
type ServiceshipBillingPlanCreateBulk struct {
	config
	err      error
	builders []*ServiceshipBillingPlanCreate
	conflict []sql.ConflictOption
}

// Save creates the ServiceshipBillingPlan entities in the database.
func (sbpcb *ServiceshipBillingPlanCreateBulk) Save(ctx context.Context) ([]*ServiceshipBillingPlan, error) {
	if sbpcb.err != nil {
		return nil, sbpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sbpcb.builders))
	nodes := make([]*ServiceshipBillingPlan, len(sbpcb.builders))
	mutators := make([]Mutator, len(sbpcb.builders))
	for i := range sbpcb.builders {
		func(i int, root context.Context) {
			builder := sbpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceshipBillingPlanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sbpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sbpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sbpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sbpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sbpcb *ServiceshipBillingPlanCreateBulk) SaveX(ctx context.Context) []*ServiceshipBillingPlan {
	v, err := sbpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sbpcb *ServiceshipBillingPlanCreateBulk) Exec(ctx context.Context) error {
	_, err := sbpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbpcb *ServiceshipBillingPlanCreateBulk) ExecX(ctx context.Context) {
	if err := sbpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ServiceshipBillingPlan.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServiceshipBillingPlanUpsert) {
//			SetFee(v+v).
//		}).
//		Exec(ctx)
func (sbpcb *ServiceshipBillingPlanCreateBulk) OnConflict(opts ...sql.ConflictOption) *ServiceshipBillingPlanUpsertBulk {
	sbpcb.conflict = opts
	return &ServiceshipBillingPlanUpsertBulk{
		create: sbpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ServiceshipBillingPlan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sbpcb *ServiceshipBillingPlanCreateBulk) OnConflictColumns(columns ...string) *ServiceshipBillingPlanUpsertBulk {
	sbpcb.conflict = append(sbpcb.conflict, sql.ConflictColumns(columns...))
	return &ServiceshipBillingPlanUpsertBulk{
		create: sbpcb,
	}
}

// ServiceshipBillingPlanUpsertBulk is the builder for "upsert"-ing
// a bulk of ServiceshipBillingPlan nodes.
type ServiceshipBillingPlanUpsertBulk struct {
	create *ServiceshipBillingPlanCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ServiceshipBillingPlan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ServiceshipBillingPlanUpsertBulk) UpdateNewValues() *ServiceshipBillingPlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ServiceshipBillingPlan.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ServiceshipBillingPlanUpsertBulk) Ignore() *ServiceshipBillingPlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServiceshipBillingPlanUpsertBulk) DoNothing() *ServiceshipBillingPlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServiceshipBillingPlanCreateBulk.OnConflict
// documentation for more info.
func (u *ServiceshipBillingPlanUpsertBulk) Update(set func(*ServiceshipBillingPlanUpsert)) *ServiceshipBillingPlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServiceshipBillingPlanUpsert{UpdateSet: update})
	}))
	return u
}

// SetFee sets the "fee" field.
func (u *ServiceshipBillingPlanUpsertBulk) SetFee(v float32) *ServiceshipBillingPlanUpsertBulk {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *ServiceshipBillingPlanUpsertBulk) AddFee(v float32) *ServiceshipBillingPlanUpsertBulk {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *ServiceshipBillingPlanUpsertBulk) UpdateFee() *ServiceshipBillingPlanUpsertBulk {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.UpdateFee()
	})
}

// SetBillingCycle sets the "billing_cycle" field.
func (u *ServiceshipBillingPlanUpsertBulk) SetBillingCycle(v int32) *ServiceshipBillingPlanUpsertBulk {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.SetBillingCycle(v)
	})
}

// AddBillingCycle adds v to the "billing_cycle" field.
func (u *ServiceshipBillingPlanUpsertBulk) AddBillingCycle(v int32) *ServiceshipBillingPlanUpsertBulk {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.AddBillingCycle(v)
	})
}

// UpdateBillingCycle sets the "billing_cycle" field to the value that was provided on create.
func (u *ServiceshipBillingPlanUpsertBulk) UpdateBillingCycle() *ServiceshipBillingPlanUpsertBulk {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.UpdateBillingCycle()
	})
}

// SetInterval sets the "interval" field.
func (u *ServiceshipBillingPlanUpsertBulk) SetInterval(v serviceshipbillingplan.Interval) *ServiceshipBillingPlanUpsertBulk {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.SetInterval(v)
	})
}

// UpdateInterval sets the "interval" field to the value that was provided on create.
func (u *ServiceshipBillingPlanUpsertBulk) UpdateInterval() *ServiceshipBillingPlanUpsertBulk {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.UpdateInterval()
	})
}

// SetEffectiveTime sets the "effective_time" field.
func (u *ServiceshipBillingPlanUpsertBulk) SetEffectiveTime(v time.Time) *ServiceshipBillingPlanUpsertBulk {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.SetEffectiveTime(v)
	})
}

// UpdateEffectiveTime sets the "effective_time" field to the value that was provided on create.
func (u *ServiceshipBillingPlanUpsertBulk) UpdateEffectiveTime() *ServiceshipBillingPlanUpsertBulk {
	return u.Update(func(s *ServiceshipBillingPlanUpsert) {
		s.UpdateEffectiveTime()
	})
}

// Exec executes the query.
func (u *ServiceshipBillingPlanUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ServiceshipBillingPlanCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ServiceshipBillingPlanCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServiceshipBillingPlanUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
