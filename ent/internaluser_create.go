// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/address"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/internaluser"
	"coresamples/ent/salesteam"
	"coresamples/ent/setting"
	"coresamples/ent/user"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InternalUserCreate is the builder for creating a InternalUser entity.
type InternalUserCreate struct {
	config
	mutation *InternalUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalUserRole sets the "internal_user_role" field.
func (iuc *InternalUserCreate) SetInternalUserRole(s string) *InternalUserCreate {
	iuc.mutation.SetInternalUserRole(s)
	return iuc
}

// SetInternalUserName sets the "internal_user_name" field.
func (iuc *InternalUserCreate) SetInternalUserName(s string) *InternalUserCreate {
	iuc.mutation.SetInternalUserName(s)
	return iuc
}

// SetNillableInternalUserName sets the "internal_user_name" field if the given value is not nil.
func (iuc *InternalUserCreate) SetNillableInternalUserName(s *string) *InternalUserCreate {
	if s != nil {
		iuc.SetInternalUserName(*s)
	}
	return iuc
}

// SetInternalUserFirstname sets the "internal_user_firstname" field.
func (iuc *InternalUserCreate) SetInternalUserFirstname(s string) *InternalUserCreate {
	iuc.mutation.SetInternalUserFirstname(s)
	return iuc
}

// SetNillableInternalUserFirstname sets the "internal_user_firstname" field if the given value is not nil.
func (iuc *InternalUserCreate) SetNillableInternalUserFirstname(s *string) *InternalUserCreate {
	if s != nil {
		iuc.SetInternalUserFirstname(*s)
	}
	return iuc
}

// SetInternalUserLastname sets the "internal_user_lastname" field.
func (iuc *InternalUserCreate) SetInternalUserLastname(s string) *InternalUserCreate {
	iuc.mutation.SetInternalUserLastname(s)
	return iuc
}

// SetNillableInternalUserLastname sets the "internal_user_lastname" field if the given value is not nil.
func (iuc *InternalUserCreate) SetNillableInternalUserLastname(s *string) *InternalUserCreate {
	if s != nil {
		iuc.SetInternalUserLastname(*s)
	}
	return iuc
}

// SetInternalUserMiddleName sets the "internal_user_middle_name" field.
func (iuc *InternalUserCreate) SetInternalUserMiddleName(s string) *InternalUserCreate {
	iuc.mutation.SetInternalUserMiddleName(s)
	return iuc
}

// SetNillableInternalUserMiddleName sets the "internal_user_middle_name" field if the given value is not nil.
func (iuc *InternalUserCreate) SetNillableInternalUserMiddleName(s *string) *InternalUserCreate {
	if s != nil {
		iuc.SetInternalUserMiddleName(*s)
	}
	return iuc
}

// SetInternalUserIsFullTime sets the "internal_user_is_full_time" field.
func (iuc *InternalUserCreate) SetInternalUserIsFullTime(b bool) *InternalUserCreate {
	iuc.mutation.SetInternalUserIsFullTime(b)
	return iuc
}

// SetNillableInternalUserIsFullTime sets the "internal_user_is_full_time" field if the given value is not nil.
func (iuc *InternalUserCreate) SetNillableInternalUserIsFullTime(b *bool) *InternalUserCreate {
	if b != nil {
		iuc.SetInternalUserIsFullTime(*b)
	}
	return iuc
}

// SetInternalUserEmail sets the "internal_user_email" field.
func (iuc *InternalUserCreate) SetInternalUserEmail(s string) *InternalUserCreate {
	iuc.mutation.SetInternalUserEmail(s)
	return iuc
}

// SetNillableInternalUserEmail sets the "internal_user_email" field if the given value is not nil.
func (iuc *InternalUserCreate) SetNillableInternalUserEmail(s *string) *InternalUserCreate {
	if s != nil {
		iuc.SetInternalUserEmail(*s)
	}
	return iuc
}

// SetInternalUserPhone sets the "internal_user_phone" field.
func (iuc *InternalUserCreate) SetInternalUserPhone(s string) *InternalUserCreate {
	iuc.mutation.SetInternalUserPhone(s)
	return iuc
}

// SetNillableInternalUserPhone sets the "internal_user_phone" field if the given value is not nil.
func (iuc *InternalUserCreate) SetNillableInternalUserPhone(s *string) *InternalUserCreate {
	if s != nil {
		iuc.SetInternalUserPhone(*s)
	}
	return iuc
}

// SetIsActive sets the "isActive" field.
func (iuc *InternalUserCreate) SetIsActive(b bool) *InternalUserCreate {
	iuc.mutation.SetIsActive(b)
	return iuc
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (iuc *InternalUserCreate) SetNillableIsActive(b *bool) *InternalUserCreate {
	if b != nil {
		iuc.SetIsActive(*b)
	}
	return iuc
}

// SetUserID sets the "user_id" field.
func (iuc *InternalUserCreate) SetUserID(i int) *InternalUserCreate {
	iuc.mutation.SetUserID(i)
	return iuc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (iuc *InternalUserCreate) SetNillableUserID(i *int) *InternalUserCreate {
	if i != nil {
		iuc.SetUserID(*i)
	}
	return iuc
}

// SetInternalUserType sets the "internal_user_type" field.
func (iuc *InternalUserCreate) SetInternalUserType(s string) *InternalUserCreate {
	iuc.mutation.SetInternalUserType(s)
	return iuc
}

// SetNillableInternalUserType sets the "internal_user_type" field if the given value is not nil.
func (iuc *InternalUserCreate) SetNillableInternalUserType(s *string) *InternalUserCreate {
	if s != nil {
		iuc.SetInternalUserType(*s)
	}
	return iuc
}

// SetInternalUserRoleID sets the "internal_user_role_id" field.
func (iuc *InternalUserCreate) SetInternalUserRoleID(i int) *InternalUserCreate {
	iuc.mutation.SetInternalUserRoleID(i)
	return iuc
}

// SetNillableInternalUserRoleID sets the "internal_user_role_id" field if the given value is not nil.
func (iuc *InternalUserCreate) SetNillableInternalUserRoleID(i *int) *InternalUserCreate {
	if i != nil {
		iuc.SetInternalUserRoleID(*i)
	}
	return iuc
}

// SetID sets the "id" field.
func (iuc *InternalUserCreate) SetID(i int) *InternalUserCreate {
	iuc.mutation.SetID(i)
	return iuc
}

// AddSalesTeamIDs adds the "sales_team" edge to the SalesTeam entity by IDs.
func (iuc *InternalUserCreate) AddSalesTeamIDs(ids ...int) *InternalUserCreate {
	iuc.mutation.AddSalesTeamIDs(ids...)
	return iuc
}

// AddSalesTeam adds the "sales_team" edges to the SalesTeam entity.
func (iuc *InternalUserCreate) AddSalesTeam(s ...*SalesTeam) *InternalUserCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuc.AddSalesTeamIDs(ids...)
}

// AddInternalUserContactIDs adds the "internal_user_contacts" edge to the Contact entity by IDs.
func (iuc *InternalUserCreate) AddInternalUserContactIDs(ids ...int) *InternalUserCreate {
	iuc.mutation.AddInternalUserContactIDs(ids...)
	return iuc
}

// AddInternalUserContacts adds the "internal_user_contacts" edges to the Contact entity.
func (iuc *InternalUserCreate) AddInternalUserContacts(c ...*Contact) *InternalUserCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuc.AddInternalUserContactIDs(ids...)
}

// AddInternalUserAddressIDs adds the "internal_user_addresses" edge to the Address entity by IDs.
func (iuc *InternalUserCreate) AddInternalUserAddressIDs(ids ...int) *InternalUserCreate {
	iuc.mutation.AddInternalUserAddressIDs(ids...)
	return iuc
}

// AddInternalUserAddresses adds the "internal_user_addresses" edges to the Address entity.
func (iuc *InternalUserCreate) AddInternalUserAddresses(a ...*Address) *InternalUserCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iuc.AddInternalUserAddressIDs(ids...)
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (iuc *InternalUserCreate) AddCustomerIDs(ids ...int) *InternalUserCreate {
	iuc.mutation.AddCustomerIDs(ids...)
	return iuc
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (iuc *InternalUserCreate) AddCustomers(c ...*Customer) *InternalUserCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuc.AddCustomerIDs(ids...)
}

// SetUser sets the "user" edge to the User entity.
func (iuc *InternalUserCreate) SetUser(u *User) *InternalUserCreate {
	return iuc.SetUserID(u.ID)
}

// AddInternalUserSettingIDs adds the "internal_user_settings" edge to the Setting entity by IDs.
func (iuc *InternalUserCreate) AddInternalUserSettingIDs(ids ...int) *InternalUserCreate {
	iuc.mutation.AddInternalUserSettingIDs(ids...)
	return iuc
}

// AddInternalUserSettings adds the "internal_user_settings" edges to the Setting entity.
func (iuc *InternalUserCreate) AddInternalUserSettings(s ...*Setting) *InternalUserCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuc.AddInternalUserSettingIDs(ids...)
}

// Mutation returns the InternalUserMutation object of the builder.
func (iuc *InternalUserCreate) Mutation() *InternalUserMutation {
	return iuc.mutation
}

// Save creates the InternalUser in the database.
func (iuc *InternalUserCreate) Save(ctx context.Context) (*InternalUser, error) {
	iuc.defaults()
	return withHooks(ctx, iuc.sqlSave, iuc.mutation, iuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iuc *InternalUserCreate) SaveX(ctx context.Context) *InternalUser {
	v, err := iuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iuc *InternalUserCreate) Exec(ctx context.Context) error {
	_, err := iuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuc *InternalUserCreate) ExecX(ctx context.Context) {
	if err := iuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuc *InternalUserCreate) defaults() {
	if _, ok := iuc.mutation.InternalUserIsFullTime(); !ok {
		v := internaluser.DefaultInternalUserIsFullTime
		iuc.mutation.SetInternalUserIsFullTime(v)
	}
	if _, ok := iuc.mutation.IsActive(); !ok {
		v := internaluser.DefaultIsActive
		iuc.mutation.SetIsActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuc *InternalUserCreate) check() error {
	if _, ok := iuc.mutation.InternalUserRole(); !ok {
		return &ValidationError{Name: "internal_user_role", err: errors.New(`ent: missing required field "InternalUser.internal_user_role"`)}
	}
	if _, ok := iuc.mutation.InternalUserIsFullTime(); !ok {
		return &ValidationError{Name: "internal_user_is_full_time", err: errors.New(`ent: missing required field "InternalUser.internal_user_is_full_time"`)}
	}
	if _, ok := iuc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "isActive", err: errors.New(`ent: missing required field "InternalUser.isActive"`)}
	}
	return nil
}

func (iuc *InternalUserCreate) sqlSave(ctx context.Context) (*InternalUser, error) {
	if err := iuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := iuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	iuc.mutation.id = &_node.ID
	iuc.mutation.done = true
	return _node, nil
}

func (iuc *InternalUserCreate) createSpec() (*InternalUser, *sqlgraph.CreateSpec) {
	var (
		_node = &InternalUser{config: iuc.config}
		_spec = sqlgraph.NewCreateSpec(internaluser.Table, sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt))
	)
	_spec.OnConflict = iuc.conflict
	if id, ok := iuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := iuc.mutation.InternalUserRole(); ok {
		_spec.SetField(internaluser.FieldInternalUserRole, field.TypeString, value)
		_node.InternalUserRole = value
	}
	if value, ok := iuc.mutation.InternalUserName(); ok {
		_spec.SetField(internaluser.FieldInternalUserName, field.TypeString, value)
		_node.InternalUserName = value
	}
	if value, ok := iuc.mutation.InternalUserFirstname(); ok {
		_spec.SetField(internaluser.FieldInternalUserFirstname, field.TypeString, value)
		_node.InternalUserFirstname = value
	}
	if value, ok := iuc.mutation.InternalUserLastname(); ok {
		_spec.SetField(internaluser.FieldInternalUserLastname, field.TypeString, value)
		_node.InternalUserLastname = value
	}
	if value, ok := iuc.mutation.InternalUserMiddleName(); ok {
		_spec.SetField(internaluser.FieldInternalUserMiddleName, field.TypeString, value)
		_node.InternalUserMiddleName = value
	}
	if value, ok := iuc.mutation.InternalUserIsFullTime(); ok {
		_spec.SetField(internaluser.FieldInternalUserIsFullTime, field.TypeBool, value)
		_node.InternalUserIsFullTime = value
	}
	if value, ok := iuc.mutation.InternalUserEmail(); ok {
		_spec.SetField(internaluser.FieldInternalUserEmail, field.TypeString, value)
		_node.InternalUserEmail = value
	}
	if value, ok := iuc.mutation.InternalUserPhone(); ok {
		_spec.SetField(internaluser.FieldInternalUserPhone, field.TypeString, value)
		_node.InternalUserPhone = value
	}
	if value, ok := iuc.mutation.IsActive(); ok {
		_spec.SetField(internaluser.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := iuc.mutation.InternalUserType(); ok {
		_spec.SetField(internaluser.FieldInternalUserType, field.TypeString, value)
		_node.InternalUserType = value
	}
	if value, ok := iuc.mutation.InternalUserRoleID(); ok {
		_spec.SetField(internaluser.FieldInternalUserRoleID, field.TypeInt, value)
		_node.InternalUserRoleID = value
	}
	if nodes := iuc.mutation.SalesTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   internaluser.SalesTeamTable,
			Columns: []string{internaluser.SalesTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iuc.mutation.InternalUserContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.InternalUserContactsTable,
			Columns: []string{internaluser.InternalUserContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iuc.mutation.InternalUserAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.InternalUserAddressesTable,
			Columns: []string{internaluser.InternalUserAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iuc.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.CustomersTable,
			Columns: []string{internaluser.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iuc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   internaluser.UserTable,
			Columns: []string{internaluser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iuc.mutation.InternalUserSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internaluser.InternalUserSettingsTable,
			Columns: internaluser.InternalUserSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InternalUser.Create().
//		SetInternalUserRole(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InternalUserUpsert) {
//			SetInternalUserRole(v+v).
//		}).
//		Exec(ctx)
func (iuc *InternalUserCreate) OnConflict(opts ...sql.ConflictOption) *InternalUserUpsertOne {
	iuc.conflict = opts
	return &InternalUserUpsertOne{
		create: iuc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InternalUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iuc *InternalUserCreate) OnConflictColumns(columns ...string) *InternalUserUpsertOne {
	iuc.conflict = append(iuc.conflict, sql.ConflictColumns(columns...))
	return &InternalUserUpsertOne{
		create: iuc,
	}
}

type (
	// InternalUserUpsertOne is the builder for "upsert"-ing
	//  one InternalUser node.
	InternalUserUpsertOne struct {
		create *InternalUserCreate
	}

	// InternalUserUpsert is the "OnConflict" setter.
	InternalUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalUserRole sets the "internal_user_role" field.
func (u *InternalUserUpsert) SetInternalUserRole(v string) *InternalUserUpsert {
	u.Set(internaluser.FieldInternalUserRole, v)
	return u
}

// UpdateInternalUserRole sets the "internal_user_role" field to the value that was provided on create.
func (u *InternalUserUpsert) UpdateInternalUserRole() *InternalUserUpsert {
	u.SetExcluded(internaluser.FieldInternalUserRole)
	return u
}

// SetInternalUserName sets the "internal_user_name" field.
func (u *InternalUserUpsert) SetInternalUserName(v string) *InternalUserUpsert {
	u.Set(internaluser.FieldInternalUserName, v)
	return u
}

// UpdateInternalUserName sets the "internal_user_name" field to the value that was provided on create.
func (u *InternalUserUpsert) UpdateInternalUserName() *InternalUserUpsert {
	u.SetExcluded(internaluser.FieldInternalUserName)
	return u
}

// ClearInternalUserName clears the value of the "internal_user_name" field.
func (u *InternalUserUpsert) ClearInternalUserName() *InternalUserUpsert {
	u.SetNull(internaluser.FieldInternalUserName)
	return u
}

// SetInternalUserFirstname sets the "internal_user_firstname" field.
func (u *InternalUserUpsert) SetInternalUserFirstname(v string) *InternalUserUpsert {
	u.Set(internaluser.FieldInternalUserFirstname, v)
	return u
}

// UpdateInternalUserFirstname sets the "internal_user_firstname" field to the value that was provided on create.
func (u *InternalUserUpsert) UpdateInternalUserFirstname() *InternalUserUpsert {
	u.SetExcluded(internaluser.FieldInternalUserFirstname)
	return u
}

// ClearInternalUserFirstname clears the value of the "internal_user_firstname" field.
func (u *InternalUserUpsert) ClearInternalUserFirstname() *InternalUserUpsert {
	u.SetNull(internaluser.FieldInternalUserFirstname)
	return u
}

// SetInternalUserLastname sets the "internal_user_lastname" field.
func (u *InternalUserUpsert) SetInternalUserLastname(v string) *InternalUserUpsert {
	u.Set(internaluser.FieldInternalUserLastname, v)
	return u
}

// UpdateInternalUserLastname sets the "internal_user_lastname" field to the value that was provided on create.
func (u *InternalUserUpsert) UpdateInternalUserLastname() *InternalUserUpsert {
	u.SetExcluded(internaluser.FieldInternalUserLastname)
	return u
}

// ClearInternalUserLastname clears the value of the "internal_user_lastname" field.
func (u *InternalUserUpsert) ClearInternalUserLastname() *InternalUserUpsert {
	u.SetNull(internaluser.FieldInternalUserLastname)
	return u
}

// SetInternalUserMiddleName sets the "internal_user_middle_name" field.
func (u *InternalUserUpsert) SetInternalUserMiddleName(v string) *InternalUserUpsert {
	u.Set(internaluser.FieldInternalUserMiddleName, v)
	return u
}

// UpdateInternalUserMiddleName sets the "internal_user_middle_name" field to the value that was provided on create.
func (u *InternalUserUpsert) UpdateInternalUserMiddleName() *InternalUserUpsert {
	u.SetExcluded(internaluser.FieldInternalUserMiddleName)
	return u
}

// ClearInternalUserMiddleName clears the value of the "internal_user_middle_name" field.
func (u *InternalUserUpsert) ClearInternalUserMiddleName() *InternalUserUpsert {
	u.SetNull(internaluser.FieldInternalUserMiddleName)
	return u
}

// SetInternalUserIsFullTime sets the "internal_user_is_full_time" field.
func (u *InternalUserUpsert) SetInternalUserIsFullTime(v bool) *InternalUserUpsert {
	u.Set(internaluser.FieldInternalUserIsFullTime, v)
	return u
}

// UpdateInternalUserIsFullTime sets the "internal_user_is_full_time" field to the value that was provided on create.
func (u *InternalUserUpsert) UpdateInternalUserIsFullTime() *InternalUserUpsert {
	u.SetExcluded(internaluser.FieldInternalUserIsFullTime)
	return u
}

// SetInternalUserEmail sets the "internal_user_email" field.
func (u *InternalUserUpsert) SetInternalUserEmail(v string) *InternalUserUpsert {
	u.Set(internaluser.FieldInternalUserEmail, v)
	return u
}

// UpdateInternalUserEmail sets the "internal_user_email" field to the value that was provided on create.
func (u *InternalUserUpsert) UpdateInternalUserEmail() *InternalUserUpsert {
	u.SetExcluded(internaluser.FieldInternalUserEmail)
	return u
}

// ClearInternalUserEmail clears the value of the "internal_user_email" field.
func (u *InternalUserUpsert) ClearInternalUserEmail() *InternalUserUpsert {
	u.SetNull(internaluser.FieldInternalUserEmail)
	return u
}

// SetInternalUserPhone sets the "internal_user_phone" field.
func (u *InternalUserUpsert) SetInternalUserPhone(v string) *InternalUserUpsert {
	u.Set(internaluser.FieldInternalUserPhone, v)
	return u
}

// UpdateInternalUserPhone sets the "internal_user_phone" field to the value that was provided on create.
func (u *InternalUserUpsert) UpdateInternalUserPhone() *InternalUserUpsert {
	u.SetExcluded(internaluser.FieldInternalUserPhone)
	return u
}

// ClearInternalUserPhone clears the value of the "internal_user_phone" field.
func (u *InternalUserUpsert) ClearInternalUserPhone() *InternalUserUpsert {
	u.SetNull(internaluser.FieldInternalUserPhone)
	return u
}

// SetIsActive sets the "isActive" field.
func (u *InternalUserUpsert) SetIsActive(v bool) *InternalUserUpsert {
	u.Set(internaluser.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "isActive" field to the value that was provided on create.
func (u *InternalUserUpsert) UpdateIsActive() *InternalUserUpsert {
	u.SetExcluded(internaluser.FieldIsActive)
	return u
}

// SetUserID sets the "user_id" field.
func (u *InternalUserUpsert) SetUserID(v int) *InternalUserUpsert {
	u.Set(internaluser.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *InternalUserUpsert) UpdateUserID() *InternalUserUpsert {
	u.SetExcluded(internaluser.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *InternalUserUpsert) ClearUserID() *InternalUserUpsert {
	u.SetNull(internaluser.FieldUserID)
	return u
}

// SetInternalUserType sets the "internal_user_type" field.
func (u *InternalUserUpsert) SetInternalUserType(v string) *InternalUserUpsert {
	u.Set(internaluser.FieldInternalUserType, v)
	return u
}

// UpdateInternalUserType sets the "internal_user_type" field to the value that was provided on create.
func (u *InternalUserUpsert) UpdateInternalUserType() *InternalUserUpsert {
	u.SetExcluded(internaluser.FieldInternalUserType)
	return u
}

// ClearInternalUserType clears the value of the "internal_user_type" field.
func (u *InternalUserUpsert) ClearInternalUserType() *InternalUserUpsert {
	u.SetNull(internaluser.FieldInternalUserType)
	return u
}

// SetInternalUserRoleID sets the "internal_user_role_id" field.
func (u *InternalUserUpsert) SetInternalUserRoleID(v int) *InternalUserUpsert {
	u.Set(internaluser.FieldInternalUserRoleID, v)
	return u
}

// UpdateInternalUserRoleID sets the "internal_user_role_id" field to the value that was provided on create.
func (u *InternalUserUpsert) UpdateInternalUserRoleID() *InternalUserUpsert {
	u.SetExcluded(internaluser.FieldInternalUserRoleID)
	return u
}

// AddInternalUserRoleID adds v to the "internal_user_role_id" field.
func (u *InternalUserUpsert) AddInternalUserRoleID(v int) *InternalUserUpsert {
	u.Add(internaluser.FieldInternalUserRoleID, v)
	return u
}

// ClearInternalUserRoleID clears the value of the "internal_user_role_id" field.
func (u *InternalUserUpsert) ClearInternalUserRoleID() *InternalUserUpsert {
	u.SetNull(internaluser.FieldInternalUserRoleID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.InternalUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(internaluser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InternalUserUpsertOne) UpdateNewValues() *InternalUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(internaluser.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InternalUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InternalUserUpsertOne) Ignore() *InternalUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InternalUserUpsertOne) DoNothing() *InternalUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InternalUserCreate.OnConflict
// documentation for more info.
func (u *InternalUserUpsertOne) Update(set func(*InternalUserUpsert)) *InternalUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InternalUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalUserRole sets the "internal_user_role" field.
func (u *InternalUserUpsertOne) SetInternalUserRole(v string) *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserRole(v)
	})
}

// UpdateInternalUserRole sets the "internal_user_role" field to the value that was provided on create.
func (u *InternalUserUpsertOne) UpdateInternalUserRole() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserRole()
	})
}

// SetInternalUserName sets the "internal_user_name" field.
func (u *InternalUserUpsertOne) SetInternalUserName(v string) *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserName(v)
	})
}

// UpdateInternalUserName sets the "internal_user_name" field to the value that was provided on create.
func (u *InternalUserUpsertOne) UpdateInternalUserName() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserName()
	})
}

// ClearInternalUserName clears the value of the "internal_user_name" field.
func (u *InternalUserUpsertOne) ClearInternalUserName() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearInternalUserName()
	})
}

// SetInternalUserFirstname sets the "internal_user_firstname" field.
func (u *InternalUserUpsertOne) SetInternalUserFirstname(v string) *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserFirstname(v)
	})
}

// UpdateInternalUserFirstname sets the "internal_user_firstname" field to the value that was provided on create.
func (u *InternalUserUpsertOne) UpdateInternalUserFirstname() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserFirstname()
	})
}

// ClearInternalUserFirstname clears the value of the "internal_user_firstname" field.
func (u *InternalUserUpsertOne) ClearInternalUserFirstname() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearInternalUserFirstname()
	})
}

// SetInternalUserLastname sets the "internal_user_lastname" field.
func (u *InternalUserUpsertOne) SetInternalUserLastname(v string) *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserLastname(v)
	})
}

// UpdateInternalUserLastname sets the "internal_user_lastname" field to the value that was provided on create.
func (u *InternalUserUpsertOne) UpdateInternalUserLastname() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserLastname()
	})
}

// ClearInternalUserLastname clears the value of the "internal_user_lastname" field.
func (u *InternalUserUpsertOne) ClearInternalUserLastname() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearInternalUserLastname()
	})
}

// SetInternalUserMiddleName sets the "internal_user_middle_name" field.
func (u *InternalUserUpsertOne) SetInternalUserMiddleName(v string) *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserMiddleName(v)
	})
}

// UpdateInternalUserMiddleName sets the "internal_user_middle_name" field to the value that was provided on create.
func (u *InternalUserUpsertOne) UpdateInternalUserMiddleName() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserMiddleName()
	})
}

// ClearInternalUserMiddleName clears the value of the "internal_user_middle_name" field.
func (u *InternalUserUpsertOne) ClearInternalUserMiddleName() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearInternalUserMiddleName()
	})
}

// SetInternalUserIsFullTime sets the "internal_user_is_full_time" field.
func (u *InternalUserUpsertOne) SetInternalUserIsFullTime(v bool) *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserIsFullTime(v)
	})
}

// UpdateInternalUserIsFullTime sets the "internal_user_is_full_time" field to the value that was provided on create.
func (u *InternalUserUpsertOne) UpdateInternalUserIsFullTime() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserIsFullTime()
	})
}

// SetInternalUserEmail sets the "internal_user_email" field.
func (u *InternalUserUpsertOne) SetInternalUserEmail(v string) *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserEmail(v)
	})
}

// UpdateInternalUserEmail sets the "internal_user_email" field to the value that was provided on create.
func (u *InternalUserUpsertOne) UpdateInternalUserEmail() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserEmail()
	})
}

// ClearInternalUserEmail clears the value of the "internal_user_email" field.
func (u *InternalUserUpsertOne) ClearInternalUserEmail() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearInternalUserEmail()
	})
}

// SetInternalUserPhone sets the "internal_user_phone" field.
func (u *InternalUserUpsertOne) SetInternalUserPhone(v string) *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserPhone(v)
	})
}

// UpdateInternalUserPhone sets the "internal_user_phone" field to the value that was provided on create.
func (u *InternalUserUpsertOne) UpdateInternalUserPhone() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserPhone()
	})
}

// ClearInternalUserPhone clears the value of the "internal_user_phone" field.
func (u *InternalUserUpsertOne) ClearInternalUserPhone() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearInternalUserPhone()
	})
}

// SetIsActive sets the "isActive" field.
func (u *InternalUserUpsertOne) SetIsActive(v bool) *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "isActive" field to the value that was provided on create.
func (u *InternalUserUpsertOne) UpdateIsActive() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateIsActive()
	})
}

// SetUserID sets the "user_id" field.
func (u *InternalUserUpsertOne) SetUserID(v int) *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *InternalUserUpsertOne) UpdateUserID() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *InternalUserUpsertOne) ClearUserID() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearUserID()
	})
}

// SetInternalUserType sets the "internal_user_type" field.
func (u *InternalUserUpsertOne) SetInternalUserType(v string) *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserType(v)
	})
}

// UpdateInternalUserType sets the "internal_user_type" field to the value that was provided on create.
func (u *InternalUserUpsertOne) UpdateInternalUserType() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserType()
	})
}

// ClearInternalUserType clears the value of the "internal_user_type" field.
func (u *InternalUserUpsertOne) ClearInternalUserType() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearInternalUserType()
	})
}

// SetInternalUserRoleID sets the "internal_user_role_id" field.
func (u *InternalUserUpsertOne) SetInternalUserRoleID(v int) *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserRoleID(v)
	})
}

// AddInternalUserRoleID adds v to the "internal_user_role_id" field.
func (u *InternalUserUpsertOne) AddInternalUserRoleID(v int) *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.AddInternalUserRoleID(v)
	})
}

// UpdateInternalUserRoleID sets the "internal_user_role_id" field to the value that was provided on create.
func (u *InternalUserUpsertOne) UpdateInternalUserRoleID() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserRoleID()
	})
}

// ClearInternalUserRoleID clears the value of the "internal_user_role_id" field.
func (u *InternalUserUpsertOne) ClearInternalUserRoleID() *InternalUserUpsertOne {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearInternalUserRoleID()
	})
}

// Exec executes the query.
func (u *InternalUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InternalUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InternalUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InternalUserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InternalUserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InternalUserCreateBulk is the builder for creating many InternalUser entities in bulk.
type InternalUserCreateBulk struct {
	config
	err      error
	builders []*InternalUserCreate
	conflict []sql.ConflictOption
}

// Save creates the InternalUser entities in the database.
func (iucb *InternalUserCreateBulk) Save(ctx context.Context) ([]*InternalUser, error) {
	if iucb.err != nil {
		return nil, iucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iucb.builders))
	nodes := make([]*InternalUser, len(iucb.builders))
	mutators := make([]Mutator, len(iucb.builders))
	for i := range iucb.builders {
		func(i int, root context.Context) {
			builder := iucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InternalUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iucb *InternalUserCreateBulk) SaveX(ctx context.Context) []*InternalUser {
	v, err := iucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iucb *InternalUserCreateBulk) Exec(ctx context.Context) error {
	_, err := iucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iucb *InternalUserCreateBulk) ExecX(ctx context.Context) {
	if err := iucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InternalUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InternalUserUpsert) {
//			SetInternalUserRole(v+v).
//		}).
//		Exec(ctx)
func (iucb *InternalUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *InternalUserUpsertBulk {
	iucb.conflict = opts
	return &InternalUserUpsertBulk{
		create: iucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InternalUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iucb *InternalUserCreateBulk) OnConflictColumns(columns ...string) *InternalUserUpsertBulk {
	iucb.conflict = append(iucb.conflict, sql.ConflictColumns(columns...))
	return &InternalUserUpsertBulk{
		create: iucb,
	}
}

// InternalUserUpsertBulk is the builder for "upsert"-ing
// a bulk of InternalUser nodes.
type InternalUserUpsertBulk struct {
	create *InternalUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.InternalUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(internaluser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InternalUserUpsertBulk) UpdateNewValues() *InternalUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(internaluser.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InternalUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InternalUserUpsertBulk) Ignore() *InternalUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InternalUserUpsertBulk) DoNothing() *InternalUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InternalUserCreateBulk.OnConflict
// documentation for more info.
func (u *InternalUserUpsertBulk) Update(set func(*InternalUserUpsert)) *InternalUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InternalUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalUserRole sets the "internal_user_role" field.
func (u *InternalUserUpsertBulk) SetInternalUserRole(v string) *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserRole(v)
	})
}

// UpdateInternalUserRole sets the "internal_user_role" field to the value that was provided on create.
func (u *InternalUserUpsertBulk) UpdateInternalUserRole() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserRole()
	})
}

// SetInternalUserName sets the "internal_user_name" field.
func (u *InternalUserUpsertBulk) SetInternalUserName(v string) *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserName(v)
	})
}

// UpdateInternalUserName sets the "internal_user_name" field to the value that was provided on create.
func (u *InternalUserUpsertBulk) UpdateInternalUserName() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserName()
	})
}

// ClearInternalUserName clears the value of the "internal_user_name" field.
func (u *InternalUserUpsertBulk) ClearInternalUserName() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearInternalUserName()
	})
}

// SetInternalUserFirstname sets the "internal_user_firstname" field.
func (u *InternalUserUpsertBulk) SetInternalUserFirstname(v string) *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserFirstname(v)
	})
}

// UpdateInternalUserFirstname sets the "internal_user_firstname" field to the value that was provided on create.
func (u *InternalUserUpsertBulk) UpdateInternalUserFirstname() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserFirstname()
	})
}

// ClearInternalUserFirstname clears the value of the "internal_user_firstname" field.
func (u *InternalUserUpsertBulk) ClearInternalUserFirstname() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearInternalUserFirstname()
	})
}

// SetInternalUserLastname sets the "internal_user_lastname" field.
func (u *InternalUserUpsertBulk) SetInternalUserLastname(v string) *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserLastname(v)
	})
}

// UpdateInternalUserLastname sets the "internal_user_lastname" field to the value that was provided on create.
func (u *InternalUserUpsertBulk) UpdateInternalUserLastname() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserLastname()
	})
}

// ClearInternalUserLastname clears the value of the "internal_user_lastname" field.
func (u *InternalUserUpsertBulk) ClearInternalUserLastname() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearInternalUserLastname()
	})
}

// SetInternalUserMiddleName sets the "internal_user_middle_name" field.
func (u *InternalUserUpsertBulk) SetInternalUserMiddleName(v string) *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserMiddleName(v)
	})
}

// UpdateInternalUserMiddleName sets the "internal_user_middle_name" field to the value that was provided on create.
func (u *InternalUserUpsertBulk) UpdateInternalUserMiddleName() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserMiddleName()
	})
}

// ClearInternalUserMiddleName clears the value of the "internal_user_middle_name" field.
func (u *InternalUserUpsertBulk) ClearInternalUserMiddleName() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearInternalUserMiddleName()
	})
}

// SetInternalUserIsFullTime sets the "internal_user_is_full_time" field.
func (u *InternalUserUpsertBulk) SetInternalUserIsFullTime(v bool) *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserIsFullTime(v)
	})
}

// UpdateInternalUserIsFullTime sets the "internal_user_is_full_time" field to the value that was provided on create.
func (u *InternalUserUpsertBulk) UpdateInternalUserIsFullTime() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserIsFullTime()
	})
}

// SetInternalUserEmail sets the "internal_user_email" field.
func (u *InternalUserUpsertBulk) SetInternalUserEmail(v string) *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserEmail(v)
	})
}

// UpdateInternalUserEmail sets the "internal_user_email" field to the value that was provided on create.
func (u *InternalUserUpsertBulk) UpdateInternalUserEmail() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserEmail()
	})
}

// ClearInternalUserEmail clears the value of the "internal_user_email" field.
func (u *InternalUserUpsertBulk) ClearInternalUserEmail() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearInternalUserEmail()
	})
}

// SetInternalUserPhone sets the "internal_user_phone" field.
func (u *InternalUserUpsertBulk) SetInternalUserPhone(v string) *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserPhone(v)
	})
}

// UpdateInternalUserPhone sets the "internal_user_phone" field to the value that was provided on create.
func (u *InternalUserUpsertBulk) UpdateInternalUserPhone() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserPhone()
	})
}

// ClearInternalUserPhone clears the value of the "internal_user_phone" field.
func (u *InternalUserUpsertBulk) ClearInternalUserPhone() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearInternalUserPhone()
	})
}

// SetIsActive sets the "isActive" field.
func (u *InternalUserUpsertBulk) SetIsActive(v bool) *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "isActive" field to the value that was provided on create.
func (u *InternalUserUpsertBulk) UpdateIsActive() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateIsActive()
	})
}

// SetUserID sets the "user_id" field.
func (u *InternalUserUpsertBulk) SetUserID(v int) *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *InternalUserUpsertBulk) UpdateUserID() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *InternalUserUpsertBulk) ClearUserID() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearUserID()
	})
}

// SetInternalUserType sets the "internal_user_type" field.
func (u *InternalUserUpsertBulk) SetInternalUserType(v string) *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserType(v)
	})
}

// UpdateInternalUserType sets the "internal_user_type" field to the value that was provided on create.
func (u *InternalUserUpsertBulk) UpdateInternalUserType() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserType()
	})
}

// ClearInternalUserType clears the value of the "internal_user_type" field.
func (u *InternalUserUpsertBulk) ClearInternalUserType() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearInternalUserType()
	})
}

// SetInternalUserRoleID sets the "internal_user_role_id" field.
func (u *InternalUserUpsertBulk) SetInternalUserRoleID(v int) *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.SetInternalUserRoleID(v)
	})
}

// AddInternalUserRoleID adds v to the "internal_user_role_id" field.
func (u *InternalUserUpsertBulk) AddInternalUserRoleID(v int) *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.AddInternalUserRoleID(v)
	})
}

// UpdateInternalUserRoleID sets the "internal_user_role_id" field to the value that was provided on create.
func (u *InternalUserUpsertBulk) UpdateInternalUserRoleID() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.UpdateInternalUserRoleID()
	})
}

// ClearInternalUserRoleID clears the value of the "internal_user_role_id" field.
func (u *InternalUserUpsertBulk) ClearInternalUserRoleID() *InternalUserUpsertBulk {
	return u.Update(func(s *InternalUserUpsert) {
		s.ClearInternalUserRoleID()
	})
}

// Exec executes the query.
func (u *InternalUserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InternalUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InternalUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InternalUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
