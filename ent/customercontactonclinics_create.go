// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/clinic"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/customercontactonclinics"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerContactOnClinicsCreate is the builder for creating a CustomerContactOnClinics entity.
type CustomerContactOnClinicsCreate struct {
	config
	mutation *CustomerContactOnClinicsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCustomerID sets the "customer_id" field.
func (ccocc *CustomerContactOnClinicsCreate) SetCustomerID(i int) *CustomerContactOnClinicsCreate {
	ccocc.mutation.SetCustomerID(i)
	return ccocc
}

// SetClinicID sets the "clinic_id" field.
func (ccocc *CustomerContactOnClinicsCreate) SetClinicID(i int) *CustomerContactOnClinicsCreate {
	ccocc.mutation.SetClinicID(i)
	return ccocc
}

// SetContactID sets the "contact_id" field.
func (ccocc *CustomerContactOnClinicsCreate) SetContactID(i int) *CustomerContactOnClinicsCreate {
	ccocc.mutation.SetContactID(i)
	return ccocc
}

// SetContactType sets the "contact_type" field.
func (ccocc *CustomerContactOnClinicsCreate) SetContactType(s string) *CustomerContactOnClinicsCreate {
	ccocc.mutation.SetContactType(s)
	return ccocc
}

// SetNillableContactType sets the "contact_type" field if the given value is not nil.
func (ccocc *CustomerContactOnClinicsCreate) SetNillableContactType(s *string) *CustomerContactOnClinicsCreate {
	if s != nil {
		ccocc.SetContactType(*s)
	}
	return ccocc
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (ccocc *CustomerContactOnClinicsCreate) SetCustomer(c *Customer) *CustomerContactOnClinicsCreate {
	return ccocc.SetCustomerID(c.ID)
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (ccocc *CustomerContactOnClinicsCreate) SetClinic(c *Clinic) *CustomerContactOnClinicsCreate {
	return ccocc.SetClinicID(c.ID)
}

// SetContact sets the "contact" edge to the Contact entity.
func (ccocc *CustomerContactOnClinicsCreate) SetContact(c *Contact) *CustomerContactOnClinicsCreate {
	return ccocc.SetContactID(c.ID)
}

// Mutation returns the CustomerContactOnClinicsMutation object of the builder.
func (ccocc *CustomerContactOnClinicsCreate) Mutation() *CustomerContactOnClinicsMutation {
	return ccocc.mutation
}

// Save creates the CustomerContactOnClinics in the database.
func (ccocc *CustomerContactOnClinicsCreate) Save(ctx context.Context) (*CustomerContactOnClinics, error) {
	return withHooks(ctx, ccocc.sqlSave, ccocc.mutation, ccocc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccocc *CustomerContactOnClinicsCreate) SaveX(ctx context.Context) *CustomerContactOnClinics {
	v, err := ccocc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccocc *CustomerContactOnClinicsCreate) Exec(ctx context.Context) error {
	_, err := ccocc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccocc *CustomerContactOnClinicsCreate) ExecX(ctx context.Context) {
	if err := ccocc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccocc *CustomerContactOnClinicsCreate) check() error {
	if _, ok := ccocc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "CustomerContactOnClinics.customer_id"`)}
	}
	if _, ok := ccocc.mutation.ClinicID(); !ok {
		return &ValidationError{Name: "clinic_id", err: errors.New(`ent: missing required field "CustomerContactOnClinics.clinic_id"`)}
	}
	if _, ok := ccocc.mutation.ContactID(); !ok {
		return &ValidationError{Name: "contact_id", err: errors.New(`ent: missing required field "CustomerContactOnClinics.contact_id"`)}
	}
	if _, ok := ccocc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "CustomerContactOnClinics.customer"`)}
	}
	if _, ok := ccocc.mutation.ClinicID(); !ok {
		return &ValidationError{Name: "clinic", err: errors.New(`ent: missing required edge "CustomerContactOnClinics.clinic"`)}
	}
	if _, ok := ccocc.mutation.ContactID(); !ok {
		return &ValidationError{Name: "contact", err: errors.New(`ent: missing required edge "CustomerContactOnClinics.contact"`)}
	}
	return nil
}

func (ccocc *CustomerContactOnClinicsCreate) sqlSave(ctx context.Context) (*CustomerContactOnClinics, error) {
	if err := ccocc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccocc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccocc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ccocc.mutation.id = &_node.ID
	ccocc.mutation.done = true
	return _node, nil
}

func (ccocc *CustomerContactOnClinicsCreate) createSpec() (*CustomerContactOnClinics, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomerContactOnClinics{config: ccocc.config}
		_spec = sqlgraph.NewCreateSpec(customercontactonclinics.Table, sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ccocc.conflict
	if value, ok := ccocc.mutation.ContactType(); ok {
		_spec.SetField(customercontactonclinics.FieldContactType, field.TypeString, value)
		_node.ContactType = value
	}
	if nodes := ccocc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customercontactonclinics.CustomerTable,
			Columns: []string{customercontactonclinics.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ccocc.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customercontactonclinics.ClinicTable,
			Columns: []string{customercontactonclinics.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClinicID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ccocc.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customercontactonclinics.ContactTable,
			Columns: []string{customercontactonclinics.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ContactID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CustomerContactOnClinics.Create().
//		SetCustomerID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerContactOnClinicsUpsert) {
//			SetCustomerID(v+v).
//		}).
//		Exec(ctx)
func (ccocc *CustomerContactOnClinicsCreate) OnConflict(opts ...sql.ConflictOption) *CustomerContactOnClinicsUpsertOne {
	ccocc.conflict = opts
	return &CustomerContactOnClinicsUpsertOne{
		create: ccocc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CustomerContactOnClinics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccocc *CustomerContactOnClinicsCreate) OnConflictColumns(columns ...string) *CustomerContactOnClinicsUpsertOne {
	ccocc.conflict = append(ccocc.conflict, sql.ConflictColumns(columns...))
	return &CustomerContactOnClinicsUpsertOne{
		create: ccocc,
	}
}

type (
	// CustomerContactOnClinicsUpsertOne is the builder for "upsert"-ing
	//  one CustomerContactOnClinics node.
	CustomerContactOnClinicsUpsertOne struct {
		create *CustomerContactOnClinicsCreate
	}

	// CustomerContactOnClinicsUpsert is the "OnConflict" setter.
	CustomerContactOnClinicsUpsert struct {
		*sql.UpdateSet
	}
)

// SetCustomerID sets the "customer_id" field.
func (u *CustomerContactOnClinicsUpsert) SetCustomerID(v int) *CustomerContactOnClinicsUpsert {
	u.Set(customercontactonclinics.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CustomerContactOnClinicsUpsert) UpdateCustomerID() *CustomerContactOnClinicsUpsert {
	u.SetExcluded(customercontactonclinics.FieldCustomerID)
	return u
}

// SetClinicID sets the "clinic_id" field.
func (u *CustomerContactOnClinicsUpsert) SetClinicID(v int) *CustomerContactOnClinicsUpsert {
	u.Set(customercontactonclinics.FieldClinicID, v)
	return u
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *CustomerContactOnClinicsUpsert) UpdateClinicID() *CustomerContactOnClinicsUpsert {
	u.SetExcluded(customercontactonclinics.FieldClinicID)
	return u
}

// SetContactID sets the "contact_id" field.
func (u *CustomerContactOnClinicsUpsert) SetContactID(v int) *CustomerContactOnClinicsUpsert {
	u.Set(customercontactonclinics.FieldContactID, v)
	return u
}

// UpdateContactID sets the "contact_id" field to the value that was provided on create.
func (u *CustomerContactOnClinicsUpsert) UpdateContactID() *CustomerContactOnClinicsUpsert {
	u.SetExcluded(customercontactonclinics.FieldContactID)
	return u
}

// SetContactType sets the "contact_type" field.
func (u *CustomerContactOnClinicsUpsert) SetContactType(v string) *CustomerContactOnClinicsUpsert {
	u.Set(customercontactonclinics.FieldContactType, v)
	return u
}

// UpdateContactType sets the "contact_type" field to the value that was provided on create.
func (u *CustomerContactOnClinicsUpsert) UpdateContactType() *CustomerContactOnClinicsUpsert {
	u.SetExcluded(customercontactonclinics.FieldContactType)
	return u
}

// ClearContactType clears the value of the "contact_type" field.
func (u *CustomerContactOnClinicsUpsert) ClearContactType() *CustomerContactOnClinicsUpsert {
	u.SetNull(customercontactonclinics.FieldContactType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CustomerContactOnClinics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CustomerContactOnClinicsUpsertOne) UpdateNewValues() *CustomerContactOnClinicsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CustomerContactOnClinics.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CustomerContactOnClinicsUpsertOne) Ignore() *CustomerContactOnClinicsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerContactOnClinicsUpsertOne) DoNothing() *CustomerContactOnClinicsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerContactOnClinicsCreate.OnConflict
// documentation for more info.
func (u *CustomerContactOnClinicsUpsertOne) Update(set func(*CustomerContactOnClinicsUpsert)) *CustomerContactOnClinicsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerContactOnClinicsUpsert{UpdateSet: update})
	}))
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *CustomerContactOnClinicsUpsertOne) SetCustomerID(v int) *CustomerContactOnClinicsUpsertOne {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CustomerContactOnClinicsUpsertOne) UpdateCustomerID() *CustomerContactOnClinicsUpsertOne {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.UpdateCustomerID()
	})
}

// SetClinicID sets the "clinic_id" field.
func (u *CustomerContactOnClinicsUpsertOne) SetClinicID(v int) *CustomerContactOnClinicsUpsertOne {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.SetClinicID(v)
	})
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *CustomerContactOnClinicsUpsertOne) UpdateClinicID() *CustomerContactOnClinicsUpsertOne {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.UpdateClinicID()
	})
}

// SetContactID sets the "contact_id" field.
func (u *CustomerContactOnClinicsUpsertOne) SetContactID(v int) *CustomerContactOnClinicsUpsertOne {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.SetContactID(v)
	})
}

// UpdateContactID sets the "contact_id" field to the value that was provided on create.
func (u *CustomerContactOnClinicsUpsertOne) UpdateContactID() *CustomerContactOnClinicsUpsertOne {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.UpdateContactID()
	})
}

// SetContactType sets the "contact_type" field.
func (u *CustomerContactOnClinicsUpsertOne) SetContactType(v string) *CustomerContactOnClinicsUpsertOne {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.SetContactType(v)
	})
}

// UpdateContactType sets the "contact_type" field to the value that was provided on create.
func (u *CustomerContactOnClinicsUpsertOne) UpdateContactType() *CustomerContactOnClinicsUpsertOne {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.UpdateContactType()
	})
}

// ClearContactType clears the value of the "contact_type" field.
func (u *CustomerContactOnClinicsUpsertOne) ClearContactType() *CustomerContactOnClinicsUpsertOne {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.ClearContactType()
	})
}

// Exec executes the query.
func (u *CustomerContactOnClinicsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CustomerContactOnClinicsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerContactOnClinicsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CustomerContactOnClinicsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CustomerContactOnClinicsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CustomerContactOnClinicsCreateBulk is the builder for creating many CustomerContactOnClinics entities in bulk.
type CustomerContactOnClinicsCreateBulk struct {
	config
	err      error
	builders []*CustomerContactOnClinicsCreate
	conflict []sql.ConflictOption
}

// Save creates the CustomerContactOnClinics entities in the database.
func (ccoccb *CustomerContactOnClinicsCreateBulk) Save(ctx context.Context) ([]*CustomerContactOnClinics, error) {
	if ccoccb.err != nil {
		return nil, ccoccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccoccb.builders))
	nodes := make([]*CustomerContactOnClinics, len(ccoccb.builders))
	mutators := make([]Mutator, len(ccoccb.builders))
	for i := range ccoccb.builders {
		func(i int, root context.Context) {
			builder := ccoccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerContactOnClinicsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccoccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccoccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccoccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccoccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccoccb *CustomerContactOnClinicsCreateBulk) SaveX(ctx context.Context) []*CustomerContactOnClinics {
	v, err := ccoccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccoccb *CustomerContactOnClinicsCreateBulk) Exec(ctx context.Context) error {
	_, err := ccoccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccoccb *CustomerContactOnClinicsCreateBulk) ExecX(ctx context.Context) {
	if err := ccoccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CustomerContactOnClinics.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerContactOnClinicsUpsert) {
//			SetCustomerID(v+v).
//		}).
//		Exec(ctx)
func (ccoccb *CustomerContactOnClinicsCreateBulk) OnConflict(opts ...sql.ConflictOption) *CustomerContactOnClinicsUpsertBulk {
	ccoccb.conflict = opts
	return &CustomerContactOnClinicsUpsertBulk{
		create: ccoccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CustomerContactOnClinics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccoccb *CustomerContactOnClinicsCreateBulk) OnConflictColumns(columns ...string) *CustomerContactOnClinicsUpsertBulk {
	ccoccb.conflict = append(ccoccb.conflict, sql.ConflictColumns(columns...))
	return &CustomerContactOnClinicsUpsertBulk{
		create: ccoccb,
	}
}

// CustomerContactOnClinicsUpsertBulk is the builder for "upsert"-ing
// a bulk of CustomerContactOnClinics nodes.
type CustomerContactOnClinicsUpsertBulk struct {
	create *CustomerContactOnClinicsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CustomerContactOnClinics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CustomerContactOnClinicsUpsertBulk) UpdateNewValues() *CustomerContactOnClinicsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CustomerContactOnClinics.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CustomerContactOnClinicsUpsertBulk) Ignore() *CustomerContactOnClinicsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerContactOnClinicsUpsertBulk) DoNothing() *CustomerContactOnClinicsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerContactOnClinicsCreateBulk.OnConflict
// documentation for more info.
func (u *CustomerContactOnClinicsUpsertBulk) Update(set func(*CustomerContactOnClinicsUpsert)) *CustomerContactOnClinicsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerContactOnClinicsUpsert{UpdateSet: update})
	}))
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *CustomerContactOnClinicsUpsertBulk) SetCustomerID(v int) *CustomerContactOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CustomerContactOnClinicsUpsertBulk) UpdateCustomerID() *CustomerContactOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.UpdateCustomerID()
	})
}

// SetClinicID sets the "clinic_id" field.
func (u *CustomerContactOnClinicsUpsertBulk) SetClinicID(v int) *CustomerContactOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.SetClinicID(v)
	})
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *CustomerContactOnClinicsUpsertBulk) UpdateClinicID() *CustomerContactOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.UpdateClinicID()
	})
}

// SetContactID sets the "contact_id" field.
func (u *CustomerContactOnClinicsUpsertBulk) SetContactID(v int) *CustomerContactOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.SetContactID(v)
	})
}

// UpdateContactID sets the "contact_id" field to the value that was provided on create.
func (u *CustomerContactOnClinicsUpsertBulk) UpdateContactID() *CustomerContactOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.UpdateContactID()
	})
}

// SetContactType sets the "contact_type" field.
func (u *CustomerContactOnClinicsUpsertBulk) SetContactType(v string) *CustomerContactOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.SetContactType(v)
	})
}

// UpdateContactType sets the "contact_type" field to the value that was provided on create.
func (u *CustomerContactOnClinicsUpsertBulk) UpdateContactType() *CustomerContactOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.UpdateContactType()
	})
}

// ClearContactType clears the value of the "contact_type" field.
func (u *CustomerContactOnClinicsUpsertBulk) ClearContactType() *CustomerContactOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerContactOnClinicsUpsert) {
		s.ClearContactType()
	})
}

// Exec executes the query.
func (u *CustomerContactOnClinicsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CustomerContactOnClinicsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CustomerContactOnClinicsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerContactOnClinicsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
