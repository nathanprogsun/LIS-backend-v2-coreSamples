// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/labordersendhistory"
	"coresamples/ent/sample"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LabOrderSendHistory is the model entity for the LabOrderSendHistory schema.
type LabOrderSendHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"lab_order_id"`
	// SampleID holds the value of the "sample_id" field.
	SampleID int `json:"sample_id,omitempty"`
	// TubeType holds the value of the "tube_type" field.
	TubeType string `json:"tube_type,omitempty"`
	// SendoutTime holds the value of the "sendout_time" field.
	SendoutTime time.Time `json:"sendout_time,omitempty"`
	// IsRedrawOrder holds the value of the "is_redraw_order" field.
	IsRedrawOrder bool `json:"is_redraw_order,omitempty"`
	// IsLabSpecialOrder holds the value of the "is_lab_special_order" field.
	IsLabSpecialOrder bool `json:"is_lab_special_order,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// IsResendBlocked holds the value of the "is_resend_blocked" field.
	IsResendBlocked bool `json:"is_resend_blocked,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LabOrderSendHistoryQuery when eager-loading is set.
	Edges        LabOrderSendHistoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LabOrderSendHistoryEdges holds the relations/edges for other nodes in the graph.
type LabOrderSendHistoryEdges struct {
	// Sample holds the value of the sample edge.
	Sample *Sample `json:"sample,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SampleOrErr returns the Sample value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LabOrderSendHistoryEdges) SampleOrErr() (*Sample, error) {
	if e.loadedTypes[0] {
		if e.Sample == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: sample.Label}
		}
		return e.Sample, nil
	}
	return nil, &NotLoadedError{edge: "sample"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LabOrderSendHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case labordersendhistory.FieldIsRedrawOrder, labordersendhistory.FieldIsLabSpecialOrder, labordersendhistory.FieldIsResendBlocked:
			values[i] = new(sql.NullBool)
		case labordersendhistory.FieldID, labordersendhistory.FieldSampleID:
			values[i] = new(sql.NullInt64)
		case labordersendhistory.FieldTubeType, labordersendhistory.FieldAction:
			values[i] = new(sql.NullString)
		case labordersendhistory.FieldSendoutTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LabOrderSendHistory fields.
func (losh *LabOrderSendHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case labordersendhistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			losh.ID = int(value.Int64)
		case labordersendhistory.FieldSampleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sample_id", values[i])
			} else if value.Valid {
				losh.SampleID = int(value.Int64)
			}
		case labordersendhistory.FieldTubeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tube_type", values[i])
			} else if value.Valid {
				losh.TubeType = value.String
			}
		case labordersendhistory.FieldSendoutTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sendout_time", values[i])
			} else if value.Valid {
				losh.SendoutTime = value.Time
			}
		case labordersendhistory.FieldIsRedrawOrder:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_redraw_order", values[i])
			} else if value.Valid {
				losh.IsRedrawOrder = value.Bool
			}
		case labordersendhistory.FieldIsLabSpecialOrder:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_lab_special_order", values[i])
			} else if value.Valid {
				losh.IsLabSpecialOrder = value.Bool
			}
		case labordersendhistory.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				losh.Action = value.String
			}
		case labordersendhistory.FieldIsResendBlocked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_resend_blocked", values[i])
			} else if value.Valid {
				losh.IsResendBlocked = value.Bool
			}
		default:
			losh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LabOrderSendHistory.
// This includes values selected through modifiers, order, etc.
func (losh *LabOrderSendHistory) Value(name string) (ent.Value, error) {
	return losh.selectValues.Get(name)
}

// QuerySample queries the "sample" edge of the LabOrderSendHistory entity.
func (losh *LabOrderSendHistory) QuerySample() *SampleQuery {
	return NewLabOrderSendHistoryClient(losh.config).QuerySample(losh)
}

// Update returns a builder for updating this LabOrderSendHistory.
// Note that you need to call LabOrderSendHistory.Unwrap() before calling this method if this LabOrderSendHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (losh *LabOrderSendHistory) Update() *LabOrderSendHistoryUpdateOne {
	return NewLabOrderSendHistoryClient(losh.config).UpdateOne(losh)
}

// Unwrap unwraps the LabOrderSendHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (losh *LabOrderSendHistory) Unwrap() *LabOrderSendHistory {
	_tx, ok := losh.config.driver.(*txDriver)
	if !ok {
		panic("ent: LabOrderSendHistory is not a transactional entity")
	}
	losh.config.driver = _tx.drv
	return losh
}

// String implements the fmt.Stringer.
func (losh *LabOrderSendHistory) String() string {
	var builder strings.Builder
	builder.WriteString("LabOrderSendHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", losh.ID))
	builder.WriteString("sample_id=")
	builder.WriteString(fmt.Sprintf("%v", losh.SampleID))
	builder.WriteString(", ")
	builder.WriteString("tube_type=")
	builder.WriteString(losh.TubeType)
	builder.WriteString(", ")
	builder.WriteString("sendout_time=")
	builder.WriteString(losh.SendoutTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_redraw_order=")
	builder.WriteString(fmt.Sprintf("%v", losh.IsRedrawOrder))
	builder.WriteString(", ")
	builder.WriteString("is_lab_special_order=")
	builder.WriteString(fmt.Sprintf("%v", losh.IsLabSpecialOrder))
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(losh.Action)
	builder.WriteString(", ")
	builder.WriteString("is_resend_blocked=")
	builder.WriteString(fmt.Sprintf("%v", losh.IsResendBlocked))
	builder.WriteByte(')')
	return builder.String()
}

// LabOrderSendHistories is a parsable slice of LabOrderSendHistory.
type LabOrderSendHistories []*LabOrderSendHistory
