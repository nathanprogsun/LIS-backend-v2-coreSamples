// Code generated by ent, DO NOT EDIT.

package salesterritory

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the salesterritory type in the database.
	Label = "sales_territory"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSales holds the string denoting the sales field in the database.
	FieldSales = "sales"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldZipcode holds the string denoting the zipcode field in the database.
	FieldZipcode = "zipcode"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the salesterritory in the database.
	Table = "sales_territory"
)

// Columns holds all SQL columns for salesterritory fields.
var Columns = []string{
	FieldID,
	FieldSales,
	FieldState,
	FieldZipcode,
	FieldCountry,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the SalesTerritory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySales orders the results by the sales field.
func BySales(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSales, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByZipcode orders the results by the zipcode field.
func ByZipcode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldZipcode, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
