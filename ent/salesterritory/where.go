// Code generated by ent, DO NOT EDIT.

package salesterritory

import (
	"coresamples/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldLTE(FieldID, id))
}

// Sales applies equality check predicate on the "sales" field. It's identical to SalesEQ.
func Sales(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldEQ(FieldSales, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldEQ(FieldState, v))
}

// Zipcode applies equality check predicate on the "zipcode" field. It's identical to ZipcodeEQ.
func Zipcode(v int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldEQ(FieldZipcode, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldEQ(FieldCountry, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldEQ(FieldUpdatedAt, v))
}

// SalesEQ applies the EQ predicate on the "sales" field.
func SalesEQ(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldEQ(FieldSales, v))
}

// SalesNEQ applies the NEQ predicate on the "sales" field.
func SalesNEQ(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldNEQ(FieldSales, v))
}

// SalesIn applies the In predicate on the "sales" field.
func SalesIn(vs ...string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldIn(FieldSales, vs...))
}

// SalesNotIn applies the NotIn predicate on the "sales" field.
func SalesNotIn(vs ...string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldNotIn(FieldSales, vs...))
}

// SalesGT applies the GT predicate on the "sales" field.
func SalesGT(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldGT(FieldSales, v))
}

// SalesGTE applies the GTE predicate on the "sales" field.
func SalesGTE(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldGTE(FieldSales, v))
}

// SalesLT applies the LT predicate on the "sales" field.
func SalesLT(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldLT(FieldSales, v))
}

// SalesLTE applies the LTE predicate on the "sales" field.
func SalesLTE(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldLTE(FieldSales, v))
}

// SalesContains applies the Contains predicate on the "sales" field.
func SalesContains(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldContains(FieldSales, v))
}

// SalesHasPrefix applies the HasPrefix predicate on the "sales" field.
func SalesHasPrefix(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldHasPrefix(FieldSales, v))
}

// SalesHasSuffix applies the HasSuffix predicate on the "sales" field.
func SalesHasSuffix(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldHasSuffix(FieldSales, v))
}

// SalesEqualFold applies the EqualFold predicate on the "sales" field.
func SalesEqualFold(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldEqualFold(FieldSales, v))
}

// SalesContainsFold applies the ContainsFold predicate on the "sales" field.
func SalesContainsFold(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldContainsFold(FieldSales, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldHasSuffix(FieldState, v))
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldIsNull(FieldState))
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldNotNull(FieldState))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldContainsFold(FieldState, v))
}

// ZipcodeEQ applies the EQ predicate on the "zipcode" field.
func ZipcodeEQ(v int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldEQ(FieldZipcode, v))
}

// ZipcodeNEQ applies the NEQ predicate on the "zipcode" field.
func ZipcodeNEQ(v int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldNEQ(FieldZipcode, v))
}

// ZipcodeIn applies the In predicate on the "zipcode" field.
func ZipcodeIn(vs ...int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldIn(FieldZipcode, vs...))
}

// ZipcodeNotIn applies the NotIn predicate on the "zipcode" field.
func ZipcodeNotIn(vs ...int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldNotIn(FieldZipcode, vs...))
}

// ZipcodeGT applies the GT predicate on the "zipcode" field.
func ZipcodeGT(v int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldGT(FieldZipcode, v))
}

// ZipcodeGTE applies the GTE predicate on the "zipcode" field.
func ZipcodeGTE(v int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldGTE(FieldZipcode, v))
}

// ZipcodeLT applies the LT predicate on the "zipcode" field.
func ZipcodeLT(v int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldLT(FieldZipcode, v))
}

// ZipcodeLTE applies the LTE predicate on the "zipcode" field.
func ZipcodeLTE(v int) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldLTE(FieldZipcode, v))
}

// ZipcodeIsNil applies the IsNil predicate on the "zipcode" field.
func ZipcodeIsNil() predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldIsNull(FieldZipcode))
}

// ZipcodeNotNil applies the NotNil predicate on the "zipcode" field.
func ZipcodeNotNil() predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldNotNull(FieldZipcode))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryIsNil applies the IsNil predicate on the "country" field.
func CountryIsNil() predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldIsNull(FieldCountry))
}

// CountryNotNil applies the NotNil predicate on the "country" field.
func CountryNotNil() predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldNotNull(FieldCountry))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldContainsFold(FieldCountry, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updatedAt" field.
func UpdatedAtIsNil() predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updatedAt" field.
func UpdatedAtNotNil() predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.FieldNotNull(FieldUpdatedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SalesTerritory) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SalesTerritory) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SalesTerritory) predicate.SalesTerritory {
	return predicate.SalesTerritory(sql.NotPredicates(p))
}
