// Code generated by ent, DO NOT EDIT.

package rbacroles

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the rbacroles type in the database.
	Label = "rbac_roles"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldInternalName holds the string denoting the internal_name field in the database.
	FieldInternalName = "internal_name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldClinicID holds the string denoting the clinic_id field in the database.
	FieldClinicID = "clinic_id"
	// Table holds the table name of the rbacroles in the database.
	Table = "rbac_roles"
)

// Columns holds all SQL columns for rbacroles fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldInternalName,
	FieldType,
	FieldClinicID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// InternalNameValidator is a validator for the "internal_name" field. It is called by the builders before save.
	InternalNameValidator func(string) error
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeInternal Type = "internal"
	TypeExternal Type = "external"
	TypeClinic   Type = "clinic"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeInternal, TypeExternal, TypeClinic:
		return nil
	default:
		return fmt.Errorf("rbacroles: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the RBACRoles queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByInternalName orders the results by the internal_name field.
func ByInternalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByClinicID orders the results by the clinic_id field.
func ByClinicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClinicID, opts...).ToFunc()
}
