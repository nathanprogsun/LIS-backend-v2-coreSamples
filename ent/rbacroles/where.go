// Code generated by ent, DO NOT EDIT.

package rbacroles

import (
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldEQ(FieldName, v))
}

// InternalName applies equality check predicate on the "internal_name" field. It's identical to InternalNameEQ.
func InternalName(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldEQ(FieldInternalName, v))
}

// ClinicID applies equality check predicate on the "clinic_id" field. It's identical to ClinicIDEQ.
func ClinicID(v int32) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldEQ(FieldClinicID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldContainsFold(FieldName, v))
}

// InternalNameEQ applies the EQ predicate on the "internal_name" field.
func InternalNameEQ(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldEQ(FieldInternalName, v))
}

// InternalNameNEQ applies the NEQ predicate on the "internal_name" field.
func InternalNameNEQ(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldNEQ(FieldInternalName, v))
}

// InternalNameIn applies the In predicate on the "internal_name" field.
func InternalNameIn(vs ...string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldIn(FieldInternalName, vs...))
}

// InternalNameNotIn applies the NotIn predicate on the "internal_name" field.
func InternalNameNotIn(vs ...string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldNotIn(FieldInternalName, vs...))
}

// InternalNameGT applies the GT predicate on the "internal_name" field.
func InternalNameGT(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldGT(FieldInternalName, v))
}

// InternalNameGTE applies the GTE predicate on the "internal_name" field.
func InternalNameGTE(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldGTE(FieldInternalName, v))
}

// InternalNameLT applies the LT predicate on the "internal_name" field.
func InternalNameLT(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldLT(FieldInternalName, v))
}

// InternalNameLTE applies the LTE predicate on the "internal_name" field.
func InternalNameLTE(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldLTE(FieldInternalName, v))
}

// InternalNameContains applies the Contains predicate on the "internal_name" field.
func InternalNameContains(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldContains(FieldInternalName, v))
}

// InternalNameHasPrefix applies the HasPrefix predicate on the "internal_name" field.
func InternalNameHasPrefix(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldHasPrefix(FieldInternalName, v))
}

// InternalNameHasSuffix applies the HasSuffix predicate on the "internal_name" field.
func InternalNameHasSuffix(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldHasSuffix(FieldInternalName, v))
}

// InternalNameEqualFold applies the EqualFold predicate on the "internal_name" field.
func InternalNameEqualFold(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldEqualFold(FieldInternalName, v))
}

// InternalNameContainsFold applies the ContainsFold predicate on the "internal_name" field.
func InternalNameContainsFold(v string) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldContainsFold(FieldInternalName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldNotIn(FieldType, vs...))
}

// ClinicIDEQ applies the EQ predicate on the "clinic_id" field.
func ClinicIDEQ(v int32) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldEQ(FieldClinicID, v))
}

// ClinicIDNEQ applies the NEQ predicate on the "clinic_id" field.
func ClinicIDNEQ(v int32) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldNEQ(FieldClinicID, v))
}

// ClinicIDIn applies the In predicate on the "clinic_id" field.
func ClinicIDIn(vs ...int32) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldIn(FieldClinicID, vs...))
}

// ClinicIDNotIn applies the NotIn predicate on the "clinic_id" field.
func ClinicIDNotIn(vs ...int32) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldNotIn(FieldClinicID, vs...))
}

// ClinicIDGT applies the GT predicate on the "clinic_id" field.
func ClinicIDGT(v int32) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldGT(FieldClinicID, v))
}

// ClinicIDGTE applies the GTE predicate on the "clinic_id" field.
func ClinicIDGTE(v int32) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldGTE(FieldClinicID, v))
}

// ClinicIDLT applies the LT predicate on the "clinic_id" field.
func ClinicIDLT(v int32) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldLT(FieldClinicID, v))
}

// ClinicIDLTE applies the LTE predicate on the "clinic_id" field.
func ClinicIDLTE(v int32) predicate.RBACRoles {
	return predicate.RBACRoles(sql.FieldLTE(FieldClinicID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RBACRoles) predicate.RBACRoles {
	return predicate.RBACRoles(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RBACRoles) predicate.RBACRoles {
	return predicate.RBACRoles(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RBACRoles) predicate.RBACRoles {
	return predicate.RBACRoles(sql.NotPredicates(p))
}
