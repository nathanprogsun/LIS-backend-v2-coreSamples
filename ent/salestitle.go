// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/salestitle"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SalesTitle is the model entity for the SalesTitle schema.
type SalesTitle struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TitleName holds the value of the "title_name" field.
	TitleName string `json:"title_name,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime time.Time `json:"created_time,omitempty"`
	// UpdatedTime holds the value of the "updated_time" field.
	UpdatedTime time.Time `json:"updated_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SalesTitleQuery when eager-loading is set.
	Edges        SalesTitleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SalesTitleEdges holds the relations/edges for other nodes in the graph.
type SalesTitleEdges struct {
	// Sales holds the value of the sales edge.
	Sales []*SalesTeam `json:"sales,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SalesOrErr returns the Sales value or an error if the edge
// was not loaded in eager-loading.
func (e SalesTitleEdges) SalesOrErr() ([]*SalesTeam, error) {
	if e.loadedTypes[0] {
		return e.Sales, nil
	}
	return nil, &NotLoadedError{edge: "sales"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SalesTitle) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case salestitle.FieldID, salestitle.FieldOrder:
			values[i] = new(sql.NullInt64)
		case salestitle.FieldTitleName:
			values[i] = new(sql.NullString)
		case salestitle.FieldCreatedTime, salestitle.FieldUpdatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SalesTitle fields.
func (st *SalesTitle) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case salestitle.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case salestitle.FieldTitleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title_name", values[i])
			} else if value.Valid {
				st.TitleName = value.String
			}
		case salestitle.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				st.Order = int(value.Int64)
			}
		case salestitle.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				st.CreatedTime = value.Time
			}
		case salestitle.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				st.UpdatedTime = value.Time
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SalesTitle.
// This includes values selected through modifiers, order, etc.
func (st *SalesTitle) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// QuerySales queries the "sales" edge of the SalesTitle entity.
func (st *SalesTitle) QuerySales() *SalesTeamQuery {
	return NewSalesTitleClient(st.config).QuerySales(st)
}

// Update returns a builder for updating this SalesTitle.
// Note that you need to call SalesTitle.Unwrap() before calling this method if this SalesTitle
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SalesTitle) Update() *SalesTitleUpdateOne {
	return NewSalesTitleClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the SalesTitle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SalesTitle) Unwrap() *SalesTitle {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SalesTitle is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SalesTitle) String() string {
	var builder strings.Builder
	builder.WriteString("SalesTitle(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("title_name=")
	builder.WriteString(st.TitleName)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", st.Order))
	builder.WriteString(", ")
	builder.WriteString("created_time=")
	builder.WriteString(st.CreatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_time=")
	builder.WriteString(st.UpdatedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SalesTitles is a parsable slice of SalesTitle.
type SalesTitles []*SalesTitle
