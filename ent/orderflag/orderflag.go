// Code generated by ent, DO NOT EDIT.

package orderflag

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the orderflag type in the database.
	Label = "order_flag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "order_flag_id"
	// FieldOrderFlagName holds the string denoting the order_flag_name field in the database.
	FieldOrderFlagName = "order_flag_name"
	// FieldOrderFlagDescription holds the string denoting the order_flag_description field in the database.
	FieldOrderFlagDescription = "order_flag_description"
	// FieldOrderFlagDisplayName holds the string denoting the order_flag_display_name field in the database.
	FieldOrderFlagDisplayName = "order_flag_display_name"
	// FieldOrderFlagIsActive holds the string denoting the order_flag_is_active field in the database.
	FieldOrderFlagIsActive = "order_flag_is_active"
	// FieldOrderFlagCreatedAt holds the string denoting the order_flag_created_at field in the database.
	FieldOrderFlagCreatedAt = "order_flag_created_at"
	// FieldOrderFlagColor holds the string denoting the order_flag_color field in the database.
	FieldOrderFlagColor = "order_flag_color"
	// FieldOrderFlagedBy holds the string denoting the order_flaged_by field in the database.
	FieldOrderFlagedBy = "order_flaged_by"
	// FieldOrderFlagAllowDuplicatesUnderSameCategory holds the string denoting the order_flag_allow_duplicates_under_same_category field in the database.
	FieldOrderFlagAllowDuplicatesUnderSameCategory = "order_flag_allow_duplicates_under_same_category"
	// FieldOrderFlagCategory holds the string denoting the order_flag_category field in the database.
	FieldOrderFlagCategory = "order_flag_category"
	// FieldOrderFlagLevel holds the string denoting the order_flag_level field in the database.
	FieldOrderFlagLevel = "order_flag_level"
	// EdgeFlaggedOrders holds the string denoting the flagged_orders edge name in mutations.
	EdgeFlaggedOrders = "flagged_orders"
	// OrderInfoFieldID holds the string denoting the ID field of the OrderInfo.
	OrderInfoFieldID = "order_id"
	// Table holds the table name of the orderflag in the database.
	Table = "order_flag"
	// FlaggedOrdersTable is the table that holds the flagged_orders relation/edge. The primary key declared below.
	FlaggedOrdersTable = "_order_flag_to_order"
	// FlaggedOrdersInverseTable is the table name for the OrderInfo entity.
	// It exists in this package in order to avoid circular dependency with the "orderinfo" package.
	FlaggedOrdersInverseTable = "order_info"
)

// Columns holds all SQL columns for orderflag fields.
var Columns = []string{
	FieldID,
	FieldOrderFlagName,
	FieldOrderFlagDescription,
	FieldOrderFlagDisplayName,
	FieldOrderFlagIsActive,
	FieldOrderFlagCreatedAt,
	FieldOrderFlagColor,
	FieldOrderFlagedBy,
	FieldOrderFlagAllowDuplicatesUnderSameCategory,
	FieldOrderFlagCategory,
	FieldOrderFlagLevel,
}

var (
	// FlaggedOrdersPrimaryKey and FlaggedOrdersColumn2 are the table columns denoting the
	// primary key for the flagged_orders relation (M2M).
	FlaggedOrdersPrimaryKey = []string{"order_flag_id", "order_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultOrderFlagIsActive holds the default value on creation for the "order_flag_is_active" field.
	DefaultOrderFlagIsActive bool
	// DefaultOrderFlagCreatedAt holds the default value on creation for the "order_flag_created_at" field.
	DefaultOrderFlagCreatedAt func() time.Time
	// DefaultOrderFlagColor holds the default value on creation for the "order_flag_color" field.
	DefaultOrderFlagColor string
	// DefaultOrderFlagedBy holds the default value on creation for the "order_flaged_by" field.
	DefaultOrderFlagedBy string
	// DefaultOrderFlagAllowDuplicatesUnderSameCategory holds the default value on creation for the "order_flag_allow_duplicates_under_same_category" field.
	DefaultOrderFlagAllowDuplicatesUnderSameCategory bool
	// DefaultOrderFlagLevel holds the default value on creation for the "order_flag_level" field.
	DefaultOrderFlagLevel int
)

// OrderOption defines the ordering options for the OrderFlag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrderFlagName orders the results by the order_flag_name field.
func ByOrderFlagName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderFlagName, opts...).ToFunc()
}

// ByOrderFlagDescription orders the results by the order_flag_description field.
func ByOrderFlagDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderFlagDescription, opts...).ToFunc()
}

// ByOrderFlagDisplayName orders the results by the order_flag_display_name field.
func ByOrderFlagDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderFlagDisplayName, opts...).ToFunc()
}

// ByOrderFlagIsActive orders the results by the order_flag_is_active field.
func ByOrderFlagIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderFlagIsActive, opts...).ToFunc()
}

// ByOrderFlagCreatedAt orders the results by the order_flag_created_at field.
func ByOrderFlagCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderFlagCreatedAt, opts...).ToFunc()
}

// ByOrderFlagColor orders the results by the order_flag_color field.
func ByOrderFlagColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderFlagColor, opts...).ToFunc()
}

// ByOrderFlagedBy orders the results by the order_flaged_by field.
func ByOrderFlagedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderFlagedBy, opts...).ToFunc()
}

// ByOrderFlagAllowDuplicatesUnderSameCategory orders the results by the order_flag_allow_duplicates_under_same_category field.
func ByOrderFlagAllowDuplicatesUnderSameCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderFlagAllowDuplicatesUnderSameCategory, opts...).ToFunc()
}

// ByOrderFlagCategory orders the results by the order_flag_category field.
func ByOrderFlagCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderFlagCategory, opts...).ToFunc()
}

// ByOrderFlagLevel orders the results by the order_flag_level field.
func ByOrderFlagLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderFlagLevel, opts...).ToFunc()
}

// ByFlaggedOrdersCount orders the results by flagged_orders count.
func ByFlaggedOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFlaggedOrdersStep(), opts...)
	}
}

// ByFlaggedOrders orders the results by flagged_orders terms.
func ByFlaggedOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFlaggedOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFlaggedOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FlaggedOrdersInverseTable, OrderInfoFieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FlaggedOrdersTable, FlaggedOrdersPrimaryKey...),
	)
}
