// Code generated by ent, DO NOT EDIT.

package labordersendhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the labordersendhistory type in the database.
	Label = "lab_order_send_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "lab_order_id"
	// FieldSampleID holds the string denoting the sample_id field in the database.
	FieldSampleID = "sample_id"
	// FieldTubeType holds the string denoting the tube_type field in the database.
	FieldTubeType = "tube_type"
	// FieldSendoutTime holds the string denoting the sendout_time field in the database.
	FieldSendoutTime = "sendout_time"
	// FieldIsRedrawOrder holds the string denoting the is_redraw_order field in the database.
	FieldIsRedrawOrder = "is_redraw_order"
	// FieldIsLabSpecialOrder holds the string denoting the is_lab_special_order field in the database.
	FieldIsLabSpecialOrder = "is_lab_special_order"
	// FieldAction holds the string denoting the action field in the database.
	FieldAction = "action"
	// FieldIsResendBlocked holds the string denoting the is_resend_blocked field in the database.
	FieldIsResendBlocked = "is_resend_blocked"
	// EdgeSample holds the string denoting the sample edge name in mutations.
	EdgeSample = "sample"
	// SampleFieldID holds the string denoting the ID field of the Sample.
	SampleFieldID = "sample_id"
	// Table holds the table name of the labordersendhistory in the database.
	Table = "lab_order_send_history"
	// SampleTable is the table that holds the sample relation/edge.
	SampleTable = "lab_order_send_history"
	// SampleInverseTable is the table name for the Sample entity.
	// It exists in this package in order to avoid circular dependency with the "sample" package.
	SampleInverseTable = "sample"
	// SampleColumn is the table column denoting the sample relation/edge.
	SampleColumn = "sample_id"
)

// Columns holds all SQL columns for labordersendhistory fields.
var Columns = []string{
	FieldID,
	FieldSampleID,
	FieldTubeType,
	FieldSendoutTime,
	FieldIsRedrawOrder,
	FieldIsLabSpecialOrder,
	FieldAction,
	FieldIsResendBlocked,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSendoutTime holds the default value on creation for the "sendout_time" field.
	DefaultSendoutTime func() time.Time
	// DefaultIsRedrawOrder holds the default value on creation for the "is_redraw_order" field.
	DefaultIsRedrawOrder bool
	// DefaultIsLabSpecialOrder holds the default value on creation for the "is_lab_special_order" field.
	DefaultIsLabSpecialOrder bool
	// DefaultIsResendBlocked holds the default value on creation for the "is_resend_blocked" field.
	DefaultIsResendBlocked bool
)

// OrderOption defines the ordering options for the LabOrderSendHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySampleID orders the results by the sample_id field.
func BySampleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSampleID, opts...).ToFunc()
}

// ByTubeType orders the results by the tube_type field.
func ByTubeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTubeType, opts...).ToFunc()
}

// BySendoutTime orders the results by the sendout_time field.
func BySendoutTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSendoutTime, opts...).ToFunc()
}

// ByIsRedrawOrder orders the results by the is_redraw_order field.
func ByIsRedrawOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRedrawOrder, opts...).ToFunc()
}

// ByIsLabSpecialOrder orders the results by the is_lab_special_order field.
func ByIsLabSpecialOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsLabSpecialOrder, opts...).ToFunc()
}

// ByAction orders the results by the action field.
func ByAction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAction, opts...).ToFunc()
}

// ByIsResendBlocked orders the results by the is_resend_blocked field.
func ByIsResendBlocked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsResendBlocked, opts...).ToFunc()
}

// BySampleField orders the results by sample field.
func BySampleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSampleStep(), sql.OrderByField(field, opts...))
	}
}
func newSampleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SampleInverseTable, SampleFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SampleTable, SampleColumn),
	)
}
