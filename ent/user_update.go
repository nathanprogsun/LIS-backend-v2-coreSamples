// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/clinic"
	"coresamples/ent/customer"
	"coresamples/ent/internaluser"
	"coresamples/ent/patient"
	"coresamples/ent/predicate"
	"coresamples/ent/user"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUserName sets the "user_name" field.
func (uu *UserUpdate) SetUserName(s string) *UserUpdate {
	uu.mutation.SetUserName(s)
	return uu
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUserName(s *string) *UserUpdate {
	if s != nil {
		uu.SetUserName(*s)
	}
	return uu
}

// SetEmailUserID sets the "email_user_id" field.
func (uu *UserUpdate) SetEmailUserID(s string) *UserUpdate {
	uu.mutation.SetEmailUserID(s)
	return uu
}

// SetNillableEmailUserID sets the "email_user_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailUserID(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmailUserID(*s)
	}
	return uu
}

// ClearEmailUserID clears the value of the "email_user_id" field.
func (uu *UserUpdate) ClearEmailUserID() *UserUpdate {
	uu.mutation.ClearEmailUserID()
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// SetTwoFactorAuthenticationSecret sets the "two_factor_authentication_secret" field.
func (uu *UserUpdate) SetTwoFactorAuthenticationSecret(s string) *UserUpdate {
	uu.mutation.SetTwoFactorAuthenticationSecret(s)
	return uu
}

// SetNillableTwoFactorAuthenticationSecret sets the "two_factor_authentication_secret" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTwoFactorAuthenticationSecret(s *string) *UserUpdate {
	if s != nil {
		uu.SetTwoFactorAuthenticationSecret(*s)
	}
	return uu
}

// ClearTwoFactorAuthenticationSecret clears the value of the "two_factor_authentication_secret" field.
func (uu *UserUpdate) ClearTwoFactorAuthenticationSecret() *UserUpdate {
	uu.mutation.ClearTwoFactorAuthenticationSecret()
	return uu
}

// SetIsTwoFactorAuthenticationEnabled sets the "is_two_factor_authentication_enabled" field.
func (uu *UserUpdate) SetIsTwoFactorAuthenticationEnabled(b bool) *UserUpdate {
	uu.mutation.SetIsTwoFactorAuthenticationEnabled(b)
	return uu
}

// SetNillableIsTwoFactorAuthenticationEnabled sets the "is_two_factor_authentication_enabled" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsTwoFactorAuthenticationEnabled(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsTwoFactorAuthenticationEnabled(*b)
	}
	return uu
}

// SetUserGroup sets the "user_group" field.
func (uu *UserUpdate) SetUserGroup(s string) *UserUpdate {
	uu.mutation.SetUserGroup(s)
	return uu
}

// SetNillableUserGroup sets the "user_group" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUserGroup(s *string) *UserUpdate {
	if s != nil {
		uu.SetUserGroup(*s)
	}
	return uu
}

// ClearUserGroup clears the value of the "user_group" field.
func (uu *UserUpdate) ClearUserGroup() *UserUpdate {
	uu.mutation.ClearUserGroup()
	return uu
}

// SetImportedUserWithSaltPassword sets the "imported_user_with_salt_password" field.
func (uu *UserUpdate) SetImportedUserWithSaltPassword(b bool) *UserUpdate {
	uu.mutation.SetImportedUserWithSaltPassword(b)
	return uu
}

// SetNillableImportedUserWithSaltPassword sets the "imported_user_with_salt_password" field if the given value is not nil.
func (uu *UserUpdate) SetNillableImportedUserWithSaltPassword(b *bool) *UserUpdate {
	if b != nil {
		uu.SetImportedUserWithSaltPassword(*b)
	}
	return uu
}

// SetIsActive sets the "is_active" field.
func (uu *UserUpdate) SetIsActive(b bool) *UserUpdate {
	uu.mutation.SetIsActive(b)
	return uu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsActive(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsActive(*b)
	}
	return uu
}

// AddClinicIDs adds the "clinic" edge to the Clinic entity by IDs.
func (uu *UserUpdate) AddClinicIDs(ids ...int) *UserUpdate {
	uu.mutation.AddClinicIDs(ids...)
	return uu
}

// AddClinic adds the "clinic" edges to the Clinic entity.
func (uu *UserUpdate) AddClinic(c ...*Clinic) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddClinicIDs(ids...)
}

// AddCustomerIDs adds the "customer" edge to the Customer entity by IDs.
func (uu *UserUpdate) AddCustomerIDs(ids ...int) *UserUpdate {
	uu.mutation.AddCustomerIDs(ids...)
	return uu
}

// AddCustomer adds the "customer" edges to the Customer entity.
func (uu *UserUpdate) AddCustomer(c ...*Customer) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCustomerIDs(ids...)
}

// AddPatientIDs adds the "patient" edge to the Patient entity by IDs.
func (uu *UserUpdate) AddPatientIDs(ids ...int) *UserUpdate {
	uu.mutation.AddPatientIDs(ids...)
	return uu
}

// AddPatient adds the "patient" edges to the Patient entity.
func (uu *UserUpdate) AddPatient(p ...*Patient) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPatientIDs(ids...)
}

// AddInternalUserIDs adds the "internal_user" edge to the InternalUser entity by IDs.
func (uu *UserUpdate) AddInternalUserIDs(ids ...int) *UserUpdate {
	uu.mutation.AddInternalUserIDs(ids...)
	return uu
}

// AddInternalUser adds the "internal_user" edges to the InternalUser entity.
func (uu *UserUpdate) AddInternalUser(i ...*InternalUser) *UserUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddInternalUserIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearClinic clears all "clinic" edges to the Clinic entity.
func (uu *UserUpdate) ClearClinic() *UserUpdate {
	uu.mutation.ClearClinic()
	return uu
}

// RemoveClinicIDs removes the "clinic" edge to Clinic entities by IDs.
func (uu *UserUpdate) RemoveClinicIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveClinicIDs(ids...)
	return uu
}

// RemoveClinic removes "clinic" edges to Clinic entities.
func (uu *UserUpdate) RemoveClinic(c ...*Clinic) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveClinicIDs(ids...)
}

// ClearCustomer clears all "customer" edges to the Customer entity.
func (uu *UserUpdate) ClearCustomer() *UserUpdate {
	uu.mutation.ClearCustomer()
	return uu
}

// RemoveCustomerIDs removes the "customer" edge to Customer entities by IDs.
func (uu *UserUpdate) RemoveCustomerIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveCustomerIDs(ids...)
	return uu
}

// RemoveCustomer removes "customer" edges to Customer entities.
func (uu *UserUpdate) RemoveCustomer(c ...*Customer) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCustomerIDs(ids...)
}

// ClearPatient clears all "patient" edges to the Patient entity.
func (uu *UserUpdate) ClearPatient() *UserUpdate {
	uu.mutation.ClearPatient()
	return uu
}

// RemovePatientIDs removes the "patient" edge to Patient entities by IDs.
func (uu *UserUpdate) RemovePatientIDs(ids ...int) *UserUpdate {
	uu.mutation.RemovePatientIDs(ids...)
	return uu
}

// RemovePatient removes "patient" edges to Patient entities.
func (uu *UserUpdate) RemovePatient(p ...*Patient) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePatientIDs(ids...)
}

// ClearInternalUser clears all "internal_user" edges to the InternalUser entity.
func (uu *UserUpdate) ClearInternalUser() *UserUpdate {
	uu.mutation.ClearInternalUser()
	return uu
}

// RemoveInternalUserIDs removes the "internal_user" edge to InternalUser entities by IDs.
func (uu *UserUpdate) RemoveInternalUserIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveInternalUserIDs(ids...)
	return uu
}

// RemoveInternalUser removes "internal_user" edges to InternalUser entities.
func (uu *UserUpdate) RemoveInternalUser(i ...*InternalUser) *UserUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveInternalUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UserName(); ok {
		_spec.SetField(user.FieldUserName, field.TypeString, value)
	}
	if value, ok := uu.mutation.EmailUserID(); ok {
		_spec.SetField(user.FieldEmailUserID, field.TypeString, value)
	}
	if uu.mutation.EmailUserIDCleared() {
		_spec.ClearField(user.FieldEmailUserID, field.TypeString)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.TwoFactorAuthenticationSecret(); ok {
		_spec.SetField(user.FieldTwoFactorAuthenticationSecret, field.TypeString, value)
	}
	if uu.mutation.TwoFactorAuthenticationSecretCleared() {
		_spec.ClearField(user.FieldTwoFactorAuthenticationSecret, field.TypeString)
	}
	if value, ok := uu.mutation.IsTwoFactorAuthenticationEnabled(); ok {
		_spec.SetField(user.FieldIsTwoFactorAuthenticationEnabled, field.TypeBool, value)
	}
	if value, ok := uu.mutation.UserGroup(); ok {
		_spec.SetField(user.FieldUserGroup, field.TypeString, value)
	}
	if uu.mutation.UserGroupCleared() {
		_spec.ClearField(user.FieldUserGroup, field.TypeString)
	}
	if value, ok := uu.mutation.ImportedUserWithSaltPassword(); ok {
		_spec.SetField(user.FieldImportedUserWithSaltPassword, field.TypeBool, value)
	}
	if value, ok := uu.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
	}
	if uu.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ClinicTable,
			Columns: []string{user.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedClinicIDs(); len(nodes) > 0 && !uu.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ClinicTable,
			Columns: []string{user.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ClinicTable,
			Columns: []string{user.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CustomerTable,
			Columns: []string{user.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCustomerIDs(); len(nodes) > 0 && !uu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CustomerTable,
			Columns: []string{user.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CustomerTable,
			Columns: []string{user.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PatientTable,
			Columns: []string{user.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPatientIDs(); len(nodes) > 0 && !uu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PatientTable,
			Columns: []string{user.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PatientTable,
			Columns: []string{user.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.InternalUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InternalUserTable,
			Columns: []string{user.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedInternalUserIDs(); len(nodes) > 0 && !uu.mutation.InternalUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InternalUserTable,
			Columns: []string{user.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.InternalUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InternalUserTable,
			Columns: []string{user.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUserName sets the "user_name" field.
func (uuo *UserUpdateOne) SetUserName(s string) *UserUpdateOne {
	uuo.mutation.SetUserName(s)
	return uuo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUserName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUserName(*s)
	}
	return uuo
}

// SetEmailUserID sets the "email_user_id" field.
func (uuo *UserUpdateOne) SetEmailUserID(s string) *UserUpdateOne {
	uuo.mutation.SetEmailUserID(s)
	return uuo
}

// SetNillableEmailUserID sets the "email_user_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailUserID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmailUserID(*s)
	}
	return uuo
}

// ClearEmailUserID clears the value of the "email_user_id" field.
func (uuo *UserUpdateOne) ClearEmailUserID() *UserUpdateOne {
	uuo.mutation.ClearEmailUserID()
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// SetTwoFactorAuthenticationSecret sets the "two_factor_authentication_secret" field.
func (uuo *UserUpdateOne) SetTwoFactorAuthenticationSecret(s string) *UserUpdateOne {
	uuo.mutation.SetTwoFactorAuthenticationSecret(s)
	return uuo
}

// SetNillableTwoFactorAuthenticationSecret sets the "two_factor_authentication_secret" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTwoFactorAuthenticationSecret(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetTwoFactorAuthenticationSecret(*s)
	}
	return uuo
}

// ClearTwoFactorAuthenticationSecret clears the value of the "two_factor_authentication_secret" field.
func (uuo *UserUpdateOne) ClearTwoFactorAuthenticationSecret() *UserUpdateOne {
	uuo.mutation.ClearTwoFactorAuthenticationSecret()
	return uuo
}

// SetIsTwoFactorAuthenticationEnabled sets the "is_two_factor_authentication_enabled" field.
func (uuo *UserUpdateOne) SetIsTwoFactorAuthenticationEnabled(b bool) *UserUpdateOne {
	uuo.mutation.SetIsTwoFactorAuthenticationEnabled(b)
	return uuo
}

// SetNillableIsTwoFactorAuthenticationEnabled sets the "is_two_factor_authentication_enabled" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsTwoFactorAuthenticationEnabled(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsTwoFactorAuthenticationEnabled(*b)
	}
	return uuo
}

// SetUserGroup sets the "user_group" field.
func (uuo *UserUpdateOne) SetUserGroup(s string) *UserUpdateOne {
	uuo.mutation.SetUserGroup(s)
	return uuo
}

// SetNillableUserGroup sets the "user_group" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUserGroup(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUserGroup(*s)
	}
	return uuo
}

// ClearUserGroup clears the value of the "user_group" field.
func (uuo *UserUpdateOne) ClearUserGroup() *UserUpdateOne {
	uuo.mutation.ClearUserGroup()
	return uuo
}

// SetImportedUserWithSaltPassword sets the "imported_user_with_salt_password" field.
func (uuo *UserUpdateOne) SetImportedUserWithSaltPassword(b bool) *UserUpdateOne {
	uuo.mutation.SetImportedUserWithSaltPassword(b)
	return uuo
}

// SetNillableImportedUserWithSaltPassword sets the "imported_user_with_salt_password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableImportedUserWithSaltPassword(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetImportedUserWithSaltPassword(*b)
	}
	return uuo
}

// SetIsActive sets the "is_active" field.
func (uuo *UserUpdateOne) SetIsActive(b bool) *UserUpdateOne {
	uuo.mutation.SetIsActive(b)
	return uuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsActive(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsActive(*b)
	}
	return uuo
}

// AddClinicIDs adds the "clinic" edge to the Clinic entity by IDs.
func (uuo *UserUpdateOne) AddClinicIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddClinicIDs(ids...)
	return uuo
}

// AddClinic adds the "clinic" edges to the Clinic entity.
func (uuo *UserUpdateOne) AddClinic(c ...*Clinic) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddClinicIDs(ids...)
}

// AddCustomerIDs adds the "customer" edge to the Customer entity by IDs.
func (uuo *UserUpdateOne) AddCustomerIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddCustomerIDs(ids...)
	return uuo
}

// AddCustomer adds the "customer" edges to the Customer entity.
func (uuo *UserUpdateOne) AddCustomer(c ...*Customer) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCustomerIDs(ids...)
}

// AddPatientIDs adds the "patient" edge to the Patient entity by IDs.
func (uuo *UserUpdateOne) AddPatientIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddPatientIDs(ids...)
	return uuo
}

// AddPatient adds the "patient" edges to the Patient entity.
func (uuo *UserUpdateOne) AddPatient(p ...*Patient) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPatientIDs(ids...)
}

// AddInternalUserIDs adds the "internal_user" edge to the InternalUser entity by IDs.
func (uuo *UserUpdateOne) AddInternalUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddInternalUserIDs(ids...)
	return uuo
}

// AddInternalUser adds the "internal_user" edges to the InternalUser entity.
func (uuo *UserUpdateOne) AddInternalUser(i ...*InternalUser) *UserUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddInternalUserIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearClinic clears all "clinic" edges to the Clinic entity.
func (uuo *UserUpdateOne) ClearClinic() *UserUpdateOne {
	uuo.mutation.ClearClinic()
	return uuo
}

// RemoveClinicIDs removes the "clinic" edge to Clinic entities by IDs.
func (uuo *UserUpdateOne) RemoveClinicIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveClinicIDs(ids...)
	return uuo
}

// RemoveClinic removes "clinic" edges to Clinic entities.
func (uuo *UserUpdateOne) RemoveClinic(c ...*Clinic) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveClinicIDs(ids...)
}

// ClearCustomer clears all "customer" edges to the Customer entity.
func (uuo *UserUpdateOne) ClearCustomer() *UserUpdateOne {
	uuo.mutation.ClearCustomer()
	return uuo
}

// RemoveCustomerIDs removes the "customer" edge to Customer entities by IDs.
func (uuo *UserUpdateOne) RemoveCustomerIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveCustomerIDs(ids...)
	return uuo
}

// RemoveCustomer removes "customer" edges to Customer entities.
func (uuo *UserUpdateOne) RemoveCustomer(c ...*Customer) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCustomerIDs(ids...)
}

// ClearPatient clears all "patient" edges to the Patient entity.
func (uuo *UserUpdateOne) ClearPatient() *UserUpdateOne {
	uuo.mutation.ClearPatient()
	return uuo
}

// RemovePatientIDs removes the "patient" edge to Patient entities by IDs.
func (uuo *UserUpdateOne) RemovePatientIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemovePatientIDs(ids...)
	return uuo
}

// RemovePatient removes "patient" edges to Patient entities.
func (uuo *UserUpdateOne) RemovePatient(p ...*Patient) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePatientIDs(ids...)
}

// ClearInternalUser clears all "internal_user" edges to the InternalUser entity.
func (uuo *UserUpdateOne) ClearInternalUser() *UserUpdateOne {
	uuo.mutation.ClearInternalUser()
	return uuo
}

// RemoveInternalUserIDs removes the "internal_user" edge to InternalUser entities by IDs.
func (uuo *UserUpdateOne) RemoveInternalUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveInternalUserIDs(ids...)
	return uuo
}

// RemoveInternalUser removes "internal_user" edges to InternalUser entities.
func (uuo *UserUpdateOne) RemoveInternalUser(i ...*InternalUser) *UserUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveInternalUserIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UserName(); ok {
		_spec.SetField(user.FieldUserName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.EmailUserID(); ok {
		_spec.SetField(user.FieldEmailUserID, field.TypeString, value)
	}
	if uuo.mutation.EmailUserIDCleared() {
		_spec.ClearField(user.FieldEmailUserID, field.TypeString)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.TwoFactorAuthenticationSecret(); ok {
		_spec.SetField(user.FieldTwoFactorAuthenticationSecret, field.TypeString, value)
	}
	if uuo.mutation.TwoFactorAuthenticationSecretCleared() {
		_spec.ClearField(user.FieldTwoFactorAuthenticationSecret, field.TypeString)
	}
	if value, ok := uuo.mutation.IsTwoFactorAuthenticationEnabled(); ok {
		_spec.SetField(user.FieldIsTwoFactorAuthenticationEnabled, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.UserGroup(); ok {
		_spec.SetField(user.FieldUserGroup, field.TypeString, value)
	}
	if uuo.mutation.UserGroupCleared() {
		_spec.ClearField(user.FieldUserGroup, field.TypeString)
	}
	if value, ok := uuo.mutation.ImportedUserWithSaltPassword(); ok {
		_spec.SetField(user.FieldImportedUserWithSaltPassword, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
	}
	if uuo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ClinicTable,
			Columns: []string{user.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedClinicIDs(); len(nodes) > 0 && !uuo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ClinicTable,
			Columns: []string{user.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ClinicTable,
			Columns: []string{user.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CustomerTable,
			Columns: []string{user.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCustomerIDs(); len(nodes) > 0 && !uuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CustomerTable,
			Columns: []string{user.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CustomerTable,
			Columns: []string{user.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PatientTable,
			Columns: []string{user.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPatientIDs(); len(nodes) > 0 && !uuo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PatientTable,
			Columns: []string{user.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PatientTable,
			Columns: []string{user.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.InternalUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InternalUserTable,
			Columns: []string{user.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedInternalUserIDs(); len(nodes) > 0 && !uuo.mutation.InternalUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InternalUserTable,
			Columns: []string{user.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.InternalUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InternalUserTable,
			Columns: []string{user.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
