// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/zipcode"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ZipcodeDelete is the builder for deleting a Zipcode entity.
type ZipcodeDelete struct {
	config
	hooks    []Hook
	mutation *ZipcodeMutation
}

// Where appends a list predicates to the ZipcodeDelete builder.
func (zd *ZipcodeDelete) Where(ps ...predicate.Zipcode) *ZipcodeDelete {
	zd.mutation.Where(ps...)
	return zd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (zd *ZipcodeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, zd.sqlExec, zd.mutation, zd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (zd *ZipcodeDelete) ExecX(ctx context.Context) int {
	n, err := zd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (zd *ZipcodeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(zipcode.Table, sqlgraph.NewFieldSpec(zipcode.FieldID, field.TypeInt))
	if ps := zd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, zd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	zd.mutation.done = true
	return affected, err
}

// ZipcodeDeleteOne is the builder for deleting a single Zipcode entity.
type ZipcodeDeleteOne struct {
	zd *ZipcodeDelete
}

// Where appends a list predicates to the ZipcodeDelete builder.
func (zdo *ZipcodeDeleteOne) Where(ps ...predicate.Zipcode) *ZipcodeDeleteOne {
	zdo.zd.mutation.Where(ps...)
	return zdo
}

// Exec executes the deletion query.
func (zdo *ZipcodeDeleteOne) Exec(ctx context.Context) error {
	n, err := zdo.zd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{zipcode.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (zdo *ZipcodeDeleteOne) ExecX(ctx context.Context) {
	if err := zdo.Exec(ctx); err != nil {
		panic(err)
	}
}
