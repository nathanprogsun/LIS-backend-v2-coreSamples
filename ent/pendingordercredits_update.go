// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/pendingordercredits"
	"coresamples/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PendingOrderCreditsUpdate is the builder for updating PendingOrderCredits entities.
type PendingOrderCreditsUpdate struct {
	config
	hooks    []Hook
	mutation *PendingOrderCreditsMutation
}

// Where appends a list predicates to the PendingOrderCreditsUpdate builder.
func (pocu *PendingOrderCreditsUpdate) Where(ps ...predicate.PendingOrderCredits) *PendingOrderCreditsUpdate {
	pocu.mutation.Where(ps...)
	return pocu
}

// SetOrderID sets the "order_id" field.
func (pocu *PendingOrderCreditsUpdate) SetOrderID(i int64) *PendingOrderCreditsUpdate {
	pocu.mutation.ResetOrderID()
	pocu.mutation.SetOrderID(i)
	return pocu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (pocu *PendingOrderCreditsUpdate) SetNillableOrderID(i *int64) *PendingOrderCreditsUpdate {
	if i != nil {
		pocu.SetOrderID(*i)
	}
	return pocu
}

// AddOrderID adds i to the "order_id" field.
func (pocu *PendingOrderCreditsUpdate) AddOrderID(i int64) *PendingOrderCreditsUpdate {
	pocu.mutation.AddOrderID(i)
	return pocu
}

// SetCreditID sets the "credit_id" field.
func (pocu *PendingOrderCreditsUpdate) SetCreditID(i int64) *PendingOrderCreditsUpdate {
	pocu.mutation.ResetCreditID()
	pocu.mutation.SetCreditID(i)
	return pocu
}

// SetNillableCreditID sets the "credit_id" field if the given value is not nil.
func (pocu *PendingOrderCreditsUpdate) SetNillableCreditID(i *int64) *PendingOrderCreditsUpdate {
	if i != nil {
		pocu.SetCreditID(*i)
	}
	return pocu
}

// AddCreditID adds i to the "credit_id" field.
func (pocu *PendingOrderCreditsUpdate) AddCreditID(i int64) *PendingOrderCreditsUpdate {
	pocu.mutation.AddCreditID(i)
	return pocu
}

// SetClinicID sets the "clinic_id" field.
func (pocu *PendingOrderCreditsUpdate) SetClinicID(i int64) *PendingOrderCreditsUpdate {
	pocu.mutation.ResetClinicID()
	pocu.mutation.SetClinicID(i)
	return pocu
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (pocu *PendingOrderCreditsUpdate) SetNillableClinicID(i *int64) *PendingOrderCreditsUpdate {
	if i != nil {
		pocu.SetClinicID(*i)
	}
	return pocu
}

// AddClinicID adds i to the "clinic_id" field.
func (pocu *PendingOrderCreditsUpdate) AddClinicID(i int64) *PendingOrderCreditsUpdate {
	pocu.mutation.AddClinicID(i)
	return pocu
}

// Mutation returns the PendingOrderCreditsMutation object of the builder.
func (pocu *PendingOrderCreditsUpdate) Mutation() *PendingOrderCreditsMutation {
	return pocu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pocu *PendingOrderCreditsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pocu.sqlSave, pocu.mutation, pocu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pocu *PendingOrderCreditsUpdate) SaveX(ctx context.Context) int {
	affected, err := pocu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pocu *PendingOrderCreditsUpdate) Exec(ctx context.Context) error {
	_, err := pocu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pocu *PendingOrderCreditsUpdate) ExecX(ctx context.Context) {
	if err := pocu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pocu *PendingOrderCreditsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pendingordercredits.Table, pendingordercredits.Columns, sqlgraph.NewFieldSpec(pendingordercredits.FieldID, field.TypeInt))
	if ps := pocu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pocu.mutation.OrderID(); ok {
		_spec.SetField(pendingordercredits.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := pocu.mutation.AddedOrderID(); ok {
		_spec.AddField(pendingordercredits.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := pocu.mutation.CreditID(); ok {
		_spec.SetField(pendingordercredits.FieldCreditID, field.TypeInt64, value)
	}
	if value, ok := pocu.mutation.AddedCreditID(); ok {
		_spec.AddField(pendingordercredits.FieldCreditID, field.TypeInt64, value)
	}
	if value, ok := pocu.mutation.ClinicID(); ok {
		_spec.SetField(pendingordercredits.FieldClinicID, field.TypeInt64, value)
	}
	if value, ok := pocu.mutation.AddedClinicID(); ok {
		_spec.AddField(pendingordercredits.FieldClinicID, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pocu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pendingordercredits.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pocu.mutation.done = true
	return n, nil
}

// PendingOrderCreditsUpdateOne is the builder for updating a single PendingOrderCredits entity.
type PendingOrderCreditsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PendingOrderCreditsMutation
}

// SetOrderID sets the "order_id" field.
func (pocuo *PendingOrderCreditsUpdateOne) SetOrderID(i int64) *PendingOrderCreditsUpdateOne {
	pocuo.mutation.ResetOrderID()
	pocuo.mutation.SetOrderID(i)
	return pocuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (pocuo *PendingOrderCreditsUpdateOne) SetNillableOrderID(i *int64) *PendingOrderCreditsUpdateOne {
	if i != nil {
		pocuo.SetOrderID(*i)
	}
	return pocuo
}

// AddOrderID adds i to the "order_id" field.
func (pocuo *PendingOrderCreditsUpdateOne) AddOrderID(i int64) *PendingOrderCreditsUpdateOne {
	pocuo.mutation.AddOrderID(i)
	return pocuo
}

// SetCreditID sets the "credit_id" field.
func (pocuo *PendingOrderCreditsUpdateOne) SetCreditID(i int64) *PendingOrderCreditsUpdateOne {
	pocuo.mutation.ResetCreditID()
	pocuo.mutation.SetCreditID(i)
	return pocuo
}

// SetNillableCreditID sets the "credit_id" field if the given value is not nil.
func (pocuo *PendingOrderCreditsUpdateOne) SetNillableCreditID(i *int64) *PendingOrderCreditsUpdateOne {
	if i != nil {
		pocuo.SetCreditID(*i)
	}
	return pocuo
}

// AddCreditID adds i to the "credit_id" field.
func (pocuo *PendingOrderCreditsUpdateOne) AddCreditID(i int64) *PendingOrderCreditsUpdateOne {
	pocuo.mutation.AddCreditID(i)
	return pocuo
}

// SetClinicID sets the "clinic_id" field.
func (pocuo *PendingOrderCreditsUpdateOne) SetClinicID(i int64) *PendingOrderCreditsUpdateOne {
	pocuo.mutation.ResetClinicID()
	pocuo.mutation.SetClinicID(i)
	return pocuo
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (pocuo *PendingOrderCreditsUpdateOne) SetNillableClinicID(i *int64) *PendingOrderCreditsUpdateOne {
	if i != nil {
		pocuo.SetClinicID(*i)
	}
	return pocuo
}

// AddClinicID adds i to the "clinic_id" field.
func (pocuo *PendingOrderCreditsUpdateOne) AddClinicID(i int64) *PendingOrderCreditsUpdateOne {
	pocuo.mutation.AddClinicID(i)
	return pocuo
}

// Mutation returns the PendingOrderCreditsMutation object of the builder.
func (pocuo *PendingOrderCreditsUpdateOne) Mutation() *PendingOrderCreditsMutation {
	return pocuo.mutation
}

// Where appends a list predicates to the PendingOrderCreditsUpdate builder.
func (pocuo *PendingOrderCreditsUpdateOne) Where(ps ...predicate.PendingOrderCredits) *PendingOrderCreditsUpdateOne {
	pocuo.mutation.Where(ps...)
	return pocuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pocuo *PendingOrderCreditsUpdateOne) Select(field string, fields ...string) *PendingOrderCreditsUpdateOne {
	pocuo.fields = append([]string{field}, fields...)
	return pocuo
}

// Save executes the query and returns the updated PendingOrderCredits entity.
func (pocuo *PendingOrderCreditsUpdateOne) Save(ctx context.Context) (*PendingOrderCredits, error) {
	return withHooks(ctx, pocuo.sqlSave, pocuo.mutation, pocuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pocuo *PendingOrderCreditsUpdateOne) SaveX(ctx context.Context) *PendingOrderCredits {
	node, err := pocuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pocuo *PendingOrderCreditsUpdateOne) Exec(ctx context.Context) error {
	_, err := pocuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pocuo *PendingOrderCreditsUpdateOne) ExecX(ctx context.Context) {
	if err := pocuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pocuo *PendingOrderCreditsUpdateOne) sqlSave(ctx context.Context) (_node *PendingOrderCredits, err error) {
	_spec := sqlgraph.NewUpdateSpec(pendingordercredits.Table, pendingordercredits.Columns, sqlgraph.NewFieldSpec(pendingordercredits.FieldID, field.TypeInt))
	id, ok := pocuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PendingOrderCredits.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pocuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pendingordercredits.FieldID)
		for _, f := range fields {
			if !pendingordercredits.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pendingordercredits.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pocuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pocuo.mutation.OrderID(); ok {
		_spec.SetField(pendingordercredits.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := pocuo.mutation.AddedOrderID(); ok {
		_spec.AddField(pendingordercredits.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := pocuo.mutation.CreditID(); ok {
		_spec.SetField(pendingordercredits.FieldCreditID, field.TypeInt64, value)
	}
	if value, ok := pocuo.mutation.AddedCreditID(); ok {
		_spec.AddField(pendingordercredits.FieldCreditID, field.TypeInt64, value)
	}
	if value, ok := pocuo.mutation.ClinicID(); ok {
		_spec.SetField(pendingordercredits.FieldClinicID, field.TypeInt64, value)
	}
	if value, ok := pocuo.mutation.AddedClinicID(); ok {
		_spec.AddField(pendingordercredits.FieldClinicID, field.TypeInt64, value)
	}
	_node = &PendingOrderCredits{config: pocuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pocuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pendingordercredits.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pocuo.mutation.done = true
	return _node, nil
}
