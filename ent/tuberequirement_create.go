// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/sample"
	"coresamples/ent/tuberequirement"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TubeRequirementCreate is the builder for creating a TubeRequirement entity.
type TubeRequirementCreate struct {
	config
	mutation *TubeRequirementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSampleID sets the "sample_id" field.
func (trc *TubeRequirementCreate) SetSampleID(i int) *TubeRequirementCreate {
	trc.mutation.SetSampleID(i)
	return trc
}

// SetNillableSampleID sets the "sample_id" field if the given value is not nil.
func (trc *TubeRequirementCreate) SetNillableSampleID(i *int) *TubeRequirementCreate {
	if i != nil {
		trc.SetSampleID(*i)
	}
	return trc
}

// SetTubeType sets the "tube_type" field.
func (trc *TubeRequirementCreate) SetTubeType(s string) *TubeRequirementCreate {
	trc.mutation.SetTubeType(s)
	return trc
}

// SetRequiredCount sets the "required_count" field.
func (trc *TubeRequirementCreate) SetRequiredCount(i int) *TubeRequirementCreate {
	trc.mutation.SetRequiredCount(i)
	return trc
}

// SetRequiredCountCreateTime sets the "required_count_create_time" field.
func (trc *TubeRequirementCreate) SetRequiredCountCreateTime(t time.Time) *TubeRequirementCreate {
	trc.mutation.SetRequiredCountCreateTime(t)
	return trc
}

// SetNillableRequiredCountCreateTime sets the "required_count_create_time" field if the given value is not nil.
func (trc *TubeRequirementCreate) SetNillableRequiredCountCreateTime(t *time.Time) *TubeRequirementCreate {
	if t != nil {
		trc.SetRequiredCountCreateTime(*t)
	}
	return trc
}

// SetRequiredBy sets the "required_by" field.
func (trc *TubeRequirementCreate) SetRequiredBy(s string) *TubeRequirementCreate {
	trc.mutation.SetRequiredBy(s)
	return trc
}

// SetModifiedBy sets the "modified_by" field.
func (trc *TubeRequirementCreate) SetModifiedBy(s string) *TubeRequirementCreate {
	trc.mutation.SetModifiedBy(s)
	return trc
}

// SetNillableModifiedBy sets the "modified_by" field if the given value is not nil.
func (trc *TubeRequirementCreate) SetNillableModifiedBy(s *string) *TubeRequirementCreate {
	if s != nil {
		trc.SetModifiedBy(*s)
	}
	return trc
}

// SetModifiedTime sets the "modified_time" field.
func (trc *TubeRequirementCreate) SetModifiedTime(t time.Time) *TubeRequirementCreate {
	trc.mutation.SetModifiedTime(t)
	return trc
}

// SetNillableModifiedTime sets the "modified_time" field if the given value is not nil.
func (trc *TubeRequirementCreate) SetNillableModifiedTime(t *time.Time) *TubeRequirementCreate {
	if t != nil {
		trc.SetModifiedTime(*t)
	}
	return trc
}

// SetSample sets the "sample" edge to the Sample entity.
func (trc *TubeRequirementCreate) SetSample(s *Sample) *TubeRequirementCreate {
	return trc.SetSampleID(s.ID)
}

// Mutation returns the TubeRequirementMutation object of the builder.
func (trc *TubeRequirementCreate) Mutation() *TubeRequirementMutation {
	return trc.mutation
}

// Save creates the TubeRequirement in the database.
func (trc *TubeRequirementCreate) Save(ctx context.Context) (*TubeRequirement, error) {
	trc.defaults()
	return withHooks(ctx, trc.sqlSave, trc.mutation, trc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TubeRequirementCreate) SaveX(ctx context.Context) *TubeRequirement {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trc *TubeRequirementCreate) Exec(ctx context.Context) error {
	_, err := trc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trc *TubeRequirementCreate) ExecX(ctx context.Context) {
	if err := trc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (trc *TubeRequirementCreate) defaults() {
	if _, ok := trc.mutation.RequiredCountCreateTime(); !ok {
		v := tuberequirement.DefaultRequiredCountCreateTime()
		trc.mutation.SetRequiredCountCreateTime(v)
	}
	if _, ok := trc.mutation.ModifiedTime(); !ok {
		v := tuberequirement.DefaultModifiedTime()
		trc.mutation.SetModifiedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (trc *TubeRequirementCreate) check() error {
	if _, ok := trc.mutation.TubeType(); !ok {
		return &ValidationError{Name: "tube_type", err: errors.New(`ent: missing required field "TubeRequirement.tube_type"`)}
	}
	if _, ok := trc.mutation.RequiredCount(); !ok {
		return &ValidationError{Name: "required_count", err: errors.New(`ent: missing required field "TubeRequirement.required_count"`)}
	}
	if _, ok := trc.mutation.RequiredCountCreateTime(); !ok {
		return &ValidationError{Name: "required_count_create_time", err: errors.New(`ent: missing required field "TubeRequirement.required_count_create_time"`)}
	}
	if _, ok := trc.mutation.RequiredBy(); !ok {
		return &ValidationError{Name: "required_by", err: errors.New(`ent: missing required field "TubeRequirement.required_by"`)}
	}
	if _, ok := trc.mutation.ModifiedTime(); !ok {
		return &ValidationError{Name: "modified_time", err: errors.New(`ent: missing required field "TubeRequirement.modified_time"`)}
	}
	return nil
}

func (trc *TubeRequirementCreate) sqlSave(ctx context.Context) (*TubeRequirement, error) {
	if err := trc.check(); err != nil {
		return nil, err
	}
	_node, _spec := trc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	trc.mutation.id = &_node.ID
	trc.mutation.done = true
	return _node, nil
}

func (trc *TubeRequirementCreate) createSpec() (*TubeRequirement, *sqlgraph.CreateSpec) {
	var (
		_node = &TubeRequirement{config: trc.config}
		_spec = sqlgraph.NewCreateSpec(tuberequirement.Table, sqlgraph.NewFieldSpec(tuberequirement.FieldID, field.TypeInt))
	)
	_spec.OnConflict = trc.conflict
	if value, ok := trc.mutation.TubeType(); ok {
		_spec.SetField(tuberequirement.FieldTubeType, field.TypeString, value)
		_node.TubeType = value
	}
	if value, ok := trc.mutation.RequiredCount(); ok {
		_spec.SetField(tuberequirement.FieldRequiredCount, field.TypeInt, value)
		_node.RequiredCount = value
	}
	if value, ok := trc.mutation.RequiredCountCreateTime(); ok {
		_spec.SetField(tuberequirement.FieldRequiredCountCreateTime, field.TypeTime, value)
		_node.RequiredCountCreateTime = value
	}
	if value, ok := trc.mutation.RequiredBy(); ok {
		_spec.SetField(tuberequirement.FieldRequiredBy, field.TypeString, value)
		_node.RequiredBy = value
	}
	if value, ok := trc.mutation.ModifiedBy(); ok {
		_spec.SetField(tuberequirement.FieldModifiedBy, field.TypeString, value)
		_node.ModifiedBy = value
	}
	if value, ok := trc.mutation.ModifiedTime(); ok {
		_spec.SetField(tuberequirement.FieldModifiedTime, field.TypeTime, value)
		_node.ModifiedTime = value
	}
	if nodes := trc.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tuberequirement.SampleTable,
			Columns: []string{tuberequirement.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SampleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TubeRequirement.Create().
//		SetSampleID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TubeRequirementUpsert) {
//			SetSampleID(v+v).
//		}).
//		Exec(ctx)
func (trc *TubeRequirementCreate) OnConflict(opts ...sql.ConflictOption) *TubeRequirementUpsertOne {
	trc.conflict = opts
	return &TubeRequirementUpsertOne{
		create: trc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TubeRequirement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (trc *TubeRequirementCreate) OnConflictColumns(columns ...string) *TubeRequirementUpsertOne {
	trc.conflict = append(trc.conflict, sql.ConflictColumns(columns...))
	return &TubeRequirementUpsertOne{
		create: trc,
	}
}

type (
	// TubeRequirementUpsertOne is the builder for "upsert"-ing
	//  one TubeRequirement node.
	TubeRequirementUpsertOne struct {
		create *TubeRequirementCreate
	}

	// TubeRequirementUpsert is the "OnConflict" setter.
	TubeRequirementUpsert struct {
		*sql.UpdateSet
	}
)

// SetSampleID sets the "sample_id" field.
func (u *TubeRequirementUpsert) SetSampleID(v int) *TubeRequirementUpsert {
	u.Set(tuberequirement.FieldSampleID, v)
	return u
}

// UpdateSampleID sets the "sample_id" field to the value that was provided on create.
func (u *TubeRequirementUpsert) UpdateSampleID() *TubeRequirementUpsert {
	u.SetExcluded(tuberequirement.FieldSampleID)
	return u
}

// ClearSampleID clears the value of the "sample_id" field.
func (u *TubeRequirementUpsert) ClearSampleID() *TubeRequirementUpsert {
	u.SetNull(tuberequirement.FieldSampleID)
	return u
}

// SetTubeType sets the "tube_type" field.
func (u *TubeRequirementUpsert) SetTubeType(v string) *TubeRequirementUpsert {
	u.Set(tuberequirement.FieldTubeType, v)
	return u
}

// UpdateTubeType sets the "tube_type" field to the value that was provided on create.
func (u *TubeRequirementUpsert) UpdateTubeType() *TubeRequirementUpsert {
	u.SetExcluded(tuberequirement.FieldTubeType)
	return u
}

// SetRequiredCount sets the "required_count" field.
func (u *TubeRequirementUpsert) SetRequiredCount(v int) *TubeRequirementUpsert {
	u.Set(tuberequirement.FieldRequiredCount, v)
	return u
}

// UpdateRequiredCount sets the "required_count" field to the value that was provided on create.
func (u *TubeRequirementUpsert) UpdateRequiredCount() *TubeRequirementUpsert {
	u.SetExcluded(tuberequirement.FieldRequiredCount)
	return u
}

// AddRequiredCount adds v to the "required_count" field.
func (u *TubeRequirementUpsert) AddRequiredCount(v int) *TubeRequirementUpsert {
	u.Add(tuberequirement.FieldRequiredCount, v)
	return u
}

// SetRequiredCountCreateTime sets the "required_count_create_time" field.
func (u *TubeRequirementUpsert) SetRequiredCountCreateTime(v time.Time) *TubeRequirementUpsert {
	u.Set(tuberequirement.FieldRequiredCountCreateTime, v)
	return u
}

// UpdateRequiredCountCreateTime sets the "required_count_create_time" field to the value that was provided on create.
func (u *TubeRequirementUpsert) UpdateRequiredCountCreateTime() *TubeRequirementUpsert {
	u.SetExcluded(tuberequirement.FieldRequiredCountCreateTime)
	return u
}

// SetRequiredBy sets the "required_by" field.
func (u *TubeRequirementUpsert) SetRequiredBy(v string) *TubeRequirementUpsert {
	u.Set(tuberequirement.FieldRequiredBy, v)
	return u
}

// UpdateRequiredBy sets the "required_by" field to the value that was provided on create.
func (u *TubeRequirementUpsert) UpdateRequiredBy() *TubeRequirementUpsert {
	u.SetExcluded(tuberequirement.FieldRequiredBy)
	return u
}

// SetModifiedBy sets the "modified_by" field.
func (u *TubeRequirementUpsert) SetModifiedBy(v string) *TubeRequirementUpsert {
	u.Set(tuberequirement.FieldModifiedBy, v)
	return u
}

// UpdateModifiedBy sets the "modified_by" field to the value that was provided on create.
func (u *TubeRequirementUpsert) UpdateModifiedBy() *TubeRequirementUpsert {
	u.SetExcluded(tuberequirement.FieldModifiedBy)
	return u
}

// ClearModifiedBy clears the value of the "modified_by" field.
func (u *TubeRequirementUpsert) ClearModifiedBy() *TubeRequirementUpsert {
	u.SetNull(tuberequirement.FieldModifiedBy)
	return u
}

// SetModifiedTime sets the "modified_time" field.
func (u *TubeRequirementUpsert) SetModifiedTime(v time.Time) *TubeRequirementUpsert {
	u.Set(tuberequirement.FieldModifiedTime, v)
	return u
}

// UpdateModifiedTime sets the "modified_time" field to the value that was provided on create.
func (u *TubeRequirementUpsert) UpdateModifiedTime() *TubeRequirementUpsert {
	u.SetExcluded(tuberequirement.FieldModifiedTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TubeRequirement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TubeRequirementUpsertOne) UpdateNewValues() *TubeRequirementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TubeRequirement.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TubeRequirementUpsertOne) Ignore() *TubeRequirementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TubeRequirementUpsertOne) DoNothing() *TubeRequirementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TubeRequirementCreate.OnConflict
// documentation for more info.
func (u *TubeRequirementUpsertOne) Update(set func(*TubeRequirementUpsert)) *TubeRequirementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TubeRequirementUpsert{UpdateSet: update})
	}))
	return u
}

// SetSampleID sets the "sample_id" field.
func (u *TubeRequirementUpsertOne) SetSampleID(v int) *TubeRequirementUpsertOne {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.SetSampleID(v)
	})
}

// UpdateSampleID sets the "sample_id" field to the value that was provided on create.
func (u *TubeRequirementUpsertOne) UpdateSampleID() *TubeRequirementUpsertOne {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.UpdateSampleID()
	})
}

// ClearSampleID clears the value of the "sample_id" field.
func (u *TubeRequirementUpsertOne) ClearSampleID() *TubeRequirementUpsertOne {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.ClearSampleID()
	})
}

// SetTubeType sets the "tube_type" field.
func (u *TubeRequirementUpsertOne) SetTubeType(v string) *TubeRequirementUpsertOne {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.SetTubeType(v)
	})
}

// UpdateTubeType sets the "tube_type" field to the value that was provided on create.
func (u *TubeRequirementUpsertOne) UpdateTubeType() *TubeRequirementUpsertOne {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.UpdateTubeType()
	})
}

// SetRequiredCount sets the "required_count" field.
func (u *TubeRequirementUpsertOne) SetRequiredCount(v int) *TubeRequirementUpsertOne {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.SetRequiredCount(v)
	})
}

// AddRequiredCount adds v to the "required_count" field.
func (u *TubeRequirementUpsertOne) AddRequiredCount(v int) *TubeRequirementUpsertOne {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.AddRequiredCount(v)
	})
}

// UpdateRequiredCount sets the "required_count" field to the value that was provided on create.
func (u *TubeRequirementUpsertOne) UpdateRequiredCount() *TubeRequirementUpsertOne {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.UpdateRequiredCount()
	})
}

// SetRequiredCountCreateTime sets the "required_count_create_time" field.
func (u *TubeRequirementUpsertOne) SetRequiredCountCreateTime(v time.Time) *TubeRequirementUpsertOne {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.SetRequiredCountCreateTime(v)
	})
}

// UpdateRequiredCountCreateTime sets the "required_count_create_time" field to the value that was provided on create.
func (u *TubeRequirementUpsertOne) UpdateRequiredCountCreateTime() *TubeRequirementUpsertOne {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.UpdateRequiredCountCreateTime()
	})
}

// SetRequiredBy sets the "required_by" field.
func (u *TubeRequirementUpsertOne) SetRequiredBy(v string) *TubeRequirementUpsertOne {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.SetRequiredBy(v)
	})
}

// UpdateRequiredBy sets the "required_by" field to the value that was provided on create.
func (u *TubeRequirementUpsertOne) UpdateRequiredBy() *TubeRequirementUpsertOne {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.UpdateRequiredBy()
	})
}

// SetModifiedBy sets the "modified_by" field.
func (u *TubeRequirementUpsertOne) SetModifiedBy(v string) *TubeRequirementUpsertOne {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.SetModifiedBy(v)
	})
}

// UpdateModifiedBy sets the "modified_by" field to the value that was provided on create.
func (u *TubeRequirementUpsertOne) UpdateModifiedBy() *TubeRequirementUpsertOne {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.UpdateModifiedBy()
	})
}

// ClearModifiedBy clears the value of the "modified_by" field.
func (u *TubeRequirementUpsertOne) ClearModifiedBy() *TubeRequirementUpsertOne {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.ClearModifiedBy()
	})
}

// SetModifiedTime sets the "modified_time" field.
func (u *TubeRequirementUpsertOne) SetModifiedTime(v time.Time) *TubeRequirementUpsertOne {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.SetModifiedTime(v)
	})
}

// UpdateModifiedTime sets the "modified_time" field to the value that was provided on create.
func (u *TubeRequirementUpsertOne) UpdateModifiedTime() *TubeRequirementUpsertOne {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.UpdateModifiedTime()
	})
}

// Exec executes the query.
func (u *TubeRequirementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TubeRequirementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TubeRequirementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TubeRequirementUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TubeRequirementUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TubeRequirementCreateBulk is the builder for creating many TubeRequirement entities in bulk.
type TubeRequirementCreateBulk struct {
	config
	err      error
	builders []*TubeRequirementCreate
	conflict []sql.ConflictOption
}

// Save creates the TubeRequirement entities in the database.
func (trcb *TubeRequirementCreateBulk) Save(ctx context.Context) ([]*TubeRequirement, error) {
	if trcb.err != nil {
		return nil, trcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(trcb.builders))
	nodes := make([]*TubeRequirement, len(trcb.builders))
	mutators := make([]Mutator, len(trcb.builders))
	for i := range trcb.builders {
		func(i int, root context.Context) {
			builder := trcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TubeRequirementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, trcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = trcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, trcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, trcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (trcb *TubeRequirementCreateBulk) SaveX(ctx context.Context) []*TubeRequirement {
	v, err := trcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trcb *TubeRequirementCreateBulk) Exec(ctx context.Context) error {
	_, err := trcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trcb *TubeRequirementCreateBulk) ExecX(ctx context.Context) {
	if err := trcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TubeRequirement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TubeRequirementUpsert) {
//			SetSampleID(v+v).
//		}).
//		Exec(ctx)
func (trcb *TubeRequirementCreateBulk) OnConflict(opts ...sql.ConflictOption) *TubeRequirementUpsertBulk {
	trcb.conflict = opts
	return &TubeRequirementUpsertBulk{
		create: trcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TubeRequirement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (trcb *TubeRequirementCreateBulk) OnConflictColumns(columns ...string) *TubeRequirementUpsertBulk {
	trcb.conflict = append(trcb.conflict, sql.ConflictColumns(columns...))
	return &TubeRequirementUpsertBulk{
		create: trcb,
	}
}

// TubeRequirementUpsertBulk is the builder for "upsert"-ing
// a bulk of TubeRequirement nodes.
type TubeRequirementUpsertBulk struct {
	create *TubeRequirementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TubeRequirement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TubeRequirementUpsertBulk) UpdateNewValues() *TubeRequirementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TubeRequirement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TubeRequirementUpsertBulk) Ignore() *TubeRequirementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TubeRequirementUpsertBulk) DoNothing() *TubeRequirementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TubeRequirementCreateBulk.OnConflict
// documentation for more info.
func (u *TubeRequirementUpsertBulk) Update(set func(*TubeRequirementUpsert)) *TubeRequirementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TubeRequirementUpsert{UpdateSet: update})
	}))
	return u
}

// SetSampleID sets the "sample_id" field.
func (u *TubeRequirementUpsertBulk) SetSampleID(v int) *TubeRequirementUpsertBulk {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.SetSampleID(v)
	})
}

// UpdateSampleID sets the "sample_id" field to the value that was provided on create.
func (u *TubeRequirementUpsertBulk) UpdateSampleID() *TubeRequirementUpsertBulk {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.UpdateSampleID()
	})
}

// ClearSampleID clears the value of the "sample_id" field.
func (u *TubeRequirementUpsertBulk) ClearSampleID() *TubeRequirementUpsertBulk {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.ClearSampleID()
	})
}

// SetTubeType sets the "tube_type" field.
func (u *TubeRequirementUpsertBulk) SetTubeType(v string) *TubeRequirementUpsertBulk {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.SetTubeType(v)
	})
}

// UpdateTubeType sets the "tube_type" field to the value that was provided on create.
func (u *TubeRequirementUpsertBulk) UpdateTubeType() *TubeRequirementUpsertBulk {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.UpdateTubeType()
	})
}

// SetRequiredCount sets the "required_count" field.
func (u *TubeRequirementUpsertBulk) SetRequiredCount(v int) *TubeRequirementUpsertBulk {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.SetRequiredCount(v)
	})
}

// AddRequiredCount adds v to the "required_count" field.
func (u *TubeRequirementUpsertBulk) AddRequiredCount(v int) *TubeRequirementUpsertBulk {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.AddRequiredCount(v)
	})
}

// UpdateRequiredCount sets the "required_count" field to the value that was provided on create.
func (u *TubeRequirementUpsertBulk) UpdateRequiredCount() *TubeRequirementUpsertBulk {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.UpdateRequiredCount()
	})
}

// SetRequiredCountCreateTime sets the "required_count_create_time" field.
func (u *TubeRequirementUpsertBulk) SetRequiredCountCreateTime(v time.Time) *TubeRequirementUpsertBulk {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.SetRequiredCountCreateTime(v)
	})
}

// UpdateRequiredCountCreateTime sets the "required_count_create_time" field to the value that was provided on create.
func (u *TubeRequirementUpsertBulk) UpdateRequiredCountCreateTime() *TubeRequirementUpsertBulk {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.UpdateRequiredCountCreateTime()
	})
}

// SetRequiredBy sets the "required_by" field.
func (u *TubeRequirementUpsertBulk) SetRequiredBy(v string) *TubeRequirementUpsertBulk {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.SetRequiredBy(v)
	})
}

// UpdateRequiredBy sets the "required_by" field to the value that was provided on create.
func (u *TubeRequirementUpsertBulk) UpdateRequiredBy() *TubeRequirementUpsertBulk {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.UpdateRequiredBy()
	})
}

// SetModifiedBy sets the "modified_by" field.
func (u *TubeRequirementUpsertBulk) SetModifiedBy(v string) *TubeRequirementUpsertBulk {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.SetModifiedBy(v)
	})
}

// UpdateModifiedBy sets the "modified_by" field to the value that was provided on create.
func (u *TubeRequirementUpsertBulk) UpdateModifiedBy() *TubeRequirementUpsertBulk {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.UpdateModifiedBy()
	})
}

// ClearModifiedBy clears the value of the "modified_by" field.
func (u *TubeRequirementUpsertBulk) ClearModifiedBy() *TubeRequirementUpsertBulk {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.ClearModifiedBy()
	})
}

// SetModifiedTime sets the "modified_time" field.
func (u *TubeRequirementUpsertBulk) SetModifiedTime(v time.Time) *TubeRequirementUpsertBulk {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.SetModifiedTime(v)
	})
}

// UpdateModifiedTime sets the "modified_time" field to the value that was provided on create.
func (u *TubeRequirementUpsertBulk) UpdateModifiedTime() *TubeRequirementUpsertBulk {
	return u.Update(func(s *TubeRequirementUpsert) {
		s.UpdateModifiedTime()
	})
}

// Exec executes the query.
func (u *TubeRequirementUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TubeRequirementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TubeRequirementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TubeRequirementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
