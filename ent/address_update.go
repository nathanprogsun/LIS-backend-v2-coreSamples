// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/address"
	"coresamples/ent/clinic"
	"coresamples/ent/customer"
	"coresamples/ent/customeraddressonclinics"
	"coresamples/ent/internaluser"
	"coresamples/ent/orderinfo"
	"coresamples/ent/patient"
	"coresamples/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AddressUpdate is the builder for updating Address entities.
type AddressUpdate struct {
	config
	hooks    []Hook
	mutation *AddressMutation
}

// Where appends a list predicates to the AddressUpdate builder.
func (au *AddressUpdate) Where(ps ...predicate.Address) *AddressUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetAddressType sets the "address_type" field.
func (au *AddressUpdate) SetAddressType(s string) *AddressUpdate {
	au.mutation.SetAddressType(s)
	return au
}

// SetNillableAddressType sets the "address_type" field if the given value is not nil.
func (au *AddressUpdate) SetNillableAddressType(s *string) *AddressUpdate {
	if s != nil {
		au.SetAddressType(*s)
	}
	return au
}

// ClearAddressType clears the value of the "address_type" field.
func (au *AddressUpdate) ClearAddressType() *AddressUpdate {
	au.mutation.ClearAddressType()
	return au
}

// SetStreetAddress sets the "street_address" field.
func (au *AddressUpdate) SetStreetAddress(s string) *AddressUpdate {
	au.mutation.SetStreetAddress(s)
	return au
}

// SetNillableStreetAddress sets the "street_address" field if the given value is not nil.
func (au *AddressUpdate) SetNillableStreetAddress(s *string) *AddressUpdate {
	if s != nil {
		au.SetStreetAddress(*s)
	}
	return au
}

// ClearStreetAddress clears the value of the "street_address" field.
func (au *AddressUpdate) ClearStreetAddress() *AddressUpdate {
	au.mutation.ClearStreetAddress()
	return au
}

// SetAptPo sets the "apt_po" field.
func (au *AddressUpdate) SetAptPo(s string) *AddressUpdate {
	au.mutation.SetAptPo(s)
	return au
}

// SetNillableAptPo sets the "apt_po" field if the given value is not nil.
func (au *AddressUpdate) SetNillableAptPo(s *string) *AddressUpdate {
	if s != nil {
		au.SetAptPo(*s)
	}
	return au
}

// ClearAptPo clears the value of the "apt_po" field.
func (au *AddressUpdate) ClearAptPo() *AddressUpdate {
	au.mutation.ClearAptPo()
	return au
}

// SetCity sets the "city" field.
func (au *AddressUpdate) SetCity(s string) *AddressUpdate {
	au.mutation.SetCity(s)
	return au
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (au *AddressUpdate) SetNillableCity(s *string) *AddressUpdate {
	if s != nil {
		au.SetCity(*s)
	}
	return au
}

// ClearCity clears the value of the "city" field.
func (au *AddressUpdate) ClearCity() *AddressUpdate {
	au.mutation.ClearCity()
	return au
}

// SetState sets the "state" field.
func (au *AddressUpdate) SetState(s string) *AddressUpdate {
	au.mutation.SetState(s)
	return au
}

// SetNillableState sets the "state" field if the given value is not nil.
func (au *AddressUpdate) SetNillableState(s *string) *AddressUpdate {
	if s != nil {
		au.SetState(*s)
	}
	return au
}

// ClearState clears the value of the "state" field.
func (au *AddressUpdate) ClearState() *AddressUpdate {
	au.mutation.ClearState()
	return au
}

// SetZipcode sets the "zipcode" field.
func (au *AddressUpdate) SetZipcode(s string) *AddressUpdate {
	au.mutation.SetZipcode(s)
	return au
}

// SetNillableZipcode sets the "zipcode" field if the given value is not nil.
func (au *AddressUpdate) SetNillableZipcode(s *string) *AddressUpdate {
	if s != nil {
		au.SetZipcode(*s)
	}
	return au
}

// ClearZipcode clears the value of the "zipcode" field.
func (au *AddressUpdate) ClearZipcode() *AddressUpdate {
	au.mutation.ClearZipcode()
	return au
}

// SetCountry sets the "country" field.
func (au *AddressUpdate) SetCountry(s string) *AddressUpdate {
	au.mutation.SetCountry(s)
	return au
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (au *AddressUpdate) SetNillableCountry(s *string) *AddressUpdate {
	if s != nil {
		au.SetCountry(*s)
	}
	return au
}

// ClearCountry clears the value of the "country" field.
func (au *AddressUpdate) ClearCountry() *AddressUpdate {
	au.mutation.ClearCountry()
	return au
}

// SetAddressConfirmed sets the "address_confirmed" field.
func (au *AddressUpdate) SetAddressConfirmed(b bool) *AddressUpdate {
	au.mutation.SetAddressConfirmed(b)
	return au
}

// SetNillableAddressConfirmed sets the "address_confirmed" field if the given value is not nil.
func (au *AddressUpdate) SetNillableAddressConfirmed(b *bool) *AddressUpdate {
	if b != nil {
		au.SetAddressConfirmed(*b)
	}
	return au
}

// SetIsPrimaryAddress sets the "is_primary_address" field.
func (au *AddressUpdate) SetIsPrimaryAddress(b bool) *AddressUpdate {
	au.mutation.SetIsPrimaryAddress(b)
	return au
}

// SetNillableIsPrimaryAddress sets the "is_primary_address" field if the given value is not nil.
func (au *AddressUpdate) SetNillableIsPrimaryAddress(b *bool) *AddressUpdate {
	if b != nil {
		au.SetIsPrimaryAddress(*b)
	}
	return au
}

// SetCustomerID sets the "customer_id" field.
func (au *AddressUpdate) SetCustomerID(i int) *AddressUpdate {
	au.mutation.SetCustomerID(i)
	return au
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (au *AddressUpdate) SetNillableCustomerID(i *int) *AddressUpdate {
	if i != nil {
		au.SetCustomerID(*i)
	}
	return au
}

// ClearCustomerID clears the value of the "customer_id" field.
func (au *AddressUpdate) ClearCustomerID() *AddressUpdate {
	au.mutation.ClearCustomerID()
	return au
}

// SetPatientID sets the "patient_id" field.
func (au *AddressUpdate) SetPatientID(i int) *AddressUpdate {
	au.mutation.SetPatientID(i)
	return au
}

// SetNillablePatientID sets the "patient_id" field if the given value is not nil.
func (au *AddressUpdate) SetNillablePatientID(i *int) *AddressUpdate {
	if i != nil {
		au.SetPatientID(*i)
	}
	return au
}

// ClearPatientID clears the value of the "patient_id" field.
func (au *AddressUpdate) ClearPatientID() *AddressUpdate {
	au.mutation.ClearPatientID()
	return au
}

// SetClinicID sets the "clinic_id" field.
func (au *AddressUpdate) SetClinicID(i int) *AddressUpdate {
	au.mutation.SetClinicID(i)
	return au
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (au *AddressUpdate) SetNillableClinicID(i *int) *AddressUpdate {
	if i != nil {
		au.SetClinicID(*i)
	}
	return au
}

// ClearClinicID clears the value of the "clinic_id" field.
func (au *AddressUpdate) ClearClinicID() *AddressUpdate {
	au.mutation.ClearClinicID()
	return au
}

// SetInternalUserID sets the "internal_user_id" field.
func (au *AddressUpdate) SetInternalUserID(i int) *AddressUpdate {
	au.mutation.SetInternalUserID(i)
	return au
}

// SetNillableInternalUserID sets the "internal_user_id" field if the given value is not nil.
func (au *AddressUpdate) SetNillableInternalUserID(i *int) *AddressUpdate {
	if i != nil {
		au.SetInternalUserID(*i)
	}
	return au
}

// ClearInternalUserID clears the value of the "internal_user_id" field.
func (au *AddressUpdate) ClearInternalUserID() *AddressUpdate {
	au.mutation.ClearInternalUserID()
	return au
}

// SetAddressLevel sets the "address_level" field.
func (au *AddressUpdate) SetAddressLevel(i int) *AddressUpdate {
	au.mutation.ResetAddressLevel()
	au.mutation.SetAddressLevel(i)
	return au
}

// SetNillableAddressLevel sets the "address_level" field if the given value is not nil.
func (au *AddressUpdate) SetNillableAddressLevel(i *int) *AddressUpdate {
	if i != nil {
		au.SetAddressLevel(*i)
	}
	return au
}

// AddAddressLevel adds i to the "address_level" field.
func (au *AddressUpdate) AddAddressLevel(i int) *AddressUpdate {
	au.mutation.AddAddressLevel(i)
	return au
}

// SetAddressLevelName sets the "address_level_name" field.
func (au *AddressUpdate) SetAddressLevelName(s string) *AddressUpdate {
	au.mutation.SetAddressLevelName(s)
	return au
}

// SetNillableAddressLevelName sets the "address_level_name" field if the given value is not nil.
func (au *AddressUpdate) SetNillableAddressLevelName(s *string) *AddressUpdate {
	if s != nil {
		au.SetAddressLevelName(*s)
	}
	return au
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (au *AddressUpdate) SetApplyToAllGroupMember(b bool) *AddressUpdate {
	au.mutation.SetApplyToAllGroupMember(b)
	return au
}

// SetNillableApplyToAllGroupMember sets the "apply_to_all_group_member" field if the given value is not nil.
func (au *AddressUpdate) SetNillableApplyToAllGroupMember(b *bool) *AddressUpdate {
	if b != nil {
		au.SetApplyToAllGroupMember(*b)
	}
	return au
}

// SetGroupAddressID sets the "group_address_id" field.
func (au *AddressUpdate) SetGroupAddressID(i int) *AddressUpdate {
	au.mutation.SetGroupAddressID(i)
	return au
}

// SetNillableGroupAddressID sets the "group_address_id" field if the given value is not nil.
func (au *AddressUpdate) SetNillableGroupAddressID(i *int) *AddressUpdate {
	if i != nil {
		au.SetGroupAddressID(*i)
	}
	return au
}

// ClearGroupAddressID clears the value of the "group_address_id" field.
func (au *AddressUpdate) ClearGroupAddressID() *AddressUpdate {
	au.mutation.ClearGroupAddressID()
	return au
}

// SetIsGroupAddress sets the "is_group_address" field.
func (au *AddressUpdate) SetIsGroupAddress(b bool) *AddressUpdate {
	au.mutation.SetIsGroupAddress(b)
	return au
}

// SetNillableIsGroupAddress sets the "is_group_address" field if the given value is not nil.
func (au *AddressUpdate) SetNillableIsGroupAddress(b *bool) *AddressUpdate {
	if b != nil {
		au.SetIsGroupAddress(*b)
	}
	return au
}

// SetUseAsDefaultCreateAddress sets the "use_as_default_create_address" field.
func (au *AddressUpdate) SetUseAsDefaultCreateAddress(b bool) *AddressUpdate {
	au.mutation.SetUseAsDefaultCreateAddress(b)
	return au
}

// SetNillableUseAsDefaultCreateAddress sets the "use_as_default_create_address" field if the given value is not nil.
func (au *AddressUpdate) SetNillableUseAsDefaultCreateAddress(b *bool) *AddressUpdate {
	if b != nil {
		au.SetUseAsDefaultCreateAddress(*b)
	}
	return au
}

// SetUseGroupAddress sets the "use_group_address" field.
func (au *AddressUpdate) SetUseGroupAddress(b bool) *AddressUpdate {
	au.mutation.SetUseGroupAddress(b)
	return au
}

// SetNillableUseGroupAddress sets the "use_group_address" field if the given value is not nil.
func (au *AddressUpdate) SetNillableUseGroupAddress(b *bool) *AddressUpdate {
	if b != nil {
		au.SetUseGroupAddress(*b)
	}
	return au
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (au *AddressUpdate) SetClinic(c *Clinic) *AddressUpdate {
	return au.SetClinicID(c.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (au *AddressUpdate) SetCustomer(c *Customer) *AddressUpdate {
	return au.SetCustomerID(c.ID)
}

// AddCustomerClinicMappingIDs adds the "customer_clinic_mappings" edge to the CustomerAddressOnClinics entity by IDs.
func (au *AddressUpdate) AddCustomerClinicMappingIDs(ids ...int) *AddressUpdate {
	au.mutation.AddCustomerClinicMappingIDs(ids...)
	return au
}

// AddCustomerClinicMappings adds the "customer_clinic_mappings" edges to the CustomerAddressOnClinics entity.
func (au *AddressUpdate) AddCustomerClinicMappings(c ...*CustomerAddressOnClinics) *AddressUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.AddCustomerClinicMappingIDs(ids...)
}

// AddMemberAddressIDs adds the "member_addresses" edge to the Address entity by IDs.
func (au *AddressUpdate) AddMemberAddressIDs(ids ...int) *AddressUpdate {
	au.mutation.AddMemberAddressIDs(ids...)
	return au
}

// AddMemberAddresses adds the "member_addresses" edges to the Address entity.
func (au *AddressUpdate) AddMemberAddresses(a ...*Address) *AddressUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddMemberAddressIDs(ids...)
}

// SetGroupAddress sets the "group_address" edge to the Address entity.
func (au *AddressUpdate) SetGroupAddress(a *Address) *AddressUpdate {
	return au.SetGroupAddressID(a.ID)
}

// SetInternalUser sets the "internal_user" edge to the InternalUser entity.
func (au *AddressUpdate) SetInternalUser(i *InternalUser) *AddressUpdate {
	return au.SetInternalUserID(i.ID)
}

// SetPatient sets the "patient" edge to the Patient entity.
func (au *AddressUpdate) SetPatient(p *Patient) *AddressUpdate {
	return au.SetPatientID(p.ID)
}

// AddOrderIDs adds the "orders" edge to the OrderInfo entity by IDs.
func (au *AddressUpdate) AddOrderIDs(ids ...int) *AddressUpdate {
	au.mutation.AddOrderIDs(ids...)
	return au
}

// AddOrders adds the "orders" edges to the OrderInfo entity.
func (au *AddressUpdate) AddOrders(o ...*OrderInfo) *AddressUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.AddOrderIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (au *AddressUpdate) Mutation() *AddressMutation {
	return au.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (au *AddressUpdate) ClearClinic() *AddressUpdate {
	au.mutation.ClearClinic()
	return au
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (au *AddressUpdate) ClearCustomer() *AddressUpdate {
	au.mutation.ClearCustomer()
	return au
}

// ClearCustomerClinicMappings clears all "customer_clinic_mappings" edges to the CustomerAddressOnClinics entity.
func (au *AddressUpdate) ClearCustomerClinicMappings() *AddressUpdate {
	au.mutation.ClearCustomerClinicMappings()
	return au
}

// RemoveCustomerClinicMappingIDs removes the "customer_clinic_mappings" edge to CustomerAddressOnClinics entities by IDs.
func (au *AddressUpdate) RemoveCustomerClinicMappingIDs(ids ...int) *AddressUpdate {
	au.mutation.RemoveCustomerClinicMappingIDs(ids...)
	return au
}

// RemoveCustomerClinicMappings removes "customer_clinic_mappings" edges to CustomerAddressOnClinics entities.
func (au *AddressUpdate) RemoveCustomerClinicMappings(c ...*CustomerAddressOnClinics) *AddressUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.RemoveCustomerClinicMappingIDs(ids...)
}

// ClearMemberAddresses clears all "member_addresses" edges to the Address entity.
func (au *AddressUpdate) ClearMemberAddresses() *AddressUpdate {
	au.mutation.ClearMemberAddresses()
	return au
}

// RemoveMemberAddressIDs removes the "member_addresses" edge to Address entities by IDs.
func (au *AddressUpdate) RemoveMemberAddressIDs(ids ...int) *AddressUpdate {
	au.mutation.RemoveMemberAddressIDs(ids...)
	return au
}

// RemoveMemberAddresses removes "member_addresses" edges to Address entities.
func (au *AddressUpdate) RemoveMemberAddresses(a ...*Address) *AddressUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveMemberAddressIDs(ids...)
}

// ClearGroupAddress clears the "group_address" edge to the Address entity.
func (au *AddressUpdate) ClearGroupAddress() *AddressUpdate {
	au.mutation.ClearGroupAddress()
	return au
}

// ClearInternalUser clears the "internal_user" edge to the InternalUser entity.
func (au *AddressUpdate) ClearInternalUser() *AddressUpdate {
	au.mutation.ClearInternalUser()
	return au
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (au *AddressUpdate) ClearPatient() *AddressUpdate {
	au.mutation.ClearPatient()
	return au
}

// ClearOrders clears all "orders" edges to the OrderInfo entity.
func (au *AddressUpdate) ClearOrders() *AddressUpdate {
	au.mutation.ClearOrders()
	return au
}

// RemoveOrderIDs removes the "orders" edge to OrderInfo entities by IDs.
func (au *AddressUpdate) RemoveOrderIDs(ids ...int) *AddressUpdate {
	au.mutation.RemoveOrderIDs(ids...)
	return au
}

// RemoveOrders removes "orders" edges to OrderInfo entities.
func (au *AddressUpdate) RemoveOrders(o ...*OrderInfo) *AddressUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AddressUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AddressUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AddressUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AddressUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(address.Table, address.Columns, sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.AddressType(); ok {
		_spec.SetField(address.FieldAddressType, field.TypeString, value)
	}
	if au.mutation.AddressTypeCleared() {
		_spec.ClearField(address.FieldAddressType, field.TypeString)
	}
	if value, ok := au.mutation.StreetAddress(); ok {
		_spec.SetField(address.FieldStreetAddress, field.TypeString, value)
	}
	if au.mutation.StreetAddressCleared() {
		_spec.ClearField(address.FieldStreetAddress, field.TypeString)
	}
	if value, ok := au.mutation.AptPo(); ok {
		_spec.SetField(address.FieldAptPo, field.TypeString, value)
	}
	if au.mutation.AptPoCleared() {
		_spec.ClearField(address.FieldAptPo, field.TypeString)
	}
	if value, ok := au.mutation.City(); ok {
		_spec.SetField(address.FieldCity, field.TypeString, value)
	}
	if au.mutation.CityCleared() {
		_spec.ClearField(address.FieldCity, field.TypeString)
	}
	if value, ok := au.mutation.State(); ok {
		_spec.SetField(address.FieldState, field.TypeString, value)
	}
	if au.mutation.StateCleared() {
		_spec.ClearField(address.FieldState, field.TypeString)
	}
	if value, ok := au.mutation.Zipcode(); ok {
		_spec.SetField(address.FieldZipcode, field.TypeString, value)
	}
	if au.mutation.ZipcodeCleared() {
		_spec.ClearField(address.FieldZipcode, field.TypeString)
	}
	if value, ok := au.mutation.Country(); ok {
		_spec.SetField(address.FieldCountry, field.TypeString, value)
	}
	if au.mutation.CountryCleared() {
		_spec.ClearField(address.FieldCountry, field.TypeString)
	}
	if value, ok := au.mutation.AddressConfirmed(); ok {
		_spec.SetField(address.FieldAddressConfirmed, field.TypeBool, value)
	}
	if value, ok := au.mutation.IsPrimaryAddress(); ok {
		_spec.SetField(address.FieldIsPrimaryAddress, field.TypeBool, value)
	}
	if value, ok := au.mutation.AddressLevel(); ok {
		_spec.SetField(address.FieldAddressLevel, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedAddressLevel(); ok {
		_spec.AddField(address.FieldAddressLevel, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddressLevelName(); ok {
		_spec.SetField(address.FieldAddressLevelName, field.TypeString, value)
	}
	if value, ok := au.mutation.ApplyToAllGroupMember(); ok {
		_spec.SetField(address.FieldApplyToAllGroupMember, field.TypeBool, value)
	}
	if value, ok := au.mutation.IsGroupAddress(); ok {
		_spec.SetField(address.FieldIsGroupAddress, field.TypeBool, value)
	}
	if value, ok := au.mutation.UseAsDefaultCreateAddress(); ok {
		_spec.SetField(address.FieldUseAsDefaultCreateAddress, field.TypeBool, value)
	}
	if value, ok := au.mutation.UseGroupAddress(); ok {
		_spec.SetField(address.FieldUseGroupAddress, field.TypeBool, value)
	}
	if au.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.ClinicTable,
			Columns: []string{address.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.ClinicTable,
			Columns: []string{address.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.CustomerTable,
			Columns: []string{address.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.CustomerTable,
			Columns: []string{address.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CustomerClinicMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.CustomerClinicMappingsTable,
			Columns: []string{address.CustomerClinicMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCustomerClinicMappingsIDs(); len(nodes) > 0 && !au.mutation.CustomerClinicMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.CustomerClinicMappingsTable,
			Columns: []string{address.CustomerClinicMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CustomerClinicMappingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.CustomerClinicMappingsTable,
			Columns: []string{address.CustomerClinicMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.MemberAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.MemberAddressesTable,
			Columns: []string{address.MemberAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedMemberAddressesIDs(); len(nodes) > 0 && !au.mutation.MemberAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.MemberAddressesTable,
			Columns: []string{address.MemberAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MemberAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.MemberAddressesTable,
			Columns: []string{address.MemberAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.GroupAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.GroupAddressTable,
			Columns: []string{address.GroupAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.GroupAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.GroupAddressTable,
			Columns: []string{address.GroupAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.InternalUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.InternalUserTable,
			Columns: []string{address.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.InternalUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.InternalUserTable,
			Columns: []string{address.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.PatientTable,
			Columns: []string{address.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.PatientTable,
			Columns: []string{address.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !au.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AddressUpdateOne is the builder for updating a single Address entity.
type AddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AddressMutation
}

// SetAddressType sets the "address_type" field.
func (auo *AddressUpdateOne) SetAddressType(s string) *AddressUpdateOne {
	auo.mutation.SetAddressType(s)
	return auo
}

// SetNillableAddressType sets the "address_type" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableAddressType(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetAddressType(*s)
	}
	return auo
}

// ClearAddressType clears the value of the "address_type" field.
func (auo *AddressUpdateOne) ClearAddressType() *AddressUpdateOne {
	auo.mutation.ClearAddressType()
	return auo
}

// SetStreetAddress sets the "street_address" field.
func (auo *AddressUpdateOne) SetStreetAddress(s string) *AddressUpdateOne {
	auo.mutation.SetStreetAddress(s)
	return auo
}

// SetNillableStreetAddress sets the "street_address" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableStreetAddress(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetStreetAddress(*s)
	}
	return auo
}

// ClearStreetAddress clears the value of the "street_address" field.
func (auo *AddressUpdateOne) ClearStreetAddress() *AddressUpdateOne {
	auo.mutation.ClearStreetAddress()
	return auo
}

// SetAptPo sets the "apt_po" field.
func (auo *AddressUpdateOne) SetAptPo(s string) *AddressUpdateOne {
	auo.mutation.SetAptPo(s)
	return auo
}

// SetNillableAptPo sets the "apt_po" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableAptPo(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetAptPo(*s)
	}
	return auo
}

// ClearAptPo clears the value of the "apt_po" field.
func (auo *AddressUpdateOne) ClearAptPo() *AddressUpdateOne {
	auo.mutation.ClearAptPo()
	return auo
}

// SetCity sets the "city" field.
func (auo *AddressUpdateOne) SetCity(s string) *AddressUpdateOne {
	auo.mutation.SetCity(s)
	return auo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableCity(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetCity(*s)
	}
	return auo
}

// ClearCity clears the value of the "city" field.
func (auo *AddressUpdateOne) ClearCity() *AddressUpdateOne {
	auo.mutation.ClearCity()
	return auo
}

// SetState sets the "state" field.
func (auo *AddressUpdateOne) SetState(s string) *AddressUpdateOne {
	auo.mutation.SetState(s)
	return auo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableState(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetState(*s)
	}
	return auo
}

// ClearState clears the value of the "state" field.
func (auo *AddressUpdateOne) ClearState() *AddressUpdateOne {
	auo.mutation.ClearState()
	return auo
}

// SetZipcode sets the "zipcode" field.
func (auo *AddressUpdateOne) SetZipcode(s string) *AddressUpdateOne {
	auo.mutation.SetZipcode(s)
	return auo
}

// SetNillableZipcode sets the "zipcode" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableZipcode(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetZipcode(*s)
	}
	return auo
}

// ClearZipcode clears the value of the "zipcode" field.
func (auo *AddressUpdateOne) ClearZipcode() *AddressUpdateOne {
	auo.mutation.ClearZipcode()
	return auo
}

// SetCountry sets the "country" field.
func (auo *AddressUpdateOne) SetCountry(s string) *AddressUpdateOne {
	auo.mutation.SetCountry(s)
	return auo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableCountry(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetCountry(*s)
	}
	return auo
}

// ClearCountry clears the value of the "country" field.
func (auo *AddressUpdateOne) ClearCountry() *AddressUpdateOne {
	auo.mutation.ClearCountry()
	return auo
}

// SetAddressConfirmed sets the "address_confirmed" field.
func (auo *AddressUpdateOne) SetAddressConfirmed(b bool) *AddressUpdateOne {
	auo.mutation.SetAddressConfirmed(b)
	return auo
}

// SetNillableAddressConfirmed sets the "address_confirmed" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableAddressConfirmed(b *bool) *AddressUpdateOne {
	if b != nil {
		auo.SetAddressConfirmed(*b)
	}
	return auo
}

// SetIsPrimaryAddress sets the "is_primary_address" field.
func (auo *AddressUpdateOne) SetIsPrimaryAddress(b bool) *AddressUpdateOne {
	auo.mutation.SetIsPrimaryAddress(b)
	return auo
}

// SetNillableIsPrimaryAddress sets the "is_primary_address" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableIsPrimaryAddress(b *bool) *AddressUpdateOne {
	if b != nil {
		auo.SetIsPrimaryAddress(*b)
	}
	return auo
}

// SetCustomerID sets the "customer_id" field.
func (auo *AddressUpdateOne) SetCustomerID(i int) *AddressUpdateOne {
	auo.mutation.SetCustomerID(i)
	return auo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableCustomerID(i *int) *AddressUpdateOne {
	if i != nil {
		auo.SetCustomerID(*i)
	}
	return auo
}

// ClearCustomerID clears the value of the "customer_id" field.
func (auo *AddressUpdateOne) ClearCustomerID() *AddressUpdateOne {
	auo.mutation.ClearCustomerID()
	return auo
}

// SetPatientID sets the "patient_id" field.
func (auo *AddressUpdateOne) SetPatientID(i int) *AddressUpdateOne {
	auo.mutation.SetPatientID(i)
	return auo
}

// SetNillablePatientID sets the "patient_id" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillablePatientID(i *int) *AddressUpdateOne {
	if i != nil {
		auo.SetPatientID(*i)
	}
	return auo
}

// ClearPatientID clears the value of the "patient_id" field.
func (auo *AddressUpdateOne) ClearPatientID() *AddressUpdateOne {
	auo.mutation.ClearPatientID()
	return auo
}

// SetClinicID sets the "clinic_id" field.
func (auo *AddressUpdateOne) SetClinicID(i int) *AddressUpdateOne {
	auo.mutation.SetClinicID(i)
	return auo
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableClinicID(i *int) *AddressUpdateOne {
	if i != nil {
		auo.SetClinicID(*i)
	}
	return auo
}

// ClearClinicID clears the value of the "clinic_id" field.
func (auo *AddressUpdateOne) ClearClinicID() *AddressUpdateOne {
	auo.mutation.ClearClinicID()
	return auo
}

// SetInternalUserID sets the "internal_user_id" field.
func (auo *AddressUpdateOne) SetInternalUserID(i int) *AddressUpdateOne {
	auo.mutation.SetInternalUserID(i)
	return auo
}

// SetNillableInternalUserID sets the "internal_user_id" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableInternalUserID(i *int) *AddressUpdateOne {
	if i != nil {
		auo.SetInternalUserID(*i)
	}
	return auo
}

// ClearInternalUserID clears the value of the "internal_user_id" field.
func (auo *AddressUpdateOne) ClearInternalUserID() *AddressUpdateOne {
	auo.mutation.ClearInternalUserID()
	return auo
}

// SetAddressLevel sets the "address_level" field.
func (auo *AddressUpdateOne) SetAddressLevel(i int) *AddressUpdateOne {
	auo.mutation.ResetAddressLevel()
	auo.mutation.SetAddressLevel(i)
	return auo
}

// SetNillableAddressLevel sets the "address_level" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableAddressLevel(i *int) *AddressUpdateOne {
	if i != nil {
		auo.SetAddressLevel(*i)
	}
	return auo
}

// AddAddressLevel adds i to the "address_level" field.
func (auo *AddressUpdateOne) AddAddressLevel(i int) *AddressUpdateOne {
	auo.mutation.AddAddressLevel(i)
	return auo
}

// SetAddressLevelName sets the "address_level_name" field.
func (auo *AddressUpdateOne) SetAddressLevelName(s string) *AddressUpdateOne {
	auo.mutation.SetAddressLevelName(s)
	return auo
}

// SetNillableAddressLevelName sets the "address_level_name" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableAddressLevelName(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetAddressLevelName(*s)
	}
	return auo
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (auo *AddressUpdateOne) SetApplyToAllGroupMember(b bool) *AddressUpdateOne {
	auo.mutation.SetApplyToAllGroupMember(b)
	return auo
}

// SetNillableApplyToAllGroupMember sets the "apply_to_all_group_member" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableApplyToAllGroupMember(b *bool) *AddressUpdateOne {
	if b != nil {
		auo.SetApplyToAllGroupMember(*b)
	}
	return auo
}

// SetGroupAddressID sets the "group_address_id" field.
func (auo *AddressUpdateOne) SetGroupAddressID(i int) *AddressUpdateOne {
	auo.mutation.SetGroupAddressID(i)
	return auo
}

// SetNillableGroupAddressID sets the "group_address_id" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableGroupAddressID(i *int) *AddressUpdateOne {
	if i != nil {
		auo.SetGroupAddressID(*i)
	}
	return auo
}

// ClearGroupAddressID clears the value of the "group_address_id" field.
func (auo *AddressUpdateOne) ClearGroupAddressID() *AddressUpdateOne {
	auo.mutation.ClearGroupAddressID()
	return auo
}

// SetIsGroupAddress sets the "is_group_address" field.
func (auo *AddressUpdateOne) SetIsGroupAddress(b bool) *AddressUpdateOne {
	auo.mutation.SetIsGroupAddress(b)
	return auo
}

// SetNillableIsGroupAddress sets the "is_group_address" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableIsGroupAddress(b *bool) *AddressUpdateOne {
	if b != nil {
		auo.SetIsGroupAddress(*b)
	}
	return auo
}

// SetUseAsDefaultCreateAddress sets the "use_as_default_create_address" field.
func (auo *AddressUpdateOne) SetUseAsDefaultCreateAddress(b bool) *AddressUpdateOne {
	auo.mutation.SetUseAsDefaultCreateAddress(b)
	return auo
}

// SetNillableUseAsDefaultCreateAddress sets the "use_as_default_create_address" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableUseAsDefaultCreateAddress(b *bool) *AddressUpdateOne {
	if b != nil {
		auo.SetUseAsDefaultCreateAddress(*b)
	}
	return auo
}

// SetUseGroupAddress sets the "use_group_address" field.
func (auo *AddressUpdateOne) SetUseGroupAddress(b bool) *AddressUpdateOne {
	auo.mutation.SetUseGroupAddress(b)
	return auo
}

// SetNillableUseGroupAddress sets the "use_group_address" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableUseGroupAddress(b *bool) *AddressUpdateOne {
	if b != nil {
		auo.SetUseGroupAddress(*b)
	}
	return auo
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (auo *AddressUpdateOne) SetClinic(c *Clinic) *AddressUpdateOne {
	return auo.SetClinicID(c.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (auo *AddressUpdateOne) SetCustomer(c *Customer) *AddressUpdateOne {
	return auo.SetCustomerID(c.ID)
}

// AddCustomerClinicMappingIDs adds the "customer_clinic_mappings" edge to the CustomerAddressOnClinics entity by IDs.
func (auo *AddressUpdateOne) AddCustomerClinicMappingIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.AddCustomerClinicMappingIDs(ids...)
	return auo
}

// AddCustomerClinicMappings adds the "customer_clinic_mappings" edges to the CustomerAddressOnClinics entity.
func (auo *AddressUpdateOne) AddCustomerClinicMappings(c ...*CustomerAddressOnClinics) *AddressUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.AddCustomerClinicMappingIDs(ids...)
}

// AddMemberAddressIDs adds the "member_addresses" edge to the Address entity by IDs.
func (auo *AddressUpdateOne) AddMemberAddressIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.AddMemberAddressIDs(ids...)
	return auo
}

// AddMemberAddresses adds the "member_addresses" edges to the Address entity.
func (auo *AddressUpdateOne) AddMemberAddresses(a ...*Address) *AddressUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddMemberAddressIDs(ids...)
}

// SetGroupAddress sets the "group_address" edge to the Address entity.
func (auo *AddressUpdateOne) SetGroupAddress(a *Address) *AddressUpdateOne {
	return auo.SetGroupAddressID(a.ID)
}

// SetInternalUser sets the "internal_user" edge to the InternalUser entity.
func (auo *AddressUpdateOne) SetInternalUser(i *InternalUser) *AddressUpdateOne {
	return auo.SetInternalUserID(i.ID)
}

// SetPatient sets the "patient" edge to the Patient entity.
func (auo *AddressUpdateOne) SetPatient(p *Patient) *AddressUpdateOne {
	return auo.SetPatientID(p.ID)
}

// AddOrderIDs adds the "orders" edge to the OrderInfo entity by IDs.
func (auo *AddressUpdateOne) AddOrderIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.AddOrderIDs(ids...)
	return auo
}

// AddOrders adds the "orders" edges to the OrderInfo entity.
func (auo *AddressUpdateOne) AddOrders(o ...*OrderInfo) *AddressUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.AddOrderIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (auo *AddressUpdateOne) Mutation() *AddressMutation {
	return auo.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (auo *AddressUpdateOne) ClearClinic() *AddressUpdateOne {
	auo.mutation.ClearClinic()
	return auo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (auo *AddressUpdateOne) ClearCustomer() *AddressUpdateOne {
	auo.mutation.ClearCustomer()
	return auo
}

// ClearCustomerClinicMappings clears all "customer_clinic_mappings" edges to the CustomerAddressOnClinics entity.
func (auo *AddressUpdateOne) ClearCustomerClinicMappings() *AddressUpdateOne {
	auo.mutation.ClearCustomerClinicMappings()
	return auo
}

// RemoveCustomerClinicMappingIDs removes the "customer_clinic_mappings" edge to CustomerAddressOnClinics entities by IDs.
func (auo *AddressUpdateOne) RemoveCustomerClinicMappingIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.RemoveCustomerClinicMappingIDs(ids...)
	return auo
}

// RemoveCustomerClinicMappings removes "customer_clinic_mappings" edges to CustomerAddressOnClinics entities.
func (auo *AddressUpdateOne) RemoveCustomerClinicMappings(c ...*CustomerAddressOnClinics) *AddressUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.RemoveCustomerClinicMappingIDs(ids...)
}

// ClearMemberAddresses clears all "member_addresses" edges to the Address entity.
func (auo *AddressUpdateOne) ClearMemberAddresses() *AddressUpdateOne {
	auo.mutation.ClearMemberAddresses()
	return auo
}

// RemoveMemberAddressIDs removes the "member_addresses" edge to Address entities by IDs.
func (auo *AddressUpdateOne) RemoveMemberAddressIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.RemoveMemberAddressIDs(ids...)
	return auo
}

// RemoveMemberAddresses removes "member_addresses" edges to Address entities.
func (auo *AddressUpdateOne) RemoveMemberAddresses(a ...*Address) *AddressUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveMemberAddressIDs(ids...)
}

// ClearGroupAddress clears the "group_address" edge to the Address entity.
func (auo *AddressUpdateOne) ClearGroupAddress() *AddressUpdateOne {
	auo.mutation.ClearGroupAddress()
	return auo
}

// ClearInternalUser clears the "internal_user" edge to the InternalUser entity.
func (auo *AddressUpdateOne) ClearInternalUser() *AddressUpdateOne {
	auo.mutation.ClearInternalUser()
	return auo
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (auo *AddressUpdateOne) ClearPatient() *AddressUpdateOne {
	auo.mutation.ClearPatient()
	return auo
}

// ClearOrders clears all "orders" edges to the OrderInfo entity.
func (auo *AddressUpdateOne) ClearOrders() *AddressUpdateOne {
	auo.mutation.ClearOrders()
	return auo
}

// RemoveOrderIDs removes the "orders" edge to OrderInfo entities by IDs.
func (auo *AddressUpdateOne) RemoveOrderIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.RemoveOrderIDs(ids...)
	return auo
}

// RemoveOrders removes "orders" edges to OrderInfo entities.
func (auo *AddressUpdateOne) RemoveOrders(o ...*OrderInfo) *AddressUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.RemoveOrderIDs(ids...)
}

// Where appends a list predicates to the AddressUpdate builder.
func (auo *AddressUpdateOne) Where(ps ...predicate.Address) *AddressUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AddressUpdateOne) Select(field string, fields ...string) *AddressUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Address entity.
func (auo *AddressUpdateOne) Save(ctx context.Context) (*Address, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AddressUpdateOne) SaveX(ctx context.Context) *Address {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AddressUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AddressUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AddressUpdateOne) sqlSave(ctx context.Context) (_node *Address, err error) {
	_spec := sqlgraph.NewUpdateSpec(address.Table, address.Columns, sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Address.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, address.FieldID)
		for _, f := range fields {
			if !address.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != address.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.AddressType(); ok {
		_spec.SetField(address.FieldAddressType, field.TypeString, value)
	}
	if auo.mutation.AddressTypeCleared() {
		_spec.ClearField(address.FieldAddressType, field.TypeString)
	}
	if value, ok := auo.mutation.StreetAddress(); ok {
		_spec.SetField(address.FieldStreetAddress, field.TypeString, value)
	}
	if auo.mutation.StreetAddressCleared() {
		_spec.ClearField(address.FieldStreetAddress, field.TypeString)
	}
	if value, ok := auo.mutation.AptPo(); ok {
		_spec.SetField(address.FieldAptPo, field.TypeString, value)
	}
	if auo.mutation.AptPoCleared() {
		_spec.ClearField(address.FieldAptPo, field.TypeString)
	}
	if value, ok := auo.mutation.City(); ok {
		_spec.SetField(address.FieldCity, field.TypeString, value)
	}
	if auo.mutation.CityCleared() {
		_spec.ClearField(address.FieldCity, field.TypeString)
	}
	if value, ok := auo.mutation.State(); ok {
		_spec.SetField(address.FieldState, field.TypeString, value)
	}
	if auo.mutation.StateCleared() {
		_spec.ClearField(address.FieldState, field.TypeString)
	}
	if value, ok := auo.mutation.Zipcode(); ok {
		_spec.SetField(address.FieldZipcode, field.TypeString, value)
	}
	if auo.mutation.ZipcodeCleared() {
		_spec.ClearField(address.FieldZipcode, field.TypeString)
	}
	if value, ok := auo.mutation.Country(); ok {
		_spec.SetField(address.FieldCountry, field.TypeString, value)
	}
	if auo.mutation.CountryCleared() {
		_spec.ClearField(address.FieldCountry, field.TypeString)
	}
	if value, ok := auo.mutation.AddressConfirmed(); ok {
		_spec.SetField(address.FieldAddressConfirmed, field.TypeBool, value)
	}
	if value, ok := auo.mutation.IsPrimaryAddress(); ok {
		_spec.SetField(address.FieldIsPrimaryAddress, field.TypeBool, value)
	}
	if value, ok := auo.mutation.AddressLevel(); ok {
		_spec.SetField(address.FieldAddressLevel, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedAddressLevel(); ok {
		_spec.AddField(address.FieldAddressLevel, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddressLevelName(); ok {
		_spec.SetField(address.FieldAddressLevelName, field.TypeString, value)
	}
	if value, ok := auo.mutation.ApplyToAllGroupMember(); ok {
		_spec.SetField(address.FieldApplyToAllGroupMember, field.TypeBool, value)
	}
	if value, ok := auo.mutation.IsGroupAddress(); ok {
		_spec.SetField(address.FieldIsGroupAddress, field.TypeBool, value)
	}
	if value, ok := auo.mutation.UseAsDefaultCreateAddress(); ok {
		_spec.SetField(address.FieldUseAsDefaultCreateAddress, field.TypeBool, value)
	}
	if value, ok := auo.mutation.UseGroupAddress(); ok {
		_spec.SetField(address.FieldUseGroupAddress, field.TypeBool, value)
	}
	if auo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.ClinicTable,
			Columns: []string{address.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.ClinicTable,
			Columns: []string{address.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.CustomerTable,
			Columns: []string{address.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.CustomerTable,
			Columns: []string{address.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CustomerClinicMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.CustomerClinicMappingsTable,
			Columns: []string{address.CustomerClinicMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCustomerClinicMappingsIDs(); len(nodes) > 0 && !auo.mutation.CustomerClinicMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.CustomerClinicMappingsTable,
			Columns: []string{address.CustomerClinicMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CustomerClinicMappingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.CustomerClinicMappingsTable,
			Columns: []string{address.CustomerClinicMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.MemberAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.MemberAddressesTable,
			Columns: []string{address.MemberAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedMemberAddressesIDs(); len(nodes) > 0 && !auo.mutation.MemberAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.MemberAddressesTable,
			Columns: []string{address.MemberAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MemberAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.MemberAddressesTable,
			Columns: []string{address.MemberAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.GroupAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.GroupAddressTable,
			Columns: []string{address.GroupAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.GroupAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.GroupAddressTable,
			Columns: []string{address.GroupAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.InternalUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.InternalUserTable,
			Columns: []string{address.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.InternalUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.InternalUserTable,
			Columns: []string{address.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.PatientTable,
			Columns: []string{address.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.PatientTable,
			Columns: []string{address.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !auo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Address{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
