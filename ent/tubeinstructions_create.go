// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/tubeinstructions"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TubeInstructionsCreate is the builder for creating a TubeInstructions entity.
type TubeInstructionsCreate struct {
	config
	mutation *TubeInstructionsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTubeNameEnum sets the "tube_name_enum" field.
func (tic *TubeInstructionsCreate) SetTubeNameEnum(s string) *TubeInstructionsCreate {
	tic.mutation.SetTubeNameEnum(s)
	return tic
}

// SetSortOrder sets the "sort_order" field.
func (tic *TubeInstructionsCreate) SetSortOrder(i int) *TubeInstructionsCreate {
	tic.mutation.SetSortOrder(i)
	return tic
}

// SetTubeInstructions sets the "tube_instructions" field.
func (tic *TubeInstructionsCreate) SetTubeInstructions(s string) *TubeInstructionsCreate {
	tic.mutation.SetTubeInstructions(s)
	return tic
}

// SetTubeName sets the "tube_name" field.
func (tic *TubeInstructionsCreate) SetTubeName(s string) *TubeInstructionsCreate {
	tic.mutation.SetTubeName(s)
	return tic
}

// SetShippingBox sets the "shipping_box" field.
func (tic *TubeInstructionsCreate) SetShippingBox(s string) *TubeInstructionsCreate {
	tic.mutation.SetShippingBox(s)
	return tic
}

// SetTransferTubesToSend sets the "transfer_tubes_to_send" field.
func (tic *TubeInstructionsCreate) SetTransferTubesToSend(s string) *TubeInstructionsCreate {
	tic.mutation.SetTransferTubesToSend(s)
	return tic
}

// SetBloodType sets the "blood_type" field.
func (tic *TubeInstructionsCreate) SetBloodType(b bool) *TubeInstructionsCreate {
	tic.mutation.SetBloodType(b)
	return tic
}

// SetNillableBloodType sets the "blood_type" field if the given value is not nil.
func (tic *TubeInstructionsCreate) SetNillableBloodType(b *bool) *TubeInstructionsCreate {
	if b != nil {
		tic.SetBloodType(*b)
	}
	return tic
}

// Mutation returns the TubeInstructionsMutation object of the builder.
func (tic *TubeInstructionsCreate) Mutation() *TubeInstructionsMutation {
	return tic.mutation
}

// Save creates the TubeInstructions in the database.
func (tic *TubeInstructionsCreate) Save(ctx context.Context) (*TubeInstructions, error) {
	tic.defaults()
	return withHooks(ctx, tic.sqlSave, tic.mutation, tic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tic *TubeInstructionsCreate) SaveX(ctx context.Context) *TubeInstructions {
	v, err := tic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tic *TubeInstructionsCreate) Exec(ctx context.Context) error {
	_, err := tic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tic *TubeInstructionsCreate) ExecX(ctx context.Context) {
	if err := tic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tic *TubeInstructionsCreate) defaults() {
	if _, ok := tic.mutation.BloodType(); !ok {
		v := tubeinstructions.DefaultBloodType
		tic.mutation.SetBloodType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tic *TubeInstructionsCreate) check() error {
	if _, ok := tic.mutation.TubeNameEnum(); !ok {
		return &ValidationError{Name: "tube_name_enum", err: errors.New(`ent: missing required field "TubeInstructions.tube_name_enum"`)}
	}
	if _, ok := tic.mutation.SortOrder(); !ok {
		return &ValidationError{Name: "sort_order", err: errors.New(`ent: missing required field "TubeInstructions.sort_order"`)}
	}
	if _, ok := tic.mutation.TubeInstructions(); !ok {
		return &ValidationError{Name: "tube_instructions", err: errors.New(`ent: missing required field "TubeInstructions.tube_instructions"`)}
	}
	if v, ok := tic.mutation.TubeInstructions(); ok {
		if err := tubeinstructions.TubeInstructionsValidator(v); err != nil {
			return &ValidationError{Name: "tube_instructions", err: fmt.Errorf(`ent: validator failed for field "TubeInstructions.tube_instructions": %w`, err)}
		}
	}
	if _, ok := tic.mutation.TubeName(); !ok {
		return &ValidationError{Name: "tube_name", err: errors.New(`ent: missing required field "TubeInstructions.tube_name"`)}
	}
	if _, ok := tic.mutation.ShippingBox(); !ok {
		return &ValidationError{Name: "shipping_box", err: errors.New(`ent: missing required field "TubeInstructions.shipping_box"`)}
	}
	if _, ok := tic.mutation.TransferTubesToSend(); !ok {
		return &ValidationError{Name: "transfer_tubes_to_send", err: errors.New(`ent: missing required field "TubeInstructions.transfer_tubes_to_send"`)}
	}
	if _, ok := tic.mutation.BloodType(); !ok {
		return &ValidationError{Name: "blood_type", err: errors.New(`ent: missing required field "TubeInstructions.blood_type"`)}
	}
	return nil
}

func (tic *TubeInstructionsCreate) sqlSave(ctx context.Context) (*TubeInstructions, error) {
	if err := tic.check(); err != nil {
		return nil, err
	}
	_node, _spec := tic.createSpec()
	if err := sqlgraph.CreateNode(ctx, tic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tic.mutation.id = &_node.ID
	tic.mutation.done = true
	return _node, nil
}

func (tic *TubeInstructionsCreate) createSpec() (*TubeInstructions, *sqlgraph.CreateSpec) {
	var (
		_node = &TubeInstructions{config: tic.config}
		_spec = sqlgraph.NewCreateSpec(tubeinstructions.Table, sqlgraph.NewFieldSpec(tubeinstructions.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tic.conflict
	if value, ok := tic.mutation.TubeNameEnum(); ok {
		_spec.SetField(tubeinstructions.FieldTubeNameEnum, field.TypeString, value)
		_node.TubeNameEnum = value
	}
	if value, ok := tic.mutation.SortOrder(); ok {
		_spec.SetField(tubeinstructions.FieldSortOrder, field.TypeInt, value)
		_node.SortOrder = value
	}
	if value, ok := tic.mutation.TubeInstructions(); ok {
		_spec.SetField(tubeinstructions.FieldTubeInstructions, field.TypeString, value)
		_node.TubeInstructions = value
	}
	if value, ok := tic.mutation.TubeName(); ok {
		_spec.SetField(tubeinstructions.FieldTubeName, field.TypeString, value)
		_node.TubeName = value
	}
	if value, ok := tic.mutation.ShippingBox(); ok {
		_spec.SetField(tubeinstructions.FieldShippingBox, field.TypeString, value)
		_node.ShippingBox = value
	}
	if value, ok := tic.mutation.TransferTubesToSend(); ok {
		_spec.SetField(tubeinstructions.FieldTransferTubesToSend, field.TypeString, value)
		_node.TransferTubesToSend = value
	}
	if value, ok := tic.mutation.BloodType(); ok {
		_spec.SetField(tubeinstructions.FieldBloodType, field.TypeBool, value)
		_node.BloodType = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TubeInstructions.Create().
//		SetTubeNameEnum(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TubeInstructionsUpsert) {
//			SetTubeNameEnum(v+v).
//		}).
//		Exec(ctx)
func (tic *TubeInstructionsCreate) OnConflict(opts ...sql.ConflictOption) *TubeInstructionsUpsertOne {
	tic.conflict = opts
	return &TubeInstructionsUpsertOne{
		create: tic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TubeInstructions.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tic *TubeInstructionsCreate) OnConflictColumns(columns ...string) *TubeInstructionsUpsertOne {
	tic.conflict = append(tic.conflict, sql.ConflictColumns(columns...))
	return &TubeInstructionsUpsertOne{
		create: tic,
	}
}

type (
	// TubeInstructionsUpsertOne is the builder for "upsert"-ing
	//  one TubeInstructions node.
	TubeInstructionsUpsertOne struct {
		create *TubeInstructionsCreate
	}

	// TubeInstructionsUpsert is the "OnConflict" setter.
	TubeInstructionsUpsert struct {
		*sql.UpdateSet
	}
)

// SetTubeNameEnum sets the "tube_name_enum" field.
func (u *TubeInstructionsUpsert) SetTubeNameEnum(v string) *TubeInstructionsUpsert {
	u.Set(tubeinstructions.FieldTubeNameEnum, v)
	return u
}

// UpdateTubeNameEnum sets the "tube_name_enum" field to the value that was provided on create.
func (u *TubeInstructionsUpsert) UpdateTubeNameEnum() *TubeInstructionsUpsert {
	u.SetExcluded(tubeinstructions.FieldTubeNameEnum)
	return u
}

// SetSortOrder sets the "sort_order" field.
func (u *TubeInstructionsUpsert) SetSortOrder(v int) *TubeInstructionsUpsert {
	u.Set(tubeinstructions.FieldSortOrder, v)
	return u
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *TubeInstructionsUpsert) UpdateSortOrder() *TubeInstructionsUpsert {
	u.SetExcluded(tubeinstructions.FieldSortOrder)
	return u
}

// AddSortOrder adds v to the "sort_order" field.
func (u *TubeInstructionsUpsert) AddSortOrder(v int) *TubeInstructionsUpsert {
	u.Add(tubeinstructions.FieldSortOrder, v)
	return u
}

// SetTubeInstructions sets the "tube_instructions" field.
func (u *TubeInstructionsUpsert) SetTubeInstructions(v string) *TubeInstructionsUpsert {
	u.Set(tubeinstructions.FieldTubeInstructions, v)
	return u
}

// UpdateTubeInstructions sets the "tube_instructions" field to the value that was provided on create.
func (u *TubeInstructionsUpsert) UpdateTubeInstructions() *TubeInstructionsUpsert {
	u.SetExcluded(tubeinstructions.FieldTubeInstructions)
	return u
}

// SetTubeName sets the "tube_name" field.
func (u *TubeInstructionsUpsert) SetTubeName(v string) *TubeInstructionsUpsert {
	u.Set(tubeinstructions.FieldTubeName, v)
	return u
}

// UpdateTubeName sets the "tube_name" field to the value that was provided on create.
func (u *TubeInstructionsUpsert) UpdateTubeName() *TubeInstructionsUpsert {
	u.SetExcluded(tubeinstructions.FieldTubeName)
	return u
}

// SetShippingBox sets the "shipping_box" field.
func (u *TubeInstructionsUpsert) SetShippingBox(v string) *TubeInstructionsUpsert {
	u.Set(tubeinstructions.FieldShippingBox, v)
	return u
}

// UpdateShippingBox sets the "shipping_box" field to the value that was provided on create.
func (u *TubeInstructionsUpsert) UpdateShippingBox() *TubeInstructionsUpsert {
	u.SetExcluded(tubeinstructions.FieldShippingBox)
	return u
}

// SetTransferTubesToSend sets the "transfer_tubes_to_send" field.
func (u *TubeInstructionsUpsert) SetTransferTubesToSend(v string) *TubeInstructionsUpsert {
	u.Set(tubeinstructions.FieldTransferTubesToSend, v)
	return u
}

// UpdateTransferTubesToSend sets the "transfer_tubes_to_send" field to the value that was provided on create.
func (u *TubeInstructionsUpsert) UpdateTransferTubesToSend() *TubeInstructionsUpsert {
	u.SetExcluded(tubeinstructions.FieldTransferTubesToSend)
	return u
}

// SetBloodType sets the "blood_type" field.
func (u *TubeInstructionsUpsert) SetBloodType(v bool) *TubeInstructionsUpsert {
	u.Set(tubeinstructions.FieldBloodType, v)
	return u
}

// UpdateBloodType sets the "blood_type" field to the value that was provided on create.
func (u *TubeInstructionsUpsert) UpdateBloodType() *TubeInstructionsUpsert {
	u.SetExcluded(tubeinstructions.FieldBloodType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TubeInstructions.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TubeInstructionsUpsertOne) UpdateNewValues() *TubeInstructionsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TubeInstructions.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TubeInstructionsUpsertOne) Ignore() *TubeInstructionsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TubeInstructionsUpsertOne) DoNothing() *TubeInstructionsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TubeInstructionsCreate.OnConflict
// documentation for more info.
func (u *TubeInstructionsUpsertOne) Update(set func(*TubeInstructionsUpsert)) *TubeInstructionsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TubeInstructionsUpsert{UpdateSet: update})
	}))
	return u
}

// SetTubeNameEnum sets the "tube_name_enum" field.
func (u *TubeInstructionsUpsertOne) SetTubeNameEnum(v string) *TubeInstructionsUpsertOne {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.SetTubeNameEnum(v)
	})
}

// UpdateTubeNameEnum sets the "tube_name_enum" field to the value that was provided on create.
func (u *TubeInstructionsUpsertOne) UpdateTubeNameEnum() *TubeInstructionsUpsertOne {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.UpdateTubeNameEnum()
	})
}

// SetSortOrder sets the "sort_order" field.
func (u *TubeInstructionsUpsertOne) SetSortOrder(v int) *TubeInstructionsUpsertOne {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.SetSortOrder(v)
	})
}

// AddSortOrder adds v to the "sort_order" field.
func (u *TubeInstructionsUpsertOne) AddSortOrder(v int) *TubeInstructionsUpsertOne {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.AddSortOrder(v)
	})
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *TubeInstructionsUpsertOne) UpdateSortOrder() *TubeInstructionsUpsertOne {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.UpdateSortOrder()
	})
}

// SetTubeInstructions sets the "tube_instructions" field.
func (u *TubeInstructionsUpsertOne) SetTubeInstructions(v string) *TubeInstructionsUpsertOne {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.SetTubeInstructions(v)
	})
}

// UpdateTubeInstructions sets the "tube_instructions" field to the value that was provided on create.
func (u *TubeInstructionsUpsertOne) UpdateTubeInstructions() *TubeInstructionsUpsertOne {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.UpdateTubeInstructions()
	})
}

// SetTubeName sets the "tube_name" field.
func (u *TubeInstructionsUpsertOne) SetTubeName(v string) *TubeInstructionsUpsertOne {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.SetTubeName(v)
	})
}

// UpdateTubeName sets the "tube_name" field to the value that was provided on create.
func (u *TubeInstructionsUpsertOne) UpdateTubeName() *TubeInstructionsUpsertOne {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.UpdateTubeName()
	})
}

// SetShippingBox sets the "shipping_box" field.
func (u *TubeInstructionsUpsertOne) SetShippingBox(v string) *TubeInstructionsUpsertOne {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.SetShippingBox(v)
	})
}

// UpdateShippingBox sets the "shipping_box" field to the value that was provided on create.
func (u *TubeInstructionsUpsertOne) UpdateShippingBox() *TubeInstructionsUpsertOne {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.UpdateShippingBox()
	})
}

// SetTransferTubesToSend sets the "transfer_tubes_to_send" field.
func (u *TubeInstructionsUpsertOne) SetTransferTubesToSend(v string) *TubeInstructionsUpsertOne {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.SetTransferTubesToSend(v)
	})
}

// UpdateTransferTubesToSend sets the "transfer_tubes_to_send" field to the value that was provided on create.
func (u *TubeInstructionsUpsertOne) UpdateTransferTubesToSend() *TubeInstructionsUpsertOne {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.UpdateTransferTubesToSend()
	})
}

// SetBloodType sets the "blood_type" field.
func (u *TubeInstructionsUpsertOne) SetBloodType(v bool) *TubeInstructionsUpsertOne {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.SetBloodType(v)
	})
}

// UpdateBloodType sets the "blood_type" field to the value that was provided on create.
func (u *TubeInstructionsUpsertOne) UpdateBloodType() *TubeInstructionsUpsertOne {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.UpdateBloodType()
	})
}

// Exec executes the query.
func (u *TubeInstructionsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TubeInstructionsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TubeInstructionsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TubeInstructionsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TubeInstructionsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TubeInstructionsCreateBulk is the builder for creating many TubeInstructions entities in bulk.
type TubeInstructionsCreateBulk struct {
	config
	err      error
	builders []*TubeInstructionsCreate
	conflict []sql.ConflictOption
}

// Save creates the TubeInstructions entities in the database.
func (ticb *TubeInstructionsCreateBulk) Save(ctx context.Context) ([]*TubeInstructions, error) {
	if ticb.err != nil {
		return nil, ticb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ticb.builders))
	nodes := make([]*TubeInstructions, len(ticb.builders))
	mutators := make([]Mutator, len(ticb.builders))
	for i := range ticb.builders {
		func(i int, root context.Context) {
			builder := ticb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TubeInstructionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ticb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ticb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ticb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ticb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ticb *TubeInstructionsCreateBulk) SaveX(ctx context.Context) []*TubeInstructions {
	v, err := ticb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ticb *TubeInstructionsCreateBulk) Exec(ctx context.Context) error {
	_, err := ticb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ticb *TubeInstructionsCreateBulk) ExecX(ctx context.Context) {
	if err := ticb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TubeInstructions.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TubeInstructionsUpsert) {
//			SetTubeNameEnum(v+v).
//		}).
//		Exec(ctx)
func (ticb *TubeInstructionsCreateBulk) OnConflict(opts ...sql.ConflictOption) *TubeInstructionsUpsertBulk {
	ticb.conflict = opts
	return &TubeInstructionsUpsertBulk{
		create: ticb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TubeInstructions.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ticb *TubeInstructionsCreateBulk) OnConflictColumns(columns ...string) *TubeInstructionsUpsertBulk {
	ticb.conflict = append(ticb.conflict, sql.ConflictColumns(columns...))
	return &TubeInstructionsUpsertBulk{
		create: ticb,
	}
}

// TubeInstructionsUpsertBulk is the builder for "upsert"-ing
// a bulk of TubeInstructions nodes.
type TubeInstructionsUpsertBulk struct {
	create *TubeInstructionsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TubeInstructions.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TubeInstructionsUpsertBulk) UpdateNewValues() *TubeInstructionsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TubeInstructions.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TubeInstructionsUpsertBulk) Ignore() *TubeInstructionsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TubeInstructionsUpsertBulk) DoNothing() *TubeInstructionsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TubeInstructionsCreateBulk.OnConflict
// documentation for more info.
func (u *TubeInstructionsUpsertBulk) Update(set func(*TubeInstructionsUpsert)) *TubeInstructionsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TubeInstructionsUpsert{UpdateSet: update})
	}))
	return u
}

// SetTubeNameEnum sets the "tube_name_enum" field.
func (u *TubeInstructionsUpsertBulk) SetTubeNameEnum(v string) *TubeInstructionsUpsertBulk {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.SetTubeNameEnum(v)
	})
}

// UpdateTubeNameEnum sets the "tube_name_enum" field to the value that was provided on create.
func (u *TubeInstructionsUpsertBulk) UpdateTubeNameEnum() *TubeInstructionsUpsertBulk {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.UpdateTubeNameEnum()
	})
}

// SetSortOrder sets the "sort_order" field.
func (u *TubeInstructionsUpsertBulk) SetSortOrder(v int) *TubeInstructionsUpsertBulk {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.SetSortOrder(v)
	})
}

// AddSortOrder adds v to the "sort_order" field.
func (u *TubeInstructionsUpsertBulk) AddSortOrder(v int) *TubeInstructionsUpsertBulk {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.AddSortOrder(v)
	})
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *TubeInstructionsUpsertBulk) UpdateSortOrder() *TubeInstructionsUpsertBulk {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.UpdateSortOrder()
	})
}

// SetTubeInstructions sets the "tube_instructions" field.
func (u *TubeInstructionsUpsertBulk) SetTubeInstructions(v string) *TubeInstructionsUpsertBulk {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.SetTubeInstructions(v)
	})
}

// UpdateTubeInstructions sets the "tube_instructions" field to the value that was provided on create.
func (u *TubeInstructionsUpsertBulk) UpdateTubeInstructions() *TubeInstructionsUpsertBulk {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.UpdateTubeInstructions()
	})
}

// SetTubeName sets the "tube_name" field.
func (u *TubeInstructionsUpsertBulk) SetTubeName(v string) *TubeInstructionsUpsertBulk {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.SetTubeName(v)
	})
}

// UpdateTubeName sets the "tube_name" field to the value that was provided on create.
func (u *TubeInstructionsUpsertBulk) UpdateTubeName() *TubeInstructionsUpsertBulk {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.UpdateTubeName()
	})
}

// SetShippingBox sets the "shipping_box" field.
func (u *TubeInstructionsUpsertBulk) SetShippingBox(v string) *TubeInstructionsUpsertBulk {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.SetShippingBox(v)
	})
}

// UpdateShippingBox sets the "shipping_box" field to the value that was provided on create.
func (u *TubeInstructionsUpsertBulk) UpdateShippingBox() *TubeInstructionsUpsertBulk {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.UpdateShippingBox()
	})
}

// SetTransferTubesToSend sets the "transfer_tubes_to_send" field.
func (u *TubeInstructionsUpsertBulk) SetTransferTubesToSend(v string) *TubeInstructionsUpsertBulk {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.SetTransferTubesToSend(v)
	})
}

// UpdateTransferTubesToSend sets the "transfer_tubes_to_send" field to the value that was provided on create.
func (u *TubeInstructionsUpsertBulk) UpdateTransferTubesToSend() *TubeInstructionsUpsertBulk {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.UpdateTransferTubesToSend()
	})
}

// SetBloodType sets the "blood_type" field.
func (u *TubeInstructionsUpsertBulk) SetBloodType(v bool) *TubeInstructionsUpsertBulk {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.SetBloodType(v)
	})
}

// UpdateBloodType sets the "blood_type" field to the value that was provided on create.
func (u *TubeInstructionsUpsertBulk) UpdateBloodType() *TubeInstructionsUpsertBulk {
	return u.Update(func(s *TubeInstructionsUpsert) {
		s.UpdateBloodType()
	})
}

// Exec executes the query.
func (u *TubeInstructionsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TubeInstructionsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TubeInstructionsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TubeInstructionsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
