// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/address"
	"coresamples/ent/clinic"
	"coresamples/ent/customer"
	"coresamples/ent/customeraddressonclinics"
	"coresamples/ent/predicate"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerAddressOnClinicsQuery is the builder for querying CustomerAddressOnClinics entities.
type CustomerAddressOnClinicsQuery struct {
	config
	ctx          *QueryContext
	order        []customeraddressonclinics.OrderOption
	inters       []Interceptor
	predicates   []predicate.CustomerAddressOnClinics
	withCustomer *CustomerQuery
	withClinic   *ClinicQuery
	withAddress  *AddressQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CustomerAddressOnClinicsQuery builder.
func (caocq *CustomerAddressOnClinicsQuery) Where(ps ...predicate.CustomerAddressOnClinics) *CustomerAddressOnClinicsQuery {
	caocq.predicates = append(caocq.predicates, ps...)
	return caocq
}

// Limit the number of records to be returned by this query.
func (caocq *CustomerAddressOnClinicsQuery) Limit(limit int) *CustomerAddressOnClinicsQuery {
	caocq.ctx.Limit = &limit
	return caocq
}

// Offset to start from.
func (caocq *CustomerAddressOnClinicsQuery) Offset(offset int) *CustomerAddressOnClinicsQuery {
	caocq.ctx.Offset = &offset
	return caocq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (caocq *CustomerAddressOnClinicsQuery) Unique(unique bool) *CustomerAddressOnClinicsQuery {
	caocq.ctx.Unique = &unique
	return caocq
}

// Order specifies how the records should be ordered.
func (caocq *CustomerAddressOnClinicsQuery) Order(o ...customeraddressonclinics.OrderOption) *CustomerAddressOnClinicsQuery {
	caocq.order = append(caocq.order, o...)
	return caocq
}

// QueryCustomer chains the current query on the "customer" edge.
func (caocq *CustomerAddressOnClinicsQuery) QueryCustomer() *CustomerQuery {
	query := (&CustomerClient{config: caocq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := caocq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := caocq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(customeraddressonclinics.Table, customeraddressonclinics.FieldID, selector),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, customeraddressonclinics.CustomerTable, customeraddressonclinics.CustomerColumn),
		)
		fromU = sqlgraph.SetNeighbors(caocq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClinic chains the current query on the "clinic" edge.
func (caocq *CustomerAddressOnClinicsQuery) QueryClinic() *ClinicQuery {
	query := (&ClinicClient{config: caocq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := caocq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := caocq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(customeraddressonclinics.Table, customeraddressonclinics.FieldID, selector),
			sqlgraph.To(clinic.Table, clinic.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, customeraddressonclinics.ClinicTable, customeraddressonclinics.ClinicColumn),
		)
		fromU = sqlgraph.SetNeighbors(caocq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAddress chains the current query on the "address" edge.
func (caocq *CustomerAddressOnClinicsQuery) QueryAddress() *AddressQuery {
	query := (&AddressClient{config: caocq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := caocq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := caocq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(customeraddressonclinics.Table, customeraddressonclinics.FieldID, selector),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, customeraddressonclinics.AddressTable, customeraddressonclinics.AddressColumn),
		)
		fromU = sqlgraph.SetNeighbors(caocq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CustomerAddressOnClinics entity from the query.
// Returns a *NotFoundError when no CustomerAddressOnClinics was found.
func (caocq *CustomerAddressOnClinicsQuery) First(ctx context.Context) (*CustomerAddressOnClinics, error) {
	nodes, err := caocq.Limit(1).All(setContextOp(ctx, caocq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{customeraddressonclinics.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (caocq *CustomerAddressOnClinicsQuery) FirstX(ctx context.Context) *CustomerAddressOnClinics {
	node, err := caocq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CustomerAddressOnClinics ID from the query.
// Returns a *NotFoundError when no CustomerAddressOnClinics ID was found.
func (caocq *CustomerAddressOnClinicsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = caocq.Limit(1).IDs(setContextOp(ctx, caocq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{customeraddressonclinics.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (caocq *CustomerAddressOnClinicsQuery) FirstIDX(ctx context.Context) int {
	id, err := caocq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CustomerAddressOnClinics entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CustomerAddressOnClinics entity is found.
// Returns a *NotFoundError when no CustomerAddressOnClinics entities are found.
func (caocq *CustomerAddressOnClinicsQuery) Only(ctx context.Context) (*CustomerAddressOnClinics, error) {
	nodes, err := caocq.Limit(2).All(setContextOp(ctx, caocq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{customeraddressonclinics.Label}
	default:
		return nil, &NotSingularError{customeraddressonclinics.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (caocq *CustomerAddressOnClinicsQuery) OnlyX(ctx context.Context) *CustomerAddressOnClinics {
	node, err := caocq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CustomerAddressOnClinics ID in the query.
// Returns a *NotSingularError when more than one CustomerAddressOnClinics ID is found.
// Returns a *NotFoundError when no entities are found.
func (caocq *CustomerAddressOnClinicsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = caocq.Limit(2).IDs(setContextOp(ctx, caocq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{customeraddressonclinics.Label}
	default:
		err = &NotSingularError{customeraddressonclinics.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (caocq *CustomerAddressOnClinicsQuery) OnlyIDX(ctx context.Context) int {
	id, err := caocq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CustomerAddressOnClinicsSlice.
func (caocq *CustomerAddressOnClinicsQuery) All(ctx context.Context) ([]*CustomerAddressOnClinics, error) {
	ctx = setContextOp(ctx, caocq.ctx, "All")
	if err := caocq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CustomerAddressOnClinics, *CustomerAddressOnClinicsQuery]()
	return withInterceptors[[]*CustomerAddressOnClinics](ctx, caocq, qr, caocq.inters)
}

// AllX is like All, but panics if an error occurs.
func (caocq *CustomerAddressOnClinicsQuery) AllX(ctx context.Context) []*CustomerAddressOnClinics {
	nodes, err := caocq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CustomerAddressOnClinics IDs.
func (caocq *CustomerAddressOnClinicsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if caocq.ctx.Unique == nil && caocq.path != nil {
		caocq.Unique(true)
	}
	ctx = setContextOp(ctx, caocq.ctx, "IDs")
	if err = caocq.Select(customeraddressonclinics.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (caocq *CustomerAddressOnClinicsQuery) IDsX(ctx context.Context) []int {
	ids, err := caocq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (caocq *CustomerAddressOnClinicsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, caocq.ctx, "Count")
	if err := caocq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, caocq, querierCount[*CustomerAddressOnClinicsQuery](), caocq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (caocq *CustomerAddressOnClinicsQuery) CountX(ctx context.Context) int {
	count, err := caocq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (caocq *CustomerAddressOnClinicsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, caocq.ctx, "Exist")
	switch _, err := caocq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (caocq *CustomerAddressOnClinicsQuery) ExistX(ctx context.Context) bool {
	exist, err := caocq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CustomerAddressOnClinicsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (caocq *CustomerAddressOnClinicsQuery) Clone() *CustomerAddressOnClinicsQuery {
	if caocq == nil {
		return nil
	}
	return &CustomerAddressOnClinicsQuery{
		config:       caocq.config,
		ctx:          caocq.ctx.Clone(),
		order:        append([]customeraddressonclinics.OrderOption{}, caocq.order...),
		inters:       append([]Interceptor{}, caocq.inters...),
		predicates:   append([]predicate.CustomerAddressOnClinics{}, caocq.predicates...),
		withCustomer: caocq.withCustomer.Clone(),
		withClinic:   caocq.withClinic.Clone(),
		withAddress:  caocq.withAddress.Clone(),
		// clone intermediate query.
		sql:  caocq.sql.Clone(),
		path: caocq.path,
	}
}

// WithCustomer tells the query-builder to eager-load the nodes that are connected to
// the "customer" edge. The optional arguments are used to configure the query builder of the edge.
func (caocq *CustomerAddressOnClinicsQuery) WithCustomer(opts ...func(*CustomerQuery)) *CustomerAddressOnClinicsQuery {
	query := (&CustomerClient{config: caocq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	caocq.withCustomer = query
	return caocq
}

// WithClinic tells the query-builder to eager-load the nodes that are connected to
// the "clinic" edge. The optional arguments are used to configure the query builder of the edge.
func (caocq *CustomerAddressOnClinicsQuery) WithClinic(opts ...func(*ClinicQuery)) *CustomerAddressOnClinicsQuery {
	query := (&ClinicClient{config: caocq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	caocq.withClinic = query
	return caocq
}

// WithAddress tells the query-builder to eager-load the nodes that are connected to
// the "address" edge. The optional arguments are used to configure the query builder of the edge.
func (caocq *CustomerAddressOnClinicsQuery) WithAddress(opts ...func(*AddressQuery)) *CustomerAddressOnClinicsQuery {
	query := (&AddressClient{config: caocq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	caocq.withAddress = query
	return caocq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CustomerID int `json:"customer_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CustomerAddressOnClinics.Query().
//		GroupBy(customeraddressonclinics.FieldCustomerID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (caocq *CustomerAddressOnClinicsQuery) GroupBy(field string, fields ...string) *CustomerAddressOnClinicsGroupBy {
	caocq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CustomerAddressOnClinicsGroupBy{build: caocq}
	grbuild.flds = &caocq.ctx.Fields
	grbuild.label = customeraddressonclinics.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CustomerID int `json:"customer_id,omitempty"`
//	}
//
//	client.CustomerAddressOnClinics.Query().
//		Select(customeraddressonclinics.FieldCustomerID).
//		Scan(ctx, &v)
func (caocq *CustomerAddressOnClinicsQuery) Select(fields ...string) *CustomerAddressOnClinicsSelect {
	caocq.ctx.Fields = append(caocq.ctx.Fields, fields...)
	sbuild := &CustomerAddressOnClinicsSelect{CustomerAddressOnClinicsQuery: caocq}
	sbuild.label = customeraddressonclinics.Label
	sbuild.flds, sbuild.scan = &caocq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CustomerAddressOnClinicsSelect configured with the given aggregations.
func (caocq *CustomerAddressOnClinicsQuery) Aggregate(fns ...AggregateFunc) *CustomerAddressOnClinicsSelect {
	return caocq.Select().Aggregate(fns...)
}

func (caocq *CustomerAddressOnClinicsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range caocq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, caocq); err != nil {
				return err
			}
		}
	}
	for _, f := range caocq.ctx.Fields {
		if !customeraddressonclinics.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if caocq.path != nil {
		prev, err := caocq.path(ctx)
		if err != nil {
			return err
		}
		caocq.sql = prev
	}
	return nil
}

func (caocq *CustomerAddressOnClinicsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CustomerAddressOnClinics, error) {
	var (
		nodes       = []*CustomerAddressOnClinics{}
		_spec       = caocq.querySpec()
		loadedTypes = [3]bool{
			caocq.withCustomer != nil,
			caocq.withClinic != nil,
			caocq.withAddress != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CustomerAddressOnClinics).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CustomerAddressOnClinics{config: caocq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, caocq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := caocq.withCustomer; query != nil {
		if err := caocq.loadCustomer(ctx, query, nodes, nil,
			func(n *CustomerAddressOnClinics, e *Customer) { n.Edges.Customer = e }); err != nil {
			return nil, err
		}
	}
	if query := caocq.withClinic; query != nil {
		if err := caocq.loadClinic(ctx, query, nodes, nil,
			func(n *CustomerAddressOnClinics, e *Clinic) { n.Edges.Clinic = e }); err != nil {
			return nil, err
		}
	}
	if query := caocq.withAddress; query != nil {
		if err := caocq.loadAddress(ctx, query, nodes, nil,
			func(n *CustomerAddressOnClinics, e *Address) { n.Edges.Address = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (caocq *CustomerAddressOnClinicsQuery) loadCustomer(ctx context.Context, query *CustomerQuery, nodes []*CustomerAddressOnClinics, init func(*CustomerAddressOnClinics), assign func(*CustomerAddressOnClinics, *Customer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CustomerAddressOnClinics)
	for i := range nodes {
		fk := nodes[i].CustomerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(customer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "customer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (caocq *CustomerAddressOnClinicsQuery) loadClinic(ctx context.Context, query *ClinicQuery, nodes []*CustomerAddressOnClinics, init func(*CustomerAddressOnClinics), assign func(*CustomerAddressOnClinics, *Clinic)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CustomerAddressOnClinics)
	for i := range nodes {
		fk := nodes[i].ClinicID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(clinic.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "clinic_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (caocq *CustomerAddressOnClinicsQuery) loadAddress(ctx context.Context, query *AddressQuery, nodes []*CustomerAddressOnClinics, init func(*CustomerAddressOnClinics), assign func(*CustomerAddressOnClinics, *Address)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CustomerAddressOnClinics)
	for i := range nodes {
		fk := nodes[i].AddressID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(address.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "address_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (caocq *CustomerAddressOnClinicsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := caocq.querySpec()
	_spec.Node.Columns = caocq.ctx.Fields
	if len(caocq.ctx.Fields) > 0 {
		_spec.Unique = caocq.ctx.Unique != nil && *caocq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, caocq.driver, _spec)
}

func (caocq *CustomerAddressOnClinicsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(customeraddressonclinics.Table, customeraddressonclinics.Columns, sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt))
	_spec.From = caocq.sql
	if unique := caocq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if caocq.path != nil {
		_spec.Unique = true
	}
	if fields := caocq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customeraddressonclinics.FieldID)
		for i := range fields {
			if fields[i] != customeraddressonclinics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if caocq.withCustomer != nil {
			_spec.Node.AddColumnOnce(customeraddressonclinics.FieldCustomerID)
		}
		if caocq.withClinic != nil {
			_spec.Node.AddColumnOnce(customeraddressonclinics.FieldClinicID)
		}
		if caocq.withAddress != nil {
			_spec.Node.AddColumnOnce(customeraddressonclinics.FieldAddressID)
		}
	}
	if ps := caocq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := caocq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := caocq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := caocq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (caocq *CustomerAddressOnClinicsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(caocq.driver.Dialect())
	t1 := builder.Table(customeraddressonclinics.Table)
	columns := caocq.ctx.Fields
	if len(columns) == 0 {
		columns = customeraddressonclinics.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if caocq.sql != nil {
		selector = caocq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if caocq.ctx.Unique != nil && *caocq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range caocq.predicates {
		p(selector)
	}
	for _, p := range caocq.order {
		p(selector)
	}
	if offset := caocq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := caocq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CustomerAddressOnClinicsGroupBy is the group-by builder for CustomerAddressOnClinics entities.
type CustomerAddressOnClinicsGroupBy struct {
	selector
	build *CustomerAddressOnClinicsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (caocgb *CustomerAddressOnClinicsGroupBy) Aggregate(fns ...AggregateFunc) *CustomerAddressOnClinicsGroupBy {
	caocgb.fns = append(caocgb.fns, fns...)
	return caocgb
}

// Scan applies the selector query and scans the result into the given value.
func (caocgb *CustomerAddressOnClinicsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, caocgb.build.ctx, "GroupBy")
	if err := caocgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CustomerAddressOnClinicsQuery, *CustomerAddressOnClinicsGroupBy](ctx, caocgb.build, caocgb, caocgb.build.inters, v)
}

func (caocgb *CustomerAddressOnClinicsGroupBy) sqlScan(ctx context.Context, root *CustomerAddressOnClinicsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(caocgb.fns))
	for _, fn := range caocgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*caocgb.flds)+len(caocgb.fns))
		for _, f := range *caocgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*caocgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := caocgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CustomerAddressOnClinicsSelect is the builder for selecting fields of CustomerAddressOnClinics entities.
type CustomerAddressOnClinicsSelect struct {
	*CustomerAddressOnClinicsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (caocs *CustomerAddressOnClinicsSelect) Aggregate(fns ...AggregateFunc) *CustomerAddressOnClinicsSelect {
	caocs.fns = append(caocs.fns, fns...)
	return caocs
}

// Scan applies the selector query and scans the result into the given value.
func (caocs *CustomerAddressOnClinicsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, caocs.ctx, "Select")
	if err := caocs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CustomerAddressOnClinicsQuery, *CustomerAddressOnClinicsSelect](ctx, caocs.CustomerAddressOnClinicsQuery, caocs, caocs.inters, v)
}

func (caocs *CustomerAddressOnClinicsSelect) sqlScan(ctx context.Context, root *CustomerAddressOnClinicsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(caocs.fns))
	for _, fn := range caocs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*caocs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := caocs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
