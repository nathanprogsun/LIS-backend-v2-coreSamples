// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/betaprogram"
	"coresamples/ent/betaprogramparticipation"
	"coresamples/ent/clinic"
	"coresamples/ent/customer"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BetaProgramParticipation is the model entity for the BetaProgramParticipation schema.
type BetaProgramParticipation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BetaProgramID holds the value of the "beta_program_id" field.
	BetaProgramID int `json:"beta_program_id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID int `json:"customer_id,omitempty"`
	// ClinicID holds the value of the "clinic_id" field.
	ClinicID int `json:"clinic_id,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// HasModifiedStartTime holds the value of the "has_modified_start_time" field.
	HasModifiedStartTime bool `json:"has_modified_start_time,omitempty"`
	// ModifiedStartTime holds the value of the "modified_start_time" field.
	ModifiedStartTime *time.Time `json:"modified_start_time,omitempty"`
	// ModifiedEndTime holds the value of the "modified_end_time" field.
	ModifiedEndTime *time.Time `json:"modified_end_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BetaProgramParticipationQuery when eager-loading is set.
	Edges        BetaProgramParticipationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BetaProgramParticipationEdges holds the relations/edges for other nodes in the graph.
type BetaProgramParticipationEdges struct {
	// BetaProgram holds the value of the beta_program edge.
	BetaProgram *BetaProgram `json:"beta_program,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// Clinic holds the value of the clinic edge.
	Clinic *Clinic `json:"clinic,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// BetaProgramOrErr returns the BetaProgram value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BetaProgramParticipationEdges) BetaProgramOrErr() (*BetaProgram, error) {
	if e.loadedTypes[0] {
		if e.BetaProgram == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: betaprogram.Label}
		}
		return e.BetaProgram, nil
	}
	return nil, &NotLoadedError{edge: "beta_program"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BetaProgramParticipationEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[1] {
		if e.Customer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// ClinicOrErr returns the Clinic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BetaProgramParticipationEdges) ClinicOrErr() (*Clinic, error) {
	if e.loadedTypes[2] {
		if e.Clinic == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: clinic.Label}
		}
		return e.Clinic, nil
	}
	return nil, &NotLoadedError{edge: "clinic"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BetaProgramParticipation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case betaprogramparticipation.FieldIsActive, betaprogramparticipation.FieldHasModifiedStartTime:
			values[i] = new(sql.NullBool)
		case betaprogramparticipation.FieldID, betaprogramparticipation.FieldBetaProgramID, betaprogramparticipation.FieldCustomerID, betaprogramparticipation.FieldClinicID:
			values[i] = new(sql.NullInt64)
		case betaprogramparticipation.FieldModifiedStartTime, betaprogramparticipation.FieldModifiedEndTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BetaProgramParticipation fields.
func (bpp *BetaProgramParticipation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case betaprogramparticipation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bpp.ID = int(value.Int64)
		case betaprogramparticipation.FieldBetaProgramID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field beta_program_id", values[i])
			} else if value.Valid {
				bpp.BetaProgramID = int(value.Int64)
			}
		case betaprogramparticipation.FieldCustomerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				bpp.CustomerID = int(value.Int64)
			}
		case betaprogramparticipation.FieldClinicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field clinic_id", values[i])
			} else if value.Valid {
				bpp.ClinicID = int(value.Int64)
			}
		case betaprogramparticipation.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				bpp.IsActive = value.Bool
			}
		case betaprogramparticipation.FieldHasModifiedStartTime:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_modified_start_time", values[i])
			} else if value.Valid {
				bpp.HasModifiedStartTime = value.Bool
			}
		case betaprogramparticipation.FieldModifiedStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified_start_time", values[i])
			} else if value.Valid {
				bpp.ModifiedStartTime = new(time.Time)
				*bpp.ModifiedStartTime = value.Time
			}
		case betaprogramparticipation.FieldModifiedEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified_end_time", values[i])
			} else if value.Valid {
				bpp.ModifiedEndTime = new(time.Time)
				*bpp.ModifiedEndTime = value.Time
			}
		default:
			bpp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BetaProgramParticipation.
// This includes values selected through modifiers, order, etc.
func (bpp *BetaProgramParticipation) Value(name string) (ent.Value, error) {
	return bpp.selectValues.Get(name)
}

// QueryBetaProgram queries the "beta_program" edge of the BetaProgramParticipation entity.
func (bpp *BetaProgramParticipation) QueryBetaProgram() *BetaProgramQuery {
	return NewBetaProgramParticipationClient(bpp.config).QueryBetaProgram(bpp)
}

// QueryCustomer queries the "customer" edge of the BetaProgramParticipation entity.
func (bpp *BetaProgramParticipation) QueryCustomer() *CustomerQuery {
	return NewBetaProgramParticipationClient(bpp.config).QueryCustomer(bpp)
}

// QueryClinic queries the "clinic" edge of the BetaProgramParticipation entity.
func (bpp *BetaProgramParticipation) QueryClinic() *ClinicQuery {
	return NewBetaProgramParticipationClient(bpp.config).QueryClinic(bpp)
}

// Update returns a builder for updating this BetaProgramParticipation.
// Note that you need to call BetaProgramParticipation.Unwrap() before calling this method if this BetaProgramParticipation
// was returned from a transaction, and the transaction was committed or rolled back.
func (bpp *BetaProgramParticipation) Update() *BetaProgramParticipationUpdateOne {
	return NewBetaProgramParticipationClient(bpp.config).UpdateOne(bpp)
}

// Unwrap unwraps the BetaProgramParticipation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bpp *BetaProgramParticipation) Unwrap() *BetaProgramParticipation {
	_tx, ok := bpp.config.driver.(*txDriver)
	if !ok {
		panic("ent: BetaProgramParticipation is not a transactional entity")
	}
	bpp.config.driver = _tx.drv
	return bpp
}

// String implements the fmt.Stringer.
func (bpp *BetaProgramParticipation) String() string {
	var builder strings.Builder
	builder.WriteString("BetaProgramParticipation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bpp.ID))
	builder.WriteString("beta_program_id=")
	builder.WriteString(fmt.Sprintf("%v", bpp.BetaProgramID))
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(fmt.Sprintf("%v", bpp.CustomerID))
	builder.WriteString(", ")
	builder.WriteString("clinic_id=")
	builder.WriteString(fmt.Sprintf("%v", bpp.ClinicID))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", bpp.IsActive))
	builder.WriteString(", ")
	builder.WriteString("has_modified_start_time=")
	builder.WriteString(fmt.Sprintf("%v", bpp.HasModifiedStartTime))
	builder.WriteString(", ")
	if v := bpp.ModifiedStartTime; v != nil {
		builder.WriteString("modified_start_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := bpp.ModifiedEndTime; v != nil {
		builder.WriteString("modified_end_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// BetaProgramParticipations is a parsable slice of BetaProgramParticipation.
type BetaProgramParticipations []*BetaProgramParticipation
