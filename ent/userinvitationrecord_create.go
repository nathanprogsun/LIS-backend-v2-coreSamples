// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/userinvitationrecord"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserInvitationRecordCreate is the builder for creating a UserInvitationRecord entity.
type UserInvitationRecordCreate struct {
	config
	mutation *UserInvitationRecordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCustomerID sets the "customer_id" field.
func (uirc *UserInvitationRecordCreate) SetCustomerID(i int) *UserInvitationRecordCreate {
	uirc.mutation.SetCustomerID(i)
	return uirc
}

// SetInvitationLink sets the "invitation_link" field.
func (uirc *UserInvitationRecordCreate) SetInvitationLink(s string) *UserInvitationRecordCreate {
	uirc.mutation.SetInvitationLink(s)
	return uirc
}

// SetID sets the "id" field.
func (uirc *UserInvitationRecordCreate) SetID(i int) *UserInvitationRecordCreate {
	uirc.mutation.SetID(i)
	return uirc
}

// Mutation returns the UserInvitationRecordMutation object of the builder.
func (uirc *UserInvitationRecordCreate) Mutation() *UserInvitationRecordMutation {
	return uirc.mutation
}

// Save creates the UserInvitationRecord in the database.
func (uirc *UserInvitationRecordCreate) Save(ctx context.Context) (*UserInvitationRecord, error) {
	return withHooks(ctx, uirc.sqlSave, uirc.mutation, uirc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uirc *UserInvitationRecordCreate) SaveX(ctx context.Context) *UserInvitationRecord {
	v, err := uirc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uirc *UserInvitationRecordCreate) Exec(ctx context.Context) error {
	_, err := uirc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uirc *UserInvitationRecordCreate) ExecX(ctx context.Context) {
	if err := uirc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uirc *UserInvitationRecordCreate) check() error {
	if _, ok := uirc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "UserInvitationRecord.customer_id"`)}
	}
	if _, ok := uirc.mutation.InvitationLink(); !ok {
		return &ValidationError{Name: "invitation_link", err: errors.New(`ent: missing required field "UserInvitationRecord.invitation_link"`)}
	}
	if v, ok := uirc.mutation.InvitationLink(); ok {
		if err := userinvitationrecord.InvitationLinkValidator(v); err != nil {
			return &ValidationError{Name: "invitation_link", err: fmt.Errorf(`ent: validator failed for field "UserInvitationRecord.invitation_link": %w`, err)}
		}
	}
	if v, ok := uirc.mutation.ID(); ok {
		if err := userinvitationrecord.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "UserInvitationRecord.id": %w`, err)}
		}
	}
	return nil
}

func (uirc *UserInvitationRecordCreate) sqlSave(ctx context.Context) (*UserInvitationRecord, error) {
	if err := uirc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uirc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uirc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	uirc.mutation.id = &_node.ID
	uirc.mutation.done = true
	return _node, nil
}

func (uirc *UserInvitationRecordCreate) createSpec() (*UserInvitationRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &UserInvitationRecord{config: uirc.config}
		_spec = sqlgraph.NewCreateSpec(userinvitationrecord.Table, sqlgraph.NewFieldSpec(userinvitationrecord.FieldID, field.TypeInt))
	)
	_spec.OnConflict = uirc.conflict
	if id, ok := uirc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uirc.mutation.CustomerID(); ok {
		_spec.SetField(userinvitationrecord.FieldCustomerID, field.TypeInt, value)
		_node.CustomerID = value
	}
	if value, ok := uirc.mutation.InvitationLink(); ok {
		_spec.SetField(userinvitationrecord.FieldInvitationLink, field.TypeString, value)
		_node.InvitationLink = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserInvitationRecord.Create().
//		SetCustomerID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserInvitationRecordUpsert) {
//			SetCustomerID(v+v).
//		}).
//		Exec(ctx)
func (uirc *UserInvitationRecordCreate) OnConflict(opts ...sql.ConflictOption) *UserInvitationRecordUpsertOne {
	uirc.conflict = opts
	return &UserInvitationRecordUpsertOne{
		create: uirc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserInvitationRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uirc *UserInvitationRecordCreate) OnConflictColumns(columns ...string) *UserInvitationRecordUpsertOne {
	uirc.conflict = append(uirc.conflict, sql.ConflictColumns(columns...))
	return &UserInvitationRecordUpsertOne{
		create: uirc,
	}
}

type (
	// UserInvitationRecordUpsertOne is the builder for "upsert"-ing
	//  one UserInvitationRecord node.
	UserInvitationRecordUpsertOne struct {
		create *UserInvitationRecordCreate
	}

	// UserInvitationRecordUpsert is the "OnConflict" setter.
	UserInvitationRecordUpsert struct {
		*sql.UpdateSet
	}
)

// SetCustomerID sets the "customer_id" field.
func (u *UserInvitationRecordUpsert) SetCustomerID(v int) *UserInvitationRecordUpsert {
	u.Set(userinvitationrecord.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *UserInvitationRecordUpsert) UpdateCustomerID() *UserInvitationRecordUpsert {
	u.SetExcluded(userinvitationrecord.FieldCustomerID)
	return u
}

// AddCustomerID adds v to the "customer_id" field.
func (u *UserInvitationRecordUpsert) AddCustomerID(v int) *UserInvitationRecordUpsert {
	u.Add(userinvitationrecord.FieldCustomerID, v)
	return u
}

// SetInvitationLink sets the "invitation_link" field.
func (u *UserInvitationRecordUpsert) SetInvitationLink(v string) *UserInvitationRecordUpsert {
	u.Set(userinvitationrecord.FieldInvitationLink, v)
	return u
}

// UpdateInvitationLink sets the "invitation_link" field to the value that was provided on create.
func (u *UserInvitationRecordUpsert) UpdateInvitationLink() *UserInvitationRecordUpsert {
	u.SetExcluded(userinvitationrecord.FieldInvitationLink)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserInvitationRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userinvitationrecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserInvitationRecordUpsertOne) UpdateNewValues() *UserInvitationRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userinvitationrecord.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserInvitationRecord.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserInvitationRecordUpsertOne) Ignore() *UserInvitationRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserInvitationRecordUpsertOne) DoNothing() *UserInvitationRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserInvitationRecordCreate.OnConflict
// documentation for more info.
func (u *UserInvitationRecordUpsertOne) Update(set func(*UserInvitationRecordUpsert)) *UserInvitationRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserInvitationRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *UserInvitationRecordUpsertOne) SetCustomerID(v int) *UserInvitationRecordUpsertOne {
	return u.Update(func(s *UserInvitationRecordUpsert) {
		s.SetCustomerID(v)
	})
}

// AddCustomerID adds v to the "customer_id" field.
func (u *UserInvitationRecordUpsertOne) AddCustomerID(v int) *UserInvitationRecordUpsertOne {
	return u.Update(func(s *UserInvitationRecordUpsert) {
		s.AddCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *UserInvitationRecordUpsertOne) UpdateCustomerID() *UserInvitationRecordUpsertOne {
	return u.Update(func(s *UserInvitationRecordUpsert) {
		s.UpdateCustomerID()
	})
}

// SetInvitationLink sets the "invitation_link" field.
func (u *UserInvitationRecordUpsertOne) SetInvitationLink(v string) *UserInvitationRecordUpsertOne {
	return u.Update(func(s *UserInvitationRecordUpsert) {
		s.SetInvitationLink(v)
	})
}

// UpdateInvitationLink sets the "invitation_link" field to the value that was provided on create.
func (u *UserInvitationRecordUpsertOne) UpdateInvitationLink() *UserInvitationRecordUpsertOne {
	return u.Update(func(s *UserInvitationRecordUpsert) {
		s.UpdateInvitationLink()
	})
}

// Exec executes the query.
func (u *UserInvitationRecordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserInvitationRecordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserInvitationRecordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserInvitationRecordUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserInvitationRecordUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserInvitationRecordCreateBulk is the builder for creating many UserInvitationRecord entities in bulk.
type UserInvitationRecordCreateBulk struct {
	config
	err      error
	builders []*UserInvitationRecordCreate
	conflict []sql.ConflictOption
}

// Save creates the UserInvitationRecord entities in the database.
func (uircb *UserInvitationRecordCreateBulk) Save(ctx context.Context) ([]*UserInvitationRecord, error) {
	if uircb.err != nil {
		return nil, uircb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uircb.builders))
	nodes := make([]*UserInvitationRecord, len(uircb.builders))
	mutators := make([]Mutator, len(uircb.builders))
	for i := range uircb.builders {
		func(i int, root context.Context) {
			builder := uircb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserInvitationRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uircb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uircb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uircb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uircb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uircb *UserInvitationRecordCreateBulk) SaveX(ctx context.Context) []*UserInvitationRecord {
	v, err := uircb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uircb *UserInvitationRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := uircb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uircb *UserInvitationRecordCreateBulk) ExecX(ctx context.Context) {
	if err := uircb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserInvitationRecord.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserInvitationRecordUpsert) {
//			SetCustomerID(v+v).
//		}).
//		Exec(ctx)
func (uircb *UserInvitationRecordCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserInvitationRecordUpsertBulk {
	uircb.conflict = opts
	return &UserInvitationRecordUpsertBulk{
		create: uircb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserInvitationRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uircb *UserInvitationRecordCreateBulk) OnConflictColumns(columns ...string) *UserInvitationRecordUpsertBulk {
	uircb.conflict = append(uircb.conflict, sql.ConflictColumns(columns...))
	return &UserInvitationRecordUpsertBulk{
		create: uircb,
	}
}

// UserInvitationRecordUpsertBulk is the builder for "upsert"-ing
// a bulk of UserInvitationRecord nodes.
type UserInvitationRecordUpsertBulk struct {
	create *UserInvitationRecordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserInvitationRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userinvitationrecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserInvitationRecordUpsertBulk) UpdateNewValues() *UserInvitationRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userinvitationrecord.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserInvitationRecord.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserInvitationRecordUpsertBulk) Ignore() *UserInvitationRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserInvitationRecordUpsertBulk) DoNothing() *UserInvitationRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserInvitationRecordCreateBulk.OnConflict
// documentation for more info.
func (u *UserInvitationRecordUpsertBulk) Update(set func(*UserInvitationRecordUpsert)) *UserInvitationRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserInvitationRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *UserInvitationRecordUpsertBulk) SetCustomerID(v int) *UserInvitationRecordUpsertBulk {
	return u.Update(func(s *UserInvitationRecordUpsert) {
		s.SetCustomerID(v)
	})
}

// AddCustomerID adds v to the "customer_id" field.
func (u *UserInvitationRecordUpsertBulk) AddCustomerID(v int) *UserInvitationRecordUpsertBulk {
	return u.Update(func(s *UserInvitationRecordUpsert) {
		s.AddCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *UserInvitationRecordUpsertBulk) UpdateCustomerID() *UserInvitationRecordUpsertBulk {
	return u.Update(func(s *UserInvitationRecordUpsert) {
		s.UpdateCustomerID()
	})
}

// SetInvitationLink sets the "invitation_link" field.
func (u *UserInvitationRecordUpsertBulk) SetInvitationLink(v string) *UserInvitationRecordUpsertBulk {
	return u.Update(func(s *UserInvitationRecordUpsert) {
		s.SetInvitationLink(v)
	})
}

// UpdateInvitationLink sets the "invitation_link" field to the value that was provided on create.
func (u *UserInvitationRecordUpsertBulk) UpdateInvitationLink() *UserInvitationRecordUpsertBulk {
	return u.Update(func(s *UserInvitationRecordUpsert) {
		s.UpdateInvitationLink()
	})
}

// Exec executes the query.
func (u *UserInvitationRecordUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserInvitationRecordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserInvitationRecordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserInvitationRecordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
