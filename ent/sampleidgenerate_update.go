// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/sampleidgenerate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SampleIDGenerateUpdate is the builder for updating SampleIDGenerate entities.
type SampleIDGenerateUpdate struct {
	config
	hooks    []Hook
	mutation *SampleIDGenerateMutation
}

// Where appends a list predicates to the SampleIDGenerateUpdate builder.
func (sigu *SampleIDGenerateUpdate) Where(ps ...predicate.SampleIDGenerate) *SampleIDGenerateUpdate {
	sigu.mutation.Where(ps...)
	return sigu
}

// SetBarcode sets the "barcode" field.
func (sigu *SampleIDGenerateUpdate) SetBarcode(s string) *SampleIDGenerateUpdate {
	sigu.mutation.SetBarcode(s)
	return sigu
}

// SetNillableBarcode sets the "barcode" field if the given value is not nil.
func (sigu *SampleIDGenerateUpdate) SetNillableBarcode(s *string) *SampleIDGenerateUpdate {
	if s != nil {
		sigu.SetBarcode(*s)
	}
	return sigu
}

// ClearBarcode clears the value of the "barcode" field.
func (sigu *SampleIDGenerateUpdate) ClearBarcode() *SampleIDGenerateUpdate {
	sigu.mutation.ClearBarcode()
	return sigu
}

// Mutation returns the SampleIDGenerateMutation object of the builder.
func (sigu *SampleIDGenerateUpdate) Mutation() *SampleIDGenerateMutation {
	return sigu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sigu *SampleIDGenerateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sigu.sqlSave, sigu.mutation, sigu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sigu *SampleIDGenerateUpdate) SaveX(ctx context.Context) int {
	affected, err := sigu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sigu *SampleIDGenerateUpdate) Exec(ctx context.Context) error {
	_, err := sigu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sigu *SampleIDGenerateUpdate) ExecX(ctx context.Context) {
	if err := sigu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sigu *SampleIDGenerateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sampleidgenerate.Table, sampleidgenerate.Columns, sqlgraph.NewFieldSpec(sampleidgenerate.FieldID, field.TypeInt))
	if ps := sigu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sigu.mutation.Barcode(); ok {
		_spec.SetField(sampleidgenerate.FieldBarcode, field.TypeString, value)
	}
	if sigu.mutation.BarcodeCleared() {
		_spec.ClearField(sampleidgenerate.FieldBarcode, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sigu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sampleidgenerate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sigu.mutation.done = true
	return n, nil
}

// SampleIDGenerateUpdateOne is the builder for updating a single SampleIDGenerate entity.
type SampleIDGenerateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SampleIDGenerateMutation
}

// SetBarcode sets the "barcode" field.
func (siguo *SampleIDGenerateUpdateOne) SetBarcode(s string) *SampleIDGenerateUpdateOne {
	siguo.mutation.SetBarcode(s)
	return siguo
}

// SetNillableBarcode sets the "barcode" field if the given value is not nil.
func (siguo *SampleIDGenerateUpdateOne) SetNillableBarcode(s *string) *SampleIDGenerateUpdateOne {
	if s != nil {
		siguo.SetBarcode(*s)
	}
	return siguo
}

// ClearBarcode clears the value of the "barcode" field.
func (siguo *SampleIDGenerateUpdateOne) ClearBarcode() *SampleIDGenerateUpdateOne {
	siguo.mutation.ClearBarcode()
	return siguo
}

// Mutation returns the SampleIDGenerateMutation object of the builder.
func (siguo *SampleIDGenerateUpdateOne) Mutation() *SampleIDGenerateMutation {
	return siguo.mutation
}

// Where appends a list predicates to the SampleIDGenerateUpdate builder.
func (siguo *SampleIDGenerateUpdateOne) Where(ps ...predicate.SampleIDGenerate) *SampleIDGenerateUpdateOne {
	siguo.mutation.Where(ps...)
	return siguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (siguo *SampleIDGenerateUpdateOne) Select(field string, fields ...string) *SampleIDGenerateUpdateOne {
	siguo.fields = append([]string{field}, fields...)
	return siguo
}

// Save executes the query and returns the updated SampleIDGenerate entity.
func (siguo *SampleIDGenerateUpdateOne) Save(ctx context.Context) (*SampleIDGenerate, error) {
	return withHooks(ctx, siguo.sqlSave, siguo.mutation, siguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siguo *SampleIDGenerateUpdateOne) SaveX(ctx context.Context) *SampleIDGenerate {
	node, err := siguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siguo *SampleIDGenerateUpdateOne) Exec(ctx context.Context) error {
	_, err := siguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siguo *SampleIDGenerateUpdateOne) ExecX(ctx context.Context) {
	if err := siguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (siguo *SampleIDGenerateUpdateOne) sqlSave(ctx context.Context) (_node *SampleIDGenerate, err error) {
	_spec := sqlgraph.NewUpdateSpec(sampleidgenerate.Table, sampleidgenerate.Columns, sqlgraph.NewFieldSpec(sampleidgenerate.FieldID, field.TypeInt))
	id, ok := siguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SampleIDGenerate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := siguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sampleidgenerate.FieldID)
		for _, f := range fields {
			if !sampleidgenerate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sampleidgenerate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := siguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siguo.mutation.Barcode(); ok {
		_spec.SetField(sampleidgenerate.FieldBarcode, field.TypeString, value)
	}
	if siguo.mutation.BarcodeCleared() {
		_spec.ClearField(sampleidgenerate.FieldBarcode, field.TypeString)
	}
	_node = &SampleIDGenerate{config: siguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, siguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sampleidgenerate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	siguo.mutation.done = true
	return _node, nil
}
