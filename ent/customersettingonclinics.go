// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/clinic"
	"coresamples/ent/customer"
	"coresamples/ent/customersettingonclinics"
	"coresamples/ent/setting"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CustomerSettingOnClinics is the model entity for the CustomerSettingOnClinics schema.
type CustomerSettingOnClinics struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID int `json:"customer_id,omitempty"`
	// ClinicID holds the value of the "clinic_id" field.
	ClinicID int `json:"clinic_id,omitempty"`
	// SettingID holds the value of the "setting_id" field.
	SettingID int `json:"setting_id,omitempty"`
	// SettingName holds the value of the "setting_name" field.
	SettingName string `json:"setting_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerSettingOnClinicsQuery when eager-loading is set.
	Edges        CustomerSettingOnClinicsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CustomerSettingOnClinicsEdges holds the relations/edges for other nodes in the graph.
type CustomerSettingOnClinicsEdges struct {
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// Clinic holds the value of the clinic edge.
	Clinic *Clinic `json:"clinic,omitempty"`
	// Setting holds the value of the setting edge.
	Setting *Setting `json:"setting,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerSettingOnClinicsEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[0] {
		if e.Customer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// ClinicOrErr returns the Clinic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerSettingOnClinicsEdges) ClinicOrErr() (*Clinic, error) {
	if e.loadedTypes[1] {
		if e.Clinic == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: clinic.Label}
		}
		return e.Clinic, nil
	}
	return nil, &NotLoadedError{edge: "clinic"}
}

// SettingOrErr returns the Setting value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerSettingOnClinicsEdges) SettingOrErr() (*Setting, error) {
	if e.loadedTypes[2] {
		if e.Setting == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: setting.Label}
		}
		return e.Setting, nil
	}
	return nil, &NotLoadedError{edge: "setting"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomerSettingOnClinics) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customersettingonclinics.FieldID, customersettingonclinics.FieldCustomerID, customersettingonclinics.FieldClinicID, customersettingonclinics.FieldSettingID:
			values[i] = new(sql.NullInt64)
		case customersettingonclinics.FieldSettingName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomerSettingOnClinics fields.
func (csoc *CustomerSettingOnClinics) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customersettingonclinics.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			csoc.ID = int(value.Int64)
		case customersettingonclinics.FieldCustomerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				csoc.CustomerID = int(value.Int64)
			}
		case customersettingonclinics.FieldClinicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field clinic_id", values[i])
			} else if value.Valid {
				csoc.ClinicID = int(value.Int64)
			}
		case customersettingonclinics.FieldSettingID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field setting_id", values[i])
			} else if value.Valid {
				csoc.SettingID = int(value.Int64)
			}
		case customersettingonclinics.FieldSettingName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field setting_name", values[i])
			} else if value.Valid {
				csoc.SettingName = value.String
			}
		default:
			csoc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CustomerSettingOnClinics.
// This includes values selected through modifiers, order, etc.
func (csoc *CustomerSettingOnClinics) Value(name string) (ent.Value, error) {
	return csoc.selectValues.Get(name)
}

// QueryCustomer queries the "customer" edge of the CustomerSettingOnClinics entity.
func (csoc *CustomerSettingOnClinics) QueryCustomer() *CustomerQuery {
	return NewCustomerSettingOnClinicsClient(csoc.config).QueryCustomer(csoc)
}

// QueryClinic queries the "clinic" edge of the CustomerSettingOnClinics entity.
func (csoc *CustomerSettingOnClinics) QueryClinic() *ClinicQuery {
	return NewCustomerSettingOnClinicsClient(csoc.config).QueryClinic(csoc)
}

// QuerySetting queries the "setting" edge of the CustomerSettingOnClinics entity.
func (csoc *CustomerSettingOnClinics) QuerySetting() *SettingQuery {
	return NewCustomerSettingOnClinicsClient(csoc.config).QuerySetting(csoc)
}

// Update returns a builder for updating this CustomerSettingOnClinics.
// Note that you need to call CustomerSettingOnClinics.Unwrap() before calling this method if this CustomerSettingOnClinics
// was returned from a transaction, and the transaction was committed or rolled back.
func (csoc *CustomerSettingOnClinics) Update() *CustomerSettingOnClinicsUpdateOne {
	return NewCustomerSettingOnClinicsClient(csoc.config).UpdateOne(csoc)
}

// Unwrap unwraps the CustomerSettingOnClinics entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (csoc *CustomerSettingOnClinics) Unwrap() *CustomerSettingOnClinics {
	_tx, ok := csoc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CustomerSettingOnClinics is not a transactional entity")
	}
	csoc.config.driver = _tx.drv
	return csoc
}

// String implements the fmt.Stringer.
func (csoc *CustomerSettingOnClinics) String() string {
	var builder strings.Builder
	builder.WriteString("CustomerSettingOnClinics(")
	builder.WriteString(fmt.Sprintf("id=%v, ", csoc.ID))
	builder.WriteString("customer_id=")
	builder.WriteString(fmt.Sprintf("%v", csoc.CustomerID))
	builder.WriteString(", ")
	builder.WriteString("clinic_id=")
	builder.WriteString(fmt.Sprintf("%v", csoc.ClinicID))
	builder.WriteString(", ")
	builder.WriteString("setting_id=")
	builder.WriteString(fmt.Sprintf("%v", csoc.SettingID))
	builder.WriteString(", ")
	builder.WriteString("setting_name=")
	builder.WriteString(csoc.SettingName)
	builder.WriteByte(')')
	return builder.String()
}

// CustomerSettingOnClinicsSlice is a parsable slice of CustomerSettingOnClinics.
type CustomerSettingOnClinicsSlice []*CustomerSettingOnClinics
