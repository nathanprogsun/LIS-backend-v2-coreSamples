// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/betaprogram"
	"coresamples/ent/betaprogramparticipation"
	"coresamples/ent/clinic"
	"coresamples/ent/customer"
	"coresamples/ent/predicate"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BetaProgramParticipationQuery is the builder for querying BetaProgramParticipation entities.
type BetaProgramParticipationQuery struct {
	config
	ctx             *QueryContext
	order           []betaprogramparticipation.OrderOption
	inters          []Interceptor
	predicates      []predicate.BetaProgramParticipation
	withBetaProgram *BetaProgramQuery
	withCustomer    *CustomerQuery
	withClinic      *ClinicQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BetaProgramParticipationQuery builder.
func (bppq *BetaProgramParticipationQuery) Where(ps ...predicate.BetaProgramParticipation) *BetaProgramParticipationQuery {
	bppq.predicates = append(bppq.predicates, ps...)
	return bppq
}

// Limit the number of records to be returned by this query.
func (bppq *BetaProgramParticipationQuery) Limit(limit int) *BetaProgramParticipationQuery {
	bppq.ctx.Limit = &limit
	return bppq
}

// Offset to start from.
func (bppq *BetaProgramParticipationQuery) Offset(offset int) *BetaProgramParticipationQuery {
	bppq.ctx.Offset = &offset
	return bppq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bppq *BetaProgramParticipationQuery) Unique(unique bool) *BetaProgramParticipationQuery {
	bppq.ctx.Unique = &unique
	return bppq
}

// Order specifies how the records should be ordered.
func (bppq *BetaProgramParticipationQuery) Order(o ...betaprogramparticipation.OrderOption) *BetaProgramParticipationQuery {
	bppq.order = append(bppq.order, o...)
	return bppq
}

// QueryBetaProgram chains the current query on the "beta_program" edge.
func (bppq *BetaProgramParticipationQuery) QueryBetaProgram() *BetaProgramQuery {
	query := (&BetaProgramClient{config: bppq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(betaprogramparticipation.Table, betaprogramparticipation.FieldID, selector),
			sqlgraph.To(betaprogram.Table, betaprogram.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, betaprogramparticipation.BetaProgramTable, betaprogramparticipation.BetaProgramColumn),
		)
		fromU = sqlgraph.SetNeighbors(bppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCustomer chains the current query on the "customer" edge.
func (bppq *BetaProgramParticipationQuery) QueryCustomer() *CustomerQuery {
	query := (&CustomerClient{config: bppq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(betaprogramparticipation.Table, betaprogramparticipation.FieldID, selector),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, betaprogramparticipation.CustomerTable, betaprogramparticipation.CustomerColumn),
		)
		fromU = sqlgraph.SetNeighbors(bppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClinic chains the current query on the "clinic" edge.
func (bppq *BetaProgramParticipationQuery) QueryClinic() *ClinicQuery {
	query := (&ClinicClient{config: bppq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(betaprogramparticipation.Table, betaprogramparticipation.FieldID, selector),
			sqlgraph.To(clinic.Table, clinic.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, betaprogramparticipation.ClinicTable, betaprogramparticipation.ClinicColumn),
		)
		fromU = sqlgraph.SetNeighbors(bppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BetaProgramParticipation entity from the query.
// Returns a *NotFoundError when no BetaProgramParticipation was found.
func (bppq *BetaProgramParticipationQuery) First(ctx context.Context) (*BetaProgramParticipation, error) {
	nodes, err := bppq.Limit(1).All(setContextOp(ctx, bppq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{betaprogramparticipation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bppq *BetaProgramParticipationQuery) FirstX(ctx context.Context) *BetaProgramParticipation {
	node, err := bppq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BetaProgramParticipation ID from the query.
// Returns a *NotFoundError when no BetaProgramParticipation ID was found.
func (bppq *BetaProgramParticipationQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bppq.Limit(1).IDs(setContextOp(ctx, bppq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{betaprogramparticipation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bppq *BetaProgramParticipationQuery) FirstIDX(ctx context.Context) int {
	id, err := bppq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BetaProgramParticipation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BetaProgramParticipation entity is found.
// Returns a *NotFoundError when no BetaProgramParticipation entities are found.
func (bppq *BetaProgramParticipationQuery) Only(ctx context.Context) (*BetaProgramParticipation, error) {
	nodes, err := bppq.Limit(2).All(setContextOp(ctx, bppq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{betaprogramparticipation.Label}
	default:
		return nil, &NotSingularError{betaprogramparticipation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bppq *BetaProgramParticipationQuery) OnlyX(ctx context.Context) *BetaProgramParticipation {
	node, err := bppq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BetaProgramParticipation ID in the query.
// Returns a *NotSingularError when more than one BetaProgramParticipation ID is found.
// Returns a *NotFoundError when no entities are found.
func (bppq *BetaProgramParticipationQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bppq.Limit(2).IDs(setContextOp(ctx, bppq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{betaprogramparticipation.Label}
	default:
		err = &NotSingularError{betaprogramparticipation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bppq *BetaProgramParticipationQuery) OnlyIDX(ctx context.Context) int {
	id, err := bppq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BetaProgramParticipations.
func (bppq *BetaProgramParticipationQuery) All(ctx context.Context) ([]*BetaProgramParticipation, error) {
	ctx = setContextOp(ctx, bppq.ctx, "All")
	if err := bppq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BetaProgramParticipation, *BetaProgramParticipationQuery]()
	return withInterceptors[[]*BetaProgramParticipation](ctx, bppq, qr, bppq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bppq *BetaProgramParticipationQuery) AllX(ctx context.Context) []*BetaProgramParticipation {
	nodes, err := bppq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BetaProgramParticipation IDs.
func (bppq *BetaProgramParticipationQuery) IDs(ctx context.Context) (ids []int, err error) {
	if bppq.ctx.Unique == nil && bppq.path != nil {
		bppq.Unique(true)
	}
	ctx = setContextOp(ctx, bppq.ctx, "IDs")
	if err = bppq.Select(betaprogramparticipation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bppq *BetaProgramParticipationQuery) IDsX(ctx context.Context) []int {
	ids, err := bppq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bppq *BetaProgramParticipationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bppq.ctx, "Count")
	if err := bppq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bppq, querierCount[*BetaProgramParticipationQuery](), bppq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bppq *BetaProgramParticipationQuery) CountX(ctx context.Context) int {
	count, err := bppq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bppq *BetaProgramParticipationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bppq.ctx, "Exist")
	switch _, err := bppq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bppq *BetaProgramParticipationQuery) ExistX(ctx context.Context) bool {
	exist, err := bppq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BetaProgramParticipationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bppq *BetaProgramParticipationQuery) Clone() *BetaProgramParticipationQuery {
	if bppq == nil {
		return nil
	}
	return &BetaProgramParticipationQuery{
		config:          bppq.config,
		ctx:             bppq.ctx.Clone(),
		order:           append([]betaprogramparticipation.OrderOption{}, bppq.order...),
		inters:          append([]Interceptor{}, bppq.inters...),
		predicates:      append([]predicate.BetaProgramParticipation{}, bppq.predicates...),
		withBetaProgram: bppq.withBetaProgram.Clone(),
		withCustomer:    bppq.withCustomer.Clone(),
		withClinic:      bppq.withClinic.Clone(),
		// clone intermediate query.
		sql:  bppq.sql.Clone(),
		path: bppq.path,
	}
}

// WithBetaProgram tells the query-builder to eager-load the nodes that are connected to
// the "beta_program" edge. The optional arguments are used to configure the query builder of the edge.
func (bppq *BetaProgramParticipationQuery) WithBetaProgram(opts ...func(*BetaProgramQuery)) *BetaProgramParticipationQuery {
	query := (&BetaProgramClient{config: bppq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bppq.withBetaProgram = query
	return bppq
}

// WithCustomer tells the query-builder to eager-load the nodes that are connected to
// the "customer" edge. The optional arguments are used to configure the query builder of the edge.
func (bppq *BetaProgramParticipationQuery) WithCustomer(opts ...func(*CustomerQuery)) *BetaProgramParticipationQuery {
	query := (&CustomerClient{config: bppq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bppq.withCustomer = query
	return bppq
}

// WithClinic tells the query-builder to eager-load the nodes that are connected to
// the "clinic" edge. The optional arguments are used to configure the query builder of the edge.
func (bppq *BetaProgramParticipationQuery) WithClinic(opts ...func(*ClinicQuery)) *BetaProgramParticipationQuery {
	query := (&ClinicClient{config: bppq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bppq.withClinic = query
	return bppq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		BetaProgramID int `json:"beta_program_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BetaProgramParticipation.Query().
//		GroupBy(betaprogramparticipation.FieldBetaProgramID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bppq *BetaProgramParticipationQuery) GroupBy(field string, fields ...string) *BetaProgramParticipationGroupBy {
	bppq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BetaProgramParticipationGroupBy{build: bppq}
	grbuild.flds = &bppq.ctx.Fields
	grbuild.label = betaprogramparticipation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		BetaProgramID int `json:"beta_program_id,omitempty"`
//	}
//
//	client.BetaProgramParticipation.Query().
//		Select(betaprogramparticipation.FieldBetaProgramID).
//		Scan(ctx, &v)
func (bppq *BetaProgramParticipationQuery) Select(fields ...string) *BetaProgramParticipationSelect {
	bppq.ctx.Fields = append(bppq.ctx.Fields, fields...)
	sbuild := &BetaProgramParticipationSelect{BetaProgramParticipationQuery: bppq}
	sbuild.label = betaprogramparticipation.Label
	sbuild.flds, sbuild.scan = &bppq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BetaProgramParticipationSelect configured with the given aggregations.
func (bppq *BetaProgramParticipationQuery) Aggregate(fns ...AggregateFunc) *BetaProgramParticipationSelect {
	return bppq.Select().Aggregate(fns...)
}

func (bppq *BetaProgramParticipationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bppq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bppq); err != nil {
				return err
			}
		}
	}
	for _, f := range bppq.ctx.Fields {
		if !betaprogramparticipation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bppq.path != nil {
		prev, err := bppq.path(ctx)
		if err != nil {
			return err
		}
		bppq.sql = prev
	}
	return nil
}

func (bppq *BetaProgramParticipationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BetaProgramParticipation, error) {
	var (
		nodes       = []*BetaProgramParticipation{}
		_spec       = bppq.querySpec()
		loadedTypes = [3]bool{
			bppq.withBetaProgram != nil,
			bppq.withCustomer != nil,
			bppq.withClinic != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BetaProgramParticipation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BetaProgramParticipation{config: bppq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bppq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bppq.withBetaProgram; query != nil {
		if err := bppq.loadBetaProgram(ctx, query, nodes, nil,
			func(n *BetaProgramParticipation, e *BetaProgram) { n.Edges.BetaProgram = e }); err != nil {
			return nil, err
		}
	}
	if query := bppq.withCustomer; query != nil {
		if err := bppq.loadCustomer(ctx, query, nodes, nil,
			func(n *BetaProgramParticipation, e *Customer) { n.Edges.Customer = e }); err != nil {
			return nil, err
		}
	}
	if query := bppq.withClinic; query != nil {
		if err := bppq.loadClinic(ctx, query, nodes, nil,
			func(n *BetaProgramParticipation, e *Clinic) { n.Edges.Clinic = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bppq *BetaProgramParticipationQuery) loadBetaProgram(ctx context.Context, query *BetaProgramQuery, nodes []*BetaProgramParticipation, init func(*BetaProgramParticipation), assign func(*BetaProgramParticipation, *BetaProgram)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*BetaProgramParticipation)
	for i := range nodes {
		fk := nodes[i].BetaProgramID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(betaprogram.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "beta_program_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bppq *BetaProgramParticipationQuery) loadCustomer(ctx context.Context, query *CustomerQuery, nodes []*BetaProgramParticipation, init func(*BetaProgramParticipation), assign func(*BetaProgramParticipation, *Customer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*BetaProgramParticipation)
	for i := range nodes {
		fk := nodes[i].CustomerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(customer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "customer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bppq *BetaProgramParticipationQuery) loadClinic(ctx context.Context, query *ClinicQuery, nodes []*BetaProgramParticipation, init func(*BetaProgramParticipation), assign func(*BetaProgramParticipation, *Clinic)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*BetaProgramParticipation)
	for i := range nodes {
		fk := nodes[i].ClinicID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(clinic.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "clinic_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (bppq *BetaProgramParticipationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bppq.querySpec()
	_spec.Node.Columns = bppq.ctx.Fields
	if len(bppq.ctx.Fields) > 0 {
		_spec.Unique = bppq.ctx.Unique != nil && *bppq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bppq.driver, _spec)
}

func (bppq *BetaProgramParticipationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(betaprogramparticipation.Table, betaprogramparticipation.Columns, sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt))
	_spec.From = bppq.sql
	if unique := bppq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bppq.path != nil {
		_spec.Unique = true
	}
	if fields := bppq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, betaprogramparticipation.FieldID)
		for i := range fields {
			if fields[i] != betaprogramparticipation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if bppq.withBetaProgram != nil {
			_spec.Node.AddColumnOnce(betaprogramparticipation.FieldBetaProgramID)
		}
		if bppq.withCustomer != nil {
			_spec.Node.AddColumnOnce(betaprogramparticipation.FieldCustomerID)
		}
		if bppq.withClinic != nil {
			_spec.Node.AddColumnOnce(betaprogramparticipation.FieldClinicID)
		}
	}
	if ps := bppq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bppq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bppq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bppq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bppq *BetaProgramParticipationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bppq.driver.Dialect())
	t1 := builder.Table(betaprogramparticipation.Table)
	columns := bppq.ctx.Fields
	if len(columns) == 0 {
		columns = betaprogramparticipation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bppq.sql != nil {
		selector = bppq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bppq.ctx.Unique != nil && *bppq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range bppq.predicates {
		p(selector)
	}
	for _, p := range bppq.order {
		p(selector)
	}
	if offset := bppq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bppq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BetaProgramParticipationGroupBy is the group-by builder for BetaProgramParticipation entities.
type BetaProgramParticipationGroupBy struct {
	selector
	build *BetaProgramParticipationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bppgb *BetaProgramParticipationGroupBy) Aggregate(fns ...AggregateFunc) *BetaProgramParticipationGroupBy {
	bppgb.fns = append(bppgb.fns, fns...)
	return bppgb
}

// Scan applies the selector query and scans the result into the given value.
func (bppgb *BetaProgramParticipationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bppgb.build.ctx, "GroupBy")
	if err := bppgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BetaProgramParticipationQuery, *BetaProgramParticipationGroupBy](ctx, bppgb.build, bppgb, bppgb.build.inters, v)
}

func (bppgb *BetaProgramParticipationGroupBy) sqlScan(ctx context.Context, root *BetaProgramParticipationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bppgb.fns))
	for _, fn := range bppgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bppgb.flds)+len(bppgb.fns))
		for _, f := range *bppgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bppgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bppgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BetaProgramParticipationSelect is the builder for selecting fields of BetaProgramParticipation entities.
type BetaProgramParticipationSelect struct {
	*BetaProgramParticipationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bpps *BetaProgramParticipationSelect) Aggregate(fns ...AggregateFunc) *BetaProgramParticipationSelect {
	bpps.fns = append(bpps.fns, fns...)
	return bpps
}

// Scan applies the selector query and scans the result into the given value.
func (bpps *BetaProgramParticipationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bpps.ctx, "Select")
	if err := bpps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BetaProgramParticipationQuery, *BetaProgramParticipationSelect](ctx, bpps.BetaProgramParticipationQuery, bpps, bpps.inters, v)
}

func (bpps *BetaProgramParticipationSelect) sqlScan(ctx context.Context, root *BetaProgramParticipationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bpps.fns))
	for _, fn := range bpps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bpps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bpps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
