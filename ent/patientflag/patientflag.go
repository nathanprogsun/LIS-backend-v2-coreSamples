// Code generated by ent, DO NOT EDIT.

package patientflag

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the patientflag type in the database.
	Label = "patient_flag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "patient_flag_id"
	// FieldPatientFlagName holds the string denoting the patient_flag_name field in the database.
	FieldPatientFlagName = "patient_flag_name"
	// FieldPatientFlagDisplayName holds the string denoting the patient_flag_display_name field in the database.
	FieldPatientFlagDisplayName = "patient_flag_display_name"
	// FieldPatientFlagDescription holds the string denoting the patient_flag_description field in the database.
	FieldPatientFlagDescription = "patient_flag_description"
	// FieldPatientFlagIsActive holds the string denoting the patient_flag_is_active field in the database.
	FieldPatientFlagIsActive = "patient_flag_is_active"
	// FieldPatientFlagCreatedAt holds the string denoting the patient_flag_created_at field in the database.
	FieldPatientFlagCreatedAt = "patient_flag_created_at"
	// FieldPatientFlagColor holds the string denoting the patient_flag_color field in the database.
	FieldPatientFlagColor = "patient_flag_color"
	// FieldPatientFlagedBy holds the string denoting the patient_flaged_by field in the database.
	FieldPatientFlagedBy = "patient_flaged_by"
	// Table holds the table name of the patientflag in the database.
	Table = "patient_flag"
)

// Columns holds all SQL columns for patientflag fields.
var Columns = []string{
	FieldID,
	FieldPatientFlagName,
	FieldPatientFlagDisplayName,
	FieldPatientFlagDescription,
	FieldPatientFlagIsActive,
	FieldPatientFlagCreatedAt,
	FieldPatientFlagColor,
	FieldPatientFlagedBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPatientFlagIsActive holds the default value on creation for the "patient_flag_is_active" field.
	DefaultPatientFlagIsActive bool
	// DefaultPatientFlagCreatedAt holds the default value on creation for the "patient_flag_created_at" field.
	DefaultPatientFlagCreatedAt func() time.Time
	// DefaultPatientFlagColor holds the default value on creation for the "patient_flag_color" field.
	DefaultPatientFlagColor string
	// DefaultPatientFlagedBy holds the default value on creation for the "patient_flaged_by" field.
	DefaultPatientFlagedBy string
)

// OrderOption defines the ordering options for the PatientFlag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPatientFlagName orders the results by the patient_flag_name field.
func ByPatientFlagName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientFlagName, opts...).ToFunc()
}

// ByPatientFlagDisplayName orders the results by the patient_flag_display_name field.
func ByPatientFlagDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientFlagDisplayName, opts...).ToFunc()
}

// ByPatientFlagDescription orders the results by the patient_flag_description field.
func ByPatientFlagDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientFlagDescription, opts...).ToFunc()
}

// ByPatientFlagIsActive orders the results by the patient_flag_is_active field.
func ByPatientFlagIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientFlagIsActive, opts...).ToFunc()
}

// ByPatientFlagCreatedAt orders the results by the patient_flag_created_at field.
func ByPatientFlagCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientFlagCreatedAt, opts...).ToFunc()
}

// ByPatientFlagColor orders the results by the patient_flag_color field.
func ByPatientFlagColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientFlagColor, opts...).ToFunc()
}

// ByPatientFlagedBy orders the results by the patient_flaged_by field.
func ByPatientFlagedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientFlagedBy, opts...).ToFunc()
}
