// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/labordersendhistory"
	"coresamples/ent/predicate"
	"coresamples/ent/sample"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LabOrderSendHistoryUpdate is the builder for updating LabOrderSendHistory entities.
type LabOrderSendHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *LabOrderSendHistoryMutation
}

// Where appends a list predicates to the LabOrderSendHistoryUpdate builder.
func (loshu *LabOrderSendHistoryUpdate) Where(ps ...predicate.LabOrderSendHistory) *LabOrderSendHistoryUpdate {
	loshu.mutation.Where(ps...)
	return loshu
}

// SetSampleID sets the "sample_id" field.
func (loshu *LabOrderSendHistoryUpdate) SetSampleID(i int) *LabOrderSendHistoryUpdate {
	loshu.mutation.SetSampleID(i)
	return loshu
}

// SetNillableSampleID sets the "sample_id" field if the given value is not nil.
func (loshu *LabOrderSendHistoryUpdate) SetNillableSampleID(i *int) *LabOrderSendHistoryUpdate {
	if i != nil {
		loshu.SetSampleID(*i)
	}
	return loshu
}

// SetTubeType sets the "tube_type" field.
func (loshu *LabOrderSendHistoryUpdate) SetTubeType(s string) *LabOrderSendHistoryUpdate {
	loshu.mutation.SetTubeType(s)
	return loshu
}

// SetNillableTubeType sets the "tube_type" field if the given value is not nil.
func (loshu *LabOrderSendHistoryUpdate) SetNillableTubeType(s *string) *LabOrderSendHistoryUpdate {
	if s != nil {
		loshu.SetTubeType(*s)
	}
	return loshu
}

// SetSendoutTime sets the "sendout_time" field.
func (loshu *LabOrderSendHistoryUpdate) SetSendoutTime(t time.Time) *LabOrderSendHistoryUpdate {
	loshu.mutation.SetSendoutTime(t)
	return loshu
}

// SetNillableSendoutTime sets the "sendout_time" field if the given value is not nil.
func (loshu *LabOrderSendHistoryUpdate) SetNillableSendoutTime(t *time.Time) *LabOrderSendHistoryUpdate {
	if t != nil {
		loshu.SetSendoutTime(*t)
	}
	return loshu
}

// ClearSendoutTime clears the value of the "sendout_time" field.
func (loshu *LabOrderSendHistoryUpdate) ClearSendoutTime() *LabOrderSendHistoryUpdate {
	loshu.mutation.ClearSendoutTime()
	return loshu
}

// SetIsRedrawOrder sets the "is_redraw_order" field.
func (loshu *LabOrderSendHistoryUpdate) SetIsRedrawOrder(b bool) *LabOrderSendHistoryUpdate {
	loshu.mutation.SetIsRedrawOrder(b)
	return loshu
}

// SetNillableIsRedrawOrder sets the "is_redraw_order" field if the given value is not nil.
func (loshu *LabOrderSendHistoryUpdate) SetNillableIsRedrawOrder(b *bool) *LabOrderSendHistoryUpdate {
	if b != nil {
		loshu.SetIsRedrawOrder(*b)
	}
	return loshu
}

// ClearIsRedrawOrder clears the value of the "is_redraw_order" field.
func (loshu *LabOrderSendHistoryUpdate) ClearIsRedrawOrder() *LabOrderSendHistoryUpdate {
	loshu.mutation.ClearIsRedrawOrder()
	return loshu
}

// SetIsLabSpecialOrder sets the "is_lab_special_order" field.
func (loshu *LabOrderSendHistoryUpdate) SetIsLabSpecialOrder(b bool) *LabOrderSendHistoryUpdate {
	loshu.mutation.SetIsLabSpecialOrder(b)
	return loshu
}

// SetNillableIsLabSpecialOrder sets the "is_lab_special_order" field if the given value is not nil.
func (loshu *LabOrderSendHistoryUpdate) SetNillableIsLabSpecialOrder(b *bool) *LabOrderSendHistoryUpdate {
	if b != nil {
		loshu.SetIsLabSpecialOrder(*b)
	}
	return loshu
}

// ClearIsLabSpecialOrder clears the value of the "is_lab_special_order" field.
func (loshu *LabOrderSendHistoryUpdate) ClearIsLabSpecialOrder() *LabOrderSendHistoryUpdate {
	loshu.mutation.ClearIsLabSpecialOrder()
	return loshu
}

// SetAction sets the "action" field.
func (loshu *LabOrderSendHistoryUpdate) SetAction(s string) *LabOrderSendHistoryUpdate {
	loshu.mutation.SetAction(s)
	return loshu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (loshu *LabOrderSendHistoryUpdate) SetNillableAction(s *string) *LabOrderSendHistoryUpdate {
	if s != nil {
		loshu.SetAction(*s)
	}
	return loshu
}

// ClearAction clears the value of the "action" field.
func (loshu *LabOrderSendHistoryUpdate) ClearAction() *LabOrderSendHistoryUpdate {
	loshu.mutation.ClearAction()
	return loshu
}

// SetIsResendBlocked sets the "is_resend_blocked" field.
func (loshu *LabOrderSendHistoryUpdate) SetIsResendBlocked(b bool) *LabOrderSendHistoryUpdate {
	loshu.mutation.SetIsResendBlocked(b)
	return loshu
}

// SetNillableIsResendBlocked sets the "is_resend_blocked" field if the given value is not nil.
func (loshu *LabOrderSendHistoryUpdate) SetNillableIsResendBlocked(b *bool) *LabOrderSendHistoryUpdate {
	if b != nil {
		loshu.SetIsResendBlocked(*b)
	}
	return loshu
}

// ClearIsResendBlocked clears the value of the "is_resend_blocked" field.
func (loshu *LabOrderSendHistoryUpdate) ClearIsResendBlocked() *LabOrderSendHistoryUpdate {
	loshu.mutation.ClearIsResendBlocked()
	return loshu
}

// SetSample sets the "sample" edge to the Sample entity.
func (loshu *LabOrderSendHistoryUpdate) SetSample(s *Sample) *LabOrderSendHistoryUpdate {
	return loshu.SetSampleID(s.ID)
}

// Mutation returns the LabOrderSendHistoryMutation object of the builder.
func (loshu *LabOrderSendHistoryUpdate) Mutation() *LabOrderSendHistoryMutation {
	return loshu.mutation
}

// ClearSample clears the "sample" edge to the Sample entity.
func (loshu *LabOrderSendHistoryUpdate) ClearSample() *LabOrderSendHistoryUpdate {
	loshu.mutation.ClearSample()
	return loshu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (loshu *LabOrderSendHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, loshu.sqlSave, loshu.mutation, loshu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (loshu *LabOrderSendHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := loshu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (loshu *LabOrderSendHistoryUpdate) Exec(ctx context.Context) error {
	_, err := loshu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (loshu *LabOrderSendHistoryUpdate) ExecX(ctx context.Context) {
	if err := loshu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (loshu *LabOrderSendHistoryUpdate) check() error {
	if _, ok := loshu.mutation.SampleID(); loshu.mutation.SampleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LabOrderSendHistory.sample"`)
	}
	return nil
}

func (loshu *LabOrderSendHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := loshu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(labordersendhistory.Table, labordersendhistory.Columns, sqlgraph.NewFieldSpec(labordersendhistory.FieldID, field.TypeInt))
	if ps := loshu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := loshu.mutation.TubeType(); ok {
		_spec.SetField(labordersendhistory.FieldTubeType, field.TypeString, value)
	}
	if value, ok := loshu.mutation.SendoutTime(); ok {
		_spec.SetField(labordersendhistory.FieldSendoutTime, field.TypeTime, value)
	}
	if loshu.mutation.SendoutTimeCleared() {
		_spec.ClearField(labordersendhistory.FieldSendoutTime, field.TypeTime)
	}
	if value, ok := loshu.mutation.IsRedrawOrder(); ok {
		_spec.SetField(labordersendhistory.FieldIsRedrawOrder, field.TypeBool, value)
	}
	if loshu.mutation.IsRedrawOrderCleared() {
		_spec.ClearField(labordersendhistory.FieldIsRedrawOrder, field.TypeBool)
	}
	if value, ok := loshu.mutation.IsLabSpecialOrder(); ok {
		_spec.SetField(labordersendhistory.FieldIsLabSpecialOrder, field.TypeBool, value)
	}
	if loshu.mutation.IsLabSpecialOrderCleared() {
		_spec.ClearField(labordersendhistory.FieldIsLabSpecialOrder, field.TypeBool)
	}
	if value, ok := loshu.mutation.Action(); ok {
		_spec.SetField(labordersendhistory.FieldAction, field.TypeString, value)
	}
	if loshu.mutation.ActionCleared() {
		_spec.ClearField(labordersendhistory.FieldAction, field.TypeString)
	}
	if value, ok := loshu.mutation.IsResendBlocked(); ok {
		_spec.SetField(labordersendhistory.FieldIsResendBlocked, field.TypeBool, value)
	}
	if loshu.mutation.IsResendBlockedCleared() {
		_spec.ClearField(labordersendhistory.FieldIsResendBlocked, field.TypeBool)
	}
	if loshu.mutation.SampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   labordersendhistory.SampleTable,
			Columns: []string{labordersendhistory.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := loshu.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   labordersendhistory.SampleTable,
			Columns: []string{labordersendhistory.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, loshu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{labordersendhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	loshu.mutation.done = true
	return n, nil
}

// LabOrderSendHistoryUpdateOne is the builder for updating a single LabOrderSendHistory entity.
type LabOrderSendHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LabOrderSendHistoryMutation
}

// SetSampleID sets the "sample_id" field.
func (loshuo *LabOrderSendHistoryUpdateOne) SetSampleID(i int) *LabOrderSendHistoryUpdateOne {
	loshuo.mutation.SetSampleID(i)
	return loshuo
}

// SetNillableSampleID sets the "sample_id" field if the given value is not nil.
func (loshuo *LabOrderSendHistoryUpdateOne) SetNillableSampleID(i *int) *LabOrderSendHistoryUpdateOne {
	if i != nil {
		loshuo.SetSampleID(*i)
	}
	return loshuo
}

// SetTubeType sets the "tube_type" field.
func (loshuo *LabOrderSendHistoryUpdateOne) SetTubeType(s string) *LabOrderSendHistoryUpdateOne {
	loshuo.mutation.SetTubeType(s)
	return loshuo
}

// SetNillableTubeType sets the "tube_type" field if the given value is not nil.
func (loshuo *LabOrderSendHistoryUpdateOne) SetNillableTubeType(s *string) *LabOrderSendHistoryUpdateOne {
	if s != nil {
		loshuo.SetTubeType(*s)
	}
	return loshuo
}

// SetSendoutTime sets the "sendout_time" field.
func (loshuo *LabOrderSendHistoryUpdateOne) SetSendoutTime(t time.Time) *LabOrderSendHistoryUpdateOne {
	loshuo.mutation.SetSendoutTime(t)
	return loshuo
}

// SetNillableSendoutTime sets the "sendout_time" field if the given value is not nil.
func (loshuo *LabOrderSendHistoryUpdateOne) SetNillableSendoutTime(t *time.Time) *LabOrderSendHistoryUpdateOne {
	if t != nil {
		loshuo.SetSendoutTime(*t)
	}
	return loshuo
}

// ClearSendoutTime clears the value of the "sendout_time" field.
func (loshuo *LabOrderSendHistoryUpdateOne) ClearSendoutTime() *LabOrderSendHistoryUpdateOne {
	loshuo.mutation.ClearSendoutTime()
	return loshuo
}

// SetIsRedrawOrder sets the "is_redraw_order" field.
func (loshuo *LabOrderSendHistoryUpdateOne) SetIsRedrawOrder(b bool) *LabOrderSendHistoryUpdateOne {
	loshuo.mutation.SetIsRedrawOrder(b)
	return loshuo
}

// SetNillableIsRedrawOrder sets the "is_redraw_order" field if the given value is not nil.
func (loshuo *LabOrderSendHistoryUpdateOne) SetNillableIsRedrawOrder(b *bool) *LabOrderSendHistoryUpdateOne {
	if b != nil {
		loshuo.SetIsRedrawOrder(*b)
	}
	return loshuo
}

// ClearIsRedrawOrder clears the value of the "is_redraw_order" field.
func (loshuo *LabOrderSendHistoryUpdateOne) ClearIsRedrawOrder() *LabOrderSendHistoryUpdateOne {
	loshuo.mutation.ClearIsRedrawOrder()
	return loshuo
}

// SetIsLabSpecialOrder sets the "is_lab_special_order" field.
func (loshuo *LabOrderSendHistoryUpdateOne) SetIsLabSpecialOrder(b bool) *LabOrderSendHistoryUpdateOne {
	loshuo.mutation.SetIsLabSpecialOrder(b)
	return loshuo
}

// SetNillableIsLabSpecialOrder sets the "is_lab_special_order" field if the given value is not nil.
func (loshuo *LabOrderSendHistoryUpdateOne) SetNillableIsLabSpecialOrder(b *bool) *LabOrderSendHistoryUpdateOne {
	if b != nil {
		loshuo.SetIsLabSpecialOrder(*b)
	}
	return loshuo
}

// ClearIsLabSpecialOrder clears the value of the "is_lab_special_order" field.
func (loshuo *LabOrderSendHistoryUpdateOne) ClearIsLabSpecialOrder() *LabOrderSendHistoryUpdateOne {
	loshuo.mutation.ClearIsLabSpecialOrder()
	return loshuo
}

// SetAction sets the "action" field.
func (loshuo *LabOrderSendHistoryUpdateOne) SetAction(s string) *LabOrderSendHistoryUpdateOne {
	loshuo.mutation.SetAction(s)
	return loshuo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (loshuo *LabOrderSendHistoryUpdateOne) SetNillableAction(s *string) *LabOrderSendHistoryUpdateOne {
	if s != nil {
		loshuo.SetAction(*s)
	}
	return loshuo
}

// ClearAction clears the value of the "action" field.
func (loshuo *LabOrderSendHistoryUpdateOne) ClearAction() *LabOrderSendHistoryUpdateOne {
	loshuo.mutation.ClearAction()
	return loshuo
}

// SetIsResendBlocked sets the "is_resend_blocked" field.
func (loshuo *LabOrderSendHistoryUpdateOne) SetIsResendBlocked(b bool) *LabOrderSendHistoryUpdateOne {
	loshuo.mutation.SetIsResendBlocked(b)
	return loshuo
}

// SetNillableIsResendBlocked sets the "is_resend_blocked" field if the given value is not nil.
func (loshuo *LabOrderSendHistoryUpdateOne) SetNillableIsResendBlocked(b *bool) *LabOrderSendHistoryUpdateOne {
	if b != nil {
		loshuo.SetIsResendBlocked(*b)
	}
	return loshuo
}

// ClearIsResendBlocked clears the value of the "is_resend_blocked" field.
func (loshuo *LabOrderSendHistoryUpdateOne) ClearIsResendBlocked() *LabOrderSendHistoryUpdateOne {
	loshuo.mutation.ClearIsResendBlocked()
	return loshuo
}

// SetSample sets the "sample" edge to the Sample entity.
func (loshuo *LabOrderSendHistoryUpdateOne) SetSample(s *Sample) *LabOrderSendHistoryUpdateOne {
	return loshuo.SetSampleID(s.ID)
}

// Mutation returns the LabOrderSendHistoryMutation object of the builder.
func (loshuo *LabOrderSendHistoryUpdateOne) Mutation() *LabOrderSendHistoryMutation {
	return loshuo.mutation
}

// ClearSample clears the "sample" edge to the Sample entity.
func (loshuo *LabOrderSendHistoryUpdateOne) ClearSample() *LabOrderSendHistoryUpdateOne {
	loshuo.mutation.ClearSample()
	return loshuo
}

// Where appends a list predicates to the LabOrderSendHistoryUpdate builder.
func (loshuo *LabOrderSendHistoryUpdateOne) Where(ps ...predicate.LabOrderSendHistory) *LabOrderSendHistoryUpdateOne {
	loshuo.mutation.Where(ps...)
	return loshuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (loshuo *LabOrderSendHistoryUpdateOne) Select(field string, fields ...string) *LabOrderSendHistoryUpdateOne {
	loshuo.fields = append([]string{field}, fields...)
	return loshuo
}

// Save executes the query and returns the updated LabOrderSendHistory entity.
func (loshuo *LabOrderSendHistoryUpdateOne) Save(ctx context.Context) (*LabOrderSendHistory, error) {
	return withHooks(ctx, loshuo.sqlSave, loshuo.mutation, loshuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (loshuo *LabOrderSendHistoryUpdateOne) SaveX(ctx context.Context) *LabOrderSendHistory {
	node, err := loshuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (loshuo *LabOrderSendHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := loshuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (loshuo *LabOrderSendHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := loshuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (loshuo *LabOrderSendHistoryUpdateOne) check() error {
	if _, ok := loshuo.mutation.SampleID(); loshuo.mutation.SampleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LabOrderSendHistory.sample"`)
	}
	return nil
}

func (loshuo *LabOrderSendHistoryUpdateOne) sqlSave(ctx context.Context) (_node *LabOrderSendHistory, err error) {
	if err := loshuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(labordersendhistory.Table, labordersendhistory.Columns, sqlgraph.NewFieldSpec(labordersendhistory.FieldID, field.TypeInt))
	id, ok := loshuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LabOrderSendHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := loshuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, labordersendhistory.FieldID)
		for _, f := range fields {
			if !labordersendhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != labordersendhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := loshuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := loshuo.mutation.TubeType(); ok {
		_spec.SetField(labordersendhistory.FieldTubeType, field.TypeString, value)
	}
	if value, ok := loshuo.mutation.SendoutTime(); ok {
		_spec.SetField(labordersendhistory.FieldSendoutTime, field.TypeTime, value)
	}
	if loshuo.mutation.SendoutTimeCleared() {
		_spec.ClearField(labordersendhistory.FieldSendoutTime, field.TypeTime)
	}
	if value, ok := loshuo.mutation.IsRedrawOrder(); ok {
		_spec.SetField(labordersendhistory.FieldIsRedrawOrder, field.TypeBool, value)
	}
	if loshuo.mutation.IsRedrawOrderCleared() {
		_spec.ClearField(labordersendhistory.FieldIsRedrawOrder, field.TypeBool)
	}
	if value, ok := loshuo.mutation.IsLabSpecialOrder(); ok {
		_spec.SetField(labordersendhistory.FieldIsLabSpecialOrder, field.TypeBool, value)
	}
	if loshuo.mutation.IsLabSpecialOrderCleared() {
		_spec.ClearField(labordersendhistory.FieldIsLabSpecialOrder, field.TypeBool)
	}
	if value, ok := loshuo.mutation.Action(); ok {
		_spec.SetField(labordersendhistory.FieldAction, field.TypeString, value)
	}
	if loshuo.mutation.ActionCleared() {
		_spec.ClearField(labordersendhistory.FieldAction, field.TypeString)
	}
	if value, ok := loshuo.mutation.IsResendBlocked(); ok {
		_spec.SetField(labordersendhistory.FieldIsResendBlocked, field.TypeBool, value)
	}
	if loshuo.mutation.IsResendBlockedCleared() {
		_spec.ClearField(labordersendhistory.FieldIsResendBlocked, field.TypeBool)
	}
	if loshuo.mutation.SampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   labordersendhistory.SampleTable,
			Columns: []string{labordersendhistory.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := loshuo.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   labordersendhistory.SampleTable,
			Columns: []string{labordersendhistory.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LabOrderSendHistory{config: loshuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, loshuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{labordersendhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	loshuo.mutation.done = true
	return _node, nil
}
