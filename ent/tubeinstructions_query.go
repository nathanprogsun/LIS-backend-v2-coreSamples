// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/tubeinstructions"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TubeInstructionsQuery is the builder for querying TubeInstructions entities.
type TubeInstructionsQuery struct {
	config
	ctx        *QueryContext
	order      []tubeinstructions.OrderOption
	inters     []Interceptor
	predicates []predicate.TubeInstructions
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TubeInstructionsQuery builder.
func (tiq *TubeInstructionsQuery) Where(ps ...predicate.TubeInstructions) *TubeInstructionsQuery {
	tiq.predicates = append(tiq.predicates, ps...)
	return tiq
}

// Limit the number of records to be returned by this query.
func (tiq *TubeInstructionsQuery) Limit(limit int) *TubeInstructionsQuery {
	tiq.ctx.Limit = &limit
	return tiq
}

// Offset to start from.
func (tiq *TubeInstructionsQuery) Offset(offset int) *TubeInstructionsQuery {
	tiq.ctx.Offset = &offset
	return tiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tiq *TubeInstructionsQuery) Unique(unique bool) *TubeInstructionsQuery {
	tiq.ctx.Unique = &unique
	return tiq
}

// Order specifies how the records should be ordered.
func (tiq *TubeInstructionsQuery) Order(o ...tubeinstructions.OrderOption) *TubeInstructionsQuery {
	tiq.order = append(tiq.order, o...)
	return tiq
}

// First returns the first TubeInstructions entity from the query.
// Returns a *NotFoundError when no TubeInstructions was found.
func (tiq *TubeInstructionsQuery) First(ctx context.Context) (*TubeInstructions, error) {
	nodes, err := tiq.Limit(1).All(setContextOp(ctx, tiq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tubeinstructions.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tiq *TubeInstructionsQuery) FirstX(ctx context.Context) *TubeInstructions {
	node, err := tiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TubeInstructions ID from the query.
// Returns a *NotFoundError when no TubeInstructions ID was found.
func (tiq *TubeInstructionsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tiq.Limit(1).IDs(setContextOp(ctx, tiq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tubeinstructions.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tiq *TubeInstructionsQuery) FirstIDX(ctx context.Context) int {
	id, err := tiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TubeInstructions entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TubeInstructions entity is found.
// Returns a *NotFoundError when no TubeInstructions entities are found.
func (tiq *TubeInstructionsQuery) Only(ctx context.Context) (*TubeInstructions, error) {
	nodes, err := tiq.Limit(2).All(setContextOp(ctx, tiq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tubeinstructions.Label}
	default:
		return nil, &NotSingularError{tubeinstructions.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tiq *TubeInstructionsQuery) OnlyX(ctx context.Context) *TubeInstructions {
	node, err := tiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TubeInstructions ID in the query.
// Returns a *NotSingularError when more than one TubeInstructions ID is found.
// Returns a *NotFoundError when no entities are found.
func (tiq *TubeInstructionsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tiq.Limit(2).IDs(setContextOp(ctx, tiq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tubeinstructions.Label}
	default:
		err = &NotSingularError{tubeinstructions.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tiq *TubeInstructionsQuery) OnlyIDX(ctx context.Context) int {
	id, err := tiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TubeInstructionsSlice.
func (tiq *TubeInstructionsQuery) All(ctx context.Context) ([]*TubeInstructions, error) {
	ctx = setContextOp(ctx, tiq.ctx, "All")
	if err := tiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TubeInstructions, *TubeInstructionsQuery]()
	return withInterceptors[[]*TubeInstructions](ctx, tiq, qr, tiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tiq *TubeInstructionsQuery) AllX(ctx context.Context) []*TubeInstructions {
	nodes, err := tiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TubeInstructions IDs.
func (tiq *TubeInstructionsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if tiq.ctx.Unique == nil && tiq.path != nil {
		tiq.Unique(true)
	}
	ctx = setContextOp(ctx, tiq.ctx, "IDs")
	if err = tiq.Select(tubeinstructions.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tiq *TubeInstructionsQuery) IDsX(ctx context.Context) []int {
	ids, err := tiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tiq *TubeInstructionsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tiq.ctx, "Count")
	if err := tiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tiq, querierCount[*TubeInstructionsQuery](), tiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tiq *TubeInstructionsQuery) CountX(ctx context.Context) int {
	count, err := tiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tiq *TubeInstructionsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tiq.ctx, "Exist")
	switch _, err := tiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tiq *TubeInstructionsQuery) ExistX(ctx context.Context) bool {
	exist, err := tiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TubeInstructionsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tiq *TubeInstructionsQuery) Clone() *TubeInstructionsQuery {
	if tiq == nil {
		return nil
	}
	return &TubeInstructionsQuery{
		config:     tiq.config,
		ctx:        tiq.ctx.Clone(),
		order:      append([]tubeinstructions.OrderOption{}, tiq.order...),
		inters:     append([]Interceptor{}, tiq.inters...),
		predicates: append([]predicate.TubeInstructions{}, tiq.predicates...),
		// clone intermediate query.
		sql:  tiq.sql.Clone(),
		path: tiq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TubeNameEnum string `json:"tube_name_enum,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TubeInstructions.Query().
//		GroupBy(tubeinstructions.FieldTubeNameEnum).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tiq *TubeInstructionsQuery) GroupBy(field string, fields ...string) *TubeInstructionsGroupBy {
	tiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TubeInstructionsGroupBy{build: tiq}
	grbuild.flds = &tiq.ctx.Fields
	grbuild.label = tubeinstructions.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TubeNameEnum string `json:"tube_name_enum,omitempty"`
//	}
//
//	client.TubeInstructions.Query().
//		Select(tubeinstructions.FieldTubeNameEnum).
//		Scan(ctx, &v)
func (tiq *TubeInstructionsQuery) Select(fields ...string) *TubeInstructionsSelect {
	tiq.ctx.Fields = append(tiq.ctx.Fields, fields...)
	sbuild := &TubeInstructionsSelect{TubeInstructionsQuery: tiq}
	sbuild.label = tubeinstructions.Label
	sbuild.flds, sbuild.scan = &tiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TubeInstructionsSelect configured with the given aggregations.
func (tiq *TubeInstructionsQuery) Aggregate(fns ...AggregateFunc) *TubeInstructionsSelect {
	return tiq.Select().Aggregate(fns...)
}

func (tiq *TubeInstructionsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tiq); err != nil {
				return err
			}
		}
	}
	for _, f := range tiq.ctx.Fields {
		if !tubeinstructions.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tiq.path != nil {
		prev, err := tiq.path(ctx)
		if err != nil {
			return err
		}
		tiq.sql = prev
	}
	return nil
}

func (tiq *TubeInstructionsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TubeInstructions, error) {
	var (
		nodes = []*TubeInstructions{}
		_spec = tiq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TubeInstructions).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TubeInstructions{config: tiq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (tiq *TubeInstructionsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tiq.querySpec()
	_spec.Node.Columns = tiq.ctx.Fields
	if len(tiq.ctx.Fields) > 0 {
		_spec.Unique = tiq.ctx.Unique != nil && *tiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tiq.driver, _spec)
}

func (tiq *TubeInstructionsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tubeinstructions.Table, tubeinstructions.Columns, sqlgraph.NewFieldSpec(tubeinstructions.FieldID, field.TypeInt))
	_spec.From = tiq.sql
	if unique := tiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tiq.path != nil {
		_spec.Unique = true
	}
	if fields := tiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tubeinstructions.FieldID)
		for i := range fields {
			if fields[i] != tubeinstructions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tiq *TubeInstructionsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tiq.driver.Dialect())
	t1 := builder.Table(tubeinstructions.Table)
	columns := tiq.ctx.Fields
	if len(columns) == 0 {
		columns = tubeinstructions.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tiq.sql != nil {
		selector = tiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tiq.ctx.Unique != nil && *tiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tiq.predicates {
		p(selector)
	}
	for _, p := range tiq.order {
		p(selector)
	}
	if offset := tiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TubeInstructionsGroupBy is the group-by builder for TubeInstructions entities.
type TubeInstructionsGroupBy struct {
	selector
	build *TubeInstructionsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tigb *TubeInstructionsGroupBy) Aggregate(fns ...AggregateFunc) *TubeInstructionsGroupBy {
	tigb.fns = append(tigb.fns, fns...)
	return tigb
}

// Scan applies the selector query and scans the result into the given value.
func (tigb *TubeInstructionsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tigb.build.ctx, "GroupBy")
	if err := tigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TubeInstructionsQuery, *TubeInstructionsGroupBy](ctx, tigb.build, tigb, tigb.build.inters, v)
}

func (tigb *TubeInstructionsGroupBy) sqlScan(ctx context.Context, root *TubeInstructionsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tigb.fns))
	for _, fn := range tigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tigb.flds)+len(tigb.fns))
		for _, f := range *tigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TubeInstructionsSelect is the builder for selecting fields of TubeInstructions entities.
type TubeInstructionsSelect struct {
	*TubeInstructionsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tis *TubeInstructionsSelect) Aggregate(fns ...AggregateFunc) *TubeInstructionsSelect {
	tis.fns = append(tis.fns, fns...)
	return tis
}

// Scan applies the selector query and scans the result into the given value.
func (tis *TubeInstructionsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tis.ctx, "Select")
	if err := tis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TubeInstructionsQuery, *TubeInstructionsSelect](ctx, tis.TubeInstructionsQuery, tis, tis.inters, v)
}

func (tis *TubeInstructionsSelect) sqlScan(ctx context.Context, root *TubeInstructionsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tis.fns))
	for _, fn := range tis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
