// Code generated by ent, DO NOT EDIT.

package countrylist

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the countrylist type in the database.
	Label = "country_list"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "vibrant_country_id"
	// FieldCountryName holds the string denoting the country_name field in the database.
	FieldCountryName = "country_name"
	// FieldAlpha2Code holds the string denoting the alpha_2_code field in the database.
	FieldAlpha2Code = "alpha_2_code"
	// FieldAlpha3Code holds the string denoting the alpha_3_code field in the database.
	FieldAlpha3Code = "alpha_3_code"
	// FieldCountryCodeEnum holds the string denoting the country_code_enum field in the database.
	FieldCountryCodeEnum = "country_code_enum"
	// FieldIso holds the string denoting the iso field in the database.
	FieldIso = "iso"
	// FieldCountryRegion holds the string denoting the country_region field in the database.
	FieldCountryRegion = "country_region"
	// FieldCountrySubregion holds the string denoting the country_subregion field in the database.
	FieldCountrySubregion = "country_subregion"
	// FieldCountryRegionCode holds the string denoting the country_region_code field in the database.
	FieldCountryRegionCode = "country_region_code"
	// FieldCountrySubRegionCode holds the string denoting the country_sub_region_code field in the database.
	FieldCountrySubRegionCode = "country_sub_region_code"
	// Table holds the table name of the countrylist in the database.
	Table = "country_list"
)

// Columns holds all SQL columns for countrylist fields.
var Columns = []string{
	FieldID,
	FieldCountryName,
	FieldAlpha2Code,
	FieldAlpha3Code,
	FieldCountryCodeEnum,
	FieldIso,
	FieldCountryRegion,
	FieldCountrySubregion,
	FieldCountryRegionCode,
	FieldCountrySubRegionCode,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CountryList queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCountryName orders the results by the country_name field.
func ByCountryName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountryName, opts...).ToFunc()
}

// ByAlpha2Code orders the results by the alpha_2_code field.
func ByAlpha2Code(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlpha2Code, opts...).ToFunc()
}

// ByAlpha3Code orders the results by the alpha_3_code field.
func ByAlpha3Code(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlpha3Code, opts...).ToFunc()
}

// ByCountryCodeEnum orders the results by the country_code_enum field.
func ByCountryCodeEnum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountryCodeEnum, opts...).ToFunc()
}

// ByIso orders the results by the iso field.
func ByIso(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIso, opts...).ToFunc()
}

// ByCountryRegion orders the results by the country_region field.
func ByCountryRegion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountryRegion, opts...).ToFunc()
}

// ByCountrySubregion orders the results by the country_subregion field.
func ByCountrySubregion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountrySubregion, opts...).ToFunc()
}

// ByCountryRegionCode orders the results by the country_region_code field.
func ByCountryRegionCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountryRegionCode, opts...).ToFunc()
}

// ByCountrySubRegionCode orders the results by the country_sub_region_code field.
func ByCountrySubRegionCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountrySubRegionCode, opts...).ToFunc()
}
