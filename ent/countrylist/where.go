// Code generated by ent, DO NOT EDIT.

package countrylist

import (
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CountryList {
	return predicate.CountryList(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CountryList {
	return predicate.CountryList(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CountryList {
	return predicate.CountryList(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CountryList {
	return predicate.CountryList(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CountryList {
	return predicate.CountryList(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CountryList {
	return predicate.CountryList(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CountryList {
	return predicate.CountryList(sql.FieldLTE(FieldID, id))
}

// CountryName applies equality check predicate on the "country_name" field. It's identical to CountryNameEQ.
func CountryName(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldCountryName, v))
}

// Alpha2Code applies equality check predicate on the "alpha_2_code" field. It's identical to Alpha2CodeEQ.
func Alpha2Code(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldAlpha2Code, v))
}

// Alpha3Code applies equality check predicate on the "alpha_3_code" field. It's identical to Alpha3CodeEQ.
func Alpha3Code(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldAlpha3Code, v))
}

// CountryCodeEnum applies equality check predicate on the "country_code_enum" field. It's identical to CountryCodeEnumEQ.
func CountryCodeEnum(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldCountryCodeEnum, v))
}

// Iso applies equality check predicate on the "iso" field. It's identical to IsoEQ.
func Iso(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldIso, v))
}

// CountryRegion applies equality check predicate on the "country_region" field. It's identical to CountryRegionEQ.
func CountryRegion(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldCountryRegion, v))
}

// CountrySubregion applies equality check predicate on the "country_subregion" field. It's identical to CountrySubregionEQ.
func CountrySubregion(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldCountrySubregion, v))
}

// CountryRegionCode applies equality check predicate on the "country_region_code" field. It's identical to CountryRegionCodeEQ.
func CountryRegionCode(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldCountryRegionCode, v))
}

// CountrySubRegionCode applies equality check predicate on the "country_sub_region_code" field. It's identical to CountrySubRegionCodeEQ.
func CountrySubRegionCode(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldCountrySubRegionCode, v))
}

// CountryNameEQ applies the EQ predicate on the "country_name" field.
func CountryNameEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldCountryName, v))
}

// CountryNameNEQ applies the NEQ predicate on the "country_name" field.
func CountryNameNEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNEQ(FieldCountryName, v))
}

// CountryNameIn applies the In predicate on the "country_name" field.
func CountryNameIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldIn(FieldCountryName, vs...))
}

// CountryNameNotIn applies the NotIn predicate on the "country_name" field.
func CountryNameNotIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNotIn(FieldCountryName, vs...))
}

// CountryNameGT applies the GT predicate on the "country_name" field.
func CountryNameGT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGT(FieldCountryName, v))
}

// CountryNameGTE applies the GTE predicate on the "country_name" field.
func CountryNameGTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGTE(FieldCountryName, v))
}

// CountryNameLT applies the LT predicate on the "country_name" field.
func CountryNameLT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLT(FieldCountryName, v))
}

// CountryNameLTE applies the LTE predicate on the "country_name" field.
func CountryNameLTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLTE(FieldCountryName, v))
}

// CountryNameContains applies the Contains predicate on the "country_name" field.
func CountryNameContains(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContains(FieldCountryName, v))
}

// CountryNameHasPrefix applies the HasPrefix predicate on the "country_name" field.
func CountryNameHasPrefix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasPrefix(FieldCountryName, v))
}

// CountryNameHasSuffix applies the HasSuffix predicate on the "country_name" field.
func CountryNameHasSuffix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasSuffix(FieldCountryName, v))
}

// CountryNameEqualFold applies the EqualFold predicate on the "country_name" field.
func CountryNameEqualFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEqualFold(FieldCountryName, v))
}

// CountryNameContainsFold applies the ContainsFold predicate on the "country_name" field.
func CountryNameContainsFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContainsFold(FieldCountryName, v))
}

// Alpha2CodeEQ applies the EQ predicate on the "alpha_2_code" field.
func Alpha2CodeEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldAlpha2Code, v))
}

// Alpha2CodeNEQ applies the NEQ predicate on the "alpha_2_code" field.
func Alpha2CodeNEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNEQ(FieldAlpha2Code, v))
}

// Alpha2CodeIn applies the In predicate on the "alpha_2_code" field.
func Alpha2CodeIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldIn(FieldAlpha2Code, vs...))
}

// Alpha2CodeNotIn applies the NotIn predicate on the "alpha_2_code" field.
func Alpha2CodeNotIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNotIn(FieldAlpha2Code, vs...))
}

// Alpha2CodeGT applies the GT predicate on the "alpha_2_code" field.
func Alpha2CodeGT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGT(FieldAlpha2Code, v))
}

// Alpha2CodeGTE applies the GTE predicate on the "alpha_2_code" field.
func Alpha2CodeGTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGTE(FieldAlpha2Code, v))
}

// Alpha2CodeLT applies the LT predicate on the "alpha_2_code" field.
func Alpha2CodeLT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLT(FieldAlpha2Code, v))
}

// Alpha2CodeLTE applies the LTE predicate on the "alpha_2_code" field.
func Alpha2CodeLTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLTE(FieldAlpha2Code, v))
}

// Alpha2CodeContains applies the Contains predicate on the "alpha_2_code" field.
func Alpha2CodeContains(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContains(FieldAlpha2Code, v))
}

// Alpha2CodeHasPrefix applies the HasPrefix predicate on the "alpha_2_code" field.
func Alpha2CodeHasPrefix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasPrefix(FieldAlpha2Code, v))
}

// Alpha2CodeHasSuffix applies the HasSuffix predicate on the "alpha_2_code" field.
func Alpha2CodeHasSuffix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasSuffix(FieldAlpha2Code, v))
}

// Alpha2CodeEqualFold applies the EqualFold predicate on the "alpha_2_code" field.
func Alpha2CodeEqualFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEqualFold(FieldAlpha2Code, v))
}

// Alpha2CodeContainsFold applies the ContainsFold predicate on the "alpha_2_code" field.
func Alpha2CodeContainsFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContainsFold(FieldAlpha2Code, v))
}

// Alpha3CodeEQ applies the EQ predicate on the "alpha_3_code" field.
func Alpha3CodeEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldAlpha3Code, v))
}

// Alpha3CodeNEQ applies the NEQ predicate on the "alpha_3_code" field.
func Alpha3CodeNEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNEQ(FieldAlpha3Code, v))
}

// Alpha3CodeIn applies the In predicate on the "alpha_3_code" field.
func Alpha3CodeIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldIn(FieldAlpha3Code, vs...))
}

// Alpha3CodeNotIn applies the NotIn predicate on the "alpha_3_code" field.
func Alpha3CodeNotIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNotIn(FieldAlpha3Code, vs...))
}

// Alpha3CodeGT applies the GT predicate on the "alpha_3_code" field.
func Alpha3CodeGT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGT(FieldAlpha3Code, v))
}

// Alpha3CodeGTE applies the GTE predicate on the "alpha_3_code" field.
func Alpha3CodeGTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGTE(FieldAlpha3Code, v))
}

// Alpha3CodeLT applies the LT predicate on the "alpha_3_code" field.
func Alpha3CodeLT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLT(FieldAlpha3Code, v))
}

// Alpha3CodeLTE applies the LTE predicate on the "alpha_3_code" field.
func Alpha3CodeLTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLTE(FieldAlpha3Code, v))
}

// Alpha3CodeContains applies the Contains predicate on the "alpha_3_code" field.
func Alpha3CodeContains(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContains(FieldAlpha3Code, v))
}

// Alpha3CodeHasPrefix applies the HasPrefix predicate on the "alpha_3_code" field.
func Alpha3CodeHasPrefix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasPrefix(FieldAlpha3Code, v))
}

// Alpha3CodeHasSuffix applies the HasSuffix predicate on the "alpha_3_code" field.
func Alpha3CodeHasSuffix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasSuffix(FieldAlpha3Code, v))
}

// Alpha3CodeEqualFold applies the EqualFold predicate on the "alpha_3_code" field.
func Alpha3CodeEqualFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEqualFold(FieldAlpha3Code, v))
}

// Alpha3CodeContainsFold applies the ContainsFold predicate on the "alpha_3_code" field.
func Alpha3CodeContainsFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContainsFold(FieldAlpha3Code, v))
}

// CountryCodeEnumEQ applies the EQ predicate on the "country_code_enum" field.
func CountryCodeEnumEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldCountryCodeEnum, v))
}

// CountryCodeEnumNEQ applies the NEQ predicate on the "country_code_enum" field.
func CountryCodeEnumNEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNEQ(FieldCountryCodeEnum, v))
}

// CountryCodeEnumIn applies the In predicate on the "country_code_enum" field.
func CountryCodeEnumIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldIn(FieldCountryCodeEnum, vs...))
}

// CountryCodeEnumNotIn applies the NotIn predicate on the "country_code_enum" field.
func CountryCodeEnumNotIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNotIn(FieldCountryCodeEnum, vs...))
}

// CountryCodeEnumGT applies the GT predicate on the "country_code_enum" field.
func CountryCodeEnumGT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGT(FieldCountryCodeEnum, v))
}

// CountryCodeEnumGTE applies the GTE predicate on the "country_code_enum" field.
func CountryCodeEnumGTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGTE(FieldCountryCodeEnum, v))
}

// CountryCodeEnumLT applies the LT predicate on the "country_code_enum" field.
func CountryCodeEnumLT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLT(FieldCountryCodeEnum, v))
}

// CountryCodeEnumLTE applies the LTE predicate on the "country_code_enum" field.
func CountryCodeEnumLTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLTE(FieldCountryCodeEnum, v))
}

// CountryCodeEnumContains applies the Contains predicate on the "country_code_enum" field.
func CountryCodeEnumContains(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContains(FieldCountryCodeEnum, v))
}

// CountryCodeEnumHasPrefix applies the HasPrefix predicate on the "country_code_enum" field.
func CountryCodeEnumHasPrefix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasPrefix(FieldCountryCodeEnum, v))
}

// CountryCodeEnumHasSuffix applies the HasSuffix predicate on the "country_code_enum" field.
func CountryCodeEnumHasSuffix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasSuffix(FieldCountryCodeEnum, v))
}

// CountryCodeEnumEqualFold applies the EqualFold predicate on the "country_code_enum" field.
func CountryCodeEnumEqualFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEqualFold(FieldCountryCodeEnum, v))
}

// CountryCodeEnumContainsFold applies the ContainsFold predicate on the "country_code_enum" field.
func CountryCodeEnumContainsFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContainsFold(FieldCountryCodeEnum, v))
}

// IsoEQ applies the EQ predicate on the "iso" field.
func IsoEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldIso, v))
}

// IsoNEQ applies the NEQ predicate on the "iso" field.
func IsoNEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNEQ(FieldIso, v))
}

// IsoIn applies the In predicate on the "iso" field.
func IsoIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldIn(FieldIso, vs...))
}

// IsoNotIn applies the NotIn predicate on the "iso" field.
func IsoNotIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNotIn(FieldIso, vs...))
}

// IsoGT applies the GT predicate on the "iso" field.
func IsoGT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGT(FieldIso, v))
}

// IsoGTE applies the GTE predicate on the "iso" field.
func IsoGTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGTE(FieldIso, v))
}

// IsoLT applies the LT predicate on the "iso" field.
func IsoLT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLT(FieldIso, v))
}

// IsoLTE applies the LTE predicate on the "iso" field.
func IsoLTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLTE(FieldIso, v))
}

// IsoContains applies the Contains predicate on the "iso" field.
func IsoContains(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContains(FieldIso, v))
}

// IsoHasPrefix applies the HasPrefix predicate on the "iso" field.
func IsoHasPrefix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasPrefix(FieldIso, v))
}

// IsoHasSuffix applies the HasSuffix predicate on the "iso" field.
func IsoHasSuffix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasSuffix(FieldIso, v))
}

// IsoEqualFold applies the EqualFold predicate on the "iso" field.
func IsoEqualFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEqualFold(FieldIso, v))
}

// IsoContainsFold applies the ContainsFold predicate on the "iso" field.
func IsoContainsFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContainsFold(FieldIso, v))
}

// CountryRegionEQ applies the EQ predicate on the "country_region" field.
func CountryRegionEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldCountryRegion, v))
}

// CountryRegionNEQ applies the NEQ predicate on the "country_region" field.
func CountryRegionNEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNEQ(FieldCountryRegion, v))
}

// CountryRegionIn applies the In predicate on the "country_region" field.
func CountryRegionIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldIn(FieldCountryRegion, vs...))
}

// CountryRegionNotIn applies the NotIn predicate on the "country_region" field.
func CountryRegionNotIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNotIn(FieldCountryRegion, vs...))
}

// CountryRegionGT applies the GT predicate on the "country_region" field.
func CountryRegionGT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGT(FieldCountryRegion, v))
}

// CountryRegionGTE applies the GTE predicate on the "country_region" field.
func CountryRegionGTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGTE(FieldCountryRegion, v))
}

// CountryRegionLT applies the LT predicate on the "country_region" field.
func CountryRegionLT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLT(FieldCountryRegion, v))
}

// CountryRegionLTE applies the LTE predicate on the "country_region" field.
func CountryRegionLTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLTE(FieldCountryRegion, v))
}

// CountryRegionContains applies the Contains predicate on the "country_region" field.
func CountryRegionContains(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContains(FieldCountryRegion, v))
}

// CountryRegionHasPrefix applies the HasPrefix predicate on the "country_region" field.
func CountryRegionHasPrefix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasPrefix(FieldCountryRegion, v))
}

// CountryRegionHasSuffix applies the HasSuffix predicate on the "country_region" field.
func CountryRegionHasSuffix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasSuffix(FieldCountryRegion, v))
}

// CountryRegionEqualFold applies the EqualFold predicate on the "country_region" field.
func CountryRegionEqualFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEqualFold(FieldCountryRegion, v))
}

// CountryRegionContainsFold applies the ContainsFold predicate on the "country_region" field.
func CountryRegionContainsFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContainsFold(FieldCountryRegion, v))
}

// CountrySubregionEQ applies the EQ predicate on the "country_subregion" field.
func CountrySubregionEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldCountrySubregion, v))
}

// CountrySubregionNEQ applies the NEQ predicate on the "country_subregion" field.
func CountrySubregionNEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNEQ(FieldCountrySubregion, v))
}

// CountrySubregionIn applies the In predicate on the "country_subregion" field.
func CountrySubregionIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldIn(FieldCountrySubregion, vs...))
}

// CountrySubregionNotIn applies the NotIn predicate on the "country_subregion" field.
func CountrySubregionNotIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNotIn(FieldCountrySubregion, vs...))
}

// CountrySubregionGT applies the GT predicate on the "country_subregion" field.
func CountrySubregionGT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGT(FieldCountrySubregion, v))
}

// CountrySubregionGTE applies the GTE predicate on the "country_subregion" field.
func CountrySubregionGTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGTE(FieldCountrySubregion, v))
}

// CountrySubregionLT applies the LT predicate on the "country_subregion" field.
func CountrySubregionLT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLT(FieldCountrySubregion, v))
}

// CountrySubregionLTE applies the LTE predicate on the "country_subregion" field.
func CountrySubregionLTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLTE(FieldCountrySubregion, v))
}

// CountrySubregionContains applies the Contains predicate on the "country_subregion" field.
func CountrySubregionContains(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContains(FieldCountrySubregion, v))
}

// CountrySubregionHasPrefix applies the HasPrefix predicate on the "country_subregion" field.
func CountrySubregionHasPrefix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasPrefix(FieldCountrySubregion, v))
}

// CountrySubregionHasSuffix applies the HasSuffix predicate on the "country_subregion" field.
func CountrySubregionHasSuffix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasSuffix(FieldCountrySubregion, v))
}

// CountrySubregionEqualFold applies the EqualFold predicate on the "country_subregion" field.
func CountrySubregionEqualFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEqualFold(FieldCountrySubregion, v))
}

// CountrySubregionContainsFold applies the ContainsFold predicate on the "country_subregion" field.
func CountrySubregionContainsFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContainsFold(FieldCountrySubregion, v))
}

// CountryRegionCodeEQ applies the EQ predicate on the "country_region_code" field.
func CountryRegionCodeEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldCountryRegionCode, v))
}

// CountryRegionCodeNEQ applies the NEQ predicate on the "country_region_code" field.
func CountryRegionCodeNEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNEQ(FieldCountryRegionCode, v))
}

// CountryRegionCodeIn applies the In predicate on the "country_region_code" field.
func CountryRegionCodeIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldIn(FieldCountryRegionCode, vs...))
}

// CountryRegionCodeNotIn applies the NotIn predicate on the "country_region_code" field.
func CountryRegionCodeNotIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNotIn(FieldCountryRegionCode, vs...))
}

// CountryRegionCodeGT applies the GT predicate on the "country_region_code" field.
func CountryRegionCodeGT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGT(FieldCountryRegionCode, v))
}

// CountryRegionCodeGTE applies the GTE predicate on the "country_region_code" field.
func CountryRegionCodeGTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGTE(FieldCountryRegionCode, v))
}

// CountryRegionCodeLT applies the LT predicate on the "country_region_code" field.
func CountryRegionCodeLT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLT(FieldCountryRegionCode, v))
}

// CountryRegionCodeLTE applies the LTE predicate on the "country_region_code" field.
func CountryRegionCodeLTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLTE(FieldCountryRegionCode, v))
}

// CountryRegionCodeContains applies the Contains predicate on the "country_region_code" field.
func CountryRegionCodeContains(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContains(FieldCountryRegionCode, v))
}

// CountryRegionCodeHasPrefix applies the HasPrefix predicate on the "country_region_code" field.
func CountryRegionCodeHasPrefix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasPrefix(FieldCountryRegionCode, v))
}

// CountryRegionCodeHasSuffix applies the HasSuffix predicate on the "country_region_code" field.
func CountryRegionCodeHasSuffix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasSuffix(FieldCountryRegionCode, v))
}

// CountryRegionCodeEqualFold applies the EqualFold predicate on the "country_region_code" field.
func CountryRegionCodeEqualFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEqualFold(FieldCountryRegionCode, v))
}

// CountryRegionCodeContainsFold applies the ContainsFold predicate on the "country_region_code" field.
func CountryRegionCodeContainsFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContainsFold(FieldCountryRegionCode, v))
}

// CountrySubRegionCodeEQ applies the EQ predicate on the "country_sub_region_code" field.
func CountrySubRegionCodeEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEQ(FieldCountrySubRegionCode, v))
}

// CountrySubRegionCodeNEQ applies the NEQ predicate on the "country_sub_region_code" field.
func CountrySubRegionCodeNEQ(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNEQ(FieldCountrySubRegionCode, v))
}

// CountrySubRegionCodeIn applies the In predicate on the "country_sub_region_code" field.
func CountrySubRegionCodeIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldIn(FieldCountrySubRegionCode, vs...))
}

// CountrySubRegionCodeNotIn applies the NotIn predicate on the "country_sub_region_code" field.
func CountrySubRegionCodeNotIn(vs ...string) predicate.CountryList {
	return predicate.CountryList(sql.FieldNotIn(FieldCountrySubRegionCode, vs...))
}

// CountrySubRegionCodeGT applies the GT predicate on the "country_sub_region_code" field.
func CountrySubRegionCodeGT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGT(FieldCountrySubRegionCode, v))
}

// CountrySubRegionCodeGTE applies the GTE predicate on the "country_sub_region_code" field.
func CountrySubRegionCodeGTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldGTE(FieldCountrySubRegionCode, v))
}

// CountrySubRegionCodeLT applies the LT predicate on the "country_sub_region_code" field.
func CountrySubRegionCodeLT(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLT(FieldCountrySubRegionCode, v))
}

// CountrySubRegionCodeLTE applies the LTE predicate on the "country_sub_region_code" field.
func CountrySubRegionCodeLTE(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldLTE(FieldCountrySubRegionCode, v))
}

// CountrySubRegionCodeContains applies the Contains predicate on the "country_sub_region_code" field.
func CountrySubRegionCodeContains(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContains(FieldCountrySubRegionCode, v))
}

// CountrySubRegionCodeHasPrefix applies the HasPrefix predicate on the "country_sub_region_code" field.
func CountrySubRegionCodeHasPrefix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasPrefix(FieldCountrySubRegionCode, v))
}

// CountrySubRegionCodeHasSuffix applies the HasSuffix predicate on the "country_sub_region_code" field.
func CountrySubRegionCodeHasSuffix(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldHasSuffix(FieldCountrySubRegionCode, v))
}

// CountrySubRegionCodeEqualFold applies the EqualFold predicate on the "country_sub_region_code" field.
func CountrySubRegionCodeEqualFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldEqualFold(FieldCountrySubRegionCode, v))
}

// CountrySubRegionCodeContainsFold applies the ContainsFold predicate on the "country_sub_region_code" field.
func CountrySubRegionCodeContainsFold(v string) predicate.CountryList {
	return predicate.CountryList(sql.FieldContainsFold(FieldCountrySubRegionCode, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CountryList) predicate.CountryList {
	return predicate.CountryList(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CountryList) predicate.CountryList {
	return predicate.CountryList(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CountryList) predicate.CountryList {
	return predicate.CountryList(sql.NotPredicates(p))
}
