// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/rbacroles"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RBACRolesCreate is the builder for creating a RBACRoles entity.
type RBACRolesCreate struct {
	config
	mutation *RBACRolesMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (rrc *RBACRolesCreate) SetName(s string) *RBACRolesCreate {
	rrc.mutation.SetName(s)
	return rrc
}

// SetInternalName sets the "internal_name" field.
func (rrc *RBACRolesCreate) SetInternalName(s string) *RBACRolesCreate {
	rrc.mutation.SetInternalName(s)
	return rrc
}

// SetType sets the "type" field.
func (rrc *RBACRolesCreate) SetType(r rbacroles.Type) *RBACRolesCreate {
	rrc.mutation.SetType(r)
	return rrc
}

// SetClinicID sets the "clinic_id" field.
func (rrc *RBACRolesCreate) SetClinicID(i int32) *RBACRolesCreate {
	rrc.mutation.SetClinicID(i)
	return rrc
}

// Mutation returns the RBACRolesMutation object of the builder.
func (rrc *RBACRolesCreate) Mutation() *RBACRolesMutation {
	return rrc.mutation
}

// Save creates the RBACRoles in the database.
func (rrc *RBACRolesCreate) Save(ctx context.Context) (*RBACRoles, error) {
	return withHooks(ctx, rrc.sqlSave, rrc.mutation, rrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rrc *RBACRolesCreate) SaveX(ctx context.Context) *RBACRoles {
	v, err := rrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrc *RBACRolesCreate) Exec(ctx context.Context) error {
	_, err := rrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrc *RBACRolesCreate) ExecX(ctx context.Context) {
	if err := rrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rrc *RBACRolesCreate) check() error {
	if _, ok := rrc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "RBACRoles.name"`)}
	}
	if v, ok := rrc.mutation.Name(); ok {
		if err := rbacroles.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RBACRoles.name": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.InternalName(); !ok {
		return &ValidationError{Name: "internal_name", err: errors.New(`ent: missing required field "RBACRoles.internal_name"`)}
	}
	if v, ok := rrc.mutation.InternalName(); ok {
		if err := rbacroles.InternalNameValidator(v); err != nil {
			return &ValidationError{Name: "internal_name", err: fmt.Errorf(`ent: validator failed for field "RBACRoles.internal_name": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "RBACRoles.type"`)}
	}
	if v, ok := rrc.mutation.GetType(); ok {
		if err := rbacroles.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "RBACRoles.type": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.ClinicID(); !ok {
		return &ValidationError{Name: "clinic_id", err: errors.New(`ent: missing required field "RBACRoles.clinic_id"`)}
	}
	return nil
}

func (rrc *RBACRolesCreate) sqlSave(ctx context.Context) (*RBACRoles, error) {
	if err := rrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rrc.mutation.id = &_node.ID
	rrc.mutation.done = true
	return _node, nil
}

func (rrc *RBACRolesCreate) createSpec() (*RBACRoles, *sqlgraph.CreateSpec) {
	var (
		_node = &RBACRoles{config: rrc.config}
		_spec = sqlgraph.NewCreateSpec(rbacroles.Table, sqlgraph.NewFieldSpec(rbacroles.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rrc.conflict
	if value, ok := rrc.mutation.Name(); ok {
		_spec.SetField(rbacroles.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rrc.mutation.InternalName(); ok {
		_spec.SetField(rbacroles.FieldInternalName, field.TypeString, value)
		_node.InternalName = value
	}
	if value, ok := rrc.mutation.GetType(); ok {
		_spec.SetField(rbacroles.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := rrc.mutation.ClinicID(); ok {
		_spec.SetField(rbacroles.FieldClinicID, field.TypeInt32, value)
		_node.ClinicID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RBACRoles.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RBACRolesUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rrc *RBACRolesCreate) OnConflict(opts ...sql.ConflictOption) *RBACRolesUpsertOne {
	rrc.conflict = opts
	return &RBACRolesUpsertOne{
		create: rrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RBACRoles.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rrc *RBACRolesCreate) OnConflictColumns(columns ...string) *RBACRolesUpsertOne {
	rrc.conflict = append(rrc.conflict, sql.ConflictColumns(columns...))
	return &RBACRolesUpsertOne{
		create: rrc,
	}
}

type (
	// RBACRolesUpsertOne is the builder for "upsert"-ing
	//  one RBACRoles node.
	RBACRolesUpsertOne struct {
		create *RBACRolesCreate
	}

	// RBACRolesUpsert is the "OnConflict" setter.
	RBACRolesUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *RBACRolesUpsert) SetName(v string) *RBACRolesUpsert {
	u.Set(rbacroles.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RBACRolesUpsert) UpdateName() *RBACRolesUpsert {
	u.SetExcluded(rbacroles.FieldName)
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *RBACRolesUpsert) SetInternalName(v string) *RBACRolesUpsert {
	u.Set(rbacroles.FieldInternalName, v)
	return u
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *RBACRolesUpsert) UpdateInternalName() *RBACRolesUpsert {
	u.SetExcluded(rbacroles.FieldInternalName)
	return u
}

// SetType sets the "type" field.
func (u *RBACRolesUpsert) SetType(v rbacroles.Type) *RBACRolesUpsert {
	u.Set(rbacroles.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RBACRolesUpsert) UpdateType() *RBACRolesUpsert {
	u.SetExcluded(rbacroles.FieldType)
	return u
}

// SetClinicID sets the "clinic_id" field.
func (u *RBACRolesUpsert) SetClinicID(v int32) *RBACRolesUpsert {
	u.Set(rbacroles.FieldClinicID, v)
	return u
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *RBACRolesUpsert) UpdateClinicID() *RBACRolesUpsert {
	u.SetExcluded(rbacroles.FieldClinicID)
	return u
}

// AddClinicID adds v to the "clinic_id" field.
func (u *RBACRolesUpsert) AddClinicID(v int32) *RBACRolesUpsert {
	u.Add(rbacroles.FieldClinicID, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.RBACRoles.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RBACRolesUpsertOne) UpdateNewValues() *RBACRolesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RBACRoles.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RBACRolesUpsertOne) Ignore() *RBACRolesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RBACRolesUpsertOne) DoNothing() *RBACRolesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RBACRolesCreate.OnConflict
// documentation for more info.
func (u *RBACRolesUpsertOne) Update(set func(*RBACRolesUpsert)) *RBACRolesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RBACRolesUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *RBACRolesUpsertOne) SetName(v string) *RBACRolesUpsertOne {
	return u.Update(func(s *RBACRolesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RBACRolesUpsertOne) UpdateName() *RBACRolesUpsertOne {
	return u.Update(func(s *RBACRolesUpsert) {
		s.UpdateName()
	})
}

// SetInternalName sets the "internal_name" field.
func (u *RBACRolesUpsertOne) SetInternalName(v string) *RBACRolesUpsertOne {
	return u.Update(func(s *RBACRolesUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *RBACRolesUpsertOne) UpdateInternalName() *RBACRolesUpsertOne {
	return u.Update(func(s *RBACRolesUpsert) {
		s.UpdateInternalName()
	})
}

// SetType sets the "type" field.
func (u *RBACRolesUpsertOne) SetType(v rbacroles.Type) *RBACRolesUpsertOne {
	return u.Update(func(s *RBACRolesUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RBACRolesUpsertOne) UpdateType() *RBACRolesUpsertOne {
	return u.Update(func(s *RBACRolesUpsert) {
		s.UpdateType()
	})
}

// SetClinicID sets the "clinic_id" field.
func (u *RBACRolesUpsertOne) SetClinicID(v int32) *RBACRolesUpsertOne {
	return u.Update(func(s *RBACRolesUpsert) {
		s.SetClinicID(v)
	})
}

// AddClinicID adds v to the "clinic_id" field.
func (u *RBACRolesUpsertOne) AddClinicID(v int32) *RBACRolesUpsertOne {
	return u.Update(func(s *RBACRolesUpsert) {
		s.AddClinicID(v)
	})
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *RBACRolesUpsertOne) UpdateClinicID() *RBACRolesUpsertOne {
	return u.Update(func(s *RBACRolesUpsert) {
		s.UpdateClinicID()
	})
}

// Exec executes the query.
func (u *RBACRolesUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RBACRolesCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RBACRolesUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RBACRolesUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RBACRolesUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RBACRolesCreateBulk is the builder for creating many RBACRoles entities in bulk.
type RBACRolesCreateBulk struct {
	config
	err      error
	builders []*RBACRolesCreate
	conflict []sql.ConflictOption
}

// Save creates the RBACRoles entities in the database.
func (rrcb *RBACRolesCreateBulk) Save(ctx context.Context) ([]*RBACRoles, error) {
	if rrcb.err != nil {
		return nil, rrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rrcb.builders))
	nodes := make([]*RBACRoles, len(rrcb.builders))
	mutators := make([]Mutator, len(rrcb.builders))
	for i := range rrcb.builders {
		func(i int, root context.Context) {
			builder := rrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RBACRolesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rrcb *RBACRolesCreateBulk) SaveX(ctx context.Context) []*RBACRoles {
	v, err := rrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrcb *RBACRolesCreateBulk) Exec(ctx context.Context) error {
	_, err := rrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrcb *RBACRolesCreateBulk) ExecX(ctx context.Context) {
	if err := rrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RBACRoles.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RBACRolesUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rrcb *RBACRolesCreateBulk) OnConflict(opts ...sql.ConflictOption) *RBACRolesUpsertBulk {
	rrcb.conflict = opts
	return &RBACRolesUpsertBulk{
		create: rrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RBACRoles.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rrcb *RBACRolesCreateBulk) OnConflictColumns(columns ...string) *RBACRolesUpsertBulk {
	rrcb.conflict = append(rrcb.conflict, sql.ConflictColumns(columns...))
	return &RBACRolesUpsertBulk{
		create: rrcb,
	}
}

// RBACRolesUpsertBulk is the builder for "upsert"-ing
// a bulk of RBACRoles nodes.
type RBACRolesUpsertBulk struct {
	create *RBACRolesCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RBACRoles.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RBACRolesUpsertBulk) UpdateNewValues() *RBACRolesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RBACRoles.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RBACRolesUpsertBulk) Ignore() *RBACRolesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RBACRolesUpsertBulk) DoNothing() *RBACRolesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RBACRolesCreateBulk.OnConflict
// documentation for more info.
func (u *RBACRolesUpsertBulk) Update(set func(*RBACRolesUpsert)) *RBACRolesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RBACRolesUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *RBACRolesUpsertBulk) SetName(v string) *RBACRolesUpsertBulk {
	return u.Update(func(s *RBACRolesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RBACRolesUpsertBulk) UpdateName() *RBACRolesUpsertBulk {
	return u.Update(func(s *RBACRolesUpsert) {
		s.UpdateName()
	})
}

// SetInternalName sets the "internal_name" field.
func (u *RBACRolesUpsertBulk) SetInternalName(v string) *RBACRolesUpsertBulk {
	return u.Update(func(s *RBACRolesUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *RBACRolesUpsertBulk) UpdateInternalName() *RBACRolesUpsertBulk {
	return u.Update(func(s *RBACRolesUpsert) {
		s.UpdateInternalName()
	})
}

// SetType sets the "type" field.
func (u *RBACRolesUpsertBulk) SetType(v rbacroles.Type) *RBACRolesUpsertBulk {
	return u.Update(func(s *RBACRolesUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RBACRolesUpsertBulk) UpdateType() *RBACRolesUpsertBulk {
	return u.Update(func(s *RBACRolesUpsert) {
		s.UpdateType()
	})
}

// SetClinicID sets the "clinic_id" field.
func (u *RBACRolesUpsertBulk) SetClinicID(v int32) *RBACRolesUpsertBulk {
	return u.Update(func(s *RBACRolesUpsert) {
		s.SetClinicID(v)
	})
}

// AddClinicID adds v to the "clinic_id" field.
func (u *RBACRolesUpsertBulk) AddClinicID(v int32) *RBACRolesUpsertBulk {
	return u.Update(func(s *RBACRolesUpsert) {
		s.AddClinicID(v)
	})
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *RBACRolesUpsertBulk) UpdateClinicID() *RBACRolesUpsertBulk {
	return u.Update(func(s *RBACRolesUpsert) {
		s.UpdateClinicID()
	})
}

// Exec executes the query.
func (u *RBACRolesUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RBACRolesCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RBACRolesCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RBACRolesUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
