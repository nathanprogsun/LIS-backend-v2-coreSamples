// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/address"
	"coresamples/ent/betaprogramparticipation"
	"coresamples/ent/clinic"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/customeraddressonclinics"
	"coresamples/ent/customercontactonclinics"
	"coresamples/ent/customersettingonclinics"
	"coresamples/ent/internaluser"
	"coresamples/ent/orderinfo"
	"coresamples/ent/patient"
	"coresamples/ent/sample"
	"coresamples/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerCreate is the builder for creating a Customer entity.
type CustomerCreate struct {
	config
	mutation *CustomerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (cc *CustomerCreate) SetUserID(i int) *CustomerCreate {
	cc.mutation.SetUserID(i)
	return cc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableUserID(i *int) *CustomerCreate {
	if i != nil {
		cc.SetUserID(*i)
	}
	return cc
}

// SetCustomerType sets the "customer_type" field.
func (cc *CustomerCreate) SetCustomerType(s string) *CustomerCreate {
	cc.mutation.SetCustomerType(s)
	return cc
}

// SetNillableCustomerType sets the "customer_type" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCustomerType(s *string) *CustomerCreate {
	if s != nil {
		cc.SetCustomerType(*s)
	}
	return cc
}

// SetCustomerFirstName sets the "customer_first_name" field.
func (cc *CustomerCreate) SetCustomerFirstName(s string) *CustomerCreate {
	cc.mutation.SetCustomerFirstName(s)
	return cc
}

// SetNillableCustomerFirstName sets the "customer_first_name" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCustomerFirstName(s *string) *CustomerCreate {
	if s != nil {
		cc.SetCustomerFirstName(*s)
	}
	return cc
}

// SetCustomerLastName sets the "customer_last_name" field.
func (cc *CustomerCreate) SetCustomerLastName(s string) *CustomerCreate {
	cc.mutation.SetCustomerLastName(s)
	return cc
}

// SetNillableCustomerLastName sets the "customer_last_name" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCustomerLastName(s *string) *CustomerCreate {
	if s != nil {
		cc.SetCustomerLastName(*s)
	}
	return cc
}

// SetCustomerMiddleName sets the "customer_middle_name" field.
func (cc *CustomerCreate) SetCustomerMiddleName(s string) *CustomerCreate {
	cc.mutation.SetCustomerMiddleName(s)
	return cc
}

// SetNillableCustomerMiddleName sets the "customer_middle_name" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCustomerMiddleName(s *string) *CustomerCreate {
	if s != nil {
		cc.SetCustomerMiddleName(*s)
	}
	return cc
}

// SetCustomerTypeID sets the "customer_type_id" field.
func (cc *CustomerCreate) SetCustomerTypeID(s string) *CustomerCreate {
	cc.mutation.SetCustomerTypeID(s)
	return cc
}

// SetNillableCustomerTypeID sets the "customer_type_id" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCustomerTypeID(s *string) *CustomerCreate {
	if s != nil {
		cc.SetCustomerTypeID(*s)
	}
	return cc
}

// SetCustomerSuffix sets the "customer_suffix" field.
func (cc *CustomerCreate) SetCustomerSuffix(s string) *CustomerCreate {
	cc.mutation.SetCustomerSuffix(s)
	return cc
}

// SetNillableCustomerSuffix sets the "customer_suffix" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCustomerSuffix(s *string) *CustomerCreate {
	if s != nil {
		cc.SetCustomerSuffix(*s)
	}
	return cc
}

// SetCustomerSamplesReceived sets the "customer_samples_received" field.
func (cc *CustomerCreate) SetCustomerSamplesReceived(s string) *CustomerCreate {
	cc.mutation.SetCustomerSamplesReceived(s)
	return cc
}

// SetNillableCustomerSamplesReceived sets the "customer_samples_received" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCustomerSamplesReceived(s *string) *CustomerCreate {
	if s != nil {
		cc.SetCustomerSamplesReceived(*s)
	}
	return cc
}

// SetCustomerRequestSubmitTime sets the "customer_request_submit_time" field.
func (cc *CustomerCreate) SetCustomerRequestSubmitTime(t time.Time) *CustomerCreate {
	cc.mutation.SetCustomerRequestSubmitTime(t)
	return cc
}

// SetNillableCustomerRequestSubmitTime sets the "customer_request_submit_time" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCustomerRequestSubmitTime(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetCustomerRequestSubmitTime(*t)
	}
	return cc
}

// SetCustomerSignupTime sets the "customer_signup_time" field.
func (cc *CustomerCreate) SetCustomerSignupTime(t time.Time) *CustomerCreate {
	cc.mutation.SetCustomerSignupTime(t)
	return cc
}

// SetNillableCustomerSignupTime sets the "customer_signup_time" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCustomerSignupTime(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetCustomerSignupTime(*t)
	}
	return cc
}

// SetIsActive sets the "is_active" field.
func (cc *CustomerCreate) SetIsActive(b bool) *CustomerCreate {
	cc.mutation.SetIsActive(b)
	return cc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableIsActive(b *bool) *CustomerCreate {
	if b != nil {
		cc.SetIsActive(*b)
	}
	return cc
}

// SetSalesID sets the "sales_id" field.
func (cc *CustomerCreate) SetSalesID(i int) *CustomerCreate {
	cc.mutation.SetSalesID(i)
	return cc
}

// SetNillableSalesID sets the "sales_id" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableSalesID(i *int) *CustomerCreate {
	if i != nil {
		cc.SetSalesID(*i)
	}
	return cc
}

// SetCustomerNpiNumber sets the "customer_npi_number" field.
func (cc *CustomerCreate) SetCustomerNpiNumber(s string) *CustomerCreate {
	cc.mutation.SetCustomerNpiNumber(s)
	return cc
}

// SetNillableCustomerNpiNumber sets the "customer_npi_number" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCustomerNpiNumber(s *string) *CustomerCreate {
	if s != nil {
		cc.SetCustomerNpiNumber(*s)
	}
	return cc
}

// SetReferralSource sets the "referral_source" field.
func (cc *CustomerCreate) SetReferralSource(s string) *CustomerCreate {
	cc.mutation.SetReferralSource(s)
	return cc
}

// SetNillableReferralSource sets the "referral_source" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableReferralSource(s *string) *CustomerCreate {
	if s != nil {
		cc.SetReferralSource(*s)
	}
	return cc
}

// SetOrderPlacementAllowed sets the "order_placement_allowed" field.
func (cc *CustomerCreate) SetOrderPlacementAllowed(b bool) *CustomerCreate {
	cc.mutation.SetOrderPlacementAllowed(b)
	return cc
}

// SetNillableOrderPlacementAllowed sets the "order_placement_allowed" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableOrderPlacementAllowed(b *bool) *CustomerCreate {
	if b != nil {
		cc.SetOrderPlacementAllowed(*b)
	}
	return cc
}

// SetBetaProgramEnabled sets the "beta_program_enabled" field.
func (cc *CustomerCreate) SetBetaProgramEnabled(b bool) *CustomerCreate {
	cc.mutation.SetBetaProgramEnabled(b)
	return cc
}

// SetNillableBetaProgramEnabled sets the "beta_program_enabled" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableBetaProgramEnabled(b *bool) *CustomerCreate {
	if b != nil {
		cc.SetBetaProgramEnabled(*b)
	}
	return cc
}

// SetOnboardingQuestionnaireFilledOn sets the "onboarding_questionnaire_filled_on" field.
func (cc *CustomerCreate) SetOnboardingQuestionnaireFilledOn(t time.Time) *CustomerCreate {
	cc.mutation.SetOnboardingQuestionnaireFilledOn(t)
	return cc
}

// SetNillableOnboardingQuestionnaireFilledOn sets the "onboarding_questionnaire_filled_on" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableOnboardingQuestionnaireFilledOn(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetOnboardingQuestionnaireFilledOn(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CustomerCreate) SetID(i int) *CustomerCreate {
	cc.mutation.SetID(i)
	return cc
}

// AddSampleIDs adds the "samples" edge to the Sample entity by IDs.
func (cc *CustomerCreate) AddSampleIDs(ids ...int) *CustomerCreate {
	cc.mutation.AddSampleIDs(ids...)
	return cc
}

// AddSamples adds the "samples" edges to the Sample entity.
func (cc *CustomerCreate) AddSamples(s ...*Sample) *CustomerCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddSampleIDs(ids...)
}

// AddCustomerContactIDs adds the "customer_contacts" edge to the Contact entity by IDs.
func (cc *CustomerCreate) AddCustomerContactIDs(ids ...int) *CustomerCreate {
	cc.mutation.AddCustomerContactIDs(ids...)
	return cc
}

// AddCustomerContacts adds the "customer_contacts" edges to the Contact entity.
func (cc *CustomerCreate) AddCustomerContacts(c ...*Contact) *CustomerCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCustomerContactIDs(ids...)
}

// AddCustomerAddressIDs adds the "customer_addresses" edge to the Address entity by IDs.
func (cc *CustomerCreate) AddCustomerAddressIDs(ids ...int) *CustomerCreate {
	cc.mutation.AddCustomerAddressIDs(ids...)
	return cc
}

// AddCustomerAddresses adds the "customer_addresses" edges to the Address entity.
func (cc *CustomerCreate) AddCustomerAddresses(a ...*Address) *CustomerCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cc.AddCustomerAddressIDs(ids...)
}

// AddClinicIDs adds the "clinics" edge to the Clinic entity by IDs.
func (cc *CustomerCreate) AddClinicIDs(ids ...int) *CustomerCreate {
	cc.mutation.AddClinicIDs(ids...)
	return cc
}

// AddClinics adds the "clinics" edges to the Clinic entity.
func (cc *CustomerCreate) AddClinics(c ...*Clinic) *CustomerCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddClinicIDs(ids...)
}

// SetSales sets the "sales" edge to the InternalUser entity.
func (cc *CustomerCreate) SetSales(i *InternalUser) *CustomerCreate {
	return cc.SetSalesID(i.ID)
}

// SetUser sets the "user" edge to the User entity.
func (cc *CustomerCreate) SetUser(u *User) *CustomerCreate {
	return cc.SetUserID(u.ID)
}

// AddOrderIDs adds the "orders" edge to the OrderInfo entity by IDs.
func (cc *CustomerCreate) AddOrderIDs(ids ...int) *CustomerCreate {
	cc.mutation.AddOrderIDs(ids...)
	return cc
}

// AddOrders adds the "orders" edges to the OrderInfo entity.
func (cc *CustomerCreate) AddOrders(o ...*OrderInfo) *CustomerCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cc.AddOrderIDs(ids...)
}

// AddCurrentPatientIDs adds the "current_patients" edge to the Patient entity by IDs.
func (cc *CustomerCreate) AddCurrentPatientIDs(ids ...int) *CustomerCreate {
	cc.mutation.AddCurrentPatientIDs(ids...)
	return cc
}

// AddCurrentPatients adds the "current_patients" edges to the Patient entity.
func (cc *CustomerCreate) AddCurrentPatients(p ...*Patient) *CustomerCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddCurrentPatientIDs(ids...)
}

// AddPatientIDs adds the "patients" edge to the Patient entity by IDs.
func (cc *CustomerCreate) AddPatientIDs(ids ...int) *CustomerCreate {
	cc.mutation.AddPatientIDs(ids...)
	return cc
}

// AddPatients adds the "patients" edges to the Patient entity.
func (cc *CustomerCreate) AddPatients(p ...*Patient) *CustomerCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddPatientIDs(ids...)
}

// AddCustomerBetaProgramParticipationIDs adds the "customer_beta_program_participations" edge to the BetaProgramParticipation entity by IDs.
func (cc *CustomerCreate) AddCustomerBetaProgramParticipationIDs(ids ...int) *CustomerCreate {
	cc.mutation.AddCustomerBetaProgramParticipationIDs(ids...)
	return cc
}

// AddCustomerBetaProgramParticipations adds the "customer_beta_program_participations" edges to the BetaProgramParticipation entity.
func (cc *CustomerCreate) AddCustomerBetaProgramParticipations(b ...*BetaProgramParticipation) *CustomerCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cc.AddCustomerBetaProgramParticipationIDs(ids...)
}

// AddCustomerSettingsOnClinicIDs adds the "customer_settings_on_clinics" edge to the CustomerSettingOnClinics entity by IDs.
func (cc *CustomerCreate) AddCustomerSettingsOnClinicIDs(ids ...int) *CustomerCreate {
	cc.mutation.AddCustomerSettingsOnClinicIDs(ids...)
	return cc
}

// AddCustomerSettingsOnClinics adds the "customer_settings_on_clinics" edges to the CustomerSettingOnClinics entity.
func (cc *CustomerCreate) AddCustomerSettingsOnClinics(c ...*CustomerSettingOnClinics) *CustomerCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCustomerSettingsOnClinicIDs(ids...)
}

// AddCustomerAddressesOnClinicIDs adds the "customer_addresses_on_clinics" edge to the CustomerAddressOnClinics entity by IDs.
func (cc *CustomerCreate) AddCustomerAddressesOnClinicIDs(ids ...int) *CustomerCreate {
	cc.mutation.AddCustomerAddressesOnClinicIDs(ids...)
	return cc
}

// AddCustomerAddressesOnClinics adds the "customer_addresses_on_clinics" edges to the CustomerAddressOnClinics entity.
func (cc *CustomerCreate) AddCustomerAddressesOnClinics(c ...*CustomerAddressOnClinics) *CustomerCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCustomerAddressesOnClinicIDs(ids...)
}

// AddCustomerContactsOnClinicIDs adds the "customer_contacts_on_clinics" edge to the CustomerContactOnClinics entity by IDs.
func (cc *CustomerCreate) AddCustomerContactsOnClinicIDs(ids ...int) *CustomerCreate {
	cc.mutation.AddCustomerContactsOnClinicIDs(ids...)
	return cc
}

// AddCustomerContactsOnClinics adds the "customer_contacts_on_clinics" edges to the CustomerContactOnClinics entity.
func (cc *CustomerCreate) AddCustomerContactsOnClinics(c ...*CustomerContactOnClinics) *CustomerCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCustomerContactsOnClinicIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cc *CustomerCreate) Mutation() *CustomerMutation {
	return cc.mutation
}

// Save creates the Customer in the database.
func (cc *CustomerCreate) Save(ctx context.Context) (*Customer, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CustomerCreate) SaveX(ctx context.Context) *Customer {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CustomerCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CustomerCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CustomerCreate) defaults() {
	if _, ok := cc.mutation.CustomerType(); !ok {
		v := customer.DefaultCustomerType
		cc.mutation.SetCustomerType(v)
	}
	if _, ok := cc.mutation.CustomerSignupTime(); !ok {
		v := customer.DefaultCustomerSignupTime()
		cc.mutation.SetCustomerSignupTime(v)
	}
	if _, ok := cc.mutation.IsActive(); !ok {
		v := customer.DefaultIsActive
		cc.mutation.SetIsActive(v)
	}
	if _, ok := cc.mutation.OrderPlacementAllowed(); !ok {
		v := customer.DefaultOrderPlacementAllowed
		cc.mutation.SetOrderPlacementAllowed(v)
	}
	if _, ok := cc.mutation.BetaProgramEnabled(); !ok {
		v := customer.DefaultBetaProgramEnabled
		cc.mutation.SetBetaProgramEnabled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CustomerCreate) check() error {
	if _, ok := cc.mutation.CustomerType(); !ok {
		return &ValidationError{Name: "customer_type", err: errors.New(`ent: missing required field "Customer.customer_type"`)}
	}
	if _, ok := cc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Customer.is_active"`)}
	}
	return nil
}

func (cc *CustomerCreate) sqlSave(ctx context.Context) (*Customer, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CustomerCreate) createSpec() (*Customer, *sqlgraph.CreateSpec) {
	var (
		_node = &Customer{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(customer.Table, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CustomerType(); ok {
		_spec.SetField(customer.FieldCustomerType, field.TypeString, value)
		_node.CustomerType = value
	}
	if value, ok := cc.mutation.CustomerFirstName(); ok {
		_spec.SetField(customer.FieldCustomerFirstName, field.TypeString, value)
		_node.CustomerFirstName = value
	}
	if value, ok := cc.mutation.CustomerLastName(); ok {
		_spec.SetField(customer.FieldCustomerLastName, field.TypeString, value)
		_node.CustomerLastName = value
	}
	if value, ok := cc.mutation.CustomerMiddleName(); ok {
		_spec.SetField(customer.FieldCustomerMiddleName, field.TypeString, value)
		_node.CustomerMiddleName = value
	}
	if value, ok := cc.mutation.CustomerTypeID(); ok {
		_spec.SetField(customer.FieldCustomerTypeID, field.TypeString, value)
		_node.CustomerTypeID = value
	}
	if value, ok := cc.mutation.CustomerSuffix(); ok {
		_spec.SetField(customer.FieldCustomerSuffix, field.TypeString, value)
		_node.CustomerSuffix = value
	}
	if value, ok := cc.mutation.CustomerSamplesReceived(); ok {
		_spec.SetField(customer.FieldCustomerSamplesReceived, field.TypeString, value)
		_node.CustomerSamplesReceived = value
	}
	if value, ok := cc.mutation.CustomerRequestSubmitTime(); ok {
		_spec.SetField(customer.FieldCustomerRequestSubmitTime, field.TypeTime, value)
		_node.CustomerRequestSubmitTime = value
	}
	if value, ok := cc.mutation.CustomerSignupTime(); ok {
		_spec.SetField(customer.FieldCustomerSignupTime, field.TypeTime, value)
		_node.CustomerSignupTime = value
	}
	if value, ok := cc.mutation.IsActive(); ok {
		_spec.SetField(customer.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := cc.mutation.CustomerNpiNumber(); ok {
		_spec.SetField(customer.FieldCustomerNpiNumber, field.TypeString, value)
		_node.CustomerNpiNumber = value
	}
	if value, ok := cc.mutation.ReferralSource(); ok {
		_spec.SetField(customer.FieldReferralSource, field.TypeString, value)
		_node.ReferralSource = value
	}
	if value, ok := cc.mutation.OrderPlacementAllowed(); ok {
		_spec.SetField(customer.FieldOrderPlacementAllowed, field.TypeBool, value)
		_node.OrderPlacementAllowed = value
	}
	if value, ok := cc.mutation.BetaProgramEnabled(); ok {
		_spec.SetField(customer.FieldBetaProgramEnabled, field.TypeBool, value)
		_node.BetaProgramEnabled = value
	}
	if value, ok := cc.mutation.OnboardingQuestionnaireFilledOn(); ok {
		_spec.SetField(customer.FieldOnboardingQuestionnaireFilledOn, field.TypeTime, value)
		_node.OnboardingQuestionnaireFilledOn = value
	}
	if nodes := cc.mutation.SamplesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SamplesTable,
			Columns: []string{customer.SamplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CustomerContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerContactsTable,
			Columns: []string{customer.CustomerContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CustomerAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerAddressesTable,
			Columns: []string{customer.CustomerAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customer.ClinicsTable,
			Columns: customer.ClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.SalesTable,
			Columns: []string{customer.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SalesID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.UserTable,
			Columns: []string{customer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrdersTable,
			Columns: []string{customer.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CurrentPatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CurrentPatientsTable,
			Columns: []string{customer.CurrentPatientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.PatientsTable,
			Columns: customer.PatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CustomerBetaProgramParticipationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerBetaProgramParticipationsTable,
			Columns: []string{customer.CustomerBetaProgramParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CustomerSettingsOnClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerSettingsOnClinicsTable,
			Columns: []string{customer.CustomerSettingsOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CustomerAddressesOnClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerAddressesOnClinicsTable,
			Columns: []string{customer.CustomerAddressesOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CustomerContactsOnClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerContactsOnClinicsTable,
			Columns: []string{customer.CustomerContactsOnClinicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Customer.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (cc *CustomerCreate) OnConflict(opts ...sql.ConflictOption) *CustomerUpsertOne {
	cc.conflict = opts
	return &CustomerUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CustomerCreate) OnConflictColumns(columns ...string) *CustomerUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CustomerUpsertOne{
		create: cc,
	}
}

type (
	// CustomerUpsertOne is the builder for "upsert"-ing
	//  one Customer node.
	CustomerUpsertOne struct {
		create *CustomerCreate
	}

	// CustomerUpsert is the "OnConflict" setter.
	CustomerUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *CustomerUpsert) SetUserID(v int) *CustomerUpsert {
	u.Set(customer.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateUserID() *CustomerUpsert {
	u.SetExcluded(customer.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *CustomerUpsert) ClearUserID() *CustomerUpsert {
	u.SetNull(customer.FieldUserID)
	return u
}

// SetCustomerType sets the "customer_type" field.
func (u *CustomerUpsert) SetCustomerType(v string) *CustomerUpsert {
	u.Set(customer.FieldCustomerType, v)
	return u
}

// UpdateCustomerType sets the "customer_type" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateCustomerType() *CustomerUpsert {
	u.SetExcluded(customer.FieldCustomerType)
	return u
}

// SetCustomerFirstName sets the "customer_first_name" field.
func (u *CustomerUpsert) SetCustomerFirstName(v string) *CustomerUpsert {
	u.Set(customer.FieldCustomerFirstName, v)
	return u
}

// UpdateCustomerFirstName sets the "customer_first_name" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateCustomerFirstName() *CustomerUpsert {
	u.SetExcluded(customer.FieldCustomerFirstName)
	return u
}

// ClearCustomerFirstName clears the value of the "customer_first_name" field.
func (u *CustomerUpsert) ClearCustomerFirstName() *CustomerUpsert {
	u.SetNull(customer.FieldCustomerFirstName)
	return u
}

// SetCustomerLastName sets the "customer_last_name" field.
func (u *CustomerUpsert) SetCustomerLastName(v string) *CustomerUpsert {
	u.Set(customer.FieldCustomerLastName, v)
	return u
}

// UpdateCustomerLastName sets the "customer_last_name" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateCustomerLastName() *CustomerUpsert {
	u.SetExcluded(customer.FieldCustomerLastName)
	return u
}

// ClearCustomerLastName clears the value of the "customer_last_name" field.
func (u *CustomerUpsert) ClearCustomerLastName() *CustomerUpsert {
	u.SetNull(customer.FieldCustomerLastName)
	return u
}

// SetCustomerMiddleName sets the "customer_middle_name" field.
func (u *CustomerUpsert) SetCustomerMiddleName(v string) *CustomerUpsert {
	u.Set(customer.FieldCustomerMiddleName, v)
	return u
}

// UpdateCustomerMiddleName sets the "customer_middle_name" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateCustomerMiddleName() *CustomerUpsert {
	u.SetExcluded(customer.FieldCustomerMiddleName)
	return u
}

// ClearCustomerMiddleName clears the value of the "customer_middle_name" field.
func (u *CustomerUpsert) ClearCustomerMiddleName() *CustomerUpsert {
	u.SetNull(customer.FieldCustomerMiddleName)
	return u
}

// SetCustomerTypeID sets the "customer_type_id" field.
func (u *CustomerUpsert) SetCustomerTypeID(v string) *CustomerUpsert {
	u.Set(customer.FieldCustomerTypeID, v)
	return u
}

// UpdateCustomerTypeID sets the "customer_type_id" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateCustomerTypeID() *CustomerUpsert {
	u.SetExcluded(customer.FieldCustomerTypeID)
	return u
}

// ClearCustomerTypeID clears the value of the "customer_type_id" field.
func (u *CustomerUpsert) ClearCustomerTypeID() *CustomerUpsert {
	u.SetNull(customer.FieldCustomerTypeID)
	return u
}

// SetCustomerSuffix sets the "customer_suffix" field.
func (u *CustomerUpsert) SetCustomerSuffix(v string) *CustomerUpsert {
	u.Set(customer.FieldCustomerSuffix, v)
	return u
}

// UpdateCustomerSuffix sets the "customer_suffix" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateCustomerSuffix() *CustomerUpsert {
	u.SetExcluded(customer.FieldCustomerSuffix)
	return u
}

// ClearCustomerSuffix clears the value of the "customer_suffix" field.
func (u *CustomerUpsert) ClearCustomerSuffix() *CustomerUpsert {
	u.SetNull(customer.FieldCustomerSuffix)
	return u
}

// SetCustomerSamplesReceived sets the "customer_samples_received" field.
func (u *CustomerUpsert) SetCustomerSamplesReceived(v string) *CustomerUpsert {
	u.Set(customer.FieldCustomerSamplesReceived, v)
	return u
}

// UpdateCustomerSamplesReceived sets the "customer_samples_received" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateCustomerSamplesReceived() *CustomerUpsert {
	u.SetExcluded(customer.FieldCustomerSamplesReceived)
	return u
}

// ClearCustomerSamplesReceived clears the value of the "customer_samples_received" field.
func (u *CustomerUpsert) ClearCustomerSamplesReceived() *CustomerUpsert {
	u.SetNull(customer.FieldCustomerSamplesReceived)
	return u
}

// SetCustomerRequestSubmitTime sets the "customer_request_submit_time" field.
func (u *CustomerUpsert) SetCustomerRequestSubmitTime(v time.Time) *CustomerUpsert {
	u.Set(customer.FieldCustomerRequestSubmitTime, v)
	return u
}

// UpdateCustomerRequestSubmitTime sets the "customer_request_submit_time" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateCustomerRequestSubmitTime() *CustomerUpsert {
	u.SetExcluded(customer.FieldCustomerRequestSubmitTime)
	return u
}

// ClearCustomerRequestSubmitTime clears the value of the "customer_request_submit_time" field.
func (u *CustomerUpsert) ClearCustomerRequestSubmitTime() *CustomerUpsert {
	u.SetNull(customer.FieldCustomerRequestSubmitTime)
	return u
}

// SetCustomerSignupTime sets the "customer_signup_time" field.
func (u *CustomerUpsert) SetCustomerSignupTime(v time.Time) *CustomerUpsert {
	u.Set(customer.FieldCustomerSignupTime, v)
	return u
}

// UpdateCustomerSignupTime sets the "customer_signup_time" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateCustomerSignupTime() *CustomerUpsert {
	u.SetExcluded(customer.FieldCustomerSignupTime)
	return u
}

// ClearCustomerSignupTime clears the value of the "customer_signup_time" field.
func (u *CustomerUpsert) ClearCustomerSignupTime() *CustomerUpsert {
	u.SetNull(customer.FieldCustomerSignupTime)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *CustomerUpsert) SetIsActive(v bool) *CustomerUpsert {
	u.Set(customer.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateIsActive() *CustomerUpsert {
	u.SetExcluded(customer.FieldIsActive)
	return u
}

// SetSalesID sets the "sales_id" field.
func (u *CustomerUpsert) SetSalesID(v int) *CustomerUpsert {
	u.Set(customer.FieldSalesID, v)
	return u
}

// UpdateSalesID sets the "sales_id" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateSalesID() *CustomerUpsert {
	u.SetExcluded(customer.FieldSalesID)
	return u
}

// ClearSalesID clears the value of the "sales_id" field.
func (u *CustomerUpsert) ClearSalesID() *CustomerUpsert {
	u.SetNull(customer.FieldSalesID)
	return u
}

// SetCustomerNpiNumber sets the "customer_npi_number" field.
func (u *CustomerUpsert) SetCustomerNpiNumber(v string) *CustomerUpsert {
	u.Set(customer.FieldCustomerNpiNumber, v)
	return u
}

// UpdateCustomerNpiNumber sets the "customer_npi_number" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateCustomerNpiNumber() *CustomerUpsert {
	u.SetExcluded(customer.FieldCustomerNpiNumber)
	return u
}

// ClearCustomerNpiNumber clears the value of the "customer_npi_number" field.
func (u *CustomerUpsert) ClearCustomerNpiNumber() *CustomerUpsert {
	u.SetNull(customer.FieldCustomerNpiNumber)
	return u
}

// SetReferralSource sets the "referral_source" field.
func (u *CustomerUpsert) SetReferralSource(v string) *CustomerUpsert {
	u.Set(customer.FieldReferralSource, v)
	return u
}

// UpdateReferralSource sets the "referral_source" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateReferralSource() *CustomerUpsert {
	u.SetExcluded(customer.FieldReferralSource)
	return u
}

// ClearReferralSource clears the value of the "referral_source" field.
func (u *CustomerUpsert) ClearReferralSource() *CustomerUpsert {
	u.SetNull(customer.FieldReferralSource)
	return u
}

// SetOrderPlacementAllowed sets the "order_placement_allowed" field.
func (u *CustomerUpsert) SetOrderPlacementAllowed(v bool) *CustomerUpsert {
	u.Set(customer.FieldOrderPlacementAllowed, v)
	return u
}

// UpdateOrderPlacementAllowed sets the "order_placement_allowed" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateOrderPlacementAllowed() *CustomerUpsert {
	u.SetExcluded(customer.FieldOrderPlacementAllowed)
	return u
}

// ClearOrderPlacementAllowed clears the value of the "order_placement_allowed" field.
func (u *CustomerUpsert) ClearOrderPlacementAllowed() *CustomerUpsert {
	u.SetNull(customer.FieldOrderPlacementAllowed)
	return u
}

// SetBetaProgramEnabled sets the "beta_program_enabled" field.
func (u *CustomerUpsert) SetBetaProgramEnabled(v bool) *CustomerUpsert {
	u.Set(customer.FieldBetaProgramEnabled, v)
	return u
}

// UpdateBetaProgramEnabled sets the "beta_program_enabled" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateBetaProgramEnabled() *CustomerUpsert {
	u.SetExcluded(customer.FieldBetaProgramEnabled)
	return u
}

// ClearBetaProgramEnabled clears the value of the "beta_program_enabled" field.
func (u *CustomerUpsert) ClearBetaProgramEnabled() *CustomerUpsert {
	u.SetNull(customer.FieldBetaProgramEnabled)
	return u
}

// SetOnboardingQuestionnaireFilledOn sets the "onboarding_questionnaire_filled_on" field.
func (u *CustomerUpsert) SetOnboardingQuestionnaireFilledOn(v time.Time) *CustomerUpsert {
	u.Set(customer.FieldOnboardingQuestionnaireFilledOn, v)
	return u
}

// UpdateOnboardingQuestionnaireFilledOn sets the "onboarding_questionnaire_filled_on" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateOnboardingQuestionnaireFilledOn() *CustomerUpsert {
	u.SetExcluded(customer.FieldOnboardingQuestionnaireFilledOn)
	return u
}

// ClearOnboardingQuestionnaireFilledOn clears the value of the "onboarding_questionnaire_filled_on" field.
func (u *CustomerUpsert) ClearOnboardingQuestionnaireFilledOn() *CustomerUpsert {
	u.SetNull(customer.FieldOnboardingQuestionnaireFilledOn)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerUpsertOne) UpdateNewValues() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(customer.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CustomerUpsertOne) Ignore() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerUpsertOne) DoNothing() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerCreate.OnConflict
// documentation for more info.
func (u *CustomerUpsertOne) Update(set func(*CustomerUpsert)) *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *CustomerUpsertOne) SetUserID(v int) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateUserID() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CustomerUpsertOne) ClearUserID() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearUserID()
	})
}

// SetCustomerType sets the "customer_type" field.
func (u *CustomerUpsertOne) SetCustomerType(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerType(v)
	})
}

// UpdateCustomerType sets the "customer_type" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateCustomerType() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerType()
	})
}

// SetCustomerFirstName sets the "customer_first_name" field.
func (u *CustomerUpsertOne) SetCustomerFirstName(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerFirstName(v)
	})
}

// UpdateCustomerFirstName sets the "customer_first_name" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateCustomerFirstName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerFirstName()
	})
}

// ClearCustomerFirstName clears the value of the "customer_first_name" field.
func (u *CustomerUpsertOne) ClearCustomerFirstName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerFirstName()
	})
}

// SetCustomerLastName sets the "customer_last_name" field.
func (u *CustomerUpsertOne) SetCustomerLastName(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerLastName(v)
	})
}

// UpdateCustomerLastName sets the "customer_last_name" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateCustomerLastName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerLastName()
	})
}

// ClearCustomerLastName clears the value of the "customer_last_name" field.
func (u *CustomerUpsertOne) ClearCustomerLastName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerLastName()
	})
}

// SetCustomerMiddleName sets the "customer_middle_name" field.
func (u *CustomerUpsertOne) SetCustomerMiddleName(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerMiddleName(v)
	})
}

// UpdateCustomerMiddleName sets the "customer_middle_name" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateCustomerMiddleName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerMiddleName()
	})
}

// ClearCustomerMiddleName clears the value of the "customer_middle_name" field.
func (u *CustomerUpsertOne) ClearCustomerMiddleName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerMiddleName()
	})
}

// SetCustomerTypeID sets the "customer_type_id" field.
func (u *CustomerUpsertOne) SetCustomerTypeID(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerTypeID(v)
	})
}

// UpdateCustomerTypeID sets the "customer_type_id" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateCustomerTypeID() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerTypeID()
	})
}

// ClearCustomerTypeID clears the value of the "customer_type_id" field.
func (u *CustomerUpsertOne) ClearCustomerTypeID() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerTypeID()
	})
}

// SetCustomerSuffix sets the "customer_suffix" field.
func (u *CustomerUpsertOne) SetCustomerSuffix(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerSuffix(v)
	})
}

// UpdateCustomerSuffix sets the "customer_suffix" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateCustomerSuffix() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerSuffix()
	})
}

// ClearCustomerSuffix clears the value of the "customer_suffix" field.
func (u *CustomerUpsertOne) ClearCustomerSuffix() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerSuffix()
	})
}

// SetCustomerSamplesReceived sets the "customer_samples_received" field.
func (u *CustomerUpsertOne) SetCustomerSamplesReceived(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerSamplesReceived(v)
	})
}

// UpdateCustomerSamplesReceived sets the "customer_samples_received" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateCustomerSamplesReceived() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerSamplesReceived()
	})
}

// ClearCustomerSamplesReceived clears the value of the "customer_samples_received" field.
func (u *CustomerUpsertOne) ClearCustomerSamplesReceived() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerSamplesReceived()
	})
}

// SetCustomerRequestSubmitTime sets the "customer_request_submit_time" field.
func (u *CustomerUpsertOne) SetCustomerRequestSubmitTime(v time.Time) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerRequestSubmitTime(v)
	})
}

// UpdateCustomerRequestSubmitTime sets the "customer_request_submit_time" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateCustomerRequestSubmitTime() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerRequestSubmitTime()
	})
}

// ClearCustomerRequestSubmitTime clears the value of the "customer_request_submit_time" field.
func (u *CustomerUpsertOne) ClearCustomerRequestSubmitTime() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerRequestSubmitTime()
	})
}

// SetCustomerSignupTime sets the "customer_signup_time" field.
func (u *CustomerUpsertOne) SetCustomerSignupTime(v time.Time) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerSignupTime(v)
	})
}

// UpdateCustomerSignupTime sets the "customer_signup_time" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateCustomerSignupTime() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerSignupTime()
	})
}

// ClearCustomerSignupTime clears the value of the "customer_signup_time" field.
func (u *CustomerUpsertOne) ClearCustomerSignupTime() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerSignupTime()
	})
}

// SetIsActive sets the "is_active" field.
func (u *CustomerUpsertOne) SetIsActive(v bool) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateIsActive() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateIsActive()
	})
}

// SetSalesID sets the "sales_id" field.
func (u *CustomerUpsertOne) SetSalesID(v int) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetSalesID(v)
	})
}

// UpdateSalesID sets the "sales_id" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateSalesID() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateSalesID()
	})
}

// ClearSalesID clears the value of the "sales_id" field.
func (u *CustomerUpsertOne) ClearSalesID() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearSalesID()
	})
}

// SetCustomerNpiNumber sets the "customer_npi_number" field.
func (u *CustomerUpsertOne) SetCustomerNpiNumber(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerNpiNumber(v)
	})
}

// UpdateCustomerNpiNumber sets the "customer_npi_number" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateCustomerNpiNumber() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerNpiNumber()
	})
}

// ClearCustomerNpiNumber clears the value of the "customer_npi_number" field.
func (u *CustomerUpsertOne) ClearCustomerNpiNumber() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerNpiNumber()
	})
}

// SetReferralSource sets the "referral_source" field.
func (u *CustomerUpsertOne) SetReferralSource(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetReferralSource(v)
	})
}

// UpdateReferralSource sets the "referral_source" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateReferralSource() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateReferralSource()
	})
}

// ClearReferralSource clears the value of the "referral_source" field.
func (u *CustomerUpsertOne) ClearReferralSource() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearReferralSource()
	})
}

// SetOrderPlacementAllowed sets the "order_placement_allowed" field.
func (u *CustomerUpsertOne) SetOrderPlacementAllowed(v bool) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetOrderPlacementAllowed(v)
	})
}

// UpdateOrderPlacementAllowed sets the "order_placement_allowed" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateOrderPlacementAllowed() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateOrderPlacementAllowed()
	})
}

// ClearOrderPlacementAllowed clears the value of the "order_placement_allowed" field.
func (u *CustomerUpsertOne) ClearOrderPlacementAllowed() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearOrderPlacementAllowed()
	})
}

// SetBetaProgramEnabled sets the "beta_program_enabled" field.
func (u *CustomerUpsertOne) SetBetaProgramEnabled(v bool) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetBetaProgramEnabled(v)
	})
}

// UpdateBetaProgramEnabled sets the "beta_program_enabled" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateBetaProgramEnabled() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateBetaProgramEnabled()
	})
}

// ClearBetaProgramEnabled clears the value of the "beta_program_enabled" field.
func (u *CustomerUpsertOne) ClearBetaProgramEnabled() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearBetaProgramEnabled()
	})
}

// SetOnboardingQuestionnaireFilledOn sets the "onboarding_questionnaire_filled_on" field.
func (u *CustomerUpsertOne) SetOnboardingQuestionnaireFilledOn(v time.Time) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetOnboardingQuestionnaireFilledOn(v)
	})
}

// UpdateOnboardingQuestionnaireFilledOn sets the "onboarding_questionnaire_filled_on" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateOnboardingQuestionnaireFilledOn() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateOnboardingQuestionnaireFilledOn()
	})
}

// ClearOnboardingQuestionnaireFilledOn clears the value of the "onboarding_questionnaire_filled_on" field.
func (u *CustomerUpsertOne) ClearOnboardingQuestionnaireFilledOn() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearOnboardingQuestionnaireFilledOn()
	})
}

// Exec executes the query.
func (u *CustomerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CustomerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CustomerUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CustomerUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CustomerCreateBulk is the builder for creating many Customer entities in bulk.
type CustomerCreateBulk struct {
	config
	err      error
	builders []*CustomerCreate
	conflict []sql.ConflictOption
}

// Save creates the Customer entities in the database.
func (ccb *CustomerCreateBulk) Save(ctx context.Context) ([]*Customer, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Customer, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CustomerCreateBulk) SaveX(ctx context.Context) []*Customer {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CustomerCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CustomerCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Customer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (ccb *CustomerCreateBulk) OnConflict(opts ...sql.ConflictOption) *CustomerUpsertBulk {
	ccb.conflict = opts
	return &CustomerUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CustomerCreateBulk) OnConflictColumns(columns ...string) *CustomerUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CustomerUpsertBulk{
		create: ccb,
	}
}

// CustomerUpsertBulk is the builder for "upsert"-ing
// a bulk of Customer nodes.
type CustomerUpsertBulk struct {
	create *CustomerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerUpsertBulk) UpdateNewValues() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(customer.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CustomerUpsertBulk) Ignore() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerUpsertBulk) DoNothing() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerCreateBulk.OnConflict
// documentation for more info.
func (u *CustomerUpsertBulk) Update(set func(*CustomerUpsert)) *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *CustomerUpsertBulk) SetUserID(v int) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateUserID() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CustomerUpsertBulk) ClearUserID() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearUserID()
	})
}

// SetCustomerType sets the "customer_type" field.
func (u *CustomerUpsertBulk) SetCustomerType(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerType(v)
	})
}

// UpdateCustomerType sets the "customer_type" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateCustomerType() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerType()
	})
}

// SetCustomerFirstName sets the "customer_first_name" field.
func (u *CustomerUpsertBulk) SetCustomerFirstName(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerFirstName(v)
	})
}

// UpdateCustomerFirstName sets the "customer_first_name" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateCustomerFirstName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerFirstName()
	})
}

// ClearCustomerFirstName clears the value of the "customer_first_name" field.
func (u *CustomerUpsertBulk) ClearCustomerFirstName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerFirstName()
	})
}

// SetCustomerLastName sets the "customer_last_name" field.
func (u *CustomerUpsertBulk) SetCustomerLastName(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerLastName(v)
	})
}

// UpdateCustomerLastName sets the "customer_last_name" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateCustomerLastName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerLastName()
	})
}

// ClearCustomerLastName clears the value of the "customer_last_name" field.
func (u *CustomerUpsertBulk) ClearCustomerLastName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerLastName()
	})
}

// SetCustomerMiddleName sets the "customer_middle_name" field.
func (u *CustomerUpsertBulk) SetCustomerMiddleName(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerMiddleName(v)
	})
}

// UpdateCustomerMiddleName sets the "customer_middle_name" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateCustomerMiddleName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerMiddleName()
	})
}

// ClearCustomerMiddleName clears the value of the "customer_middle_name" field.
func (u *CustomerUpsertBulk) ClearCustomerMiddleName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerMiddleName()
	})
}

// SetCustomerTypeID sets the "customer_type_id" field.
func (u *CustomerUpsertBulk) SetCustomerTypeID(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerTypeID(v)
	})
}

// UpdateCustomerTypeID sets the "customer_type_id" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateCustomerTypeID() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerTypeID()
	})
}

// ClearCustomerTypeID clears the value of the "customer_type_id" field.
func (u *CustomerUpsertBulk) ClearCustomerTypeID() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerTypeID()
	})
}

// SetCustomerSuffix sets the "customer_suffix" field.
func (u *CustomerUpsertBulk) SetCustomerSuffix(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerSuffix(v)
	})
}

// UpdateCustomerSuffix sets the "customer_suffix" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateCustomerSuffix() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerSuffix()
	})
}

// ClearCustomerSuffix clears the value of the "customer_suffix" field.
func (u *CustomerUpsertBulk) ClearCustomerSuffix() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerSuffix()
	})
}

// SetCustomerSamplesReceived sets the "customer_samples_received" field.
func (u *CustomerUpsertBulk) SetCustomerSamplesReceived(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerSamplesReceived(v)
	})
}

// UpdateCustomerSamplesReceived sets the "customer_samples_received" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateCustomerSamplesReceived() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerSamplesReceived()
	})
}

// ClearCustomerSamplesReceived clears the value of the "customer_samples_received" field.
func (u *CustomerUpsertBulk) ClearCustomerSamplesReceived() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerSamplesReceived()
	})
}

// SetCustomerRequestSubmitTime sets the "customer_request_submit_time" field.
func (u *CustomerUpsertBulk) SetCustomerRequestSubmitTime(v time.Time) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerRequestSubmitTime(v)
	})
}

// UpdateCustomerRequestSubmitTime sets the "customer_request_submit_time" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateCustomerRequestSubmitTime() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerRequestSubmitTime()
	})
}

// ClearCustomerRequestSubmitTime clears the value of the "customer_request_submit_time" field.
func (u *CustomerUpsertBulk) ClearCustomerRequestSubmitTime() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerRequestSubmitTime()
	})
}

// SetCustomerSignupTime sets the "customer_signup_time" field.
func (u *CustomerUpsertBulk) SetCustomerSignupTime(v time.Time) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerSignupTime(v)
	})
}

// UpdateCustomerSignupTime sets the "customer_signup_time" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateCustomerSignupTime() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerSignupTime()
	})
}

// ClearCustomerSignupTime clears the value of the "customer_signup_time" field.
func (u *CustomerUpsertBulk) ClearCustomerSignupTime() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerSignupTime()
	})
}

// SetIsActive sets the "is_active" field.
func (u *CustomerUpsertBulk) SetIsActive(v bool) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateIsActive() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateIsActive()
	})
}

// SetSalesID sets the "sales_id" field.
func (u *CustomerUpsertBulk) SetSalesID(v int) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetSalesID(v)
	})
}

// UpdateSalesID sets the "sales_id" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateSalesID() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateSalesID()
	})
}

// ClearSalesID clears the value of the "sales_id" field.
func (u *CustomerUpsertBulk) ClearSalesID() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearSalesID()
	})
}

// SetCustomerNpiNumber sets the "customer_npi_number" field.
func (u *CustomerUpsertBulk) SetCustomerNpiNumber(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCustomerNpiNumber(v)
	})
}

// UpdateCustomerNpiNumber sets the "customer_npi_number" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateCustomerNpiNumber() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCustomerNpiNumber()
	})
}

// ClearCustomerNpiNumber clears the value of the "customer_npi_number" field.
func (u *CustomerUpsertBulk) ClearCustomerNpiNumber() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCustomerNpiNumber()
	})
}

// SetReferralSource sets the "referral_source" field.
func (u *CustomerUpsertBulk) SetReferralSource(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetReferralSource(v)
	})
}

// UpdateReferralSource sets the "referral_source" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateReferralSource() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateReferralSource()
	})
}

// ClearReferralSource clears the value of the "referral_source" field.
func (u *CustomerUpsertBulk) ClearReferralSource() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearReferralSource()
	})
}

// SetOrderPlacementAllowed sets the "order_placement_allowed" field.
func (u *CustomerUpsertBulk) SetOrderPlacementAllowed(v bool) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetOrderPlacementAllowed(v)
	})
}

// UpdateOrderPlacementAllowed sets the "order_placement_allowed" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateOrderPlacementAllowed() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateOrderPlacementAllowed()
	})
}

// ClearOrderPlacementAllowed clears the value of the "order_placement_allowed" field.
func (u *CustomerUpsertBulk) ClearOrderPlacementAllowed() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearOrderPlacementAllowed()
	})
}

// SetBetaProgramEnabled sets the "beta_program_enabled" field.
func (u *CustomerUpsertBulk) SetBetaProgramEnabled(v bool) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetBetaProgramEnabled(v)
	})
}

// UpdateBetaProgramEnabled sets the "beta_program_enabled" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateBetaProgramEnabled() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateBetaProgramEnabled()
	})
}

// ClearBetaProgramEnabled clears the value of the "beta_program_enabled" field.
func (u *CustomerUpsertBulk) ClearBetaProgramEnabled() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearBetaProgramEnabled()
	})
}

// SetOnboardingQuestionnaireFilledOn sets the "onboarding_questionnaire_filled_on" field.
func (u *CustomerUpsertBulk) SetOnboardingQuestionnaireFilledOn(v time.Time) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetOnboardingQuestionnaireFilledOn(v)
	})
}

// UpdateOnboardingQuestionnaireFilledOn sets the "onboarding_questionnaire_filled_on" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateOnboardingQuestionnaireFilledOn() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateOnboardingQuestionnaireFilledOn()
	})
}

// ClearOnboardingQuestionnaireFilledOn clears the value of the "onboarding_questionnaire_filled_on" field.
func (u *CustomerUpsertBulk) ClearOnboardingQuestionnaireFilledOn() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearOnboardingQuestionnaireFilledOn()
	})
}

// Exec executes the query.
func (u *CustomerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CustomerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CustomerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
