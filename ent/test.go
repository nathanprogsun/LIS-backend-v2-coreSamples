// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/test"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Test is the model entity for the Test schema.
type Test struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"test_id"`
	// TestName holds the value of the "test_name" field.
	TestName string `json:"test_name,omitempty"`
	// TestCode holds the value of the "test_code" field.
	TestCode string `json:"test_code,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// TestDescription holds the value of the "test_description" field.
	TestDescription *string `json:"test_description,omitempty"`
	// AssayName holds the value of the "assay_name" field.
	AssayName *string `json:"assay_name,omitempty"`
	// IsActive holds the value of the "isActive" field.
	IsActive bool `json:"isActive,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime time.Time `json:"created_time,omitempty"`
	// UpdatedTime holds the value of the "updated_time" field.
	UpdatedTime time.Time `json:"updated_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestQuery when eager-loading is set.
	Edges        TestEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TestEdges holds the relations/edges for other nodes in the graph.
type TestEdges struct {
	// TestDetails holds the value of the test_details edge.
	TestDetails []*TestDetail `json:"test_details"`
	// OrderInfo holds the value of the order_info edge.
	OrderInfo []*OrderInfo `json:"order_info,omitempty"`
	// SampleTypes holds the value of the sample_types edge.
	SampleTypes []*SampleType `json:"sample_types,omitempty"`
	// TubeTypes holds the value of the tube_types edge.
	TubeTypes []*TubeType `json:"tube_types,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TestDetailsOrErr returns the TestDetails value or an error if the edge
// was not loaded in eager-loading.
func (e TestEdges) TestDetailsOrErr() ([]*TestDetail, error) {
	if e.loadedTypes[0] {
		return e.TestDetails, nil
	}
	return nil, &NotLoadedError{edge: "test_details"}
}

// OrderInfoOrErr returns the OrderInfo value or an error if the edge
// was not loaded in eager-loading.
func (e TestEdges) OrderInfoOrErr() ([]*OrderInfo, error) {
	if e.loadedTypes[1] {
		return e.OrderInfo, nil
	}
	return nil, &NotLoadedError{edge: "order_info"}
}

// SampleTypesOrErr returns the SampleTypes value or an error if the edge
// was not loaded in eager-loading.
func (e TestEdges) SampleTypesOrErr() ([]*SampleType, error) {
	if e.loadedTypes[2] {
		return e.SampleTypes, nil
	}
	return nil, &NotLoadedError{edge: "sample_types"}
}

// TubeTypesOrErr returns the TubeTypes value or an error if the edge
// was not loaded in eager-loading.
func (e TestEdges) TubeTypesOrErr() ([]*TubeType, error) {
	if e.loadedTypes[3] {
		return e.TubeTypes, nil
	}
	return nil, &NotLoadedError{edge: "tube_types"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Test) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case test.FieldIsActive:
			values[i] = new(sql.NullBool)
		case test.FieldID:
			values[i] = new(sql.NullInt64)
		case test.FieldTestName, test.FieldTestCode, test.FieldDisplayName, test.FieldTestDescription, test.FieldAssayName:
			values[i] = new(sql.NullString)
		case test.FieldCreatedTime, test.FieldUpdatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Test fields.
func (t *Test) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case test.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case test.FieldTestName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field test_name", values[i])
			} else if value.Valid {
				t.TestName = value.String
			}
		case test.FieldTestCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field test_code", values[i])
			} else if value.Valid {
				t.TestCode = value.String
			}
		case test.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				t.DisplayName = value.String
			}
		case test.FieldTestDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field test_description", values[i])
			} else if value.Valid {
				t.TestDescription = new(string)
				*t.TestDescription = value.String
			}
		case test.FieldAssayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assay_name", values[i])
			} else if value.Valid {
				t.AssayName = new(string)
				*t.AssayName = value.String
			}
		case test.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isActive", values[i])
			} else if value.Valid {
				t.IsActive = value.Bool
			}
		case test.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				t.CreatedTime = value.Time
			}
		case test.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				t.UpdatedTime = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Test.
// This includes values selected through modifiers, order, etc.
func (t *Test) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryTestDetails queries the "test_details" edge of the Test entity.
func (t *Test) QueryTestDetails() *TestDetailQuery {
	return NewTestClient(t.config).QueryTestDetails(t)
}

// QueryOrderInfo queries the "order_info" edge of the Test entity.
func (t *Test) QueryOrderInfo() *OrderInfoQuery {
	return NewTestClient(t.config).QueryOrderInfo(t)
}

// QuerySampleTypes queries the "sample_types" edge of the Test entity.
func (t *Test) QuerySampleTypes() *SampleTypeQuery {
	return NewTestClient(t.config).QuerySampleTypes(t)
}

// QueryTubeTypes queries the "tube_types" edge of the Test entity.
func (t *Test) QueryTubeTypes() *TubeTypeQuery {
	return NewTestClient(t.config).QueryTubeTypes(t)
}

// Update returns a builder for updating this Test.
// Note that you need to call Test.Unwrap() before calling this method if this Test
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Test) Update() *TestUpdateOne {
	return NewTestClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Test entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Test) Unwrap() *Test {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Test is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Test) String() string {
	var builder strings.Builder
	builder.WriteString("Test(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("test_name=")
	builder.WriteString(t.TestName)
	builder.WriteString(", ")
	builder.WriteString("test_code=")
	builder.WriteString(t.TestCode)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(t.DisplayName)
	builder.WriteString(", ")
	if v := t.TestDescription; v != nil {
		builder.WriteString("test_description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.AssayName; v != nil {
		builder.WriteString("assay_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("isActive=")
	builder.WriteString(fmt.Sprintf("%v", t.IsActive))
	builder.WriteString(", ")
	builder.WriteString("created_time=")
	builder.WriteString(t.CreatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_time=")
	builder.WriteString(t.UpdatedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tests is a parsable slice of Test.
type Tests []*Test
