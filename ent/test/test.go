// Code generated by ent, DO NOT EDIT.

package test

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the test type in the database.
	Label = "test"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "test_id"
	// FieldTestName holds the string denoting the test_name field in the database.
	FieldTestName = "test_name"
	// FieldTestCode holds the string denoting the test_code field in the database.
	FieldTestCode = "test_code"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldTestDescription holds the string denoting the test_description field in the database.
	FieldTestDescription = "test_description"
	// FieldAssayName holds the string denoting the assay_name field in the database.
	FieldAssayName = "assay_name"
	// FieldIsActive holds the string denoting the isactive field in the database.
	FieldIsActive = "isActive"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// FieldUpdatedTime holds the string denoting the updated_time field in the database.
	FieldUpdatedTime = "updated_time"
	// EdgeTestDetails holds the string denoting the test_details edge name in mutations.
	EdgeTestDetails = "test_details"
	// EdgeOrderInfo holds the string denoting the order_info edge name in mutations.
	EdgeOrderInfo = "order_info"
	// EdgeSampleTypes holds the string denoting the sample_types edge name in mutations.
	EdgeSampleTypes = "sample_types"
	// EdgeTubeTypes holds the string denoting the tube_types edge name in mutations.
	EdgeTubeTypes = "tube_types"
	// TestDetailFieldID holds the string denoting the ID field of the TestDetail.
	TestDetailFieldID = "id"
	// OrderInfoFieldID holds the string denoting the ID field of the OrderInfo.
	OrderInfoFieldID = "order_id"
	// SampleTypeFieldID holds the string denoting the ID field of the SampleType.
	SampleTypeFieldID = "sample_type_id"
	// TubeTypeFieldID holds the string denoting the ID field of the TubeType.
	TubeTypeFieldID = "id"
	// Table holds the table name of the test in the database.
	Table = "test"
	// TestDetailsTable is the table that holds the test_details relation/edge.
	TestDetailsTable = "test_detail"
	// TestDetailsInverseTable is the table name for the TestDetail entity.
	// It exists in this package in order to avoid circular dependency with the "testdetail" package.
	TestDetailsInverseTable = "test_detail"
	// TestDetailsColumn is the table column denoting the test_details relation/edge.
	TestDetailsColumn = "test_id"
	// OrderInfoTable is the table that holds the order_info relation/edge. The primary key declared below.
	OrderInfoTable = "_order_info_to_test"
	// OrderInfoInverseTable is the table name for the OrderInfo entity.
	// It exists in this package in order to avoid circular dependency with the "orderinfo" package.
	OrderInfoInverseTable = "order_info"
	// SampleTypesTable is the table that holds the sample_types relation/edge. The primary key declared below.
	SampleTypesTable = "_sample_type_to_test"
	// SampleTypesInverseTable is the table name for the SampleType entity.
	// It exists in this package in order to avoid circular dependency with the "sampletype" package.
	SampleTypesInverseTable = "sample_type"
	// TubeTypesTable is the table that holds the tube_types relation/edge. The primary key declared below.
	TubeTypesTable = "_tube_type_to_test"
	// TubeTypesInverseTable is the table name for the TubeType entity.
	// It exists in this package in order to avoid circular dependency with the "tubetype" package.
	TubeTypesInverseTable = "tube_type"
)

// Columns holds all SQL columns for test fields.
var Columns = []string{
	FieldID,
	FieldTestName,
	FieldTestCode,
	FieldDisplayName,
	FieldTestDescription,
	FieldAssayName,
	FieldIsActive,
	FieldCreatedTime,
	FieldUpdatedTime,
}

var (
	// OrderInfoPrimaryKey and OrderInfoColumn2 are the table columns denoting the
	// primary key for the order_info relation (M2M).
	OrderInfoPrimaryKey = []string{"order_id", "test_id"}
	// SampleTypesPrimaryKey and SampleTypesColumn2 are the table columns denoting the
	// primary key for the sample_types relation (M2M).
	SampleTypesPrimaryKey = []string{"sample_type_id", "test_id"}
	// TubeTypesPrimaryKey and TubeTypesColumn2 are the table columns denoting the
	// primary key for the tube_types relation (M2M).
	TubeTypesPrimaryKey = []string{"tube_type_id", "test_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedTime holds the default value on creation for the "created_time" field.
	DefaultCreatedTime func() time.Time
	// UpdateDefaultUpdatedTime holds the default value on update for the "updated_time" field.
	UpdateDefaultUpdatedTime func() time.Time
)

// OrderOption defines the ordering options for the Test queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTestName orders the results by the test_name field.
func ByTestName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTestName, opts...).ToFunc()
}

// ByTestCode orders the results by the test_code field.
func ByTestCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTestCode, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByTestDescription orders the results by the test_description field.
func ByTestDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTestDescription, opts...).ToFunc()
}

// ByAssayName orders the results by the assay_name field.
func ByAssayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssayName, opts...).ToFunc()
}

// ByIsActive orders the results by the isActive field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the updated_time field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}

// ByTestDetailsCount orders the results by test_details count.
func ByTestDetailsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTestDetailsStep(), opts...)
	}
}

// ByTestDetails orders the results by test_details terms.
func ByTestDetails(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestDetailsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrderInfoCount orders the results by order_info count.
func ByOrderInfoCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderInfoStep(), opts...)
	}
}

// ByOrderInfo orders the results by order_info terms.
func ByOrderInfo(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderInfoStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySampleTypesCount orders the results by sample_types count.
func BySampleTypesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSampleTypesStep(), opts...)
	}
}

// BySampleTypes orders the results by sample_types terms.
func BySampleTypes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSampleTypesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTubeTypesCount orders the results by tube_types count.
func ByTubeTypesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTubeTypesStep(), opts...)
	}
}

// ByTubeTypes orders the results by tube_types terms.
func ByTubeTypes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTubeTypesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTestDetailsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestDetailsInverseTable, TestDetailFieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, TestDetailsTable, TestDetailsColumn),
	)
}
func newOrderInfoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInfoInverseTable, OrderInfoFieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OrderInfoTable, OrderInfoPrimaryKey...),
	)
}
func newSampleTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SampleTypesInverseTable, SampleTypeFieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SampleTypesTable, SampleTypesPrimaryKey...),
	)
}
func newTubeTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TubeTypesInverseTable, TubeTypeFieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TubeTypesTable, TubeTypesPrimaryKey...),
	)
}
