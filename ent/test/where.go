// Code generated by ent, DO NOT EDIT.

package test

import (
	"coresamples/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Test {
	return predicate.Test(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Test {
	return predicate.Test(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Test {
	return predicate.Test(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Test {
	return predicate.Test(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Test {
	return predicate.Test(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Test {
	return predicate.Test(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Test {
	return predicate.Test(sql.FieldLTE(FieldID, id))
}

// TestName applies equality check predicate on the "test_name" field. It's identical to TestNameEQ.
func TestName(v string) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldTestName, v))
}

// TestCode applies equality check predicate on the "test_code" field. It's identical to TestCodeEQ.
func TestCode(v string) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldTestCode, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldDisplayName, v))
}

// TestDescription applies equality check predicate on the "test_description" field. It's identical to TestDescriptionEQ.
func TestDescription(v string) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldTestDescription, v))
}

// AssayName applies equality check predicate on the "assay_name" field. It's identical to AssayNameEQ.
func AssayName(v string) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldAssayName, v))
}

// IsActive applies equality check predicate on the "isActive" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldIsActive, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldCreatedTime, v))
}

// UpdatedTime applies equality check predicate on the "updated_time" field. It's identical to UpdatedTimeEQ.
func UpdatedTime(v time.Time) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldUpdatedTime, v))
}

// TestNameEQ applies the EQ predicate on the "test_name" field.
func TestNameEQ(v string) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldTestName, v))
}

// TestNameNEQ applies the NEQ predicate on the "test_name" field.
func TestNameNEQ(v string) predicate.Test {
	return predicate.Test(sql.FieldNEQ(FieldTestName, v))
}

// TestNameIn applies the In predicate on the "test_name" field.
func TestNameIn(vs ...string) predicate.Test {
	return predicate.Test(sql.FieldIn(FieldTestName, vs...))
}

// TestNameNotIn applies the NotIn predicate on the "test_name" field.
func TestNameNotIn(vs ...string) predicate.Test {
	return predicate.Test(sql.FieldNotIn(FieldTestName, vs...))
}

// TestNameGT applies the GT predicate on the "test_name" field.
func TestNameGT(v string) predicate.Test {
	return predicate.Test(sql.FieldGT(FieldTestName, v))
}

// TestNameGTE applies the GTE predicate on the "test_name" field.
func TestNameGTE(v string) predicate.Test {
	return predicate.Test(sql.FieldGTE(FieldTestName, v))
}

// TestNameLT applies the LT predicate on the "test_name" field.
func TestNameLT(v string) predicate.Test {
	return predicate.Test(sql.FieldLT(FieldTestName, v))
}

// TestNameLTE applies the LTE predicate on the "test_name" field.
func TestNameLTE(v string) predicate.Test {
	return predicate.Test(sql.FieldLTE(FieldTestName, v))
}

// TestNameContains applies the Contains predicate on the "test_name" field.
func TestNameContains(v string) predicate.Test {
	return predicate.Test(sql.FieldContains(FieldTestName, v))
}

// TestNameHasPrefix applies the HasPrefix predicate on the "test_name" field.
func TestNameHasPrefix(v string) predicate.Test {
	return predicate.Test(sql.FieldHasPrefix(FieldTestName, v))
}

// TestNameHasSuffix applies the HasSuffix predicate on the "test_name" field.
func TestNameHasSuffix(v string) predicate.Test {
	return predicate.Test(sql.FieldHasSuffix(FieldTestName, v))
}

// TestNameEqualFold applies the EqualFold predicate on the "test_name" field.
func TestNameEqualFold(v string) predicate.Test {
	return predicate.Test(sql.FieldEqualFold(FieldTestName, v))
}

// TestNameContainsFold applies the ContainsFold predicate on the "test_name" field.
func TestNameContainsFold(v string) predicate.Test {
	return predicate.Test(sql.FieldContainsFold(FieldTestName, v))
}

// TestCodeEQ applies the EQ predicate on the "test_code" field.
func TestCodeEQ(v string) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldTestCode, v))
}

// TestCodeNEQ applies the NEQ predicate on the "test_code" field.
func TestCodeNEQ(v string) predicate.Test {
	return predicate.Test(sql.FieldNEQ(FieldTestCode, v))
}

// TestCodeIn applies the In predicate on the "test_code" field.
func TestCodeIn(vs ...string) predicate.Test {
	return predicate.Test(sql.FieldIn(FieldTestCode, vs...))
}

// TestCodeNotIn applies the NotIn predicate on the "test_code" field.
func TestCodeNotIn(vs ...string) predicate.Test {
	return predicate.Test(sql.FieldNotIn(FieldTestCode, vs...))
}

// TestCodeGT applies the GT predicate on the "test_code" field.
func TestCodeGT(v string) predicate.Test {
	return predicate.Test(sql.FieldGT(FieldTestCode, v))
}

// TestCodeGTE applies the GTE predicate on the "test_code" field.
func TestCodeGTE(v string) predicate.Test {
	return predicate.Test(sql.FieldGTE(FieldTestCode, v))
}

// TestCodeLT applies the LT predicate on the "test_code" field.
func TestCodeLT(v string) predicate.Test {
	return predicate.Test(sql.FieldLT(FieldTestCode, v))
}

// TestCodeLTE applies the LTE predicate on the "test_code" field.
func TestCodeLTE(v string) predicate.Test {
	return predicate.Test(sql.FieldLTE(FieldTestCode, v))
}

// TestCodeContains applies the Contains predicate on the "test_code" field.
func TestCodeContains(v string) predicate.Test {
	return predicate.Test(sql.FieldContains(FieldTestCode, v))
}

// TestCodeHasPrefix applies the HasPrefix predicate on the "test_code" field.
func TestCodeHasPrefix(v string) predicate.Test {
	return predicate.Test(sql.FieldHasPrefix(FieldTestCode, v))
}

// TestCodeHasSuffix applies the HasSuffix predicate on the "test_code" field.
func TestCodeHasSuffix(v string) predicate.Test {
	return predicate.Test(sql.FieldHasSuffix(FieldTestCode, v))
}

// TestCodeEqualFold applies the EqualFold predicate on the "test_code" field.
func TestCodeEqualFold(v string) predicate.Test {
	return predicate.Test(sql.FieldEqualFold(FieldTestCode, v))
}

// TestCodeContainsFold applies the ContainsFold predicate on the "test_code" field.
func TestCodeContainsFold(v string) predicate.Test {
	return predicate.Test(sql.FieldContainsFold(FieldTestCode, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Test {
	return predicate.Test(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Test {
	return predicate.Test(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Test {
	return predicate.Test(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Test {
	return predicate.Test(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Test {
	return predicate.Test(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Test {
	return predicate.Test(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Test {
	return predicate.Test(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Test {
	return predicate.Test(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Test {
	return predicate.Test(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Test {
	return predicate.Test(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Test {
	return predicate.Test(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Test {
	return predicate.Test(sql.FieldContainsFold(FieldDisplayName, v))
}

// TestDescriptionEQ applies the EQ predicate on the "test_description" field.
func TestDescriptionEQ(v string) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldTestDescription, v))
}

// TestDescriptionNEQ applies the NEQ predicate on the "test_description" field.
func TestDescriptionNEQ(v string) predicate.Test {
	return predicate.Test(sql.FieldNEQ(FieldTestDescription, v))
}

// TestDescriptionIn applies the In predicate on the "test_description" field.
func TestDescriptionIn(vs ...string) predicate.Test {
	return predicate.Test(sql.FieldIn(FieldTestDescription, vs...))
}

// TestDescriptionNotIn applies the NotIn predicate on the "test_description" field.
func TestDescriptionNotIn(vs ...string) predicate.Test {
	return predicate.Test(sql.FieldNotIn(FieldTestDescription, vs...))
}

// TestDescriptionGT applies the GT predicate on the "test_description" field.
func TestDescriptionGT(v string) predicate.Test {
	return predicate.Test(sql.FieldGT(FieldTestDescription, v))
}

// TestDescriptionGTE applies the GTE predicate on the "test_description" field.
func TestDescriptionGTE(v string) predicate.Test {
	return predicate.Test(sql.FieldGTE(FieldTestDescription, v))
}

// TestDescriptionLT applies the LT predicate on the "test_description" field.
func TestDescriptionLT(v string) predicate.Test {
	return predicate.Test(sql.FieldLT(FieldTestDescription, v))
}

// TestDescriptionLTE applies the LTE predicate on the "test_description" field.
func TestDescriptionLTE(v string) predicate.Test {
	return predicate.Test(sql.FieldLTE(FieldTestDescription, v))
}

// TestDescriptionContains applies the Contains predicate on the "test_description" field.
func TestDescriptionContains(v string) predicate.Test {
	return predicate.Test(sql.FieldContains(FieldTestDescription, v))
}

// TestDescriptionHasPrefix applies the HasPrefix predicate on the "test_description" field.
func TestDescriptionHasPrefix(v string) predicate.Test {
	return predicate.Test(sql.FieldHasPrefix(FieldTestDescription, v))
}

// TestDescriptionHasSuffix applies the HasSuffix predicate on the "test_description" field.
func TestDescriptionHasSuffix(v string) predicate.Test {
	return predicate.Test(sql.FieldHasSuffix(FieldTestDescription, v))
}

// TestDescriptionEqualFold applies the EqualFold predicate on the "test_description" field.
func TestDescriptionEqualFold(v string) predicate.Test {
	return predicate.Test(sql.FieldEqualFold(FieldTestDescription, v))
}

// TestDescriptionContainsFold applies the ContainsFold predicate on the "test_description" field.
func TestDescriptionContainsFold(v string) predicate.Test {
	return predicate.Test(sql.FieldContainsFold(FieldTestDescription, v))
}

// AssayNameEQ applies the EQ predicate on the "assay_name" field.
func AssayNameEQ(v string) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldAssayName, v))
}

// AssayNameNEQ applies the NEQ predicate on the "assay_name" field.
func AssayNameNEQ(v string) predicate.Test {
	return predicate.Test(sql.FieldNEQ(FieldAssayName, v))
}

// AssayNameIn applies the In predicate on the "assay_name" field.
func AssayNameIn(vs ...string) predicate.Test {
	return predicate.Test(sql.FieldIn(FieldAssayName, vs...))
}

// AssayNameNotIn applies the NotIn predicate on the "assay_name" field.
func AssayNameNotIn(vs ...string) predicate.Test {
	return predicate.Test(sql.FieldNotIn(FieldAssayName, vs...))
}

// AssayNameGT applies the GT predicate on the "assay_name" field.
func AssayNameGT(v string) predicate.Test {
	return predicate.Test(sql.FieldGT(FieldAssayName, v))
}

// AssayNameGTE applies the GTE predicate on the "assay_name" field.
func AssayNameGTE(v string) predicate.Test {
	return predicate.Test(sql.FieldGTE(FieldAssayName, v))
}

// AssayNameLT applies the LT predicate on the "assay_name" field.
func AssayNameLT(v string) predicate.Test {
	return predicate.Test(sql.FieldLT(FieldAssayName, v))
}

// AssayNameLTE applies the LTE predicate on the "assay_name" field.
func AssayNameLTE(v string) predicate.Test {
	return predicate.Test(sql.FieldLTE(FieldAssayName, v))
}

// AssayNameContains applies the Contains predicate on the "assay_name" field.
func AssayNameContains(v string) predicate.Test {
	return predicate.Test(sql.FieldContains(FieldAssayName, v))
}

// AssayNameHasPrefix applies the HasPrefix predicate on the "assay_name" field.
func AssayNameHasPrefix(v string) predicate.Test {
	return predicate.Test(sql.FieldHasPrefix(FieldAssayName, v))
}

// AssayNameHasSuffix applies the HasSuffix predicate on the "assay_name" field.
func AssayNameHasSuffix(v string) predicate.Test {
	return predicate.Test(sql.FieldHasSuffix(FieldAssayName, v))
}

// AssayNameEqualFold applies the EqualFold predicate on the "assay_name" field.
func AssayNameEqualFold(v string) predicate.Test {
	return predicate.Test(sql.FieldEqualFold(FieldAssayName, v))
}

// AssayNameContainsFold applies the ContainsFold predicate on the "assay_name" field.
func AssayNameContainsFold(v string) predicate.Test {
	return predicate.Test(sql.FieldContainsFold(FieldAssayName, v))
}

// IsActiveEQ applies the EQ predicate on the "isActive" field.
func IsActiveEQ(v bool) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "isActive" field.
func IsActiveNEQ(v bool) predicate.Test {
	return predicate.Test(sql.FieldNEQ(FieldIsActive, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.Test {
	return predicate.Test(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.Test {
	return predicate.Test(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.Test {
	return predicate.Test(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.Test {
	return predicate.Test(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.Test {
	return predicate.Test(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.Test {
	return predicate.Test(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.Test {
	return predicate.Test(sql.FieldLTE(FieldCreatedTime, v))
}

// UpdatedTimeEQ applies the EQ predicate on the "updated_time" field.
func UpdatedTimeEQ(v time.Time) predicate.Test {
	return predicate.Test(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedTimeNEQ applies the NEQ predicate on the "updated_time" field.
func UpdatedTimeNEQ(v time.Time) predicate.Test {
	return predicate.Test(sql.FieldNEQ(FieldUpdatedTime, v))
}

// UpdatedTimeIn applies the In predicate on the "updated_time" field.
func UpdatedTimeIn(vs ...time.Time) predicate.Test {
	return predicate.Test(sql.FieldIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeNotIn applies the NotIn predicate on the "updated_time" field.
func UpdatedTimeNotIn(vs ...time.Time) predicate.Test {
	return predicate.Test(sql.FieldNotIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeGT applies the GT predicate on the "updated_time" field.
func UpdatedTimeGT(v time.Time) predicate.Test {
	return predicate.Test(sql.FieldGT(FieldUpdatedTime, v))
}

// UpdatedTimeGTE applies the GTE predicate on the "updated_time" field.
func UpdatedTimeGTE(v time.Time) predicate.Test {
	return predicate.Test(sql.FieldGTE(FieldUpdatedTime, v))
}

// UpdatedTimeLT applies the LT predicate on the "updated_time" field.
func UpdatedTimeLT(v time.Time) predicate.Test {
	return predicate.Test(sql.FieldLT(FieldUpdatedTime, v))
}

// UpdatedTimeLTE applies the LTE predicate on the "updated_time" field.
func UpdatedTimeLTE(v time.Time) predicate.Test {
	return predicate.Test(sql.FieldLTE(FieldUpdatedTime, v))
}

// UpdatedTimeIsNil applies the IsNil predicate on the "updated_time" field.
func UpdatedTimeIsNil() predicate.Test {
	return predicate.Test(sql.FieldIsNull(FieldUpdatedTime))
}

// UpdatedTimeNotNil applies the NotNil predicate on the "updated_time" field.
func UpdatedTimeNotNil() predicate.Test {
	return predicate.Test(sql.FieldNotNull(FieldUpdatedTime))
}

// HasTestDetails applies the HasEdge predicate on the "test_details" edge.
func HasTestDetails() predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, TestDetailsTable, TestDetailsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestDetailsWith applies the HasEdge predicate on the "test_details" edge with a given conditions (other predicates).
func HasTestDetailsWith(preds ...predicate.TestDetail) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		step := newTestDetailsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderInfo applies the HasEdge predicate on the "order_info" edge.
func HasOrderInfo() predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OrderInfoTable, OrderInfoPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderInfoWith applies the HasEdge predicate on the "order_info" edge with a given conditions (other predicates).
func HasOrderInfoWith(preds ...predicate.OrderInfo) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		step := newOrderInfoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSampleTypes applies the HasEdge predicate on the "sample_types" edge.
func HasSampleTypes() predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SampleTypesTable, SampleTypesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSampleTypesWith applies the HasEdge predicate on the "sample_types" edge with a given conditions (other predicates).
func HasSampleTypesWith(preds ...predicate.SampleType) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		step := newSampleTypesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTubeTypes applies the HasEdge predicate on the "tube_types" edge.
func HasTubeTypes() predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TubeTypesTable, TubeTypesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTubeTypesWith applies the HasEdge predicate on the "tube_types" edge with a given conditions (other predicates).
func HasTubeTypesWith(preds ...predicate.TubeType) predicate.Test {
	return predicate.Test(func(s *sql.Selector) {
		step := newTubeTypesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Test) predicate.Test {
	return predicate.Test(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Test) predicate.Test {
	return predicate.Test(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Test) predicate.Test {
	return predicate.Test(sql.NotPredicates(p))
}
