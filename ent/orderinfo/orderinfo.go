// Code generated by ent, DO NOT EDIT.

package orderinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the orderinfo type in the database.
	Label = "order_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "order_id"
	// FieldOrderTitle holds the string denoting the order_title field in the database.
	FieldOrderTitle = "order_title"
	// FieldOrderType holds the string denoting the order_type field in the database.
	FieldOrderType = "order_type"
	// FieldOrderDescription holds the string denoting the order_description field in the database.
	FieldOrderDescription = "order_description"
	// FieldOrderConfirmationNumber holds the string denoting the order_confirmation_number field in the database.
	FieldOrderConfirmationNumber = "order_confirmation_number"
	// FieldClinicID holds the string denoting the clinic_id field in the database.
	FieldClinicID = "clinic_id"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldOrderCreateTime holds the string denoting the order_create_time field in the database.
	FieldOrderCreateTime = "order_create_time"
	// FieldOrderServiceTime holds the string denoting the order_service_time field in the database.
	FieldOrderServiceTime = "order_service_time"
	// FieldOrderProcessTime holds the string denoting the order_process_time field in the database.
	FieldOrderProcessTime = "order_process_time"
	// FieldOrderRedrawTime holds the string denoting the order_redraw_time field in the database.
	FieldOrderRedrawTime = "order_redraw_time"
	// FieldOrderCancelTime holds the string denoting the order_cancel_time field in the database.
	FieldOrderCancelTime = "order_cancel_time"
	// FieldIsActive holds the string denoting the isactive field in the database.
	FieldIsActive = "isActive"
	// FieldHasOrderSetting holds the string denoting the has_order_setting field in the database.
	FieldHasOrderSetting = "has_order_setting"
	// FieldOrderCanceled holds the string denoting the order_canceled field in the database.
	FieldOrderCanceled = "order_canceled"
	// FieldOrderFlagged holds the string denoting the order_flagged field in the database.
	FieldOrderFlagged = "order_flagged"
	// FieldOrderStatus holds the string denoting the order_status field in the database.
	FieldOrderStatus = "order_status"
	// FieldOrderMajorStatus holds the string denoting the order_major_status field in the database.
	FieldOrderMajorStatus = "order_major_status"
	// FieldOrderKitStatus holds the string denoting the order_kit_status field in the database.
	FieldOrderKitStatus = "order_kit_status"
	// FieldOrderReportStatus holds the string denoting the order_report_status field in the database.
	FieldOrderReportStatus = "order_report_status"
	// FieldOrderTnpIssueStatus holds the string denoting the order_tnp_issue_status field in the database.
	FieldOrderTnpIssueStatus = "order_tnp_issue_status"
	// FieldOrderBillingIssueStatus holds the string denoting the order_billing_issue_status field in the database.
	FieldOrderBillingIssueStatus = "order_billing_issue_status"
	// FieldOrderMissingInfoIssueStatus holds the string denoting the order_missing_info_issue_status field in the database.
	FieldOrderMissingInfoIssueStatus = "order_missing_info_issue_status"
	// FieldOrderIncompleteQuestionnaireIssueStatus holds the string denoting the order_incomplete_questionnaire_issue_status field in the database.
	FieldOrderIncompleteQuestionnaireIssueStatus = "order_incomplete_questionnaire_issue_status"
	// FieldOrderNyWaiveFormIssueStatus holds the string denoting the order_ny_waive_form_issue_status field in the database.
	FieldOrderNyWaiveFormIssueStatus = "order_ny_waive_form_issue_status"
	// FieldOrderLabIssueStatus holds the string denoting the order_lab_issue_status field in the database.
	FieldOrderLabIssueStatus = "order_lab_issue_status"
	// FieldOrderProcessingTime holds the string denoting the order_processing_time field in the database.
	FieldOrderProcessingTime = "order_processing_time"
	// FieldOrderMinorStatus holds the string denoting the order_minor_status field in the database.
	FieldOrderMinorStatus = "order_minor_status"
	// FieldPatientFirstName holds the string denoting the patient_first_name field in the database.
	FieldPatientFirstName = "patient_first_name"
	// FieldPatientLastName holds the string denoting the patient_last_name field in the database.
	FieldPatientLastName = "patient_last_name"
	// FieldOrderSource holds the string denoting the order_source field in the database.
	FieldOrderSource = "order_source"
	// FieldOrderChargeMethod holds the string denoting the order_charge_method field in the database.
	FieldOrderChargeMethod = "order_charge_method"
	// FieldOrderPlacingType holds the string denoting the order_placing_type field in the database.
	FieldOrderPlacingType = "order_placing_type"
	// FieldBillingOrderID holds the string denoting the billing_order_id field in the database.
	FieldBillingOrderID = "billing_order_id"
	// FieldContactID holds the string denoting the contact_id field in the database.
	FieldContactID = "contact_id"
	// FieldAddressID holds the string denoting the address_id field in the database.
	FieldAddressID = "address_id"
	// EdgeTests holds the string denoting the tests edge name in mutations.
	EdgeTests = "tests"
	// EdgeOrderFlags holds the string denoting the order_flags edge name in mutations.
	EdgeOrderFlags = "order_flags"
	// EdgeSample holds the string denoting the sample edge name in mutations.
	EdgeSample = "sample"
	// EdgeContact holds the string denoting the contact edge name in mutations.
	EdgeContact = "contact"
	// EdgeAddress holds the string denoting the address edge name in mutations.
	EdgeAddress = "address"
	// EdgeClinic holds the string denoting the clinic edge name in mutations.
	EdgeClinic = "clinic"
	// EdgeCustomerInfo holds the string denoting the customer_info edge name in mutations.
	EdgeCustomerInfo = "customer_info"
	// TestFieldID holds the string denoting the ID field of the Test.
	TestFieldID = "test_id"
	// OrderFlagFieldID holds the string denoting the ID field of the OrderFlag.
	OrderFlagFieldID = "order_flag_id"
	// SampleFieldID holds the string denoting the ID field of the Sample.
	SampleFieldID = "sample_id"
	// ContactFieldID holds the string denoting the ID field of the Contact.
	ContactFieldID = "contact_id"
	// AddressFieldID holds the string denoting the ID field of the Address.
	AddressFieldID = "address_id"
	// ClinicFieldID holds the string denoting the ID field of the Clinic.
	ClinicFieldID = "clinic_id"
	// CustomerFieldID holds the string denoting the ID field of the Customer.
	CustomerFieldID = "customer_id"
	// Table holds the table name of the orderinfo in the database.
	Table = "order_info"
	// TestsTable is the table that holds the tests relation/edge. The primary key declared below.
	TestsTable = "_order_info_to_test"
	// TestsInverseTable is the table name for the Test entity.
	// It exists in this package in order to avoid circular dependency with the "test" package.
	TestsInverseTable = "test"
	// OrderFlagsTable is the table that holds the order_flags relation/edge. The primary key declared below.
	OrderFlagsTable = "_order_flag_to_order"
	// OrderFlagsInverseTable is the table name for the OrderFlag entity.
	// It exists in this package in order to avoid circular dependency with the "orderflag" package.
	OrderFlagsInverseTable = "order_flag"
	// SampleTable is the table that holds the sample relation/edge.
	SampleTable = "sample"
	// SampleInverseTable is the table name for the Sample entity.
	// It exists in this package in order to avoid circular dependency with the "sample" package.
	SampleInverseTable = "sample"
	// SampleColumn is the table column denoting the sample relation/edge.
	SampleColumn = "order_id"
	// ContactTable is the table that holds the contact relation/edge.
	ContactTable = "order_info"
	// ContactInverseTable is the table name for the Contact entity.
	// It exists in this package in order to avoid circular dependency with the "contact" package.
	ContactInverseTable = "contact"
	// ContactColumn is the table column denoting the contact relation/edge.
	ContactColumn = "contact_id"
	// AddressTable is the table that holds the address relation/edge.
	AddressTable = "order_info"
	// AddressInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	AddressInverseTable = "address"
	// AddressColumn is the table column denoting the address relation/edge.
	AddressColumn = "address_id"
	// ClinicTable is the table that holds the clinic relation/edge.
	ClinicTable = "order_info"
	// ClinicInverseTable is the table name for the Clinic entity.
	// It exists in this package in order to avoid circular dependency with the "clinic" package.
	ClinicInverseTable = "clinic"
	// ClinicColumn is the table column denoting the clinic relation/edge.
	ClinicColumn = "clinic_id"
	// CustomerInfoTable is the table that holds the customer_info relation/edge.
	CustomerInfoTable = "order_info"
	// CustomerInfoInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInfoInverseTable = "customer"
	// CustomerInfoColumn is the table column denoting the customer_info relation/edge.
	CustomerInfoColumn = "customer_id"
)

// Columns holds all SQL columns for orderinfo fields.
var Columns = []string{
	FieldID,
	FieldOrderTitle,
	FieldOrderType,
	FieldOrderDescription,
	FieldOrderConfirmationNumber,
	FieldClinicID,
	FieldCustomerID,
	FieldOrderCreateTime,
	FieldOrderServiceTime,
	FieldOrderProcessTime,
	FieldOrderRedrawTime,
	FieldOrderCancelTime,
	FieldIsActive,
	FieldHasOrderSetting,
	FieldOrderCanceled,
	FieldOrderFlagged,
	FieldOrderStatus,
	FieldOrderMajorStatus,
	FieldOrderKitStatus,
	FieldOrderReportStatus,
	FieldOrderTnpIssueStatus,
	FieldOrderBillingIssueStatus,
	FieldOrderMissingInfoIssueStatus,
	FieldOrderIncompleteQuestionnaireIssueStatus,
	FieldOrderNyWaiveFormIssueStatus,
	FieldOrderLabIssueStatus,
	FieldOrderProcessingTime,
	FieldOrderMinorStatus,
	FieldPatientFirstName,
	FieldPatientLastName,
	FieldOrderSource,
	FieldOrderChargeMethod,
	FieldOrderPlacingType,
	FieldBillingOrderID,
	FieldContactID,
	FieldAddressID,
}

var (
	// TestsPrimaryKey and TestsColumn2 are the table columns denoting the
	// primary key for the tests relation (M2M).
	TestsPrimaryKey = []string{"order_id", "test_id"}
	// OrderFlagsPrimaryKey and OrderFlagsColumn2 are the table columns denoting the
	// primary key for the order_flags relation (M2M).
	OrderFlagsPrimaryKey = []string{"order_flag_id", "order_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultOrderTitle holds the default value on creation for the "order_title" field.
	DefaultOrderTitle string
	// DefaultOrderType holds the default value on creation for the "order_type" field.
	DefaultOrderType string
	// DefaultOrderDescription holds the default value on creation for the "order_description" field.
	DefaultOrderDescription string
	// DefaultOrderCreateTime holds the default value on creation for the "order_create_time" field.
	DefaultOrderCreateTime func() time.Time
	// DefaultOrderServiceTime holds the default value on creation for the "order_service_time" field.
	DefaultOrderServiceTime func() time.Time
	// DefaultOrderProcessTime holds the default value on creation for the "order_process_time" field.
	DefaultOrderProcessTime func() time.Time
	// DefaultOrderRedrawTime holds the default value on creation for the "order_redraw_time" field.
	DefaultOrderRedrawTime func() time.Time
	// DefaultOrderCancelTime holds the default value on creation for the "order_cancel_time" field.
	DefaultOrderCancelTime func() time.Time
	// DefaultIsActive holds the default value on creation for the "isActive" field.
	DefaultIsActive bool
	// DefaultHasOrderSetting holds the default value on creation for the "has_order_setting" field.
	DefaultHasOrderSetting bool
	// DefaultOrderCanceled holds the default value on creation for the "order_canceled" field.
	DefaultOrderCanceled bool
	// DefaultOrderFlagged holds the default value on creation for the "order_flagged" field.
	DefaultOrderFlagged bool
	// DefaultOrderStatus holds the default value on creation for the "order_status" field.
	DefaultOrderStatus string
	// DefaultOrderMajorStatus holds the default value on creation for the "order_major_status" field.
	DefaultOrderMajorStatus string
	// DefaultOrderKitStatus holds the default value on creation for the "order_kit_status" field.
	DefaultOrderKitStatus string
	// DefaultOrderReportStatus holds the default value on creation for the "order_report_status" field.
	DefaultOrderReportStatus string
	// DefaultOrderTnpIssueStatus holds the default value on creation for the "order_tnp_issue_status" field.
	DefaultOrderTnpIssueStatus string
	// DefaultOrderBillingIssueStatus holds the default value on creation for the "order_billing_issue_status" field.
	DefaultOrderBillingIssueStatus string
	// DefaultOrderMissingInfoIssueStatus holds the default value on creation for the "order_missing_info_issue_status" field.
	DefaultOrderMissingInfoIssueStatus string
	// DefaultOrderIncompleteQuestionnaireIssueStatus holds the default value on creation for the "order_incomplete_questionnaire_issue_status" field.
	DefaultOrderIncompleteQuestionnaireIssueStatus string
	// DefaultOrderNyWaiveFormIssueStatus holds the default value on creation for the "order_ny_waive_form_issue_status" field.
	DefaultOrderNyWaiveFormIssueStatus string
	// DefaultOrderLabIssueStatus holds the default value on creation for the "order_lab_issue_status" field.
	DefaultOrderLabIssueStatus string
	// DefaultOrderSource holds the default value on creation for the "order_source" field.
	DefaultOrderSource string
	// DefaultOrderPlacingType holds the default value on creation for the "order_placing_type" field.
	DefaultOrderPlacingType string
)

// OrderOption defines the ordering options for the OrderInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrderTitle orders the results by the order_title field.
func ByOrderTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderTitle, opts...).ToFunc()
}

// ByOrderType orders the results by the order_type field.
func ByOrderType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderType, opts...).ToFunc()
}

// ByOrderDescription orders the results by the order_description field.
func ByOrderDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderDescription, opts...).ToFunc()
}

// ByOrderConfirmationNumber orders the results by the order_confirmation_number field.
func ByOrderConfirmationNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderConfirmationNumber, opts...).ToFunc()
}

// ByClinicID orders the results by the clinic_id field.
func ByClinicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClinicID, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByOrderCreateTime orders the results by the order_create_time field.
func ByOrderCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderCreateTime, opts...).ToFunc()
}

// ByOrderServiceTime orders the results by the order_service_time field.
func ByOrderServiceTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderServiceTime, opts...).ToFunc()
}

// ByOrderProcessTime orders the results by the order_process_time field.
func ByOrderProcessTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderProcessTime, opts...).ToFunc()
}

// ByOrderRedrawTime orders the results by the order_redraw_time field.
func ByOrderRedrawTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderRedrawTime, opts...).ToFunc()
}

// ByOrderCancelTime orders the results by the order_cancel_time field.
func ByOrderCancelTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderCancelTime, opts...).ToFunc()
}

// ByIsActive orders the results by the isActive field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByHasOrderSetting orders the results by the has_order_setting field.
func ByHasOrderSetting(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasOrderSetting, opts...).ToFunc()
}

// ByOrderCanceled orders the results by the order_canceled field.
func ByOrderCanceled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderCanceled, opts...).ToFunc()
}

// ByOrderFlagged orders the results by the order_flagged field.
func ByOrderFlagged(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderFlagged, opts...).ToFunc()
}

// ByOrderStatus orders the results by the order_status field.
func ByOrderStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderStatus, opts...).ToFunc()
}

// ByOrderMajorStatus orders the results by the order_major_status field.
func ByOrderMajorStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderMajorStatus, opts...).ToFunc()
}

// ByOrderKitStatus orders the results by the order_kit_status field.
func ByOrderKitStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderKitStatus, opts...).ToFunc()
}

// ByOrderReportStatus orders the results by the order_report_status field.
func ByOrderReportStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderReportStatus, opts...).ToFunc()
}

// ByOrderTnpIssueStatus orders the results by the order_tnp_issue_status field.
func ByOrderTnpIssueStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderTnpIssueStatus, opts...).ToFunc()
}

// ByOrderBillingIssueStatus orders the results by the order_billing_issue_status field.
func ByOrderBillingIssueStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderBillingIssueStatus, opts...).ToFunc()
}

// ByOrderMissingInfoIssueStatus orders the results by the order_missing_info_issue_status field.
func ByOrderMissingInfoIssueStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderMissingInfoIssueStatus, opts...).ToFunc()
}

// ByOrderIncompleteQuestionnaireIssueStatus orders the results by the order_incomplete_questionnaire_issue_status field.
func ByOrderIncompleteQuestionnaireIssueStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderIncompleteQuestionnaireIssueStatus, opts...).ToFunc()
}

// ByOrderNyWaiveFormIssueStatus orders the results by the order_ny_waive_form_issue_status field.
func ByOrderNyWaiveFormIssueStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNyWaiveFormIssueStatus, opts...).ToFunc()
}

// ByOrderLabIssueStatus orders the results by the order_lab_issue_status field.
func ByOrderLabIssueStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderLabIssueStatus, opts...).ToFunc()
}

// ByOrderProcessingTime orders the results by the order_processing_time field.
func ByOrderProcessingTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderProcessingTime, opts...).ToFunc()
}

// ByOrderMinorStatus orders the results by the order_minor_status field.
func ByOrderMinorStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderMinorStatus, opts...).ToFunc()
}

// ByPatientFirstName orders the results by the patient_first_name field.
func ByPatientFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientFirstName, opts...).ToFunc()
}

// ByPatientLastName orders the results by the patient_last_name field.
func ByPatientLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientLastName, opts...).ToFunc()
}

// ByOrderSource orders the results by the order_source field.
func ByOrderSource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderSource, opts...).ToFunc()
}

// ByOrderChargeMethod orders the results by the order_charge_method field.
func ByOrderChargeMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderChargeMethod, opts...).ToFunc()
}

// ByOrderPlacingType orders the results by the order_placing_type field.
func ByOrderPlacingType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderPlacingType, opts...).ToFunc()
}

// ByBillingOrderID orders the results by the billing_order_id field.
func ByBillingOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingOrderID, opts...).ToFunc()
}

// ByContactID orders the results by the contact_id field.
func ByContactID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactID, opts...).ToFunc()
}

// ByAddressID orders the results by the address_id field.
func ByAddressID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddressID, opts...).ToFunc()
}

// ByTestsCount orders the results by tests count.
func ByTestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTestsStep(), opts...)
	}
}

// ByTests orders the results by tests terms.
func ByTests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrderFlagsCount orders the results by order_flags count.
func ByOrderFlagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderFlagsStep(), opts...)
	}
}

// ByOrderFlags orders the results by order_flags terms.
func ByOrderFlags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderFlagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySampleField orders the results by sample field.
func BySampleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSampleStep(), sql.OrderByField(field, opts...))
	}
}

// ByContactField orders the results by contact field.
func ByContactField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContactStep(), sql.OrderByField(field, opts...))
	}
}

// ByAddressField orders the results by address field.
func ByAddressField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddressStep(), sql.OrderByField(field, opts...))
	}
}

// ByClinicField orders the results by clinic field.
func ByClinicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomerInfoField orders the results by customer_info field.
func ByCustomerInfoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerInfoStep(), sql.OrderByField(field, opts...))
	}
}
func newTestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestsInverseTable, TestFieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TestsTable, TestsPrimaryKey...),
	)
}
func newOrderFlagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderFlagsInverseTable, OrderFlagFieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OrderFlagsTable, OrderFlagsPrimaryKey...),
	)
}
func newSampleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SampleInverseTable, SampleFieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SampleTable, SampleColumn),
	)
}
func newContactStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContactInverseTable, ContactFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ContactTable, ContactColumn),
	)
}
func newAddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddressInverseTable, AddressFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AddressTable, AddressColumn),
	)
}
func newClinicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicInverseTable, ClinicFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
	)
}
func newCustomerInfoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInfoInverseTable, CustomerFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerInfoTable, CustomerInfoColumn),
	)
}
