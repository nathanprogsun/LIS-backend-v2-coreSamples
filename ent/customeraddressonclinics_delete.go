// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/customeraddressonclinics"
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerAddressOnClinicsDelete is the builder for deleting a CustomerAddressOnClinics entity.
type CustomerAddressOnClinicsDelete struct {
	config
	hooks    []Hook
	mutation *CustomerAddressOnClinicsMutation
}

// Where appends a list predicates to the CustomerAddressOnClinicsDelete builder.
func (caocd *CustomerAddressOnClinicsDelete) Where(ps ...predicate.CustomerAddressOnClinics) *CustomerAddressOnClinicsDelete {
	caocd.mutation.Where(ps...)
	return caocd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (caocd *CustomerAddressOnClinicsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, caocd.sqlExec, caocd.mutation, caocd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (caocd *CustomerAddressOnClinicsDelete) ExecX(ctx context.Context) int {
	n, err := caocd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (caocd *CustomerAddressOnClinicsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(customeraddressonclinics.Table, sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt))
	if ps := caocd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, caocd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	caocd.mutation.done = true
	return affected, err
}

// CustomerAddressOnClinicsDeleteOne is the builder for deleting a single CustomerAddressOnClinics entity.
type CustomerAddressOnClinicsDeleteOne struct {
	caocd *CustomerAddressOnClinicsDelete
}

// Where appends a list predicates to the CustomerAddressOnClinicsDelete builder.
func (caocdo *CustomerAddressOnClinicsDeleteOne) Where(ps ...predicate.CustomerAddressOnClinics) *CustomerAddressOnClinicsDeleteOne {
	caocdo.caocd.mutation.Where(ps...)
	return caocdo
}

// Exec executes the deletion query.
func (caocdo *CustomerAddressOnClinicsDeleteOne) Exec(ctx context.Context) error {
	n, err := caocdo.caocd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{customeraddressonclinics.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (caocdo *CustomerAddressOnClinicsDeleteOne) ExecX(ctx context.Context) {
	if err := caocdo.Exec(ctx); err != nil {
		panic(err)
	}
}
