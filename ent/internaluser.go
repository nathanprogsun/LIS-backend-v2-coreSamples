// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/internaluser"
	"coresamples/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// InternalUser is the model entity for the InternalUser schema.
type InternalUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"internal_user_id"`
	// InternalUserRole holds the value of the "internal_user_role" field.
	InternalUserRole string `json:"internal_user_role,omitempty"`
	// InternalUserName holds the value of the "internal_user_name" field.
	InternalUserName string `json:"internal_user_name,omitempty"`
	// InternalUserFirstname holds the value of the "internal_user_firstname" field.
	InternalUserFirstname string `json:"internal_user_firstname,omitempty"`
	// InternalUserLastname holds the value of the "internal_user_lastname" field.
	InternalUserLastname string `json:"internal_user_lastname,omitempty"`
	// InternalUserMiddleName holds the value of the "internal_user_middle_name" field.
	InternalUserMiddleName string `json:"internal_user_middle_name,omitempty"`
	// InternalUserIsFullTime holds the value of the "internal_user_is_full_time" field.
	InternalUserIsFullTime bool `json:"internal_user_is_full_time,omitempty"`
	// InternalUserEmail holds the value of the "internal_user_email" field.
	InternalUserEmail string `json:"internal_user_email,omitempty"`
	// InternalUserPhone holds the value of the "internal_user_phone" field.
	InternalUserPhone string `json:"internal_user_phone,omitempty"`
	// IsActive holds the value of the "isActive" field.
	IsActive bool `json:"isActive"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// InternalUserType holds the value of the "internal_user_type" field.
	InternalUserType string `json:"internal_user_type,omitempty"`
	// InternalUserRoleID holds the value of the "internal_user_role_id" field.
	InternalUserRoleID int `json:"internal_user_role_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InternalUserQuery when eager-loading is set.
	Edges        InternalUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InternalUserEdges holds the relations/edges for other nodes in the graph.
type InternalUserEdges struct {
	// SalesTeam holds the value of the sales_team edge.
	SalesTeam []*SalesTeam `json:"sales_team,omitempty"`
	// InternalUserContacts holds the value of the internal_user_contacts edge.
	InternalUserContacts []*Contact `json:"internal_user_contacts,omitempty"`
	// InternalUserAddresses holds the value of the internal_user_addresses edge.
	InternalUserAddresses []*Address `json:"internal_user_addresses,omitempty"`
	// Customers holds the value of the customers edge.
	Customers []*Customer `json:"customers,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// InternalUserSettings holds the value of the internal_user_settings edge.
	InternalUserSettings []*Setting `json:"internal_user_settings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// SalesTeamOrErr returns the SalesTeam value or an error if the edge
// was not loaded in eager-loading.
func (e InternalUserEdges) SalesTeamOrErr() ([]*SalesTeam, error) {
	if e.loadedTypes[0] {
		return e.SalesTeam, nil
	}
	return nil, &NotLoadedError{edge: "sales_team"}
}

// InternalUserContactsOrErr returns the InternalUserContacts value or an error if the edge
// was not loaded in eager-loading.
func (e InternalUserEdges) InternalUserContactsOrErr() ([]*Contact, error) {
	if e.loadedTypes[1] {
		return e.InternalUserContacts, nil
	}
	return nil, &NotLoadedError{edge: "internal_user_contacts"}
}

// InternalUserAddressesOrErr returns the InternalUserAddresses value or an error if the edge
// was not loaded in eager-loading.
func (e InternalUserEdges) InternalUserAddressesOrErr() ([]*Address, error) {
	if e.loadedTypes[2] {
		return e.InternalUserAddresses, nil
	}
	return nil, &NotLoadedError{edge: "internal_user_addresses"}
}

// CustomersOrErr returns the Customers value or an error if the edge
// was not loaded in eager-loading.
func (e InternalUserEdges) CustomersOrErr() ([]*Customer, error) {
	if e.loadedTypes[3] {
		return e.Customers, nil
	}
	return nil, &NotLoadedError{edge: "customers"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InternalUserEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[4] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// InternalUserSettingsOrErr returns the InternalUserSettings value or an error if the edge
// was not loaded in eager-loading.
func (e InternalUserEdges) InternalUserSettingsOrErr() ([]*Setting, error) {
	if e.loadedTypes[5] {
		return e.InternalUserSettings, nil
	}
	return nil, &NotLoadedError{edge: "internal_user_settings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InternalUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case internaluser.FieldInternalUserIsFullTime, internaluser.FieldIsActive:
			values[i] = new(sql.NullBool)
		case internaluser.FieldID, internaluser.FieldUserID, internaluser.FieldInternalUserRoleID:
			values[i] = new(sql.NullInt64)
		case internaluser.FieldInternalUserRole, internaluser.FieldInternalUserName, internaluser.FieldInternalUserFirstname, internaluser.FieldInternalUserLastname, internaluser.FieldInternalUserMiddleName, internaluser.FieldInternalUserEmail, internaluser.FieldInternalUserPhone, internaluser.FieldInternalUserType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InternalUser fields.
func (iu *InternalUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case internaluser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			iu.ID = int(value.Int64)
		case internaluser.FieldInternalUserRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_user_role", values[i])
			} else if value.Valid {
				iu.InternalUserRole = value.String
			}
		case internaluser.FieldInternalUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_user_name", values[i])
			} else if value.Valid {
				iu.InternalUserName = value.String
			}
		case internaluser.FieldInternalUserFirstname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_user_firstname", values[i])
			} else if value.Valid {
				iu.InternalUserFirstname = value.String
			}
		case internaluser.FieldInternalUserLastname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_user_lastname", values[i])
			} else if value.Valid {
				iu.InternalUserLastname = value.String
			}
		case internaluser.FieldInternalUserMiddleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_user_middle_name", values[i])
			} else if value.Valid {
				iu.InternalUserMiddleName = value.String
			}
		case internaluser.FieldInternalUserIsFullTime:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field internal_user_is_full_time", values[i])
			} else if value.Valid {
				iu.InternalUserIsFullTime = value.Bool
			}
		case internaluser.FieldInternalUserEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_user_email", values[i])
			} else if value.Valid {
				iu.InternalUserEmail = value.String
			}
		case internaluser.FieldInternalUserPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_user_phone", values[i])
			} else if value.Valid {
				iu.InternalUserPhone = value.String
			}
		case internaluser.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isActive", values[i])
			} else if value.Valid {
				iu.IsActive = value.Bool
			}
		case internaluser.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				iu.UserID = int(value.Int64)
			}
		case internaluser.FieldInternalUserType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_user_type", values[i])
			} else if value.Valid {
				iu.InternalUserType = value.String
			}
		case internaluser.FieldInternalUserRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field internal_user_role_id", values[i])
			} else if value.Valid {
				iu.InternalUserRoleID = int(value.Int64)
			}
		default:
			iu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InternalUser.
// This includes values selected through modifiers, order, etc.
func (iu *InternalUser) Value(name string) (ent.Value, error) {
	return iu.selectValues.Get(name)
}

// QuerySalesTeam queries the "sales_team" edge of the InternalUser entity.
func (iu *InternalUser) QuerySalesTeam() *SalesTeamQuery {
	return NewInternalUserClient(iu.config).QuerySalesTeam(iu)
}

// QueryInternalUserContacts queries the "internal_user_contacts" edge of the InternalUser entity.
func (iu *InternalUser) QueryInternalUserContacts() *ContactQuery {
	return NewInternalUserClient(iu.config).QueryInternalUserContacts(iu)
}

// QueryInternalUserAddresses queries the "internal_user_addresses" edge of the InternalUser entity.
func (iu *InternalUser) QueryInternalUserAddresses() *AddressQuery {
	return NewInternalUserClient(iu.config).QueryInternalUserAddresses(iu)
}

// QueryCustomers queries the "customers" edge of the InternalUser entity.
func (iu *InternalUser) QueryCustomers() *CustomerQuery {
	return NewInternalUserClient(iu.config).QueryCustomers(iu)
}

// QueryUser queries the "user" edge of the InternalUser entity.
func (iu *InternalUser) QueryUser() *UserQuery {
	return NewInternalUserClient(iu.config).QueryUser(iu)
}

// QueryInternalUserSettings queries the "internal_user_settings" edge of the InternalUser entity.
func (iu *InternalUser) QueryInternalUserSettings() *SettingQuery {
	return NewInternalUserClient(iu.config).QueryInternalUserSettings(iu)
}

// Update returns a builder for updating this InternalUser.
// Note that you need to call InternalUser.Unwrap() before calling this method if this InternalUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (iu *InternalUser) Update() *InternalUserUpdateOne {
	return NewInternalUserClient(iu.config).UpdateOne(iu)
}

// Unwrap unwraps the InternalUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (iu *InternalUser) Unwrap() *InternalUser {
	_tx, ok := iu.config.driver.(*txDriver)
	if !ok {
		panic("ent: InternalUser is not a transactional entity")
	}
	iu.config.driver = _tx.drv
	return iu
}

// String implements the fmt.Stringer.
func (iu *InternalUser) String() string {
	var builder strings.Builder
	builder.WriteString("InternalUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", iu.ID))
	builder.WriteString("internal_user_role=")
	builder.WriteString(iu.InternalUserRole)
	builder.WriteString(", ")
	builder.WriteString("internal_user_name=")
	builder.WriteString(iu.InternalUserName)
	builder.WriteString(", ")
	builder.WriteString("internal_user_firstname=")
	builder.WriteString(iu.InternalUserFirstname)
	builder.WriteString(", ")
	builder.WriteString("internal_user_lastname=")
	builder.WriteString(iu.InternalUserLastname)
	builder.WriteString(", ")
	builder.WriteString("internal_user_middle_name=")
	builder.WriteString(iu.InternalUserMiddleName)
	builder.WriteString(", ")
	builder.WriteString("internal_user_is_full_time=")
	builder.WriteString(fmt.Sprintf("%v", iu.InternalUserIsFullTime))
	builder.WriteString(", ")
	builder.WriteString("internal_user_email=")
	builder.WriteString(iu.InternalUserEmail)
	builder.WriteString(", ")
	builder.WriteString("internal_user_phone=")
	builder.WriteString(iu.InternalUserPhone)
	builder.WriteString(", ")
	builder.WriteString("isActive=")
	builder.WriteString(fmt.Sprintf("%v", iu.IsActive))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", iu.UserID))
	builder.WriteString(", ")
	builder.WriteString("internal_user_type=")
	builder.WriteString(iu.InternalUserType)
	builder.WriteString(", ")
	builder.WriteString("internal_user_role_id=")
	builder.WriteString(fmt.Sprintf("%v", iu.InternalUserRoleID))
	builder.WriteByte(')')
	return builder.String()
}

// InternalUsers is a parsable slice of InternalUser.
type InternalUsers []*InternalUser
