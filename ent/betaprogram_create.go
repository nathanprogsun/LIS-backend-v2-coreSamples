// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/betaprogram"
	"coresamples/ent/betaprogramparticipation"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BetaProgramCreate is the builder for creating a BetaProgram entity.
type BetaProgramCreate struct {
	config
	mutation *BetaProgramMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetBetaProgramName sets the "beta_program_name" field.
func (bpc *BetaProgramCreate) SetBetaProgramName(s string) *BetaProgramCreate {
	bpc.mutation.SetBetaProgramName(s)
	return bpc
}

// SetBetaProgramDescription sets the "beta_program_description" field.
func (bpc *BetaProgramCreate) SetBetaProgramDescription(s string) *BetaProgramCreate {
	bpc.mutation.SetBetaProgramDescription(s)
	return bpc
}

// SetIsActive sets the "is_active" field.
func (bpc *BetaProgramCreate) SetIsActive(b bool) *BetaProgramCreate {
	bpc.mutation.SetIsActive(b)
	return bpc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (bpc *BetaProgramCreate) SetNillableIsActive(b *bool) *BetaProgramCreate {
	if b != nil {
		bpc.SetIsActive(*b)
	}
	return bpc
}

// SetBetaProgramStartTime sets the "beta_program_start_time" field.
func (bpc *BetaProgramCreate) SetBetaProgramStartTime(t time.Time) *BetaProgramCreate {
	bpc.mutation.SetBetaProgramStartTime(t)
	return bpc
}

// SetNillableBetaProgramStartTime sets the "beta_program_start_time" field if the given value is not nil.
func (bpc *BetaProgramCreate) SetNillableBetaProgramStartTime(t *time.Time) *BetaProgramCreate {
	if t != nil {
		bpc.SetBetaProgramStartTime(*t)
	}
	return bpc
}

// SetBetaProgramEndTime sets the "beta_program_end_time" field.
func (bpc *BetaProgramCreate) SetBetaProgramEndTime(t time.Time) *BetaProgramCreate {
	bpc.mutation.SetBetaProgramEndTime(t)
	return bpc
}

// SetNillableBetaProgramEndTime sets the "beta_program_end_time" field if the given value is not nil.
func (bpc *BetaProgramCreate) SetNillableBetaProgramEndTime(t *time.Time) *BetaProgramCreate {
	if t != nil {
		bpc.SetBetaProgramEndTime(*t)
	}
	return bpc
}

// SetUpdatedTime sets the "updated_time" field.
func (bpc *BetaProgramCreate) SetUpdatedTime(t time.Time) *BetaProgramCreate {
	bpc.mutation.SetUpdatedTime(t)
	return bpc
}

// SetBetaProgramAddedOn sets the "beta_program_added_on" field.
func (bpc *BetaProgramCreate) SetBetaProgramAddedOn(t time.Time) *BetaProgramCreate {
	bpc.mutation.SetBetaProgramAddedOn(t)
	return bpc
}

// SetNillableBetaProgramAddedOn sets the "beta_program_added_on" field if the given value is not nil.
func (bpc *BetaProgramCreate) SetNillableBetaProgramAddedOn(t *time.Time) *BetaProgramCreate {
	if t != nil {
		bpc.SetBetaProgramAddedOn(*t)
	}
	return bpc
}

// SetAllowSelfSignup sets the "allow_self_signup" field.
func (bpc *BetaProgramCreate) SetAllowSelfSignup(b bool) *BetaProgramCreate {
	bpc.mutation.SetAllowSelfSignup(b)
	return bpc
}

// SetNillableAllowSelfSignup sets the "allow_self_signup" field if the given value is not nil.
func (bpc *BetaProgramCreate) SetNillableAllowSelfSignup(b *bool) *BetaProgramCreate {
	if b != nil {
		bpc.SetAllowSelfSignup(*b)
	}
	return bpc
}

// SetID sets the "id" field.
func (bpc *BetaProgramCreate) SetID(i int) *BetaProgramCreate {
	bpc.mutation.SetID(i)
	return bpc
}

// AddParticipationIDs adds the "participations" edge to the BetaProgramParticipation entity by IDs.
func (bpc *BetaProgramCreate) AddParticipationIDs(ids ...int) *BetaProgramCreate {
	bpc.mutation.AddParticipationIDs(ids...)
	return bpc
}

// AddParticipations adds the "participations" edges to the BetaProgramParticipation entity.
func (bpc *BetaProgramCreate) AddParticipations(b ...*BetaProgramParticipation) *BetaProgramCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpc.AddParticipationIDs(ids...)
}

// Mutation returns the BetaProgramMutation object of the builder.
func (bpc *BetaProgramCreate) Mutation() *BetaProgramMutation {
	return bpc.mutation
}

// Save creates the BetaProgram in the database.
func (bpc *BetaProgramCreate) Save(ctx context.Context) (*BetaProgram, error) {
	bpc.defaults()
	return withHooks(ctx, bpc.sqlSave, bpc.mutation, bpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bpc *BetaProgramCreate) SaveX(ctx context.Context) *BetaProgram {
	v, err := bpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bpc *BetaProgramCreate) Exec(ctx context.Context) error {
	_, err := bpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpc *BetaProgramCreate) ExecX(ctx context.Context) {
	if err := bpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpc *BetaProgramCreate) defaults() {
	if _, ok := bpc.mutation.IsActive(); !ok {
		v := betaprogram.DefaultIsActive
		bpc.mutation.SetIsActive(v)
	}
	if _, ok := bpc.mutation.BetaProgramStartTime(); !ok {
		v := betaprogram.DefaultBetaProgramStartTime()
		bpc.mutation.SetBetaProgramStartTime(v)
	}
	if _, ok := bpc.mutation.BetaProgramAddedOn(); !ok {
		v := betaprogram.DefaultBetaProgramAddedOn()
		bpc.mutation.SetBetaProgramAddedOn(v)
	}
	if _, ok := bpc.mutation.AllowSelfSignup(); !ok {
		v := betaprogram.DefaultAllowSelfSignup
		bpc.mutation.SetAllowSelfSignup(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bpc *BetaProgramCreate) check() error {
	if _, ok := bpc.mutation.BetaProgramName(); !ok {
		return &ValidationError{Name: "beta_program_name", err: errors.New(`ent: missing required field "BetaProgram.beta_program_name"`)}
	}
	if _, ok := bpc.mutation.BetaProgramDescription(); !ok {
		return &ValidationError{Name: "beta_program_description", err: errors.New(`ent: missing required field "BetaProgram.beta_program_description"`)}
	}
	if _, ok := bpc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "BetaProgram.is_active"`)}
	}
	if _, ok := bpc.mutation.BetaProgramStartTime(); !ok {
		return &ValidationError{Name: "beta_program_start_time", err: errors.New(`ent: missing required field "BetaProgram.beta_program_start_time"`)}
	}
	if _, ok := bpc.mutation.UpdatedTime(); !ok {
		return &ValidationError{Name: "updated_time", err: errors.New(`ent: missing required field "BetaProgram.updated_time"`)}
	}
	return nil
}

func (bpc *BetaProgramCreate) sqlSave(ctx context.Context) (*BetaProgram, error) {
	if err := bpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	bpc.mutation.id = &_node.ID
	bpc.mutation.done = true
	return _node, nil
}

func (bpc *BetaProgramCreate) createSpec() (*BetaProgram, *sqlgraph.CreateSpec) {
	var (
		_node = &BetaProgram{config: bpc.config}
		_spec = sqlgraph.NewCreateSpec(betaprogram.Table, sqlgraph.NewFieldSpec(betaprogram.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bpc.conflict
	if id, ok := bpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bpc.mutation.BetaProgramName(); ok {
		_spec.SetField(betaprogram.FieldBetaProgramName, field.TypeString, value)
		_node.BetaProgramName = value
	}
	if value, ok := bpc.mutation.BetaProgramDescription(); ok {
		_spec.SetField(betaprogram.FieldBetaProgramDescription, field.TypeString, value)
		_node.BetaProgramDescription = value
	}
	if value, ok := bpc.mutation.IsActive(); ok {
		_spec.SetField(betaprogram.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := bpc.mutation.BetaProgramStartTime(); ok {
		_spec.SetField(betaprogram.FieldBetaProgramStartTime, field.TypeTime, value)
		_node.BetaProgramStartTime = value
	}
	if value, ok := bpc.mutation.BetaProgramEndTime(); ok {
		_spec.SetField(betaprogram.FieldBetaProgramEndTime, field.TypeTime, value)
		_node.BetaProgramEndTime = &value
	}
	if value, ok := bpc.mutation.UpdatedTime(); ok {
		_spec.SetField(betaprogram.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = value
	}
	if value, ok := bpc.mutation.BetaProgramAddedOn(); ok {
		_spec.SetField(betaprogram.FieldBetaProgramAddedOn, field.TypeTime, value)
		_node.BetaProgramAddedOn = &value
	}
	if value, ok := bpc.mutation.AllowSelfSignup(); ok {
		_spec.SetField(betaprogram.FieldAllowSelfSignup, field.TypeBool, value)
		_node.AllowSelfSignup = &value
	}
	if nodes := bpc.mutation.ParticipationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   betaprogram.ParticipationsTable,
			Columns: []string{betaprogram.ParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BetaProgram.Create().
//		SetBetaProgramName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BetaProgramUpsert) {
//			SetBetaProgramName(v+v).
//		}).
//		Exec(ctx)
func (bpc *BetaProgramCreate) OnConflict(opts ...sql.ConflictOption) *BetaProgramUpsertOne {
	bpc.conflict = opts
	return &BetaProgramUpsertOne{
		create: bpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BetaProgram.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bpc *BetaProgramCreate) OnConflictColumns(columns ...string) *BetaProgramUpsertOne {
	bpc.conflict = append(bpc.conflict, sql.ConflictColumns(columns...))
	return &BetaProgramUpsertOne{
		create: bpc,
	}
}

type (
	// BetaProgramUpsertOne is the builder for "upsert"-ing
	//  one BetaProgram node.
	BetaProgramUpsertOne struct {
		create *BetaProgramCreate
	}

	// BetaProgramUpsert is the "OnConflict" setter.
	BetaProgramUpsert struct {
		*sql.UpdateSet
	}
)

// SetBetaProgramName sets the "beta_program_name" field.
func (u *BetaProgramUpsert) SetBetaProgramName(v string) *BetaProgramUpsert {
	u.Set(betaprogram.FieldBetaProgramName, v)
	return u
}

// UpdateBetaProgramName sets the "beta_program_name" field to the value that was provided on create.
func (u *BetaProgramUpsert) UpdateBetaProgramName() *BetaProgramUpsert {
	u.SetExcluded(betaprogram.FieldBetaProgramName)
	return u
}

// SetBetaProgramDescription sets the "beta_program_description" field.
func (u *BetaProgramUpsert) SetBetaProgramDescription(v string) *BetaProgramUpsert {
	u.Set(betaprogram.FieldBetaProgramDescription, v)
	return u
}

// UpdateBetaProgramDescription sets the "beta_program_description" field to the value that was provided on create.
func (u *BetaProgramUpsert) UpdateBetaProgramDescription() *BetaProgramUpsert {
	u.SetExcluded(betaprogram.FieldBetaProgramDescription)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *BetaProgramUpsert) SetIsActive(v bool) *BetaProgramUpsert {
	u.Set(betaprogram.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *BetaProgramUpsert) UpdateIsActive() *BetaProgramUpsert {
	u.SetExcluded(betaprogram.FieldIsActive)
	return u
}

// SetBetaProgramStartTime sets the "beta_program_start_time" field.
func (u *BetaProgramUpsert) SetBetaProgramStartTime(v time.Time) *BetaProgramUpsert {
	u.Set(betaprogram.FieldBetaProgramStartTime, v)
	return u
}

// UpdateBetaProgramStartTime sets the "beta_program_start_time" field to the value that was provided on create.
func (u *BetaProgramUpsert) UpdateBetaProgramStartTime() *BetaProgramUpsert {
	u.SetExcluded(betaprogram.FieldBetaProgramStartTime)
	return u
}

// SetBetaProgramEndTime sets the "beta_program_end_time" field.
func (u *BetaProgramUpsert) SetBetaProgramEndTime(v time.Time) *BetaProgramUpsert {
	u.Set(betaprogram.FieldBetaProgramEndTime, v)
	return u
}

// UpdateBetaProgramEndTime sets the "beta_program_end_time" field to the value that was provided on create.
func (u *BetaProgramUpsert) UpdateBetaProgramEndTime() *BetaProgramUpsert {
	u.SetExcluded(betaprogram.FieldBetaProgramEndTime)
	return u
}

// ClearBetaProgramEndTime clears the value of the "beta_program_end_time" field.
func (u *BetaProgramUpsert) ClearBetaProgramEndTime() *BetaProgramUpsert {
	u.SetNull(betaprogram.FieldBetaProgramEndTime)
	return u
}

// SetUpdatedTime sets the "updated_time" field.
func (u *BetaProgramUpsert) SetUpdatedTime(v time.Time) *BetaProgramUpsert {
	u.Set(betaprogram.FieldUpdatedTime, v)
	return u
}

// UpdateUpdatedTime sets the "updated_time" field to the value that was provided on create.
func (u *BetaProgramUpsert) UpdateUpdatedTime() *BetaProgramUpsert {
	u.SetExcluded(betaprogram.FieldUpdatedTime)
	return u
}

// SetBetaProgramAddedOn sets the "beta_program_added_on" field.
func (u *BetaProgramUpsert) SetBetaProgramAddedOn(v time.Time) *BetaProgramUpsert {
	u.Set(betaprogram.FieldBetaProgramAddedOn, v)
	return u
}

// UpdateBetaProgramAddedOn sets the "beta_program_added_on" field to the value that was provided on create.
func (u *BetaProgramUpsert) UpdateBetaProgramAddedOn() *BetaProgramUpsert {
	u.SetExcluded(betaprogram.FieldBetaProgramAddedOn)
	return u
}

// ClearBetaProgramAddedOn clears the value of the "beta_program_added_on" field.
func (u *BetaProgramUpsert) ClearBetaProgramAddedOn() *BetaProgramUpsert {
	u.SetNull(betaprogram.FieldBetaProgramAddedOn)
	return u
}

// SetAllowSelfSignup sets the "allow_self_signup" field.
func (u *BetaProgramUpsert) SetAllowSelfSignup(v bool) *BetaProgramUpsert {
	u.Set(betaprogram.FieldAllowSelfSignup, v)
	return u
}

// UpdateAllowSelfSignup sets the "allow_self_signup" field to the value that was provided on create.
func (u *BetaProgramUpsert) UpdateAllowSelfSignup() *BetaProgramUpsert {
	u.SetExcluded(betaprogram.FieldAllowSelfSignup)
	return u
}

// ClearAllowSelfSignup clears the value of the "allow_self_signup" field.
func (u *BetaProgramUpsert) ClearAllowSelfSignup() *BetaProgramUpsert {
	u.SetNull(betaprogram.FieldAllowSelfSignup)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BetaProgram.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(betaprogram.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BetaProgramUpsertOne) UpdateNewValues() *BetaProgramUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(betaprogram.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BetaProgram.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BetaProgramUpsertOne) Ignore() *BetaProgramUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BetaProgramUpsertOne) DoNothing() *BetaProgramUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BetaProgramCreate.OnConflict
// documentation for more info.
func (u *BetaProgramUpsertOne) Update(set func(*BetaProgramUpsert)) *BetaProgramUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BetaProgramUpsert{UpdateSet: update})
	}))
	return u
}

// SetBetaProgramName sets the "beta_program_name" field.
func (u *BetaProgramUpsertOne) SetBetaProgramName(v string) *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.SetBetaProgramName(v)
	})
}

// UpdateBetaProgramName sets the "beta_program_name" field to the value that was provided on create.
func (u *BetaProgramUpsertOne) UpdateBetaProgramName() *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.UpdateBetaProgramName()
	})
}

// SetBetaProgramDescription sets the "beta_program_description" field.
func (u *BetaProgramUpsertOne) SetBetaProgramDescription(v string) *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.SetBetaProgramDescription(v)
	})
}

// UpdateBetaProgramDescription sets the "beta_program_description" field to the value that was provided on create.
func (u *BetaProgramUpsertOne) UpdateBetaProgramDescription() *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.UpdateBetaProgramDescription()
	})
}

// SetIsActive sets the "is_active" field.
func (u *BetaProgramUpsertOne) SetIsActive(v bool) *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *BetaProgramUpsertOne) UpdateIsActive() *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.UpdateIsActive()
	})
}

// SetBetaProgramStartTime sets the "beta_program_start_time" field.
func (u *BetaProgramUpsertOne) SetBetaProgramStartTime(v time.Time) *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.SetBetaProgramStartTime(v)
	})
}

// UpdateBetaProgramStartTime sets the "beta_program_start_time" field to the value that was provided on create.
func (u *BetaProgramUpsertOne) UpdateBetaProgramStartTime() *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.UpdateBetaProgramStartTime()
	})
}

// SetBetaProgramEndTime sets the "beta_program_end_time" field.
func (u *BetaProgramUpsertOne) SetBetaProgramEndTime(v time.Time) *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.SetBetaProgramEndTime(v)
	})
}

// UpdateBetaProgramEndTime sets the "beta_program_end_time" field to the value that was provided on create.
func (u *BetaProgramUpsertOne) UpdateBetaProgramEndTime() *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.UpdateBetaProgramEndTime()
	})
}

// ClearBetaProgramEndTime clears the value of the "beta_program_end_time" field.
func (u *BetaProgramUpsertOne) ClearBetaProgramEndTime() *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.ClearBetaProgramEndTime()
	})
}

// SetUpdatedTime sets the "updated_time" field.
func (u *BetaProgramUpsertOne) SetUpdatedTime(v time.Time) *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.SetUpdatedTime(v)
	})
}

// UpdateUpdatedTime sets the "updated_time" field to the value that was provided on create.
func (u *BetaProgramUpsertOne) UpdateUpdatedTime() *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.UpdateUpdatedTime()
	})
}

// SetBetaProgramAddedOn sets the "beta_program_added_on" field.
func (u *BetaProgramUpsertOne) SetBetaProgramAddedOn(v time.Time) *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.SetBetaProgramAddedOn(v)
	})
}

// UpdateBetaProgramAddedOn sets the "beta_program_added_on" field to the value that was provided on create.
func (u *BetaProgramUpsertOne) UpdateBetaProgramAddedOn() *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.UpdateBetaProgramAddedOn()
	})
}

// ClearBetaProgramAddedOn clears the value of the "beta_program_added_on" field.
func (u *BetaProgramUpsertOne) ClearBetaProgramAddedOn() *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.ClearBetaProgramAddedOn()
	})
}

// SetAllowSelfSignup sets the "allow_self_signup" field.
func (u *BetaProgramUpsertOne) SetAllowSelfSignup(v bool) *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.SetAllowSelfSignup(v)
	})
}

// UpdateAllowSelfSignup sets the "allow_self_signup" field to the value that was provided on create.
func (u *BetaProgramUpsertOne) UpdateAllowSelfSignup() *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.UpdateAllowSelfSignup()
	})
}

// ClearAllowSelfSignup clears the value of the "allow_self_signup" field.
func (u *BetaProgramUpsertOne) ClearAllowSelfSignup() *BetaProgramUpsertOne {
	return u.Update(func(s *BetaProgramUpsert) {
		s.ClearAllowSelfSignup()
	})
}

// Exec executes the query.
func (u *BetaProgramUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BetaProgramCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BetaProgramUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BetaProgramUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BetaProgramUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BetaProgramCreateBulk is the builder for creating many BetaProgram entities in bulk.
type BetaProgramCreateBulk struct {
	config
	err      error
	builders []*BetaProgramCreate
	conflict []sql.ConflictOption
}

// Save creates the BetaProgram entities in the database.
func (bpcb *BetaProgramCreateBulk) Save(ctx context.Context) ([]*BetaProgram, error) {
	if bpcb.err != nil {
		return nil, bpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bpcb.builders))
	nodes := make([]*BetaProgram, len(bpcb.builders))
	mutators := make([]Mutator, len(bpcb.builders))
	for i := range bpcb.builders {
		func(i int, root context.Context) {
			builder := bpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BetaProgramMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bpcb *BetaProgramCreateBulk) SaveX(ctx context.Context) []*BetaProgram {
	v, err := bpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bpcb *BetaProgramCreateBulk) Exec(ctx context.Context) error {
	_, err := bpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpcb *BetaProgramCreateBulk) ExecX(ctx context.Context) {
	if err := bpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BetaProgram.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BetaProgramUpsert) {
//			SetBetaProgramName(v+v).
//		}).
//		Exec(ctx)
func (bpcb *BetaProgramCreateBulk) OnConflict(opts ...sql.ConflictOption) *BetaProgramUpsertBulk {
	bpcb.conflict = opts
	return &BetaProgramUpsertBulk{
		create: bpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BetaProgram.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bpcb *BetaProgramCreateBulk) OnConflictColumns(columns ...string) *BetaProgramUpsertBulk {
	bpcb.conflict = append(bpcb.conflict, sql.ConflictColumns(columns...))
	return &BetaProgramUpsertBulk{
		create: bpcb,
	}
}

// BetaProgramUpsertBulk is the builder for "upsert"-ing
// a bulk of BetaProgram nodes.
type BetaProgramUpsertBulk struct {
	create *BetaProgramCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BetaProgram.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(betaprogram.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BetaProgramUpsertBulk) UpdateNewValues() *BetaProgramUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(betaprogram.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BetaProgram.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BetaProgramUpsertBulk) Ignore() *BetaProgramUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BetaProgramUpsertBulk) DoNothing() *BetaProgramUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BetaProgramCreateBulk.OnConflict
// documentation for more info.
func (u *BetaProgramUpsertBulk) Update(set func(*BetaProgramUpsert)) *BetaProgramUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BetaProgramUpsert{UpdateSet: update})
	}))
	return u
}

// SetBetaProgramName sets the "beta_program_name" field.
func (u *BetaProgramUpsertBulk) SetBetaProgramName(v string) *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.SetBetaProgramName(v)
	})
}

// UpdateBetaProgramName sets the "beta_program_name" field to the value that was provided on create.
func (u *BetaProgramUpsertBulk) UpdateBetaProgramName() *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.UpdateBetaProgramName()
	})
}

// SetBetaProgramDescription sets the "beta_program_description" field.
func (u *BetaProgramUpsertBulk) SetBetaProgramDescription(v string) *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.SetBetaProgramDescription(v)
	})
}

// UpdateBetaProgramDescription sets the "beta_program_description" field to the value that was provided on create.
func (u *BetaProgramUpsertBulk) UpdateBetaProgramDescription() *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.UpdateBetaProgramDescription()
	})
}

// SetIsActive sets the "is_active" field.
func (u *BetaProgramUpsertBulk) SetIsActive(v bool) *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *BetaProgramUpsertBulk) UpdateIsActive() *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.UpdateIsActive()
	})
}

// SetBetaProgramStartTime sets the "beta_program_start_time" field.
func (u *BetaProgramUpsertBulk) SetBetaProgramStartTime(v time.Time) *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.SetBetaProgramStartTime(v)
	})
}

// UpdateBetaProgramStartTime sets the "beta_program_start_time" field to the value that was provided on create.
func (u *BetaProgramUpsertBulk) UpdateBetaProgramStartTime() *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.UpdateBetaProgramStartTime()
	})
}

// SetBetaProgramEndTime sets the "beta_program_end_time" field.
func (u *BetaProgramUpsertBulk) SetBetaProgramEndTime(v time.Time) *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.SetBetaProgramEndTime(v)
	})
}

// UpdateBetaProgramEndTime sets the "beta_program_end_time" field to the value that was provided on create.
func (u *BetaProgramUpsertBulk) UpdateBetaProgramEndTime() *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.UpdateBetaProgramEndTime()
	})
}

// ClearBetaProgramEndTime clears the value of the "beta_program_end_time" field.
func (u *BetaProgramUpsertBulk) ClearBetaProgramEndTime() *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.ClearBetaProgramEndTime()
	})
}

// SetUpdatedTime sets the "updated_time" field.
func (u *BetaProgramUpsertBulk) SetUpdatedTime(v time.Time) *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.SetUpdatedTime(v)
	})
}

// UpdateUpdatedTime sets the "updated_time" field to the value that was provided on create.
func (u *BetaProgramUpsertBulk) UpdateUpdatedTime() *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.UpdateUpdatedTime()
	})
}

// SetBetaProgramAddedOn sets the "beta_program_added_on" field.
func (u *BetaProgramUpsertBulk) SetBetaProgramAddedOn(v time.Time) *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.SetBetaProgramAddedOn(v)
	})
}

// UpdateBetaProgramAddedOn sets the "beta_program_added_on" field to the value that was provided on create.
func (u *BetaProgramUpsertBulk) UpdateBetaProgramAddedOn() *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.UpdateBetaProgramAddedOn()
	})
}

// ClearBetaProgramAddedOn clears the value of the "beta_program_added_on" field.
func (u *BetaProgramUpsertBulk) ClearBetaProgramAddedOn() *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.ClearBetaProgramAddedOn()
	})
}

// SetAllowSelfSignup sets the "allow_self_signup" field.
func (u *BetaProgramUpsertBulk) SetAllowSelfSignup(v bool) *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.SetAllowSelfSignup(v)
	})
}

// UpdateAllowSelfSignup sets the "allow_self_signup" field to the value that was provided on create.
func (u *BetaProgramUpsertBulk) UpdateAllowSelfSignup() *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.UpdateAllowSelfSignup()
	})
}

// ClearAllowSelfSignup clears the value of the "allow_self_signup" field.
func (u *BetaProgramUpsertBulk) ClearAllowSelfSignup() *BetaProgramUpsertBulk {
	return u.Update(func(s *BetaProgramUpsert) {
		s.ClearAllowSelfSignup()
	})
}

// Exec executes the query.
func (u *BetaProgramUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BetaProgramCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BetaProgramCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BetaProgramUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
