// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"coresamples/ent"
	"fmt"
)

// The AccountSubscriptionFunc type is an adapter to allow the use of ordinary
// function as AccountSubscription mutator.
type AccountSubscriptionFunc func(context.Context, *ent.AccountSubscriptionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AccountSubscriptionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AccountSubscriptionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AccountSubscriptionMutation", m)
}

// The AddressFunc type is an adapter to allow the use of ordinary
// function as Address mutator.
type AddressFunc func(context.Context, *ent.AddressMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AddressFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AddressMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AddressMutation", m)
}

// The BetaProgramFunc type is an adapter to allow the use of ordinary
// function as BetaProgram mutator.
type BetaProgramFunc func(context.Context, *ent.BetaProgramMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BetaProgramFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BetaProgramMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BetaProgramMutation", m)
}

// The BetaProgramParticipationFunc type is an adapter to allow the use of ordinary
// function as BetaProgramParticipation mutator.
type BetaProgramParticipationFunc func(context.Context, *ent.BetaProgramParticipationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BetaProgramParticipationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BetaProgramParticipationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BetaProgramParticipationMutation", m)
}

// The ClinicFunc type is an adapter to allow the use of ordinary
// function as Clinic mutator.
type ClinicFunc func(context.Context, *ent.ClinicMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ClinicFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ClinicMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ClinicMutation", m)
}

// The ContactFunc type is an adapter to allow the use of ordinary
// function as Contact mutator.
type ContactFunc func(context.Context, *ent.ContactMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ContactFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ContactMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ContactMutation", m)
}

// The CountryListFunc type is an adapter to allow the use of ordinary
// function as CountryList mutator.
type CountryListFunc func(context.Context, *ent.CountryListMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CountryListFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CountryListMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CountryListMutation", m)
}

// The CustomerFunc type is an adapter to allow the use of ordinary
// function as Customer mutator.
type CustomerFunc func(context.Context, *ent.CustomerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CustomerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CustomerMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CustomerMutation", m)
}

// The CustomerAddressOnClinicsFunc type is an adapter to allow the use of ordinary
// function as CustomerAddressOnClinics mutator.
type CustomerAddressOnClinicsFunc func(context.Context, *ent.CustomerAddressOnClinicsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CustomerAddressOnClinicsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CustomerAddressOnClinicsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CustomerAddressOnClinicsMutation", m)
}

// The CustomerContactOnClinicsFunc type is an adapter to allow the use of ordinary
// function as CustomerContactOnClinics mutator.
type CustomerContactOnClinicsFunc func(context.Context, *ent.CustomerContactOnClinicsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CustomerContactOnClinicsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CustomerContactOnClinicsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CustomerContactOnClinicsMutation", m)
}

// The CustomerSettingOnClinicsFunc type is an adapter to allow the use of ordinary
// function as CustomerSettingOnClinics mutator.
type CustomerSettingOnClinicsFunc func(context.Context, *ent.CustomerSettingOnClinicsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CustomerSettingOnClinicsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CustomerSettingOnClinicsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CustomerSettingOnClinicsMutation", m)
}

// The InternalUserFunc type is an adapter to allow the use of ordinary
// function as InternalUser mutator.
type InternalUserFunc func(context.Context, *ent.InternalUserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InternalUserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.InternalUserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InternalUserMutation", m)
}

// The LabOrderSendHistoryFunc type is an adapter to allow the use of ordinary
// function as LabOrderSendHistory mutator.
type LabOrderSendHistoryFunc func(context.Context, *ent.LabOrderSendHistoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LabOrderSendHistoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.LabOrderSendHistoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LabOrderSendHistoryMutation", m)
}

// The LoginHistoryFunc type is an adapter to allow the use of ordinary
// function as LoginHistory mutator.
type LoginHistoryFunc func(context.Context, *ent.LoginHistoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LoginHistoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.LoginHistoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LoginHistoryMutation", m)
}

// The OrderFlagFunc type is an adapter to allow the use of ordinary
// function as OrderFlag mutator.
type OrderFlagFunc func(context.Context, *ent.OrderFlagMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderFlagFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OrderFlagMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderFlagMutation", m)
}

// The OrderInfoFunc type is an adapter to allow the use of ordinary
// function as OrderInfo mutator.
type OrderInfoFunc func(context.Context, *ent.OrderInfoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderInfoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OrderInfoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderInfoMutation", m)
}

// The PatientFunc type is an adapter to allow the use of ordinary
// function as Patient mutator.
type PatientFunc func(context.Context, *ent.PatientMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PatientFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PatientMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PatientMutation", m)
}

// The PatientFlagFunc type is an adapter to allow the use of ordinary
// function as PatientFlag mutator.
type PatientFlagFunc func(context.Context, *ent.PatientFlagMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PatientFlagFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PatientFlagMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PatientFlagMutation", m)
}

// The PatientWeightHeightFunc type is an adapter to allow the use of ordinary
// function as PatientWeightHeight mutator.
type PatientWeightHeightFunc func(context.Context, *ent.PatientWeightHeightMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PatientWeightHeightFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PatientWeightHeightMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PatientWeightHeightMutation", m)
}

// The PendingOrderCreditsFunc type is an adapter to allow the use of ordinary
// function as PendingOrderCredits mutator.
type PendingOrderCreditsFunc func(context.Context, *ent.PendingOrderCreditsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PendingOrderCreditsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PendingOrderCreditsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PendingOrderCreditsMutation", m)
}

// The RBACActionsFunc type is an adapter to allow the use of ordinary
// function as RBACActions mutator.
type RBACActionsFunc func(context.Context, *ent.RBACActionsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RBACActionsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RBACActionsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RBACActionsMutation", m)
}

// The RBACResourcesFunc type is an adapter to allow the use of ordinary
// function as RBACResources mutator.
type RBACResourcesFunc func(context.Context, *ent.RBACResourcesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RBACResourcesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RBACResourcesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RBACResourcesMutation", m)
}

// The RBACRolesFunc type is an adapter to allow the use of ordinary
// function as RBACRoles mutator.
type RBACRolesFunc func(context.Context, *ent.RBACRolesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RBACRolesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RBACRolesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RBACRolesMutation", m)
}

// The SalesTeamFunc type is an adapter to allow the use of ordinary
// function as SalesTeam mutator.
type SalesTeamFunc func(context.Context, *ent.SalesTeamMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SalesTeamFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SalesTeamMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SalesTeamMutation", m)
}

// The SalesTerritoryFunc type is an adapter to allow the use of ordinary
// function as SalesTerritory mutator.
type SalesTerritoryFunc func(context.Context, *ent.SalesTerritoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SalesTerritoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SalesTerritoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SalesTerritoryMutation", m)
}

// The SalesTitleFunc type is an adapter to allow the use of ordinary
// function as SalesTitle mutator.
type SalesTitleFunc func(context.Context, *ent.SalesTitleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SalesTitleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SalesTitleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SalesTitleMutation", m)
}

// The SampleFunc type is an adapter to allow the use of ordinary
// function as Sample mutator.
type SampleFunc func(context.Context, *ent.SampleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SampleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SampleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SampleMutation", m)
}

// The SampleIDGenerateFunc type is an adapter to allow the use of ordinary
// function as SampleIDGenerate mutator.
type SampleIDGenerateFunc func(context.Context, *ent.SampleIDGenerateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SampleIDGenerateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SampleIDGenerateMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SampleIDGenerateMutation", m)
}

// The SampleTypeFunc type is an adapter to allow the use of ordinary
// function as SampleType mutator.
type SampleTypeFunc func(context.Context, *ent.SampleTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SampleTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SampleTypeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SampleTypeMutation", m)
}

// The ServiceshipFunc type is an adapter to allow the use of ordinary
// function as Serviceship mutator.
type ServiceshipFunc func(context.Context, *ent.ServiceshipMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ServiceshipFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ServiceshipMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ServiceshipMutation", m)
}

// The ServiceshipBillingPlanFunc type is an adapter to allow the use of ordinary
// function as ServiceshipBillingPlan mutator.
type ServiceshipBillingPlanFunc func(context.Context, *ent.ServiceshipBillingPlanMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ServiceshipBillingPlanFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ServiceshipBillingPlanMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ServiceshipBillingPlanMutation", m)
}

// The SettingFunc type is an adapter to allow the use of ordinary
// function as Setting mutator.
type SettingFunc func(context.Context, *ent.SettingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SettingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SettingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SettingMutation", m)
}

// The TestFunc type is an adapter to allow the use of ordinary
// function as Test mutator.
type TestFunc func(context.Context, *ent.TestMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TestFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TestMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TestMutation", m)
}

// The TestDetailFunc type is an adapter to allow the use of ordinary
// function as TestDetail mutator.
type TestDetailFunc func(context.Context, *ent.TestDetailMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TestDetailFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TestDetailMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TestDetailMutation", m)
}

// The TestListFunc type is an adapter to allow the use of ordinary
// function as TestList mutator.
type TestListFunc func(context.Context, *ent.TestListMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TestListFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TestListMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TestListMutation", m)
}

// The TubeFunc type is an adapter to allow the use of ordinary
// function as Tube mutator.
type TubeFunc func(context.Context, *ent.TubeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TubeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TubeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TubeMutation", m)
}

// The TubeInstructionsFunc type is an adapter to allow the use of ordinary
// function as TubeInstructions mutator.
type TubeInstructionsFunc func(context.Context, *ent.TubeInstructionsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TubeInstructionsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TubeInstructionsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TubeInstructionsMutation", m)
}

// The TubeReceiveFunc type is an adapter to allow the use of ordinary
// function as TubeReceive mutator.
type TubeReceiveFunc func(context.Context, *ent.TubeReceiveMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TubeReceiveFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TubeReceiveMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TubeReceiveMutation", m)
}

// The TubeRequirementFunc type is an adapter to allow the use of ordinary
// function as TubeRequirement mutator.
type TubeRequirementFunc func(context.Context, *ent.TubeRequirementMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TubeRequirementFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TubeRequirementMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TubeRequirementMutation", m)
}

// The TubeTypeFunc type is an adapter to allow the use of ordinary
// function as TubeType mutator.
type TubeTypeFunc func(context.Context, *ent.TubeTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TubeTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TubeTypeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TubeTypeMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
}

// The UserInvitationRecordFunc type is an adapter to allow the use of ordinary
// function as UserInvitationRecord mutator.
type UserInvitationRecordFunc func(context.Context, *ent.UserInvitationRecordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserInvitationRecordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserInvitationRecordMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserInvitationRecordMutation", m)
}

// The ZipcodeFunc type is an adapter to allow the use of ordinary
// function as Zipcode mutator.
type ZipcodeFunc func(context.Context, *ent.ZipcodeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ZipcodeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ZipcodeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ZipcodeMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
