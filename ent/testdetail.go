// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/test"
	"coresamples/ent/testdetail"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TestDetail is the model entity for the TestDetail schema.
type TestDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TestID holds the value of the "test_id" field.
	TestID int `json:"test_id,omitempty"`
	// TestDetailName holds the value of the "test_detail_name" field.
	TestDetailName string `json:"test_detail_name,omitempty"`
	// TestDetailsValue holds the value of the "test_details_value" field.
	TestDetailsValue string `json:"test_details_value,omitempty"`
	// IsActive holds the value of the "isActive" field.
	IsActive bool `json:"isActive,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestDetailQuery when eager-loading is set.
	Edges        TestDetailEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TestDetailEdges holds the relations/edges for other nodes in the graph.
type TestDetailEdges struct {
	// Test holds the value of the test edge.
	Test *Test `json:"test,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TestOrErr returns the Test value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestDetailEdges) TestOrErr() (*Test, error) {
	if e.loadedTypes[0] {
		if e.Test == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: test.Label}
		}
		return e.Test, nil
	}
	return nil, &NotLoadedError{edge: "test"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testdetail.FieldIsActive:
			values[i] = new(sql.NullBool)
		case testdetail.FieldID, testdetail.FieldTestID:
			values[i] = new(sql.NullInt64)
		case testdetail.FieldTestDetailName, testdetail.FieldTestDetailsValue:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestDetail fields.
func (td *TestDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testdetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			td.ID = int(value.Int64)
		case testdetail.FieldTestID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field test_id", values[i])
			} else if value.Valid {
				td.TestID = int(value.Int64)
			}
		case testdetail.FieldTestDetailName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field test_detail_name", values[i])
			} else if value.Valid {
				td.TestDetailName = value.String
			}
		case testdetail.FieldTestDetailsValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field test_details_value", values[i])
			} else if value.Valid {
				td.TestDetailsValue = value.String
			}
		case testdetail.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isActive", values[i])
			} else if value.Valid {
				td.IsActive = value.Bool
			}
		default:
			td.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TestDetail.
// This includes values selected through modifiers, order, etc.
func (td *TestDetail) Value(name string) (ent.Value, error) {
	return td.selectValues.Get(name)
}

// QueryTest queries the "test" edge of the TestDetail entity.
func (td *TestDetail) QueryTest() *TestQuery {
	return NewTestDetailClient(td.config).QueryTest(td)
}

// Update returns a builder for updating this TestDetail.
// Note that you need to call TestDetail.Unwrap() before calling this method if this TestDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (td *TestDetail) Update() *TestDetailUpdateOne {
	return NewTestDetailClient(td.config).UpdateOne(td)
}

// Unwrap unwraps the TestDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (td *TestDetail) Unwrap() *TestDetail {
	_tx, ok := td.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestDetail is not a transactional entity")
	}
	td.config.driver = _tx.drv
	return td
}

// String implements the fmt.Stringer.
func (td *TestDetail) String() string {
	var builder strings.Builder
	builder.WriteString("TestDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", td.ID))
	builder.WriteString("test_id=")
	builder.WriteString(fmt.Sprintf("%v", td.TestID))
	builder.WriteString(", ")
	builder.WriteString("test_detail_name=")
	builder.WriteString(td.TestDetailName)
	builder.WriteString(", ")
	builder.WriteString("test_details_value=")
	builder.WriteString(td.TestDetailsValue)
	builder.WriteString(", ")
	builder.WriteString("isActive=")
	builder.WriteString(fmt.Sprintf("%v", td.IsActive))
	builder.WriteByte(')')
	return builder.String()
}

// TestDetails is a parsable slice of TestDetail.
type TestDetails []*TestDetail
