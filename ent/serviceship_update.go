// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/accountsubscription"
	"coresamples/ent/predicate"
	"coresamples/ent/serviceship"
	"coresamples/ent/serviceshipbillingplan"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceshipUpdate is the builder for updating Serviceship entities.
type ServiceshipUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceshipMutation
}

// Where appends a list predicates to the ServiceshipUpdate builder.
func (su *ServiceshipUpdate) Where(ps ...predicate.Serviceship) *ServiceshipUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetTag sets the "tag" field.
func (su *ServiceshipUpdate) SetTag(s string) *ServiceshipUpdate {
	su.mutation.SetTag(s)
	return su
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (su *ServiceshipUpdate) SetNillableTag(s *string) *ServiceshipUpdate {
	if s != nil {
		su.SetTag(*s)
	}
	return su
}

// SetType sets the "type" field.
func (su *ServiceshipUpdate) SetType(s serviceship.Type) *ServiceshipUpdate {
	su.mutation.SetType(s)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *ServiceshipUpdate) SetNillableType(s *serviceship.Type) *ServiceshipUpdate {
	if s != nil {
		su.SetType(*s)
	}
	return su
}

// AddServiceshipBillingPlanIDs adds the "serviceship_billing_plan" edge to the ServiceshipBillingPlan entity by IDs.
func (su *ServiceshipUpdate) AddServiceshipBillingPlanIDs(ids ...int) *ServiceshipUpdate {
	su.mutation.AddServiceshipBillingPlanIDs(ids...)
	return su
}

// AddServiceshipBillingPlan adds the "serviceship_billing_plan" edges to the ServiceshipBillingPlan entity.
func (su *ServiceshipUpdate) AddServiceshipBillingPlan(s ...*ServiceshipBillingPlan) *ServiceshipUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddServiceshipBillingPlanIDs(ids...)
}

// AddAccountSubscriptionIDs adds the "account_subscription" edge to the AccountSubscription entity by IDs.
func (su *ServiceshipUpdate) AddAccountSubscriptionIDs(ids ...int) *ServiceshipUpdate {
	su.mutation.AddAccountSubscriptionIDs(ids...)
	return su
}

// AddAccountSubscription adds the "account_subscription" edges to the AccountSubscription entity.
func (su *ServiceshipUpdate) AddAccountSubscription(a ...*AccountSubscription) *ServiceshipUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddAccountSubscriptionIDs(ids...)
}

// Mutation returns the ServiceshipMutation object of the builder.
func (su *ServiceshipUpdate) Mutation() *ServiceshipMutation {
	return su.mutation
}

// ClearServiceshipBillingPlan clears all "serviceship_billing_plan" edges to the ServiceshipBillingPlan entity.
func (su *ServiceshipUpdate) ClearServiceshipBillingPlan() *ServiceshipUpdate {
	su.mutation.ClearServiceshipBillingPlan()
	return su
}

// RemoveServiceshipBillingPlanIDs removes the "serviceship_billing_plan" edge to ServiceshipBillingPlan entities by IDs.
func (su *ServiceshipUpdate) RemoveServiceshipBillingPlanIDs(ids ...int) *ServiceshipUpdate {
	su.mutation.RemoveServiceshipBillingPlanIDs(ids...)
	return su
}

// RemoveServiceshipBillingPlan removes "serviceship_billing_plan" edges to ServiceshipBillingPlan entities.
func (su *ServiceshipUpdate) RemoveServiceshipBillingPlan(s ...*ServiceshipBillingPlan) *ServiceshipUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveServiceshipBillingPlanIDs(ids...)
}

// ClearAccountSubscription clears all "account_subscription" edges to the AccountSubscription entity.
func (su *ServiceshipUpdate) ClearAccountSubscription() *ServiceshipUpdate {
	su.mutation.ClearAccountSubscription()
	return su
}

// RemoveAccountSubscriptionIDs removes the "account_subscription" edge to AccountSubscription entities by IDs.
func (su *ServiceshipUpdate) RemoveAccountSubscriptionIDs(ids ...int) *ServiceshipUpdate {
	su.mutation.RemoveAccountSubscriptionIDs(ids...)
	return su
}

// RemoveAccountSubscription removes "account_subscription" edges to AccountSubscription entities.
func (su *ServiceshipUpdate) RemoveAccountSubscription(a ...*AccountSubscription) *ServiceshipUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveAccountSubscriptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServiceshipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServiceshipUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServiceshipUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServiceshipUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ServiceshipUpdate) check() error {
	if v, ok := su.mutation.Tag(); ok {
		if err := serviceship.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "Serviceship.tag": %w`, err)}
		}
	}
	if v, ok := su.mutation.GetType(); ok {
		if err := serviceship.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Serviceship.type": %w`, err)}
		}
	}
	return nil
}

func (su *ServiceshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceship.Table, serviceship.Columns, sqlgraph.NewFieldSpec(serviceship.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Tag(); ok {
		_spec.SetField(serviceship.FieldTag, field.TypeString, value)
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.SetField(serviceship.FieldType, field.TypeEnum, value)
	}
	if su.mutation.ServiceshipBillingPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceship.ServiceshipBillingPlanTable,
			Columns: []string{serviceship.ServiceshipBillingPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceshipbillingplan.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedServiceshipBillingPlanIDs(); len(nodes) > 0 && !su.mutation.ServiceshipBillingPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceship.ServiceshipBillingPlanTable,
			Columns: []string{serviceship.ServiceshipBillingPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceshipbillingplan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ServiceshipBillingPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceship.ServiceshipBillingPlanTable,
			Columns: []string{serviceship.ServiceshipBillingPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceshipbillingplan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AccountSubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceship.AccountSubscriptionTable,
			Columns: []string{serviceship.AccountSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsubscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAccountSubscriptionIDs(); len(nodes) > 0 && !su.mutation.AccountSubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceship.AccountSubscriptionTable,
			Columns: []string{serviceship.AccountSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AccountSubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceship.AccountSubscriptionTable,
			Columns: []string{serviceship.AccountSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ServiceshipUpdateOne is the builder for updating a single Serviceship entity.
type ServiceshipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceshipMutation
}

// SetTag sets the "tag" field.
func (suo *ServiceshipUpdateOne) SetTag(s string) *ServiceshipUpdateOne {
	suo.mutation.SetTag(s)
	return suo
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (suo *ServiceshipUpdateOne) SetNillableTag(s *string) *ServiceshipUpdateOne {
	if s != nil {
		suo.SetTag(*s)
	}
	return suo
}

// SetType sets the "type" field.
func (suo *ServiceshipUpdateOne) SetType(s serviceship.Type) *ServiceshipUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *ServiceshipUpdateOne) SetNillableType(s *serviceship.Type) *ServiceshipUpdateOne {
	if s != nil {
		suo.SetType(*s)
	}
	return suo
}

// AddServiceshipBillingPlanIDs adds the "serviceship_billing_plan" edge to the ServiceshipBillingPlan entity by IDs.
func (suo *ServiceshipUpdateOne) AddServiceshipBillingPlanIDs(ids ...int) *ServiceshipUpdateOne {
	suo.mutation.AddServiceshipBillingPlanIDs(ids...)
	return suo
}

// AddServiceshipBillingPlan adds the "serviceship_billing_plan" edges to the ServiceshipBillingPlan entity.
func (suo *ServiceshipUpdateOne) AddServiceshipBillingPlan(s ...*ServiceshipBillingPlan) *ServiceshipUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddServiceshipBillingPlanIDs(ids...)
}

// AddAccountSubscriptionIDs adds the "account_subscription" edge to the AccountSubscription entity by IDs.
func (suo *ServiceshipUpdateOne) AddAccountSubscriptionIDs(ids ...int) *ServiceshipUpdateOne {
	suo.mutation.AddAccountSubscriptionIDs(ids...)
	return suo
}

// AddAccountSubscription adds the "account_subscription" edges to the AccountSubscription entity.
func (suo *ServiceshipUpdateOne) AddAccountSubscription(a ...*AccountSubscription) *ServiceshipUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddAccountSubscriptionIDs(ids...)
}

// Mutation returns the ServiceshipMutation object of the builder.
func (suo *ServiceshipUpdateOne) Mutation() *ServiceshipMutation {
	return suo.mutation
}

// ClearServiceshipBillingPlan clears all "serviceship_billing_plan" edges to the ServiceshipBillingPlan entity.
func (suo *ServiceshipUpdateOne) ClearServiceshipBillingPlan() *ServiceshipUpdateOne {
	suo.mutation.ClearServiceshipBillingPlan()
	return suo
}

// RemoveServiceshipBillingPlanIDs removes the "serviceship_billing_plan" edge to ServiceshipBillingPlan entities by IDs.
func (suo *ServiceshipUpdateOne) RemoveServiceshipBillingPlanIDs(ids ...int) *ServiceshipUpdateOne {
	suo.mutation.RemoveServiceshipBillingPlanIDs(ids...)
	return suo
}

// RemoveServiceshipBillingPlan removes "serviceship_billing_plan" edges to ServiceshipBillingPlan entities.
func (suo *ServiceshipUpdateOne) RemoveServiceshipBillingPlan(s ...*ServiceshipBillingPlan) *ServiceshipUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveServiceshipBillingPlanIDs(ids...)
}

// ClearAccountSubscription clears all "account_subscription" edges to the AccountSubscription entity.
func (suo *ServiceshipUpdateOne) ClearAccountSubscription() *ServiceshipUpdateOne {
	suo.mutation.ClearAccountSubscription()
	return suo
}

// RemoveAccountSubscriptionIDs removes the "account_subscription" edge to AccountSubscription entities by IDs.
func (suo *ServiceshipUpdateOne) RemoveAccountSubscriptionIDs(ids ...int) *ServiceshipUpdateOne {
	suo.mutation.RemoveAccountSubscriptionIDs(ids...)
	return suo
}

// RemoveAccountSubscription removes "account_subscription" edges to AccountSubscription entities.
func (suo *ServiceshipUpdateOne) RemoveAccountSubscription(a ...*AccountSubscription) *ServiceshipUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveAccountSubscriptionIDs(ids...)
}

// Where appends a list predicates to the ServiceshipUpdate builder.
func (suo *ServiceshipUpdateOne) Where(ps ...predicate.Serviceship) *ServiceshipUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServiceshipUpdateOne) Select(field string, fields ...string) *ServiceshipUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Serviceship entity.
func (suo *ServiceshipUpdateOne) Save(ctx context.Context) (*Serviceship, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServiceshipUpdateOne) SaveX(ctx context.Context) *Serviceship {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServiceshipUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServiceshipUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ServiceshipUpdateOne) check() error {
	if v, ok := suo.mutation.Tag(); ok {
		if err := serviceship.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "Serviceship.tag": %w`, err)}
		}
	}
	if v, ok := suo.mutation.GetType(); ok {
		if err := serviceship.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Serviceship.type": %w`, err)}
		}
	}
	return nil
}

func (suo *ServiceshipUpdateOne) sqlSave(ctx context.Context) (_node *Serviceship, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceship.Table, serviceship.Columns, sqlgraph.NewFieldSpec(serviceship.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Serviceship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serviceship.FieldID)
		for _, f := range fields {
			if !serviceship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != serviceship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Tag(); ok {
		_spec.SetField(serviceship.FieldTag, field.TypeString, value)
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.SetField(serviceship.FieldType, field.TypeEnum, value)
	}
	if suo.mutation.ServiceshipBillingPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceship.ServiceshipBillingPlanTable,
			Columns: []string{serviceship.ServiceshipBillingPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceshipbillingplan.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedServiceshipBillingPlanIDs(); len(nodes) > 0 && !suo.mutation.ServiceshipBillingPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceship.ServiceshipBillingPlanTable,
			Columns: []string{serviceship.ServiceshipBillingPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceshipbillingplan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ServiceshipBillingPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceship.ServiceshipBillingPlanTable,
			Columns: []string{serviceship.ServiceshipBillingPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceshipbillingplan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AccountSubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceship.AccountSubscriptionTable,
			Columns: []string{serviceship.AccountSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsubscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAccountSubscriptionIDs(); len(nodes) > 0 && !suo.mutation.AccountSubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceship.AccountSubscriptionTable,
			Columns: []string{serviceship.AccountSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AccountSubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceship.AccountSubscriptionTable,
			Columns: []string{serviceship.AccountSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Serviceship{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
