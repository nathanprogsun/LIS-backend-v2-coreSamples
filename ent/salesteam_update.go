// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/internaluser"
	"coresamples/ent/predicate"
	"coresamples/ent/salesteam"
	"coresamples/ent/salestitle"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SalesTeamUpdate is the builder for updating SalesTeam entities.
type SalesTeamUpdate struct {
	config
	hooks    []Hook
	mutation *SalesTeamMutation
}

// Where appends a list predicates to the SalesTeamUpdate builder.
func (stu *SalesTeamUpdate) Where(ps ...predicate.SalesTeam) *SalesTeamUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetInternalUserID sets the "internal_user_id" field.
func (stu *SalesTeamUpdate) SetInternalUserID(i int) *SalesTeamUpdate {
	stu.mutation.SetInternalUserID(i)
	return stu
}

// SetNillableInternalUserID sets the "internal_user_id" field if the given value is not nil.
func (stu *SalesTeamUpdate) SetNillableInternalUserID(i *int) *SalesTeamUpdate {
	if i != nil {
		stu.SetInternalUserID(*i)
	}
	return stu
}

// SetSupervisorID sets the "supervisor_id" field.
func (stu *SalesTeamUpdate) SetSupervisorID(i int) *SalesTeamUpdate {
	stu.mutation.SetSupervisorID(i)
	return stu
}

// SetNillableSupervisorID sets the "supervisor_id" field if the given value is not nil.
func (stu *SalesTeamUpdate) SetNillableSupervisorID(i *int) *SalesTeamUpdate {
	if i != nil {
		stu.SetSupervisorID(*i)
	}
	return stu
}

// ClearSupervisorID clears the value of the "supervisor_id" field.
func (stu *SalesTeamUpdate) ClearSupervisorID() *SalesTeamUpdate {
	stu.mutation.ClearSupervisorID()
	return stu
}

// SetTitleID sets the "title_id" field.
func (stu *SalesTeamUpdate) SetTitleID(i int) *SalesTeamUpdate {
	stu.mutation.SetTitleID(i)
	return stu
}

// SetNillableTitleID sets the "title_id" field if the given value is not nil.
func (stu *SalesTeamUpdate) SetNillableTitleID(i *int) *SalesTeamUpdate {
	if i != nil {
		stu.SetTitleID(*i)
	}
	return stu
}

// ClearTitleID clears the value of the "title_id" field.
func (stu *SalesTeamUpdate) ClearTitleID() *SalesTeamUpdate {
	stu.mutation.ClearTitleID()
	return stu
}

// SetCreatedTime sets the "created_time" field.
func (stu *SalesTeamUpdate) SetCreatedTime(t time.Time) *SalesTeamUpdate {
	stu.mutation.SetCreatedTime(t)
	return stu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (stu *SalesTeamUpdate) SetNillableCreatedTime(t *time.Time) *SalesTeamUpdate {
	if t != nil {
		stu.SetCreatedTime(*t)
	}
	return stu
}

// SetUpdatedTime sets the "updated_time" field.
func (stu *SalesTeamUpdate) SetUpdatedTime(t time.Time) *SalesTeamUpdate {
	stu.mutation.SetUpdatedTime(t)
	return stu
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (stu *SalesTeamUpdate) ClearUpdatedTime() *SalesTeamUpdate {
	stu.mutation.ClearUpdatedTime()
	return stu
}

// AddSubordinateIDs adds the "subordinates" edge to the SalesTeam entity by IDs.
func (stu *SalesTeamUpdate) AddSubordinateIDs(ids ...int) *SalesTeamUpdate {
	stu.mutation.AddSubordinateIDs(ids...)
	return stu
}

// AddSubordinates adds the "subordinates" edges to the SalesTeam entity.
func (stu *SalesTeamUpdate) AddSubordinates(s ...*SalesTeam) *SalesTeamUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddSubordinateIDs(ids...)
}

// SetSupervisor sets the "supervisor" edge to the SalesTeam entity.
func (stu *SalesTeamUpdate) SetSupervisor(s *SalesTeam) *SalesTeamUpdate {
	return stu.SetSupervisorID(s.ID)
}

// SetInternalUser sets the "internal_user" edge to the InternalUser entity.
func (stu *SalesTeamUpdate) SetInternalUser(i *InternalUser) *SalesTeamUpdate {
	return stu.SetInternalUserID(i.ID)
}

// SetTitle sets the "title" edge to the SalesTitle entity.
func (stu *SalesTeamUpdate) SetTitle(s *SalesTitle) *SalesTeamUpdate {
	return stu.SetTitleID(s.ID)
}

// Mutation returns the SalesTeamMutation object of the builder.
func (stu *SalesTeamUpdate) Mutation() *SalesTeamMutation {
	return stu.mutation
}

// ClearSubordinates clears all "subordinates" edges to the SalesTeam entity.
func (stu *SalesTeamUpdate) ClearSubordinates() *SalesTeamUpdate {
	stu.mutation.ClearSubordinates()
	return stu
}

// RemoveSubordinateIDs removes the "subordinates" edge to SalesTeam entities by IDs.
func (stu *SalesTeamUpdate) RemoveSubordinateIDs(ids ...int) *SalesTeamUpdate {
	stu.mutation.RemoveSubordinateIDs(ids...)
	return stu
}

// RemoveSubordinates removes "subordinates" edges to SalesTeam entities.
func (stu *SalesTeamUpdate) RemoveSubordinates(s ...*SalesTeam) *SalesTeamUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveSubordinateIDs(ids...)
}

// ClearSupervisor clears the "supervisor" edge to the SalesTeam entity.
func (stu *SalesTeamUpdate) ClearSupervisor() *SalesTeamUpdate {
	stu.mutation.ClearSupervisor()
	return stu
}

// ClearInternalUser clears the "internal_user" edge to the InternalUser entity.
func (stu *SalesTeamUpdate) ClearInternalUser() *SalesTeamUpdate {
	stu.mutation.ClearInternalUser()
	return stu
}

// ClearTitle clears the "title" edge to the SalesTitle entity.
func (stu *SalesTeamUpdate) ClearTitle() *SalesTeamUpdate {
	stu.mutation.ClearTitle()
	return stu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SalesTeamUpdate) Save(ctx context.Context) (int, error) {
	stu.defaults()
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SalesTeamUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SalesTeamUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SalesTeamUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *SalesTeamUpdate) defaults() {
	if _, ok := stu.mutation.UpdatedTime(); !ok && !stu.mutation.UpdatedTimeCleared() {
		v := salesteam.UpdateDefaultUpdatedTime()
		stu.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stu *SalesTeamUpdate) check() error {
	if _, ok := stu.mutation.InternalUserID(); stu.mutation.InternalUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SalesTeam.internal_user"`)
	}
	return nil
}

func (stu *SalesTeamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := stu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(salesteam.Table, salesteam.Columns, sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.CreatedTime(); ok {
		_spec.SetField(salesteam.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := stu.mutation.UpdatedTime(); ok {
		_spec.SetField(salesteam.FieldUpdatedTime, field.TypeTime, value)
	}
	if stu.mutation.UpdatedTimeCleared() {
		_spec.ClearField(salesteam.FieldUpdatedTime, field.TypeTime)
	}
	if stu.mutation.SubordinatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   salesteam.SubordinatesTable,
			Columns: []string{salesteam.SubordinatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedSubordinatesIDs(); len(nodes) > 0 && !stu.mutation.SubordinatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   salesteam.SubordinatesTable,
			Columns: []string{salesteam.SubordinatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.SubordinatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   salesteam.SubordinatesTable,
			Columns: []string{salesteam.SubordinatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.SupervisorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   salesteam.SupervisorTable,
			Columns: []string{salesteam.SupervisorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.SupervisorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   salesteam.SupervisorTable,
			Columns: []string{salesteam.SupervisorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.InternalUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   salesteam.InternalUserTable,
			Columns: []string{salesteam.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.InternalUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   salesteam.InternalUserTable,
			Columns: []string{salesteam.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.TitleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   salesteam.TitleTable,
			Columns: []string{salesteam.TitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salestitle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.TitleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   salesteam.TitleTable,
			Columns: []string{salesteam.TitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salestitle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{salesteam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// SalesTeamUpdateOne is the builder for updating a single SalesTeam entity.
type SalesTeamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SalesTeamMutation
}

// SetInternalUserID sets the "internal_user_id" field.
func (stuo *SalesTeamUpdateOne) SetInternalUserID(i int) *SalesTeamUpdateOne {
	stuo.mutation.SetInternalUserID(i)
	return stuo
}

// SetNillableInternalUserID sets the "internal_user_id" field if the given value is not nil.
func (stuo *SalesTeamUpdateOne) SetNillableInternalUserID(i *int) *SalesTeamUpdateOne {
	if i != nil {
		stuo.SetInternalUserID(*i)
	}
	return stuo
}

// SetSupervisorID sets the "supervisor_id" field.
func (stuo *SalesTeamUpdateOne) SetSupervisorID(i int) *SalesTeamUpdateOne {
	stuo.mutation.SetSupervisorID(i)
	return stuo
}

// SetNillableSupervisorID sets the "supervisor_id" field if the given value is not nil.
func (stuo *SalesTeamUpdateOne) SetNillableSupervisorID(i *int) *SalesTeamUpdateOne {
	if i != nil {
		stuo.SetSupervisorID(*i)
	}
	return stuo
}

// ClearSupervisorID clears the value of the "supervisor_id" field.
func (stuo *SalesTeamUpdateOne) ClearSupervisorID() *SalesTeamUpdateOne {
	stuo.mutation.ClearSupervisorID()
	return stuo
}

// SetTitleID sets the "title_id" field.
func (stuo *SalesTeamUpdateOne) SetTitleID(i int) *SalesTeamUpdateOne {
	stuo.mutation.SetTitleID(i)
	return stuo
}

// SetNillableTitleID sets the "title_id" field if the given value is not nil.
func (stuo *SalesTeamUpdateOne) SetNillableTitleID(i *int) *SalesTeamUpdateOne {
	if i != nil {
		stuo.SetTitleID(*i)
	}
	return stuo
}

// ClearTitleID clears the value of the "title_id" field.
func (stuo *SalesTeamUpdateOne) ClearTitleID() *SalesTeamUpdateOne {
	stuo.mutation.ClearTitleID()
	return stuo
}

// SetCreatedTime sets the "created_time" field.
func (stuo *SalesTeamUpdateOne) SetCreatedTime(t time.Time) *SalesTeamUpdateOne {
	stuo.mutation.SetCreatedTime(t)
	return stuo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (stuo *SalesTeamUpdateOne) SetNillableCreatedTime(t *time.Time) *SalesTeamUpdateOne {
	if t != nil {
		stuo.SetCreatedTime(*t)
	}
	return stuo
}

// SetUpdatedTime sets the "updated_time" field.
func (stuo *SalesTeamUpdateOne) SetUpdatedTime(t time.Time) *SalesTeamUpdateOne {
	stuo.mutation.SetUpdatedTime(t)
	return stuo
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (stuo *SalesTeamUpdateOne) ClearUpdatedTime() *SalesTeamUpdateOne {
	stuo.mutation.ClearUpdatedTime()
	return stuo
}

// AddSubordinateIDs adds the "subordinates" edge to the SalesTeam entity by IDs.
func (stuo *SalesTeamUpdateOne) AddSubordinateIDs(ids ...int) *SalesTeamUpdateOne {
	stuo.mutation.AddSubordinateIDs(ids...)
	return stuo
}

// AddSubordinates adds the "subordinates" edges to the SalesTeam entity.
func (stuo *SalesTeamUpdateOne) AddSubordinates(s ...*SalesTeam) *SalesTeamUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddSubordinateIDs(ids...)
}

// SetSupervisor sets the "supervisor" edge to the SalesTeam entity.
func (stuo *SalesTeamUpdateOne) SetSupervisor(s *SalesTeam) *SalesTeamUpdateOne {
	return stuo.SetSupervisorID(s.ID)
}

// SetInternalUser sets the "internal_user" edge to the InternalUser entity.
func (stuo *SalesTeamUpdateOne) SetInternalUser(i *InternalUser) *SalesTeamUpdateOne {
	return stuo.SetInternalUserID(i.ID)
}

// SetTitle sets the "title" edge to the SalesTitle entity.
func (stuo *SalesTeamUpdateOne) SetTitle(s *SalesTitle) *SalesTeamUpdateOne {
	return stuo.SetTitleID(s.ID)
}

// Mutation returns the SalesTeamMutation object of the builder.
func (stuo *SalesTeamUpdateOne) Mutation() *SalesTeamMutation {
	return stuo.mutation
}

// ClearSubordinates clears all "subordinates" edges to the SalesTeam entity.
func (stuo *SalesTeamUpdateOne) ClearSubordinates() *SalesTeamUpdateOne {
	stuo.mutation.ClearSubordinates()
	return stuo
}

// RemoveSubordinateIDs removes the "subordinates" edge to SalesTeam entities by IDs.
func (stuo *SalesTeamUpdateOne) RemoveSubordinateIDs(ids ...int) *SalesTeamUpdateOne {
	stuo.mutation.RemoveSubordinateIDs(ids...)
	return stuo
}

// RemoveSubordinates removes "subordinates" edges to SalesTeam entities.
func (stuo *SalesTeamUpdateOne) RemoveSubordinates(s ...*SalesTeam) *SalesTeamUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveSubordinateIDs(ids...)
}

// ClearSupervisor clears the "supervisor" edge to the SalesTeam entity.
func (stuo *SalesTeamUpdateOne) ClearSupervisor() *SalesTeamUpdateOne {
	stuo.mutation.ClearSupervisor()
	return stuo
}

// ClearInternalUser clears the "internal_user" edge to the InternalUser entity.
func (stuo *SalesTeamUpdateOne) ClearInternalUser() *SalesTeamUpdateOne {
	stuo.mutation.ClearInternalUser()
	return stuo
}

// ClearTitle clears the "title" edge to the SalesTitle entity.
func (stuo *SalesTeamUpdateOne) ClearTitle() *SalesTeamUpdateOne {
	stuo.mutation.ClearTitle()
	return stuo
}

// Where appends a list predicates to the SalesTeamUpdate builder.
func (stuo *SalesTeamUpdateOne) Where(ps ...predicate.SalesTeam) *SalesTeamUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SalesTeamUpdateOne) Select(field string, fields ...string) *SalesTeamUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SalesTeam entity.
func (stuo *SalesTeamUpdateOne) Save(ctx context.Context) (*SalesTeam, error) {
	stuo.defaults()
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SalesTeamUpdateOne) SaveX(ctx context.Context) *SalesTeam {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SalesTeamUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SalesTeamUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *SalesTeamUpdateOne) defaults() {
	if _, ok := stuo.mutation.UpdatedTime(); !ok && !stuo.mutation.UpdatedTimeCleared() {
		v := salesteam.UpdateDefaultUpdatedTime()
		stuo.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuo *SalesTeamUpdateOne) check() error {
	if _, ok := stuo.mutation.InternalUserID(); stuo.mutation.InternalUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SalesTeam.internal_user"`)
	}
	return nil
}

func (stuo *SalesTeamUpdateOne) sqlSave(ctx context.Context) (_node *SalesTeam, err error) {
	if err := stuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(salesteam.Table, salesteam.Columns, sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SalesTeam.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, salesteam.FieldID)
		for _, f := range fields {
			if !salesteam.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != salesteam.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.CreatedTime(); ok {
		_spec.SetField(salesteam.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := stuo.mutation.UpdatedTime(); ok {
		_spec.SetField(salesteam.FieldUpdatedTime, field.TypeTime, value)
	}
	if stuo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(salesteam.FieldUpdatedTime, field.TypeTime)
	}
	if stuo.mutation.SubordinatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   salesteam.SubordinatesTable,
			Columns: []string{salesteam.SubordinatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedSubordinatesIDs(); len(nodes) > 0 && !stuo.mutation.SubordinatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   salesteam.SubordinatesTable,
			Columns: []string{salesteam.SubordinatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.SubordinatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   salesteam.SubordinatesTable,
			Columns: []string{salesteam.SubordinatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.SupervisorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   salesteam.SupervisorTable,
			Columns: []string{salesteam.SupervisorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.SupervisorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   salesteam.SupervisorTable,
			Columns: []string{salesteam.SupervisorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.InternalUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   salesteam.InternalUserTable,
			Columns: []string{salesteam.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.InternalUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   salesteam.InternalUserTable,
			Columns: []string{salesteam.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.TitleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   salesteam.TitleTable,
			Columns: []string{salesteam.TitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salestitle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.TitleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   salesteam.TitleTable,
			Columns: []string{salesteam.TitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salestitle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SalesTeam{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{salesteam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
