// Code generated by ent, DO NOT EDIT.

package customer

import (
	"coresamples/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldUserID, v))
}

// CustomerType applies equality check predicate on the "customer_type" field. It's identical to CustomerTypeEQ.
func CustomerType(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerType, v))
}

// CustomerFirstName applies equality check predicate on the "customer_first_name" field. It's identical to CustomerFirstNameEQ.
func CustomerFirstName(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerFirstName, v))
}

// CustomerLastName applies equality check predicate on the "customer_last_name" field. It's identical to CustomerLastNameEQ.
func CustomerLastName(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerLastName, v))
}

// CustomerMiddleName applies equality check predicate on the "customer_middle_name" field. It's identical to CustomerMiddleNameEQ.
func CustomerMiddleName(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerMiddleName, v))
}

// CustomerTypeID applies equality check predicate on the "customer_type_id" field. It's identical to CustomerTypeIDEQ.
func CustomerTypeID(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerTypeID, v))
}

// CustomerSuffix applies equality check predicate on the "customer_suffix" field. It's identical to CustomerSuffixEQ.
func CustomerSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerSuffix, v))
}

// CustomerSamplesReceived applies equality check predicate on the "customer_samples_received" field. It's identical to CustomerSamplesReceivedEQ.
func CustomerSamplesReceived(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerSamplesReceived, v))
}

// CustomerRequestSubmitTime applies equality check predicate on the "customer_request_submit_time" field. It's identical to CustomerRequestSubmitTimeEQ.
func CustomerRequestSubmitTime(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerRequestSubmitTime, v))
}

// CustomerSignupTime applies equality check predicate on the "customer_signup_time" field. It's identical to CustomerSignupTimeEQ.
func CustomerSignupTime(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerSignupTime, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldIsActive, v))
}

// SalesID applies equality check predicate on the "sales_id" field. It's identical to SalesIDEQ.
func SalesID(v int) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldSalesID, v))
}

// CustomerNpiNumber applies equality check predicate on the "customer_npi_number" field. It's identical to CustomerNpiNumberEQ.
func CustomerNpiNumber(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerNpiNumber, v))
}

// ReferralSource applies equality check predicate on the "referral_source" field. It's identical to ReferralSourceEQ.
func ReferralSource(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldReferralSource, v))
}

// OrderPlacementAllowed applies equality check predicate on the "order_placement_allowed" field. It's identical to OrderPlacementAllowedEQ.
func OrderPlacementAllowed(v bool) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldOrderPlacementAllowed, v))
}

// BetaProgramEnabled applies equality check predicate on the "beta_program_enabled" field. It's identical to BetaProgramEnabledEQ.
func BetaProgramEnabled(v bool) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldBetaProgramEnabled, v))
}

// OnboardingQuestionnaireFilledOn applies equality check predicate on the "onboarding_questionnaire_filled_on" field. It's identical to OnboardingQuestionnaireFilledOnEQ.
func OnboardingQuestionnaireFilledOn(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldOnboardingQuestionnaireFilledOn, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldUserID))
}

// CustomerTypeEQ applies the EQ predicate on the "customer_type" field.
func CustomerTypeEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerType, v))
}

// CustomerTypeNEQ applies the NEQ predicate on the "customer_type" field.
func CustomerTypeNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldCustomerType, v))
}

// CustomerTypeIn applies the In predicate on the "customer_type" field.
func CustomerTypeIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldCustomerType, vs...))
}

// CustomerTypeNotIn applies the NotIn predicate on the "customer_type" field.
func CustomerTypeNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldCustomerType, vs...))
}

// CustomerTypeGT applies the GT predicate on the "customer_type" field.
func CustomerTypeGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldCustomerType, v))
}

// CustomerTypeGTE applies the GTE predicate on the "customer_type" field.
func CustomerTypeGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldCustomerType, v))
}

// CustomerTypeLT applies the LT predicate on the "customer_type" field.
func CustomerTypeLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldCustomerType, v))
}

// CustomerTypeLTE applies the LTE predicate on the "customer_type" field.
func CustomerTypeLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldCustomerType, v))
}

// CustomerTypeContains applies the Contains predicate on the "customer_type" field.
func CustomerTypeContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldCustomerType, v))
}

// CustomerTypeHasPrefix applies the HasPrefix predicate on the "customer_type" field.
func CustomerTypeHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldCustomerType, v))
}

// CustomerTypeHasSuffix applies the HasSuffix predicate on the "customer_type" field.
func CustomerTypeHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldCustomerType, v))
}

// CustomerTypeEqualFold applies the EqualFold predicate on the "customer_type" field.
func CustomerTypeEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldCustomerType, v))
}

// CustomerTypeContainsFold applies the ContainsFold predicate on the "customer_type" field.
func CustomerTypeContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldCustomerType, v))
}

// CustomerFirstNameEQ applies the EQ predicate on the "customer_first_name" field.
func CustomerFirstNameEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerFirstName, v))
}

// CustomerFirstNameNEQ applies the NEQ predicate on the "customer_first_name" field.
func CustomerFirstNameNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldCustomerFirstName, v))
}

// CustomerFirstNameIn applies the In predicate on the "customer_first_name" field.
func CustomerFirstNameIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldCustomerFirstName, vs...))
}

// CustomerFirstNameNotIn applies the NotIn predicate on the "customer_first_name" field.
func CustomerFirstNameNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldCustomerFirstName, vs...))
}

// CustomerFirstNameGT applies the GT predicate on the "customer_first_name" field.
func CustomerFirstNameGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldCustomerFirstName, v))
}

// CustomerFirstNameGTE applies the GTE predicate on the "customer_first_name" field.
func CustomerFirstNameGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldCustomerFirstName, v))
}

// CustomerFirstNameLT applies the LT predicate on the "customer_first_name" field.
func CustomerFirstNameLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldCustomerFirstName, v))
}

// CustomerFirstNameLTE applies the LTE predicate on the "customer_first_name" field.
func CustomerFirstNameLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldCustomerFirstName, v))
}

// CustomerFirstNameContains applies the Contains predicate on the "customer_first_name" field.
func CustomerFirstNameContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldCustomerFirstName, v))
}

// CustomerFirstNameHasPrefix applies the HasPrefix predicate on the "customer_first_name" field.
func CustomerFirstNameHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldCustomerFirstName, v))
}

// CustomerFirstNameHasSuffix applies the HasSuffix predicate on the "customer_first_name" field.
func CustomerFirstNameHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldCustomerFirstName, v))
}

// CustomerFirstNameIsNil applies the IsNil predicate on the "customer_first_name" field.
func CustomerFirstNameIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldCustomerFirstName))
}

// CustomerFirstNameNotNil applies the NotNil predicate on the "customer_first_name" field.
func CustomerFirstNameNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldCustomerFirstName))
}

// CustomerFirstNameEqualFold applies the EqualFold predicate on the "customer_first_name" field.
func CustomerFirstNameEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldCustomerFirstName, v))
}

// CustomerFirstNameContainsFold applies the ContainsFold predicate on the "customer_first_name" field.
func CustomerFirstNameContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldCustomerFirstName, v))
}

// CustomerLastNameEQ applies the EQ predicate on the "customer_last_name" field.
func CustomerLastNameEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerLastName, v))
}

// CustomerLastNameNEQ applies the NEQ predicate on the "customer_last_name" field.
func CustomerLastNameNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldCustomerLastName, v))
}

// CustomerLastNameIn applies the In predicate on the "customer_last_name" field.
func CustomerLastNameIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldCustomerLastName, vs...))
}

// CustomerLastNameNotIn applies the NotIn predicate on the "customer_last_name" field.
func CustomerLastNameNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldCustomerLastName, vs...))
}

// CustomerLastNameGT applies the GT predicate on the "customer_last_name" field.
func CustomerLastNameGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldCustomerLastName, v))
}

// CustomerLastNameGTE applies the GTE predicate on the "customer_last_name" field.
func CustomerLastNameGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldCustomerLastName, v))
}

// CustomerLastNameLT applies the LT predicate on the "customer_last_name" field.
func CustomerLastNameLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldCustomerLastName, v))
}

// CustomerLastNameLTE applies the LTE predicate on the "customer_last_name" field.
func CustomerLastNameLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldCustomerLastName, v))
}

// CustomerLastNameContains applies the Contains predicate on the "customer_last_name" field.
func CustomerLastNameContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldCustomerLastName, v))
}

// CustomerLastNameHasPrefix applies the HasPrefix predicate on the "customer_last_name" field.
func CustomerLastNameHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldCustomerLastName, v))
}

// CustomerLastNameHasSuffix applies the HasSuffix predicate on the "customer_last_name" field.
func CustomerLastNameHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldCustomerLastName, v))
}

// CustomerLastNameIsNil applies the IsNil predicate on the "customer_last_name" field.
func CustomerLastNameIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldCustomerLastName))
}

// CustomerLastNameNotNil applies the NotNil predicate on the "customer_last_name" field.
func CustomerLastNameNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldCustomerLastName))
}

// CustomerLastNameEqualFold applies the EqualFold predicate on the "customer_last_name" field.
func CustomerLastNameEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldCustomerLastName, v))
}

// CustomerLastNameContainsFold applies the ContainsFold predicate on the "customer_last_name" field.
func CustomerLastNameContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldCustomerLastName, v))
}

// CustomerMiddleNameEQ applies the EQ predicate on the "customer_middle_name" field.
func CustomerMiddleNameEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerMiddleName, v))
}

// CustomerMiddleNameNEQ applies the NEQ predicate on the "customer_middle_name" field.
func CustomerMiddleNameNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldCustomerMiddleName, v))
}

// CustomerMiddleNameIn applies the In predicate on the "customer_middle_name" field.
func CustomerMiddleNameIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldCustomerMiddleName, vs...))
}

// CustomerMiddleNameNotIn applies the NotIn predicate on the "customer_middle_name" field.
func CustomerMiddleNameNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldCustomerMiddleName, vs...))
}

// CustomerMiddleNameGT applies the GT predicate on the "customer_middle_name" field.
func CustomerMiddleNameGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldCustomerMiddleName, v))
}

// CustomerMiddleNameGTE applies the GTE predicate on the "customer_middle_name" field.
func CustomerMiddleNameGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldCustomerMiddleName, v))
}

// CustomerMiddleNameLT applies the LT predicate on the "customer_middle_name" field.
func CustomerMiddleNameLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldCustomerMiddleName, v))
}

// CustomerMiddleNameLTE applies the LTE predicate on the "customer_middle_name" field.
func CustomerMiddleNameLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldCustomerMiddleName, v))
}

// CustomerMiddleNameContains applies the Contains predicate on the "customer_middle_name" field.
func CustomerMiddleNameContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldCustomerMiddleName, v))
}

// CustomerMiddleNameHasPrefix applies the HasPrefix predicate on the "customer_middle_name" field.
func CustomerMiddleNameHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldCustomerMiddleName, v))
}

// CustomerMiddleNameHasSuffix applies the HasSuffix predicate on the "customer_middle_name" field.
func CustomerMiddleNameHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldCustomerMiddleName, v))
}

// CustomerMiddleNameIsNil applies the IsNil predicate on the "customer_middle_name" field.
func CustomerMiddleNameIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldCustomerMiddleName))
}

// CustomerMiddleNameNotNil applies the NotNil predicate on the "customer_middle_name" field.
func CustomerMiddleNameNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldCustomerMiddleName))
}

// CustomerMiddleNameEqualFold applies the EqualFold predicate on the "customer_middle_name" field.
func CustomerMiddleNameEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldCustomerMiddleName, v))
}

// CustomerMiddleNameContainsFold applies the ContainsFold predicate on the "customer_middle_name" field.
func CustomerMiddleNameContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldCustomerMiddleName, v))
}

// CustomerTypeIDEQ applies the EQ predicate on the "customer_type_id" field.
func CustomerTypeIDEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerTypeID, v))
}

// CustomerTypeIDNEQ applies the NEQ predicate on the "customer_type_id" field.
func CustomerTypeIDNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldCustomerTypeID, v))
}

// CustomerTypeIDIn applies the In predicate on the "customer_type_id" field.
func CustomerTypeIDIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldCustomerTypeID, vs...))
}

// CustomerTypeIDNotIn applies the NotIn predicate on the "customer_type_id" field.
func CustomerTypeIDNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldCustomerTypeID, vs...))
}

// CustomerTypeIDGT applies the GT predicate on the "customer_type_id" field.
func CustomerTypeIDGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldCustomerTypeID, v))
}

// CustomerTypeIDGTE applies the GTE predicate on the "customer_type_id" field.
func CustomerTypeIDGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldCustomerTypeID, v))
}

// CustomerTypeIDLT applies the LT predicate on the "customer_type_id" field.
func CustomerTypeIDLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldCustomerTypeID, v))
}

// CustomerTypeIDLTE applies the LTE predicate on the "customer_type_id" field.
func CustomerTypeIDLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldCustomerTypeID, v))
}

// CustomerTypeIDContains applies the Contains predicate on the "customer_type_id" field.
func CustomerTypeIDContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldCustomerTypeID, v))
}

// CustomerTypeIDHasPrefix applies the HasPrefix predicate on the "customer_type_id" field.
func CustomerTypeIDHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldCustomerTypeID, v))
}

// CustomerTypeIDHasSuffix applies the HasSuffix predicate on the "customer_type_id" field.
func CustomerTypeIDHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldCustomerTypeID, v))
}

// CustomerTypeIDIsNil applies the IsNil predicate on the "customer_type_id" field.
func CustomerTypeIDIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldCustomerTypeID))
}

// CustomerTypeIDNotNil applies the NotNil predicate on the "customer_type_id" field.
func CustomerTypeIDNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldCustomerTypeID))
}

// CustomerTypeIDEqualFold applies the EqualFold predicate on the "customer_type_id" field.
func CustomerTypeIDEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldCustomerTypeID, v))
}

// CustomerTypeIDContainsFold applies the ContainsFold predicate on the "customer_type_id" field.
func CustomerTypeIDContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldCustomerTypeID, v))
}

// CustomerSuffixEQ applies the EQ predicate on the "customer_suffix" field.
func CustomerSuffixEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerSuffix, v))
}

// CustomerSuffixNEQ applies the NEQ predicate on the "customer_suffix" field.
func CustomerSuffixNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldCustomerSuffix, v))
}

// CustomerSuffixIn applies the In predicate on the "customer_suffix" field.
func CustomerSuffixIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldCustomerSuffix, vs...))
}

// CustomerSuffixNotIn applies the NotIn predicate on the "customer_suffix" field.
func CustomerSuffixNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldCustomerSuffix, vs...))
}

// CustomerSuffixGT applies the GT predicate on the "customer_suffix" field.
func CustomerSuffixGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldCustomerSuffix, v))
}

// CustomerSuffixGTE applies the GTE predicate on the "customer_suffix" field.
func CustomerSuffixGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldCustomerSuffix, v))
}

// CustomerSuffixLT applies the LT predicate on the "customer_suffix" field.
func CustomerSuffixLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldCustomerSuffix, v))
}

// CustomerSuffixLTE applies the LTE predicate on the "customer_suffix" field.
func CustomerSuffixLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldCustomerSuffix, v))
}

// CustomerSuffixContains applies the Contains predicate on the "customer_suffix" field.
func CustomerSuffixContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldCustomerSuffix, v))
}

// CustomerSuffixHasPrefix applies the HasPrefix predicate on the "customer_suffix" field.
func CustomerSuffixHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldCustomerSuffix, v))
}

// CustomerSuffixHasSuffix applies the HasSuffix predicate on the "customer_suffix" field.
func CustomerSuffixHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldCustomerSuffix, v))
}

// CustomerSuffixIsNil applies the IsNil predicate on the "customer_suffix" field.
func CustomerSuffixIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldCustomerSuffix))
}

// CustomerSuffixNotNil applies the NotNil predicate on the "customer_suffix" field.
func CustomerSuffixNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldCustomerSuffix))
}

// CustomerSuffixEqualFold applies the EqualFold predicate on the "customer_suffix" field.
func CustomerSuffixEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldCustomerSuffix, v))
}

// CustomerSuffixContainsFold applies the ContainsFold predicate on the "customer_suffix" field.
func CustomerSuffixContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldCustomerSuffix, v))
}

// CustomerSamplesReceivedEQ applies the EQ predicate on the "customer_samples_received" field.
func CustomerSamplesReceivedEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerSamplesReceived, v))
}

// CustomerSamplesReceivedNEQ applies the NEQ predicate on the "customer_samples_received" field.
func CustomerSamplesReceivedNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldCustomerSamplesReceived, v))
}

// CustomerSamplesReceivedIn applies the In predicate on the "customer_samples_received" field.
func CustomerSamplesReceivedIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldCustomerSamplesReceived, vs...))
}

// CustomerSamplesReceivedNotIn applies the NotIn predicate on the "customer_samples_received" field.
func CustomerSamplesReceivedNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldCustomerSamplesReceived, vs...))
}

// CustomerSamplesReceivedGT applies the GT predicate on the "customer_samples_received" field.
func CustomerSamplesReceivedGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldCustomerSamplesReceived, v))
}

// CustomerSamplesReceivedGTE applies the GTE predicate on the "customer_samples_received" field.
func CustomerSamplesReceivedGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldCustomerSamplesReceived, v))
}

// CustomerSamplesReceivedLT applies the LT predicate on the "customer_samples_received" field.
func CustomerSamplesReceivedLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldCustomerSamplesReceived, v))
}

// CustomerSamplesReceivedLTE applies the LTE predicate on the "customer_samples_received" field.
func CustomerSamplesReceivedLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldCustomerSamplesReceived, v))
}

// CustomerSamplesReceivedContains applies the Contains predicate on the "customer_samples_received" field.
func CustomerSamplesReceivedContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldCustomerSamplesReceived, v))
}

// CustomerSamplesReceivedHasPrefix applies the HasPrefix predicate on the "customer_samples_received" field.
func CustomerSamplesReceivedHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldCustomerSamplesReceived, v))
}

// CustomerSamplesReceivedHasSuffix applies the HasSuffix predicate on the "customer_samples_received" field.
func CustomerSamplesReceivedHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldCustomerSamplesReceived, v))
}

// CustomerSamplesReceivedIsNil applies the IsNil predicate on the "customer_samples_received" field.
func CustomerSamplesReceivedIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldCustomerSamplesReceived))
}

// CustomerSamplesReceivedNotNil applies the NotNil predicate on the "customer_samples_received" field.
func CustomerSamplesReceivedNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldCustomerSamplesReceived))
}

// CustomerSamplesReceivedEqualFold applies the EqualFold predicate on the "customer_samples_received" field.
func CustomerSamplesReceivedEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldCustomerSamplesReceived, v))
}

// CustomerSamplesReceivedContainsFold applies the ContainsFold predicate on the "customer_samples_received" field.
func CustomerSamplesReceivedContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldCustomerSamplesReceived, v))
}

// CustomerRequestSubmitTimeEQ applies the EQ predicate on the "customer_request_submit_time" field.
func CustomerRequestSubmitTimeEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerRequestSubmitTime, v))
}

// CustomerRequestSubmitTimeNEQ applies the NEQ predicate on the "customer_request_submit_time" field.
func CustomerRequestSubmitTimeNEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldCustomerRequestSubmitTime, v))
}

// CustomerRequestSubmitTimeIn applies the In predicate on the "customer_request_submit_time" field.
func CustomerRequestSubmitTimeIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldCustomerRequestSubmitTime, vs...))
}

// CustomerRequestSubmitTimeNotIn applies the NotIn predicate on the "customer_request_submit_time" field.
func CustomerRequestSubmitTimeNotIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldCustomerRequestSubmitTime, vs...))
}

// CustomerRequestSubmitTimeGT applies the GT predicate on the "customer_request_submit_time" field.
func CustomerRequestSubmitTimeGT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldCustomerRequestSubmitTime, v))
}

// CustomerRequestSubmitTimeGTE applies the GTE predicate on the "customer_request_submit_time" field.
func CustomerRequestSubmitTimeGTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldCustomerRequestSubmitTime, v))
}

// CustomerRequestSubmitTimeLT applies the LT predicate on the "customer_request_submit_time" field.
func CustomerRequestSubmitTimeLT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldCustomerRequestSubmitTime, v))
}

// CustomerRequestSubmitTimeLTE applies the LTE predicate on the "customer_request_submit_time" field.
func CustomerRequestSubmitTimeLTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldCustomerRequestSubmitTime, v))
}

// CustomerRequestSubmitTimeIsNil applies the IsNil predicate on the "customer_request_submit_time" field.
func CustomerRequestSubmitTimeIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldCustomerRequestSubmitTime))
}

// CustomerRequestSubmitTimeNotNil applies the NotNil predicate on the "customer_request_submit_time" field.
func CustomerRequestSubmitTimeNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldCustomerRequestSubmitTime))
}

// CustomerSignupTimeEQ applies the EQ predicate on the "customer_signup_time" field.
func CustomerSignupTimeEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerSignupTime, v))
}

// CustomerSignupTimeNEQ applies the NEQ predicate on the "customer_signup_time" field.
func CustomerSignupTimeNEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldCustomerSignupTime, v))
}

// CustomerSignupTimeIn applies the In predicate on the "customer_signup_time" field.
func CustomerSignupTimeIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldCustomerSignupTime, vs...))
}

// CustomerSignupTimeNotIn applies the NotIn predicate on the "customer_signup_time" field.
func CustomerSignupTimeNotIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldCustomerSignupTime, vs...))
}

// CustomerSignupTimeGT applies the GT predicate on the "customer_signup_time" field.
func CustomerSignupTimeGT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldCustomerSignupTime, v))
}

// CustomerSignupTimeGTE applies the GTE predicate on the "customer_signup_time" field.
func CustomerSignupTimeGTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldCustomerSignupTime, v))
}

// CustomerSignupTimeLT applies the LT predicate on the "customer_signup_time" field.
func CustomerSignupTimeLT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldCustomerSignupTime, v))
}

// CustomerSignupTimeLTE applies the LTE predicate on the "customer_signup_time" field.
func CustomerSignupTimeLTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldCustomerSignupTime, v))
}

// CustomerSignupTimeIsNil applies the IsNil predicate on the "customer_signup_time" field.
func CustomerSignupTimeIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldCustomerSignupTime))
}

// CustomerSignupTimeNotNil applies the NotNil predicate on the "customer_signup_time" field.
func CustomerSignupTimeNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldCustomerSignupTime))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldIsActive, v))
}

// SalesIDEQ applies the EQ predicate on the "sales_id" field.
func SalesIDEQ(v int) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldSalesID, v))
}

// SalesIDNEQ applies the NEQ predicate on the "sales_id" field.
func SalesIDNEQ(v int) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldSalesID, v))
}

// SalesIDIn applies the In predicate on the "sales_id" field.
func SalesIDIn(vs ...int) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldSalesID, vs...))
}

// SalesIDNotIn applies the NotIn predicate on the "sales_id" field.
func SalesIDNotIn(vs ...int) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldSalesID, vs...))
}

// SalesIDIsNil applies the IsNil predicate on the "sales_id" field.
func SalesIDIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldSalesID))
}

// SalesIDNotNil applies the NotNil predicate on the "sales_id" field.
func SalesIDNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldSalesID))
}

// CustomerNpiNumberEQ applies the EQ predicate on the "customer_npi_number" field.
func CustomerNpiNumberEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCustomerNpiNumber, v))
}

// CustomerNpiNumberNEQ applies the NEQ predicate on the "customer_npi_number" field.
func CustomerNpiNumberNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldCustomerNpiNumber, v))
}

// CustomerNpiNumberIn applies the In predicate on the "customer_npi_number" field.
func CustomerNpiNumberIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldCustomerNpiNumber, vs...))
}

// CustomerNpiNumberNotIn applies the NotIn predicate on the "customer_npi_number" field.
func CustomerNpiNumberNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldCustomerNpiNumber, vs...))
}

// CustomerNpiNumberGT applies the GT predicate on the "customer_npi_number" field.
func CustomerNpiNumberGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldCustomerNpiNumber, v))
}

// CustomerNpiNumberGTE applies the GTE predicate on the "customer_npi_number" field.
func CustomerNpiNumberGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldCustomerNpiNumber, v))
}

// CustomerNpiNumberLT applies the LT predicate on the "customer_npi_number" field.
func CustomerNpiNumberLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldCustomerNpiNumber, v))
}

// CustomerNpiNumberLTE applies the LTE predicate on the "customer_npi_number" field.
func CustomerNpiNumberLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldCustomerNpiNumber, v))
}

// CustomerNpiNumberContains applies the Contains predicate on the "customer_npi_number" field.
func CustomerNpiNumberContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldCustomerNpiNumber, v))
}

// CustomerNpiNumberHasPrefix applies the HasPrefix predicate on the "customer_npi_number" field.
func CustomerNpiNumberHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldCustomerNpiNumber, v))
}

// CustomerNpiNumberHasSuffix applies the HasSuffix predicate on the "customer_npi_number" field.
func CustomerNpiNumberHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldCustomerNpiNumber, v))
}

// CustomerNpiNumberIsNil applies the IsNil predicate on the "customer_npi_number" field.
func CustomerNpiNumberIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldCustomerNpiNumber))
}

// CustomerNpiNumberNotNil applies the NotNil predicate on the "customer_npi_number" field.
func CustomerNpiNumberNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldCustomerNpiNumber))
}

// CustomerNpiNumberEqualFold applies the EqualFold predicate on the "customer_npi_number" field.
func CustomerNpiNumberEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldCustomerNpiNumber, v))
}

// CustomerNpiNumberContainsFold applies the ContainsFold predicate on the "customer_npi_number" field.
func CustomerNpiNumberContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldCustomerNpiNumber, v))
}

// ReferralSourceEQ applies the EQ predicate on the "referral_source" field.
func ReferralSourceEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldReferralSource, v))
}

// ReferralSourceNEQ applies the NEQ predicate on the "referral_source" field.
func ReferralSourceNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldReferralSource, v))
}

// ReferralSourceIn applies the In predicate on the "referral_source" field.
func ReferralSourceIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldReferralSource, vs...))
}

// ReferralSourceNotIn applies the NotIn predicate on the "referral_source" field.
func ReferralSourceNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldReferralSource, vs...))
}

// ReferralSourceGT applies the GT predicate on the "referral_source" field.
func ReferralSourceGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldReferralSource, v))
}

// ReferralSourceGTE applies the GTE predicate on the "referral_source" field.
func ReferralSourceGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldReferralSource, v))
}

// ReferralSourceLT applies the LT predicate on the "referral_source" field.
func ReferralSourceLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldReferralSource, v))
}

// ReferralSourceLTE applies the LTE predicate on the "referral_source" field.
func ReferralSourceLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldReferralSource, v))
}

// ReferralSourceContains applies the Contains predicate on the "referral_source" field.
func ReferralSourceContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldReferralSource, v))
}

// ReferralSourceHasPrefix applies the HasPrefix predicate on the "referral_source" field.
func ReferralSourceHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldReferralSource, v))
}

// ReferralSourceHasSuffix applies the HasSuffix predicate on the "referral_source" field.
func ReferralSourceHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldReferralSource, v))
}

// ReferralSourceIsNil applies the IsNil predicate on the "referral_source" field.
func ReferralSourceIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldReferralSource))
}

// ReferralSourceNotNil applies the NotNil predicate on the "referral_source" field.
func ReferralSourceNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldReferralSource))
}

// ReferralSourceEqualFold applies the EqualFold predicate on the "referral_source" field.
func ReferralSourceEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldReferralSource, v))
}

// ReferralSourceContainsFold applies the ContainsFold predicate on the "referral_source" field.
func ReferralSourceContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldReferralSource, v))
}

// OrderPlacementAllowedEQ applies the EQ predicate on the "order_placement_allowed" field.
func OrderPlacementAllowedEQ(v bool) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldOrderPlacementAllowed, v))
}

// OrderPlacementAllowedNEQ applies the NEQ predicate on the "order_placement_allowed" field.
func OrderPlacementAllowedNEQ(v bool) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldOrderPlacementAllowed, v))
}

// OrderPlacementAllowedIsNil applies the IsNil predicate on the "order_placement_allowed" field.
func OrderPlacementAllowedIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldOrderPlacementAllowed))
}

// OrderPlacementAllowedNotNil applies the NotNil predicate on the "order_placement_allowed" field.
func OrderPlacementAllowedNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldOrderPlacementAllowed))
}

// BetaProgramEnabledEQ applies the EQ predicate on the "beta_program_enabled" field.
func BetaProgramEnabledEQ(v bool) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldBetaProgramEnabled, v))
}

// BetaProgramEnabledNEQ applies the NEQ predicate on the "beta_program_enabled" field.
func BetaProgramEnabledNEQ(v bool) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldBetaProgramEnabled, v))
}

// BetaProgramEnabledIsNil applies the IsNil predicate on the "beta_program_enabled" field.
func BetaProgramEnabledIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldBetaProgramEnabled))
}

// BetaProgramEnabledNotNil applies the NotNil predicate on the "beta_program_enabled" field.
func BetaProgramEnabledNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldBetaProgramEnabled))
}

// OnboardingQuestionnaireFilledOnEQ applies the EQ predicate on the "onboarding_questionnaire_filled_on" field.
func OnboardingQuestionnaireFilledOnEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldOnboardingQuestionnaireFilledOn, v))
}

// OnboardingQuestionnaireFilledOnNEQ applies the NEQ predicate on the "onboarding_questionnaire_filled_on" field.
func OnboardingQuestionnaireFilledOnNEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldOnboardingQuestionnaireFilledOn, v))
}

// OnboardingQuestionnaireFilledOnIn applies the In predicate on the "onboarding_questionnaire_filled_on" field.
func OnboardingQuestionnaireFilledOnIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldOnboardingQuestionnaireFilledOn, vs...))
}

// OnboardingQuestionnaireFilledOnNotIn applies the NotIn predicate on the "onboarding_questionnaire_filled_on" field.
func OnboardingQuestionnaireFilledOnNotIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldOnboardingQuestionnaireFilledOn, vs...))
}

// OnboardingQuestionnaireFilledOnGT applies the GT predicate on the "onboarding_questionnaire_filled_on" field.
func OnboardingQuestionnaireFilledOnGT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldOnboardingQuestionnaireFilledOn, v))
}

// OnboardingQuestionnaireFilledOnGTE applies the GTE predicate on the "onboarding_questionnaire_filled_on" field.
func OnboardingQuestionnaireFilledOnGTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldOnboardingQuestionnaireFilledOn, v))
}

// OnboardingQuestionnaireFilledOnLT applies the LT predicate on the "onboarding_questionnaire_filled_on" field.
func OnboardingQuestionnaireFilledOnLT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldOnboardingQuestionnaireFilledOn, v))
}

// OnboardingQuestionnaireFilledOnLTE applies the LTE predicate on the "onboarding_questionnaire_filled_on" field.
func OnboardingQuestionnaireFilledOnLTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldOnboardingQuestionnaireFilledOn, v))
}

// OnboardingQuestionnaireFilledOnIsNil applies the IsNil predicate on the "onboarding_questionnaire_filled_on" field.
func OnboardingQuestionnaireFilledOnIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldOnboardingQuestionnaireFilledOn))
}

// OnboardingQuestionnaireFilledOnNotNil applies the NotNil predicate on the "onboarding_questionnaire_filled_on" field.
func OnboardingQuestionnaireFilledOnNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldOnboardingQuestionnaireFilledOn))
}

// HasSamples applies the HasEdge predicate on the "samples" edge.
func HasSamples() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SamplesTable, SamplesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSamplesWith applies the HasEdge predicate on the "samples" edge with a given conditions (other predicates).
func HasSamplesWith(preds ...predicate.Sample) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newSamplesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomerContacts applies the HasEdge predicate on the "customer_contacts" edge.
func HasCustomerContacts() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CustomerContactsTable, CustomerContactsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerContactsWith applies the HasEdge predicate on the "customer_contacts" edge with a given conditions (other predicates).
func HasCustomerContactsWith(preds ...predicate.Contact) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newCustomerContactsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomerAddresses applies the HasEdge predicate on the "customer_addresses" edge.
func HasCustomerAddresses() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CustomerAddressesTable, CustomerAddressesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerAddressesWith applies the HasEdge predicate on the "customer_addresses" edge with a given conditions (other predicates).
func HasCustomerAddressesWith(preds ...predicate.Address) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newCustomerAddressesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClinics applies the HasEdge predicate on the "clinics" edge.
func HasClinics() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ClinicsTable, ClinicsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicsWith applies the HasEdge predicate on the "clinics" edge with a given conditions (other predicates).
func HasClinicsWith(preds ...predicate.Clinic) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newClinicsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSales applies the HasEdge predicate on the "sales" edge.
func HasSales() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SalesTable, SalesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSalesWith applies the HasEdge predicate on the "sales" edge with a given conditions (other predicates).
func HasSalesWith(preds ...predicate.InternalUser) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newSalesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.OrderInfo) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCurrentPatients applies the HasEdge predicate on the "current_patients" edge.
func HasCurrentPatients() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CurrentPatientsTable, CurrentPatientsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrentPatientsWith applies the HasEdge predicate on the "current_patients" edge with a given conditions (other predicates).
func HasCurrentPatientsWith(preds ...predicate.Patient) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newCurrentPatientsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatients applies the HasEdge predicate on the "patients" edge.
func HasPatients() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PatientsTable, PatientsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientsWith applies the HasEdge predicate on the "patients" edge with a given conditions (other predicates).
func HasPatientsWith(preds ...predicate.Patient) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newPatientsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomerBetaProgramParticipations applies the HasEdge predicate on the "customer_beta_program_participations" edge.
func HasCustomerBetaProgramParticipations() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CustomerBetaProgramParticipationsTable, CustomerBetaProgramParticipationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerBetaProgramParticipationsWith applies the HasEdge predicate on the "customer_beta_program_participations" edge with a given conditions (other predicates).
func HasCustomerBetaProgramParticipationsWith(preds ...predicate.BetaProgramParticipation) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newCustomerBetaProgramParticipationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomerSettingsOnClinics applies the HasEdge predicate on the "customer_settings_on_clinics" edge.
func HasCustomerSettingsOnClinics() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CustomerSettingsOnClinicsTable, CustomerSettingsOnClinicsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerSettingsOnClinicsWith applies the HasEdge predicate on the "customer_settings_on_clinics" edge with a given conditions (other predicates).
func HasCustomerSettingsOnClinicsWith(preds ...predicate.CustomerSettingOnClinics) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newCustomerSettingsOnClinicsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomerAddressesOnClinics applies the HasEdge predicate on the "customer_addresses_on_clinics" edge.
func HasCustomerAddressesOnClinics() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CustomerAddressesOnClinicsTable, CustomerAddressesOnClinicsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerAddressesOnClinicsWith applies the HasEdge predicate on the "customer_addresses_on_clinics" edge with a given conditions (other predicates).
func HasCustomerAddressesOnClinicsWith(preds ...predicate.CustomerAddressOnClinics) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newCustomerAddressesOnClinicsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomerContactsOnClinics applies the HasEdge predicate on the "customer_contacts_on_clinics" edge.
func HasCustomerContactsOnClinics() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CustomerContactsOnClinicsTable, CustomerContactsOnClinicsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerContactsOnClinicsWith applies the HasEdge predicate on the "customer_contacts_on_clinics" edge with a given conditions (other predicates).
func HasCustomerContactsOnClinicsWith(preds ...predicate.CustomerContactOnClinics) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newCustomerContactsOnClinicsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Customer) predicate.Customer {
	return predicate.Customer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Customer) predicate.Customer {
	return predicate.Customer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Customer) predicate.Customer {
	return predicate.Customer(sql.NotPredicates(p))
}
