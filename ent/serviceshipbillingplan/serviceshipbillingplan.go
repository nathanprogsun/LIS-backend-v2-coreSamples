// Code generated by ent, DO NOT EDIT.

package serviceshipbillingplan

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the serviceshipbillingplan type in the database.
	Label = "serviceship_billing_plan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFee holds the string denoting the fee field in the database.
	FieldFee = "fee"
	// FieldBillingCycle holds the string denoting the billing_cycle field in the database.
	FieldBillingCycle = "billing_cycle"
	// FieldInterval holds the string denoting the interval field in the database.
	FieldInterval = "interval"
	// FieldEffectiveTime holds the string denoting the effective_time field in the database.
	FieldEffectiveTime = "effective_time"
	// EdgeAccountSubscription holds the string denoting the account_subscription edge name in mutations.
	EdgeAccountSubscription = "account_subscription"
	// EdgeServiceship holds the string denoting the serviceship edge name in mutations.
	EdgeServiceship = "serviceship"
	// Table holds the table name of the serviceshipbillingplan in the database.
	Table = "serviceship_billing_plan"
	// AccountSubscriptionTable is the table that holds the account_subscription relation/edge.
	AccountSubscriptionTable = "account_subscription"
	// AccountSubscriptionInverseTable is the table name for the AccountSubscription entity.
	// It exists in this package in order to avoid circular dependency with the "accountsubscription" package.
	AccountSubscriptionInverseTable = "account_subscription"
	// AccountSubscriptionColumn is the table column denoting the account_subscription relation/edge.
	AccountSubscriptionColumn = "serviceship_billing_plan_account_subscription"
	// ServiceshipTable is the table that holds the serviceship relation/edge.
	ServiceshipTable = "serviceship_billing_plan"
	// ServiceshipInverseTable is the table name for the Serviceship entity.
	// It exists in this package in order to avoid circular dependency with the "serviceship" package.
	ServiceshipInverseTable = "serviceship"
	// ServiceshipColumn is the table column denoting the serviceship relation/edge.
	ServiceshipColumn = "serviceship_serviceship_billing_plan"
)

// Columns holds all SQL columns for serviceshipbillingplan fields.
var Columns = []string{
	FieldID,
	FieldFee,
	FieldBillingCycle,
	FieldInterval,
	FieldEffectiveTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "serviceship_billing_plan"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"serviceship_serviceship_billing_plan",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// BillingCycleValidator is a validator for the "billing_cycle" field. It is called by the builders before save.
	BillingCycleValidator func(int32) error
)

// Interval defines the type for the "interval" enum field.
type Interval string

// IntervalMonthly is the default value of the Interval enum.
const DefaultInterval = IntervalMonthly

// Interval values.
const (
	IntervalMonthly Interval = "monthly"
	IntervalDaily   Interval = "daily"
)

func (i Interval) String() string {
	return string(i)
}

// IntervalValidator is a validator for the "interval" field enum values. It is called by the builders before save.
func IntervalValidator(i Interval) error {
	switch i {
	case IntervalMonthly, IntervalDaily:
		return nil
	default:
		return fmt.Errorf("serviceshipbillingplan: invalid enum value for interval field: %q", i)
	}
}

// OrderOption defines the ordering options for the ServiceshipBillingPlan queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFee orders the results by the fee field.
func ByFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFee, opts...).ToFunc()
}

// ByBillingCycle orders the results by the billing_cycle field.
func ByBillingCycle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingCycle, opts...).ToFunc()
}

// ByInterval orders the results by the interval field.
func ByInterval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInterval, opts...).ToFunc()
}

// ByEffectiveTime orders the results by the effective_time field.
func ByEffectiveTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffectiveTime, opts...).ToFunc()
}

// ByAccountSubscriptionCount orders the results by account_subscription count.
func ByAccountSubscriptionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAccountSubscriptionStep(), opts...)
	}
}

// ByAccountSubscription orders the results by account_subscription terms.
func ByAccountSubscription(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountSubscriptionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByServiceshipField orders the results by serviceship field.
func ByServiceshipField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceshipStep(), sql.OrderByField(field, opts...))
	}
}
func newAccountSubscriptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountSubscriptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AccountSubscriptionTable, AccountSubscriptionColumn),
	)
}
func newServiceshipStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceshipInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ServiceshipTable, ServiceshipColumn),
	)
}
