// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/tubeinstructions"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TubeInstructions is the model entity for the TubeInstructions schema.
type TubeInstructions struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TubeNameEnum holds the value of the "tube_name_enum" field.
	TubeNameEnum string `json:"tube_name_enum,omitempty"`
	// SortOrder holds the value of the "sort_order" field.
	SortOrder int `json:"sort_order,omitempty"`
	// TubeInstructions holds the value of the "tube_instructions" field.
	TubeInstructions string `json:"tube_instructions,omitempty"`
	// TubeName holds the value of the "tube_name" field.
	TubeName string `json:"tube_name,omitempty"`
	// ShippingBox holds the value of the "shipping_box" field.
	ShippingBox string `json:"shipping_box,omitempty"`
	// TransferTubesToSend holds the value of the "transfer_tubes_to_send" field.
	TransferTubesToSend string `json:"transfer_tubes_to_send,omitempty"`
	// BloodType holds the value of the "blood_type" field.
	BloodType    bool `json:"blood_type,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TubeInstructions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tubeinstructions.FieldBloodType:
			values[i] = new(sql.NullBool)
		case tubeinstructions.FieldID, tubeinstructions.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case tubeinstructions.FieldTubeNameEnum, tubeinstructions.FieldTubeInstructions, tubeinstructions.FieldTubeName, tubeinstructions.FieldShippingBox, tubeinstructions.FieldTransferTubesToSend:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TubeInstructions fields.
func (ti *TubeInstructions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tubeinstructions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ti.ID = int(value.Int64)
		case tubeinstructions.FieldTubeNameEnum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tube_name_enum", values[i])
			} else if value.Valid {
				ti.TubeNameEnum = value.String
			}
		case tubeinstructions.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				ti.SortOrder = int(value.Int64)
			}
		case tubeinstructions.FieldTubeInstructions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tube_instructions", values[i])
			} else if value.Valid {
				ti.TubeInstructions = value.String
			}
		case tubeinstructions.FieldTubeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tube_name", values[i])
			} else if value.Valid {
				ti.TubeName = value.String
			}
		case tubeinstructions.FieldShippingBox:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_box", values[i])
			} else if value.Valid {
				ti.ShippingBox = value.String
			}
		case tubeinstructions.FieldTransferTubesToSend:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transfer_tubes_to_send", values[i])
			} else if value.Valid {
				ti.TransferTubesToSend = value.String
			}
		case tubeinstructions.FieldBloodType:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field blood_type", values[i])
			} else if value.Valid {
				ti.BloodType = value.Bool
			}
		default:
			ti.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TubeInstructions.
// This includes values selected through modifiers, order, etc.
func (ti *TubeInstructions) Value(name string) (ent.Value, error) {
	return ti.selectValues.Get(name)
}

// Update returns a builder for updating this TubeInstructions.
// Note that you need to call TubeInstructions.Unwrap() before calling this method if this TubeInstructions
// was returned from a transaction, and the transaction was committed or rolled back.
func (ti *TubeInstructions) Update() *TubeInstructionsUpdateOne {
	return NewTubeInstructionsClient(ti.config).UpdateOne(ti)
}

// Unwrap unwraps the TubeInstructions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ti *TubeInstructions) Unwrap() *TubeInstructions {
	_tx, ok := ti.config.driver.(*txDriver)
	if !ok {
		panic("ent: TubeInstructions is not a transactional entity")
	}
	ti.config.driver = _tx.drv
	return ti
}

// String implements the fmt.Stringer.
func (ti *TubeInstructions) String() string {
	var builder strings.Builder
	builder.WriteString("TubeInstructions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ti.ID))
	builder.WriteString("tube_name_enum=")
	builder.WriteString(ti.TubeNameEnum)
	builder.WriteString(", ")
	builder.WriteString("sort_order=")
	builder.WriteString(fmt.Sprintf("%v", ti.SortOrder))
	builder.WriteString(", ")
	builder.WriteString("tube_instructions=")
	builder.WriteString(ti.TubeInstructions)
	builder.WriteString(", ")
	builder.WriteString("tube_name=")
	builder.WriteString(ti.TubeName)
	builder.WriteString(", ")
	builder.WriteString("shipping_box=")
	builder.WriteString(ti.ShippingBox)
	builder.WriteString(", ")
	builder.WriteString("transfer_tubes_to_send=")
	builder.WriteString(ti.TransferTubesToSend)
	builder.WriteString(", ")
	builder.WriteString("blood_type=")
	builder.WriteString(fmt.Sprintf("%v", ti.BloodType))
	builder.WriteByte(')')
	return builder.String()
}

// TubeInstructionsSlice is a parsable slice of TubeInstructions.
type TubeInstructionsSlice []*TubeInstructions
