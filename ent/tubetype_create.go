// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/sampletype"
	"coresamples/ent/test"
	"coresamples/ent/tube"
	"coresamples/ent/tubetype"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TubeTypeCreate is the builder for creating a TubeType entity.
type TubeTypeCreate struct {
	config
	mutation *TubeTypeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTubeName sets the "tube_name" field.
func (ttc *TubeTypeCreate) SetTubeName(s string) *TubeTypeCreate {
	ttc.mutation.SetTubeName(s)
	return ttc
}

// SetTubeTypeEnum sets the "tube_type_enum" field.
func (ttc *TubeTypeCreate) SetTubeTypeEnum(s string) *TubeTypeCreate {
	ttc.mutation.SetTubeTypeEnum(s)
	return ttc
}

// SetTubeTypeSymbol sets the "tube_type_symbol" field.
func (ttc *TubeTypeCreate) SetTubeTypeSymbol(s string) *TubeTypeCreate {
	ttc.mutation.SetTubeTypeSymbol(s)
	return ttc
}

// AddTubeIDs adds the "tube" edge to the Tube entity by IDs.
func (ttc *TubeTypeCreate) AddTubeIDs(ids ...int) *TubeTypeCreate {
	ttc.mutation.AddTubeIDs(ids...)
	return ttc
}

// AddTube adds the "tube" edges to the Tube entity.
func (ttc *TubeTypeCreate) AddTube(t ...*Tube) *TubeTypeCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttc.AddTubeIDs(ids...)
}

// AddSampleTypeIDs adds the "sample_types" edge to the SampleType entity by IDs.
func (ttc *TubeTypeCreate) AddSampleTypeIDs(ids ...int) *TubeTypeCreate {
	ttc.mutation.AddSampleTypeIDs(ids...)
	return ttc
}

// AddSampleTypes adds the "sample_types" edges to the SampleType entity.
func (ttc *TubeTypeCreate) AddSampleTypes(s ...*SampleType) *TubeTypeCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ttc.AddSampleTypeIDs(ids...)
}

// AddTestIDs adds the "tests" edge to the Test entity by IDs.
func (ttc *TubeTypeCreate) AddTestIDs(ids ...int) *TubeTypeCreate {
	ttc.mutation.AddTestIDs(ids...)
	return ttc
}

// AddTests adds the "tests" edges to the Test entity.
func (ttc *TubeTypeCreate) AddTests(t ...*Test) *TubeTypeCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttc.AddTestIDs(ids...)
}

// Mutation returns the TubeTypeMutation object of the builder.
func (ttc *TubeTypeCreate) Mutation() *TubeTypeMutation {
	return ttc.mutation
}

// Save creates the TubeType in the database.
func (ttc *TubeTypeCreate) Save(ctx context.Context) (*TubeType, error) {
	return withHooks(ctx, ttc.sqlSave, ttc.mutation, ttc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TubeTypeCreate) SaveX(ctx context.Context) *TubeType {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TubeTypeCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TubeTypeCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TubeTypeCreate) check() error {
	if _, ok := ttc.mutation.TubeName(); !ok {
		return &ValidationError{Name: "tube_name", err: errors.New(`ent: missing required field "TubeType.tube_name"`)}
	}
	if _, ok := ttc.mutation.TubeTypeEnum(); !ok {
		return &ValidationError{Name: "tube_type_enum", err: errors.New(`ent: missing required field "TubeType.tube_type_enum"`)}
	}
	if _, ok := ttc.mutation.TubeTypeSymbol(); !ok {
		return &ValidationError{Name: "tube_type_symbol", err: errors.New(`ent: missing required field "TubeType.tube_type_symbol"`)}
	}
	return nil
}

func (ttc *TubeTypeCreate) sqlSave(ctx context.Context) (*TubeType, error) {
	if err := ttc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ttc.mutation.id = &_node.ID
	ttc.mutation.done = true
	return _node, nil
}

func (ttc *TubeTypeCreate) createSpec() (*TubeType, *sqlgraph.CreateSpec) {
	var (
		_node = &TubeType{config: ttc.config}
		_spec = sqlgraph.NewCreateSpec(tubetype.Table, sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ttc.conflict
	if value, ok := ttc.mutation.TubeName(); ok {
		_spec.SetField(tubetype.FieldTubeName, field.TypeString, value)
		_node.TubeName = value
	}
	if value, ok := ttc.mutation.TubeTypeEnum(); ok {
		_spec.SetField(tubetype.FieldTubeTypeEnum, field.TypeString, value)
		_node.TubeTypeEnum = value
	}
	if value, ok := ttc.mutation.TubeTypeSymbol(); ok {
		_spec.SetField(tubetype.FieldTubeTypeSymbol, field.TypeString, value)
		_node.TubeTypeSymbol = value
	}
	if nodes := ttc.mutation.TubeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tubetype.TubeTable,
			Columns: tubetype.TubePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tube.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.SampleTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tubetype.SampleTypesTable,
			Columns: tubetype.SampleTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sampletype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.TestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tubetype.TestsTable,
			Columns: tubetype.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TubeType.Create().
//		SetTubeName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TubeTypeUpsert) {
//			SetTubeName(v+v).
//		}).
//		Exec(ctx)
func (ttc *TubeTypeCreate) OnConflict(opts ...sql.ConflictOption) *TubeTypeUpsertOne {
	ttc.conflict = opts
	return &TubeTypeUpsertOne{
		create: ttc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TubeType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ttc *TubeTypeCreate) OnConflictColumns(columns ...string) *TubeTypeUpsertOne {
	ttc.conflict = append(ttc.conflict, sql.ConflictColumns(columns...))
	return &TubeTypeUpsertOne{
		create: ttc,
	}
}

type (
	// TubeTypeUpsertOne is the builder for "upsert"-ing
	//  one TubeType node.
	TubeTypeUpsertOne struct {
		create *TubeTypeCreate
	}

	// TubeTypeUpsert is the "OnConflict" setter.
	TubeTypeUpsert struct {
		*sql.UpdateSet
	}
)

// SetTubeName sets the "tube_name" field.
func (u *TubeTypeUpsert) SetTubeName(v string) *TubeTypeUpsert {
	u.Set(tubetype.FieldTubeName, v)
	return u
}

// UpdateTubeName sets the "tube_name" field to the value that was provided on create.
func (u *TubeTypeUpsert) UpdateTubeName() *TubeTypeUpsert {
	u.SetExcluded(tubetype.FieldTubeName)
	return u
}

// SetTubeTypeEnum sets the "tube_type_enum" field.
func (u *TubeTypeUpsert) SetTubeTypeEnum(v string) *TubeTypeUpsert {
	u.Set(tubetype.FieldTubeTypeEnum, v)
	return u
}

// UpdateTubeTypeEnum sets the "tube_type_enum" field to the value that was provided on create.
func (u *TubeTypeUpsert) UpdateTubeTypeEnum() *TubeTypeUpsert {
	u.SetExcluded(tubetype.FieldTubeTypeEnum)
	return u
}

// SetTubeTypeSymbol sets the "tube_type_symbol" field.
func (u *TubeTypeUpsert) SetTubeTypeSymbol(v string) *TubeTypeUpsert {
	u.Set(tubetype.FieldTubeTypeSymbol, v)
	return u
}

// UpdateTubeTypeSymbol sets the "tube_type_symbol" field to the value that was provided on create.
func (u *TubeTypeUpsert) UpdateTubeTypeSymbol() *TubeTypeUpsert {
	u.SetExcluded(tubetype.FieldTubeTypeSymbol)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TubeType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TubeTypeUpsertOne) UpdateNewValues() *TubeTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TubeType.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TubeTypeUpsertOne) Ignore() *TubeTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TubeTypeUpsertOne) DoNothing() *TubeTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TubeTypeCreate.OnConflict
// documentation for more info.
func (u *TubeTypeUpsertOne) Update(set func(*TubeTypeUpsert)) *TubeTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TubeTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetTubeName sets the "tube_name" field.
func (u *TubeTypeUpsertOne) SetTubeName(v string) *TubeTypeUpsertOne {
	return u.Update(func(s *TubeTypeUpsert) {
		s.SetTubeName(v)
	})
}

// UpdateTubeName sets the "tube_name" field to the value that was provided on create.
func (u *TubeTypeUpsertOne) UpdateTubeName() *TubeTypeUpsertOne {
	return u.Update(func(s *TubeTypeUpsert) {
		s.UpdateTubeName()
	})
}

// SetTubeTypeEnum sets the "tube_type_enum" field.
func (u *TubeTypeUpsertOne) SetTubeTypeEnum(v string) *TubeTypeUpsertOne {
	return u.Update(func(s *TubeTypeUpsert) {
		s.SetTubeTypeEnum(v)
	})
}

// UpdateTubeTypeEnum sets the "tube_type_enum" field to the value that was provided on create.
func (u *TubeTypeUpsertOne) UpdateTubeTypeEnum() *TubeTypeUpsertOne {
	return u.Update(func(s *TubeTypeUpsert) {
		s.UpdateTubeTypeEnum()
	})
}

// SetTubeTypeSymbol sets the "tube_type_symbol" field.
func (u *TubeTypeUpsertOne) SetTubeTypeSymbol(v string) *TubeTypeUpsertOne {
	return u.Update(func(s *TubeTypeUpsert) {
		s.SetTubeTypeSymbol(v)
	})
}

// UpdateTubeTypeSymbol sets the "tube_type_symbol" field to the value that was provided on create.
func (u *TubeTypeUpsertOne) UpdateTubeTypeSymbol() *TubeTypeUpsertOne {
	return u.Update(func(s *TubeTypeUpsert) {
		s.UpdateTubeTypeSymbol()
	})
}

// Exec executes the query.
func (u *TubeTypeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TubeTypeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TubeTypeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TubeTypeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TubeTypeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TubeTypeCreateBulk is the builder for creating many TubeType entities in bulk.
type TubeTypeCreateBulk struct {
	config
	err      error
	builders []*TubeTypeCreate
	conflict []sql.ConflictOption
}

// Save creates the TubeType entities in the database.
func (ttcb *TubeTypeCreateBulk) Save(ctx context.Context) ([]*TubeType, error) {
	if ttcb.err != nil {
		return nil, ttcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TubeType, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TubeTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ttcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TubeTypeCreateBulk) SaveX(ctx context.Context) []*TubeType {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TubeTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TubeTypeCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TubeType.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TubeTypeUpsert) {
//			SetTubeName(v+v).
//		}).
//		Exec(ctx)
func (ttcb *TubeTypeCreateBulk) OnConflict(opts ...sql.ConflictOption) *TubeTypeUpsertBulk {
	ttcb.conflict = opts
	return &TubeTypeUpsertBulk{
		create: ttcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TubeType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ttcb *TubeTypeCreateBulk) OnConflictColumns(columns ...string) *TubeTypeUpsertBulk {
	ttcb.conflict = append(ttcb.conflict, sql.ConflictColumns(columns...))
	return &TubeTypeUpsertBulk{
		create: ttcb,
	}
}

// TubeTypeUpsertBulk is the builder for "upsert"-ing
// a bulk of TubeType nodes.
type TubeTypeUpsertBulk struct {
	create *TubeTypeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TubeType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TubeTypeUpsertBulk) UpdateNewValues() *TubeTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TubeType.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TubeTypeUpsertBulk) Ignore() *TubeTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TubeTypeUpsertBulk) DoNothing() *TubeTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TubeTypeCreateBulk.OnConflict
// documentation for more info.
func (u *TubeTypeUpsertBulk) Update(set func(*TubeTypeUpsert)) *TubeTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TubeTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetTubeName sets the "tube_name" field.
func (u *TubeTypeUpsertBulk) SetTubeName(v string) *TubeTypeUpsertBulk {
	return u.Update(func(s *TubeTypeUpsert) {
		s.SetTubeName(v)
	})
}

// UpdateTubeName sets the "tube_name" field to the value that was provided on create.
func (u *TubeTypeUpsertBulk) UpdateTubeName() *TubeTypeUpsertBulk {
	return u.Update(func(s *TubeTypeUpsert) {
		s.UpdateTubeName()
	})
}

// SetTubeTypeEnum sets the "tube_type_enum" field.
func (u *TubeTypeUpsertBulk) SetTubeTypeEnum(v string) *TubeTypeUpsertBulk {
	return u.Update(func(s *TubeTypeUpsert) {
		s.SetTubeTypeEnum(v)
	})
}

// UpdateTubeTypeEnum sets the "tube_type_enum" field to the value that was provided on create.
func (u *TubeTypeUpsertBulk) UpdateTubeTypeEnum() *TubeTypeUpsertBulk {
	return u.Update(func(s *TubeTypeUpsert) {
		s.UpdateTubeTypeEnum()
	})
}

// SetTubeTypeSymbol sets the "tube_type_symbol" field.
func (u *TubeTypeUpsertBulk) SetTubeTypeSymbol(v string) *TubeTypeUpsertBulk {
	return u.Update(func(s *TubeTypeUpsert) {
		s.SetTubeTypeSymbol(v)
	})
}

// UpdateTubeTypeSymbol sets the "tube_type_symbol" field to the value that was provided on create.
func (u *TubeTypeUpsertBulk) UpdateTubeTypeSymbol() *TubeTypeUpsertBulk {
	return u.Update(func(s *TubeTypeUpsert) {
		s.UpdateTubeTypeSymbol()
	})
}

// Exec executes the query.
func (u *TubeTypeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TubeTypeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TubeTypeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TubeTypeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
