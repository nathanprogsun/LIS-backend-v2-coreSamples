// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/address"
	"coresamples/ent/clinic"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/patient"
	"coresamples/ent/patientweightheight"
	"coresamples/ent/sample"
	"coresamples/ent/setting"
	"coresamples/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PatientCreate is the builder for creating a Patient entity.
type PatientCreate struct {
	config
	mutation *PatientMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (pc *PatientCreate) SetUserID(i int) *PatientCreate {
	pc.mutation.SetUserID(i)
	return pc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pc *PatientCreate) SetNillableUserID(i *int) *PatientCreate {
	if i != nil {
		pc.SetUserID(*i)
	}
	return pc
}

// SetPatientType sets the "patient_type" field.
func (pc *PatientCreate) SetPatientType(s string) *PatientCreate {
	pc.mutation.SetPatientType(s)
	return pc
}

// SetNillablePatientType sets the "patient_type" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientType(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientType(*s)
	}
	return pc
}

// SetOriginalPatientID sets the "original_patient_id" field.
func (pc *PatientCreate) SetOriginalPatientID(i int) *PatientCreate {
	pc.mutation.SetOriginalPatientID(i)
	return pc
}

// SetNillableOriginalPatientID sets the "original_patient_id" field if the given value is not nil.
func (pc *PatientCreate) SetNillableOriginalPatientID(i *int) *PatientCreate {
	if i != nil {
		pc.SetOriginalPatientID(*i)
	}
	return pc
}

// SetPatientGender sets the "patient_gender" field.
func (pc *PatientCreate) SetPatientGender(s string) *PatientCreate {
	pc.mutation.SetPatientGender(s)
	return pc
}

// SetNillablePatientGender sets the "patient_gender" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientGender(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientGender(*s)
	}
	return pc
}

// SetPatientFirstName sets the "patient_first_name" field.
func (pc *PatientCreate) SetPatientFirstName(s string) *PatientCreate {
	pc.mutation.SetPatientFirstName(s)
	return pc
}

// SetNillablePatientFirstName sets the "patient_first_name" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientFirstName(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientFirstName(*s)
	}
	return pc
}

// SetPatientLastName sets the "patient_last_name" field.
func (pc *PatientCreate) SetPatientLastName(s string) *PatientCreate {
	pc.mutation.SetPatientLastName(s)
	return pc
}

// SetNillablePatientLastName sets the "patient_last_name" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientLastName(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientLastName(*s)
	}
	return pc
}

// SetPatientMiddleName sets the "patient_middle_name" field.
func (pc *PatientCreate) SetPatientMiddleName(s string) *PatientCreate {
	pc.mutation.SetPatientMiddleName(s)
	return pc
}

// SetNillablePatientMiddleName sets the "patient_middle_name" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientMiddleName(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientMiddleName(*s)
	}
	return pc
}

// SetPatientMedicalRecordNumber sets the "patient_medical_record_number" field.
func (pc *PatientCreate) SetPatientMedicalRecordNumber(s string) *PatientCreate {
	pc.mutation.SetPatientMedicalRecordNumber(s)
	return pc
}

// SetNillablePatientMedicalRecordNumber sets the "patient_medical_record_number" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientMedicalRecordNumber(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientMedicalRecordNumber(*s)
	}
	return pc
}

// SetPatientLegalFirstname sets the "patient_legal_firstname" field.
func (pc *PatientCreate) SetPatientLegalFirstname(s string) *PatientCreate {
	pc.mutation.SetPatientLegalFirstname(s)
	return pc
}

// SetNillablePatientLegalFirstname sets the "patient_legal_firstname" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientLegalFirstname(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientLegalFirstname(*s)
	}
	return pc
}

// SetPatientLegalLastname sets the "patient_legal_lastname" field.
func (pc *PatientCreate) SetPatientLegalLastname(s string) *PatientCreate {
	pc.mutation.SetPatientLegalLastname(s)
	return pc
}

// SetNillablePatientLegalLastname sets the "patient_legal_lastname" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientLegalLastname(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientLegalLastname(*s)
	}
	return pc
}

// SetPatientHonorific sets the "patient_honorific" field.
func (pc *PatientCreate) SetPatientHonorific(s string) *PatientCreate {
	pc.mutation.SetPatientHonorific(s)
	return pc
}

// SetNillablePatientHonorific sets the "patient_honorific" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientHonorific(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientHonorific(*s)
	}
	return pc
}

// SetPatientSuffix sets the "patient_suffix" field.
func (pc *PatientCreate) SetPatientSuffix(s string) *PatientCreate {
	pc.mutation.SetPatientSuffix(s)
	return pc
}

// SetNillablePatientSuffix sets the "patient_suffix" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientSuffix(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientSuffix(*s)
	}
	return pc
}

// SetPatientMarital sets the "patient_marital" field.
func (pc *PatientCreate) SetPatientMarital(s string) *PatientCreate {
	pc.mutation.SetPatientMarital(s)
	return pc
}

// SetNillablePatientMarital sets the "patient_marital" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientMarital(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientMarital(*s)
	}
	return pc
}

// SetPatientEthnicity sets the "patient_ethnicity" field.
func (pc *PatientCreate) SetPatientEthnicity(s string) *PatientCreate {
	pc.mutation.SetPatientEthnicity(s)
	return pc
}

// SetNillablePatientEthnicity sets the "patient_ethnicity" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientEthnicity(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientEthnicity(*s)
	}
	return pc
}

// SetPatientBirthdate sets the "patient_birthdate" field.
func (pc *PatientCreate) SetPatientBirthdate(s string) *PatientCreate {
	pc.mutation.SetPatientBirthdate(s)
	return pc
}

// SetNillablePatientBirthdate sets the "patient_birthdate" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientBirthdate(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientBirthdate(*s)
	}
	return pc
}

// SetPatientSsn sets the "patient_ssn" field.
func (pc *PatientCreate) SetPatientSsn(s string) *PatientCreate {
	pc.mutation.SetPatientSsn(s)
	return pc
}

// SetNillablePatientSsn sets the "patient_ssn" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientSsn(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientSsn(*s)
	}
	return pc
}

// SetPatientHeight sets the "patient_height" field.
func (pc *PatientCreate) SetPatientHeight(s string) *PatientCreate {
	pc.mutation.SetPatientHeight(s)
	return pc
}

// SetNillablePatientHeight sets the "patient_height" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientHeight(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientHeight(*s)
	}
	return pc
}

// SetPatientWeight sets the "patient_weight" field.
func (pc *PatientCreate) SetPatientWeight(s string) *PatientCreate {
	pc.mutation.SetPatientWeight(s)
	return pc
}

// SetNillablePatientWeight sets the "patient_weight" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientWeight(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientWeight(*s)
	}
	return pc
}

// SetOfficeallyID sets the "officeally_id" field.
func (pc *PatientCreate) SetOfficeallyID(i int) *PatientCreate {
	pc.mutation.SetOfficeallyID(i)
	return pc
}

// SetNillableOfficeallyID sets the "officeally_id" field if the given value is not nil.
func (pc *PatientCreate) SetNillableOfficeallyID(i *int) *PatientCreate {
	if i != nil {
		pc.SetOfficeallyID(*i)
	}
	return pc
}

// SetPatientNyWaiveFormIssueStatus sets the "patient_ny_waive_form_issue_status" field.
func (pc *PatientCreate) SetPatientNyWaiveFormIssueStatus(s string) *PatientCreate {
	pc.mutation.SetPatientNyWaiveFormIssueStatus(s)
	return pc
}

// SetNillablePatientNyWaiveFormIssueStatus sets the "patient_ny_waive_form_issue_status" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientNyWaiveFormIssueStatus(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientNyWaiveFormIssueStatus(*s)
	}
	return pc
}

// SetPatientCreateTime sets the "patient_create_time" field.
func (pc *PatientCreate) SetPatientCreateTime(t time.Time) *PatientCreate {
	pc.mutation.SetPatientCreateTime(t)
	return pc
}

// SetNillablePatientCreateTime sets the "patient_create_time" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientCreateTime(t *time.Time) *PatientCreate {
	if t != nil {
		pc.SetPatientCreateTime(*t)
	}
	return pc
}

// SetCustomerID sets the "customer_id" field.
func (pc *PatientCreate) SetCustomerID(i int) *PatientCreate {
	pc.mutation.SetCustomerID(i)
	return pc
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (pc *PatientCreate) SetNillableCustomerID(i *int) *PatientCreate {
	if i != nil {
		pc.SetCustomerID(*i)
	}
	return pc
}

// SetIsActive sets the "isActive" field.
func (pc *PatientCreate) SetIsActive(b bool) *PatientCreate {
	pc.mutation.SetIsActive(b)
	return pc
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (pc *PatientCreate) SetNillableIsActive(b *bool) *PatientCreate {
	if b != nil {
		pc.SetIsActive(*b)
	}
	return pc
}

// SetPatientFlagged sets the "patient_flagged" field.
func (pc *PatientCreate) SetPatientFlagged(b bool) *PatientCreate {
	pc.mutation.SetPatientFlagged(b)
	return pc
}

// SetNillablePatientFlagged sets the "patient_flagged" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientFlagged(b *bool) *PatientCreate {
	if b != nil {
		pc.SetPatientFlagged(*b)
	}
	return pc
}

// SetPatientServiceDate sets the "patient_service_date" field.
func (pc *PatientCreate) SetPatientServiceDate(t time.Time) *PatientCreate {
	pc.mutation.SetPatientServiceDate(t)
	return pc
}

// SetNillablePatientServiceDate sets the "patient_service_date" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientServiceDate(t *time.Time) *PatientCreate {
	if t != nil {
		pc.SetPatientServiceDate(*t)
	}
	return pc
}

// SetPatientDescription sets the "patient_description" field.
func (pc *PatientCreate) SetPatientDescription(s string) *PatientCreate {
	pc.mutation.SetPatientDescription(s)
	return pc
}

// SetNillablePatientDescription sets the "patient_description" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientDescription(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientDescription(*s)
	}
	return pc
}

// SetPatientLanguage sets the "patient_language" field.
func (pc *PatientCreate) SetPatientLanguage(s string) *PatientCreate {
	pc.mutation.SetPatientLanguage(s)
	return pc
}

// SetNillablePatientLanguage sets the "patient_language" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientLanguage(s *string) *PatientCreate {
	if s != nil {
		pc.SetPatientLanguage(*s)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PatientCreate) SetID(i int) *PatientCreate {
	pc.mutation.SetID(i)
	return pc
}

// SetCurrentCustomerID sets the "current_customer" edge to the Customer entity by ID.
func (pc *PatientCreate) SetCurrentCustomerID(id int) *PatientCreate {
	pc.mutation.SetCurrentCustomerID(id)
	return pc
}

// SetNillableCurrentCustomerID sets the "current_customer" edge to the Customer entity by ID if the given value is not nil.
func (pc *PatientCreate) SetNillableCurrentCustomerID(id *int) *PatientCreate {
	if id != nil {
		pc = pc.SetCurrentCustomerID(*id)
	}
	return pc
}

// SetCurrentCustomer sets the "current_customer" edge to the Customer entity.
func (pc *PatientCreate) SetCurrentCustomer(c *Customer) *PatientCreate {
	return pc.SetCurrentCustomerID(c.ID)
}

// AddPatientCustomerIDs adds the "patient_customers" edge to the Customer entity by IDs.
func (pc *PatientCreate) AddPatientCustomerIDs(ids ...int) *PatientCreate {
	pc.mutation.AddPatientCustomerIDs(ids...)
	return pc
}

// AddPatientCustomers adds the "patient_customers" edges to the Customer entity.
func (pc *PatientCreate) AddPatientCustomers(c ...*Customer) *PatientCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddPatientCustomerIDs(ids...)
}

// AddSampleIDs adds the "samples" edge to the Sample entity by IDs.
func (pc *PatientCreate) AddSampleIDs(ids ...int) *PatientCreate {
	pc.mutation.AddSampleIDs(ids...)
	return pc
}

// AddSamples adds the "samples" edges to the Sample entity.
func (pc *PatientCreate) AddSamples(s ...*Sample) *PatientCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddSampleIDs(ids...)
}

// AddPatientContactIDs adds the "patient_contacts" edge to the Contact entity by IDs.
func (pc *PatientCreate) AddPatientContactIDs(ids ...int) *PatientCreate {
	pc.mutation.AddPatientContactIDs(ids...)
	return pc
}

// AddPatientContacts adds the "patient_contacts" edges to the Contact entity.
func (pc *PatientCreate) AddPatientContacts(c ...*Contact) *PatientCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddPatientContactIDs(ids...)
}

// AddPatientAddressIDs adds the "patient_addresses" edge to the Address entity by IDs.
func (pc *PatientCreate) AddPatientAddressIDs(ids ...int) *PatientCreate {
	pc.mutation.AddPatientAddressIDs(ids...)
	return pc
}

// AddPatientAddresses adds the "patient_addresses" edges to the Address entity.
func (pc *PatientCreate) AddPatientAddresses(a ...*Address) *PatientCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pc.AddPatientAddressIDs(ids...)
}

// AddPatientClinicIDs adds the "patient_clinics" edge to the Clinic entity by IDs.
func (pc *PatientCreate) AddPatientClinicIDs(ids ...int) *PatientCreate {
	pc.mutation.AddPatientClinicIDs(ids...)
	return pc
}

// AddPatientClinics adds the "patient_clinics" edges to the Clinic entity.
func (pc *PatientCreate) AddPatientClinics(c ...*Clinic) *PatientCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddPatientClinicIDs(ids...)
}

// SetUser sets the "user" edge to the User entity.
func (pc *PatientCreate) SetUser(u *User) *PatientCreate {
	return pc.SetUserID(u.ID)
}

// AddPatientWeightHeightHistoryIDs adds the "patient_weight_height_history" edge to the PatientWeightHeight entity by IDs.
func (pc *PatientCreate) AddPatientWeightHeightHistoryIDs(ids ...int) *PatientCreate {
	pc.mutation.AddPatientWeightHeightHistoryIDs(ids...)
	return pc
}

// AddPatientWeightHeightHistory adds the "patient_weight_height_history" edges to the PatientWeightHeight entity.
func (pc *PatientCreate) AddPatientWeightHeightHistory(p ...*PatientWeightHeight) *PatientCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPatientWeightHeightHistoryIDs(ids...)
}

// AddPatientSettingIDs adds the "patient_settings" edge to the Setting entity by IDs.
func (pc *PatientCreate) AddPatientSettingIDs(ids ...int) *PatientCreate {
	pc.mutation.AddPatientSettingIDs(ids...)
	return pc
}

// AddPatientSettings adds the "patient_settings" edges to the Setting entity.
func (pc *PatientCreate) AddPatientSettings(s ...*Setting) *PatientCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddPatientSettingIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (pc *PatientCreate) Mutation() *PatientMutation {
	return pc.mutation
}

// Save creates the Patient in the database.
func (pc *PatientCreate) Save(ctx context.Context) (*Patient, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PatientCreate) SaveX(ctx context.Context) *Patient {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PatientCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PatientCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PatientCreate) defaults() {
	if _, ok := pc.mutation.PatientType(); !ok {
		v := patient.DefaultPatientType
		pc.mutation.SetPatientType(v)
	}
	if _, ok := pc.mutation.PatientNyWaiveFormIssueStatus(); !ok {
		v := patient.DefaultPatientNyWaiveFormIssueStatus
		pc.mutation.SetPatientNyWaiveFormIssueStatus(v)
	}
	if _, ok := pc.mutation.PatientCreateTime(); !ok {
		v := patient.DefaultPatientCreateTime()
		pc.mutation.SetPatientCreateTime(v)
	}
	if _, ok := pc.mutation.IsActive(); !ok {
		v := patient.DefaultIsActive
		pc.mutation.SetIsActive(v)
	}
	if _, ok := pc.mutation.PatientFlagged(); !ok {
		v := patient.DefaultPatientFlagged
		pc.mutation.SetPatientFlagged(v)
	}
	if _, ok := pc.mutation.PatientLanguage(); !ok {
		v := patient.DefaultPatientLanguage
		pc.mutation.SetPatientLanguage(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PatientCreate) check() error {
	if _, ok := pc.mutation.PatientType(); !ok {
		return &ValidationError{Name: "patient_type", err: errors.New(`ent: missing required field "Patient.patient_type"`)}
	}
	if _, ok := pc.mutation.PatientNyWaiveFormIssueStatus(); !ok {
		return &ValidationError{Name: "patient_ny_waive_form_issue_status", err: errors.New(`ent: missing required field "Patient.patient_ny_waive_form_issue_status"`)}
	}
	if _, ok := pc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "isActive", err: errors.New(`ent: missing required field "Patient.isActive"`)}
	}
	if _, ok := pc.mutation.PatientFlagged(); !ok {
		return &ValidationError{Name: "patient_flagged", err: errors.New(`ent: missing required field "Patient.patient_flagged"`)}
	}
	return nil
}

func (pc *PatientCreate) sqlSave(ctx context.Context) (*Patient, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PatientCreate) createSpec() (*Patient, *sqlgraph.CreateSpec) {
	var (
		_node = &Patient{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(patient.Table, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.PatientType(); ok {
		_spec.SetField(patient.FieldPatientType, field.TypeString, value)
		_node.PatientType = value
	}
	if value, ok := pc.mutation.OriginalPatientID(); ok {
		_spec.SetField(patient.FieldOriginalPatientID, field.TypeInt, value)
		_node.OriginalPatientID = value
	}
	if value, ok := pc.mutation.PatientGender(); ok {
		_spec.SetField(patient.FieldPatientGender, field.TypeString, value)
		_node.PatientGender = value
	}
	if value, ok := pc.mutation.PatientFirstName(); ok {
		_spec.SetField(patient.FieldPatientFirstName, field.TypeString, value)
		_node.PatientFirstName = value
	}
	if value, ok := pc.mutation.PatientLastName(); ok {
		_spec.SetField(patient.FieldPatientLastName, field.TypeString, value)
		_node.PatientLastName = value
	}
	if value, ok := pc.mutation.PatientMiddleName(); ok {
		_spec.SetField(patient.FieldPatientMiddleName, field.TypeString, value)
		_node.PatientMiddleName = value
	}
	if value, ok := pc.mutation.PatientMedicalRecordNumber(); ok {
		_spec.SetField(patient.FieldPatientMedicalRecordNumber, field.TypeString, value)
		_node.PatientMedicalRecordNumber = value
	}
	if value, ok := pc.mutation.PatientLegalFirstname(); ok {
		_spec.SetField(patient.FieldPatientLegalFirstname, field.TypeString, value)
		_node.PatientLegalFirstname = value
	}
	if value, ok := pc.mutation.PatientLegalLastname(); ok {
		_spec.SetField(patient.FieldPatientLegalLastname, field.TypeString, value)
		_node.PatientLegalLastname = value
	}
	if value, ok := pc.mutation.PatientHonorific(); ok {
		_spec.SetField(patient.FieldPatientHonorific, field.TypeString, value)
		_node.PatientHonorific = value
	}
	if value, ok := pc.mutation.PatientSuffix(); ok {
		_spec.SetField(patient.FieldPatientSuffix, field.TypeString, value)
		_node.PatientSuffix = value
	}
	if value, ok := pc.mutation.PatientMarital(); ok {
		_spec.SetField(patient.FieldPatientMarital, field.TypeString, value)
		_node.PatientMarital = value
	}
	if value, ok := pc.mutation.PatientEthnicity(); ok {
		_spec.SetField(patient.FieldPatientEthnicity, field.TypeString, value)
		_node.PatientEthnicity = value
	}
	if value, ok := pc.mutation.PatientBirthdate(); ok {
		_spec.SetField(patient.FieldPatientBirthdate, field.TypeString, value)
		_node.PatientBirthdate = value
	}
	if value, ok := pc.mutation.PatientSsn(); ok {
		_spec.SetField(patient.FieldPatientSsn, field.TypeString, value)
		_node.PatientSsn = value
	}
	if value, ok := pc.mutation.PatientHeight(); ok {
		_spec.SetField(patient.FieldPatientHeight, field.TypeString, value)
		_node.PatientHeight = value
	}
	if value, ok := pc.mutation.PatientWeight(); ok {
		_spec.SetField(patient.FieldPatientWeight, field.TypeString, value)
		_node.PatientWeight = value
	}
	if value, ok := pc.mutation.OfficeallyID(); ok {
		_spec.SetField(patient.FieldOfficeallyID, field.TypeInt, value)
		_node.OfficeallyID = value
	}
	if value, ok := pc.mutation.PatientNyWaiveFormIssueStatus(); ok {
		_spec.SetField(patient.FieldPatientNyWaiveFormIssueStatus, field.TypeString, value)
		_node.PatientNyWaiveFormIssueStatus = value
	}
	if value, ok := pc.mutation.PatientCreateTime(); ok {
		_spec.SetField(patient.FieldPatientCreateTime, field.TypeTime, value)
		_node.PatientCreateTime = value
	}
	if value, ok := pc.mutation.IsActive(); ok {
		_spec.SetField(patient.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := pc.mutation.PatientFlagged(); ok {
		_spec.SetField(patient.FieldPatientFlagged, field.TypeBool, value)
		_node.PatientFlagged = value
	}
	if value, ok := pc.mutation.PatientServiceDate(); ok {
		_spec.SetField(patient.FieldPatientServiceDate, field.TypeTime, value)
		_node.PatientServiceDate = value
	}
	if value, ok := pc.mutation.PatientDescription(); ok {
		_spec.SetField(patient.FieldPatientDescription, field.TypeString, value)
		_node.PatientDescription = value
	}
	if value, ok := pc.mutation.PatientLanguage(); ok {
		_spec.SetField(patient.FieldPatientLanguage, field.TypeString, value)
		_node.PatientLanguage = value
	}
	if nodes := pc.mutation.CurrentCustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.CurrentCustomerTable,
			Columns: []string{patient.CurrentCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PatientCustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.PatientCustomersTable,
			Columns: patient.PatientCustomersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SamplesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.SamplesTable,
			Columns: []string{patient.SamplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PatientContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientContactsTable,
			Columns: []string{patient.PatientContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PatientAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientAddressesTable,
			Columns: []string{patient.PatientAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PatientClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.PatientClinicsTable,
			Columns: patient.PatientClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.UserTable,
			Columns: []string{patient.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PatientWeightHeightHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientWeightHeightHistoryTable,
			Columns: []string{patient.PatientWeightHeightHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patientweightheight.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PatientSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   patient.PatientSettingsTable,
			Columns: patient.PatientSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Patient.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PatientUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (pc *PatientCreate) OnConflict(opts ...sql.ConflictOption) *PatientUpsertOne {
	pc.conflict = opts
	return &PatientUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Patient.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PatientCreate) OnConflictColumns(columns ...string) *PatientUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PatientUpsertOne{
		create: pc,
	}
}

type (
	// PatientUpsertOne is the builder for "upsert"-ing
	//  one Patient node.
	PatientUpsertOne struct {
		create *PatientCreate
	}

	// PatientUpsert is the "OnConflict" setter.
	PatientUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *PatientUpsert) SetUserID(v int) *PatientUpsert {
	u.Set(patient.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PatientUpsert) UpdateUserID() *PatientUpsert {
	u.SetExcluded(patient.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *PatientUpsert) ClearUserID() *PatientUpsert {
	u.SetNull(patient.FieldUserID)
	return u
}

// SetPatientType sets the "patient_type" field.
func (u *PatientUpsert) SetPatientType(v string) *PatientUpsert {
	u.Set(patient.FieldPatientType, v)
	return u
}

// UpdatePatientType sets the "patient_type" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientType() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientType)
	return u
}

// SetOriginalPatientID sets the "original_patient_id" field.
func (u *PatientUpsert) SetOriginalPatientID(v int) *PatientUpsert {
	u.Set(patient.FieldOriginalPatientID, v)
	return u
}

// UpdateOriginalPatientID sets the "original_patient_id" field to the value that was provided on create.
func (u *PatientUpsert) UpdateOriginalPatientID() *PatientUpsert {
	u.SetExcluded(patient.FieldOriginalPatientID)
	return u
}

// AddOriginalPatientID adds v to the "original_patient_id" field.
func (u *PatientUpsert) AddOriginalPatientID(v int) *PatientUpsert {
	u.Add(patient.FieldOriginalPatientID, v)
	return u
}

// ClearOriginalPatientID clears the value of the "original_patient_id" field.
func (u *PatientUpsert) ClearOriginalPatientID() *PatientUpsert {
	u.SetNull(patient.FieldOriginalPatientID)
	return u
}

// SetPatientGender sets the "patient_gender" field.
func (u *PatientUpsert) SetPatientGender(v string) *PatientUpsert {
	u.Set(patient.FieldPatientGender, v)
	return u
}

// UpdatePatientGender sets the "patient_gender" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientGender() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientGender)
	return u
}

// ClearPatientGender clears the value of the "patient_gender" field.
func (u *PatientUpsert) ClearPatientGender() *PatientUpsert {
	u.SetNull(patient.FieldPatientGender)
	return u
}

// SetPatientFirstName sets the "patient_first_name" field.
func (u *PatientUpsert) SetPatientFirstName(v string) *PatientUpsert {
	u.Set(patient.FieldPatientFirstName, v)
	return u
}

// UpdatePatientFirstName sets the "patient_first_name" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientFirstName() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientFirstName)
	return u
}

// ClearPatientFirstName clears the value of the "patient_first_name" field.
func (u *PatientUpsert) ClearPatientFirstName() *PatientUpsert {
	u.SetNull(patient.FieldPatientFirstName)
	return u
}

// SetPatientLastName sets the "patient_last_name" field.
func (u *PatientUpsert) SetPatientLastName(v string) *PatientUpsert {
	u.Set(patient.FieldPatientLastName, v)
	return u
}

// UpdatePatientLastName sets the "patient_last_name" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientLastName() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientLastName)
	return u
}

// ClearPatientLastName clears the value of the "patient_last_name" field.
func (u *PatientUpsert) ClearPatientLastName() *PatientUpsert {
	u.SetNull(patient.FieldPatientLastName)
	return u
}

// SetPatientMiddleName sets the "patient_middle_name" field.
func (u *PatientUpsert) SetPatientMiddleName(v string) *PatientUpsert {
	u.Set(patient.FieldPatientMiddleName, v)
	return u
}

// UpdatePatientMiddleName sets the "patient_middle_name" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientMiddleName() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientMiddleName)
	return u
}

// ClearPatientMiddleName clears the value of the "patient_middle_name" field.
func (u *PatientUpsert) ClearPatientMiddleName() *PatientUpsert {
	u.SetNull(patient.FieldPatientMiddleName)
	return u
}

// SetPatientMedicalRecordNumber sets the "patient_medical_record_number" field.
func (u *PatientUpsert) SetPatientMedicalRecordNumber(v string) *PatientUpsert {
	u.Set(patient.FieldPatientMedicalRecordNumber, v)
	return u
}

// UpdatePatientMedicalRecordNumber sets the "patient_medical_record_number" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientMedicalRecordNumber() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientMedicalRecordNumber)
	return u
}

// ClearPatientMedicalRecordNumber clears the value of the "patient_medical_record_number" field.
func (u *PatientUpsert) ClearPatientMedicalRecordNumber() *PatientUpsert {
	u.SetNull(patient.FieldPatientMedicalRecordNumber)
	return u
}

// SetPatientLegalFirstname sets the "patient_legal_firstname" field.
func (u *PatientUpsert) SetPatientLegalFirstname(v string) *PatientUpsert {
	u.Set(patient.FieldPatientLegalFirstname, v)
	return u
}

// UpdatePatientLegalFirstname sets the "patient_legal_firstname" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientLegalFirstname() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientLegalFirstname)
	return u
}

// ClearPatientLegalFirstname clears the value of the "patient_legal_firstname" field.
func (u *PatientUpsert) ClearPatientLegalFirstname() *PatientUpsert {
	u.SetNull(patient.FieldPatientLegalFirstname)
	return u
}

// SetPatientLegalLastname sets the "patient_legal_lastname" field.
func (u *PatientUpsert) SetPatientLegalLastname(v string) *PatientUpsert {
	u.Set(patient.FieldPatientLegalLastname, v)
	return u
}

// UpdatePatientLegalLastname sets the "patient_legal_lastname" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientLegalLastname() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientLegalLastname)
	return u
}

// ClearPatientLegalLastname clears the value of the "patient_legal_lastname" field.
func (u *PatientUpsert) ClearPatientLegalLastname() *PatientUpsert {
	u.SetNull(patient.FieldPatientLegalLastname)
	return u
}

// SetPatientHonorific sets the "patient_honorific" field.
func (u *PatientUpsert) SetPatientHonorific(v string) *PatientUpsert {
	u.Set(patient.FieldPatientHonorific, v)
	return u
}

// UpdatePatientHonorific sets the "patient_honorific" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientHonorific() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientHonorific)
	return u
}

// ClearPatientHonorific clears the value of the "patient_honorific" field.
func (u *PatientUpsert) ClearPatientHonorific() *PatientUpsert {
	u.SetNull(patient.FieldPatientHonorific)
	return u
}

// SetPatientSuffix sets the "patient_suffix" field.
func (u *PatientUpsert) SetPatientSuffix(v string) *PatientUpsert {
	u.Set(patient.FieldPatientSuffix, v)
	return u
}

// UpdatePatientSuffix sets the "patient_suffix" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientSuffix() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientSuffix)
	return u
}

// ClearPatientSuffix clears the value of the "patient_suffix" field.
func (u *PatientUpsert) ClearPatientSuffix() *PatientUpsert {
	u.SetNull(patient.FieldPatientSuffix)
	return u
}

// SetPatientMarital sets the "patient_marital" field.
func (u *PatientUpsert) SetPatientMarital(v string) *PatientUpsert {
	u.Set(patient.FieldPatientMarital, v)
	return u
}

// UpdatePatientMarital sets the "patient_marital" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientMarital() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientMarital)
	return u
}

// ClearPatientMarital clears the value of the "patient_marital" field.
func (u *PatientUpsert) ClearPatientMarital() *PatientUpsert {
	u.SetNull(patient.FieldPatientMarital)
	return u
}

// SetPatientEthnicity sets the "patient_ethnicity" field.
func (u *PatientUpsert) SetPatientEthnicity(v string) *PatientUpsert {
	u.Set(patient.FieldPatientEthnicity, v)
	return u
}

// UpdatePatientEthnicity sets the "patient_ethnicity" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientEthnicity() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientEthnicity)
	return u
}

// ClearPatientEthnicity clears the value of the "patient_ethnicity" field.
func (u *PatientUpsert) ClearPatientEthnicity() *PatientUpsert {
	u.SetNull(patient.FieldPatientEthnicity)
	return u
}

// SetPatientBirthdate sets the "patient_birthdate" field.
func (u *PatientUpsert) SetPatientBirthdate(v string) *PatientUpsert {
	u.Set(patient.FieldPatientBirthdate, v)
	return u
}

// UpdatePatientBirthdate sets the "patient_birthdate" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientBirthdate() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientBirthdate)
	return u
}

// ClearPatientBirthdate clears the value of the "patient_birthdate" field.
func (u *PatientUpsert) ClearPatientBirthdate() *PatientUpsert {
	u.SetNull(patient.FieldPatientBirthdate)
	return u
}

// SetPatientSsn sets the "patient_ssn" field.
func (u *PatientUpsert) SetPatientSsn(v string) *PatientUpsert {
	u.Set(patient.FieldPatientSsn, v)
	return u
}

// UpdatePatientSsn sets the "patient_ssn" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientSsn() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientSsn)
	return u
}

// ClearPatientSsn clears the value of the "patient_ssn" field.
func (u *PatientUpsert) ClearPatientSsn() *PatientUpsert {
	u.SetNull(patient.FieldPatientSsn)
	return u
}

// SetPatientHeight sets the "patient_height" field.
func (u *PatientUpsert) SetPatientHeight(v string) *PatientUpsert {
	u.Set(patient.FieldPatientHeight, v)
	return u
}

// UpdatePatientHeight sets the "patient_height" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientHeight() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientHeight)
	return u
}

// ClearPatientHeight clears the value of the "patient_height" field.
func (u *PatientUpsert) ClearPatientHeight() *PatientUpsert {
	u.SetNull(patient.FieldPatientHeight)
	return u
}

// SetPatientWeight sets the "patient_weight" field.
func (u *PatientUpsert) SetPatientWeight(v string) *PatientUpsert {
	u.Set(patient.FieldPatientWeight, v)
	return u
}

// UpdatePatientWeight sets the "patient_weight" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientWeight() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientWeight)
	return u
}

// ClearPatientWeight clears the value of the "patient_weight" field.
func (u *PatientUpsert) ClearPatientWeight() *PatientUpsert {
	u.SetNull(patient.FieldPatientWeight)
	return u
}

// SetOfficeallyID sets the "officeally_id" field.
func (u *PatientUpsert) SetOfficeallyID(v int) *PatientUpsert {
	u.Set(patient.FieldOfficeallyID, v)
	return u
}

// UpdateOfficeallyID sets the "officeally_id" field to the value that was provided on create.
func (u *PatientUpsert) UpdateOfficeallyID() *PatientUpsert {
	u.SetExcluded(patient.FieldOfficeallyID)
	return u
}

// AddOfficeallyID adds v to the "officeally_id" field.
func (u *PatientUpsert) AddOfficeallyID(v int) *PatientUpsert {
	u.Add(patient.FieldOfficeallyID, v)
	return u
}

// ClearOfficeallyID clears the value of the "officeally_id" field.
func (u *PatientUpsert) ClearOfficeallyID() *PatientUpsert {
	u.SetNull(patient.FieldOfficeallyID)
	return u
}

// SetPatientNyWaiveFormIssueStatus sets the "patient_ny_waive_form_issue_status" field.
func (u *PatientUpsert) SetPatientNyWaiveFormIssueStatus(v string) *PatientUpsert {
	u.Set(patient.FieldPatientNyWaiveFormIssueStatus, v)
	return u
}

// UpdatePatientNyWaiveFormIssueStatus sets the "patient_ny_waive_form_issue_status" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientNyWaiveFormIssueStatus() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientNyWaiveFormIssueStatus)
	return u
}

// SetPatientCreateTime sets the "patient_create_time" field.
func (u *PatientUpsert) SetPatientCreateTime(v time.Time) *PatientUpsert {
	u.Set(patient.FieldPatientCreateTime, v)
	return u
}

// UpdatePatientCreateTime sets the "patient_create_time" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientCreateTime() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientCreateTime)
	return u
}

// ClearPatientCreateTime clears the value of the "patient_create_time" field.
func (u *PatientUpsert) ClearPatientCreateTime() *PatientUpsert {
	u.SetNull(patient.FieldPatientCreateTime)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *PatientUpsert) SetCustomerID(v int) *PatientUpsert {
	u.Set(patient.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *PatientUpsert) UpdateCustomerID() *PatientUpsert {
	u.SetExcluded(patient.FieldCustomerID)
	return u
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *PatientUpsert) ClearCustomerID() *PatientUpsert {
	u.SetNull(patient.FieldCustomerID)
	return u
}

// SetIsActive sets the "isActive" field.
func (u *PatientUpsert) SetIsActive(v bool) *PatientUpsert {
	u.Set(patient.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "isActive" field to the value that was provided on create.
func (u *PatientUpsert) UpdateIsActive() *PatientUpsert {
	u.SetExcluded(patient.FieldIsActive)
	return u
}

// SetPatientFlagged sets the "patient_flagged" field.
func (u *PatientUpsert) SetPatientFlagged(v bool) *PatientUpsert {
	u.Set(patient.FieldPatientFlagged, v)
	return u
}

// UpdatePatientFlagged sets the "patient_flagged" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientFlagged() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientFlagged)
	return u
}

// SetPatientServiceDate sets the "patient_service_date" field.
func (u *PatientUpsert) SetPatientServiceDate(v time.Time) *PatientUpsert {
	u.Set(patient.FieldPatientServiceDate, v)
	return u
}

// UpdatePatientServiceDate sets the "patient_service_date" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientServiceDate() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientServiceDate)
	return u
}

// ClearPatientServiceDate clears the value of the "patient_service_date" field.
func (u *PatientUpsert) ClearPatientServiceDate() *PatientUpsert {
	u.SetNull(patient.FieldPatientServiceDate)
	return u
}

// SetPatientDescription sets the "patient_description" field.
func (u *PatientUpsert) SetPatientDescription(v string) *PatientUpsert {
	u.Set(patient.FieldPatientDescription, v)
	return u
}

// UpdatePatientDescription sets the "patient_description" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientDescription() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientDescription)
	return u
}

// ClearPatientDescription clears the value of the "patient_description" field.
func (u *PatientUpsert) ClearPatientDescription() *PatientUpsert {
	u.SetNull(patient.FieldPatientDescription)
	return u
}

// SetPatientLanguage sets the "patient_language" field.
func (u *PatientUpsert) SetPatientLanguage(v string) *PatientUpsert {
	u.Set(patient.FieldPatientLanguage, v)
	return u
}

// UpdatePatientLanguage sets the "patient_language" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePatientLanguage() *PatientUpsert {
	u.SetExcluded(patient.FieldPatientLanguage)
	return u
}

// ClearPatientLanguage clears the value of the "patient_language" field.
func (u *PatientUpsert) ClearPatientLanguage() *PatientUpsert {
	u.SetNull(patient.FieldPatientLanguage)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Patient.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(patient.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PatientUpsertOne) UpdateNewValues() *PatientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(patient.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Patient.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PatientUpsertOne) Ignore() *PatientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PatientUpsertOne) DoNothing() *PatientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PatientCreate.OnConflict
// documentation for more info.
func (u *PatientUpsertOne) Update(set func(*PatientUpsert)) *PatientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PatientUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *PatientUpsertOne) SetUserID(v int) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdateUserID() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *PatientUpsertOne) ClearUserID() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearUserID()
	})
}

// SetPatientType sets the "patient_type" field.
func (u *PatientUpsertOne) SetPatientType(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientType(v)
	})
}

// UpdatePatientType sets the "patient_type" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientType() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientType()
	})
}

// SetOriginalPatientID sets the "original_patient_id" field.
func (u *PatientUpsertOne) SetOriginalPatientID(v int) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetOriginalPatientID(v)
	})
}

// AddOriginalPatientID adds v to the "original_patient_id" field.
func (u *PatientUpsertOne) AddOriginalPatientID(v int) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.AddOriginalPatientID(v)
	})
}

// UpdateOriginalPatientID sets the "original_patient_id" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdateOriginalPatientID() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateOriginalPatientID()
	})
}

// ClearOriginalPatientID clears the value of the "original_patient_id" field.
func (u *PatientUpsertOne) ClearOriginalPatientID() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearOriginalPatientID()
	})
}

// SetPatientGender sets the "patient_gender" field.
func (u *PatientUpsertOne) SetPatientGender(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientGender(v)
	})
}

// UpdatePatientGender sets the "patient_gender" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientGender() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientGender()
	})
}

// ClearPatientGender clears the value of the "patient_gender" field.
func (u *PatientUpsertOne) ClearPatientGender() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientGender()
	})
}

// SetPatientFirstName sets the "patient_first_name" field.
func (u *PatientUpsertOne) SetPatientFirstName(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientFirstName(v)
	})
}

// UpdatePatientFirstName sets the "patient_first_name" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientFirstName() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientFirstName()
	})
}

// ClearPatientFirstName clears the value of the "patient_first_name" field.
func (u *PatientUpsertOne) ClearPatientFirstName() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientFirstName()
	})
}

// SetPatientLastName sets the "patient_last_name" field.
func (u *PatientUpsertOne) SetPatientLastName(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientLastName(v)
	})
}

// UpdatePatientLastName sets the "patient_last_name" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientLastName() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientLastName()
	})
}

// ClearPatientLastName clears the value of the "patient_last_name" field.
func (u *PatientUpsertOne) ClearPatientLastName() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientLastName()
	})
}

// SetPatientMiddleName sets the "patient_middle_name" field.
func (u *PatientUpsertOne) SetPatientMiddleName(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientMiddleName(v)
	})
}

// UpdatePatientMiddleName sets the "patient_middle_name" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientMiddleName() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientMiddleName()
	})
}

// ClearPatientMiddleName clears the value of the "patient_middle_name" field.
func (u *PatientUpsertOne) ClearPatientMiddleName() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientMiddleName()
	})
}

// SetPatientMedicalRecordNumber sets the "patient_medical_record_number" field.
func (u *PatientUpsertOne) SetPatientMedicalRecordNumber(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientMedicalRecordNumber(v)
	})
}

// UpdatePatientMedicalRecordNumber sets the "patient_medical_record_number" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientMedicalRecordNumber() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientMedicalRecordNumber()
	})
}

// ClearPatientMedicalRecordNumber clears the value of the "patient_medical_record_number" field.
func (u *PatientUpsertOne) ClearPatientMedicalRecordNumber() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientMedicalRecordNumber()
	})
}

// SetPatientLegalFirstname sets the "patient_legal_firstname" field.
func (u *PatientUpsertOne) SetPatientLegalFirstname(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientLegalFirstname(v)
	})
}

// UpdatePatientLegalFirstname sets the "patient_legal_firstname" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientLegalFirstname() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientLegalFirstname()
	})
}

// ClearPatientLegalFirstname clears the value of the "patient_legal_firstname" field.
func (u *PatientUpsertOne) ClearPatientLegalFirstname() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientLegalFirstname()
	})
}

// SetPatientLegalLastname sets the "patient_legal_lastname" field.
func (u *PatientUpsertOne) SetPatientLegalLastname(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientLegalLastname(v)
	})
}

// UpdatePatientLegalLastname sets the "patient_legal_lastname" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientLegalLastname() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientLegalLastname()
	})
}

// ClearPatientLegalLastname clears the value of the "patient_legal_lastname" field.
func (u *PatientUpsertOne) ClearPatientLegalLastname() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientLegalLastname()
	})
}

// SetPatientHonorific sets the "patient_honorific" field.
func (u *PatientUpsertOne) SetPatientHonorific(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientHonorific(v)
	})
}

// UpdatePatientHonorific sets the "patient_honorific" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientHonorific() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientHonorific()
	})
}

// ClearPatientHonorific clears the value of the "patient_honorific" field.
func (u *PatientUpsertOne) ClearPatientHonorific() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientHonorific()
	})
}

// SetPatientSuffix sets the "patient_suffix" field.
func (u *PatientUpsertOne) SetPatientSuffix(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientSuffix(v)
	})
}

// UpdatePatientSuffix sets the "patient_suffix" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientSuffix() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientSuffix()
	})
}

// ClearPatientSuffix clears the value of the "patient_suffix" field.
func (u *PatientUpsertOne) ClearPatientSuffix() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientSuffix()
	})
}

// SetPatientMarital sets the "patient_marital" field.
func (u *PatientUpsertOne) SetPatientMarital(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientMarital(v)
	})
}

// UpdatePatientMarital sets the "patient_marital" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientMarital() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientMarital()
	})
}

// ClearPatientMarital clears the value of the "patient_marital" field.
func (u *PatientUpsertOne) ClearPatientMarital() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientMarital()
	})
}

// SetPatientEthnicity sets the "patient_ethnicity" field.
func (u *PatientUpsertOne) SetPatientEthnicity(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientEthnicity(v)
	})
}

// UpdatePatientEthnicity sets the "patient_ethnicity" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientEthnicity() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientEthnicity()
	})
}

// ClearPatientEthnicity clears the value of the "patient_ethnicity" field.
func (u *PatientUpsertOne) ClearPatientEthnicity() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientEthnicity()
	})
}

// SetPatientBirthdate sets the "patient_birthdate" field.
func (u *PatientUpsertOne) SetPatientBirthdate(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientBirthdate(v)
	})
}

// UpdatePatientBirthdate sets the "patient_birthdate" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientBirthdate() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientBirthdate()
	})
}

// ClearPatientBirthdate clears the value of the "patient_birthdate" field.
func (u *PatientUpsertOne) ClearPatientBirthdate() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientBirthdate()
	})
}

// SetPatientSsn sets the "patient_ssn" field.
func (u *PatientUpsertOne) SetPatientSsn(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientSsn(v)
	})
}

// UpdatePatientSsn sets the "patient_ssn" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientSsn() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientSsn()
	})
}

// ClearPatientSsn clears the value of the "patient_ssn" field.
func (u *PatientUpsertOne) ClearPatientSsn() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientSsn()
	})
}

// SetPatientHeight sets the "patient_height" field.
func (u *PatientUpsertOne) SetPatientHeight(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientHeight(v)
	})
}

// UpdatePatientHeight sets the "patient_height" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientHeight() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientHeight()
	})
}

// ClearPatientHeight clears the value of the "patient_height" field.
func (u *PatientUpsertOne) ClearPatientHeight() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientHeight()
	})
}

// SetPatientWeight sets the "patient_weight" field.
func (u *PatientUpsertOne) SetPatientWeight(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientWeight(v)
	})
}

// UpdatePatientWeight sets the "patient_weight" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientWeight() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientWeight()
	})
}

// ClearPatientWeight clears the value of the "patient_weight" field.
func (u *PatientUpsertOne) ClearPatientWeight() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientWeight()
	})
}

// SetOfficeallyID sets the "officeally_id" field.
func (u *PatientUpsertOne) SetOfficeallyID(v int) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetOfficeallyID(v)
	})
}

// AddOfficeallyID adds v to the "officeally_id" field.
func (u *PatientUpsertOne) AddOfficeallyID(v int) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.AddOfficeallyID(v)
	})
}

// UpdateOfficeallyID sets the "officeally_id" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdateOfficeallyID() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateOfficeallyID()
	})
}

// ClearOfficeallyID clears the value of the "officeally_id" field.
func (u *PatientUpsertOne) ClearOfficeallyID() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearOfficeallyID()
	})
}

// SetPatientNyWaiveFormIssueStatus sets the "patient_ny_waive_form_issue_status" field.
func (u *PatientUpsertOne) SetPatientNyWaiveFormIssueStatus(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientNyWaiveFormIssueStatus(v)
	})
}

// UpdatePatientNyWaiveFormIssueStatus sets the "patient_ny_waive_form_issue_status" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientNyWaiveFormIssueStatus() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientNyWaiveFormIssueStatus()
	})
}

// SetPatientCreateTime sets the "patient_create_time" field.
func (u *PatientUpsertOne) SetPatientCreateTime(v time.Time) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientCreateTime(v)
	})
}

// UpdatePatientCreateTime sets the "patient_create_time" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientCreateTime() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientCreateTime()
	})
}

// ClearPatientCreateTime clears the value of the "patient_create_time" field.
func (u *PatientUpsertOne) ClearPatientCreateTime() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientCreateTime()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *PatientUpsertOne) SetCustomerID(v int) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdateCustomerID() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *PatientUpsertOne) ClearCustomerID() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearCustomerID()
	})
}

// SetIsActive sets the "isActive" field.
func (u *PatientUpsertOne) SetIsActive(v bool) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "isActive" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdateIsActive() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateIsActive()
	})
}

// SetPatientFlagged sets the "patient_flagged" field.
func (u *PatientUpsertOne) SetPatientFlagged(v bool) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientFlagged(v)
	})
}

// UpdatePatientFlagged sets the "patient_flagged" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientFlagged() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientFlagged()
	})
}

// SetPatientServiceDate sets the "patient_service_date" field.
func (u *PatientUpsertOne) SetPatientServiceDate(v time.Time) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientServiceDate(v)
	})
}

// UpdatePatientServiceDate sets the "patient_service_date" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientServiceDate() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientServiceDate()
	})
}

// ClearPatientServiceDate clears the value of the "patient_service_date" field.
func (u *PatientUpsertOne) ClearPatientServiceDate() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientServiceDate()
	})
}

// SetPatientDescription sets the "patient_description" field.
func (u *PatientUpsertOne) SetPatientDescription(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientDescription(v)
	})
}

// UpdatePatientDescription sets the "patient_description" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientDescription() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientDescription()
	})
}

// ClearPatientDescription clears the value of the "patient_description" field.
func (u *PatientUpsertOne) ClearPatientDescription() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientDescription()
	})
}

// SetPatientLanguage sets the "patient_language" field.
func (u *PatientUpsertOne) SetPatientLanguage(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientLanguage(v)
	})
}

// UpdatePatientLanguage sets the "patient_language" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePatientLanguage() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientLanguage()
	})
}

// ClearPatientLanguage clears the value of the "patient_language" field.
func (u *PatientUpsertOne) ClearPatientLanguage() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientLanguage()
	})
}

// Exec executes the query.
func (u *PatientUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PatientCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PatientUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PatientUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PatientUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PatientCreateBulk is the builder for creating many Patient entities in bulk.
type PatientCreateBulk struct {
	config
	err      error
	builders []*PatientCreate
	conflict []sql.ConflictOption
}

// Save creates the Patient entities in the database.
func (pcb *PatientCreateBulk) Save(ctx context.Context) ([]*Patient, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Patient, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PatientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PatientCreateBulk) SaveX(ctx context.Context) []*Patient {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PatientCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PatientCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Patient.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PatientUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (pcb *PatientCreateBulk) OnConflict(opts ...sql.ConflictOption) *PatientUpsertBulk {
	pcb.conflict = opts
	return &PatientUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Patient.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PatientCreateBulk) OnConflictColumns(columns ...string) *PatientUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PatientUpsertBulk{
		create: pcb,
	}
}

// PatientUpsertBulk is the builder for "upsert"-ing
// a bulk of Patient nodes.
type PatientUpsertBulk struct {
	create *PatientCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Patient.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(patient.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PatientUpsertBulk) UpdateNewValues() *PatientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(patient.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Patient.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PatientUpsertBulk) Ignore() *PatientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PatientUpsertBulk) DoNothing() *PatientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PatientCreateBulk.OnConflict
// documentation for more info.
func (u *PatientUpsertBulk) Update(set func(*PatientUpsert)) *PatientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PatientUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *PatientUpsertBulk) SetUserID(v int) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdateUserID() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *PatientUpsertBulk) ClearUserID() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearUserID()
	})
}

// SetPatientType sets the "patient_type" field.
func (u *PatientUpsertBulk) SetPatientType(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientType(v)
	})
}

// UpdatePatientType sets the "patient_type" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientType() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientType()
	})
}

// SetOriginalPatientID sets the "original_patient_id" field.
func (u *PatientUpsertBulk) SetOriginalPatientID(v int) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetOriginalPatientID(v)
	})
}

// AddOriginalPatientID adds v to the "original_patient_id" field.
func (u *PatientUpsertBulk) AddOriginalPatientID(v int) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.AddOriginalPatientID(v)
	})
}

// UpdateOriginalPatientID sets the "original_patient_id" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdateOriginalPatientID() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateOriginalPatientID()
	})
}

// ClearOriginalPatientID clears the value of the "original_patient_id" field.
func (u *PatientUpsertBulk) ClearOriginalPatientID() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearOriginalPatientID()
	})
}

// SetPatientGender sets the "patient_gender" field.
func (u *PatientUpsertBulk) SetPatientGender(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientGender(v)
	})
}

// UpdatePatientGender sets the "patient_gender" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientGender() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientGender()
	})
}

// ClearPatientGender clears the value of the "patient_gender" field.
func (u *PatientUpsertBulk) ClearPatientGender() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientGender()
	})
}

// SetPatientFirstName sets the "patient_first_name" field.
func (u *PatientUpsertBulk) SetPatientFirstName(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientFirstName(v)
	})
}

// UpdatePatientFirstName sets the "patient_first_name" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientFirstName() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientFirstName()
	})
}

// ClearPatientFirstName clears the value of the "patient_first_name" field.
func (u *PatientUpsertBulk) ClearPatientFirstName() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientFirstName()
	})
}

// SetPatientLastName sets the "patient_last_name" field.
func (u *PatientUpsertBulk) SetPatientLastName(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientLastName(v)
	})
}

// UpdatePatientLastName sets the "patient_last_name" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientLastName() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientLastName()
	})
}

// ClearPatientLastName clears the value of the "patient_last_name" field.
func (u *PatientUpsertBulk) ClearPatientLastName() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientLastName()
	})
}

// SetPatientMiddleName sets the "patient_middle_name" field.
func (u *PatientUpsertBulk) SetPatientMiddleName(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientMiddleName(v)
	})
}

// UpdatePatientMiddleName sets the "patient_middle_name" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientMiddleName() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientMiddleName()
	})
}

// ClearPatientMiddleName clears the value of the "patient_middle_name" field.
func (u *PatientUpsertBulk) ClearPatientMiddleName() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientMiddleName()
	})
}

// SetPatientMedicalRecordNumber sets the "patient_medical_record_number" field.
func (u *PatientUpsertBulk) SetPatientMedicalRecordNumber(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientMedicalRecordNumber(v)
	})
}

// UpdatePatientMedicalRecordNumber sets the "patient_medical_record_number" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientMedicalRecordNumber() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientMedicalRecordNumber()
	})
}

// ClearPatientMedicalRecordNumber clears the value of the "patient_medical_record_number" field.
func (u *PatientUpsertBulk) ClearPatientMedicalRecordNumber() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientMedicalRecordNumber()
	})
}

// SetPatientLegalFirstname sets the "patient_legal_firstname" field.
func (u *PatientUpsertBulk) SetPatientLegalFirstname(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientLegalFirstname(v)
	})
}

// UpdatePatientLegalFirstname sets the "patient_legal_firstname" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientLegalFirstname() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientLegalFirstname()
	})
}

// ClearPatientLegalFirstname clears the value of the "patient_legal_firstname" field.
func (u *PatientUpsertBulk) ClearPatientLegalFirstname() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientLegalFirstname()
	})
}

// SetPatientLegalLastname sets the "patient_legal_lastname" field.
func (u *PatientUpsertBulk) SetPatientLegalLastname(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientLegalLastname(v)
	})
}

// UpdatePatientLegalLastname sets the "patient_legal_lastname" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientLegalLastname() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientLegalLastname()
	})
}

// ClearPatientLegalLastname clears the value of the "patient_legal_lastname" field.
func (u *PatientUpsertBulk) ClearPatientLegalLastname() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientLegalLastname()
	})
}

// SetPatientHonorific sets the "patient_honorific" field.
func (u *PatientUpsertBulk) SetPatientHonorific(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientHonorific(v)
	})
}

// UpdatePatientHonorific sets the "patient_honorific" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientHonorific() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientHonorific()
	})
}

// ClearPatientHonorific clears the value of the "patient_honorific" field.
func (u *PatientUpsertBulk) ClearPatientHonorific() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientHonorific()
	})
}

// SetPatientSuffix sets the "patient_suffix" field.
func (u *PatientUpsertBulk) SetPatientSuffix(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientSuffix(v)
	})
}

// UpdatePatientSuffix sets the "patient_suffix" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientSuffix() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientSuffix()
	})
}

// ClearPatientSuffix clears the value of the "patient_suffix" field.
func (u *PatientUpsertBulk) ClearPatientSuffix() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientSuffix()
	})
}

// SetPatientMarital sets the "patient_marital" field.
func (u *PatientUpsertBulk) SetPatientMarital(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientMarital(v)
	})
}

// UpdatePatientMarital sets the "patient_marital" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientMarital() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientMarital()
	})
}

// ClearPatientMarital clears the value of the "patient_marital" field.
func (u *PatientUpsertBulk) ClearPatientMarital() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientMarital()
	})
}

// SetPatientEthnicity sets the "patient_ethnicity" field.
func (u *PatientUpsertBulk) SetPatientEthnicity(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientEthnicity(v)
	})
}

// UpdatePatientEthnicity sets the "patient_ethnicity" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientEthnicity() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientEthnicity()
	})
}

// ClearPatientEthnicity clears the value of the "patient_ethnicity" field.
func (u *PatientUpsertBulk) ClearPatientEthnicity() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientEthnicity()
	})
}

// SetPatientBirthdate sets the "patient_birthdate" field.
func (u *PatientUpsertBulk) SetPatientBirthdate(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientBirthdate(v)
	})
}

// UpdatePatientBirthdate sets the "patient_birthdate" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientBirthdate() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientBirthdate()
	})
}

// ClearPatientBirthdate clears the value of the "patient_birthdate" field.
func (u *PatientUpsertBulk) ClearPatientBirthdate() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientBirthdate()
	})
}

// SetPatientSsn sets the "patient_ssn" field.
func (u *PatientUpsertBulk) SetPatientSsn(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientSsn(v)
	})
}

// UpdatePatientSsn sets the "patient_ssn" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientSsn() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientSsn()
	})
}

// ClearPatientSsn clears the value of the "patient_ssn" field.
func (u *PatientUpsertBulk) ClearPatientSsn() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientSsn()
	})
}

// SetPatientHeight sets the "patient_height" field.
func (u *PatientUpsertBulk) SetPatientHeight(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientHeight(v)
	})
}

// UpdatePatientHeight sets the "patient_height" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientHeight() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientHeight()
	})
}

// ClearPatientHeight clears the value of the "patient_height" field.
func (u *PatientUpsertBulk) ClearPatientHeight() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientHeight()
	})
}

// SetPatientWeight sets the "patient_weight" field.
func (u *PatientUpsertBulk) SetPatientWeight(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientWeight(v)
	})
}

// UpdatePatientWeight sets the "patient_weight" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientWeight() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientWeight()
	})
}

// ClearPatientWeight clears the value of the "patient_weight" field.
func (u *PatientUpsertBulk) ClearPatientWeight() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientWeight()
	})
}

// SetOfficeallyID sets the "officeally_id" field.
func (u *PatientUpsertBulk) SetOfficeallyID(v int) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetOfficeallyID(v)
	})
}

// AddOfficeallyID adds v to the "officeally_id" field.
func (u *PatientUpsertBulk) AddOfficeallyID(v int) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.AddOfficeallyID(v)
	})
}

// UpdateOfficeallyID sets the "officeally_id" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdateOfficeallyID() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateOfficeallyID()
	})
}

// ClearOfficeallyID clears the value of the "officeally_id" field.
func (u *PatientUpsertBulk) ClearOfficeallyID() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearOfficeallyID()
	})
}

// SetPatientNyWaiveFormIssueStatus sets the "patient_ny_waive_form_issue_status" field.
func (u *PatientUpsertBulk) SetPatientNyWaiveFormIssueStatus(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientNyWaiveFormIssueStatus(v)
	})
}

// UpdatePatientNyWaiveFormIssueStatus sets the "patient_ny_waive_form_issue_status" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientNyWaiveFormIssueStatus() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientNyWaiveFormIssueStatus()
	})
}

// SetPatientCreateTime sets the "patient_create_time" field.
func (u *PatientUpsertBulk) SetPatientCreateTime(v time.Time) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientCreateTime(v)
	})
}

// UpdatePatientCreateTime sets the "patient_create_time" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientCreateTime() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientCreateTime()
	})
}

// ClearPatientCreateTime clears the value of the "patient_create_time" field.
func (u *PatientUpsertBulk) ClearPatientCreateTime() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientCreateTime()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *PatientUpsertBulk) SetCustomerID(v int) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdateCustomerID() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *PatientUpsertBulk) ClearCustomerID() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearCustomerID()
	})
}

// SetIsActive sets the "isActive" field.
func (u *PatientUpsertBulk) SetIsActive(v bool) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "isActive" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdateIsActive() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateIsActive()
	})
}

// SetPatientFlagged sets the "patient_flagged" field.
func (u *PatientUpsertBulk) SetPatientFlagged(v bool) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientFlagged(v)
	})
}

// UpdatePatientFlagged sets the "patient_flagged" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientFlagged() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientFlagged()
	})
}

// SetPatientServiceDate sets the "patient_service_date" field.
func (u *PatientUpsertBulk) SetPatientServiceDate(v time.Time) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientServiceDate(v)
	})
}

// UpdatePatientServiceDate sets the "patient_service_date" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientServiceDate() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientServiceDate()
	})
}

// ClearPatientServiceDate clears the value of the "patient_service_date" field.
func (u *PatientUpsertBulk) ClearPatientServiceDate() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientServiceDate()
	})
}

// SetPatientDescription sets the "patient_description" field.
func (u *PatientUpsertBulk) SetPatientDescription(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientDescription(v)
	})
}

// UpdatePatientDescription sets the "patient_description" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientDescription() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientDescription()
	})
}

// ClearPatientDescription clears the value of the "patient_description" field.
func (u *PatientUpsertBulk) ClearPatientDescription() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientDescription()
	})
}

// SetPatientLanguage sets the "patient_language" field.
func (u *PatientUpsertBulk) SetPatientLanguage(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPatientLanguage(v)
	})
}

// UpdatePatientLanguage sets the "patient_language" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePatientLanguage() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePatientLanguage()
	})
}

// ClearPatientLanguage clears the value of the "patient_language" field.
func (u *PatientUpsertBulk) ClearPatientLanguage() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.ClearPatientLanguage()
	})
}

// Exec executes the query.
func (u *PatientUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PatientCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PatientCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PatientUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
