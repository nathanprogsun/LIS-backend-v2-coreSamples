// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/address"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/internaluser"
	"coresamples/ent/predicate"
	"coresamples/ent/salesteam"
	"coresamples/ent/setting"
	"coresamples/ent/user"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InternalUserQuery is the builder for querying InternalUser entities.
type InternalUserQuery struct {
	config
	ctx                       *QueryContext
	order                     []internaluser.OrderOption
	inters                    []Interceptor
	predicates                []predicate.InternalUser
	withSalesTeam             *SalesTeamQuery
	withInternalUserContacts  *ContactQuery
	withInternalUserAddresses *AddressQuery
	withCustomers             *CustomerQuery
	withUser                  *UserQuery
	withInternalUserSettings  *SettingQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the InternalUserQuery builder.
func (iuq *InternalUserQuery) Where(ps ...predicate.InternalUser) *InternalUserQuery {
	iuq.predicates = append(iuq.predicates, ps...)
	return iuq
}

// Limit the number of records to be returned by this query.
func (iuq *InternalUserQuery) Limit(limit int) *InternalUserQuery {
	iuq.ctx.Limit = &limit
	return iuq
}

// Offset to start from.
func (iuq *InternalUserQuery) Offset(offset int) *InternalUserQuery {
	iuq.ctx.Offset = &offset
	return iuq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iuq *InternalUserQuery) Unique(unique bool) *InternalUserQuery {
	iuq.ctx.Unique = &unique
	return iuq
}

// Order specifies how the records should be ordered.
func (iuq *InternalUserQuery) Order(o ...internaluser.OrderOption) *InternalUserQuery {
	iuq.order = append(iuq.order, o...)
	return iuq
}

// QuerySalesTeam chains the current query on the "sales_team" edge.
func (iuq *InternalUserQuery) QuerySalesTeam() *SalesTeamQuery {
	query := (&SalesTeamClient{config: iuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internaluser.Table, internaluser.FieldID, selector),
			sqlgraph.To(salesteam.Table, salesteam.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, internaluser.SalesTeamTable, internaluser.SalesTeamColumn),
		)
		fromU = sqlgraph.SetNeighbors(iuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInternalUserContacts chains the current query on the "internal_user_contacts" edge.
func (iuq *InternalUserQuery) QueryInternalUserContacts() *ContactQuery {
	query := (&ContactClient{config: iuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internaluser.Table, internaluser.FieldID, selector),
			sqlgraph.To(contact.Table, contact.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, internaluser.InternalUserContactsTable, internaluser.InternalUserContactsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInternalUserAddresses chains the current query on the "internal_user_addresses" edge.
func (iuq *InternalUserQuery) QueryInternalUserAddresses() *AddressQuery {
	query := (&AddressClient{config: iuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internaluser.Table, internaluser.FieldID, selector),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, internaluser.InternalUserAddressesTable, internaluser.InternalUserAddressesColumn),
		)
		fromU = sqlgraph.SetNeighbors(iuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCustomers chains the current query on the "customers" edge.
func (iuq *InternalUserQuery) QueryCustomers() *CustomerQuery {
	query := (&CustomerClient{config: iuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internaluser.Table, internaluser.FieldID, selector),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, internaluser.CustomersTable, internaluser.CustomersColumn),
		)
		fromU = sqlgraph.SetNeighbors(iuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (iuq *InternalUserQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: iuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internaluser.Table, internaluser.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, internaluser.UserTable, internaluser.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(iuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInternalUserSettings chains the current query on the "internal_user_settings" edge.
func (iuq *InternalUserQuery) QueryInternalUserSettings() *SettingQuery {
	query := (&SettingClient{config: iuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(internaluser.Table, internaluser.FieldID, selector),
			sqlgraph.To(setting.Table, setting.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, internaluser.InternalUserSettingsTable, internaluser.InternalUserSettingsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(iuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first InternalUser entity from the query.
// Returns a *NotFoundError when no InternalUser was found.
func (iuq *InternalUserQuery) First(ctx context.Context) (*InternalUser, error) {
	nodes, err := iuq.Limit(1).All(setContextOp(ctx, iuq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{internaluser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iuq *InternalUserQuery) FirstX(ctx context.Context) *InternalUser {
	node, err := iuq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first InternalUser ID from the query.
// Returns a *NotFoundError when no InternalUser ID was found.
func (iuq *InternalUserQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = iuq.Limit(1).IDs(setContextOp(ctx, iuq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{internaluser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iuq *InternalUserQuery) FirstIDX(ctx context.Context) int {
	id, err := iuq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single InternalUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one InternalUser entity is found.
// Returns a *NotFoundError when no InternalUser entities are found.
func (iuq *InternalUserQuery) Only(ctx context.Context) (*InternalUser, error) {
	nodes, err := iuq.Limit(2).All(setContextOp(ctx, iuq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{internaluser.Label}
	default:
		return nil, &NotSingularError{internaluser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iuq *InternalUserQuery) OnlyX(ctx context.Context) *InternalUser {
	node, err := iuq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only InternalUser ID in the query.
// Returns a *NotSingularError when more than one InternalUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (iuq *InternalUserQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = iuq.Limit(2).IDs(setContextOp(ctx, iuq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{internaluser.Label}
	default:
		err = &NotSingularError{internaluser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iuq *InternalUserQuery) OnlyIDX(ctx context.Context) int {
	id, err := iuq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of InternalUsers.
func (iuq *InternalUserQuery) All(ctx context.Context) ([]*InternalUser, error) {
	ctx = setContextOp(ctx, iuq.ctx, "All")
	if err := iuq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*InternalUser, *InternalUserQuery]()
	return withInterceptors[[]*InternalUser](ctx, iuq, qr, iuq.inters)
}

// AllX is like All, but panics if an error occurs.
func (iuq *InternalUserQuery) AllX(ctx context.Context) []*InternalUser {
	nodes, err := iuq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of InternalUser IDs.
func (iuq *InternalUserQuery) IDs(ctx context.Context) (ids []int, err error) {
	if iuq.ctx.Unique == nil && iuq.path != nil {
		iuq.Unique(true)
	}
	ctx = setContextOp(ctx, iuq.ctx, "IDs")
	if err = iuq.Select(internaluser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iuq *InternalUserQuery) IDsX(ctx context.Context) []int {
	ids, err := iuq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iuq *InternalUserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, iuq.ctx, "Count")
	if err := iuq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, iuq, querierCount[*InternalUserQuery](), iuq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (iuq *InternalUserQuery) CountX(ctx context.Context) int {
	count, err := iuq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iuq *InternalUserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, iuq.ctx, "Exist")
	switch _, err := iuq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (iuq *InternalUserQuery) ExistX(ctx context.Context) bool {
	exist, err := iuq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the InternalUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iuq *InternalUserQuery) Clone() *InternalUserQuery {
	if iuq == nil {
		return nil
	}
	return &InternalUserQuery{
		config:                    iuq.config,
		ctx:                       iuq.ctx.Clone(),
		order:                     append([]internaluser.OrderOption{}, iuq.order...),
		inters:                    append([]Interceptor{}, iuq.inters...),
		predicates:                append([]predicate.InternalUser{}, iuq.predicates...),
		withSalesTeam:             iuq.withSalesTeam.Clone(),
		withInternalUserContacts:  iuq.withInternalUserContacts.Clone(),
		withInternalUserAddresses: iuq.withInternalUserAddresses.Clone(),
		withCustomers:             iuq.withCustomers.Clone(),
		withUser:                  iuq.withUser.Clone(),
		withInternalUserSettings:  iuq.withInternalUserSettings.Clone(),
		// clone intermediate query.
		sql:  iuq.sql.Clone(),
		path: iuq.path,
	}
}

// WithSalesTeam tells the query-builder to eager-load the nodes that are connected to
// the "sales_team" edge. The optional arguments are used to configure the query builder of the edge.
func (iuq *InternalUserQuery) WithSalesTeam(opts ...func(*SalesTeamQuery)) *InternalUserQuery {
	query := (&SalesTeamClient{config: iuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iuq.withSalesTeam = query
	return iuq
}

// WithInternalUserContacts tells the query-builder to eager-load the nodes that are connected to
// the "internal_user_contacts" edge. The optional arguments are used to configure the query builder of the edge.
func (iuq *InternalUserQuery) WithInternalUserContacts(opts ...func(*ContactQuery)) *InternalUserQuery {
	query := (&ContactClient{config: iuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iuq.withInternalUserContacts = query
	return iuq
}

// WithInternalUserAddresses tells the query-builder to eager-load the nodes that are connected to
// the "internal_user_addresses" edge. The optional arguments are used to configure the query builder of the edge.
func (iuq *InternalUserQuery) WithInternalUserAddresses(opts ...func(*AddressQuery)) *InternalUserQuery {
	query := (&AddressClient{config: iuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iuq.withInternalUserAddresses = query
	return iuq
}

// WithCustomers tells the query-builder to eager-load the nodes that are connected to
// the "customers" edge. The optional arguments are used to configure the query builder of the edge.
func (iuq *InternalUserQuery) WithCustomers(opts ...func(*CustomerQuery)) *InternalUserQuery {
	query := (&CustomerClient{config: iuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iuq.withCustomers = query
	return iuq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (iuq *InternalUserQuery) WithUser(opts ...func(*UserQuery)) *InternalUserQuery {
	query := (&UserClient{config: iuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iuq.withUser = query
	return iuq
}

// WithInternalUserSettings tells the query-builder to eager-load the nodes that are connected to
// the "internal_user_settings" edge. The optional arguments are used to configure the query builder of the edge.
func (iuq *InternalUserQuery) WithInternalUserSettings(opts ...func(*SettingQuery)) *InternalUserQuery {
	query := (&SettingClient{config: iuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iuq.withInternalUserSettings = query
	return iuq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		InternalUserRole string `json:"internal_user_role,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.InternalUser.Query().
//		GroupBy(internaluser.FieldInternalUserRole).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (iuq *InternalUserQuery) GroupBy(field string, fields ...string) *InternalUserGroupBy {
	iuq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &InternalUserGroupBy{build: iuq}
	grbuild.flds = &iuq.ctx.Fields
	grbuild.label = internaluser.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		InternalUserRole string `json:"internal_user_role,omitempty"`
//	}
//
//	client.InternalUser.Query().
//		Select(internaluser.FieldInternalUserRole).
//		Scan(ctx, &v)
func (iuq *InternalUserQuery) Select(fields ...string) *InternalUserSelect {
	iuq.ctx.Fields = append(iuq.ctx.Fields, fields...)
	sbuild := &InternalUserSelect{InternalUserQuery: iuq}
	sbuild.label = internaluser.Label
	sbuild.flds, sbuild.scan = &iuq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a InternalUserSelect configured with the given aggregations.
func (iuq *InternalUserQuery) Aggregate(fns ...AggregateFunc) *InternalUserSelect {
	return iuq.Select().Aggregate(fns...)
}

func (iuq *InternalUserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range iuq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, iuq); err != nil {
				return err
			}
		}
	}
	for _, f := range iuq.ctx.Fields {
		if !internaluser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if iuq.path != nil {
		prev, err := iuq.path(ctx)
		if err != nil {
			return err
		}
		iuq.sql = prev
	}
	return nil
}

func (iuq *InternalUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*InternalUser, error) {
	var (
		nodes       = []*InternalUser{}
		_spec       = iuq.querySpec()
		loadedTypes = [6]bool{
			iuq.withSalesTeam != nil,
			iuq.withInternalUserContacts != nil,
			iuq.withInternalUserAddresses != nil,
			iuq.withCustomers != nil,
			iuq.withUser != nil,
			iuq.withInternalUserSettings != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*InternalUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &InternalUser{config: iuq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, iuq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := iuq.withSalesTeam; query != nil {
		if err := iuq.loadSalesTeam(ctx, query, nodes,
			func(n *InternalUser) { n.Edges.SalesTeam = []*SalesTeam{} },
			func(n *InternalUser, e *SalesTeam) { n.Edges.SalesTeam = append(n.Edges.SalesTeam, e) }); err != nil {
			return nil, err
		}
	}
	if query := iuq.withInternalUserContacts; query != nil {
		if err := iuq.loadInternalUserContacts(ctx, query, nodes,
			func(n *InternalUser) { n.Edges.InternalUserContacts = []*Contact{} },
			func(n *InternalUser, e *Contact) {
				n.Edges.InternalUserContacts = append(n.Edges.InternalUserContacts, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := iuq.withInternalUserAddresses; query != nil {
		if err := iuq.loadInternalUserAddresses(ctx, query, nodes,
			func(n *InternalUser) { n.Edges.InternalUserAddresses = []*Address{} },
			func(n *InternalUser, e *Address) {
				n.Edges.InternalUserAddresses = append(n.Edges.InternalUserAddresses, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := iuq.withCustomers; query != nil {
		if err := iuq.loadCustomers(ctx, query, nodes,
			func(n *InternalUser) { n.Edges.Customers = []*Customer{} },
			func(n *InternalUser, e *Customer) { n.Edges.Customers = append(n.Edges.Customers, e) }); err != nil {
			return nil, err
		}
	}
	if query := iuq.withUser; query != nil {
		if err := iuq.loadUser(ctx, query, nodes, nil,
			func(n *InternalUser, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := iuq.withInternalUserSettings; query != nil {
		if err := iuq.loadInternalUserSettings(ctx, query, nodes,
			func(n *InternalUser) { n.Edges.InternalUserSettings = []*Setting{} },
			func(n *InternalUser, e *Setting) {
				n.Edges.InternalUserSettings = append(n.Edges.InternalUserSettings, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (iuq *InternalUserQuery) loadSalesTeam(ctx context.Context, query *SalesTeamQuery, nodes []*InternalUser, init func(*InternalUser), assign func(*InternalUser, *SalesTeam)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*InternalUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(salesteam.FieldInternalUserID)
	}
	query.Where(predicate.SalesTeam(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(internaluser.SalesTeamColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.InternalUserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "internal_user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iuq *InternalUserQuery) loadInternalUserContacts(ctx context.Context, query *ContactQuery, nodes []*InternalUser, init func(*InternalUser), assign func(*InternalUser, *Contact)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*InternalUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(contact.FieldInternalUserID)
	}
	query.Where(predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(internaluser.InternalUserContactsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.InternalUserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "internal_user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iuq *InternalUserQuery) loadInternalUserAddresses(ctx context.Context, query *AddressQuery, nodes []*InternalUser, init func(*InternalUser), assign func(*InternalUser, *Address)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*InternalUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(address.FieldInternalUserID)
	}
	query.Where(predicate.Address(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(internaluser.InternalUserAddressesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.InternalUserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "internal_user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iuq *InternalUserQuery) loadCustomers(ctx context.Context, query *CustomerQuery, nodes []*InternalUser, init func(*InternalUser), assign func(*InternalUser, *Customer)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*InternalUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(customer.FieldSalesID)
	}
	query.Where(predicate.Customer(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(internaluser.CustomersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SalesID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "sales_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iuq *InternalUserQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*InternalUser, init func(*InternalUser), assign func(*InternalUser, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*InternalUser)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (iuq *InternalUserQuery) loadInternalUserSettings(ctx context.Context, query *SettingQuery, nodes []*InternalUser, init func(*InternalUser), assign func(*InternalUser, *Setting)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*InternalUser)
	nids := make(map[int]map[*InternalUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(internaluser.InternalUserSettingsTable)
		s.Join(joinT).On(s.C(setting.FieldID), joinT.C(internaluser.InternalUserSettingsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(internaluser.InternalUserSettingsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(internaluser.InternalUserSettingsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*InternalUser]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Setting](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "internal_user_settings" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (iuq *InternalUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iuq.querySpec()
	_spec.Node.Columns = iuq.ctx.Fields
	if len(iuq.ctx.Fields) > 0 {
		_spec.Unique = iuq.ctx.Unique != nil && *iuq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, iuq.driver, _spec)
}

func (iuq *InternalUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(internaluser.Table, internaluser.Columns, sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt))
	_spec.From = iuq.sql
	if unique := iuq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if iuq.path != nil {
		_spec.Unique = true
	}
	if fields := iuq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, internaluser.FieldID)
		for i := range fields {
			if fields[i] != internaluser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if iuq.withUser != nil {
			_spec.Node.AddColumnOnce(internaluser.FieldUserID)
		}
	}
	if ps := iuq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iuq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iuq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iuq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iuq *InternalUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iuq.driver.Dialect())
	t1 := builder.Table(internaluser.Table)
	columns := iuq.ctx.Fields
	if len(columns) == 0 {
		columns = internaluser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iuq.sql != nil {
		selector = iuq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iuq.ctx.Unique != nil && *iuq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range iuq.predicates {
		p(selector)
	}
	for _, p := range iuq.order {
		p(selector)
	}
	if offset := iuq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iuq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// InternalUserGroupBy is the group-by builder for InternalUser entities.
type InternalUserGroupBy struct {
	selector
	build *InternalUserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (iugb *InternalUserGroupBy) Aggregate(fns ...AggregateFunc) *InternalUserGroupBy {
	iugb.fns = append(iugb.fns, fns...)
	return iugb
}

// Scan applies the selector query and scans the result into the given value.
func (iugb *InternalUserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iugb.build.ctx, "GroupBy")
	if err := iugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InternalUserQuery, *InternalUserGroupBy](ctx, iugb.build, iugb, iugb.build.inters, v)
}

func (iugb *InternalUserGroupBy) sqlScan(ctx context.Context, root *InternalUserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(iugb.fns))
	for _, fn := range iugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*iugb.flds)+len(iugb.fns))
		for _, f := range *iugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*iugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// InternalUserSelect is the builder for selecting fields of InternalUser entities.
type InternalUserSelect struct {
	*InternalUserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ius *InternalUserSelect) Aggregate(fns ...AggregateFunc) *InternalUserSelect {
	ius.fns = append(ius.fns, fns...)
	return ius
}

// Scan applies the selector query and scans the result into the given value.
func (ius *InternalUserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ius.ctx, "Select")
	if err := ius.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InternalUserQuery, *InternalUserSelect](ctx, ius.InternalUserQuery, ius, ius.inters, v)
}

func (ius *InternalUserSelect) sqlScan(ctx context.Context, root *InternalUserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ius.fns))
	for _, fn := range ius.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ius.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ius.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
