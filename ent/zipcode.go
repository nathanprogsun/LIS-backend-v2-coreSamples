// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/zipcode"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Zipcode is the model entity for the Zipcode schema.
type Zipcode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"zipcode"`
	// ZipCodeType holds the value of the "ZipCodeType" field.
	ZipCodeType string `json:"ZipCodeType,omitempty"`
	// City holds the value of the "City" field.
	City string `json:"City,omitempty"`
	// State holds the value of the "State" field.
	State string `json:"State,omitempty"`
	// LocationType holds the value of the "LocationType" field.
	LocationType string `json:"LocationType,omitempty"`
	// Lat holds the value of the "Lat" field.
	Lat float64 `json:"Lat,omitempty"`
	// Long holds the value of the "Long" field.
	Long         float64 `json:"Long,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Zipcode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case zipcode.FieldLat, zipcode.FieldLong:
			values[i] = new(sql.NullFloat64)
		case zipcode.FieldID:
			values[i] = new(sql.NullInt64)
		case zipcode.FieldZipCodeType, zipcode.FieldCity, zipcode.FieldState, zipcode.FieldLocationType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Zipcode fields.
func (z *Zipcode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case zipcode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			z.ID = int(value.Int64)
		case zipcode.FieldZipCodeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ZipCodeType", values[i])
			} else if value.Valid {
				z.ZipCodeType = value.String
			}
		case zipcode.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field City", values[i])
			} else if value.Valid {
				z.City = value.String
			}
		case zipcode.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field State", values[i])
			} else if value.Valid {
				z.State = value.String
			}
		case zipcode.FieldLocationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field LocationType", values[i])
			} else if value.Valid {
				z.LocationType = value.String
			}
		case zipcode.FieldLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Lat", values[i])
			} else if value.Valid {
				z.Lat = value.Float64
			}
		case zipcode.FieldLong:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Long", values[i])
			} else if value.Valid {
				z.Long = value.Float64
			}
		default:
			z.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Zipcode.
// This includes values selected through modifiers, order, etc.
func (z *Zipcode) Value(name string) (ent.Value, error) {
	return z.selectValues.Get(name)
}

// Update returns a builder for updating this Zipcode.
// Note that you need to call Zipcode.Unwrap() before calling this method if this Zipcode
// was returned from a transaction, and the transaction was committed or rolled back.
func (z *Zipcode) Update() *ZipcodeUpdateOne {
	return NewZipcodeClient(z.config).UpdateOne(z)
}

// Unwrap unwraps the Zipcode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (z *Zipcode) Unwrap() *Zipcode {
	_tx, ok := z.config.driver.(*txDriver)
	if !ok {
		panic("ent: Zipcode is not a transactional entity")
	}
	z.config.driver = _tx.drv
	return z
}

// String implements the fmt.Stringer.
func (z *Zipcode) String() string {
	var builder strings.Builder
	builder.WriteString("Zipcode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", z.ID))
	builder.WriteString("ZipCodeType=")
	builder.WriteString(z.ZipCodeType)
	builder.WriteString(", ")
	builder.WriteString("City=")
	builder.WriteString(z.City)
	builder.WriteString(", ")
	builder.WriteString("State=")
	builder.WriteString(z.State)
	builder.WriteString(", ")
	builder.WriteString("LocationType=")
	builder.WriteString(z.LocationType)
	builder.WriteString(", ")
	builder.WriteString("Lat=")
	builder.WriteString(fmt.Sprintf("%v", z.Lat))
	builder.WriteString(", ")
	builder.WriteString("Long=")
	builder.WriteString(fmt.Sprintf("%v", z.Long))
	builder.WriteByte(')')
	return builder.String()
}

// Zipcodes is a parsable slice of Zipcode.
type Zipcodes []*Zipcode
