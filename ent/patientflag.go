// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/patientflag"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PatientFlag is the model entity for the PatientFlag schema.
type PatientFlag struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"patient_flag_id"`
	// PatientFlagName holds the value of the "patient_flag_name" field.
	PatientFlagName string `json:"patient_flag_name,omitempty"`
	// PatientFlagDisplayName holds the value of the "patient_flag_display_name" field.
	PatientFlagDisplayName string `json:"patient_flag_display_name,omitempty"`
	// PatientFlagDescription holds the value of the "patient_flag_description" field.
	PatientFlagDescription string `json:"patient_flag_description,omitempty"`
	// PatientFlagIsActive holds the value of the "patient_flag_is_active" field.
	PatientFlagIsActive bool `json:"patient_flag_is_active,omitempty"`
	// PatientFlagCreatedAt holds the value of the "patient_flag_created_at" field.
	PatientFlagCreatedAt time.Time `json:"patient_flag_created_at,omitempty"`
	// PatientFlagColor holds the value of the "patient_flag_color" field.
	PatientFlagColor string `json:"patient_flag_color,omitempty"`
	// PatientFlagedBy holds the value of the "patient_flaged_by" field.
	PatientFlagedBy string `json:"patient_flaged_by,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PatientFlag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case patientflag.FieldPatientFlagIsActive:
			values[i] = new(sql.NullBool)
		case patientflag.FieldID:
			values[i] = new(sql.NullInt64)
		case patientflag.FieldPatientFlagName, patientflag.FieldPatientFlagDisplayName, patientflag.FieldPatientFlagDescription, patientflag.FieldPatientFlagColor, patientflag.FieldPatientFlagedBy:
			values[i] = new(sql.NullString)
		case patientflag.FieldPatientFlagCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PatientFlag fields.
func (pf *PatientFlag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case patientflag.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pf.ID = int(value.Int64)
		case patientflag.FieldPatientFlagName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_flag_name", values[i])
			} else if value.Valid {
				pf.PatientFlagName = value.String
			}
		case patientflag.FieldPatientFlagDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_flag_display_name", values[i])
			} else if value.Valid {
				pf.PatientFlagDisplayName = value.String
			}
		case patientflag.FieldPatientFlagDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_flag_description", values[i])
			} else if value.Valid {
				pf.PatientFlagDescription = value.String
			}
		case patientflag.FieldPatientFlagIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field patient_flag_is_active", values[i])
			} else if value.Valid {
				pf.PatientFlagIsActive = value.Bool
			}
		case patientflag.FieldPatientFlagCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field patient_flag_created_at", values[i])
			} else if value.Valid {
				pf.PatientFlagCreatedAt = value.Time
			}
		case patientflag.FieldPatientFlagColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_flag_color", values[i])
			} else if value.Valid {
				pf.PatientFlagColor = value.String
			}
		case patientflag.FieldPatientFlagedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_flaged_by", values[i])
			} else if value.Valid {
				pf.PatientFlagedBy = value.String
			}
		default:
			pf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PatientFlag.
// This includes values selected through modifiers, order, etc.
func (pf *PatientFlag) Value(name string) (ent.Value, error) {
	return pf.selectValues.Get(name)
}

// Update returns a builder for updating this PatientFlag.
// Note that you need to call PatientFlag.Unwrap() before calling this method if this PatientFlag
// was returned from a transaction, and the transaction was committed or rolled back.
func (pf *PatientFlag) Update() *PatientFlagUpdateOne {
	return NewPatientFlagClient(pf.config).UpdateOne(pf)
}

// Unwrap unwraps the PatientFlag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pf *PatientFlag) Unwrap() *PatientFlag {
	_tx, ok := pf.config.driver.(*txDriver)
	if !ok {
		panic("ent: PatientFlag is not a transactional entity")
	}
	pf.config.driver = _tx.drv
	return pf
}

// String implements the fmt.Stringer.
func (pf *PatientFlag) String() string {
	var builder strings.Builder
	builder.WriteString("PatientFlag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pf.ID))
	builder.WriteString("patient_flag_name=")
	builder.WriteString(pf.PatientFlagName)
	builder.WriteString(", ")
	builder.WriteString("patient_flag_display_name=")
	builder.WriteString(pf.PatientFlagDisplayName)
	builder.WriteString(", ")
	builder.WriteString("patient_flag_description=")
	builder.WriteString(pf.PatientFlagDescription)
	builder.WriteString(", ")
	builder.WriteString("patient_flag_is_active=")
	builder.WriteString(fmt.Sprintf("%v", pf.PatientFlagIsActive))
	builder.WriteString(", ")
	builder.WriteString("patient_flag_created_at=")
	builder.WriteString(pf.PatientFlagCreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("patient_flag_color=")
	builder.WriteString(pf.PatientFlagColor)
	builder.WriteString(", ")
	builder.WriteString("patient_flaged_by=")
	builder.WriteString(pf.PatientFlagedBy)
	builder.WriteByte(')')
	return builder.String()
}

// PatientFlags is a parsable slice of PatientFlag.
type PatientFlags []*PatientFlag
