// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/serviceshipbillingplan"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceshipBillingPlanDelete is the builder for deleting a ServiceshipBillingPlan entity.
type ServiceshipBillingPlanDelete struct {
	config
	hooks    []Hook
	mutation *ServiceshipBillingPlanMutation
}

// Where appends a list predicates to the ServiceshipBillingPlanDelete builder.
func (sbpd *ServiceshipBillingPlanDelete) Where(ps ...predicate.ServiceshipBillingPlan) *ServiceshipBillingPlanDelete {
	sbpd.mutation.Where(ps...)
	return sbpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sbpd *ServiceshipBillingPlanDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sbpd.sqlExec, sbpd.mutation, sbpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sbpd *ServiceshipBillingPlanDelete) ExecX(ctx context.Context) int {
	n, err := sbpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sbpd *ServiceshipBillingPlanDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(serviceshipbillingplan.Table, sqlgraph.NewFieldSpec(serviceshipbillingplan.FieldID, field.TypeInt))
	if ps := sbpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sbpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sbpd.mutation.done = true
	return affected, err
}

// ServiceshipBillingPlanDeleteOne is the builder for deleting a single ServiceshipBillingPlan entity.
type ServiceshipBillingPlanDeleteOne struct {
	sbpd *ServiceshipBillingPlanDelete
}

// Where appends a list predicates to the ServiceshipBillingPlanDelete builder.
func (sbpdo *ServiceshipBillingPlanDeleteOne) Where(ps ...predicate.ServiceshipBillingPlan) *ServiceshipBillingPlanDeleteOne {
	sbpdo.sbpd.mutation.Where(ps...)
	return sbpdo
}

// Exec executes the deletion query.
func (sbpdo *ServiceshipBillingPlanDeleteOne) Exec(ctx context.Context) error {
	n, err := sbpdo.sbpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{serviceshipbillingplan.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sbpdo *ServiceshipBillingPlanDeleteOne) ExecX(ctx context.Context) {
	if err := sbpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
