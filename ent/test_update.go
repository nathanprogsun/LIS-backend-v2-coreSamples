// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/orderinfo"
	"coresamples/ent/predicate"
	"coresamples/ent/sampletype"
	"coresamples/ent/test"
	"coresamples/ent/testdetail"
	"coresamples/ent/tubetype"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestUpdate is the builder for updating Test entities.
type TestUpdate struct {
	config
	hooks    []Hook
	mutation *TestMutation
}

// Where appends a list predicates to the TestUpdate builder.
func (tu *TestUpdate) Where(ps ...predicate.Test) *TestUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTestName sets the "test_name" field.
func (tu *TestUpdate) SetTestName(s string) *TestUpdate {
	tu.mutation.SetTestName(s)
	return tu
}

// SetNillableTestName sets the "test_name" field if the given value is not nil.
func (tu *TestUpdate) SetNillableTestName(s *string) *TestUpdate {
	if s != nil {
		tu.SetTestName(*s)
	}
	return tu
}

// SetTestCode sets the "test_code" field.
func (tu *TestUpdate) SetTestCode(s string) *TestUpdate {
	tu.mutation.SetTestCode(s)
	return tu
}

// SetNillableTestCode sets the "test_code" field if the given value is not nil.
func (tu *TestUpdate) SetNillableTestCode(s *string) *TestUpdate {
	if s != nil {
		tu.SetTestCode(*s)
	}
	return tu
}

// SetDisplayName sets the "display_name" field.
func (tu *TestUpdate) SetDisplayName(s string) *TestUpdate {
	tu.mutation.SetDisplayName(s)
	return tu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (tu *TestUpdate) SetNillableDisplayName(s *string) *TestUpdate {
	if s != nil {
		tu.SetDisplayName(*s)
	}
	return tu
}

// SetTestDescription sets the "test_description" field.
func (tu *TestUpdate) SetTestDescription(s string) *TestUpdate {
	tu.mutation.SetTestDescription(s)
	return tu
}

// SetNillableTestDescription sets the "test_description" field if the given value is not nil.
func (tu *TestUpdate) SetNillableTestDescription(s *string) *TestUpdate {
	if s != nil {
		tu.SetTestDescription(*s)
	}
	return tu
}

// SetAssayName sets the "assay_name" field.
func (tu *TestUpdate) SetAssayName(s string) *TestUpdate {
	tu.mutation.SetAssayName(s)
	return tu
}

// SetNillableAssayName sets the "assay_name" field if the given value is not nil.
func (tu *TestUpdate) SetNillableAssayName(s *string) *TestUpdate {
	if s != nil {
		tu.SetAssayName(*s)
	}
	return tu
}

// SetIsActive sets the "isActive" field.
func (tu *TestUpdate) SetIsActive(b bool) *TestUpdate {
	tu.mutation.SetIsActive(b)
	return tu
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (tu *TestUpdate) SetNillableIsActive(b *bool) *TestUpdate {
	if b != nil {
		tu.SetIsActive(*b)
	}
	return tu
}

// SetCreatedTime sets the "created_time" field.
func (tu *TestUpdate) SetCreatedTime(t time.Time) *TestUpdate {
	tu.mutation.SetCreatedTime(t)
	return tu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (tu *TestUpdate) SetNillableCreatedTime(t *time.Time) *TestUpdate {
	if t != nil {
		tu.SetCreatedTime(*t)
	}
	return tu
}

// SetUpdatedTime sets the "updated_time" field.
func (tu *TestUpdate) SetUpdatedTime(t time.Time) *TestUpdate {
	tu.mutation.SetUpdatedTime(t)
	return tu
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (tu *TestUpdate) ClearUpdatedTime() *TestUpdate {
	tu.mutation.ClearUpdatedTime()
	return tu
}

// AddTestDetailIDs adds the "test_details" edge to the TestDetail entity by IDs.
func (tu *TestUpdate) AddTestDetailIDs(ids ...int) *TestUpdate {
	tu.mutation.AddTestDetailIDs(ids...)
	return tu
}

// AddTestDetails adds the "test_details" edges to the TestDetail entity.
func (tu *TestUpdate) AddTestDetails(t ...*TestDetail) *TestUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTestDetailIDs(ids...)
}

// AddOrderInfoIDs adds the "order_info" edge to the OrderInfo entity by IDs.
func (tu *TestUpdate) AddOrderInfoIDs(ids ...int) *TestUpdate {
	tu.mutation.AddOrderInfoIDs(ids...)
	return tu
}

// AddOrderInfo adds the "order_info" edges to the OrderInfo entity.
func (tu *TestUpdate) AddOrderInfo(o ...*OrderInfo) *TestUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tu.AddOrderInfoIDs(ids...)
}

// AddSampleTypeIDs adds the "sample_types" edge to the SampleType entity by IDs.
func (tu *TestUpdate) AddSampleTypeIDs(ids ...int) *TestUpdate {
	tu.mutation.AddSampleTypeIDs(ids...)
	return tu
}

// AddSampleTypes adds the "sample_types" edges to the SampleType entity.
func (tu *TestUpdate) AddSampleTypes(s ...*SampleType) *TestUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddSampleTypeIDs(ids...)
}

// AddTubeTypeIDs adds the "tube_types" edge to the TubeType entity by IDs.
func (tu *TestUpdate) AddTubeTypeIDs(ids ...int) *TestUpdate {
	tu.mutation.AddTubeTypeIDs(ids...)
	return tu
}

// AddTubeTypes adds the "tube_types" edges to the TubeType entity.
func (tu *TestUpdate) AddTubeTypes(t ...*TubeType) *TestUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTubeTypeIDs(ids...)
}

// Mutation returns the TestMutation object of the builder.
func (tu *TestUpdate) Mutation() *TestMutation {
	return tu.mutation
}

// ClearTestDetails clears all "test_details" edges to the TestDetail entity.
func (tu *TestUpdate) ClearTestDetails() *TestUpdate {
	tu.mutation.ClearTestDetails()
	return tu
}

// RemoveTestDetailIDs removes the "test_details" edge to TestDetail entities by IDs.
func (tu *TestUpdate) RemoveTestDetailIDs(ids ...int) *TestUpdate {
	tu.mutation.RemoveTestDetailIDs(ids...)
	return tu
}

// RemoveTestDetails removes "test_details" edges to TestDetail entities.
func (tu *TestUpdate) RemoveTestDetails(t ...*TestDetail) *TestUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTestDetailIDs(ids...)
}

// ClearOrderInfo clears all "order_info" edges to the OrderInfo entity.
func (tu *TestUpdate) ClearOrderInfo() *TestUpdate {
	tu.mutation.ClearOrderInfo()
	return tu
}

// RemoveOrderInfoIDs removes the "order_info" edge to OrderInfo entities by IDs.
func (tu *TestUpdate) RemoveOrderInfoIDs(ids ...int) *TestUpdate {
	tu.mutation.RemoveOrderInfoIDs(ids...)
	return tu
}

// RemoveOrderInfo removes "order_info" edges to OrderInfo entities.
func (tu *TestUpdate) RemoveOrderInfo(o ...*OrderInfo) *TestUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tu.RemoveOrderInfoIDs(ids...)
}

// ClearSampleTypes clears all "sample_types" edges to the SampleType entity.
func (tu *TestUpdate) ClearSampleTypes() *TestUpdate {
	tu.mutation.ClearSampleTypes()
	return tu
}

// RemoveSampleTypeIDs removes the "sample_types" edge to SampleType entities by IDs.
func (tu *TestUpdate) RemoveSampleTypeIDs(ids ...int) *TestUpdate {
	tu.mutation.RemoveSampleTypeIDs(ids...)
	return tu
}

// RemoveSampleTypes removes "sample_types" edges to SampleType entities.
func (tu *TestUpdate) RemoveSampleTypes(s ...*SampleType) *TestUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveSampleTypeIDs(ids...)
}

// ClearTubeTypes clears all "tube_types" edges to the TubeType entity.
func (tu *TestUpdate) ClearTubeTypes() *TestUpdate {
	tu.mutation.ClearTubeTypes()
	return tu
}

// RemoveTubeTypeIDs removes the "tube_types" edge to TubeType entities by IDs.
func (tu *TestUpdate) RemoveTubeTypeIDs(ids ...int) *TestUpdate {
	tu.mutation.RemoveTubeTypeIDs(ids...)
	return tu
}

// RemoveTubeTypes removes "tube_types" edges to TubeType entities.
func (tu *TestUpdate) RemoveTubeTypes(t ...*TubeType) *TestUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTubeTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TestUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TestUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TestUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TestUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TestUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedTime(); !ok && !tu.mutation.UpdatedTimeCleared() {
		v := test.UpdateDefaultUpdatedTime()
		tu.mutation.SetUpdatedTime(v)
	}
}

func (tu *TestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(test.Table, test.Columns, sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.TestName(); ok {
		_spec.SetField(test.FieldTestName, field.TypeString, value)
	}
	if value, ok := tu.mutation.TestCode(); ok {
		_spec.SetField(test.FieldTestCode, field.TypeString, value)
	}
	if value, ok := tu.mutation.DisplayName(); ok {
		_spec.SetField(test.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := tu.mutation.TestDescription(); ok {
		_spec.SetField(test.FieldTestDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.AssayName(); ok {
		_spec.SetField(test.FieldAssayName, field.TypeString, value)
	}
	if value, ok := tu.mutation.IsActive(); ok {
		_spec.SetField(test.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tu.mutation.CreatedTime(); ok {
		_spec.SetField(test.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedTime(); ok {
		_spec.SetField(test.FieldUpdatedTime, field.TypeTime, value)
	}
	if tu.mutation.UpdatedTimeCleared() {
		_spec.ClearField(test.FieldUpdatedTime, field.TypeTime)
	}
	if tu.mutation.TestDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   test.TestDetailsTable,
			Columns: []string{test.TestDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTestDetailsIDs(); len(nodes) > 0 && !tu.mutation.TestDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   test.TestDetailsTable,
			Columns: []string{test.TestDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TestDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   test.TestDetailsTable,
			Columns: []string{test.TestDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.OrderInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.OrderInfoTable,
			Columns: test.OrderInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedOrderInfoIDs(); len(nodes) > 0 && !tu.mutation.OrderInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.OrderInfoTable,
			Columns: test.OrderInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OrderInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.OrderInfoTable,
			Columns: test.OrderInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.SampleTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.SampleTypesTable,
			Columns: test.SampleTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sampletype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedSampleTypesIDs(); len(nodes) > 0 && !tu.mutation.SampleTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.SampleTypesTable,
			Columns: test.SampleTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sampletype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SampleTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.SampleTypesTable,
			Columns: test.SampleTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sampletype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TubeTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.TubeTypesTable,
			Columns: test.TubeTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTubeTypesIDs(); len(nodes) > 0 && !tu.mutation.TubeTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.TubeTypesTable,
			Columns: test.TubeTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TubeTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.TubeTypesTable,
			Columns: test.TubeTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{test.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TestUpdateOne is the builder for updating a single Test entity.
type TestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestMutation
}

// SetTestName sets the "test_name" field.
func (tuo *TestUpdateOne) SetTestName(s string) *TestUpdateOne {
	tuo.mutation.SetTestName(s)
	return tuo
}

// SetNillableTestName sets the "test_name" field if the given value is not nil.
func (tuo *TestUpdateOne) SetNillableTestName(s *string) *TestUpdateOne {
	if s != nil {
		tuo.SetTestName(*s)
	}
	return tuo
}

// SetTestCode sets the "test_code" field.
func (tuo *TestUpdateOne) SetTestCode(s string) *TestUpdateOne {
	tuo.mutation.SetTestCode(s)
	return tuo
}

// SetNillableTestCode sets the "test_code" field if the given value is not nil.
func (tuo *TestUpdateOne) SetNillableTestCode(s *string) *TestUpdateOne {
	if s != nil {
		tuo.SetTestCode(*s)
	}
	return tuo
}

// SetDisplayName sets the "display_name" field.
func (tuo *TestUpdateOne) SetDisplayName(s string) *TestUpdateOne {
	tuo.mutation.SetDisplayName(s)
	return tuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (tuo *TestUpdateOne) SetNillableDisplayName(s *string) *TestUpdateOne {
	if s != nil {
		tuo.SetDisplayName(*s)
	}
	return tuo
}

// SetTestDescription sets the "test_description" field.
func (tuo *TestUpdateOne) SetTestDescription(s string) *TestUpdateOne {
	tuo.mutation.SetTestDescription(s)
	return tuo
}

// SetNillableTestDescription sets the "test_description" field if the given value is not nil.
func (tuo *TestUpdateOne) SetNillableTestDescription(s *string) *TestUpdateOne {
	if s != nil {
		tuo.SetTestDescription(*s)
	}
	return tuo
}

// SetAssayName sets the "assay_name" field.
func (tuo *TestUpdateOne) SetAssayName(s string) *TestUpdateOne {
	tuo.mutation.SetAssayName(s)
	return tuo
}

// SetNillableAssayName sets the "assay_name" field if the given value is not nil.
func (tuo *TestUpdateOne) SetNillableAssayName(s *string) *TestUpdateOne {
	if s != nil {
		tuo.SetAssayName(*s)
	}
	return tuo
}

// SetIsActive sets the "isActive" field.
func (tuo *TestUpdateOne) SetIsActive(b bool) *TestUpdateOne {
	tuo.mutation.SetIsActive(b)
	return tuo
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (tuo *TestUpdateOne) SetNillableIsActive(b *bool) *TestUpdateOne {
	if b != nil {
		tuo.SetIsActive(*b)
	}
	return tuo
}

// SetCreatedTime sets the "created_time" field.
func (tuo *TestUpdateOne) SetCreatedTime(t time.Time) *TestUpdateOne {
	tuo.mutation.SetCreatedTime(t)
	return tuo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (tuo *TestUpdateOne) SetNillableCreatedTime(t *time.Time) *TestUpdateOne {
	if t != nil {
		tuo.SetCreatedTime(*t)
	}
	return tuo
}

// SetUpdatedTime sets the "updated_time" field.
func (tuo *TestUpdateOne) SetUpdatedTime(t time.Time) *TestUpdateOne {
	tuo.mutation.SetUpdatedTime(t)
	return tuo
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (tuo *TestUpdateOne) ClearUpdatedTime() *TestUpdateOne {
	tuo.mutation.ClearUpdatedTime()
	return tuo
}

// AddTestDetailIDs adds the "test_details" edge to the TestDetail entity by IDs.
func (tuo *TestUpdateOne) AddTestDetailIDs(ids ...int) *TestUpdateOne {
	tuo.mutation.AddTestDetailIDs(ids...)
	return tuo
}

// AddTestDetails adds the "test_details" edges to the TestDetail entity.
func (tuo *TestUpdateOne) AddTestDetails(t ...*TestDetail) *TestUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTestDetailIDs(ids...)
}

// AddOrderInfoIDs adds the "order_info" edge to the OrderInfo entity by IDs.
func (tuo *TestUpdateOne) AddOrderInfoIDs(ids ...int) *TestUpdateOne {
	tuo.mutation.AddOrderInfoIDs(ids...)
	return tuo
}

// AddOrderInfo adds the "order_info" edges to the OrderInfo entity.
func (tuo *TestUpdateOne) AddOrderInfo(o ...*OrderInfo) *TestUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tuo.AddOrderInfoIDs(ids...)
}

// AddSampleTypeIDs adds the "sample_types" edge to the SampleType entity by IDs.
func (tuo *TestUpdateOne) AddSampleTypeIDs(ids ...int) *TestUpdateOne {
	tuo.mutation.AddSampleTypeIDs(ids...)
	return tuo
}

// AddSampleTypes adds the "sample_types" edges to the SampleType entity.
func (tuo *TestUpdateOne) AddSampleTypes(s ...*SampleType) *TestUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddSampleTypeIDs(ids...)
}

// AddTubeTypeIDs adds the "tube_types" edge to the TubeType entity by IDs.
func (tuo *TestUpdateOne) AddTubeTypeIDs(ids ...int) *TestUpdateOne {
	tuo.mutation.AddTubeTypeIDs(ids...)
	return tuo
}

// AddTubeTypes adds the "tube_types" edges to the TubeType entity.
func (tuo *TestUpdateOne) AddTubeTypes(t ...*TubeType) *TestUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTubeTypeIDs(ids...)
}

// Mutation returns the TestMutation object of the builder.
func (tuo *TestUpdateOne) Mutation() *TestMutation {
	return tuo.mutation
}

// ClearTestDetails clears all "test_details" edges to the TestDetail entity.
func (tuo *TestUpdateOne) ClearTestDetails() *TestUpdateOne {
	tuo.mutation.ClearTestDetails()
	return tuo
}

// RemoveTestDetailIDs removes the "test_details" edge to TestDetail entities by IDs.
func (tuo *TestUpdateOne) RemoveTestDetailIDs(ids ...int) *TestUpdateOne {
	tuo.mutation.RemoveTestDetailIDs(ids...)
	return tuo
}

// RemoveTestDetails removes "test_details" edges to TestDetail entities.
func (tuo *TestUpdateOne) RemoveTestDetails(t ...*TestDetail) *TestUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTestDetailIDs(ids...)
}

// ClearOrderInfo clears all "order_info" edges to the OrderInfo entity.
func (tuo *TestUpdateOne) ClearOrderInfo() *TestUpdateOne {
	tuo.mutation.ClearOrderInfo()
	return tuo
}

// RemoveOrderInfoIDs removes the "order_info" edge to OrderInfo entities by IDs.
func (tuo *TestUpdateOne) RemoveOrderInfoIDs(ids ...int) *TestUpdateOne {
	tuo.mutation.RemoveOrderInfoIDs(ids...)
	return tuo
}

// RemoveOrderInfo removes "order_info" edges to OrderInfo entities.
func (tuo *TestUpdateOne) RemoveOrderInfo(o ...*OrderInfo) *TestUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tuo.RemoveOrderInfoIDs(ids...)
}

// ClearSampleTypes clears all "sample_types" edges to the SampleType entity.
func (tuo *TestUpdateOne) ClearSampleTypes() *TestUpdateOne {
	tuo.mutation.ClearSampleTypes()
	return tuo
}

// RemoveSampleTypeIDs removes the "sample_types" edge to SampleType entities by IDs.
func (tuo *TestUpdateOne) RemoveSampleTypeIDs(ids ...int) *TestUpdateOne {
	tuo.mutation.RemoveSampleTypeIDs(ids...)
	return tuo
}

// RemoveSampleTypes removes "sample_types" edges to SampleType entities.
func (tuo *TestUpdateOne) RemoveSampleTypes(s ...*SampleType) *TestUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveSampleTypeIDs(ids...)
}

// ClearTubeTypes clears all "tube_types" edges to the TubeType entity.
func (tuo *TestUpdateOne) ClearTubeTypes() *TestUpdateOne {
	tuo.mutation.ClearTubeTypes()
	return tuo
}

// RemoveTubeTypeIDs removes the "tube_types" edge to TubeType entities by IDs.
func (tuo *TestUpdateOne) RemoveTubeTypeIDs(ids ...int) *TestUpdateOne {
	tuo.mutation.RemoveTubeTypeIDs(ids...)
	return tuo
}

// RemoveTubeTypes removes "tube_types" edges to TubeType entities.
func (tuo *TestUpdateOne) RemoveTubeTypes(t ...*TubeType) *TestUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTubeTypeIDs(ids...)
}

// Where appends a list predicates to the TestUpdate builder.
func (tuo *TestUpdateOne) Where(ps ...predicate.Test) *TestUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TestUpdateOne) Select(field string, fields ...string) *TestUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Test entity.
func (tuo *TestUpdateOne) Save(ctx context.Context) (*Test, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TestUpdateOne) SaveX(ctx context.Context) *Test {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TestUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TestUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TestUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedTime(); !ok && !tuo.mutation.UpdatedTimeCleared() {
		v := test.UpdateDefaultUpdatedTime()
		tuo.mutation.SetUpdatedTime(v)
	}
}

func (tuo *TestUpdateOne) sqlSave(ctx context.Context) (_node *Test, err error) {
	_spec := sqlgraph.NewUpdateSpec(test.Table, test.Columns, sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Test.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, test.FieldID)
		for _, f := range fields {
			if !test.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != test.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.TestName(); ok {
		_spec.SetField(test.FieldTestName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TestCode(); ok {
		_spec.SetField(test.FieldTestCode, field.TypeString, value)
	}
	if value, ok := tuo.mutation.DisplayName(); ok {
		_spec.SetField(test.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TestDescription(); ok {
		_spec.SetField(test.FieldTestDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.AssayName(); ok {
		_spec.SetField(test.FieldAssayName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.IsActive(); ok {
		_spec.SetField(test.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.CreatedTime(); ok {
		_spec.SetField(test.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedTime(); ok {
		_spec.SetField(test.FieldUpdatedTime, field.TypeTime, value)
	}
	if tuo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(test.FieldUpdatedTime, field.TypeTime)
	}
	if tuo.mutation.TestDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   test.TestDetailsTable,
			Columns: []string{test.TestDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTestDetailsIDs(); len(nodes) > 0 && !tuo.mutation.TestDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   test.TestDetailsTable,
			Columns: []string{test.TestDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TestDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   test.TestDetailsTable,
			Columns: []string{test.TestDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.OrderInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.OrderInfoTable,
			Columns: test.OrderInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedOrderInfoIDs(); len(nodes) > 0 && !tuo.mutation.OrderInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.OrderInfoTable,
			Columns: test.OrderInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OrderInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.OrderInfoTable,
			Columns: test.OrderInfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.SampleTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.SampleTypesTable,
			Columns: test.SampleTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sampletype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedSampleTypesIDs(); len(nodes) > 0 && !tuo.mutation.SampleTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.SampleTypesTable,
			Columns: test.SampleTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sampletype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SampleTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.SampleTypesTable,
			Columns: test.SampleTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sampletype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TubeTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.TubeTypesTable,
			Columns: test.TubeTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTubeTypesIDs(); len(nodes) > 0 && !tuo.mutation.TubeTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.TubeTypesTable,
			Columns: test.TubeTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TubeTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   test.TubeTypesTable,
			Columns: test.TubeTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Test{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{test.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
