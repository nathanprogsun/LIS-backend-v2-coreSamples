// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/sampletype"
	"coresamples/ent/test"
	"coresamples/ent/tube"
	"coresamples/ent/tubetype"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TubeTypeUpdate is the builder for updating TubeType entities.
type TubeTypeUpdate struct {
	config
	hooks    []Hook
	mutation *TubeTypeMutation
}

// Where appends a list predicates to the TubeTypeUpdate builder.
func (ttu *TubeTypeUpdate) Where(ps ...predicate.TubeType) *TubeTypeUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetTubeName sets the "tube_name" field.
func (ttu *TubeTypeUpdate) SetTubeName(s string) *TubeTypeUpdate {
	ttu.mutation.SetTubeName(s)
	return ttu
}

// SetNillableTubeName sets the "tube_name" field if the given value is not nil.
func (ttu *TubeTypeUpdate) SetNillableTubeName(s *string) *TubeTypeUpdate {
	if s != nil {
		ttu.SetTubeName(*s)
	}
	return ttu
}

// SetTubeTypeEnum sets the "tube_type_enum" field.
func (ttu *TubeTypeUpdate) SetTubeTypeEnum(s string) *TubeTypeUpdate {
	ttu.mutation.SetTubeTypeEnum(s)
	return ttu
}

// SetNillableTubeTypeEnum sets the "tube_type_enum" field if the given value is not nil.
func (ttu *TubeTypeUpdate) SetNillableTubeTypeEnum(s *string) *TubeTypeUpdate {
	if s != nil {
		ttu.SetTubeTypeEnum(*s)
	}
	return ttu
}

// SetTubeTypeSymbol sets the "tube_type_symbol" field.
func (ttu *TubeTypeUpdate) SetTubeTypeSymbol(s string) *TubeTypeUpdate {
	ttu.mutation.SetTubeTypeSymbol(s)
	return ttu
}

// SetNillableTubeTypeSymbol sets the "tube_type_symbol" field if the given value is not nil.
func (ttu *TubeTypeUpdate) SetNillableTubeTypeSymbol(s *string) *TubeTypeUpdate {
	if s != nil {
		ttu.SetTubeTypeSymbol(*s)
	}
	return ttu
}

// AddTubeIDs adds the "tube" edge to the Tube entity by IDs.
func (ttu *TubeTypeUpdate) AddTubeIDs(ids ...int) *TubeTypeUpdate {
	ttu.mutation.AddTubeIDs(ids...)
	return ttu
}

// AddTube adds the "tube" edges to the Tube entity.
func (ttu *TubeTypeUpdate) AddTube(t ...*Tube) *TubeTypeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.AddTubeIDs(ids...)
}

// AddSampleTypeIDs adds the "sample_types" edge to the SampleType entity by IDs.
func (ttu *TubeTypeUpdate) AddSampleTypeIDs(ids ...int) *TubeTypeUpdate {
	ttu.mutation.AddSampleTypeIDs(ids...)
	return ttu
}

// AddSampleTypes adds the "sample_types" edges to the SampleType entity.
func (ttu *TubeTypeUpdate) AddSampleTypes(s ...*SampleType) *TubeTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ttu.AddSampleTypeIDs(ids...)
}

// AddTestIDs adds the "tests" edge to the Test entity by IDs.
func (ttu *TubeTypeUpdate) AddTestIDs(ids ...int) *TubeTypeUpdate {
	ttu.mutation.AddTestIDs(ids...)
	return ttu
}

// AddTests adds the "tests" edges to the Test entity.
func (ttu *TubeTypeUpdate) AddTests(t ...*Test) *TubeTypeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.AddTestIDs(ids...)
}

// Mutation returns the TubeTypeMutation object of the builder.
func (ttu *TubeTypeUpdate) Mutation() *TubeTypeMutation {
	return ttu.mutation
}

// ClearTube clears all "tube" edges to the Tube entity.
func (ttu *TubeTypeUpdate) ClearTube() *TubeTypeUpdate {
	ttu.mutation.ClearTube()
	return ttu
}

// RemoveTubeIDs removes the "tube" edge to Tube entities by IDs.
func (ttu *TubeTypeUpdate) RemoveTubeIDs(ids ...int) *TubeTypeUpdate {
	ttu.mutation.RemoveTubeIDs(ids...)
	return ttu
}

// RemoveTube removes "tube" edges to Tube entities.
func (ttu *TubeTypeUpdate) RemoveTube(t ...*Tube) *TubeTypeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.RemoveTubeIDs(ids...)
}

// ClearSampleTypes clears all "sample_types" edges to the SampleType entity.
func (ttu *TubeTypeUpdate) ClearSampleTypes() *TubeTypeUpdate {
	ttu.mutation.ClearSampleTypes()
	return ttu
}

// RemoveSampleTypeIDs removes the "sample_types" edge to SampleType entities by IDs.
func (ttu *TubeTypeUpdate) RemoveSampleTypeIDs(ids ...int) *TubeTypeUpdate {
	ttu.mutation.RemoveSampleTypeIDs(ids...)
	return ttu
}

// RemoveSampleTypes removes "sample_types" edges to SampleType entities.
func (ttu *TubeTypeUpdate) RemoveSampleTypes(s ...*SampleType) *TubeTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ttu.RemoveSampleTypeIDs(ids...)
}

// ClearTests clears all "tests" edges to the Test entity.
func (ttu *TubeTypeUpdate) ClearTests() *TubeTypeUpdate {
	ttu.mutation.ClearTests()
	return ttu
}

// RemoveTestIDs removes the "tests" edge to Test entities by IDs.
func (ttu *TubeTypeUpdate) RemoveTestIDs(ids ...int) *TubeTypeUpdate {
	ttu.mutation.RemoveTestIDs(ids...)
	return ttu
}

// RemoveTests removes "tests" edges to Test entities.
func (ttu *TubeTypeUpdate) RemoveTests(t ...*Test) *TubeTypeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.RemoveTestIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TubeTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ttu.sqlSave, ttu.mutation, ttu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TubeTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TubeTypeUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TubeTypeUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ttu *TubeTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tubetype.Table, tubetype.Columns, sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt))
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.TubeName(); ok {
		_spec.SetField(tubetype.FieldTubeName, field.TypeString, value)
	}
	if value, ok := ttu.mutation.TubeTypeEnum(); ok {
		_spec.SetField(tubetype.FieldTubeTypeEnum, field.TypeString, value)
	}
	if value, ok := ttu.mutation.TubeTypeSymbol(); ok {
		_spec.SetField(tubetype.FieldTubeTypeSymbol, field.TypeString, value)
	}
	if ttu.mutation.TubeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tubetype.TubeTable,
			Columns: tubetype.TubePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tube.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.RemovedTubeIDs(); len(nodes) > 0 && !ttu.mutation.TubeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tubetype.TubeTable,
			Columns: tubetype.TubePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tube.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.TubeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tubetype.TubeTable,
			Columns: tubetype.TubePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tube.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttu.mutation.SampleTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tubetype.SampleTypesTable,
			Columns: tubetype.SampleTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sampletype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.RemovedSampleTypesIDs(); len(nodes) > 0 && !ttu.mutation.SampleTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tubetype.SampleTypesTable,
			Columns: tubetype.SampleTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sampletype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.SampleTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tubetype.SampleTypesTable,
			Columns: tubetype.SampleTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sampletype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttu.mutation.TestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tubetype.TestsTable,
			Columns: tubetype.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.RemovedTestsIDs(); len(nodes) > 0 && !ttu.mutation.TestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tubetype.TestsTable,
			Columns: tubetype.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.TestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tubetype.TestsTable,
			Columns: tubetype.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tubetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ttu.mutation.done = true
	return n, nil
}

// TubeTypeUpdateOne is the builder for updating a single TubeType entity.
type TubeTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TubeTypeMutation
}

// SetTubeName sets the "tube_name" field.
func (ttuo *TubeTypeUpdateOne) SetTubeName(s string) *TubeTypeUpdateOne {
	ttuo.mutation.SetTubeName(s)
	return ttuo
}

// SetNillableTubeName sets the "tube_name" field if the given value is not nil.
func (ttuo *TubeTypeUpdateOne) SetNillableTubeName(s *string) *TubeTypeUpdateOne {
	if s != nil {
		ttuo.SetTubeName(*s)
	}
	return ttuo
}

// SetTubeTypeEnum sets the "tube_type_enum" field.
func (ttuo *TubeTypeUpdateOne) SetTubeTypeEnum(s string) *TubeTypeUpdateOne {
	ttuo.mutation.SetTubeTypeEnum(s)
	return ttuo
}

// SetNillableTubeTypeEnum sets the "tube_type_enum" field if the given value is not nil.
func (ttuo *TubeTypeUpdateOne) SetNillableTubeTypeEnum(s *string) *TubeTypeUpdateOne {
	if s != nil {
		ttuo.SetTubeTypeEnum(*s)
	}
	return ttuo
}

// SetTubeTypeSymbol sets the "tube_type_symbol" field.
func (ttuo *TubeTypeUpdateOne) SetTubeTypeSymbol(s string) *TubeTypeUpdateOne {
	ttuo.mutation.SetTubeTypeSymbol(s)
	return ttuo
}

// SetNillableTubeTypeSymbol sets the "tube_type_symbol" field if the given value is not nil.
func (ttuo *TubeTypeUpdateOne) SetNillableTubeTypeSymbol(s *string) *TubeTypeUpdateOne {
	if s != nil {
		ttuo.SetTubeTypeSymbol(*s)
	}
	return ttuo
}

// AddTubeIDs adds the "tube" edge to the Tube entity by IDs.
func (ttuo *TubeTypeUpdateOne) AddTubeIDs(ids ...int) *TubeTypeUpdateOne {
	ttuo.mutation.AddTubeIDs(ids...)
	return ttuo
}

// AddTube adds the "tube" edges to the Tube entity.
func (ttuo *TubeTypeUpdateOne) AddTube(t ...*Tube) *TubeTypeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.AddTubeIDs(ids...)
}

// AddSampleTypeIDs adds the "sample_types" edge to the SampleType entity by IDs.
func (ttuo *TubeTypeUpdateOne) AddSampleTypeIDs(ids ...int) *TubeTypeUpdateOne {
	ttuo.mutation.AddSampleTypeIDs(ids...)
	return ttuo
}

// AddSampleTypes adds the "sample_types" edges to the SampleType entity.
func (ttuo *TubeTypeUpdateOne) AddSampleTypes(s ...*SampleType) *TubeTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ttuo.AddSampleTypeIDs(ids...)
}

// AddTestIDs adds the "tests" edge to the Test entity by IDs.
func (ttuo *TubeTypeUpdateOne) AddTestIDs(ids ...int) *TubeTypeUpdateOne {
	ttuo.mutation.AddTestIDs(ids...)
	return ttuo
}

// AddTests adds the "tests" edges to the Test entity.
func (ttuo *TubeTypeUpdateOne) AddTests(t ...*Test) *TubeTypeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.AddTestIDs(ids...)
}

// Mutation returns the TubeTypeMutation object of the builder.
func (ttuo *TubeTypeUpdateOne) Mutation() *TubeTypeMutation {
	return ttuo.mutation
}

// ClearTube clears all "tube" edges to the Tube entity.
func (ttuo *TubeTypeUpdateOne) ClearTube() *TubeTypeUpdateOne {
	ttuo.mutation.ClearTube()
	return ttuo
}

// RemoveTubeIDs removes the "tube" edge to Tube entities by IDs.
func (ttuo *TubeTypeUpdateOne) RemoveTubeIDs(ids ...int) *TubeTypeUpdateOne {
	ttuo.mutation.RemoveTubeIDs(ids...)
	return ttuo
}

// RemoveTube removes "tube" edges to Tube entities.
func (ttuo *TubeTypeUpdateOne) RemoveTube(t ...*Tube) *TubeTypeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.RemoveTubeIDs(ids...)
}

// ClearSampleTypes clears all "sample_types" edges to the SampleType entity.
func (ttuo *TubeTypeUpdateOne) ClearSampleTypes() *TubeTypeUpdateOne {
	ttuo.mutation.ClearSampleTypes()
	return ttuo
}

// RemoveSampleTypeIDs removes the "sample_types" edge to SampleType entities by IDs.
func (ttuo *TubeTypeUpdateOne) RemoveSampleTypeIDs(ids ...int) *TubeTypeUpdateOne {
	ttuo.mutation.RemoveSampleTypeIDs(ids...)
	return ttuo
}

// RemoveSampleTypes removes "sample_types" edges to SampleType entities.
func (ttuo *TubeTypeUpdateOne) RemoveSampleTypes(s ...*SampleType) *TubeTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ttuo.RemoveSampleTypeIDs(ids...)
}

// ClearTests clears all "tests" edges to the Test entity.
func (ttuo *TubeTypeUpdateOne) ClearTests() *TubeTypeUpdateOne {
	ttuo.mutation.ClearTests()
	return ttuo
}

// RemoveTestIDs removes the "tests" edge to Test entities by IDs.
func (ttuo *TubeTypeUpdateOne) RemoveTestIDs(ids ...int) *TubeTypeUpdateOne {
	ttuo.mutation.RemoveTestIDs(ids...)
	return ttuo
}

// RemoveTests removes "tests" edges to Test entities.
func (ttuo *TubeTypeUpdateOne) RemoveTests(t ...*Test) *TubeTypeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.RemoveTestIDs(ids...)
}

// Where appends a list predicates to the TubeTypeUpdate builder.
func (ttuo *TubeTypeUpdateOne) Where(ps ...predicate.TubeType) *TubeTypeUpdateOne {
	ttuo.mutation.Where(ps...)
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TubeTypeUpdateOne) Select(field string, fields ...string) *TubeTypeUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TubeType entity.
func (ttuo *TubeTypeUpdateOne) Save(ctx context.Context) (*TubeType, error) {
	return withHooks(ctx, ttuo.sqlSave, ttuo.mutation, ttuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TubeTypeUpdateOne) SaveX(ctx context.Context) *TubeType {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TubeTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TubeTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ttuo *TubeTypeUpdateOne) sqlSave(ctx context.Context) (_node *TubeType, err error) {
	_spec := sqlgraph.NewUpdateSpec(tubetype.Table, tubetype.Columns, sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt))
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TubeType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tubetype.FieldID)
		for _, f := range fields {
			if !tubetype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tubetype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.TubeName(); ok {
		_spec.SetField(tubetype.FieldTubeName, field.TypeString, value)
	}
	if value, ok := ttuo.mutation.TubeTypeEnum(); ok {
		_spec.SetField(tubetype.FieldTubeTypeEnum, field.TypeString, value)
	}
	if value, ok := ttuo.mutation.TubeTypeSymbol(); ok {
		_spec.SetField(tubetype.FieldTubeTypeSymbol, field.TypeString, value)
	}
	if ttuo.mutation.TubeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tubetype.TubeTable,
			Columns: tubetype.TubePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tube.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.RemovedTubeIDs(); len(nodes) > 0 && !ttuo.mutation.TubeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tubetype.TubeTable,
			Columns: tubetype.TubePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tube.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.TubeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tubetype.TubeTable,
			Columns: tubetype.TubePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tube.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttuo.mutation.SampleTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tubetype.SampleTypesTable,
			Columns: tubetype.SampleTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sampletype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.RemovedSampleTypesIDs(); len(nodes) > 0 && !ttuo.mutation.SampleTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tubetype.SampleTypesTable,
			Columns: tubetype.SampleTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sampletype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.SampleTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tubetype.SampleTypesTable,
			Columns: tubetype.SampleTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sampletype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttuo.mutation.TestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tubetype.TestsTable,
			Columns: tubetype.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.RemovedTestsIDs(); len(nodes) > 0 && !ttuo.mutation.TestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tubetype.TestsTable,
			Columns: tubetype.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.TestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tubetype.TestsTable,
			Columns: tubetype.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TubeType{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tubetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ttuo.mutation.done = true
	return _node, nil
}
