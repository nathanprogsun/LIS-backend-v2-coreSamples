// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/address"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/internaluser"
	"coresamples/ent/predicate"
	"coresamples/ent/salesteam"
	"coresamples/ent/setting"
	"coresamples/ent/user"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InternalUserUpdate is the builder for updating InternalUser entities.
type InternalUserUpdate struct {
	config
	hooks    []Hook
	mutation *InternalUserMutation
}

// Where appends a list predicates to the InternalUserUpdate builder.
func (iuu *InternalUserUpdate) Where(ps ...predicate.InternalUser) *InternalUserUpdate {
	iuu.mutation.Where(ps...)
	return iuu
}

// SetInternalUserRole sets the "internal_user_role" field.
func (iuu *InternalUserUpdate) SetInternalUserRole(s string) *InternalUserUpdate {
	iuu.mutation.SetInternalUserRole(s)
	return iuu
}

// SetNillableInternalUserRole sets the "internal_user_role" field if the given value is not nil.
func (iuu *InternalUserUpdate) SetNillableInternalUserRole(s *string) *InternalUserUpdate {
	if s != nil {
		iuu.SetInternalUserRole(*s)
	}
	return iuu
}

// SetInternalUserName sets the "internal_user_name" field.
func (iuu *InternalUserUpdate) SetInternalUserName(s string) *InternalUserUpdate {
	iuu.mutation.SetInternalUserName(s)
	return iuu
}

// SetNillableInternalUserName sets the "internal_user_name" field if the given value is not nil.
func (iuu *InternalUserUpdate) SetNillableInternalUserName(s *string) *InternalUserUpdate {
	if s != nil {
		iuu.SetInternalUserName(*s)
	}
	return iuu
}

// ClearInternalUserName clears the value of the "internal_user_name" field.
func (iuu *InternalUserUpdate) ClearInternalUserName() *InternalUserUpdate {
	iuu.mutation.ClearInternalUserName()
	return iuu
}

// SetInternalUserFirstname sets the "internal_user_firstname" field.
func (iuu *InternalUserUpdate) SetInternalUserFirstname(s string) *InternalUserUpdate {
	iuu.mutation.SetInternalUserFirstname(s)
	return iuu
}

// SetNillableInternalUserFirstname sets the "internal_user_firstname" field if the given value is not nil.
func (iuu *InternalUserUpdate) SetNillableInternalUserFirstname(s *string) *InternalUserUpdate {
	if s != nil {
		iuu.SetInternalUserFirstname(*s)
	}
	return iuu
}

// ClearInternalUserFirstname clears the value of the "internal_user_firstname" field.
func (iuu *InternalUserUpdate) ClearInternalUserFirstname() *InternalUserUpdate {
	iuu.mutation.ClearInternalUserFirstname()
	return iuu
}

// SetInternalUserLastname sets the "internal_user_lastname" field.
func (iuu *InternalUserUpdate) SetInternalUserLastname(s string) *InternalUserUpdate {
	iuu.mutation.SetInternalUserLastname(s)
	return iuu
}

// SetNillableInternalUserLastname sets the "internal_user_lastname" field if the given value is not nil.
func (iuu *InternalUserUpdate) SetNillableInternalUserLastname(s *string) *InternalUserUpdate {
	if s != nil {
		iuu.SetInternalUserLastname(*s)
	}
	return iuu
}

// ClearInternalUserLastname clears the value of the "internal_user_lastname" field.
func (iuu *InternalUserUpdate) ClearInternalUserLastname() *InternalUserUpdate {
	iuu.mutation.ClearInternalUserLastname()
	return iuu
}

// SetInternalUserMiddleName sets the "internal_user_middle_name" field.
func (iuu *InternalUserUpdate) SetInternalUserMiddleName(s string) *InternalUserUpdate {
	iuu.mutation.SetInternalUserMiddleName(s)
	return iuu
}

// SetNillableInternalUserMiddleName sets the "internal_user_middle_name" field if the given value is not nil.
func (iuu *InternalUserUpdate) SetNillableInternalUserMiddleName(s *string) *InternalUserUpdate {
	if s != nil {
		iuu.SetInternalUserMiddleName(*s)
	}
	return iuu
}

// ClearInternalUserMiddleName clears the value of the "internal_user_middle_name" field.
func (iuu *InternalUserUpdate) ClearInternalUserMiddleName() *InternalUserUpdate {
	iuu.mutation.ClearInternalUserMiddleName()
	return iuu
}

// SetInternalUserIsFullTime sets the "internal_user_is_full_time" field.
func (iuu *InternalUserUpdate) SetInternalUserIsFullTime(b bool) *InternalUserUpdate {
	iuu.mutation.SetInternalUserIsFullTime(b)
	return iuu
}

// SetNillableInternalUserIsFullTime sets the "internal_user_is_full_time" field if the given value is not nil.
func (iuu *InternalUserUpdate) SetNillableInternalUserIsFullTime(b *bool) *InternalUserUpdate {
	if b != nil {
		iuu.SetInternalUserIsFullTime(*b)
	}
	return iuu
}

// SetInternalUserEmail sets the "internal_user_email" field.
func (iuu *InternalUserUpdate) SetInternalUserEmail(s string) *InternalUserUpdate {
	iuu.mutation.SetInternalUserEmail(s)
	return iuu
}

// SetNillableInternalUserEmail sets the "internal_user_email" field if the given value is not nil.
func (iuu *InternalUserUpdate) SetNillableInternalUserEmail(s *string) *InternalUserUpdate {
	if s != nil {
		iuu.SetInternalUserEmail(*s)
	}
	return iuu
}

// ClearInternalUserEmail clears the value of the "internal_user_email" field.
func (iuu *InternalUserUpdate) ClearInternalUserEmail() *InternalUserUpdate {
	iuu.mutation.ClearInternalUserEmail()
	return iuu
}

// SetInternalUserPhone sets the "internal_user_phone" field.
func (iuu *InternalUserUpdate) SetInternalUserPhone(s string) *InternalUserUpdate {
	iuu.mutation.SetInternalUserPhone(s)
	return iuu
}

// SetNillableInternalUserPhone sets the "internal_user_phone" field if the given value is not nil.
func (iuu *InternalUserUpdate) SetNillableInternalUserPhone(s *string) *InternalUserUpdate {
	if s != nil {
		iuu.SetInternalUserPhone(*s)
	}
	return iuu
}

// ClearInternalUserPhone clears the value of the "internal_user_phone" field.
func (iuu *InternalUserUpdate) ClearInternalUserPhone() *InternalUserUpdate {
	iuu.mutation.ClearInternalUserPhone()
	return iuu
}

// SetIsActive sets the "isActive" field.
func (iuu *InternalUserUpdate) SetIsActive(b bool) *InternalUserUpdate {
	iuu.mutation.SetIsActive(b)
	return iuu
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (iuu *InternalUserUpdate) SetNillableIsActive(b *bool) *InternalUserUpdate {
	if b != nil {
		iuu.SetIsActive(*b)
	}
	return iuu
}

// SetUserID sets the "user_id" field.
func (iuu *InternalUserUpdate) SetUserID(i int) *InternalUserUpdate {
	iuu.mutation.SetUserID(i)
	return iuu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (iuu *InternalUserUpdate) SetNillableUserID(i *int) *InternalUserUpdate {
	if i != nil {
		iuu.SetUserID(*i)
	}
	return iuu
}

// ClearUserID clears the value of the "user_id" field.
func (iuu *InternalUserUpdate) ClearUserID() *InternalUserUpdate {
	iuu.mutation.ClearUserID()
	return iuu
}

// SetInternalUserType sets the "internal_user_type" field.
func (iuu *InternalUserUpdate) SetInternalUserType(s string) *InternalUserUpdate {
	iuu.mutation.SetInternalUserType(s)
	return iuu
}

// SetNillableInternalUserType sets the "internal_user_type" field if the given value is not nil.
func (iuu *InternalUserUpdate) SetNillableInternalUserType(s *string) *InternalUserUpdate {
	if s != nil {
		iuu.SetInternalUserType(*s)
	}
	return iuu
}

// ClearInternalUserType clears the value of the "internal_user_type" field.
func (iuu *InternalUserUpdate) ClearInternalUserType() *InternalUserUpdate {
	iuu.mutation.ClearInternalUserType()
	return iuu
}

// SetInternalUserRoleID sets the "internal_user_role_id" field.
func (iuu *InternalUserUpdate) SetInternalUserRoleID(i int) *InternalUserUpdate {
	iuu.mutation.ResetInternalUserRoleID()
	iuu.mutation.SetInternalUserRoleID(i)
	return iuu
}

// SetNillableInternalUserRoleID sets the "internal_user_role_id" field if the given value is not nil.
func (iuu *InternalUserUpdate) SetNillableInternalUserRoleID(i *int) *InternalUserUpdate {
	if i != nil {
		iuu.SetInternalUserRoleID(*i)
	}
	return iuu
}

// AddInternalUserRoleID adds i to the "internal_user_role_id" field.
func (iuu *InternalUserUpdate) AddInternalUserRoleID(i int) *InternalUserUpdate {
	iuu.mutation.AddInternalUserRoleID(i)
	return iuu
}

// ClearInternalUserRoleID clears the value of the "internal_user_role_id" field.
func (iuu *InternalUserUpdate) ClearInternalUserRoleID() *InternalUserUpdate {
	iuu.mutation.ClearInternalUserRoleID()
	return iuu
}

// AddSalesTeamIDs adds the "sales_team" edge to the SalesTeam entity by IDs.
func (iuu *InternalUserUpdate) AddSalesTeamIDs(ids ...int) *InternalUserUpdate {
	iuu.mutation.AddSalesTeamIDs(ids...)
	return iuu
}

// AddSalesTeam adds the "sales_team" edges to the SalesTeam entity.
func (iuu *InternalUserUpdate) AddSalesTeam(s ...*SalesTeam) *InternalUserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuu.AddSalesTeamIDs(ids...)
}

// AddInternalUserContactIDs adds the "internal_user_contacts" edge to the Contact entity by IDs.
func (iuu *InternalUserUpdate) AddInternalUserContactIDs(ids ...int) *InternalUserUpdate {
	iuu.mutation.AddInternalUserContactIDs(ids...)
	return iuu
}

// AddInternalUserContacts adds the "internal_user_contacts" edges to the Contact entity.
func (iuu *InternalUserUpdate) AddInternalUserContacts(c ...*Contact) *InternalUserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuu.AddInternalUserContactIDs(ids...)
}

// AddInternalUserAddressIDs adds the "internal_user_addresses" edge to the Address entity by IDs.
func (iuu *InternalUserUpdate) AddInternalUserAddressIDs(ids ...int) *InternalUserUpdate {
	iuu.mutation.AddInternalUserAddressIDs(ids...)
	return iuu
}

// AddInternalUserAddresses adds the "internal_user_addresses" edges to the Address entity.
func (iuu *InternalUserUpdate) AddInternalUserAddresses(a ...*Address) *InternalUserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iuu.AddInternalUserAddressIDs(ids...)
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (iuu *InternalUserUpdate) AddCustomerIDs(ids ...int) *InternalUserUpdate {
	iuu.mutation.AddCustomerIDs(ids...)
	return iuu
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (iuu *InternalUserUpdate) AddCustomers(c ...*Customer) *InternalUserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuu.AddCustomerIDs(ids...)
}

// SetUser sets the "user" edge to the User entity.
func (iuu *InternalUserUpdate) SetUser(u *User) *InternalUserUpdate {
	return iuu.SetUserID(u.ID)
}

// AddInternalUserSettingIDs adds the "internal_user_settings" edge to the Setting entity by IDs.
func (iuu *InternalUserUpdate) AddInternalUserSettingIDs(ids ...int) *InternalUserUpdate {
	iuu.mutation.AddInternalUserSettingIDs(ids...)
	return iuu
}

// AddInternalUserSettings adds the "internal_user_settings" edges to the Setting entity.
func (iuu *InternalUserUpdate) AddInternalUserSettings(s ...*Setting) *InternalUserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuu.AddInternalUserSettingIDs(ids...)
}

// Mutation returns the InternalUserMutation object of the builder.
func (iuu *InternalUserUpdate) Mutation() *InternalUserMutation {
	return iuu.mutation
}

// ClearSalesTeam clears all "sales_team" edges to the SalesTeam entity.
func (iuu *InternalUserUpdate) ClearSalesTeam() *InternalUserUpdate {
	iuu.mutation.ClearSalesTeam()
	return iuu
}

// RemoveSalesTeamIDs removes the "sales_team" edge to SalesTeam entities by IDs.
func (iuu *InternalUserUpdate) RemoveSalesTeamIDs(ids ...int) *InternalUserUpdate {
	iuu.mutation.RemoveSalesTeamIDs(ids...)
	return iuu
}

// RemoveSalesTeam removes "sales_team" edges to SalesTeam entities.
func (iuu *InternalUserUpdate) RemoveSalesTeam(s ...*SalesTeam) *InternalUserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuu.RemoveSalesTeamIDs(ids...)
}

// ClearInternalUserContacts clears all "internal_user_contacts" edges to the Contact entity.
func (iuu *InternalUserUpdate) ClearInternalUserContacts() *InternalUserUpdate {
	iuu.mutation.ClearInternalUserContacts()
	return iuu
}

// RemoveInternalUserContactIDs removes the "internal_user_contacts" edge to Contact entities by IDs.
func (iuu *InternalUserUpdate) RemoveInternalUserContactIDs(ids ...int) *InternalUserUpdate {
	iuu.mutation.RemoveInternalUserContactIDs(ids...)
	return iuu
}

// RemoveInternalUserContacts removes "internal_user_contacts" edges to Contact entities.
func (iuu *InternalUserUpdate) RemoveInternalUserContacts(c ...*Contact) *InternalUserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuu.RemoveInternalUserContactIDs(ids...)
}

// ClearInternalUserAddresses clears all "internal_user_addresses" edges to the Address entity.
func (iuu *InternalUserUpdate) ClearInternalUserAddresses() *InternalUserUpdate {
	iuu.mutation.ClearInternalUserAddresses()
	return iuu
}

// RemoveInternalUserAddressIDs removes the "internal_user_addresses" edge to Address entities by IDs.
func (iuu *InternalUserUpdate) RemoveInternalUserAddressIDs(ids ...int) *InternalUserUpdate {
	iuu.mutation.RemoveInternalUserAddressIDs(ids...)
	return iuu
}

// RemoveInternalUserAddresses removes "internal_user_addresses" edges to Address entities.
func (iuu *InternalUserUpdate) RemoveInternalUserAddresses(a ...*Address) *InternalUserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iuu.RemoveInternalUserAddressIDs(ids...)
}

// ClearCustomers clears all "customers" edges to the Customer entity.
func (iuu *InternalUserUpdate) ClearCustomers() *InternalUserUpdate {
	iuu.mutation.ClearCustomers()
	return iuu
}

// RemoveCustomerIDs removes the "customers" edge to Customer entities by IDs.
func (iuu *InternalUserUpdate) RemoveCustomerIDs(ids ...int) *InternalUserUpdate {
	iuu.mutation.RemoveCustomerIDs(ids...)
	return iuu
}

// RemoveCustomers removes "customers" edges to Customer entities.
func (iuu *InternalUserUpdate) RemoveCustomers(c ...*Customer) *InternalUserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuu.RemoveCustomerIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (iuu *InternalUserUpdate) ClearUser() *InternalUserUpdate {
	iuu.mutation.ClearUser()
	return iuu
}

// ClearInternalUserSettings clears all "internal_user_settings" edges to the Setting entity.
func (iuu *InternalUserUpdate) ClearInternalUserSettings() *InternalUserUpdate {
	iuu.mutation.ClearInternalUserSettings()
	return iuu
}

// RemoveInternalUserSettingIDs removes the "internal_user_settings" edge to Setting entities by IDs.
func (iuu *InternalUserUpdate) RemoveInternalUserSettingIDs(ids ...int) *InternalUserUpdate {
	iuu.mutation.RemoveInternalUserSettingIDs(ids...)
	return iuu
}

// RemoveInternalUserSettings removes "internal_user_settings" edges to Setting entities.
func (iuu *InternalUserUpdate) RemoveInternalUserSettings(s ...*Setting) *InternalUserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuu.RemoveInternalUserSettingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iuu *InternalUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iuu.sqlSave, iuu.mutation, iuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuu *InternalUserUpdate) SaveX(ctx context.Context) int {
	affected, err := iuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iuu *InternalUserUpdate) Exec(ctx context.Context) error {
	_, err := iuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuu *InternalUserUpdate) ExecX(ctx context.Context) {
	if err := iuu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuu *InternalUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(internaluser.Table, internaluser.Columns, sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt))
	if ps := iuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuu.mutation.InternalUserRole(); ok {
		_spec.SetField(internaluser.FieldInternalUserRole, field.TypeString, value)
	}
	if value, ok := iuu.mutation.InternalUserName(); ok {
		_spec.SetField(internaluser.FieldInternalUserName, field.TypeString, value)
	}
	if iuu.mutation.InternalUserNameCleared() {
		_spec.ClearField(internaluser.FieldInternalUserName, field.TypeString)
	}
	if value, ok := iuu.mutation.InternalUserFirstname(); ok {
		_spec.SetField(internaluser.FieldInternalUserFirstname, field.TypeString, value)
	}
	if iuu.mutation.InternalUserFirstnameCleared() {
		_spec.ClearField(internaluser.FieldInternalUserFirstname, field.TypeString)
	}
	if value, ok := iuu.mutation.InternalUserLastname(); ok {
		_spec.SetField(internaluser.FieldInternalUserLastname, field.TypeString, value)
	}
	if iuu.mutation.InternalUserLastnameCleared() {
		_spec.ClearField(internaluser.FieldInternalUserLastname, field.TypeString)
	}
	if value, ok := iuu.mutation.InternalUserMiddleName(); ok {
		_spec.SetField(internaluser.FieldInternalUserMiddleName, field.TypeString, value)
	}
	if iuu.mutation.InternalUserMiddleNameCleared() {
		_spec.ClearField(internaluser.FieldInternalUserMiddleName, field.TypeString)
	}
	if value, ok := iuu.mutation.InternalUserIsFullTime(); ok {
		_spec.SetField(internaluser.FieldInternalUserIsFullTime, field.TypeBool, value)
	}
	if value, ok := iuu.mutation.InternalUserEmail(); ok {
		_spec.SetField(internaluser.FieldInternalUserEmail, field.TypeString, value)
	}
	if iuu.mutation.InternalUserEmailCleared() {
		_spec.ClearField(internaluser.FieldInternalUserEmail, field.TypeString)
	}
	if value, ok := iuu.mutation.InternalUserPhone(); ok {
		_spec.SetField(internaluser.FieldInternalUserPhone, field.TypeString, value)
	}
	if iuu.mutation.InternalUserPhoneCleared() {
		_spec.ClearField(internaluser.FieldInternalUserPhone, field.TypeString)
	}
	if value, ok := iuu.mutation.IsActive(); ok {
		_spec.SetField(internaluser.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := iuu.mutation.InternalUserType(); ok {
		_spec.SetField(internaluser.FieldInternalUserType, field.TypeString, value)
	}
	if iuu.mutation.InternalUserTypeCleared() {
		_spec.ClearField(internaluser.FieldInternalUserType, field.TypeString)
	}
	if value, ok := iuu.mutation.InternalUserRoleID(); ok {
		_spec.SetField(internaluser.FieldInternalUserRoleID, field.TypeInt, value)
	}
	if value, ok := iuu.mutation.AddedInternalUserRoleID(); ok {
		_spec.AddField(internaluser.FieldInternalUserRoleID, field.TypeInt, value)
	}
	if iuu.mutation.InternalUserRoleIDCleared() {
		_spec.ClearField(internaluser.FieldInternalUserRoleID, field.TypeInt)
	}
	if iuu.mutation.SalesTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   internaluser.SalesTeamTable,
			Columns: []string{internaluser.SalesTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuu.mutation.RemovedSalesTeamIDs(); len(nodes) > 0 && !iuu.mutation.SalesTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   internaluser.SalesTeamTable,
			Columns: []string{internaluser.SalesTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuu.mutation.SalesTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   internaluser.SalesTeamTable,
			Columns: []string{internaluser.SalesTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuu.mutation.InternalUserContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.InternalUserContactsTable,
			Columns: []string{internaluser.InternalUserContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuu.mutation.RemovedInternalUserContactsIDs(); len(nodes) > 0 && !iuu.mutation.InternalUserContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.InternalUserContactsTable,
			Columns: []string{internaluser.InternalUserContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuu.mutation.InternalUserContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.InternalUserContactsTable,
			Columns: []string{internaluser.InternalUserContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuu.mutation.InternalUserAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.InternalUserAddressesTable,
			Columns: []string{internaluser.InternalUserAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuu.mutation.RemovedInternalUserAddressesIDs(); len(nodes) > 0 && !iuu.mutation.InternalUserAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.InternalUserAddressesTable,
			Columns: []string{internaluser.InternalUserAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuu.mutation.InternalUserAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.InternalUserAddressesTable,
			Columns: []string{internaluser.InternalUserAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuu.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.CustomersTable,
			Columns: []string{internaluser.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuu.mutation.RemovedCustomersIDs(); len(nodes) > 0 && !iuu.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.CustomersTable,
			Columns: []string{internaluser.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuu.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.CustomersTable,
			Columns: []string{internaluser.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   internaluser.UserTable,
			Columns: []string{internaluser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   internaluser.UserTable,
			Columns: []string{internaluser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuu.mutation.InternalUserSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internaluser.InternalUserSettingsTable,
			Columns: internaluser.InternalUserSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuu.mutation.RemovedInternalUserSettingsIDs(); len(nodes) > 0 && !iuu.mutation.InternalUserSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internaluser.InternalUserSettingsTable,
			Columns: internaluser.InternalUserSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuu.mutation.InternalUserSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internaluser.InternalUserSettingsTable,
			Columns: internaluser.InternalUserSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internaluser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iuu.mutation.done = true
	return n, nil
}

// InternalUserUpdateOne is the builder for updating a single InternalUser entity.
type InternalUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InternalUserMutation
}

// SetInternalUserRole sets the "internal_user_role" field.
func (iuuo *InternalUserUpdateOne) SetInternalUserRole(s string) *InternalUserUpdateOne {
	iuuo.mutation.SetInternalUserRole(s)
	return iuuo
}

// SetNillableInternalUserRole sets the "internal_user_role" field if the given value is not nil.
func (iuuo *InternalUserUpdateOne) SetNillableInternalUserRole(s *string) *InternalUserUpdateOne {
	if s != nil {
		iuuo.SetInternalUserRole(*s)
	}
	return iuuo
}

// SetInternalUserName sets the "internal_user_name" field.
func (iuuo *InternalUserUpdateOne) SetInternalUserName(s string) *InternalUserUpdateOne {
	iuuo.mutation.SetInternalUserName(s)
	return iuuo
}

// SetNillableInternalUserName sets the "internal_user_name" field if the given value is not nil.
func (iuuo *InternalUserUpdateOne) SetNillableInternalUserName(s *string) *InternalUserUpdateOne {
	if s != nil {
		iuuo.SetInternalUserName(*s)
	}
	return iuuo
}

// ClearInternalUserName clears the value of the "internal_user_name" field.
func (iuuo *InternalUserUpdateOne) ClearInternalUserName() *InternalUserUpdateOne {
	iuuo.mutation.ClearInternalUserName()
	return iuuo
}

// SetInternalUserFirstname sets the "internal_user_firstname" field.
func (iuuo *InternalUserUpdateOne) SetInternalUserFirstname(s string) *InternalUserUpdateOne {
	iuuo.mutation.SetInternalUserFirstname(s)
	return iuuo
}

// SetNillableInternalUserFirstname sets the "internal_user_firstname" field if the given value is not nil.
func (iuuo *InternalUserUpdateOne) SetNillableInternalUserFirstname(s *string) *InternalUserUpdateOne {
	if s != nil {
		iuuo.SetInternalUserFirstname(*s)
	}
	return iuuo
}

// ClearInternalUserFirstname clears the value of the "internal_user_firstname" field.
func (iuuo *InternalUserUpdateOne) ClearInternalUserFirstname() *InternalUserUpdateOne {
	iuuo.mutation.ClearInternalUserFirstname()
	return iuuo
}

// SetInternalUserLastname sets the "internal_user_lastname" field.
func (iuuo *InternalUserUpdateOne) SetInternalUserLastname(s string) *InternalUserUpdateOne {
	iuuo.mutation.SetInternalUserLastname(s)
	return iuuo
}

// SetNillableInternalUserLastname sets the "internal_user_lastname" field if the given value is not nil.
func (iuuo *InternalUserUpdateOne) SetNillableInternalUserLastname(s *string) *InternalUserUpdateOne {
	if s != nil {
		iuuo.SetInternalUserLastname(*s)
	}
	return iuuo
}

// ClearInternalUserLastname clears the value of the "internal_user_lastname" field.
func (iuuo *InternalUserUpdateOne) ClearInternalUserLastname() *InternalUserUpdateOne {
	iuuo.mutation.ClearInternalUserLastname()
	return iuuo
}

// SetInternalUserMiddleName sets the "internal_user_middle_name" field.
func (iuuo *InternalUserUpdateOne) SetInternalUserMiddleName(s string) *InternalUserUpdateOne {
	iuuo.mutation.SetInternalUserMiddleName(s)
	return iuuo
}

// SetNillableInternalUserMiddleName sets the "internal_user_middle_name" field if the given value is not nil.
func (iuuo *InternalUserUpdateOne) SetNillableInternalUserMiddleName(s *string) *InternalUserUpdateOne {
	if s != nil {
		iuuo.SetInternalUserMiddleName(*s)
	}
	return iuuo
}

// ClearInternalUserMiddleName clears the value of the "internal_user_middle_name" field.
func (iuuo *InternalUserUpdateOne) ClearInternalUserMiddleName() *InternalUserUpdateOne {
	iuuo.mutation.ClearInternalUserMiddleName()
	return iuuo
}

// SetInternalUserIsFullTime sets the "internal_user_is_full_time" field.
func (iuuo *InternalUserUpdateOne) SetInternalUserIsFullTime(b bool) *InternalUserUpdateOne {
	iuuo.mutation.SetInternalUserIsFullTime(b)
	return iuuo
}

// SetNillableInternalUserIsFullTime sets the "internal_user_is_full_time" field if the given value is not nil.
func (iuuo *InternalUserUpdateOne) SetNillableInternalUserIsFullTime(b *bool) *InternalUserUpdateOne {
	if b != nil {
		iuuo.SetInternalUserIsFullTime(*b)
	}
	return iuuo
}

// SetInternalUserEmail sets the "internal_user_email" field.
func (iuuo *InternalUserUpdateOne) SetInternalUserEmail(s string) *InternalUserUpdateOne {
	iuuo.mutation.SetInternalUserEmail(s)
	return iuuo
}

// SetNillableInternalUserEmail sets the "internal_user_email" field if the given value is not nil.
func (iuuo *InternalUserUpdateOne) SetNillableInternalUserEmail(s *string) *InternalUserUpdateOne {
	if s != nil {
		iuuo.SetInternalUserEmail(*s)
	}
	return iuuo
}

// ClearInternalUserEmail clears the value of the "internal_user_email" field.
func (iuuo *InternalUserUpdateOne) ClearInternalUserEmail() *InternalUserUpdateOne {
	iuuo.mutation.ClearInternalUserEmail()
	return iuuo
}

// SetInternalUserPhone sets the "internal_user_phone" field.
func (iuuo *InternalUserUpdateOne) SetInternalUserPhone(s string) *InternalUserUpdateOne {
	iuuo.mutation.SetInternalUserPhone(s)
	return iuuo
}

// SetNillableInternalUserPhone sets the "internal_user_phone" field if the given value is not nil.
func (iuuo *InternalUserUpdateOne) SetNillableInternalUserPhone(s *string) *InternalUserUpdateOne {
	if s != nil {
		iuuo.SetInternalUserPhone(*s)
	}
	return iuuo
}

// ClearInternalUserPhone clears the value of the "internal_user_phone" field.
func (iuuo *InternalUserUpdateOne) ClearInternalUserPhone() *InternalUserUpdateOne {
	iuuo.mutation.ClearInternalUserPhone()
	return iuuo
}

// SetIsActive sets the "isActive" field.
func (iuuo *InternalUserUpdateOne) SetIsActive(b bool) *InternalUserUpdateOne {
	iuuo.mutation.SetIsActive(b)
	return iuuo
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (iuuo *InternalUserUpdateOne) SetNillableIsActive(b *bool) *InternalUserUpdateOne {
	if b != nil {
		iuuo.SetIsActive(*b)
	}
	return iuuo
}

// SetUserID sets the "user_id" field.
func (iuuo *InternalUserUpdateOne) SetUserID(i int) *InternalUserUpdateOne {
	iuuo.mutation.SetUserID(i)
	return iuuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (iuuo *InternalUserUpdateOne) SetNillableUserID(i *int) *InternalUserUpdateOne {
	if i != nil {
		iuuo.SetUserID(*i)
	}
	return iuuo
}

// ClearUserID clears the value of the "user_id" field.
func (iuuo *InternalUserUpdateOne) ClearUserID() *InternalUserUpdateOne {
	iuuo.mutation.ClearUserID()
	return iuuo
}

// SetInternalUserType sets the "internal_user_type" field.
func (iuuo *InternalUserUpdateOne) SetInternalUserType(s string) *InternalUserUpdateOne {
	iuuo.mutation.SetInternalUserType(s)
	return iuuo
}

// SetNillableInternalUserType sets the "internal_user_type" field if the given value is not nil.
func (iuuo *InternalUserUpdateOne) SetNillableInternalUserType(s *string) *InternalUserUpdateOne {
	if s != nil {
		iuuo.SetInternalUserType(*s)
	}
	return iuuo
}

// ClearInternalUserType clears the value of the "internal_user_type" field.
func (iuuo *InternalUserUpdateOne) ClearInternalUserType() *InternalUserUpdateOne {
	iuuo.mutation.ClearInternalUserType()
	return iuuo
}

// SetInternalUserRoleID sets the "internal_user_role_id" field.
func (iuuo *InternalUserUpdateOne) SetInternalUserRoleID(i int) *InternalUserUpdateOne {
	iuuo.mutation.ResetInternalUserRoleID()
	iuuo.mutation.SetInternalUserRoleID(i)
	return iuuo
}

// SetNillableInternalUserRoleID sets the "internal_user_role_id" field if the given value is not nil.
func (iuuo *InternalUserUpdateOne) SetNillableInternalUserRoleID(i *int) *InternalUserUpdateOne {
	if i != nil {
		iuuo.SetInternalUserRoleID(*i)
	}
	return iuuo
}

// AddInternalUserRoleID adds i to the "internal_user_role_id" field.
func (iuuo *InternalUserUpdateOne) AddInternalUserRoleID(i int) *InternalUserUpdateOne {
	iuuo.mutation.AddInternalUserRoleID(i)
	return iuuo
}

// ClearInternalUserRoleID clears the value of the "internal_user_role_id" field.
func (iuuo *InternalUserUpdateOne) ClearInternalUserRoleID() *InternalUserUpdateOne {
	iuuo.mutation.ClearInternalUserRoleID()
	return iuuo
}

// AddSalesTeamIDs adds the "sales_team" edge to the SalesTeam entity by IDs.
func (iuuo *InternalUserUpdateOne) AddSalesTeamIDs(ids ...int) *InternalUserUpdateOne {
	iuuo.mutation.AddSalesTeamIDs(ids...)
	return iuuo
}

// AddSalesTeam adds the "sales_team" edges to the SalesTeam entity.
func (iuuo *InternalUserUpdateOne) AddSalesTeam(s ...*SalesTeam) *InternalUserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuuo.AddSalesTeamIDs(ids...)
}

// AddInternalUserContactIDs adds the "internal_user_contacts" edge to the Contact entity by IDs.
func (iuuo *InternalUserUpdateOne) AddInternalUserContactIDs(ids ...int) *InternalUserUpdateOne {
	iuuo.mutation.AddInternalUserContactIDs(ids...)
	return iuuo
}

// AddInternalUserContacts adds the "internal_user_contacts" edges to the Contact entity.
func (iuuo *InternalUserUpdateOne) AddInternalUserContacts(c ...*Contact) *InternalUserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuuo.AddInternalUserContactIDs(ids...)
}

// AddInternalUserAddressIDs adds the "internal_user_addresses" edge to the Address entity by IDs.
func (iuuo *InternalUserUpdateOne) AddInternalUserAddressIDs(ids ...int) *InternalUserUpdateOne {
	iuuo.mutation.AddInternalUserAddressIDs(ids...)
	return iuuo
}

// AddInternalUserAddresses adds the "internal_user_addresses" edges to the Address entity.
func (iuuo *InternalUserUpdateOne) AddInternalUserAddresses(a ...*Address) *InternalUserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iuuo.AddInternalUserAddressIDs(ids...)
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (iuuo *InternalUserUpdateOne) AddCustomerIDs(ids ...int) *InternalUserUpdateOne {
	iuuo.mutation.AddCustomerIDs(ids...)
	return iuuo
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (iuuo *InternalUserUpdateOne) AddCustomers(c ...*Customer) *InternalUserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuuo.AddCustomerIDs(ids...)
}

// SetUser sets the "user" edge to the User entity.
func (iuuo *InternalUserUpdateOne) SetUser(u *User) *InternalUserUpdateOne {
	return iuuo.SetUserID(u.ID)
}

// AddInternalUserSettingIDs adds the "internal_user_settings" edge to the Setting entity by IDs.
func (iuuo *InternalUserUpdateOne) AddInternalUserSettingIDs(ids ...int) *InternalUserUpdateOne {
	iuuo.mutation.AddInternalUserSettingIDs(ids...)
	return iuuo
}

// AddInternalUserSettings adds the "internal_user_settings" edges to the Setting entity.
func (iuuo *InternalUserUpdateOne) AddInternalUserSettings(s ...*Setting) *InternalUserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuuo.AddInternalUserSettingIDs(ids...)
}

// Mutation returns the InternalUserMutation object of the builder.
func (iuuo *InternalUserUpdateOne) Mutation() *InternalUserMutation {
	return iuuo.mutation
}

// ClearSalesTeam clears all "sales_team" edges to the SalesTeam entity.
func (iuuo *InternalUserUpdateOne) ClearSalesTeam() *InternalUserUpdateOne {
	iuuo.mutation.ClearSalesTeam()
	return iuuo
}

// RemoveSalesTeamIDs removes the "sales_team" edge to SalesTeam entities by IDs.
func (iuuo *InternalUserUpdateOne) RemoveSalesTeamIDs(ids ...int) *InternalUserUpdateOne {
	iuuo.mutation.RemoveSalesTeamIDs(ids...)
	return iuuo
}

// RemoveSalesTeam removes "sales_team" edges to SalesTeam entities.
func (iuuo *InternalUserUpdateOne) RemoveSalesTeam(s ...*SalesTeam) *InternalUserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuuo.RemoveSalesTeamIDs(ids...)
}

// ClearInternalUserContacts clears all "internal_user_contacts" edges to the Contact entity.
func (iuuo *InternalUserUpdateOne) ClearInternalUserContacts() *InternalUserUpdateOne {
	iuuo.mutation.ClearInternalUserContacts()
	return iuuo
}

// RemoveInternalUserContactIDs removes the "internal_user_contacts" edge to Contact entities by IDs.
func (iuuo *InternalUserUpdateOne) RemoveInternalUserContactIDs(ids ...int) *InternalUserUpdateOne {
	iuuo.mutation.RemoveInternalUserContactIDs(ids...)
	return iuuo
}

// RemoveInternalUserContacts removes "internal_user_contacts" edges to Contact entities.
func (iuuo *InternalUserUpdateOne) RemoveInternalUserContacts(c ...*Contact) *InternalUserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuuo.RemoveInternalUserContactIDs(ids...)
}

// ClearInternalUserAddresses clears all "internal_user_addresses" edges to the Address entity.
func (iuuo *InternalUserUpdateOne) ClearInternalUserAddresses() *InternalUserUpdateOne {
	iuuo.mutation.ClearInternalUserAddresses()
	return iuuo
}

// RemoveInternalUserAddressIDs removes the "internal_user_addresses" edge to Address entities by IDs.
func (iuuo *InternalUserUpdateOne) RemoveInternalUserAddressIDs(ids ...int) *InternalUserUpdateOne {
	iuuo.mutation.RemoveInternalUserAddressIDs(ids...)
	return iuuo
}

// RemoveInternalUserAddresses removes "internal_user_addresses" edges to Address entities.
func (iuuo *InternalUserUpdateOne) RemoveInternalUserAddresses(a ...*Address) *InternalUserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iuuo.RemoveInternalUserAddressIDs(ids...)
}

// ClearCustomers clears all "customers" edges to the Customer entity.
func (iuuo *InternalUserUpdateOne) ClearCustomers() *InternalUserUpdateOne {
	iuuo.mutation.ClearCustomers()
	return iuuo
}

// RemoveCustomerIDs removes the "customers" edge to Customer entities by IDs.
func (iuuo *InternalUserUpdateOne) RemoveCustomerIDs(ids ...int) *InternalUserUpdateOne {
	iuuo.mutation.RemoveCustomerIDs(ids...)
	return iuuo
}

// RemoveCustomers removes "customers" edges to Customer entities.
func (iuuo *InternalUserUpdateOne) RemoveCustomers(c ...*Customer) *InternalUserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuuo.RemoveCustomerIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (iuuo *InternalUserUpdateOne) ClearUser() *InternalUserUpdateOne {
	iuuo.mutation.ClearUser()
	return iuuo
}

// ClearInternalUserSettings clears all "internal_user_settings" edges to the Setting entity.
func (iuuo *InternalUserUpdateOne) ClearInternalUserSettings() *InternalUserUpdateOne {
	iuuo.mutation.ClearInternalUserSettings()
	return iuuo
}

// RemoveInternalUserSettingIDs removes the "internal_user_settings" edge to Setting entities by IDs.
func (iuuo *InternalUserUpdateOne) RemoveInternalUserSettingIDs(ids ...int) *InternalUserUpdateOne {
	iuuo.mutation.RemoveInternalUserSettingIDs(ids...)
	return iuuo
}

// RemoveInternalUserSettings removes "internal_user_settings" edges to Setting entities.
func (iuuo *InternalUserUpdateOne) RemoveInternalUserSettings(s ...*Setting) *InternalUserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuuo.RemoveInternalUserSettingIDs(ids...)
}

// Where appends a list predicates to the InternalUserUpdate builder.
func (iuuo *InternalUserUpdateOne) Where(ps ...predicate.InternalUser) *InternalUserUpdateOne {
	iuuo.mutation.Where(ps...)
	return iuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuuo *InternalUserUpdateOne) Select(field string, fields ...string) *InternalUserUpdateOne {
	iuuo.fields = append([]string{field}, fields...)
	return iuuo
}

// Save executes the query and returns the updated InternalUser entity.
func (iuuo *InternalUserUpdateOne) Save(ctx context.Context) (*InternalUser, error) {
	return withHooks(ctx, iuuo.sqlSave, iuuo.mutation, iuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuuo *InternalUserUpdateOne) SaveX(ctx context.Context) *InternalUser {
	node, err := iuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuuo *InternalUserUpdateOne) Exec(ctx context.Context) error {
	_, err := iuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuuo *InternalUserUpdateOne) ExecX(ctx context.Context) {
	if err := iuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuuo *InternalUserUpdateOne) sqlSave(ctx context.Context) (_node *InternalUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(internaluser.Table, internaluser.Columns, sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt))
	id, ok := iuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InternalUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, internaluser.FieldID)
		for _, f := range fields {
			if !internaluser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != internaluser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuuo.mutation.InternalUserRole(); ok {
		_spec.SetField(internaluser.FieldInternalUserRole, field.TypeString, value)
	}
	if value, ok := iuuo.mutation.InternalUserName(); ok {
		_spec.SetField(internaluser.FieldInternalUserName, field.TypeString, value)
	}
	if iuuo.mutation.InternalUserNameCleared() {
		_spec.ClearField(internaluser.FieldInternalUserName, field.TypeString)
	}
	if value, ok := iuuo.mutation.InternalUserFirstname(); ok {
		_spec.SetField(internaluser.FieldInternalUserFirstname, field.TypeString, value)
	}
	if iuuo.mutation.InternalUserFirstnameCleared() {
		_spec.ClearField(internaluser.FieldInternalUserFirstname, field.TypeString)
	}
	if value, ok := iuuo.mutation.InternalUserLastname(); ok {
		_spec.SetField(internaluser.FieldInternalUserLastname, field.TypeString, value)
	}
	if iuuo.mutation.InternalUserLastnameCleared() {
		_spec.ClearField(internaluser.FieldInternalUserLastname, field.TypeString)
	}
	if value, ok := iuuo.mutation.InternalUserMiddleName(); ok {
		_spec.SetField(internaluser.FieldInternalUserMiddleName, field.TypeString, value)
	}
	if iuuo.mutation.InternalUserMiddleNameCleared() {
		_spec.ClearField(internaluser.FieldInternalUserMiddleName, field.TypeString)
	}
	if value, ok := iuuo.mutation.InternalUserIsFullTime(); ok {
		_spec.SetField(internaluser.FieldInternalUserIsFullTime, field.TypeBool, value)
	}
	if value, ok := iuuo.mutation.InternalUserEmail(); ok {
		_spec.SetField(internaluser.FieldInternalUserEmail, field.TypeString, value)
	}
	if iuuo.mutation.InternalUserEmailCleared() {
		_spec.ClearField(internaluser.FieldInternalUserEmail, field.TypeString)
	}
	if value, ok := iuuo.mutation.InternalUserPhone(); ok {
		_spec.SetField(internaluser.FieldInternalUserPhone, field.TypeString, value)
	}
	if iuuo.mutation.InternalUserPhoneCleared() {
		_spec.ClearField(internaluser.FieldInternalUserPhone, field.TypeString)
	}
	if value, ok := iuuo.mutation.IsActive(); ok {
		_spec.SetField(internaluser.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := iuuo.mutation.InternalUserType(); ok {
		_spec.SetField(internaluser.FieldInternalUserType, field.TypeString, value)
	}
	if iuuo.mutation.InternalUserTypeCleared() {
		_spec.ClearField(internaluser.FieldInternalUserType, field.TypeString)
	}
	if value, ok := iuuo.mutation.InternalUserRoleID(); ok {
		_spec.SetField(internaluser.FieldInternalUserRoleID, field.TypeInt, value)
	}
	if value, ok := iuuo.mutation.AddedInternalUserRoleID(); ok {
		_spec.AddField(internaluser.FieldInternalUserRoleID, field.TypeInt, value)
	}
	if iuuo.mutation.InternalUserRoleIDCleared() {
		_spec.ClearField(internaluser.FieldInternalUserRoleID, field.TypeInt)
	}
	if iuuo.mutation.SalesTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   internaluser.SalesTeamTable,
			Columns: []string{internaluser.SalesTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuuo.mutation.RemovedSalesTeamIDs(); len(nodes) > 0 && !iuuo.mutation.SalesTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   internaluser.SalesTeamTable,
			Columns: []string{internaluser.SalesTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuuo.mutation.SalesTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   internaluser.SalesTeamTable,
			Columns: []string{internaluser.SalesTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuuo.mutation.InternalUserContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.InternalUserContactsTable,
			Columns: []string{internaluser.InternalUserContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuuo.mutation.RemovedInternalUserContactsIDs(); len(nodes) > 0 && !iuuo.mutation.InternalUserContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.InternalUserContactsTable,
			Columns: []string{internaluser.InternalUserContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuuo.mutation.InternalUserContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.InternalUserContactsTable,
			Columns: []string{internaluser.InternalUserContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuuo.mutation.InternalUserAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.InternalUserAddressesTable,
			Columns: []string{internaluser.InternalUserAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuuo.mutation.RemovedInternalUserAddressesIDs(); len(nodes) > 0 && !iuuo.mutation.InternalUserAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.InternalUserAddressesTable,
			Columns: []string{internaluser.InternalUserAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuuo.mutation.InternalUserAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.InternalUserAddressesTable,
			Columns: []string{internaluser.InternalUserAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuuo.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.CustomersTable,
			Columns: []string{internaluser.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuuo.mutation.RemovedCustomersIDs(); len(nodes) > 0 && !iuuo.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.CustomersTable,
			Columns: []string{internaluser.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuuo.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internaluser.CustomersTable,
			Columns: []string{internaluser.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   internaluser.UserTable,
			Columns: []string{internaluser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   internaluser.UserTable,
			Columns: []string{internaluser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuuo.mutation.InternalUserSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internaluser.InternalUserSettingsTable,
			Columns: internaluser.InternalUserSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuuo.mutation.RemovedInternalUserSettingsIDs(); len(nodes) > 0 && !iuuo.mutation.InternalUserSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internaluser.InternalUserSettingsTable,
			Columns: internaluser.InternalUserSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuuo.mutation.InternalUserSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internaluser.InternalUserSettingsTable,
			Columns: internaluser.InternalUserSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InternalUser{config: iuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internaluser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuuo.mutation.done = true
	return _node, nil
}
