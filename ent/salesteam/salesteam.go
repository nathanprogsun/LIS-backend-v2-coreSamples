// Code generated by ent, DO NOT EDIT.

package salesteam

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the salesteam type in the database.
	Label = "sales_team"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInternalUserID holds the string denoting the internal_user_id field in the database.
	FieldInternalUserID = "internal_user_id"
	// FieldSupervisorID holds the string denoting the supervisor_id field in the database.
	FieldSupervisorID = "supervisor_id"
	// FieldTitleID holds the string denoting the title_id field in the database.
	FieldTitleID = "title_id"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// FieldUpdatedTime holds the string denoting the updated_time field in the database.
	FieldUpdatedTime = "updated_time"
	// EdgeSubordinates holds the string denoting the subordinates edge name in mutations.
	EdgeSubordinates = "subordinates"
	// EdgeSupervisor holds the string denoting the supervisor edge name in mutations.
	EdgeSupervisor = "supervisor"
	// EdgeInternalUser holds the string denoting the internal_user edge name in mutations.
	EdgeInternalUser = "internal_user"
	// EdgeTitle holds the string denoting the title edge name in mutations.
	EdgeTitle = "title"
	// InternalUserFieldID holds the string denoting the ID field of the InternalUser.
	InternalUserFieldID = "internal_user_id"
	// Table holds the table name of the salesteam in the database.
	Table = "sales_team"
	// SubordinatesTable is the table that holds the subordinates relation/edge.
	SubordinatesTable = "sales_team"
	// SubordinatesColumn is the table column denoting the subordinates relation/edge.
	SubordinatesColumn = "supervisor_id"
	// SupervisorTable is the table that holds the supervisor relation/edge.
	SupervisorTable = "sales_team"
	// SupervisorColumn is the table column denoting the supervisor relation/edge.
	SupervisorColumn = "supervisor_id"
	// InternalUserTable is the table that holds the internal_user relation/edge.
	InternalUserTable = "sales_team"
	// InternalUserInverseTable is the table name for the InternalUser entity.
	// It exists in this package in order to avoid circular dependency with the "internaluser" package.
	InternalUserInverseTable = "internal_user"
	// InternalUserColumn is the table column denoting the internal_user relation/edge.
	InternalUserColumn = "internal_user_id"
	// TitleTable is the table that holds the title relation/edge.
	TitleTable = "sales_team"
	// TitleInverseTable is the table name for the SalesTitle entity.
	// It exists in this package in order to avoid circular dependency with the "salestitle" package.
	TitleInverseTable = "sales_title"
	// TitleColumn is the table column denoting the title relation/edge.
	TitleColumn = "title_id"
)

// Columns holds all SQL columns for salesteam fields.
var Columns = []string{
	FieldID,
	FieldInternalUserID,
	FieldSupervisorID,
	FieldTitleID,
	FieldCreatedTime,
	FieldUpdatedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedTime holds the default value on creation for the "created_time" field.
	DefaultCreatedTime func() time.Time
	// UpdateDefaultUpdatedTime holds the default value on update for the "updated_time" field.
	UpdateDefaultUpdatedTime func() time.Time
)

// OrderOption defines the ordering options for the SalesTeam queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInternalUserID orders the results by the internal_user_id field.
func ByInternalUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalUserID, opts...).ToFunc()
}

// BySupervisorID orders the results by the supervisor_id field.
func BySupervisorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSupervisorID, opts...).ToFunc()
}

// ByTitleID orders the results by the title_id field.
func ByTitleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleID, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the updated_time field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}

// BySubordinatesCount orders the results by subordinates count.
func BySubordinatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubordinatesStep(), opts...)
	}
}

// BySubordinates orders the results by subordinates terms.
func BySubordinates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubordinatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySupervisorField orders the results by supervisor field.
func BySupervisorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSupervisorStep(), sql.OrderByField(field, opts...))
	}
}

// ByInternalUserField orders the results by internal_user field.
func ByInternalUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInternalUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByTitleField orders the results by title field.
func ByTitleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTitleStep(), sql.OrderByField(field, opts...))
	}
}
func newSubordinatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SubordinatesTable, SubordinatesColumn),
	)
}
func newSupervisorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SupervisorTable, SupervisorColumn),
	)
}
func newInternalUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InternalUserInverseTable, InternalUserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, InternalUserTable, InternalUserColumn),
	)
}
func newTitleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TitleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TitleTable, TitleColumn),
	)
}
