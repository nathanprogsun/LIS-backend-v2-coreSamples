// Code generated by ent, DO NOT EDIT.

package salesteam

import (
	"coresamples/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldLTE(FieldID, id))
}

// InternalUserID applies equality check predicate on the "internal_user_id" field. It's identical to InternalUserIDEQ.
func InternalUserID(v int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldEQ(FieldInternalUserID, v))
}

// SupervisorID applies equality check predicate on the "supervisor_id" field. It's identical to SupervisorIDEQ.
func SupervisorID(v int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldEQ(FieldSupervisorID, v))
}

// TitleID applies equality check predicate on the "title_id" field. It's identical to TitleIDEQ.
func TitleID(v int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldEQ(FieldTitleID, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldEQ(FieldCreatedTime, v))
}

// UpdatedTime applies equality check predicate on the "updated_time" field. It's identical to UpdatedTimeEQ.
func UpdatedTime(v time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldEQ(FieldUpdatedTime, v))
}

// InternalUserIDEQ applies the EQ predicate on the "internal_user_id" field.
func InternalUserIDEQ(v int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldEQ(FieldInternalUserID, v))
}

// InternalUserIDNEQ applies the NEQ predicate on the "internal_user_id" field.
func InternalUserIDNEQ(v int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldNEQ(FieldInternalUserID, v))
}

// InternalUserIDIn applies the In predicate on the "internal_user_id" field.
func InternalUserIDIn(vs ...int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldIn(FieldInternalUserID, vs...))
}

// InternalUserIDNotIn applies the NotIn predicate on the "internal_user_id" field.
func InternalUserIDNotIn(vs ...int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldNotIn(FieldInternalUserID, vs...))
}

// SupervisorIDEQ applies the EQ predicate on the "supervisor_id" field.
func SupervisorIDEQ(v int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldEQ(FieldSupervisorID, v))
}

// SupervisorIDNEQ applies the NEQ predicate on the "supervisor_id" field.
func SupervisorIDNEQ(v int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldNEQ(FieldSupervisorID, v))
}

// SupervisorIDIn applies the In predicate on the "supervisor_id" field.
func SupervisorIDIn(vs ...int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldIn(FieldSupervisorID, vs...))
}

// SupervisorIDNotIn applies the NotIn predicate on the "supervisor_id" field.
func SupervisorIDNotIn(vs ...int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldNotIn(FieldSupervisorID, vs...))
}

// SupervisorIDIsNil applies the IsNil predicate on the "supervisor_id" field.
func SupervisorIDIsNil() predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldIsNull(FieldSupervisorID))
}

// SupervisorIDNotNil applies the NotNil predicate on the "supervisor_id" field.
func SupervisorIDNotNil() predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldNotNull(FieldSupervisorID))
}

// TitleIDEQ applies the EQ predicate on the "title_id" field.
func TitleIDEQ(v int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldEQ(FieldTitleID, v))
}

// TitleIDNEQ applies the NEQ predicate on the "title_id" field.
func TitleIDNEQ(v int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldNEQ(FieldTitleID, v))
}

// TitleIDIn applies the In predicate on the "title_id" field.
func TitleIDIn(vs ...int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldIn(FieldTitleID, vs...))
}

// TitleIDNotIn applies the NotIn predicate on the "title_id" field.
func TitleIDNotIn(vs ...int) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldNotIn(FieldTitleID, vs...))
}

// TitleIDIsNil applies the IsNil predicate on the "title_id" field.
func TitleIDIsNil() predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldIsNull(FieldTitleID))
}

// TitleIDNotNil applies the NotNil predicate on the "title_id" field.
func TitleIDNotNil() predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldNotNull(FieldTitleID))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldLTE(FieldCreatedTime, v))
}

// UpdatedTimeEQ applies the EQ predicate on the "updated_time" field.
func UpdatedTimeEQ(v time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedTimeNEQ applies the NEQ predicate on the "updated_time" field.
func UpdatedTimeNEQ(v time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldNEQ(FieldUpdatedTime, v))
}

// UpdatedTimeIn applies the In predicate on the "updated_time" field.
func UpdatedTimeIn(vs ...time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeNotIn applies the NotIn predicate on the "updated_time" field.
func UpdatedTimeNotIn(vs ...time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldNotIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeGT applies the GT predicate on the "updated_time" field.
func UpdatedTimeGT(v time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldGT(FieldUpdatedTime, v))
}

// UpdatedTimeGTE applies the GTE predicate on the "updated_time" field.
func UpdatedTimeGTE(v time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldGTE(FieldUpdatedTime, v))
}

// UpdatedTimeLT applies the LT predicate on the "updated_time" field.
func UpdatedTimeLT(v time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldLT(FieldUpdatedTime, v))
}

// UpdatedTimeLTE applies the LTE predicate on the "updated_time" field.
func UpdatedTimeLTE(v time.Time) predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldLTE(FieldUpdatedTime, v))
}

// UpdatedTimeIsNil applies the IsNil predicate on the "updated_time" field.
func UpdatedTimeIsNil() predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldIsNull(FieldUpdatedTime))
}

// UpdatedTimeNotNil applies the NotNil predicate on the "updated_time" field.
func UpdatedTimeNotNil() predicate.SalesTeam {
	return predicate.SalesTeam(sql.FieldNotNull(FieldUpdatedTime))
}

// HasSubordinates applies the HasEdge predicate on the "subordinates" edge.
func HasSubordinates() predicate.SalesTeam {
	return predicate.SalesTeam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, SubordinatesTable, SubordinatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubordinatesWith applies the HasEdge predicate on the "subordinates" edge with a given conditions (other predicates).
func HasSubordinatesWith(preds ...predicate.SalesTeam) predicate.SalesTeam {
	return predicate.SalesTeam(func(s *sql.Selector) {
		step := newSubordinatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSupervisor applies the HasEdge predicate on the "supervisor" edge.
func HasSupervisor() predicate.SalesTeam {
	return predicate.SalesTeam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SupervisorTable, SupervisorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSupervisorWith applies the HasEdge predicate on the "supervisor" edge with a given conditions (other predicates).
func HasSupervisorWith(preds ...predicate.SalesTeam) predicate.SalesTeam {
	return predicate.SalesTeam(func(s *sql.Selector) {
		step := newSupervisorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInternalUser applies the HasEdge predicate on the "internal_user" edge.
func HasInternalUser() predicate.SalesTeam {
	return predicate.SalesTeam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, InternalUserTable, InternalUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInternalUserWith applies the HasEdge predicate on the "internal_user" edge with a given conditions (other predicates).
func HasInternalUserWith(preds ...predicate.InternalUser) predicate.SalesTeam {
	return predicate.SalesTeam(func(s *sql.Selector) {
		step := newInternalUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTitle applies the HasEdge predicate on the "title" edge.
func HasTitle() predicate.SalesTeam {
	return predicate.SalesTeam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TitleTable, TitleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTitleWith applies the HasEdge predicate on the "title" edge with a given conditions (other predicates).
func HasTitleWith(preds ...predicate.SalesTitle) predicate.SalesTeam {
	return predicate.SalesTeam(func(s *sql.Selector) {
		step := newTitleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SalesTeam) predicate.SalesTeam {
	return predicate.SalesTeam(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SalesTeam) predicate.SalesTeam {
	return predicate.SalesTeam(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SalesTeam) predicate.SalesTeam {
	return predicate.SalesTeam(sql.NotPredicates(p))
}
