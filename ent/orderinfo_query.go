// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/address"
	"coresamples/ent/clinic"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/orderflag"
	"coresamples/ent/orderinfo"
	"coresamples/ent/predicate"
	"coresamples/ent/sample"
	"coresamples/ent/test"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderInfoQuery is the builder for querying OrderInfo entities.
type OrderInfoQuery struct {
	config
	ctx              *QueryContext
	order            []orderinfo.OrderOption
	inters           []Interceptor
	predicates       []predicate.OrderInfo
	withTests        *TestQuery
	withOrderFlags   *OrderFlagQuery
	withSample       *SampleQuery
	withContact      *ContactQuery
	withAddress      *AddressQuery
	withClinic       *ClinicQuery
	withCustomerInfo *CustomerQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrderInfoQuery builder.
func (oiq *OrderInfoQuery) Where(ps ...predicate.OrderInfo) *OrderInfoQuery {
	oiq.predicates = append(oiq.predicates, ps...)
	return oiq
}

// Limit the number of records to be returned by this query.
func (oiq *OrderInfoQuery) Limit(limit int) *OrderInfoQuery {
	oiq.ctx.Limit = &limit
	return oiq
}

// Offset to start from.
func (oiq *OrderInfoQuery) Offset(offset int) *OrderInfoQuery {
	oiq.ctx.Offset = &offset
	return oiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oiq *OrderInfoQuery) Unique(unique bool) *OrderInfoQuery {
	oiq.ctx.Unique = &unique
	return oiq
}

// Order specifies how the records should be ordered.
func (oiq *OrderInfoQuery) Order(o ...orderinfo.OrderOption) *OrderInfoQuery {
	oiq.order = append(oiq.order, o...)
	return oiq
}

// QueryTests chains the current query on the "tests" edge.
func (oiq *OrderInfoQuery) QueryTests() *TestQuery {
	query := (&TestClient{config: oiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderinfo.Table, orderinfo.FieldID, selector),
			sqlgraph.To(test.Table, test.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, orderinfo.TestsTable, orderinfo.TestsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(oiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderFlags chains the current query on the "order_flags" edge.
func (oiq *OrderInfoQuery) QueryOrderFlags() *OrderFlagQuery {
	query := (&OrderFlagClient{config: oiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderinfo.Table, orderinfo.FieldID, selector),
			sqlgraph.To(orderflag.Table, orderflag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, orderinfo.OrderFlagsTable, orderinfo.OrderFlagsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(oiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySample chains the current query on the "sample" edge.
func (oiq *OrderInfoQuery) QuerySample() *SampleQuery {
	query := (&SampleClient{config: oiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderinfo.Table, orderinfo.FieldID, selector),
			sqlgraph.To(sample.Table, sample.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, orderinfo.SampleTable, orderinfo.SampleColumn),
		)
		fromU = sqlgraph.SetNeighbors(oiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContact chains the current query on the "contact" edge.
func (oiq *OrderInfoQuery) QueryContact() *ContactQuery {
	query := (&ContactClient{config: oiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderinfo.Table, orderinfo.FieldID, selector),
			sqlgraph.To(contact.Table, contact.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderinfo.ContactTable, orderinfo.ContactColumn),
		)
		fromU = sqlgraph.SetNeighbors(oiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAddress chains the current query on the "address" edge.
func (oiq *OrderInfoQuery) QueryAddress() *AddressQuery {
	query := (&AddressClient{config: oiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderinfo.Table, orderinfo.FieldID, selector),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderinfo.AddressTable, orderinfo.AddressColumn),
		)
		fromU = sqlgraph.SetNeighbors(oiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClinic chains the current query on the "clinic" edge.
func (oiq *OrderInfoQuery) QueryClinic() *ClinicQuery {
	query := (&ClinicClient{config: oiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderinfo.Table, orderinfo.FieldID, selector),
			sqlgraph.To(clinic.Table, clinic.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderinfo.ClinicTable, orderinfo.ClinicColumn),
		)
		fromU = sqlgraph.SetNeighbors(oiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCustomerInfo chains the current query on the "customer_info" edge.
func (oiq *OrderInfoQuery) QueryCustomerInfo() *CustomerQuery {
	query := (&CustomerClient{config: oiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderinfo.Table, orderinfo.FieldID, selector),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderinfo.CustomerInfoTable, orderinfo.CustomerInfoColumn),
		)
		fromU = sqlgraph.SetNeighbors(oiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrderInfo entity from the query.
// Returns a *NotFoundError when no OrderInfo was found.
func (oiq *OrderInfoQuery) First(ctx context.Context) (*OrderInfo, error) {
	nodes, err := oiq.Limit(1).All(setContextOp(ctx, oiq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orderinfo.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oiq *OrderInfoQuery) FirstX(ctx context.Context) *OrderInfo {
	node, err := oiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrderInfo ID from the query.
// Returns a *NotFoundError when no OrderInfo ID was found.
func (oiq *OrderInfoQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oiq.Limit(1).IDs(setContextOp(ctx, oiq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orderinfo.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oiq *OrderInfoQuery) FirstIDX(ctx context.Context) int {
	id, err := oiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrderInfo entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrderInfo entity is found.
// Returns a *NotFoundError when no OrderInfo entities are found.
func (oiq *OrderInfoQuery) Only(ctx context.Context) (*OrderInfo, error) {
	nodes, err := oiq.Limit(2).All(setContextOp(ctx, oiq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orderinfo.Label}
	default:
		return nil, &NotSingularError{orderinfo.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oiq *OrderInfoQuery) OnlyX(ctx context.Context) *OrderInfo {
	node, err := oiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrderInfo ID in the query.
// Returns a *NotSingularError when more than one OrderInfo ID is found.
// Returns a *NotFoundError when no entities are found.
func (oiq *OrderInfoQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oiq.Limit(2).IDs(setContextOp(ctx, oiq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orderinfo.Label}
	default:
		err = &NotSingularError{orderinfo.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oiq *OrderInfoQuery) OnlyIDX(ctx context.Context) int {
	id, err := oiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrderInfos.
func (oiq *OrderInfoQuery) All(ctx context.Context) ([]*OrderInfo, error) {
	ctx = setContextOp(ctx, oiq.ctx, "All")
	if err := oiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OrderInfo, *OrderInfoQuery]()
	return withInterceptors[[]*OrderInfo](ctx, oiq, qr, oiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (oiq *OrderInfoQuery) AllX(ctx context.Context) []*OrderInfo {
	nodes, err := oiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrderInfo IDs.
func (oiq *OrderInfoQuery) IDs(ctx context.Context) (ids []int, err error) {
	if oiq.ctx.Unique == nil && oiq.path != nil {
		oiq.Unique(true)
	}
	ctx = setContextOp(ctx, oiq.ctx, "IDs")
	if err = oiq.Select(orderinfo.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oiq *OrderInfoQuery) IDsX(ctx context.Context) []int {
	ids, err := oiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oiq *OrderInfoQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, oiq.ctx, "Count")
	if err := oiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, oiq, querierCount[*OrderInfoQuery](), oiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (oiq *OrderInfoQuery) CountX(ctx context.Context) int {
	count, err := oiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oiq *OrderInfoQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, oiq.ctx, "Exist")
	switch _, err := oiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (oiq *OrderInfoQuery) ExistX(ctx context.Context) bool {
	exist, err := oiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrderInfoQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oiq *OrderInfoQuery) Clone() *OrderInfoQuery {
	if oiq == nil {
		return nil
	}
	return &OrderInfoQuery{
		config:           oiq.config,
		ctx:              oiq.ctx.Clone(),
		order:            append([]orderinfo.OrderOption{}, oiq.order...),
		inters:           append([]Interceptor{}, oiq.inters...),
		predicates:       append([]predicate.OrderInfo{}, oiq.predicates...),
		withTests:        oiq.withTests.Clone(),
		withOrderFlags:   oiq.withOrderFlags.Clone(),
		withSample:       oiq.withSample.Clone(),
		withContact:      oiq.withContact.Clone(),
		withAddress:      oiq.withAddress.Clone(),
		withClinic:       oiq.withClinic.Clone(),
		withCustomerInfo: oiq.withCustomerInfo.Clone(),
		// clone intermediate query.
		sql:  oiq.sql.Clone(),
		path: oiq.path,
	}
}

// WithTests tells the query-builder to eager-load the nodes that are connected to
// the "tests" edge. The optional arguments are used to configure the query builder of the edge.
func (oiq *OrderInfoQuery) WithTests(opts ...func(*TestQuery)) *OrderInfoQuery {
	query := (&TestClient{config: oiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oiq.withTests = query
	return oiq
}

// WithOrderFlags tells the query-builder to eager-load the nodes that are connected to
// the "order_flags" edge. The optional arguments are used to configure the query builder of the edge.
func (oiq *OrderInfoQuery) WithOrderFlags(opts ...func(*OrderFlagQuery)) *OrderInfoQuery {
	query := (&OrderFlagClient{config: oiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oiq.withOrderFlags = query
	return oiq
}

// WithSample tells the query-builder to eager-load the nodes that are connected to
// the "sample" edge. The optional arguments are used to configure the query builder of the edge.
func (oiq *OrderInfoQuery) WithSample(opts ...func(*SampleQuery)) *OrderInfoQuery {
	query := (&SampleClient{config: oiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oiq.withSample = query
	return oiq
}

// WithContact tells the query-builder to eager-load the nodes that are connected to
// the "contact" edge. The optional arguments are used to configure the query builder of the edge.
func (oiq *OrderInfoQuery) WithContact(opts ...func(*ContactQuery)) *OrderInfoQuery {
	query := (&ContactClient{config: oiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oiq.withContact = query
	return oiq
}

// WithAddress tells the query-builder to eager-load the nodes that are connected to
// the "address" edge. The optional arguments are used to configure the query builder of the edge.
func (oiq *OrderInfoQuery) WithAddress(opts ...func(*AddressQuery)) *OrderInfoQuery {
	query := (&AddressClient{config: oiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oiq.withAddress = query
	return oiq
}

// WithClinic tells the query-builder to eager-load the nodes that are connected to
// the "clinic" edge. The optional arguments are used to configure the query builder of the edge.
func (oiq *OrderInfoQuery) WithClinic(opts ...func(*ClinicQuery)) *OrderInfoQuery {
	query := (&ClinicClient{config: oiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oiq.withClinic = query
	return oiq
}

// WithCustomerInfo tells the query-builder to eager-load the nodes that are connected to
// the "customer_info" edge. The optional arguments are used to configure the query builder of the edge.
func (oiq *OrderInfoQuery) WithCustomerInfo(opts ...func(*CustomerQuery)) *OrderInfoQuery {
	query := (&CustomerClient{config: oiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oiq.withCustomerInfo = query
	return oiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		OrderTitle string `json:"order_title,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrderInfo.Query().
//		GroupBy(orderinfo.FieldOrderTitle).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oiq *OrderInfoQuery) GroupBy(field string, fields ...string) *OrderInfoGroupBy {
	oiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OrderInfoGroupBy{build: oiq}
	grbuild.flds = &oiq.ctx.Fields
	grbuild.label = orderinfo.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		OrderTitle string `json:"order_title,omitempty"`
//	}
//
//	client.OrderInfo.Query().
//		Select(orderinfo.FieldOrderTitle).
//		Scan(ctx, &v)
func (oiq *OrderInfoQuery) Select(fields ...string) *OrderInfoSelect {
	oiq.ctx.Fields = append(oiq.ctx.Fields, fields...)
	sbuild := &OrderInfoSelect{OrderInfoQuery: oiq}
	sbuild.label = orderinfo.Label
	sbuild.flds, sbuild.scan = &oiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OrderInfoSelect configured with the given aggregations.
func (oiq *OrderInfoQuery) Aggregate(fns ...AggregateFunc) *OrderInfoSelect {
	return oiq.Select().Aggregate(fns...)
}

func (oiq *OrderInfoQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range oiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, oiq); err != nil {
				return err
			}
		}
	}
	for _, f := range oiq.ctx.Fields {
		if !orderinfo.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oiq.path != nil {
		prev, err := oiq.path(ctx)
		if err != nil {
			return err
		}
		oiq.sql = prev
	}
	return nil
}

func (oiq *OrderInfoQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OrderInfo, error) {
	var (
		nodes       = []*OrderInfo{}
		_spec       = oiq.querySpec()
		loadedTypes = [7]bool{
			oiq.withTests != nil,
			oiq.withOrderFlags != nil,
			oiq.withSample != nil,
			oiq.withContact != nil,
			oiq.withAddress != nil,
			oiq.withClinic != nil,
			oiq.withCustomerInfo != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OrderInfo).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OrderInfo{config: oiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, oiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := oiq.withTests; query != nil {
		if err := oiq.loadTests(ctx, query, nodes,
			func(n *OrderInfo) { n.Edges.Tests = []*Test{} },
			func(n *OrderInfo, e *Test) { n.Edges.Tests = append(n.Edges.Tests, e) }); err != nil {
			return nil, err
		}
	}
	if query := oiq.withOrderFlags; query != nil {
		if err := oiq.loadOrderFlags(ctx, query, nodes,
			func(n *OrderInfo) { n.Edges.OrderFlags = []*OrderFlag{} },
			func(n *OrderInfo, e *OrderFlag) { n.Edges.OrderFlags = append(n.Edges.OrderFlags, e) }); err != nil {
			return nil, err
		}
	}
	if query := oiq.withSample; query != nil {
		if err := oiq.loadSample(ctx, query, nodes, nil,
			func(n *OrderInfo, e *Sample) { n.Edges.Sample = e }); err != nil {
			return nil, err
		}
	}
	if query := oiq.withContact; query != nil {
		if err := oiq.loadContact(ctx, query, nodes, nil,
			func(n *OrderInfo, e *Contact) { n.Edges.Contact = e }); err != nil {
			return nil, err
		}
	}
	if query := oiq.withAddress; query != nil {
		if err := oiq.loadAddress(ctx, query, nodes, nil,
			func(n *OrderInfo, e *Address) { n.Edges.Address = e }); err != nil {
			return nil, err
		}
	}
	if query := oiq.withClinic; query != nil {
		if err := oiq.loadClinic(ctx, query, nodes, nil,
			func(n *OrderInfo, e *Clinic) { n.Edges.Clinic = e }); err != nil {
			return nil, err
		}
	}
	if query := oiq.withCustomerInfo; query != nil {
		if err := oiq.loadCustomerInfo(ctx, query, nodes, nil,
			func(n *OrderInfo, e *Customer) { n.Edges.CustomerInfo = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (oiq *OrderInfoQuery) loadTests(ctx context.Context, query *TestQuery, nodes []*OrderInfo, init func(*OrderInfo), assign func(*OrderInfo, *Test)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*OrderInfo)
	nids := make(map[int]map[*OrderInfo]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(orderinfo.TestsTable)
		s.Join(joinT).On(s.C(test.FieldID), joinT.C(orderinfo.TestsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(orderinfo.TestsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(orderinfo.TestsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*OrderInfo]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Test](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tests" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (oiq *OrderInfoQuery) loadOrderFlags(ctx context.Context, query *OrderFlagQuery, nodes []*OrderInfo, init func(*OrderInfo), assign func(*OrderInfo, *OrderFlag)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*OrderInfo)
	nids := make(map[int]map[*OrderInfo]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(orderinfo.OrderFlagsTable)
		s.Join(joinT).On(s.C(orderflag.FieldID), joinT.C(orderinfo.OrderFlagsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(orderinfo.OrderFlagsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(orderinfo.OrderFlagsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*OrderInfo]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*OrderFlag](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "order_flags" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (oiq *OrderInfoQuery) loadSample(ctx context.Context, query *SampleQuery, nodes []*OrderInfo, init func(*OrderInfo), assign func(*OrderInfo, *Sample)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*OrderInfo)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(sample.FieldOrderID)
	}
	query.Where(predicate.Sample(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(orderinfo.SampleColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrderID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "order_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oiq *OrderInfoQuery) loadContact(ctx context.Context, query *ContactQuery, nodes []*OrderInfo, init func(*OrderInfo), assign func(*OrderInfo, *Contact)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*OrderInfo)
	for i := range nodes {
		fk := nodes[i].ContactID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(contact.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "contact_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oiq *OrderInfoQuery) loadAddress(ctx context.Context, query *AddressQuery, nodes []*OrderInfo, init func(*OrderInfo), assign func(*OrderInfo, *Address)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*OrderInfo)
	for i := range nodes {
		fk := nodes[i].AddressID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(address.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "address_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oiq *OrderInfoQuery) loadClinic(ctx context.Context, query *ClinicQuery, nodes []*OrderInfo, init func(*OrderInfo), assign func(*OrderInfo, *Clinic)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*OrderInfo)
	for i := range nodes {
		fk := nodes[i].ClinicID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(clinic.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "clinic_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oiq *OrderInfoQuery) loadCustomerInfo(ctx context.Context, query *CustomerQuery, nodes []*OrderInfo, init func(*OrderInfo), assign func(*OrderInfo, *Customer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*OrderInfo)
	for i := range nodes {
		fk := nodes[i].CustomerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(customer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "customer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (oiq *OrderInfoQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oiq.querySpec()
	_spec.Node.Columns = oiq.ctx.Fields
	if len(oiq.ctx.Fields) > 0 {
		_spec.Unique = oiq.ctx.Unique != nil && *oiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, oiq.driver, _spec)
}

func (oiq *OrderInfoQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(orderinfo.Table, orderinfo.Columns, sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt))
	_spec.From = oiq.sql
	if unique := oiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if oiq.path != nil {
		_spec.Unique = true
	}
	if fields := oiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderinfo.FieldID)
		for i := range fields {
			if fields[i] != orderinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if oiq.withContact != nil {
			_spec.Node.AddColumnOnce(orderinfo.FieldContactID)
		}
		if oiq.withAddress != nil {
			_spec.Node.AddColumnOnce(orderinfo.FieldAddressID)
		}
		if oiq.withClinic != nil {
			_spec.Node.AddColumnOnce(orderinfo.FieldClinicID)
		}
		if oiq.withCustomerInfo != nil {
			_spec.Node.AddColumnOnce(orderinfo.FieldCustomerID)
		}
	}
	if ps := oiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oiq *OrderInfoQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oiq.driver.Dialect())
	t1 := builder.Table(orderinfo.Table)
	columns := oiq.ctx.Fields
	if len(columns) == 0 {
		columns = orderinfo.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oiq.sql != nil {
		selector = oiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oiq.ctx.Unique != nil && *oiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range oiq.predicates {
		p(selector)
	}
	for _, p := range oiq.order {
		p(selector)
	}
	if offset := oiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OrderInfoGroupBy is the group-by builder for OrderInfo entities.
type OrderInfoGroupBy struct {
	selector
	build *OrderInfoQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oigb *OrderInfoGroupBy) Aggregate(fns ...AggregateFunc) *OrderInfoGroupBy {
	oigb.fns = append(oigb.fns, fns...)
	return oigb
}

// Scan applies the selector query and scans the result into the given value.
func (oigb *OrderInfoGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oigb.build.ctx, "GroupBy")
	if err := oigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrderInfoQuery, *OrderInfoGroupBy](ctx, oigb.build, oigb, oigb.build.inters, v)
}

func (oigb *OrderInfoGroupBy) sqlScan(ctx context.Context, root *OrderInfoQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(oigb.fns))
	for _, fn := range oigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*oigb.flds)+len(oigb.fns))
		for _, f := range *oigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*oigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OrderInfoSelect is the builder for selecting fields of OrderInfo entities.
type OrderInfoSelect struct {
	*OrderInfoQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ois *OrderInfoSelect) Aggregate(fns ...AggregateFunc) *OrderInfoSelect {
	ois.fns = append(ois.fns, fns...)
	return ois
}

// Scan applies the selector query and scans the result into the given value.
func (ois *OrderInfoSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ois.ctx, "Select")
	if err := ois.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrderInfoQuery, *OrderInfoSelect](ctx, ois.OrderInfoQuery, ois, ois.inters, v)
}

func (ois *OrderInfoSelect) sqlScan(ctx context.Context, root *OrderInfoQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ois.fns))
	for _, fn := range ois.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ois.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ois.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
