// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/labordersendhistory"
	"coresamples/ent/sample"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LabOrderSendHistoryCreate is the builder for creating a LabOrderSendHistory entity.
type LabOrderSendHistoryCreate struct {
	config
	mutation *LabOrderSendHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSampleID sets the "sample_id" field.
func (loshc *LabOrderSendHistoryCreate) SetSampleID(i int) *LabOrderSendHistoryCreate {
	loshc.mutation.SetSampleID(i)
	return loshc
}

// SetTubeType sets the "tube_type" field.
func (loshc *LabOrderSendHistoryCreate) SetTubeType(s string) *LabOrderSendHistoryCreate {
	loshc.mutation.SetTubeType(s)
	return loshc
}

// SetSendoutTime sets the "sendout_time" field.
func (loshc *LabOrderSendHistoryCreate) SetSendoutTime(t time.Time) *LabOrderSendHistoryCreate {
	loshc.mutation.SetSendoutTime(t)
	return loshc
}

// SetNillableSendoutTime sets the "sendout_time" field if the given value is not nil.
func (loshc *LabOrderSendHistoryCreate) SetNillableSendoutTime(t *time.Time) *LabOrderSendHistoryCreate {
	if t != nil {
		loshc.SetSendoutTime(*t)
	}
	return loshc
}

// SetIsRedrawOrder sets the "is_redraw_order" field.
func (loshc *LabOrderSendHistoryCreate) SetIsRedrawOrder(b bool) *LabOrderSendHistoryCreate {
	loshc.mutation.SetIsRedrawOrder(b)
	return loshc
}

// SetNillableIsRedrawOrder sets the "is_redraw_order" field if the given value is not nil.
func (loshc *LabOrderSendHistoryCreate) SetNillableIsRedrawOrder(b *bool) *LabOrderSendHistoryCreate {
	if b != nil {
		loshc.SetIsRedrawOrder(*b)
	}
	return loshc
}

// SetIsLabSpecialOrder sets the "is_lab_special_order" field.
func (loshc *LabOrderSendHistoryCreate) SetIsLabSpecialOrder(b bool) *LabOrderSendHistoryCreate {
	loshc.mutation.SetIsLabSpecialOrder(b)
	return loshc
}

// SetNillableIsLabSpecialOrder sets the "is_lab_special_order" field if the given value is not nil.
func (loshc *LabOrderSendHistoryCreate) SetNillableIsLabSpecialOrder(b *bool) *LabOrderSendHistoryCreate {
	if b != nil {
		loshc.SetIsLabSpecialOrder(*b)
	}
	return loshc
}

// SetAction sets the "action" field.
func (loshc *LabOrderSendHistoryCreate) SetAction(s string) *LabOrderSendHistoryCreate {
	loshc.mutation.SetAction(s)
	return loshc
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (loshc *LabOrderSendHistoryCreate) SetNillableAction(s *string) *LabOrderSendHistoryCreate {
	if s != nil {
		loshc.SetAction(*s)
	}
	return loshc
}

// SetIsResendBlocked sets the "is_resend_blocked" field.
func (loshc *LabOrderSendHistoryCreate) SetIsResendBlocked(b bool) *LabOrderSendHistoryCreate {
	loshc.mutation.SetIsResendBlocked(b)
	return loshc
}

// SetNillableIsResendBlocked sets the "is_resend_blocked" field if the given value is not nil.
func (loshc *LabOrderSendHistoryCreate) SetNillableIsResendBlocked(b *bool) *LabOrderSendHistoryCreate {
	if b != nil {
		loshc.SetIsResendBlocked(*b)
	}
	return loshc
}

// SetID sets the "id" field.
func (loshc *LabOrderSendHistoryCreate) SetID(i int) *LabOrderSendHistoryCreate {
	loshc.mutation.SetID(i)
	return loshc
}

// SetSample sets the "sample" edge to the Sample entity.
func (loshc *LabOrderSendHistoryCreate) SetSample(s *Sample) *LabOrderSendHistoryCreate {
	return loshc.SetSampleID(s.ID)
}

// Mutation returns the LabOrderSendHistoryMutation object of the builder.
func (loshc *LabOrderSendHistoryCreate) Mutation() *LabOrderSendHistoryMutation {
	return loshc.mutation
}

// Save creates the LabOrderSendHistory in the database.
func (loshc *LabOrderSendHistoryCreate) Save(ctx context.Context) (*LabOrderSendHistory, error) {
	loshc.defaults()
	return withHooks(ctx, loshc.sqlSave, loshc.mutation, loshc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (loshc *LabOrderSendHistoryCreate) SaveX(ctx context.Context) *LabOrderSendHistory {
	v, err := loshc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (loshc *LabOrderSendHistoryCreate) Exec(ctx context.Context) error {
	_, err := loshc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (loshc *LabOrderSendHistoryCreate) ExecX(ctx context.Context) {
	if err := loshc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (loshc *LabOrderSendHistoryCreate) defaults() {
	if _, ok := loshc.mutation.SendoutTime(); !ok {
		v := labordersendhistory.DefaultSendoutTime()
		loshc.mutation.SetSendoutTime(v)
	}
	if _, ok := loshc.mutation.IsRedrawOrder(); !ok {
		v := labordersendhistory.DefaultIsRedrawOrder
		loshc.mutation.SetIsRedrawOrder(v)
	}
	if _, ok := loshc.mutation.IsLabSpecialOrder(); !ok {
		v := labordersendhistory.DefaultIsLabSpecialOrder
		loshc.mutation.SetIsLabSpecialOrder(v)
	}
	if _, ok := loshc.mutation.IsResendBlocked(); !ok {
		v := labordersendhistory.DefaultIsResendBlocked
		loshc.mutation.SetIsResendBlocked(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (loshc *LabOrderSendHistoryCreate) check() error {
	if _, ok := loshc.mutation.SampleID(); !ok {
		return &ValidationError{Name: "sample_id", err: errors.New(`ent: missing required field "LabOrderSendHistory.sample_id"`)}
	}
	if _, ok := loshc.mutation.TubeType(); !ok {
		return &ValidationError{Name: "tube_type", err: errors.New(`ent: missing required field "LabOrderSendHistory.tube_type"`)}
	}
	if _, ok := loshc.mutation.SampleID(); !ok {
		return &ValidationError{Name: "sample", err: errors.New(`ent: missing required edge "LabOrderSendHistory.sample"`)}
	}
	return nil
}

func (loshc *LabOrderSendHistoryCreate) sqlSave(ctx context.Context) (*LabOrderSendHistory, error) {
	if err := loshc.check(); err != nil {
		return nil, err
	}
	_node, _spec := loshc.createSpec()
	if err := sqlgraph.CreateNode(ctx, loshc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	loshc.mutation.id = &_node.ID
	loshc.mutation.done = true
	return _node, nil
}

func (loshc *LabOrderSendHistoryCreate) createSpec() (*LabOrderSendHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &LabOrderSendHistory{config: loshc.config}
		_spec = sqlgraph.NewCreateSpec(labordersendhistory.Table, sqlgraph.NewFieldSpec(labordersendhistory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = loshc.conflict
	if id, ok := loshc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := loshc.mutation.TubeType(); ok {
		_spec.SetField(labordersendhistory.FieldTubeType, field.TypeString, value)
		_node.TubeType = value
	}
	if value, ok := loshc.mutation.SendoutTime(); ok {
		_spec.SetField(labordersendhistory.FieldSendoutTime, field.TypeTime, value)
		_node.SendoutTime = value
	}
	if value, ok := loshc.mutation.IsRedrawOrder(); ok {
		_spec.SetField(labordersendhistory.FieldIsRedrawOrder, field.TypeBool, value)
		_node.IsRedrawOrder = value
	}
	if value, ok := loshc.mutation.IsLabSpecialOrder(); ok {
		_spec.SetField(labordersendhistory.FieldIsLabSpecialOrder, field.TypeBool, value)
		_node.IsLabSpecialOrder = value
	}
	if value, ok := loshc.mutation.Action(); ok {
		_spec.SetField(labordersendhistory.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := loshc.mutation.IsResendBlocked(); ok {
		_spec.SetField(labordersendhistory.FieldIsResendBlocked, field.TypeBool, value)
		_node.IsResendBlocked = value
	}
	if nodes := loshc.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   labordersendhistory.SampleTable,
			Columns: []string{labordersendhistory.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SampleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LabOrderSendHistory.Create().
//		SetSampleID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LabOrderSendHistoryUpsert) {
//			SetSampleID(v+v).
//		}).
//		Exec(ctx)
func (loshc *LabOrderSendHistoryCreate) OnConflict(opts ...sql.ConflictOption) *LabOrderSendHistoryUpsertOne {
	loshc.conflict = opts
	return &LabOrderSendHistoryUpsertOne{
		create: loshc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LabOrderSendHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (loshc *LabOrderSendHistoryCreate) OnConflictColumns(columns ...string) *LabOrderSendHistoryUpsertOne {
	loshc.conflict = append(loshc.conflict, sql.ConflictColumns(columns...))
	return &LabOrderSendHistoryUpsertOne{
		create: loshc,
	}
}

type (
	// LabOrderSendHistoryUpsertOne is the builder for "upsert"-ing
	//  one LabOrderSendHistory node.
	LabOrderSendHistoryUpsertOne struct {
		create *LabOrderSendHistoryCreate
	}

	// LabOrderSendHistoryUpsert is the "OnConflict" setter.
	LabOrderSendHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetSampleID sets the "sample_id" field.
func (u *LabOrderSendHistoryUpsert) SetSampleID(v int) *LabOrderSendHistoryUpsert {
	u.Set(labordersendhistory.FieldSampleID, v)
	return u
}

// UpdateSampleID sets the "sample_id" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsert) UpdateSampleID() *LabOrderSendHistoryUpsert {
	u.SetExcluded(labordersendhistory.FieldSampleID)
	return u
}

// SetTubeType sets the "tube_type" field.
func (u *LabOrderSendHistoryUpsert) SetTubeType(v string) *LabOrderSendHistoryUpsert {
	u.Set(labordersendhistory.FieldTubeType, v)
	return u
}

// UpdateTubeType sets the "tube_type" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsert) UpdateTubeType() *LabOrderSendHistoryUpsert {
	u.SetExcluded(labordersendhistory.FieldTubeType)
	return u
}

// SetSendoutTime sets the "sendout_time" field.
func (u *LabOrderSendHistoryUpsert) SetSendoutTime(v time.Time) *LabOrderSendHistoryUpsert {
	u.Set(labordersendhistory.FieldSendoutTime, v)
	return u
}

// UpdateSendoutTime sets the "sendout_time" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsert) UpdateSendoutTime() *LabOrderSendHistoryUpsert {
	u.SetExcluded(labordersendhistory.FieldSendoutTime)
	return u
}

// ClearSendoutTime clears the value of the "sendout_time" field.
func (u *LabOrderSendHistoryUpsert) ClearSendoutTime() *LabOrderSendHistoryUpsert {
	u.SetNull(labordersendhistory.FieldSendoutTime)
	return u
}

// SetIsRedrawOrder sets the "is_redraw_order" field.
func (u *LabOrderSendHistoryUpsert) SetIsRedrawOrder(v bool) *LabOrderSendHistoryUpsert {
	u.Set(labordersendhistory.FieldIsRedrawOrder, v)
	return u
}

// UpdateIsRedrawOrder sets the "is_redraw_order" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsert) UpdateIsRedrawOrder() *LabOrderSendHistoryUpsert {
	u.SetExcluded(labordersendhistory.FieldIsRedrawOrder)
	return u
}

// ClearIsRedrawOrder clears the value of the "is_redraw_order" field.
func (u *LabOrderSendHistoryUpsert) ClearIsRedrawOrder() *LabOrderSendHistoryUpsert {
	u.SetNull(labordersendhistory.FieldIsRedrawOrder)
	return u
}

// SetIsLabSpecialOrder sets the "is_lab_special_order" field.
func (u *LabOrderSendHistoryUpsert) SetIsLabSpecialOrder(v bool) *LabOrderSendHistoryUpsert {
	u.Set(labordersendhistory.FieldIsLabSpecialOrder, v)
	return u
}

// UpdateIsLabSpecialOrder sets the "is_lab_special_order" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsert) UpdateIsLabSpecialOrder() *LabOrderSendHistoryUpsert {
	u.SetExcluded(labordersendhistory.FieldIsLabSpecialOrder)
	return u
}

// ClearIsLabSpecialOrder clears the value of the "is_lab_special_order" field.
func (u *LabOrderSendHistoryUpsert) ClearIsLabSpecialOrder() *LabOrderSendHistoryUpsert {
	u.SetNull(labordersendhistory.FieldIsLabSpecialOrder)
	return u
}

// SetAction sets the "action" field.
func (u *LabOrderSendHistoryUpsert) SetAction(v string) *LabOrderSendHistoryUpsert {
	u.Set(labordersendhistory.FieldAction, v)
	return u
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsert) UpdateAction() *LabOrderSendHistoryUpsert {
	u.SetExcluded(labordersendhistory.FieldAction)
	return u
}

// ClearAction clears the value of the "action" field.
func (u *LabOrderSendHistoryUpsert) ClearAction() *LabOrderSendHistoryUpsert {
	u.SetNull(labordersendhistory.FieldAction)
	return u
}

// SetIsResendBlocked sets the "is_resend_blocked" field.
func (u *LabOrderSendHistoryUpsert) SetIsResendBlocked(v bool) *LabOrderSendHistoryUpsert {
	u.Set(labordersendhistory.FieldIsResendBlocked, v)
	return u
}

// UpdateIsResendBlocked sets the "is_resend_blocked" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsert) UpdateIsResendBlocked() *LabOrderSendHistoryUpsert {
	u.SetExcluded(labordersendhistory.FieldIsResendBlocked)
	return u
}

// ClearIsResendBlocked clears the value of the "is_resend_blocked" field.
func (u *LabOrderSendHistoryUpsert) ClearIsResendBlocked() *LabOrderSendHistoryUpsert {
	u.SetNull(labordersendhistory.FieldIsResendBlocked)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LabOrderSendHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(labordersendhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LabOrderSendHistoryUpsertOne) UpdateNewValues() *LabOrderSendHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(labordersendhistory.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LabOrderSendHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LabOrderSendHistoryUpsertOne) Ignore() *LabOrderSendHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LabOrderSendHistoryUpsertOne) DoNothing() *LabOrderSendHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LabOrderSendHistoryCreate.OnConflict
// documentation for more info.
func (u *LabOrderSendHistoryUpsertOne) Update(set func(*LabOrderSendHistoryUpsert)) *LabOrderSendHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LabOrderSendHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetSampleID sets the "sample_id" field.
func (u *LabOrderSendHistoryUpsertOne) SetSampleID(v int) *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.SetSampleID(v)
	})
}

// UpdateSampleID sets the "sample_id" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsertOne) UpdateSampleID() *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.UpdateSampleID()
	})
}

// SetTubeType sets the "tube_type" field.
func (u *LabOrderSendHistoryUpsertOne) SetTubeType(v string) *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.SetTubeType(v)
	})
}

// UpdateTubeType sets the "tube_type" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsertOne) UpdateTubeType() *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.UpdateTubeType()
	})
}

// SetSendoutTime sets the "sendout_time" field.
func (u *LabOrderSendHistoryUpsertOne) SetSendoutTime(v time.Time) *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.SetSendoutTime(v)
	})
}

// UpdateSendoutTime sets the "sendout_time" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsertOne) UpdateSendoutTime() *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.UpdateSendoutTime()
	})
}

// ClearSendoutTime clears the value of the "sendout_time" field.
func (u *LabOrderSendHistoryUpsertOne) ClearSendoutTime() *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.ClearSendoutTime()
	})
}

// SetIsRedrawOrder sets the "is_redraw_order" field.
func (u *LabOrderSendHistoryUpsertOne) SetIsRedrawOrder(v bool) *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.SetIsRedrawOrder(v)
	})
}

// UpdateIsRedrawOrder sets the "is_redraw_order" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsertOne) UpdateIsRedrawOrder() *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.UpdateIsRedrawOrder()
	})
}

// ClearIsRedrawOrder clears the value of the "is_redraw_order" field.
func (u *LabOrderSendHistoryUpsertOne) ClearIsRedrawOrder() *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.ClearIsRedrawOrder()
	})
}

// SetIsLabSpecialOrder sets the "is_lab_special_order" field.
func (u *LabOrderSendHistoryUpsertOne) SetIsLabSpecialOrder(v bool) *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.SetIsLabSpecialOrder(v)
	})
}

// UpdateIsLabSpecialOrder sets the "is_lab_special_order" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsertOne) UpdateIsLabSpecialOrder() *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.UpdateIsLabSpecialOrder()
	})
}

// ClearIsLabSpecialOrder clears the value of the "is_lab_special_order" field.
func (u *LabOrderSendHistoryUpsertOne) ClearIsLabSpecialOrder() *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.ClearIsLabSpecialOrder()
	})
}

// SetAction sets the "action" field.
func (u *LabOrderSendHistoryUpsertOne) SetAction(v string) *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsertOne) UpdateAction() *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.UpdateAction()
	})
}

// ClearAction clears the value of the "action" field.
func (u *LabOrderSendHistoryUpsertOne) ClearAction() *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.ClearAction()
	})
}

// SetIsResendBlocked sets the "is_resend_blocked" field.
func (u *LabOrderSendHistoryUpsertOne) SetIsResendBlocked(v bool) *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.SetIsResendBlocked(v)
	})
}

// UpdateIsResendBlocked sets the "is_resend_blocked" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsertOne) UpdateIsResendBlocked() *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.UpdateIsResendBlocked()
	})
}

// ClearIsResendBlocked clears the value of the "is_resend_blocked" field.
func (u *LabOrderSendHistoryUpsertOne) ClearIsResendBlocked() *LabOrderSendHistoryUpsertOne {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.ClearIsResendBlocked()
	})
}

// Exec executes the query.
func (u *LabOrderSendHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LabOrderSendHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LabOrderSendHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LabOrderSendHistoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LabOrderSendHistoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LabOrderSendHistoryCreateBulk is the builder for creating many LabOrderSendHistory entities in bulk.
type LabOrderSendHistoryCreateBulk struct {
	config
	err      error
	builders []*LabOrderSendHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the LabOrderSendHistory entities in the database.
func (loshcb *LabOrderSendHistoryCreateBulk) Save(ctx context.Context) ([]*LabOrderSendHistory, error) {
	if loshcb.err != nil {
		return nil, loshcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(loshcb.builders))
	nodes := make([]*LabOrderSendHistory, len(loshcb.builders))
	mutators := make([]Mutator, len(loshcb.builders))
	for i := range loshcb.builders {
		func(i int, root context.Context) {
			builder := loshcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LabOrderSendHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, loshcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = loshcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, loshcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, loshcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (loshcb *LabOrderSendHistoryCreateBulk) SaveX(ctx context.Context) []*LabOrderSendHistory {
	v, err := loshcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (loshcb *LabOrderSendHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := loshcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (loshcb *LabOrderSendHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := loshcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LabOrderSendHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LabOrderSendHistoryUpsert) {
//			SetSampleID(v+v).
//		}).
//		Exec(ctx)
func (loshcb *LabOrderSendHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *LabOrderSendHistoryUpsertBulk {
	loshcb.conflict = opts
	return &LabOrderSendHistoryUpsertBulk{
		create: loshcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LabOrderSendHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (loshcb *LabOrderSendHistoryCreateBulk) OnConflictColumns(columns ...string) *LabOrderSendHistoryUpsertBulk {
	loshcb.conflict = append(loshcb.conflict, sql.ConflictColumns(columns...))
	return &LabOrderSendHistoryUpsertBulk{
		create: loshcb,
	}
}

// LabOrderSendHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of LabOrderSendHistory nodes.
type LabOrderSendHistoryUpsertBulk struct {
	create *LabOrderSendHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LabOrderSendHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(labordersendhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LabOrderSendHistoryUpsertBulk) UpdateNewValues() *LabOrderSendHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(labordersendhistory.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LabOrderSendHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LabOrderSendHistoryUpsertBulk) Ignore() *LabOrderSendHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LabOrderSendHistoryUpsertBulk) DoNothing() *LabOrderSendHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LabOrderSendHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *LabOrderSendHistoryUpsertBulk) Update(set func(*LabOrderSendHistoryUpsert)) *LabOrderSendHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LabOrderSendHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetSampleID sets the "sample_id" field.
func (u *LabOrderSendHistoryUpsertBulk) SetSampleID(v int) *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.SetSampleID(v)
	})
}

// UpdateSampleID sets the "sample_id" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsertBulk) UpdateSampleID() *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.UpdateSampleID()
	})
}

// SetTubeType sets the "tube_type" field.
func (u *LabOrderSendHistoryUpsertBulk) SetTubeType(v string) *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.SetTubeType(v)
	})
}

// UpdateTubeType sets the "tube_type" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsertBulk) UpdateTubeType() *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.UpdateTubeType()
	})
}

// SetSendoutTime sets the "sendout_time" field.
func (u *LabOrderSendHistoryUpsertBulk) SetSendoutTime(v time.Time) *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.SetSendoutTime(v)
	})
}

// UpdateSendoutTime sets the "sendout_time" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsertBulk) UpdateSendoutTime() *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.UpdateSendoutTime()
	})
}

// ClearSendoutTime clears the value of the "sendout_time" field.
func (u *LabOrderSendHistoryUpsertBulk) ClearSendoutTime() *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.ClearSendoutTime()
	})
}

// SetIsRedrawOrder sets the "is_redraw_order" field.
func (u *LabOrderSendHistoryUpsertBulk) SetIsRedrawOrder(v bool) *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.SetIsRedrawOrder(v)
	})
}

// UpdateIsRedrawOrder sets the "is_redraw_order" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsertBulk) UpdateIsRedrawOrder() *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.UpdateIsRedrawOrder()
	})
}

// ClearIsRedrawOrder clears the value of the "is_redraw_order" field.
func (u *LabOrderSendHistoryUpsertBulk) ClearIsRedrawOrder() *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.ClearIsRedrawOrder()
	})
}

// SetIsLabSpecialOrder sets the "is_lab_special_order" field.
func (u *LabOrderSendHistoryUpsertBulk) SetIsLabSpecialOrder(v bool) *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.SetIsLabSpecialOrder(v)
	})
}

// UpdateIsLabSpecialOrder sets the "is_lab_special_order" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsertBulk) UpdateIsLabSpecialOrder() *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.UpdateIsLabSpecialOrder()
	})
}

// ClearIsLabSpecialOrder clears the value of the "is_lab_special_order" field.
func (u *LabOrderSendHistoryUpsertBulk) ClearIsLabSpecialOrder() *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.ClearIsLabSpecialOrder()
	})
}

// SetAction sets the "action" field.
func (u *LabOrderSendHistoryUpsertBulk) SetAction(v string) *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsertBulk) UpdateAction() *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.UpdateAction()
	})
}

// ClearAction clears the value of the "action" field.
func (u *LabOrderSendHistoryUpsertBulk) ClearAction() *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.ClearAction()
	})
}

// SetIsResendBlocked sets the "is_resend_blocked" field.
func (u *LabOrderSendHistoryUpsertBulk) SetIsResendBlocked(v bool) *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.SetIsResendBlocked(v)
	})
}

// UpdateIsResendBlocked sets the "is_resend_blocked" field to the value that was provided on create.
func (u *LabOrderSendHistoryUpsertBulk) UpdateIsResendBlocked() *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.UpdateIsResendBlocked()
	})
}

// ClearIsResendBlocked clears the value of the "is_resend_blocked" field.
func (u *LabOrderSendHistoryUpsertBulk) ClearIsResendBlocked() *LabOrderSendHistoryUpsertBulk {
	return u.Update(func(s *LabOrderSendHistoryUpsert) {
		s.ClearIsResendBlocked()
	})
}

// Exec executes the query.
func (u *LabOrderSendHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LabOrderSendHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LabOrderSendHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LabOrderSendHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
