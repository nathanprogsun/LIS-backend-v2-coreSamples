// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/userinvitationrecord"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserInvitationRecord is the model entity for the UserInvitationRecord schema.
type UserInvitationRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID int `json:"customer_id,omitempty"`
	// InvitationLink holds the value of the "invitation_link" field.
	InvitationLink string `json:"invitation_link,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserInvitationRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userinvitationrecord.FieldID, userinvitationrecord.FieldCustomerID:
			values[i] = new(sql.NullInt64)
		case userinvitationrecord.FieldInvitationLink:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserInvitationRecord fields.
func (uir *UserInvitationRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userinvitationrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uir.ID = int(value.Int64)
		case userinvitationrecord.FieldCustomerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				uir.CustomerID = int(value.Int64)
			}
		case userinvitationrecord.FieldInvitationLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invitation_link", values[i])
			} else if value.Valid {
				uir.InvitationLink = value.String
			}
		default:
			uir.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserInvitationRecord.
// This includes values selected through modifiers, order, etc.
func (uir *UserInvitationRecord) Value(name string) (ent.Value, error) {
	return uir.selectValues.Get(name)
}

// Update returns a builder for updating this UserInvitationRecord.
// Note that you need to call UserInvitationRecord.Unwrap() before calling this method if this UserInvitationRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (uir *UserInvitationRecord) Update() *UserInvitationRecordUpdateOne {
	return NewUserInvitationRecordClient(uir.config).UpdateOne(uir)
}

// Unwrap unwraps the UserInvitationRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uir *UserInvitationRecord) Unwrap() *UserInvitationRecord {
	_tx, ok := uir.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserInvitationRecord is not a transactional entity")
	}
	uir.config.driver = _tx.drv
	return uir
}

// String implements the fmt.Stringer.
func (uir *UserInvitationRecord) String() string {
	var builder strings.Builder
	builder.WriteString("UserInvitationRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uir.ID))
	builder.WriteString("customer_id=")
	builder.WriteString(fmt.Sprintf("%v", uir.CustomerID))
	builder.WriteString(", ")
	builder.WriteString("invitation_link=")
	builder.WriteString(uir.InvitationLink)
	builder.WriteByte(')')
	return builder.String()
}

// UserInvitationRecords is a parsable slice of UserInvitationRecord.
type UserInvitationRecords []*UserInvitationRecord
