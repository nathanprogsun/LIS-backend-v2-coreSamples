// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/orderflag"
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderFlagDelete is the builder for deleting a OrderFlag entity.
type OrderFlagDelete struct {
	config
	hooks    []Hook
	mutation *OrderFlagMutation
}

// Where appends a list predicates to the OrderFlagDelete builder.
func (ofd *OrderFlagDelete) Where(ps ...predicate.OrderFlag) *OrderFlagDelete {
	ofd.mutation.Where(ps...)
	return ofd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ofd *OrderFlagDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ofd.sqlExec, ofd.mutation, ofd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ofd *OrderFlagDelete) ExecX(ctx context.Context) int {
	n, err := ofd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ofd *OrderFlagDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(orderflag.Table, sqlgraph.NewFieldSpec(orderflag.FieldID, field.TypeInt))
	if ps := ofd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ofd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ofd.mutation.done = true
	return affected, err
}

// OrderFlagDeleteOne is the builder for deleting a single OrderFlag entity.
type OrderFlagDeleteOne struct {
	ofd *OrderFlagDelete
}

// Where appends a list predicates to the OrderFlagDelete builder.
func (ofdo *OrderFlagDeleteOne) Where(ps ...predicate.OrderFlag) *OrderFlagDeleteOne {
	ofdo.ofd.mutation.Where(ps...)
	return ofdo
}

// Exec executes the deletion query.
func (ofdo *OrderFlagDeleteOne) Exec(ctx context.Context) error {
	n, err := ofdo.ofd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{orderflag.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ofdo *OrderFlagDeleteOne) ExecX(ctx context.Context) {
	if err := ofdo.Exec(ctx); err != nil {
		panic(err)
	}
}
