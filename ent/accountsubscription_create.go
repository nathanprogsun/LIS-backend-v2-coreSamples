// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/accountsubscription"
	"coresamples/ent/serviceship"
	"coresamples/ent/serviceshipbillingplan"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountSubscriptionCreate is the builder for creating a AccountSubscription entity.
type AccountSubscriptionCreate struct {
	config
	mutation *AccountSubscriptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAccountID sets the "account_id" field.
func (asc *AccountSubscriptionCreate) SetAccountID(i int64) *AccountSubscriptionCreate {
	asc.mutation.SetAccountID(i)
	return asc
}

// SetAccountType sets the "account_type" field.
func (asc *AccountSubscriptionCreate) SetAccountType(at accountsubscription.AccountType) *AccountSubscriptionCreate {
	asc.mutation.SetAccountType(at)
	return asc
}

// SetSubscriberName sets the "subscriber_name" field.
func (asc *AccountSubscriptionCreate) SetSubscriberName(s string) *AccountSubscriptionCreate {
	asc.mutation.SetSubscriberName(s)
	return asc
}

// SetEmail sets the "email" field.
func (asc *AccountSubscriptionCreate) SetEmail(s string) *AccountSubscriptionCreate {
	asc.mutation.SetEmail(s)
	return asc
}

// SetStartTime sets the "start_time" field.
func (asc *AccountSubscriptionCreate) SetStartTime(t time.Time) *AccountSubscriptionCreate {
	asc.mutation.SetStartTime(t)
	return asc
}

// SetEndTime sets the "end_time" field.
func (asc *AccountSubscriptionCreate) SetEndTime(t time.Time) *AccountSubscriptionCreate {
	asc.mutation.SetEndTime(t)
	return asc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (asc *AccountSubscriptionCreate) SetNillableEndTime(t *time.Time) *AccountSubscriptionCreate {
	if t != nil {
		asc.SetEndTime(*t)
	}
	return asc
}

// SetServiceshipBillingPlanID sets the "serviceship_billing_plan" edge to the ServiceshipBillingPlan entity by ID.
func (asc *AccountSubscriptionCreate) SetServiceshipBillingPlanID(id int) *AccountSubscriptionCreate {
	asc.mutation.SetServiceshipBillingPlanID(id)
	return asc
}

// SetServiceshipBillingPlan sets the "serviceship_billing_plan" edge to the ServiceshipBillingPlan entity.
func (asc *AccountSubscriptionCreate) SetServiceshipBillingPlan(s *ServiceshipBillingPlan) *AccountSubscriptionCreate {
	return asc.SetServiceshipBillingPlanID(s.ID)
}

// SetServiceshipID sets the "serviceship" edge to the Serviceship entity by ID.
func (asc *AccountSubscriptionCreate) SetServiceshipID(id int) *AccountSubscriptionCreate {
	asc.mutation.SetServiceshipID(id)
	return asc
}

// SetServiceship sets the "serviceship" edge to the Serviceship entity.
func (asc *AccountSubscriptionCreate) SetServiceship(s *Serviceship) *AccountSubscriptionCreate {
	return asc.SetServiceshipID(s.ID)
}

// Mutation returns the AccountSubscriptionMutation object of the builder.
func (asc *AccountSubscriptionCreate) Mutation() *AccountSubscriptionMutation {
	return asc.mutation
}

// Save creates the AccountSubscription in the database.
func (asc *AccountSubscriptionCreate) Save(ctx context.Context) (*AccountSubscription, error) {
	asc.defaults()
	return withHooks(ctx, asc.sqlSave, asc.mutation, asc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AccountSubscriptionCreate) SaveX(ctx context.Context) *AccountSubscription {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AccountSubscriptionCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AccountSubscriptionCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asc *AccountSubscriptionCreate) defaults() {
	if _, ok := asc.mutation.EndTime(); !ok {
		v := accountsubscription.DefaultEndTime
		asc.mutation.SetEndTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AccountSubscriptionCreate) check() error {
	if _, ok := asc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "AccountSubscription.account_id"`)}
	}
	if v, ok := asc.mutation.AccountID(); ok {
		if err := accountsubscription.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`ent: validator failed for field "AccountSubscription.account_id": %w`, err)}
		}
	}
	if _, ok := asc.mutation.AccountType(); !ok {
		return &ValidationError{Name: "account_type", err: errors.New(`ent: missing required field "AccountSubscription.account_type"`)}
	}
	if v, ok := asc.mutation.AccountType(); ok {
		if err := accountsubscription.AccountTypeValidator(v); err != nil {
			return &ValidationError{Name: "account_type", err: fmt.Errorf(`ent: validator failed for field "AccountSubscription.account_type": %w`, err)}
		}
	}
	if _, ok := asc.mutation.SubscriberName(); !ok {
		return &ValidationError{Name: "subscriber_name", err: errors.New(`ent: missing required field "AccountSubscription.subscriber_name"`)}
	}
	if _, ok := asc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "AccountSubscription.email"`)}
	}
	if _, ok := asc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "AccountSubscription.start_time"`)}
	}
	if _, ok := asc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "AccountSubscription.end_time"`)}
	}
	if _, ok := asc.mutation.ServiceshipBillingPlanID(); !ok {
		return &ValidationError{Name: "serviceship_billing_plan", err: errors.New(`ent: missing required edge "AccountSubscription.serviceship_billing_plan"`)}
	}
	if _, ok := asc.mutation.ServiceshipID(); !ok {
		return &ValidationError{Name: "serviceship", err: errors.New(`ent: missing required edge "AccountSubscription.serviceship"`)}
	}
	return nil
}

func (asc *AccountSubscriptionCreate) sqlSave(ctx context.Context) (*AccountSubscription, error) {
	if err := asc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	asc.mutation.id = &_node.ID
	asc.mutation.done = true
	return _node, nil
}

func (asc *AccountSubscriptionCreate) createSpec() (*AccountSubscription, *sqlgraph.CreateSpec) {
	var (
		_node = &AccountSubscription{config: asc.config}
		_spec = sqlgraph.NewCreateSpec(accountsubscription.Table, sqlgraph.NewFieldSpec(accountsubscription.FieldID, field.TypeInt))
	)
	_spec.OnConflict = asc.conflict
	if value, ok := asc.mutation.AccountID(); ok {
		_spec.SetField(accountsubscription.FieldAccountID, field.TypeInt64, value)
		_node.AccountID = value
	}
	if value, ok := asc.mutation.AccountType(); ok {
		_spec.SetField(accountsubscription.FieldAccountType, field.TypeEnum, value)
		_node.AccountType = value
	}
	if value, ok := asc.mutation.SubscriberName(); ok {
		_spec.SetField(accountsubscription.FieldSubscriberName, field.TypeString, value)
		_node.SubscriberName = value
	}
	if value, ok := asc.mutation.Email(); ok {
		_spec.SetField(accountsubscription.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := asc.mutation.StartTime(); ok {
		_spec.SetField(accountsubscription.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := asc.mutation.EndTime(); ok {
		_spec.SetField(accountsubscription.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if nodes := asc.mutation.ServiceshipBillingPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountsubscription.ServiceshipBillingPlanTable,
			Columns: []string{accountsubscription.ServiceshipBillingPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceshipbillingplan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.serviceship_billing_plan_account_subscription = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := asc.mutation.ServiceshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountsubscription.ServiceshipTable,
			Columns: []string{accountsubscription.ServiceshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.serviceship_account_subscription = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AccountSubscription.Create().
//		SetAccountID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountSubscriptionUpsert) {
//			SetAccountID(v+v).
//		}).
//		Exec(ctx)
func (asc *AccountSubscriptionCreate) OnConflict(opts ...sql.ConflictOption) *AccountSubscriptionUpsertOne {
	asc.conflict = opts
	return &AccountSubscriptionUpsertOne{
		create: asc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AccountSubscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (asc *AccountSubscriptionCreate) OnConflictColumns(columns ...string) *AccountSubscriptionUpsertOne {
	asc.conflict = append(asc.conflict, sql.ConflictColumns(columns...))
	return &AccountSubscriptionUpsertOne{
		create: asc,
	}
}

type (
	// AccountSubscriptionUpsertOne is the builder for "upsert"-ing
	//  one AccountSubscription node.
	AccountSubscriptionUpsertOne struct {
		create *AccountSubscriptionCreate
	}

	// AccountSubscriptionUpsert is the "OnConflict" setter.
	AccountSubscriptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetAccountID sets the "account_id" field.
func (u *AccountSubscriptionUpsert) SetAccountID(v int64) *AccountSubscriptionUpsert {
	u.Set(accountsubscription.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *AccountSubscriptionUpsert) UpdateAccountID() *AccountSubscriptionUpsert {
	u.SetExcluded(accountsubscription.FieldAccountID)
	return u
}

// AddAccountID adds v to the "account_id" field.
func (u *AccountSubscriptionUpsert) AddAccountID(v int64) *AccountSubscriptionUpsert {
	u.Add(accountsubscription.FieldAccountID, v)
	return u
}

// SetAccountType sets the "account_type" field.
func (u *AccountSubscriptionUpsert) SetAccountType(v accountsubscription.AccountType) *AccountSubscriptionUpsert {
	u.Set(accountsubscription.FieldAccountType, v)
	return u
}

// UpdateAccountType sets the "account_type" field to the value that was provided on create.
func (u *AccountSubscriptionUpsert) UpdateAccountType() *AccountSubscriptionUpsert {
	u.SetExcluded(accountsubscription.FieldAccountType)
	return u
}

// SetSubscriberName sets the "subscriber_name" field.
func (u *AccountSubscriptionUpsert) SetSubscriberName(v string) *AccountSubscriptionUpsert {
	u.Set(accountsubscription.FieldSubscriberName, v)
	return u
}

// UpdateSubscriberName sets the "subscriber_name" field to the value that was provided on create.
func (u *AccountSubscriptionUpsert) UpdateSubscriberName() *AccountSubscriptionUpsert {
	u.SetExcluded(accountsubscription.FieldSubscriberName)
	return u
}

// SetEmail sets the "email" field.
func (u *AccountSubscriptionUpsert) SetEmail(v string) *AccountSubscriptionUpsert {
	u.Set(accountsubscription.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AccountSubscriptionUpsert) UpdateEmail() *AccountSubscriptionUpsert {
	u.SetExcluded(accountsubscription.FieldEmail)
	return u
}

// SetStartTime sets the "start_time" field.
func (u *AccountSubscriptionUpsert) SetStartTime(v time.Time) *AccountSubscriptionUpsert {
	u.Set(accountsubscription.FieldStartTime, v)
	return u
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *AccountSubscriptionUpsert) UpdateStartTime() *AccountSubscriptionUpsert {
	u.SetExcluded(accountsubscription.FieldStartTime)
	return u
}

// SetEndTime sets the "end_time" field.
func (u *AccountSubscriptionUpsert) SetEndTime(v time.Time) *AccountSubscriptionUpsert {
	u.Set(accountsubscription.FieldEndTime, v)
	return u
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *AccountSubscriptionUpsert) UpdateEndTime() *AccountSubscriptionUpsert {
	u.SetExcluded(accountsubscription.FieldEndTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AccountSubscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AccountSubscriptionUpsertOne) UpdateNewValues() *AccountSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AccountSubscription.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AccountSubscriptionUpsertOne) Ignore() *AccountSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountSubscriptionUpsertOne) DoNothing() *AccountSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountSubscriptionCreate.OnConflict
// documentation for more info.
func (u *AccountSubscriptionUpsertOne) Update(set func(*AccountSubscriptionUpsert)) *AccountSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountSubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetAccountID sets the "account_id" field.
func (u *AccountSubscriptionUpsertOne) SetAccountID(v int64) *AccountSubscriptionUpsertOne {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *AccountSubscriptionUpsertOne) AddAccountID(v int64) *AccountSubscriptionUpsertOne {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *AccountSubscriptionUpsertOne) UpdateAccountID() *AccountSubscriptionUpsertOne {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.UpdateAccountID()
	})
}

// SetAccountType sets the "account_type" field.
func (u *AccountSubscriptionUpsertOne) SetAccountType(v accountsubscription.AccountType) *AccountSubscriptionUpsertOne {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.SetAccountType(v)
	})
}

// UpdateAccountType sets the "account_type" field to the value that was provided on create.
func (u *AccountSubscriptionUpsertOne) UpdateAccountType() *AccountSubscriptionUpsertOne {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.UpdateAccountType()
	})
}

// SetSubscriberName sets the "subscriber_name" field.
func (u *AccountSubscriptionUpsertOne) SetSubscriberName(v string) *AccountSubscriptionUpsertOne {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.SetSubscriberName(v)
	})
}

// UpdateSubscriberName sets the "subscriber_name" field to the value that was provided on create.
func (u *AccountSubscriptionUpsertOne) UpdateSubscriberName() *AccountSubscriptionUpsertOne {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.UpdateSubscriberName()
	})
}

// SetEmail sets the "email" field.
func (u *AccountSubscriptionUpsertOne) SetEmail(v string) *AccountSubscriptionUpsertOne {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AccountSubscriptionUpsertOne) UpdateEmail() *AccountSubscriptionUpsertOne {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.UpdateEmail()
	})
}

// SetStartTime sets the "start_time" field.
func (u *AccountSubscriptionUpsertOne) SetStartTime(v time.Time) *AccountSubscriptionUpsertOne {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *AccountSubscriptionUpsertOne) UpdateStartTime() *AccountSubscriptionUpsertOne {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *AccountSubscriptionUpsertOne) SetEndTime(v time.Time) *AccountSubscriptionUpsertOne {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *AccountSubscriptionUpsertOne) UpdateEndTime() *AccountSubscriptionUpsertOne {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.UpdateEndTime()
	})
}

// Exec executes the query.
func (u *AccountSubscriptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountSubscriptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountSubscriptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AccountSubscriptionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AccountSubscriptionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AccountSubscriptionCreateBulk is the builder for creating many AccountSubscription entities in bulk.
type AccountSubscriptionCreateBulk struct {
	config
	err      error
	builders []*AccountSubscriptionCreate
	conflict []sql.ConflictOption
}

// Save creates the AccountSubscription entities in the database.
func (ascb *AccountSubscriptionCreateBulk) Save(ctx context.Context) ([]*AccountSubscription, error) {
	if ascb.err != nil {
		return nil, ascb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AccountSubscription, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountSubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ascb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AccountSubscriptionCreateBulk) SaveX(ctx context.Context) []*AccountSubscription {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AccountSubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AccountSubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AccountSubscription.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountSubscriptionUpsert) {
//			SetAccountID(v+v).
//		}).
//		Exec(ctx)
func (ascb *AccountSubscriptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *AccountSubscriptionUpsertBulk {
	ascb.conflict = opts
	return &AccountSubscriptionUpsertBulk{
		create: ascb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AccountSubscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ascb *AccountSubscriptionCreateBulk) OnConflictColumns(columns ...string) *AccountSubscriptionUpsertBulk {
	ascb.conflict = append(ascb.conflict, sql.ConflictColumns(columns...))
	return &AccountSubscriptionUpsertBulk{
		create: ascb,
	}
}

// AccountSubscriptionUpsertBulk is the builder for "upsert"-ing
// a bulk of AccountSubscription nodes.
type AccountSubscriptionUpsertBulk struct {
	create *AccountSubscriptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AccountSubscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AccountSubscriptionUpsertBulk) UpdateNewValues() *AccountSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AccountSubscription.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AccountSubscriptionUpsertBulk) Ignore() *AccountSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountSubscriptionUpsertBulk) DoNothing() *AccountSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountSubscriptionCreateBulk.OnConflict
// documentation for more info.
func (u *AccountSubscriptionUpsertBulk) Update(set func(*AccountSubscriptionUpsert)) *AccountSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountSubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetAccountID sets the "account_id" field.
func (u *AccountSubscriptionUpsertBulk) SetAccountID(v int64) *AccountSubscriptionUpsertBulk {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *AccountSubscriptionUpsertBulk) AddAccountID(v int64) *AccountSubscriptionUpsertBulk {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *AccountSubscriptionUpsertBulk) UpdateAccountID() *AccountSubscriptionUpsertBulk {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.UpdateAccountID()
	})
}

// SetAccountType sets the "account_type" field.
func (u *AccountSubscriptionUpsertBulk) SetAccountType(v accountsubscription.AccountType) *AccountSubscriptionUpsertBulk {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.SetAccountType(v)
	})
}

// UpdateAccountType sets the "account_type" field to the value that was provided on create.
func (u *AccountSubscriptionUpsertBulk) UpdateAccountType() *AccountSubscriptionUpsertBulk {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.UpdateAccountType()
	})
}

// SetSubscriberName sets the "subscriber_name" field.
func (u *AccountSubscriptionUpsertBulk) SetSubscriberName(v string) *AccountSubscriptionUpsertBulk {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.SetSubscriberName(v)
	})
}

// UpdateSubscriberName sets the "subscriber_name" field to the value that was provided on create.
func (u *AccountSubscriptionUpsertBulk) UpdateSubscriberName() *AccountSubscriptionUpsertBulk {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.UpdateSubscriberName()
	})
}

// SetEmail sets the "email" field.
func (u *AccountSubscriptionUpsertBulk) SetEmail(v string) *AccountSubscriptionUpsertBulk {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AccountSubscriptionUpsertBulk) UpdateEmail() *AccountSubscriptionUpsertBulk {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.UpdateEmail()
	})
}

// SetStartTime sets the "start_time" field.
func (u *AccountSubscriptionUpsertBulk) SetStartTime(v time.Time) *AccountSubscriptionUpsertBulk {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *AccountSubscriptionUpsertBulk) UpdateStartTime() *AccountSubscriptionUpsertBulk {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *AccountSubscriptionUpsertBulk) SetEndTime(v time.Time) *AccountSubscriptionUpsertBulk {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *AccountSubscriptionUpsertBulk) UpdateEndTime() *AccountSubscriptionUpsertBulk {
	return u.Update(func(s *AccountSubscriptionUpsert) {
		s.UpdateEndTime()
	})
}

// Exec executes the query.
func (u *AccountSubscriptionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AccountSubscriptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountSubscriptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountSubscriptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
