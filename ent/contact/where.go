// Code generated by ent, DO NOT EDIT.

package contact

import (
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Contact {
	return predicate.Contact(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Contact {
	return predicate.Contact(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Contact {
	return predicate.Contact(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Contact {
	return predicate.Contact(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Contact {
	return predicate.Contact(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Contact {
	return predicate.Contact(sql.FieldLTE(FieldID, id))
}

// ContactDescription applies equality check predicate on the "contact_description" field. It's identical to ContactDescriptionEQ.
func ContactDescription(v string) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldContactDescription, v))
}

// ContactDetails applies equality check predicate on the "contact_details" field. It's identical to ContactDetailsEQ.
func ContactDetails(v string) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldContactDetails, v))
}

// ContactType applies equality check predicate on the "contact_type" field. It's identical to ContactTypeEQ.
func ContactType(v string) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldContactType, v))
}

// IsPrimaryContact applies equality check predicate on the "is_primary_contact" field. It's identical to IsPrimaryContactEQ.
func IsPrimaryContact(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldIsPrimaryContact, v))
}

// Is2faContact applies equality check predicate on the "is_2fa_contact" field. It's identical to Is2faContactEQ.
func Is2faContact(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldIs2faContact, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v int) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldCustomerID, v))
}

// PatientID applies equality check predicate on the "patient_id" field. It's identical to PatientIDEQ.
func PatientID(v int) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldPatientID, v))
}

// ClinicID applies equality check predicate on the "clinic_id" field. It's identical to ClinicIDEQ.
func ClinicID(v int) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldClinicID, v))
}

// InternalUserID applies equality check predicate on the "internal_user_id" field. It's identical to InternalUserIDEQ.
func InternalUserID(v int) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldInternalUserID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldUserID, v))
}

// ContactLevel applies equality check predicate on the "contact_level" field. It's identical to ContactLevelEQ.
func ContactLevel(v int) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldContactLevel, v))
}

// ContactLevelName applies equality check predicate on the "contact_level_name" field. It's identical to ContactLevelNameEQ.
func ContactLevelName(v string) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldContactLevelName, v))
}

// GroupContactID applies equality check predicate on the "group_contact_id" field. It's identical to GroupContactIDEQ.
func GroupContactID(v int) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldGroupContactID, v))
}

// ApplyToAllGroupMember applies equality check predicate on the "apply_to_all_group_member" field. It's identical to ApplyToAllGroupMemberEQ.
func ApplyToAllGroupMember(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldApplyToAllGroupMember, v))
}

// IsGroupContact applies equality check predicate on the "is_group_contact" field. It's identical to IsGroupContactEQ.
func IsGroupContact(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldIsGroupContact, v))
}

// UseAsDefaultCreateContact applies equality check predicate on the "use_as_default_create_contact" field. It's identical to UseAsDefaultCreateContactEQ.
func UseAsDefaultCreateContact(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldUseAsDefaultCreateContact, v))
}

// UseGroupContact applies equality check predicate on the "use_group_contact" field. It's identical to UseGroupContactEQ.
func UseGroupContact(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldUseGroupContact, v))
}

// ContactDescriptionEQ applies the EQ predicate on the "contact_description" field.
func ContactDescriptionEQ(v string) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldContactDescription, v))
}

// ContactDescriptionNEQ applies the NEQ predicate on the "contact_description" field.
func ContactDescriptionNEQ(v string) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldContactDescription, v))
}

// ContactDescriptionIn applies the In predicate on the "contact_description" field.
func ContactDescriptionIn(vs ...string) predicate.Contact {
	return predicate.Contact(sql.FieldIn(FieldContactDescription, vs...))
}

// ContactDescriptionNotIn applies the NotIn predicate on the "contact_description" field.
func ContactDescriptionNotIn(vs ...string) predicate.Contact {
	return predicate.Contact(sql.FieldNotIn(FieldContactDescription, vs...))
}

// ContactDescriptionGT applies the GT predicate on the "contact_description" field.
func ContactDescriptionGT(v string) predicate.Contact {
	return predicate.Contact(sql.FieldGT(FieldContactDescription, v))
}

// ContactDescriptionGTE applies the GTE predicate on the "contact_description" field.
func ContactDescriptionGTE(v string) predicate.Contact {
	return predicate.Contact(sql.FieldGTE(FieldContactDescription, v))
}

// ContactDescriptionLT applies the LT predicate on the "contact_description" field.
func ContactDescriptionLT(v string) predicate.Contact {
	return predicate.Contact(sql.FieldLT(FieldContactDescription, v))
}

// ContactDescriptionLTE applies the LTE predicate on the "contact_description" field.
func ContactDescriptionLTE(v string) predicate.Contact {
	return predicate.Contact(sql.FieldLTE(FieldContactDescription, v))
}

// ContactDescriptionContains applies the Contains predicate on the "contact_description" field.
func ContactDescriptionContains(v string) predicate.Contact {
	return predicate.Contact(sql.FieldContains(FieldContactDescription, v))
}

// ContactDescriptionHasPrefix applies the HasPrefix predicate on the "contact_description" field.
func ContactDescriptionHasPrefix(v string) predicate.Contact {
	return predicate.Contact(sql.FieldHasPrefix(FieldContactDescription, v))
}

// ContactDescriptionHasSuffix applies the HasSuffix predicate on the "contact_description" field.
func ContactDescriptionHasSuffix(v string) predicate.Contact {
	return predicate.Contact(sql.FieldHasSuffix(FieldContactDescription, v))
}

// ContactDescriptionIsNil applies the IsNil predicate on the "contact_description" field.
func ContactDescriptionIsNil() predicate.Contact {
	return predicate.Contact(sql.FieldIsNull(FieldContactDescription))
}

// ContactDescriptionNotNil applies the NotNil predicate on the "contact_description" field.
func ContactDescriptionNotNil() predicate.Contact {
	return predicate.Contact(sql.FieldNotNull(FieldContactDescription))
}

// ContactDescriptionEqualFold applies the EqualFold predicate on the "contact_description" field.
func ContactDescriptionEqualFold(v string) predicate.Contact {
	return predicate.Contact(sql.FieldEqualFold(FieldContactDescription, v))
}

// ContactDescriptionContainsFold applies the ContainsFold predicate on the "contact_description" field.
func ContactDescriptionContainsFold(v string) predicate.Contact {
	return predicate.Contact(sql.FieldContainsFold(FieldContactDescription, v))
}

// ContactDetailsEQ applies the EQ predicate on the "contact_details" field.
func ContactDetailsEQ(v string) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldContactDetails, v))
}

// ContactDetailsNEQ applies the NEQ predicate on the "contact_details" field.
func ContactDetailsNEQ(v string) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldContactDetails, v))
}

// ContactDetailsIn applies the In predicate on the "contact_details" field.
func ContactDetailsIn(vs ...string) predicate.Contact {
	return predicate.Contact(sql.FieldIn(FieldContactDetails, vs...))
}

// ContactDetailsNotIn applies the NotIn predicate on the "contact_details" field.
func ContactDetailsNotIn(vs ...string) predicate.Contact {
	return predicate.Contact(sql.FieldNotIn(FieldContactDetails, vs...))
}

// ContactDetailsGT applies the GT predicate on the "contact_details" field.
func ContactDetailsGT(v string) predicate.Contact {
	return predicate.Contact(sql.FieldGT(FieldContactDetails, v))
}

// ContactDetailsGTE applies the GTE predicate on the "contact_details" field.
func ContactDetailsGTE(v string) predicate.Contact {
	return predicate.Contact(sql.FieldGTE(FieldContactDetails, v))
}

// ContactDetailsLT applies the LT predicate on the "contact_details" field.
func ContactDetailsLT(v string) predicate.Contact {
	return predicate.Contact(sql.FieldLT(FieldContactDetails, v))
}

// ContactDetailsLTE applies the LTE predicate on the "contact_details" field.
func ContactDetailsLTE(v string) predicate.Contact {
	return predicate.Contact(sql.FieldLTE(FieldContactDetails, v))
}

// ContactDetailsContains applies the Contains predicate on the "contact_details" field.
func ContactDetailsContains(v string) predicate.Contact {
	return predicate.Contact(sql.FieldContains(FieldContactDetails, v))
}

// ContactDetailsHasPrefix applies the HasPrefix predicate on the "contact_details" field.
func ContactDetailsHasPrefix(v string) predicate.Contact {
	return predicate.Contact(sql.FieldHasPrefix(FieldContactDetails, v))
}

// ContactDetailsHasSuffix applies the HasSuffix predicate on the "contact_details" field.
func ContactDetailsHasSuffix(v string) predicate.Contact {
	return predicate.Contact(sql.FieldHasSuffix(FieldContactDetails, v))
}

// ContactDetailsEqualFold applies the EqualFold predicate on the "contact_details" field.
func ContactDetailsEqualFold(v string) predicate.Contact {
	return predicate.Contact(sql.FieldEqualFold(FieldContactDetails, v))
}

// ContactDetailsContainsFold applies the ContainsFold predicate on the "contact_details" field.
func ContactDetailsContainsFold(v string) predicate.Contact {
	return predicate.Contact(sql.FieldContainsFold(FieldContactDetails, v))
}

// ContactTypeEQ applies the EQ predicate on the "contact_type" field.
func ContactTypeEQ(v string) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldContactType, v))
}

// ContactTypeNEQ applies the NEQ predicate on the "contact_type" field.
func ContactTypeNEQ(v string) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldContactType, v))
}

// ContactTypeIn applies the In predicate on the "contact_type" field.
func ContactTypeIn(vs ...string) predicate.Contact {
	return predicate.Contact(sql.FieldIn(FieldContactType, vs...))
}

// ContactTypeNotIn applies the NotIn predicate on the "contact_type" field.
func ContactTypeNotIn(vs ...string) predicate.Contact {
	return predicate.Contact(sql.FieldNotIn(FieldContactType, vs...))
}

// ContactTypeGT applies the GT predicate on the "contact_type" field.
func ContactTypeGT(v string) predicate.Contact {
	return predicate.Contact(sql.FieldGT(FieldContactType, v))
}

// ContactTypeGTE applies the GTE predicate on the "contact_type" field.
func ContactTypeGTE(v string) predicate.Contact {
	return predicate.Contact(sql.FieldGTE(FieldContactType, v))
}

// ContactTypeLT applies the LT predicate on the "contact_type" field.
func ContactTypeLT(v string) predicate.Contact {
	return predicate.Contact(sql.FieldLT(FieldContactType, v))
}

// ContactTypeLTE applies the LTE predicate on the "contact_type" field.
func ContactTypeLTE(v string) predicate.Contact {
	return predicate.Contact(sql.FieldLTE(FieldContactType, v))
}

// ContactTypeContains applies the Contains predicate on the "contact_type" field.
func ContactTypeContains(v string) predicate.Contact {
	return predicate.Contact(sql.FieldContains(FieldContactType, v))
}

// ContactTypeHasPrefix applies the HasPrefix predicate on the "contact_type" field.
func ContactTypeHasPrefix(v string) predicate.Contact {
	return predicate.Contact(sql.FieldHasPrefix(FieldContactType, v))
}

// ContactTypeHasSuffix applies the HasSuffix predicate on the "contact_type" field.
func ContactTypeHasSuffix(v string) predicate.Contact {
	return predicate.Contact(sql.FieldHasSuffix(FieldContactType, v))
}

// ContactTypeIsNil applies the IsNil predicate on the "contact_type" field.
func ContactTypeIsNil() predicate.Contact {
	return predicate.Contact(sql.FieldIsNull(FieldContactType))
}

// ContactTypeNotNil applies the NotNil predicate on the "contact_type" field.
func ContactTypeNotNil() predicate.Contact {
	return predicate.Contact(sql.FieldNotNull(FieldContactType))
}

// ContactTypeEqualFold applies the EqualFold predicate on the "contact_type" field.
func ContactTypeEqualFold(v string) predicate.Contact {
	return predicate.Contact(sql.FieldEqualFold(FieldContactType, v))
}

// ContactTypeContainsFold applies the ContainsFold predicate on the "contact_type" field.
func ContactTypeContainsFold(v string) predicate.Contact {
	return predicate.Contact(sql.FieldContainsFold(FieldContactType, v))
}

// IsPrimaryContactEQ applies the EQ predicate on the "is_primary_contact" field.
func IsPrimaryContactEQ(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldIsPrimaryContact, v))
}

// IsPrimaryContactNEQ applies the NEQ predicate on the "is_primary_contact" field.
func IsPrimaryContactNEQ(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldIsPrimaryContact, v))
}

// IsPrimaryContactIsNil applies the IsNil predicate on the "is_primary_contact" field.
func IsPrimaryContactIsNil() predicate.Contact {
	return predicate.Contact(sql.FieldIsNull(FieldIsPrimaryContact))
}

// IsPrimaryContactNotNil applies the NotNil predicate on the "is_primary_contact" field.
func IsPrimaryContactNotNil() predicate.Contact {
	return predicate.Contact(sql.FieldNotNull(FieldIsPrimaryContact))
}

// Is2faContactEQ applies the EQ predicate on the "is_2fa_contact" field.
func Is2faContactEQ(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldIs2faContact, v))
}

// Is2faContactNEQ applies the NEQ predicate on the "is_2fa_contact" field.
func Is2faContactNEQ(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldIs2faContact, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v int) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v int) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...int) predicate.Contact {
	return predicate.Contact(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...int) predicate.Contact {
	return predicate.Contact(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDIsNil applies the IsNil predicate on the "customer_id" field.
func CustomerIDIsNil() predicate.Contact {
	return predicate.Contact(sql.FieldIsNull(FieldCustomerID))
}

// CustomerIDNotNil applies the NotNil predicate on the "customer_id" field.
func CustomerIDNotNil() predicate.Contact {
	return predicate.Contact(sql.FieldNotNull(FieldCustomerID))
}

// PatientIDEQ applies the EQ predicate on the "patient_id" field.
func PatientIDEQ(v int) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldPatientID, v))
}

// PatientIDNEQ applies the NEQ predicate on the "patient_id" field.
func PatientIDNEQ(v int) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldPatientID, v))
}

// PatientIDIn applies the In predicate on the "patient_id" field.
func PatientIDIn(vs ...int) predicate.Contact {
	return predicate.Contact(sql.FieldIn(FieldPatientID, vs...))
}

// PatientIDNotIn applies the NotIn predicate on the "patient_id" field.
func PatientIDNotIn(vs ...int) predicate.Contact {
	return predicate.Contact(sql.FieldNotIn(FieldPatientID, vs...))
}

// PatientIDIsNil applies the IsNil predicate on the "patient_id" field.
func PatientIDIsNil() predicate.Contact {
	return predicate.Contact(sql.FieldIsNull(FieldPatientID))
}

// PatientIDNotNil applies the NotNil predicate on the "patient_id" field.
func PatientIDNotNil() predicate.Contact {
	return predicate.Contact(sql.FieldNotNull(FieldPatientID))
}

// ClinicIDEQ applies the EQ predicate on the "clinic_id" field.
func ClinicIDEQ(v int) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldClinicID, v))
}

// ClinicIDNEQ applies the NEQ predicate on the "clinic_id" field.
func ClinicIDNEQ(v int) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldClinicID, v))
}

// ClinicIDIn applies the In predicate on the "clinic_id" field.
func ClinicIDIn(vs ...int) predicate.Contact {
	return predicate.Contact(sql.FieldIn(FieldClinicID, vs...))
}

// ClinicIDNotIn applies the NotIn predicate on the "clinic_id" field.
func ClinicIDNotIn(vs ...int) predicate.Contact {
	return predicate.Contact(sql.FieldNotIn(FieldClinicID, vs...))
}

// ClinicIDIsNil applies the IsNil predicate on the "clinic_id" field.
func ClinicIDIsNil() predicate.Contact {
	return predicate.Contact(sql.FieldIsNull(FieldClinicID))
}

// ClinicIDNotNil applies the NotNil predicate on the "clinic_id" field.
func ClinicIDNotNil() predicate.Contact {
	return predicate.Contact(sql.FieldNotNull(FieldClinicID))
}

// InternalUserIDEQ applies the EQ predicate on the "internal_user_id" field.
func InternalUserIDEQ(v int) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldInternalUserID, v))
}

// InternalUserIDNEQ applies the NEQ predicate on the "internal_user_id" field.
func InternalUserIDNEQ(v int) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldInternalUserID, v))
}

// InternalUserIDIn applies the In predicate on the "internal_user_id" field.
func InternalUserIDIn(vs ...int) predicate.Contact {
	return predicate.Contact(sql.FieldIn(FieldInternalUserID, vs...))
}

// InternalUserIDNotIn applies the NotIn predicate on the "internal_user_id" field.
func InternalUserIDNotIn(vs ...int) predicate.Contact {
	return predicate.Contact(sql.FieldNotIn(FieldInternalUserID, vs...))
}

// InternalUserIDIsNil applies the IsNil predicate on the "internal_user_id" field.
func InternalUserIDIsNil() predicate.Contact {
	return predicate.Contact(sql.FieldIsNull(FieldInternalUserID))
}

// InternalUserIDNotNil applies the NotNil predicate on the "internal_user_id" field.
func InternalUserIDNotNil() predicate.Contact {
	return predicate.Contact(sql.FieldNotNull(FieldInternalUserID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Contact {
	return predicate.Contact(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Contact {
	return predicate.Contact(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.Contact {
	return predicate.Contact(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.Contact {
	return predicate.Contact(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.Contact {
	return predicate.Contact(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.Contact {
	return predicate.Contact(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Contact {
	return predicate.Contact(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Contact {
	return predicate.Contact(sql.FieldNotNull(FieldUserID))
}

// ContactLevelEQ applies the EQ predicate on the "contact_level" field.
func ContactLevelEQ(v int) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldContactLevel, v))
}

// ContactLevelNEQ applies the NEQ predicate on the "contact_level" field.
func ContactLevelNEQ(v int) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldContactLevel, v))
}

// ContactLevelIn applies the In predicate on the "contact_level" field.
func ContactLevelIn(vs ...int) predicate.Contact {
	return predicate.Contact(sql.FieldIn(FieldContactLevel, vs...))
}

// ContactLevelNotIn applies the NotIn predicate on the "contact_level" field.
func ContactLevelNotIn(vs ...int) predicate.Contact {
	return predicate.Contact(sql.FieldNotIn(FieldContactLevel, vs...))
}

// ContactLevelGT applies the GT predicate on the "contact_level" field.
func ContactLevelGT(v int) predicate.Contact {
	return predicate.Contact(sql.FieldGT(FieldContactLevel, v))
}

// ContactLevelGTE applies the GTE predicate on the "contact_level" field.
func ContactLevelGTE(v int) predicate.Contact {
	return predicate.Contact(sql.FieldGTE(FieldContactLevel, v))
}

// ContactLevelLT applies the LT predicate on the "contact_level" field.
func ContactLevelLT(v int) predicate.Contact {
	return predicate.Contact(sql.FieldLT(FieldContactLevel, v))
}

// ContactLevelLTE applies the LTE predicate on the "contact_level" field.
func ContactLevelLTE(v int) predicate.Contact {
	return predicate.Contact(sql.FieldLTE(FieldContactLevel, v))
}

// ContactLevelNameEQ applies the EQ predicate on the "contact_level_name" field.
func ContactLevelNameEQ(v string) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldContactLevelName, v))
}

// ContactLevelNameNEQ applies the NEQ predicate on the "contact_level_name" field.
func ContactLevelNameNEQ(v string) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldContactLevelName, v))
}

// ContactLevelNameIn applies the In predicate on the "contact_level_name" field.
func ContactLevelNameIn(vs ...string) predicate.Contact {
	return predicate.Contact(sql.FieldIn(FieldContactLevelName, vs...))
}

// ContactLevelNameNotIn applies the NotIn predicate on the "contact_level_name" field.
func ContactLevelNameNotIn(vs ...string) predicate.Contact {
	return predicate.Contact(sql.FieldNotIn(FieldContactLevelName, vs...))
}

// ContactLevelNameGT applies the GT predicate on the "contact_level_name" field.
func ContactLevelNameGT(v string) predicate.Contact {
	return predicate.Contact(sql.FieldGT(FieldContactLevelName, v))
}

// ContactLevelNameGTE applies the GTE predicate on the "contact_level_name" field.
func ContactLevelNameGTE(v string) predicate.Contact {
	return predicate.Contact(sql.FieldGTE(FieldContactLevelName, v))
}

// ContactLevelNameLT applies the LT predicate on the "contact_level_name" field.
func ContactLevelNameLT(v string) predicate.Contact {
	return predicate.Contact(sql.FieldLT(FieldContactLevelName, v))
}

// ContactLevelNameLTE applies the LTE predicate on the "contact_level_name" field.
func ContactLevelNameLTE(v string) predicate.Contact {
	return predicate.Contact(sql.FieldLTE(FieldContactLevelName, v))
}

// ContactLevelNameContains applies the Contains predicate on the "contact_level_name" field.
func ContactLevelNameContains(v string) predicate.Contact {
	return predicate.Contact(sql.FieldContains(FieldContactLevelName, v))
}

// ContactLevelNameHasPrefix applies the HasPrefix predicate on the "contact_level_name" field.
func ContactLevelNameHasPrefix(v string) predicate.Contact {
	return predicate.Contact(sql.FieldHasPrefix(FieldContactLevelName, v))
}

// ContactLevelNameHasSuffix applies the HasSuffix predicate on the "contact_level_name" field.
func ContactLevelNameHasSuffix(v string) predicate.Contact {
	return predicate.Contact(sql.FieldHasSuffix(FieldContactLevelName, v))
}

// ContactLevelNameEqualFold applies the EqualFold predicate on the "contact_level_name" field.
func ContactLevelNameEqualFold(v string) predicate.Contact {
	return predicate.Contact(sql.FieldEqualFold(FieldContactLevelName, v))
}

// ContactLevelNameContainsFold applies the ContainsFold predicate on the "contact_level_name" field.
func ContactLevelNameContainsFold(v string) predicate.Contact {
	return predicate.Contact(sql.FieldContainsFold(FieldContactLevelName, v))
}

// GroupContactIDEQ applies the EQ predicate on the "group_contact_id" field.
func GroupContactIDEQ(v int) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldGroupContactID, v))
}

// GroupContactIDNEQ applies the NEQ predicate on the "group_contact_id" field.
func GroupContactIDNEQ(v int) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldGroupContactID, v))
}

// GroupContactIDIn applies the In predicate on the "group_contact_id" field.
func GroupContactIDIn(vs ...int) predicate.Contact {
	return predicate.Contact(sql.FieldIn(FieldGroupContactID, vs...))
}

// GroupContactIDNotIn applies the NotIn predicate on the "group_contact_id" field.
func GroupContactIDNotIn(vs ...int) predicate.Contact {
	return predicate.Contact(sql.FieldNotIn(FieldGroupContactID, vs...))
}

// GroupContactIDIsNil applies the IsNil predicate on the "group_contact_id" field.
func GroupContactIDIsNil() predicate.Contact {
	return predicate.Contact(sql.FieldIsNull(FieldGroupContactID))
}

// GroupContactIDNotNil applies the NotNil predicate on the "group_contact_id" field.
func GroupContactIDNotNil() predicate.Contact {
	return predicate.Contact(sql.FieldNotNull(FieldGroupContactID))
}

// ApplyToAllGroupMemberEQ applies the EQ predicate on the "apply_to_all_group_member" field.
func ApplyToAllGroupMemberEQ(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldApplyToAllGroupMember, v))
}

// ApplyToAllGroupMemberNEQ applies the NEQ predicate on the "apply_to_all_group_member" field.
func ApplyToAllGroupMemberNEQ(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldApplyToAllGroupMember, v))
}

// IsGroupContactEQ applies the EQ predicate on the "is_group_contact" field.
func IsGroupContactEQ(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldIsGroupContact, v))
}

// IsGroupContactNEQ applies the NEQ predicate on the "is_group_contact" field.
func IsGroupContactNEQ(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldIsGroupContact, v))
}

// UseAsDefaultCreateContactEQ applies the EQ predicate on the "use_as_default_create_contact" field.
func UseAsDefaultCreateContactEQ(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldUseAsDefaultCreateContact, v))
}

// UseAsDefaultCreateContactNEQ applies the NEQ predicate on the "use_as_default_create_contact" field.
func UseAsDefaultCreateContactNEQ(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldUseAsDefaultCreateContact, v))
}

// UseGroupContactEQ applies the EQ predicate on the "use_group_contact" field.
func UseGroupContactEQ(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldEQ(FieldUseGroupContact, v))
}

// UseGroupContactNEQ applies the NEQ predicate on the "use_group_contact" field.
func UseGroupContactNEQ(v bool) predicate.Contact {
	return predicate.Contact(sql.FieldNEQ(FieldUseGroupContact, v))
}

// UseGroupContactIsNil applies the IsNil predicate on the "use_group_contact" field.
func UseGroupContactIsNil() predicate.Contact {
	return predicate.Contact(sql.FieldIsNull(FieldUseGroupContact))
}

// UseGroupContactNotNil applies the NotNil predicate on the "use_group_contact" field.
func UseGroupContactNotNil() predicate.Contact {
	return predicate.Contact(sql.FieldNotNull(FieldUseGroupContact))
}

// HasClinic applies the HasEdge predicate on the "clinic" edge.
func HasClinic() predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicWith applies the HasEdge predicate on the "clinic" edge with a given conditions (other predicates).
func HasClinicWith(preds ...predicate.Clinic) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		step := newClinicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		step := newPatientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomerClinicMappings applies the HasEdge predicate on the "customer_clinic_mappings" edge.
func HasCustomerClinicMappings() predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CustomerClinicMappingsTable, CustomerClinicMappingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerClinicMappingsWith applies the HasEdge predicate on the "customer_clinic_mappings" edge with a given conditions (other predicates).
func HasCustomerClinicMappingsWith(preds ...predicate.CustomerContactOnClinics) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		step := newCustomerClinicMappingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMemberContacts applies the HasEdge predicate on the "member_contacts" edge.
func HasMemberContacts() predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, MemberContactsTable, MemberContactsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberContactsWith applies the HasEdge predicate on the "member_contacts" edge with a given conditions (other predicates).
func HasMemberContactsWith(preds ...predicate.Contact) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		step := newMemberContactsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroupContact applies the HasEdge predicate on the "group_contact" edge.
func HasGroupContact() predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, GroupContactTable, GroupContactColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupContactWith applies the HasEdge predicate on the "group_contact" edge with a given conditions (other predicates).
func HasGroupContactWith(preds ...predicate.Contact) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		step := newGroupContactStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInternalUser applies the HasEdge predicate on the "internal_user" edge.
func HasInternalUser() predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InternalUserTable, InternalUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInternalUserWith applies the HasEdge predicate on the "internal_user" edge with a given conditions (other predicates).
func HasInternalUserWith(preds ...predicate.InternalUser) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		step := newInternalUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.OrderInfo) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		step := newOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Contact) predicate.Contact {
	return predicate.Contact(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Contact) predicate.Contact {
	return predicate.Contact(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Contact) predicate.Contact {
	return predicate.Contact(sql.NotPredicates(p))
}
