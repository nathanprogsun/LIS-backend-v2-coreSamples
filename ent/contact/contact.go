// Code generated by ent, DO NOT EDIT.

package contact

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the contact type in the database.
	Label = "contact"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "contact_id"
	// FieldContactDescription holds the string denoting the contact_description field in the database.
	FieldContactDescription = "contact_description"
	// FieldContactDetails holds the string denoting the contact_details field in the database.
	FieldContactDetails = "contact_details"
	// FieldContactType holds the string denoting the contact_type field in the database.
	FieldContactType = "contact_type"
	// FieldIsPrimaryContact holds the string denoting the is_primary_contact field in the database.
	FieldIsPrimaryContact = "is_primary_contact"
	// FieldIs2faContact holds the string denoting the is_2fa_contact field in the database.
	FieldIs2faContact = "is_2fa_contact"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldPatientID holds the string denoting the patient_id field in the database.
	FieldPatientID = "patient_id"
	// FieldClinicID holds the string denoting the clinic_id field in the database.
	FieldClinicID = "clinic_id"
	// FieldInternalUserID holds the string denoting the internal_user_id field in the database.
	FieldInternalUserID = "internal_user_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldContactLevel holds the string denoting the contact_level field in the database.
	FieldContactLevel = "contact_level"
	// FieldContactLevelName holds the string denoting the contact_level_name field in the database.
	FieldContactLevelName = "contact_level_name"
	// FieldGroupContactID holds the string denoting the group_contact_id field in the database.
	FieldGroupContactID = "group_contact_id"
	// FieldApplyToAllGroupMember holds the string denoting the apply_to_all_group_member field in the database.
	FieldApplyToAllGroupMember = "applyToAllGroupMember"
	// FieldIsGroupContact holds the string denoting the is_group_contact field in the database.
	FieldIsGroupContact = "isGroupContact"
	// FieldUseAsDefaultCreateContact holds the string denoting the use_as_default_create_contact field in the database.
	FieldUseAsDefaultCreateContact = "useAsDefaultCreateContact"
	// FieldUseGroupContact holds the string denoting the use_group_contact field in the database.
	FieldUseGroupContact = "useGroupContact"
	// EdgeClinic holds the string denoting the clinic edge name in mutations.
	EdgeClinic = "clinic"
	// EdgePatient holds the string denoting the patient edge name in mutations.
	EdgePatient = "patient"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeCustomerClinicMappings holds the string denoting the customer_clinic_mappings edge name in mutations.
	EdgeCustomerClinicMappings = "customer_clinic_mappings"
	// EdgeMemberContacts holds the string denoting the member_contacts edge name in mutations.
	EdgeMemberContacts = "member_contacts"
	// EdgeGroupContact holds the string denoting the group_contact edge name in mutations.
	EdgeGroupContact = "group_contact"
	// EdgeInternalUser holds the string denoting the internal_user edge name in mutations.
	EdgeInternalUser = "internal_user"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// ClinicFieldID holds the string denoting the ID field of the Clinic.
	ClinicFieldID = "clinic_id"
	// PatientFieldID holds the string denoting the ID field of the Patient.
	PatientFieldID = "patient_id"
	// CustomerFieldID holds the string denoting the ID field of the Customer.
	CustomerFieldID = "customer_id"
	// CustomerContactOnClinicsFieldID holds the string denoting the ID field of the CustomerContactOnClinics.
	CustomerContactOnClinicsFieldID = "id"
	// InternalUserFieldID holds the string denoting the ID field of the InternalUser.
	InternalUserFieldID = "internal_user_id"
	// OrderInfoFieldID holds the string denoting the ID field of the OrderInfo.
	OrderInfoFieldID = "order_id"
	// Table holds the table name of the contact in the database.
	Table = "contact"
	// ClinicTable is the table that holds the clinic relation/edge.
	ClinicTable = "contact"
	// ClinicInverseTable is the table name for the Clinic entity.
	// It exists in this package in order to avoid circular dependency with the "clinic" package.
	ClinicInverseTable = "clinic"
	// ClinicColumn is the table column denoting the clinic relation/edge.
	ClinicColumn = "clinic_id"
	// PatientTable is the table that holds the patient relation/edge.
	PatientTable = "contact"
	// PatientInverseTable is the table name for the Patient entity.
	// It exists in this package in order to avoid circular dependency with the "patient" package.
	PatientInverseTable = "patient"
	// PatientColumn is the table column denoting the patient relation/edge.
	PatientColumn = "patient_id"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "contact"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customer"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_id"
	// CustomerClinicMappingsTable is the table that holds the customer_clinic_mappings relation/edge.
	CustomerClinicMappingsTable = "customer_contact_on_clinics"
	// CustomerClinicMappingsInverseTable is the table name for the CustomerContactOnClinics entity.
	// It exists in this package in order to avoid circular dependency with the "customercontactonclinics" package.
	CustomerClinicMappingsInverseTable = "customer_contact_on_clinics"
	// CustomerClinicMappingsColumn is the table column denoting the customer_clinic_mappings relation/edge.
	CustomerClinicMappingsColumn = "contact_id"
	// MemberContactsTable is the table that holds the member_contacts relation/edge.
	MemberContactsTable = "contact"
	// MemberContactsColumn is the table column denoting the member_contacts relation/edge.
	MemberContactsColumn = "group_contact_id"
	// GroupContactTable is the table that holds the group_contact relation/edge.
	GroupContactTable = "contact"
	// GroupContactColumn is the table column denoting the group_contact relation/edge.
	GroupContactColumn = "group_contact_id"
	// InternalUserTable is the table that holds the internal_user relation/edge.
	InternalUserTable = "contact"
	// InternalUserInverseTable is the table name for the InternalUser entity.
	// It exists in this package in order to avoid circular dependency with the "internaluser" package.
	InternalUserInverseTable = "internal_user"
	// InternalUserColumn is the table column denoting the internal_user relation/edge.
	InternalUserColumn = "internal_user_id"
	// OrdersTable is the table that holds the orders relation/edge.
	OrdersTable = "order_info"
	// OrdersInverseTable is the table name for the OrderInfo entity.
	// It exists in this package in order to avoid circular dependency with the "orderinfo" package.
	OrdersInverseTable = "order_info"
	// OrdersColumn is the table column denoting the orders relation/edge.
	OrdersColumn = "contact_id"
)

// Columns holds all SQL columns for contact fields.
var Columns = []string{
	FieldID,
	FieldContactDescription,
	FieldContactDetails,
	FieldContactType,
	FieldIsPrimaryContact,
	FieldIs2faContact,
	FieldCustomerID,
	FieldPatientID,
	FieldClinicID,
	FieldInternalUserID,
	FieldUserID,
	FieldContactLevel,
	FieldContactLevelName,
	FieldGroupContactID,
	FieldApplyToAllGroupMember,
	FieldIsGroupContact,
	FieldUseAsDefaultCreateContact,
	FieldUseGroupContact,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsPrimaryContact holds the default value on creation for the "is_primary_contact" field.
	DefaultIsPrimaryContact bool
	// DefaultIs2faContact holds the default value on creation for the "is_2fa_contact" field.
	DefaultIs2faContact bool
	// DefaultContactLevel holds the default value on creation for the "contact_level" field.
	DefaultContactLevel int
	// DefaultContactLevelName holds the default value on creation for the "contact_level_name" field.
	DefaultContactLevelName string
	// DefaultApplyToAllGroupMember holds the default value on creation for the "apply_to_all_group_member" field.
	DefaultApplyToAllGroupMember bool
	// DefaultIsGroupContact holds the default value on creation for the "is_group_contact" field.
	DefaultIsGroupContact bool
	// DefaultUseAsDefaultCreateContact holds the default value on creation for the "use_as_default_create_contact" field.
	DefaultUseAsDefaultCreateContact bool
	// DefaultUseGroupContact holds the default value on creation for the "use_group_contact" field.
	DefaultUseGroupContact bool
)

// OrderOption defines the ordering options for the Contact queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByContactDescription orders the results by the contact_description field.
func ByContactDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactDescription, opts...).ToFunc()
}

// ByContactDetails orders the results by the contact_details field.
func ByContactDetails(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactDetails, opts...).ToFunc()
}

// ByContactType orders the results by the contact_type field.
func ByContactType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactType, opts...).ToFunc()
}

// ByIsPrimaryContact orders the results by the is_primary_contact field.
func ByIsPrimaryContact(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPrimaryContact, opts...).ToFunc()
}

// ByIs2faContact orders the results by the is_2fa_contact field.
func ByIs2faContact(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIs2faContact, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByPatientID orders the results by the patient_id field.
func ByPatientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientID, opts...).ToFunc()
}

// ByClinicID orders the results by the clinic_id field.
func ByClinicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClinicID, opts...).ToFunc()
}

// ByInternalUserID orders the results by the internal_user_id field.
func ByInternalUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalUserID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByContactLevel orders the results by the contact_level field.
func ByContactLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactLevel, opts...).ToFunc()
}

// ByContactLevelName orders the results by the contact_level_name field.
func ByContactLevelName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactLevelName, opts...).ToFunc()
}

// ByGroupContactID orders the results by the group_contact_id field.
func ByGroupContactID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupContactID, opts...).ToFunc()
}

// ByApplyToAllGroupMember orders the results by the apply_to_all_group_member field.
func ByApplyToAllGroupMember(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplyToAllGroupMember, opts...).ToFunc()
}

// ByIsGroupContact orders the results by the is_group_contact field.
func ByIsGroupContact(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsGroupContact, opts...).ToFunc()
}

// ByUseAsDefaultCreateContact orders the results by the use_as_default_create_contact field.
func ByUseAsDefaultCreateContact(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseAsDefaultCreateContact, opts...).ToFunc()
}

// ByUseGroupContact orders the results by the use_group_contact field.
func ByUseGroupContact(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseGroupContact, opts...).ToFunc()
}

// ByClinicField orders the results by clinic field.
func ByClinicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicStep(), sql.OrderByField(field, opts...))
	}
}

// ByPatientField orders the results by patient field.
func ByPatientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPatientStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomerClinicMappingsCount orders the results by customer_clinic_mappings count.
func ByCustomerClinicMappingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCustomerClinicMappingsStep(), opts...)
	}
}

// ByCustomerClinicMappings orders the results by customer_clinic_mappings terms.
func ByCustomerClinicMappings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerClinicMappingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMemberContactsCount orders the results by member_contacts count.
func ByMemberContactsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberContactsStep(), opts...)
	}
}

// ByMemberContacts orders the results by member_contacts terms.
func ByMemberContacts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberContactsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupContactField orders the results by group_contact field.
func ByGroupContactField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupContactStep(), sql.OrderByField(field, opts...))
	}
}

// ByInternalUserField orders the results by internal_user field.
func ByInternalUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInternalUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrdersCount orders the results by orders count.
func ByOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrdersStep(), opts...)
	}
}

// ByOrders orders the results by orders terms.
func ByOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newClinicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicInverseTable, ClinicFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
	)
}
func newPatientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PatientInverseTable, PatientFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
	)
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, CustomerFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
	)
}
func newCustomerClinicMappingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerClinicMappingsInverseTable, CustomerContactOnClinicsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CustomerClinicMappingsTable, CustomerClinicMappingsColumn),
	)
}
func newMemberContactsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MemberContactsTable, MemberContactsColumn),
	)
}
func newGroupContactStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, GroupContactTable, GroupContactColumn),
	)
}
func newInternalUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InternalUserInverseTable, InternalUserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InternalUserTable, InternalUserColumn),
	)
}
func newOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrdersInverseTable, OrderInfoFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
	)
}
