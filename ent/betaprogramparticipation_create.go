// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/betaprogram"
	"coresamples/ent/betaprogramparticipation"
	"coresamples/ent/clinic"
	"coresamples/ent/customer"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BetaProgramParticipationCreate is the builder for creating a BetaProgramParticipation entity.
type BetaProgramParticipationCreate struct {
	config
	mutation *BetaProgramParticipationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetBetaProgramID sets the "beta_program_id" field.
func (bppc *BetaProgramParticipationCreate) SetBetaProgramID(i int) *BetaProgramParticipationCreate {
	bppc.mutation.SetBetaProgramID(i)
	return bppc
}

// SetCustomerID sets the "customer_id" field.
func (bppc *BetaProgramParticipationCreate) SetCustomerID(i int) *BetaProgramParticipationCreate {
	bppc.mutation.SetCustomerID(i)
	return bppc
}

// SetClinicID sets the "clinic_id" field.
func (bppc *BetaProgramParticipationCreate) SetClinicID(i int) *BetaProgramParticipationCreate {
	bppc.mutation.SetClinicID(i)
	return bppc
}

// SetIsActive sets the "is_active" field.
func (bppc *BetaProgramParticipationCreate) SetIsActive(b bool) *BetaProgramParticipationCreate {
	bppc.mutation.SetIsActive(b)
	return bppc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (bppc *BetaProgramParticipationCreate) SetNillableIsActive(b *bool) *BetaProgramParticipationCreate {
	if b != nil {
		bppc.SetIsActive(*b)
	}
	return bppc
}

// SetHasModifiedStartTime sets the "has_modified_start_time" field.
func (bppc *BetaProgramParticipationCreate) SetHasModifiedStartTime(b bool) *BetaProgramParticipationCreate {
	bppc.mutation.SetHasModifiedStartTime(b)
	return bppc
}

// SetNillableHasModifiedStartTime sets the "has_modified_start_time" field if the given value is not nil.
func (bppc *BetaProgramParticipationCreate) SetNillableHasModifiedStartTime(b *bool) *BetaProgramParticipationCreate {
	if b != nil {
		bppc.SetHasModifiedStartTime(*b)
	}
	return bppc
}

// SetModifiedStartTime sets the "modified_start_time" field.
func (bppc *BetaProgramParticipationCreate) SetModifiedStartTime(t time.Time) *BetaProgramParticipationCreate {
	bppc.mutation.SetModifiedStartTime(t)
	return bppc
}

// SetNillableModifiedStartTime sets the "modified_start_time" field if the given value is not nil.
func (bppc *BetaProgramParticipationCreate) SetNillableModifiedStartTime(t *time.Time) *BetaProgramParticipationCreate {
	if t != nil {
		bppc.SetModifiedStartTime(*t)
	}
	return bppc
}

// SetModifiedEndTime sets the "modified_end_time" field.
func (bppc *BetaProgramParticipationCreate) SetModifiedEndTime(t time.Time) *BetaProgramParticipationCreate {
	bppc.mutation.SetModifiedEndTime(t)
	return bppc
}

// SetNillableModifiedEndTime sets the "modified_end_time" field if the given value is not nil.
func (bppc *BetaProgramParticipationCreate) SetNillableModifiedEndTime(t *time.Time) *BetaProgramParticipationCreate {
	if t != nil {
		bppc.SetModifiedEndTime(*t)
	}
	return bppc
}

// SetID sets the "id" field.
func (bppc *BetaProgramParticipationCreate) SetID(i int) *BetaProgramParticipationCreate {
	bppc.mutation.SetID(i)
	return bppc
}

// SetBetaProgram sets the "beta_program" edge to the BetaProgram entity.
func (bppc *BetaProgramParticipationCreate) SetBetaProgram(b *BetaProgram) *BetaProgramParticipationCreate {
	return bppc.SetBetaProgramID(b.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (bppc *BetaProgramParticipationCreate) SetCustomer(c *Customer) *BetaProgramParticipationCreate {
	return bppc.SetCustomerID(c.ID)
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (bppc *BetaProgramParticipationCreate) SetClinic(c *Clinic) *BetaProgramParticipationCreate {
	return bppc.SetClinicID(c.ID)
}

// Mutation returns the BetaProgramParticipationMutation object of the builder.
func (bppc *BetaProgramParticipationCreate) Mutation() *BetaProgramParticipationMutation {
	return bppc.mutation
}

// Save creates the BetaProgramParticipation in the database.
func (bppc *BetaProgramParticipationCreate) Save(ctx context.Context) (*BetaProgramParticipation, error) {
	bppc.defaults()
	return withHooks(ctx, bppc.sqlSave, bppc.mutation, bppc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bppc *BetaProgramParticipationCreate) SaveX(ctx context.Context) *BetaProgramParticipation {
	v, err := bppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bppc *BetaProgramParticipationCreate) Exec(ctx context.Context) error {
	_, err := bppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bppc *BetaProgramParticipationCreate) ExecX(ctx context.Context) {
	if err := bppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bppc *BetaProgramParticipationCreate) defaults() {
	if _, ok := bppc.mutation.IsActive(); !ok {
		v := betaprogramparticipation.DefaultIsActive
		bppc.mutation.SetIsActive(v)
	}
	if _, ok := bppc.mutation.HasModifiedStartTime(); !ok {
		v := betaprogramparticipation.DefaultHasModifiedStartTime
		bppc.mutation.SetHasModifiedStartTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bppc *BetaProgramParticipationCreate) check() error {
	if _, ok := bppc.mutation.BetaProgramID(); !ok {
		return &ValidationError{Name: "beta_program_id", err: errors.New(`ent: missing required field "BetaProgramParticipation.beta_program_id"`)}
	}
	if _, ok := bppc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "BetaProgramParticipation.customer_id"`)}
	}
	if _, ok := bppc.mutation.ClinicID(); !ok {
		return &ValidationError{Name: "clinic_id", err: errors.New(`ent: missing required field "BetaProgramParticipation.clinic_id"`)}
	}
	if _, ok := bppc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "BetaProgramParticipation.is_active"`)}
	}
	if _, ok := bppc.mutation.HasModifiedStartTime(); !ok {
		return &ValidationError{Name: "has_modified_start_time", err: errors.New(`ent: missing required field "BetaProgramParticipation.has_modified_start_time"`)}
	}
	if _, ok := bppc.mutation.BetaProgramID(); !ok {
		return &ValidationError{Name: "beta_program", err: errors.New(`ent: missing required edge "BetaProgramParticipation.beta_program"`)}
	}
	if _, ok := bppc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "BetaProgramParticipation.customer"`)}
	}
	if _, ok := bppc.mutation.ClinicID(); !ok {
		return &ValidationError{Name: "clinic", err: errors.New(`ent: missing required edge "BetaProgramParticipation.clinic"`)}
	}
	return nil
}

func (bppc *BetaProgramParticipationCreate) sqlSave(ctx context.Context) (*BetaProgramParticipation, error) {
	if err := bppc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	bppc.mutation.id = &_node.ID
	bppc.mutation.done = true
	return _node, nil
}

func (bppc *BetaProgramParticipationCreate) createSpec() (*BetaProgramParticipation, *sqlgraph.CreateSpec) {
	var (
		_node = &BetaProgramParticipation{config: bppc.config}
		_spec = sqlgraph.NewCreateSpec(betaprogramparticipation.Table, sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bppc.conflict
	if id, ok := bppc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bppc.mutation.IsActive(); ok {
		_spec.SetField(betaprogramparticipation.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := bppc.mutation.HasModifiedStartTime(); ok {
		_spec.SetField(betaprogramparticipation.FieldHasModifiedStartTime, field.TypeBool, value)
		_node.HasModifiedStartTime = value
	}
	if value, ok := bppc.mutation.ModifiedStartTime(); ok {
		_spec.SetField(betaprogramparticipation.FieldModifiedStartTime, field.TypeTime, value)
		_node.ModifiedStartTime = &value
	}
	if value, ok := bppc.mutation.ModifiedEndTime(); ok {
		_spec.SetField(betaprogramparticipation.FieldModifiedEndTime, field.TypeTime, value)
		_node.ModifiedEndTime = &value
	}
	if nodes := bppc.mutation.BetaProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   betaprogramparticipation.BetaProgramTable,
			Columns: []string{betaprogramparticipation.BetaProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogram.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BetaProgramID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bppc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   betaprogramparticipation.CustomerTable,
			Columns: []string{betaprogramparticipation.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bppc.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   betaprogramparticipation.ClinicTable,
			Columns: []string{betaprogramparticipation.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClinicID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BetaProgramParticipation.Create().
//		SetBetaProgramID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BetaProgramParticipationUpsert) {
//			SetBetaProgramID(v+v).
//		}).
//		Exec(ctx)
func (bppc *BetaProgramParticipationCreate) OnConflict(opts ...sql.ConflictOption) *BetaProgramParticipationUpsertOne {
	bppc.conflict = opts
	return &BetaProgramParticipationUpsertOne{
		create: bppc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BetaProgramParticipation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bppc *BetaProgramParticipationCreate) OnConflictColumns(columns ...string) *BetaProgramParticipationUpsertOne {
	bppc.conflict = append(bppc.conflict, sql.ConflictColumns(columns...))
	return &BetaProgramParticipationUpsertOne{
		create: bppc,
	}
}

type (
	// BetaProgramParticipationUpsertOne is the builder for "upsert"-ing
	//  one BetaProgramParticipation node.
	BetaProgramParticipationUpsertOne struct {
		create *BetaProgramParticipationCreate
	}

	// BetaProgramParticipationUpsert is the "OnConflict" setter.
	BetaProgramParticipationUpsert struct {
		*sql.UpdateSet
	}
)

// SetBetaProgramID sets the "beta_program_id" field.
func (u *BetaProgramParticipationUpsert) SetBetaProgramID(v int) *BetaProgramParticipationUpsert {
	u.Set(betaprogramparticipation.FieldBetaProgramID, v)
	return u
}

// UpdateBetaProgramID sets the "beta_program_id" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsert) UpdateBetaProgramID() *BetaProgramParticipationUpsert {
	u.SetExcluded(betaprogramparticipation.FieldBetaProgramID)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *BetaProgramParticipationUpsert) SetCustomerID(v int) *BetaProgramParticipationUpsert {
	u.Set(betaprogramparticipation.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsert) UpdateCustomerID() *BetaProgramParticipationUpsert {
	u.SetExcluded(betaprogramparticipation.FieldCustomerID)
	return u
}

// SetClinicID sets the "clinic_id" field.
func (u *BetaProgramParticipationUpsert) SetClinicID(v int) *BetaProgramParticipationUpsert {
	u.Set(betaprogramparticipation.FieldClinicID, v)
	return u
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsert) UpdateClinicID() *BetaProgramParticipationUpsert {
	u.SetExcluded(betaprogramparticipation.FieldClinicID)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *BetaProgramParticipationUpsert) SetIsActive(v bool) *BetaProgramParticipationUpsert {
	u.Set(betaprogramparticipation.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsert) UpdateIsActive() *BetaProgramParticipationUpsert {
	u.SetExcluded(betaprogramparticipation.FieldIsActive)
	return u
}

// SetHasModifiedStartTime sets the "has_modified_start_time" field.
func (u *BetaProgramParticipationUpsert) SetHasModifiedStartTime(v bool) *BetaProgramParticipationUpsert {
	u.Set(betaprogramparticipation.FieldHasModifiedStartTime, v)
	return u
}

// UpdateHasModifiedStartTime sets the "has_modified_start_time" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsert) UpdateHasModifiedStartTime() *BetaProgramParticipationUpsert {
	u.SetExcluded(betaprogramparticipation.FieldHasModifiedStartTime)
	return u
}

// SetModifiedStartTime sets the "modified_start_time" field.
func (u *BetaProgramParticipationUpsert) SetModifiedStartTime(v time.Time) *BetaProgramParticipationUpsert {
	u.Set(betaprogramparticipation.FieldModifiedStartTime, v)
	return u
}

// UpdateModifiedStartTime sets the "modified_start_time" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsert) UpdateModifiedStartTime() *BetaProgramParticipationUpsert {
	u.SetExcluded(betaprogramparticipation.FieldModifiedStartTime)
	return u
}

// ClearModifiedStartTime clears the value of the "modified_start_time" field.
func (u *BetaProgramParticipationUpsert) ClearModifiedStartTime() *BetaProgramParticipationUpsert {
	u.SetNull(betaprogramparticipation.FieldModifiedStartTime)
	return u
}

// SetModifiedEndTime sets the "modified_end_time" field.
func (u *BetaProgramParticipationUpsert) SetModifiedEndTime(v time.Time) *BetaProgramParticipationUpsert {
	u.Set(betaprogramparticipation.FieldModifiedEndTime, v)
	return u
}

// UpdateModifiedEndTime sets the "modified_end_time" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsert) UpdateModifiedEndTime() *BetaProgramParticipationUpsert {
	u.SetExcluded(betaprogramparticipation.FieldModifiedEndTime)
	return u
}

// ClearModifiedEndTime clears the value of the "modified_end_time" field.
func (u *BetaProgramParticipationUpsert) ClearModifiedEndTime() *BetaProgramParticipationUpsert {
	u.SetNull(betaprogramparticipation.FieldModifiedEndTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BetaProgramParticipation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(betaprogramparticipation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BetaProgramParticipationUpsertOne) UpdateNewValues() *BetaProgramParticipationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(betaprogramparticipation.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BetaProgramParticipation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BetaProgramParticipationUpsertOne) Ignore() *BetaProgramParticipationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BetaProgramParticipationUpsertOne) DoNothing() *BetaProgramParticipationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BetaProgramParticipationCreate.OnConflict
// documentation for more info.
func (u *BetaProgramParticipationUpsertOne) Update(set func(*BetaProgramParticipationUpsert)) *BetaProgramParticipationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BetaProgramParticipationUpsert{UpdateSet: update})
	}))
	return u
}

// SetBetaProgramID sets the "beta_program_id" field.
func (u *BetaProgramParticipationUpsertOne) SetBetaProgramID(v int) *BetaProgramParticipationUpsertOne {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.SetBetaProgramID(v)
	})
}

// UpdateBetaProgramID sets the "beta_program_id" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsertOne) UpdateBetaProgramID() *BetaProgramParticipationUpsertOne {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.UpdateBetaProgramID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *BetaProgramParticipationUpsertOne) SetCustomerID(v int) *BetaProgramParticipationUpsertOne {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsertOne) UpdateCustomerID() *BetaProgramParticipationUpsertOne {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.UpdateCustomerID()
	})
}

// SetClinicID sets the "clinic_id" field.
func (u *BetaProgramParticipationUpsertOne) SetClinicID(v int) *BetaProgramParticipationUpsertOne {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.SetClinicID(v)
	})
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsertOne) UpdateClinicID() *BetaProgramParticipationUpsertOne {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.UpdateClinicID()
	})
}

// SetIsActive sets the "is_active" field.
func (u *BetaProgramParticipationUpsertOne) SetIsActive(v bool) *BetaProgramParticipationUpsertOne {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsertOne) UpdateIsActive() *BetaProgramParticipationUpsertOne {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.UpdateIsActive()
	})
}

// SetHasModifiedStartTime sets the "has_modified_start_time" field.
func (u *BetaProgramParticipationUpsertOne) SetHasModifiedStartTime(v bool) *BetaProgramParticipationUpsertOne {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.SetHasModifiedStartTime(v)
	})
}

// UpdateHasModifiedStartTime sets the "has_modified_start_time" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsertOne) UpdateHasModifiedStartTime() *BetaProgramParticipationUpsertOne {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.UpdateHasModifiedStartTime()
	})
}

// SetModifiedStartTime sets the "modified_start_time" field.
func (u *BetaProgramParticipationUpsertOne) SetModifiedStartTime(v time.Time) *BetaProgramParticipationUpsertOne {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.SetModifiedStartTime(v)
	})
}

// UpdateModifiedStartTime sets the "modified_start_time" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsertOne) UpdateModifiedStartTime() *BetaProgramParticipationUpsertOne {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.UpdateModifiedStartTime()
	})
}

// ClearModifiedStartTime clears the value of the "modified_start_time" field.
func (u *BetaProgramParticipationUpsertOne) ClearModifiedStartTime() *BetaProgramParticipationUpsertOne {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.ClearModifiedStartTime()
	})
}

// SetModifiedEndTime sets the "modified_end_time" field.
func (u *BetaProgramParticipationUpsertOne) SetModifiedEndTime(v time.Time) *BetaProgramParticipationUpsertOne {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.SetModifiedEndTime(v)
	})
}

// UpdateModifiedEndTime sets the "modified_end_time" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsertOne) UpdateModifiedEndTime() *BetaProgramParticipationUpsertOne {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.UpdateModifiedEndTime()
	})
}

// ClearModifiedEndTime clears the value of the "modified_end_time" field.
func (u *BetaProgramParticipationUpsertOne) ClearModifiedEndTime() *BetaProgramParticipationUpsertOne {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.ClearModifiedEndTime()
	})
}

// Exec executes the query.
func (u *BetaProgramParticipationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BetaProgramParticipationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BetaProgramParticipationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BetaProgramParticipationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BetaProgramParticipationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BetaProgramParticipationCreateBulk is the builder for creating many BetaProgramParticipation entities in bulk.
type BetaProgramParticipationCreateBulk struct {
	config
	err      error
	builders []*BetaProgramParticipationCreate
	conflict []sql.ConflictOption
}

// Save creates the BetaProgramParticipation entities in the database.
func (bppcb *BetaProgramParticipationCreateBulk) Save(ctx context.Context) ([]*BetaProgramParticipation, error) {
	if bppcb.err != nil {
		return nil, bppcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bppcb.builders))
	nodes := make([]*BetaProgramParticipation, len(bppcb.builders))
	mutators := make([]Mutator, len(bppcb.builders))
	for i := range bppcb.builders {
		func(i int, root context.Context) {
			builder := bppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BetaProgramParticipationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bppcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bppcb *BetaProgramParticipationCreateBulk) SaveX(ctx context.Context) []*BetaProgramParticipation {
	v, err := bppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bppcb *BetaProgramParticipationCreateBulk) Exec(ctx context.Context) error {
	_, err := bppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bppcb *BetaProgramParticipationCreateBulk) ExecX(ctx context.Context) {
	if err := bppcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BetaProgramParticipation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BetaProgramParticipationUpsert) {
//			SetBetaProgramID(v+v).
//		}).
//		Exec(ctx)
func (bppcb *BetaProgramParticipationCreateBulk) OnConflict(opts ...sql.ConflictOption) *BetaProgramParticipationUpsertBulk {
	bppcb.conflict = opts
	return &BetaProgramParticipationUpsertBulk{
		create: bppcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BetaProgramParticipation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bppcb *BetaProgramParticipationCreateBulk) OnConflictColumns(columns ...string) *BetaProgramParticipationUpsertBulk {
	bppcb.conflict = append(bppcb.conflict, sql.ConflictColumns(columns...))
	return &BetaProgramParticipationUpsertBulk{
		create: bppcb,
	}
}

// BetaProgramParticipationUpsertBulk is the builder for "upsert"-ing
// a bulk of BetaProgramParticipation nodes.
type BetaProgramParticipationUpsertBulk struct {
	create *BetaProgramParticipationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BetaProgramParticipation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(betaprogramparticipation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BetaProgramParticipationUpsertBulk) UpdateNewValues() *BetaProgramParticipationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(betaprogramparticipation.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BetaProgramParticipation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BetaProgramParticipationUpsertBulk) Ignore() *BetaProgramParticipationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BetaProgramParticipationUpsertBulk) DoNothing() *BetaProgramParticipationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BetaProgramParticipationCreateBulk.OnConflict
// documentation for more info.
func (u *BetaProgramParticipationUpsertBulk) Update(set func(*BetaProgramParticipationUpsert)) *BetaProgramParticipationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BetaProgramParticipationUpsert{UpdateSet: update})
	}))
	return u
}

// SetBetaProgramID sets the "beta_program_id" field.
func (u *BetaProgramParticipationUpsertBulk) SetBetaProgramID(v int) *BetaProgramParticipationUpsertBulk {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.SetBetaProgramID(v)
	})
}

// UpdateBetaProgramID sets the "beta_program_id" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsertBulk) UpdateBetaProgramID() *BetaProgramParticipationUpsertBulk {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.UpdateBetaProgramID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *BetaProgramParticipationUpsertBulk) SetCustomerID(v int) *BetaProgramParticipationUpsertBulk {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsertBulk) UpdateCustomerID() *BetaProgramParticipationUpsertBulk {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.UpdateCustomerID()
	})
}

// SetClinicID sets the "clinic_id" field.
func (u *BetaProgramParticipationUpsertBulk) SetClinicID(v int) *BetaProgramParticipationUpsertBulk {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.SetClinicID(v)
	})
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsertBulk) UpdateClinicID() *BetaProgramParticipationUpsertBulk {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.UpdateClinicID()
	})
}

// SetIsActive sets the "is_active" field.
func (u *BetaProgramParticipationUpsertBulk) SetIsActive(v bool) *BetaProgramParticipationUpsertBulk {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsertBulk) UpdateIsActive() *BetaProgramParticipationUpsertBulk {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.UpdateIsActive()
	})
}

// SetHasModifiedStartTime sets the "has_modified_start_time" field.
func (u *BetaProgramParticipationUpsertBulk) SetHasModifiedStartTime(v bool) *BetaProgramParticipationUpsertBulk {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.SetHasModifiedStartTime(v)
	})
}

// UpdateHasModifiedStartTime sets the "has_modified_start_time" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsertBulk) UpdateHasModifiedStartTime() *BetaProgramParticipationUpsertBulk {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.UpdateHasModifiedStartTime()
	})
}

// SetModifiedStartTime sets the "modified_start_time" field.
func (u *BetaProgramParticipationUpsertBulk) SetModifiedStartTime(v time.Time) *BetaProgramParticipationUpsertBulk {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.SetModifiedStartTime(v)
	})
}

// UpdateModifiedStartTime sets the "modified_start_time" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsertBulk) UpdateModifiedStartTime() *BetaProgramParticipationUpsertBulk {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.UpdateModifiedStartTime()
	})
}

// ClearModifiedStartTime clears the value of the "modified_start_time" field.
func (u *BetaProgramParticipationUpsertBulk) ClearModifiedStartTime() *BetaProgramParticipationUpsertBulk {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.ClearModifiedStartTime()
	})
}

// SetModifiedEndTime sets the "modified_end_time" field.
func (u *BetaProgramParticipationUpsertBulk) SetModifiedEndTime(v time.Time) *BetaProgramParticipationUpsertBulk {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.SetModifiedEndTime(v)
	})
}

// UpdateModifiedEndTime sets the "modified_end_time" field to the value that was provided on create.
func (u *BetaProgramParticipationUpsertBulk) UpdateModifiedEndTime() *BetaProgramParticipationUpsertBulk {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.UpdateModifiedEndTime()
	})
}

// ClearModifiedEndTime clears the value of the "modified_end_time" field.
func (u *BetaProgramParticipationUpsertBulk) ClearModifiedEndTime() *BetaProgramParticipationUpsertBulk {
	return u.Update(func(s *BetaProgramParticipationUpsert) {
		s.ClearModifiedEndTime()
	})
}

// Exec executes the query.
func (u *BetaProgramParticipationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BetaProgramParticipationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BetaProgramParticipationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BetaProgramParticipationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
