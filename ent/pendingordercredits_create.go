// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/pendingordercredits"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PendingOrderCreditsCreate is the builder for creating a PendingOrderCredits entity.
type PendingOrderCreditsCreate struct {
	config
	mutation *PendingOrderCreditsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOrderID sets the "order_id" field.
func (pocc *PendingOrderCreditsCreate) SetOrderID(i int64) *PendingOrderCreditsCreate {
	pocc.mutation.SetOrderID(i)
	return pocc
}

// SetCreditID sets the "credit_id" field.
func (pocc *PendingOrderCreditsCreate) SetCreditID(i int64) *PendingOrderCreditsCreate {
	pocc.mutation.SetCreditID(i)
	return pocc
}

// SetClinicID sets the "clinic_id" field.
func (pocc *PendingOrderCreditsCreate) SetClinicID(i int64) *PendingOrderCreditsCreate {
	pocc.mutation.SetClinicID(i)
	return pocc
}

// Mutation returns the PendingOrderCreditsMutation object of the builder.
func (pocc *PendingOrderCreditsCreate) Mutation() *PendingOrderCreditsMutation {
	return pocc.mutation
}

// Save creates the PendingOrderCredits in the database.
func (pocc *PendingOrderCreditsCreate) Save(ctx context.Context) (*PendingOrderCredits, error) {
	return withHooks(ctx, pocc.sqlSave, pocc.mutation, pocc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pocc *PendingOrderCreditsCreate) SaveX(ctx context.Context) *PendingOrderCredits {
	v, err := pocc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pocc *PendingOrderCreditsCreate) Exec(ctx context.Context) error {
	_, err := pocc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pocc *PendingOrderCreditsCreate) ExecX(ctx context.Context) {
	if err := pocc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pocc *PendingOrderCreditsCreate) check() error {
	if _, ok := pocc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "PendingOrderCredits.order_id"`)}
	}
	if _, ok := pocc.mutation.CreditID(); !ok {
		return &ValidationError{Name: "credit_id", err: errors.New(`ent: missing required field "PendingOrderCredits.credit_id"`)}
	}
	if _, ok := pocc.mutation.ClinicID(); !ok {
		return &ValidationError{Name: "clinic_id", err: errors.New(`ent: missing required field "PendingOrderCredits.clinic_id"`)}
	}
	return nil
}

func (pocc *PendingOrderCreditsCreate) sqlSave(ctx context.Context) (*PendingOrderCredits, error) {
	if err := pocc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pocc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pocc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pocc.mutation.id = &_node.ID
	pocc.mutation.done = true
	return _node, nil
}

func (pocc *PendingOrderCreditsCreate) createSpec() (*PendingOrderCredits, *sqlgraph.CreateSpec) {
	var (
		_node = &PendingOrderCredits{config: pocc.config}
		_spec = sqlgraph.NewCreateSpec(pendingordercredits.Table, sqlgraph.NewFieldSpec(pendingordercredits.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pocc.conflict
	if value, ok := pocc.mutation.OrderID(); ok {
		_spec.SetField(pendingordercredits.FieldOrderID, field.TypeInt64, value)
		_node.OrderID = value
	}
	if value, ok := pocc.mutation.CreditID(); ok {
		_spec.SetField(pendingordercredits.FieldCreditID, field.TypeInt64, value)
		_node.CreditID = value
	}
	if value, ok := pocc.mutation.ClinicID(); ok {
		_spec.SetField(pendingordercredits.FieldClinicID, field.TypeInt64, value)
		_node.ClinicID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PendingOrderCredits.Create().
//		SetOrderID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PendingOrderCreditsUpsert) {
//			SetOrderID(v+v).
//		}).
//		Exec(ctx)
func (pocc *PendingOrderCreditsCreate) OnConflict(opts ...sql.ConflictOption) *PendingOrderCreditsUpsertOne {
	pocc.conflict = opts
	return &PendingOrderCreditsUpsertOne{
		create: pocc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PendingOrderCredits.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pocc *PendingOrderCreditsCreate) OnConflictColumns(columns ...string) *PendingOrderCreditsUpsertOne {
	pocc.conflict = append(pocc.conflict, sql.ConflictColumns(columns...))
	return &PendingOrderCreditsUpsertOne{
		create: pocc,
	}
}

type (
	// PendingOrderCreditsUpsertOne is the builder for "upsert"-ing
	//  one PendingOrderCredits node.
	PendingOrderCreditsUpsertOne struct {
		create *PendingOrderCreditsCreate
	}

	// PendingOrderCreditsUpsert is the "OnConflict" setter.
	PendingOrderCreditsUpsert struct {
		*sql.UpdateSet
	}
)

// SetOrderID sets the "order_id" field.
func (u *PendingOrderCreditsUpsert) SetOrderID(v int64) *PendingOrderCreditsUpsert {
	u.Set(pendingordercredits.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PendingOrderCreditsUpsert) UpdateOrderID() *PendingOrderCreditsUpsert {
	u.SetExcluded(pendingordercredits.FieldOrderID)
	return u
}

// AddOrderID adds v to the "order_id" field.
func (u *PendingOrderCreditsUpsert) AddOrderID(v int64) *PendingOrderCreditsUpsert {
	u.Add(pendingordercredits.FieldOrderID, v)
	return u
}

// SetCreditID sets the "credit_id" field.
func (u *PendingOrderCreditsUpsert) SetCreditID(v int64) *PendingOrderCreditsUpsert {
	u.Set(pendingordercredits.FieldCreditID, v)
	return u
}

// UpdateCreditID sets the "credit_id" field to the value that was provided on create.
func (u *PendingOrderCreditsUpsert) UpdateCreditID() *PendingOrderCreditsUpsert {
	u.SetExcluded(pendingordercredits.FieldCreditID)
	return u
}

// AddCreditID adds v to the "credit_id" field.
func (u *PendingOrderCreditsUpsert) AddCreditID(v int64) *PendingOrderCreditsUpsert {
	u.Add(pendingordercredits.FieldCreditID, v)
	return u
}

// SetClinicID sets the "clinic_id" field.
func (u *PendingOrderCreditsUpsert) SetClinicID(v int64) *PendingOrderCreditsUpsert {
	u.Set(pendingordercredits.FieldClinicID, v)
	return u
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *PendingOrderCreditsUpsert) UpdateClinicID() *PendingOrderCreditsUpsert {
	u.SetExcluded(pendingordercredits.FieldClinicID)
	return u
}

// AddClinicID adds v to the "clinic_id" field.
func (u *PendingOrderCreditsUpsert) AddClinicID(v int64) *PendingOrderCreditsUpsert {
	u.Add(pendingordercredits.FieldClinicID, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PendingOrderCredits.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PendingOrderCreditsUpsertOne) UpdateNewValues() *PendingOrderCreditsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PendingOrderCredits.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PendingOrderCreditsUpsertOne) Ignore() *PendingOrderCreditsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PendingOrderCreditsUpsertOne) DoNothing() *PendingOrderCreditsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PendingOrderCreditsCreate.OnConflict
// documentation for more info.
func (u *PendingOrderCreditsUpsertOne) Update(set func(*PendingOrderCreditsUpsert)) *PendingOrderCreditsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PendingOrderCreditsUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrderID sets the "order_id" field.
func (u *PendingOrderCreditsUpsertOne) SetOrderID(v int64) *PendingOrderCreditsUpsertOne {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.SetOrderID(v)
	})
}

// AddOrderID adds v to the "order_id" field.
func (u *PendingOrderCreditsUpsertOne) AddOrderID(v int64) *PendingOrderCreditsUpsertOne {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.AddOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PendingOrderCreditsUpsertOne) UpdateOrderID() *PendingOrderCreditsUpsertOne {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.UpdateOrderID()
	})
}

// SetCreditID sets the "credit_id" field.
func (u *PendingOrderCreditsUpsertOne) SetCreditID(v int64) *PendingOrderCreditsUpsertOne {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.SetCreditID(v)
	})
}

// AddCreditID adds v to the "credit_id" field.
func (u *PendingOrderCreditsUpsertOne) AddCreditID(v int64) *PendingOrderCreditsUpsertOne {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.AddCreditID(v)
	})
}

// UpdateCreditID sets the "credit_id" field to the value that was provided on create.
func (u *PendingOrderCreditsUpsertOne) UpdateCreditID() *PendingOrderCreditsUpsertOne {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.UpdateCreditID()
	})
}

// SetClinicID sets the "clinic_id" field.
func (u *PendingOrderCreditsUpsertOne) SetClinicID(v int64) *PendingOrderCreditsUpsertOne {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.SetClinicID(v)
	})
}

// AddClinicID adds v to the "clinic_id" field.
func (u *PendingOrderCreditsUpsertOne) AddClinicID(v int64) *PendingOrderCreditsUpsertOne {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.AddClinicID(v)
	})
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *PendingOrderCreditsUpsertOne) UpdateClinicID() *PendingOrderCreditsUpsertOne {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.UpdateClinicID()
	})
}

// Exec executes the query.
func (u *PendingOrderCreditsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PendingOrderCreditsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PendingOrderCreditsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PendingOrderCreditsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PendingOrderCreditsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PendingOrderCreditsCreateBulk is the builder for creating many PendingOrderCredits entities in bulk.
type PendingOrderCreditsCreateBulk struct {
	config
	err      error
	builders []*PendingOrderCreditsCreate
	conflict []sql.ConflictOption
}

// Save creates the PendingOrderCredits entities in the database.
func (poccb *PendingOrderCreditsCreateBulk) Save(ctx context.Context) ([]*PendingOrderCredits, error) {
	if poccb.err != nil {
		return nil, poccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(poccb.builders))
	nodes := make([]*PendingOrderCredits, len(poccb.builders))
	mutators := make([]Mutator, len(poccb.builders))
	for i := range poccb.builders {
		func(i int, root context.Context) {
			builder := poccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PendingOrderCreditsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, poccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = poccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, poccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, poccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (poccb *PendingOrderCreditsCreateBulk) SaveX(ctx context.Context) []*PendingOrderCredits {
	v, err := poccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (poccb *PendingOrderCreditsCreateBulk) Exec(ctx context.Context) error {
	_, err := poccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poccb *PendingOrderCreditsCreateBulk) ExecX(ctx context.Context) {
	if err := poccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PendingOrderCredits.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PendingOrderCreditsUpsert) {
//			SetOrderID(v+v).
//		}).
//		Exec(ctx)
func (poccb *PendingOrderCreditsCreateBulk) OnConflict(opts ...sql.ConflictOption) *PendingOrderCreditsUpsertBulk {
	poccb.conflict = opts
	return &PendingOrderCreditsUpsertBulk{
		create: poccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PendingOrderCredits.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (poccb *PendingOrderCreditsCreateBulk) OnConflictColumns(columns ...string) *PendingOrderCreditsUpsertBulk {
	poccb.conflict = append(poccb.conflict, sql.ConflictColumns(columns...))
	return &PendingOrderCreditsUpsertBulk{
		create: poccb,
	}
}

// PendingOrderCreditsUpsertBulk is the builder for "upsert"-ing
// a bulk of PendingOrderCredits nodes.
type PendingOrderCreditsUpsertBulk struct {
	create *PendingOrderCreditsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PendingOrderCredits.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PendingOrderCreditsUpsertBulk) UpdateNewValues() *PendingOrderCreditsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PendingOrderCredits.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PendingOrderCreditsUpsertBulk) Ignore() *PendingOrderCreditsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PendingOrderCreditsUpsertBulk) DoNothing() *PendingOrderCreditsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PendingOrderCreditsCreateBulk.OnConflict
// documentation for more info.
func (u *PendingOrderCreditsUpsertBulk) Update(set func(*PendingOrderCreditsUpsert)) *PendingOrderCreditsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PendingOrderCreditsUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrderID sets the "order_id" field.
func (u *PendingOrderCreditsUpsertBulk) SetOrderID(v int64) *PendingOrderCreditsUpsertBulk {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.SetOrderID(v)
	})
}

// AddOrderID adds v to the "order_id" field.
func (u *PendingOrderCreditsUpsertBulk) AddOrderID(v int64) *PendingOrderCreditsUpsertBulk {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.AddOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PendingOrderCreditsUpsertBulk) UpdateOrderID() *PendingOrderCreditsUpsertBulk {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.UpdateOrderID()
	})
}

// SetCreditID sets the "credit_id" field.
func (u *PendingOrderCreditsUpsertBulk) SetCreditID(v int64) *PendingOrderCreditsUpsertBulk {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.SetCreditID(v)
	})
}

// AddCreditID adds v to the "credit_id" field.
func (u *PendingOrderCreditsUpsertBulk) AddCreditID(v int64) *PendingOrderCreditsUpsertBulk {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.AddCreditID(v)
	})
}

// UpdateCreditID sets the "credit_id" field to the value that was provided on create.
func (u *PendingOrderCreditsUpsertBulk) UpdateCreditID() *PendingOrderCreditsUpsertBulk {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.UpdateCreditID()
	})
}

// SetClinicID sets the "clinic_id" field.
func (u *PendingOrderCreditsUpsertBulk) SetClinicID(v int64) *PendingOrderCreditsUpsertBulk {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.SetClinicID(v)
	})
}

// AddClinicID adds v to the "clinic_id" field.
func (u *PendingOrderCreditsUpsertBulk) AddClinicID(v int64) *PendingOrderCreditsUpsertBulk {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.AddClinicID(v)
	})
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *PendingOrderCreditsUpsertBulk) UpdateClinicID() *PendingOrderCreditsUpsertBulk {
	return u.Update(func(s *PendingOrderCreditsUpsert) {
		s.UpdateClinicID()
	})
}

// Exec executes the query.
func (u *PendingOrderCreditsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PendingOrderCreditsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PendingOrderCreditsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PendingOrderCreditsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
