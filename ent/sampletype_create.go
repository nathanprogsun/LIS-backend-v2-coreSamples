// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/sampletype"
	"coresamples/ent/test"
	"coresamples/ent/tubetype"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SampleTypeCreate is the builder for creating a SampleType entity.
type SampleTypeCreate struct {
	config
	mutation *SampleTypeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSampleTypeName sets the "sample_type_name" field.
func (stc *SampleTypeCreate) SetSampleTypeName(s string) *SampleTypeCreate {
	stc.mutation.SetSampleTypeName(s)
	return stc
}

// SetSampleTypeCode sets the "sample_type_code" field.
func (stc *SampleTypeCreate) SetSampleTypeCode(s string) *SampleTypeCreate {
	stc.mutation.SetSampleTypeCode(s)
	return stc
}

// SetSampleTypeEnum sets the "sample_type_enum" field.
func (stc *SampleTypeCreate) SetSampleTypeEnum(s string) *SampleTypeCreate {
	stc.mutation.SetSampleTypeEnum(s)
	return stc
}

// SetNillableSampleTypeEnum sets the "sample_type_enum" field if the given value is not nil.
func (stc *SampleTypeCreate) SetNillableSampleTypeEnum(s *string) *SampleTypeCreate {
	if s != nil {
		stc.SetSampleTypeEnum(*s)
	}
	return stc
}

// SetSampleTypeEnumOldLisRequest sets the "sample_type_enum_old_lis_request" field.
func (stc *SampleTypeCreate) SetSampleTypeEnumOldLisRequest(s string) *SampleTypeCreate {
	stc.mutation.SetSampleTypeEnumOldLisRequest(s)
	return stc
}

// SetNillableSampleTypeEnumOldLisRequest sets the "sample_type_enum_old_lis_request" field if the given value is not nil.
func (stc *SampleTypeCreate) SetNillableSampleTypeEnumOldLisRequest(s *string) *SampleTypeCreate {
	if s != nil {
		stc.SetSampleTypeEnumOldLisRequest(*s)
	}
	return stc
}

// SetSampleTypeDescription sets the "sample_type_description" field.
func (stc *SampleTypeCreate) SetSampleTypeDescription(s string) *SampleTypeCreate {
	stc.mutation.SetSampleTypeDescription(s)
	return stc
}

// SetPrimarySampleTypeGroup sets the "primary_sample_type_group" field.
func (stc *SampleTypeCreate) SetPrimarySampleTypeGroup(s string) *SampleTypeCreate {
	stc.mutation.SetPrimarySampleTypeGroup(s)
	return stc
}

// SetIsActive sets the "is_active" field.
func (stc *SampleTypeCreate) SetIsActive(b bool) *SampleTypeCreate {
	stc.mutation.SetIsActive(b)
	return stc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (stc *SampleTypeCreate) SetNillableIsActive(b *bool) *SampleTypeCreate {
	if b != nil {
		stc.SetIsActive(*b)
	}
	return stc
}

// SetCreatedTime sets the "created_time" field.
func (stc *SampleTypeCreate) SetCreatedTime(t time.Time) *SampleTypeCreate {
	stc.mutation.SetCreatedTime(t)
	return stc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (stc *SampleTypeCreate) SetNillableCreatedTime(t *time.Time) *SampleTypeCreate {
	if t != nil {
		stc.SetCreatedTime(*t)
	}
	return stc
}

// SetUpdatedTime sets the "updated_time" field.
func (stc *SampleTypeCreate) SetUpdatedTime(t time.Time) *SampleTypeCreate {
	stc.mutation.SetUpdatedTime(t)
	return stc
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (stc *SampleTypeCreate) SetNillableUpdatedTime(t *time.Time) *SampleTypeCreate {
	if t != nil {
		stc.SetUpdatedTime(*t)
	}
	return stc
}

// SetID sets the "id" field.
func (stc *SampleTypeCreate) SetID(i int) *SampleTypeCreate {
	stc.mutation.SetID(i)
	return stc
}

// AddTubeTypeIDs adds the "tube_types" edge to the TubeType entity by IDs.
func (stc *SampleTypeCreate) AddTubeTypeIDs(ids ...int) *SampleTypeCreate {
	stc.mutation.AddTubeTypeIDs(ids...)
	return stc
}

// AddTubeTypes adds the "tube_types" edges to the TubeType entity.
func (stc *SampleTypeCreate) AddTubeTypes(t ...*TubeType) *SampleTypeCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return stc.AddTubeTypeIDs(ids...)
}

// AddTestIDs adds the "tests" edge to the Test entity by IDs.
func (stc *SampleTypeCreate) AddTestIDs(ids ...int) *SampleTypeCreate {
	stc.mutation.AddTestIDs(ids...)
	return stc
}

// AddTests adds the "tests" edges to the Test entity.
func (stc *SampleTypeCreate) AddTests(t ...*Test) *SampleTypeCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return stc.AddTestIDs(ids...)
}

// Mutation returns the SampleTypeMutation object of the builder.
func (stc *SampleTypeCreate) Mutation() *SampleTypeMutation {
	return stc.mutation
}

// Save creates the SampleType in the database.
func (stc *SampleTypeCreate) Save(ctx context.Context) (*SampleType, error) {
	stc.defaults()
	return withHooks(ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *SampleTypeCreate) SaveX(ctx context.Context) *SampleType {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *SampleTypeCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *SampleTypeCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stc *SampleTypeCreate) defaults() {
	if _, ok := stc.mutation.IsActive(); !ok {
		v := sampletype.DefaultIsActive
		stc.mutation.SetIsActive(v)
	}
	if _, ok := stc.mutation.CreatedTime(); !ok {
		v := sampletype.DefaultCreatedTime()
		stc.mutation.SetCreatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *SampleTypeCreate) check() error {
	if _, ok := stc.mutation.SampleTypeName(); !ok {
		return &ValidationError{Name: "sample_type_name", err: errors.New(`ent: missing required field "SampleType.sample_type_name"`)}
	}
	if _, ok := stc.mutation.SampleTypeCode(); !ok {
		return &ValidationError{Name: "sample_type_code", err: errors.New(`ent: missing required field "SampleType.sample_type_code"`)}
	}
	if _, ok := stc.mutation.SampleTypeDescription(); !ok {
		return &ValidationError{Name: "sample_type_description", err: errors.New(`ent: missing required field "SampleType.sample_type_description"`)}
	}
	if _, ok := stc.mutation.PrimarySampleTypeGroup(); !ok {
		return &ValidationError{Name: "primary_sample_type_group", err: errors.New(`ent: missing required field "SampleType.primary_sample_type_group"`)}
	}
	if _, ok := stc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "SampleType.is_active"`)}
	}
	if _, ok := stc.mutation.CreatedTime(); !ok {
		return &ValidationError{Name: "created_time", err: errors.New(`ent: missing required field "SampleType.created_time"`)}
	}
	return nil
}

func (stc *SampleTypeCreate) sqlSave(ctx context.Context) (*SampleType, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *SampleTypeCreate) createSpec() (*SampleType, *sqlgraph.CreateSpec) {
	var (
		_node = &SampleType{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(sampletype.Table, sqlgraph.NewFieldSpec(sampletype.FieldID, field.TypeInt))
	)
	_spec.OnConflict = stc.conflict
	if id, ok := stc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := stc.mutation.SampleTypeName(); ok {
		_spec.SetField(sampletype.FieldSampleTypeName, field.TypeString, value)
		_node.SampleTypeName = value
	}
	if value, ok := stc.mutation.SampleTypeCode(); ok {
		_spec.SetField(sampletype.FieldSampleTypeCode, field.TypeString, value)
		_node.SampleTypeCode = value
	}
	if value, ok := stc.mutation.SampleTypeEnum(); ok {
		_spec.SetField(sampletype.FieldSampleTypeEnum, field.TypeString, value)
		_node.SampleTypeEnum = value
	}
	if value, ok := stc.mutation.SampleTypeEnumOldLisRequest(); ok {
		_spec.SetField(sampletype.FieldSampleTypeEnumOldLisRequest, field.TypeString, value)
		_node.SampleTypeEnumOldLisRequest = value
	}
	if value, ok := stc.mutation.SampleTypeDescription(); ok {
		_spec.SetField(sampletype.FieldSampleTypeDescription, field.TypeString, value)
		_node.SampleTypeDescription = value
	}
	if value, ok := stc.mutation.PrimarySampleTypeGroup(); ok {
		_spec.SetField(sampletype.FieldPrimarySampleTypeGroup, field.TypeString, value)
		_node.PrimarySampleTypeGroup = value
	}
	if value, ok := stc.mutation.IsActive(); ok {
		_spec.SetField(sampletype.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := stc.mutation.CreatedTime(); ok {
		_spec.SetField(sampletype.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = value
	}
	if value, ok := stc.mutation.UpdatedTime(); ok {
		_spec.SetField(sampletype.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = value
	}
	if nodes := stc.mutation.TubeTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sampletype.TubeTypesTable,
			Columns: sampletype.TubeTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.TestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sampletype.TestsTable,
			Columns: sampletype.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SampleType.Create().
//		SetSampleTypeName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SampleTypeUpsert) {
//			SetSampleTypeName(v+v).
//		}).
//		Exec(ctx)
func (stc *SampleTypeCreate) OnConflict(opts ...sql.ConflictOption) *SampleTypeUpsertOne {
	stc.conflict = opts
	return &SampleTypeUpsertOne{
		create: stc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SampleType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stc *SampleTypeCreate) OnConflictColumns(columns ...string) *SampleTypeUpsertOne {
	stc.conflict = append(stc.conflict, sql.ConflictColumns(columns...))
	return &SampleTypeUpsertOne{
		create: stc,
	}
}

type (
	// SampleTypeUpsertOne is the builder for "upsert"-ing
	//  one SampleType node.
	SampleTypeUpsertOne struct {
		create *SampleTypeCreate
	}

	// SampleTypeUpsert is the "OnConflict" setter.
	SampleTypeUpsert struct {
		*sql.UpdateSet
	}
)

// SetSampleTypeName sets the "sample_type_name" field.
func (u *SampleTypeUpsert) SetSampleTypeName(v string) *SampleTypeUpsert {
	u.Set(sampletype.FieldSampleTypeName, v)
	return u
}

// UpdateSampleTypeName sets the "sample_type_name" field to the value that was provided on create.
func (u *SampleTypeUpsert) UpdateSampleTypeName() *SampleTypeUpsert {
	u.SetExcluded(sampletype.FieldSampleTypeName)
	return u
}

// SetSampleTypeCode sets the "sample_type_code" field.
func (u *SampleTypeUpsert) SetSampleTypeCode(v string) *SampleTypeUpsert {
	u.Set(sampletype.FieldSampleTypeCode, v)
	return u
}

// UpdateSampleTypeCode sets the "sample_type_code" field to the value that was provided on create.
func (u *SampleTypeUpsert) UpdateSampleTypeCode() *SampleTypeUpsert {
	u.SetExcluded(sampletype.FieldSampleTypeCode)
	return u
}

// SetSampleTypeEnum sets the "sample_type_enum" field.
func (u *SampleTypeUpsert) SetSampleTypeEnum(v string) *SampleTypeUpsert {
	u.Set(sampletype.FieldSampleTypeEnum, v)
	return u
}

// UpdateSampleTypeEnum sets the "sample_type_enum" field to the value that was provided on create.
func (u *SampleTypeUpsert) UpdateSampleTypeEnum() *SampleTypeUpsert {
	u.SetExcluded(sampletype.FieldSampleTypeEnum)
	return u
}

// ClearSampleTypeEnum clears the value of the "sample_type_enum" field.
func (u *SampleTypeUpsert) ClearSampleTypeEnum() *SampleTypeUpsert {
	u.SetNull(sampletype.FieldSampleTypeEnum)
	return u
}

// SetSampleTypeEnumOldLisRequest sets the "sample_type_enum_old_lis_request" field.
func (u *SampleTypeUpsert) SetSampleTypeEnumOldLisRequest(v string) *SampleTypeUpsert {
	u.Set(sampletype.FieldSampleTypeEnumOldLisRequest, v)
	return u
}

// UpdateSampleTypeEnumOldLisRequest sets the "sample_type_enum_old_lis_request" field to the value that was provided on create.
func (u *SampleTypeUpsert) UpdateSampleTypeEnumOldLisRequest() *SampleTypeUpsert {
	u.SetExcluded(sampletype.FieldSampleTypeEnumOldLisRequest)
	return u
}

// ClearSampleTypeEnumOldLisRequest clears the value of the "sample_type_enum_old_lis_request" field.
func (u *SampleTypeUpsert) ClearSampleTypeEnumOldLisRequest() *SampleTypeUpsert {
	u.SetNull(sampletype.FieldSampleTypeEnumOldLisRequest)
	return u
}

// SetSampleTypeDescription sets the "sample_type_description" field.
func (u *SampleTypeUpsert) SetSampleTypeDescription(v string) *SampleTypeUpsert {
	u.Set(sampletype.FieldSampleTypeDescription, v)
	return u
}

// UpdateSampleTypeDescription sets the "sample_type_description" field to the value that was provided on create.
func (u *SampleTypeUpsert) UpdateSampleTypeDescription() *SampleTypeUpsert {
	u.SetExcluded(sampletype.FieldSampleTypeDescription)
	return u
}

// SetPrimarySampleTypeGroup sets the "primary_sample_type_group" field.
func (u *SampleTypeUpsert) SetPrimarySampleTypeGroup(v string) *SampleTypeUpsert {
	u.Set(sampletype.FieldPrimarySampleTypeGroup, v)
	return u
}

// UpdatePrimarySampleTypeGroup sets the "primary_sample_type_group" field to the value that was provided on create.
func (u *SampleTypeUpsert) UpdatePrimarySampleTypeGroup() *SampleTypeUpsert {
	u.SetExcluded(sampletype.FieldPrimarySampleTypeGroup)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *SampleTypeUpsert) SetIsActive(v bool) *SampleTypeUpsert {
	u.Set(sampletype.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SampleTypeUpsert) UpdateIsActive() *SampleTypeUpsert {
	u.SetExcluded(sampletype.FieldIsActive)
	return u
}

// SetCreatedTime sets the "created_time" field.
func (u *SampleTypeUpsert) SetCreatedTime(v time.Time) *SampleTypeUpsert {
	u.Set(sampletype.FieldCreatedTime, v)
	return u
}

// UpdateCreatedTime sets the "created_time" field to the value that was provided on create.
func (u *SampleTypeUpsert) UpdateCreatedTime() *SampleTypeUpsert {
	u.SetExcluded(sampletype.FieldCreatedTime)
	return u
}

// SetUpdatedTime sets the "updated_time" field.
func (u *SampleTypeUpsert) SetUpdatedTime(v time.Time) *SampleTypeUpsert {
	u.Set(sampletype.FieldUpdatedTime, v)
	return u
}

// UpdateUpdatedTime sets the "updated_time" field to the value that was provided on create.
func (u *SampleTypeUpsert) UpdateUpdatedTime() *SampleTypeUpsert {
	u.SetExcluded(sampletype.FieldUpdatedTime)
	return u
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (u *SampleTypeUpsert) ClearUpdatedTime() *SampleTypeUpsert {
	u.SetNull(sampletype.FieldUpdatedTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SampleType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sampletype.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SampleTypeUpsertOne) UpdateNewValues() *SampleTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sampletype.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SampleType.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SampleTypeUpsertOne) Ignore() *SampleTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SampleTypeUpsertOne) DoNothing() *SampleTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SampleTypeCreate.OnConflict
// documentation for more info.
func (u *SampleTypeUpsertOne) Update(set func(*SampleTypeUpsert)) *SampleTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SampleTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetSampleTypeName sets the "sample_type_name" field.
func (u *SampleTypeUpsertOne) SetSampleTypeName(v string) *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetSampleTypeName(v)
	})
}

// UpdateSampleTypeName sets the "sample_type_name" field to the value that was provided on create.
func (u *SampleTypeUpsertOne) UpdateSampleTypeName() *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdateSampleTypeName()
	})
}

// SetSampleTypeCode sets the "sample_type_code" field.
func (u *SampleTypeUpsertOne) SetSampleTypeCode(v string) *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetSampleTypeCode(v)
	})
}

// UpdateSampleTypeCode sets the "sample_type_code" field to the value that was provided on create.
func (u *SampleTypeUpsertOne) UpdateSampleTypeCode() *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdateSampleTypeCode()
	})
}

// SetSampleTypeEnum sets the "sample_type_enum" field.
func (u *SampleTypeUpsertOne) SetSampleTypeEnum(v string) *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetSampleTypeEnum(v)
	})
}

// UpdateSampleTypeEnum sets the "sample_type_enum" field to the value that was provided on create.
func (u *SampleTypeUpsertOne) UpdateSampleTypeEnum() *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdateSampleTypeEnum()
	})
}

// ClearSampleTypeEnum clears the value of the "sample_type_enum" field.
func (u *SampleTypeUpsertOne) ClearSampleTypeEnum() *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.ClearSampleTypeEnum()
	})
}

// SetSampleTypeEnumOldLisRequest sets the "sample_type_enum_old_lis_request" field.
func (u *SampleTypeUpsertOne) SetSampleTypeEnumOldLisRequest(v string) *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetSampleTypeEnumOldLisRequest(v)
	})
}

// UpdateSampleTypeEnumOldLisRequest sets the "sample_type_enum_old_lis_request" field to the value that was provided on create.
func (u *SampleTypeUpsertOne) UpdateSampleTypeEnumOldLisRequest() *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdateSampleTypeEnumOldLisRequest()
	})
}

// ClearSampleTypeEnumOldLisRequest clears the value of the "sample_type_enum_old_lis_request" field.
func (u *SampleTypeUpsertOne) ClearSampleTypeEnumOldLisRequest() *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.ClearSampleTypeEnumOldLisRequest()
	})
}

// SetSampleTypeDescription sets the "sample_type_description" field.
func (u *SampleTypeUpsertOne) SetSampleTypeDescription(v string) *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetSampleTypeDescription(v)
	})
}

// UpdateSampleTypeDescription sets the "sample_type_description" field to the value that was provided on create.
func (u *SampleTypeUpsertOne) UpdateSampleTypeDescription() *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdateSampleTypeDescription()
	})
}

// SetPrimarySampleTypeGroup sets the "primary_sample_type_group" field.
func (u *SampleTypeUpsertOne) SetPrimarySampleTypeGroup(v string) *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetPrimarySampleTypeGroup(v)
	})
}

// UpdatePrimarySampleTypeGroup sets the "primary_sample_type_group" field to the value that was provided on create.
func (u *SampleTypeUpsertOne) UpdatePrimarySampleTypeGroup() *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdatePrimarySampleTypeGroup()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SampleTypeUpsertOne) SetIsActive(v bool) *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SampleTypeUpsertOne) UpdateIsActive() *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdateIsActive()
	})
}

// SetCreatedTime sets the "created_time" field.
func (u *SampleTypeUpsertOne) SetCreatedTime(v time.Time) *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetCreatedTime(v)
	})
}

// UpdateCreatedTime sets the "created_time" field to the value that was provided on create.
func (u *SampleTypeUpsertOne) UpdateCreatedTime() *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdateCreatedTime()
	})
}

// SetUpdatedTime sets the "updated_time" field.
func (u *SampleTypeUpsertOne) SetUpdatedTime(v time.Time) *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetUpdatedTime(v)
	})
}

// UpdateUpdatedTime sets the "updated_time" field to the value that was provided on create.
func (u *SampleTypeUpsertOne) UpdateUpdatedTime() *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdateUpdatedTime()
	})
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (u *SampleTypeUpsertOne) ClearUpdatedTime() *SampleTypeUpsertOne {
	return u.Update(func(s *SampleTypeUpsert) {
		s.ClearUpdatedTime()
	})
}

// Exec executes the query.
func (u *SampleTypeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SampleTypeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SampleTypeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SampleTypeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SampleTypeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SampleTypeCreateBulk is the builder for creating many SampleType entities in bulk.
type SampleTypeCreateBulk struct {
	config
	err      error
	builders []*SampleTypeCreate
	conflict []sql.ConflictOption
}

// Save creates the SampleType entities in the database.
func (stcb *SampleTypeCreateBulk) Save(ctx context.Context) ([]*SampleType, error) {
	if stcb.err != nil {
		return nil, stcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*SampleType, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SampleTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = stcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *SampleTypeCreateBulk) SaveX(ctx context.Context) []*SampleType {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *SampleTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *SampleTypeCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SampleType.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SampleTypeUpsert) {
//			SetSampleTypeName(v+v).
//		}).
//		Exec(ctx)
func (stcb *SampleTypeCreateBulk) OnConflict(opts ...sql.ConflictOption) *SampleTypeUpsertBulk {
	stcb.conflict = opts
	return &SampleTypeUpsertBulk{
		create: stcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SampleType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stcb *SampleTypeCreateBulk) OnConflictColumns(columns ...string) *SampleTypeUpsertBulk {
	stcb.conflict = append(stcb.conflict, sql.ConflictColumns(columns...))
	return &SampleTypeUpsertBulk{
		create: stcb,
	}
}

// SampleTypeUpsertBulk is the builder for "upsert"-ing
// a bulk of SampleType nodes.
type SampleTypeUpsertBulk struct {
	create *SampleTypeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SampleType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sampletype.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SampleTypeUpsertBulk) UpdateNewValues() *SampleTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sampletype.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SampleType.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SampleTypeUpsertBulk) Ignore() *SampleTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SampleTypeUpsertBulk) DoNothing() *SampleTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SampleTypeCreateBulk.OnConflict
// documentation for more info.
func (u *SampleTypeUpsertBulk) Update(set func(*SampleTypeUpsert)) *SampleTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SampleTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetSampleTypeName sets the "sample_type_name" field.
func (u *SampleTypeUpsertBulk) SetSampleTypeName(v string) *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetSampleTypeName(v)
	})
}

// UpdateSampleTypeName sets the "sample_type_name" field to the value that was provided on create.
func (u *SampleTypeUpsertBulk) UpdateSampleTypeName() *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdateSampleTypeName()
	})
}

// SetSampleTypeCode sets the "sample_type_code" field.
func (u *SampleTypeUpsertBulk) SetSampleTypeCode(v string) *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetSampleTypeCode(v)
	})
}

// UpdateSampleTypeCode sets the "sample_type_code" field to the value that was provided on create.
func (u *SampleTypeUpsertBulk) UpdateSampleTypeCode() *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdateSampleTypeCode()
	})
}

// SetSampleTypeEnum sets the "sample_type_enum" field.
func (u *SampleTypeUpsertBulk) SetSampleTypeEnum(v string) *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetSampleTypeEnum(v)
	})
}

// UpdateSampleTypeEnum sets the "sample_type_enum" field to the value that was provided on create.
func (u *SampleTypeUpsertBulk) UpdateSampleTypeEnum() *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdateSampleTypeEnum()
	})
}

// ClearSampleTypeEnum clears the value of the "sample_type_enum" field.
func (u *SampleTypeUpsertBulk) ClearSampleTypeEnum() *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.ClearSampleTypeEnum()
	})
}

// SetSampleTypeEnumOldLisRequest sets the "sample_type_enum_old_lis_request" field.
func (u *SampleTypeUpsertBulk) SetSampleTypeEnumOldLisRequest(v string) *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetSampleTypeEnumOldLisRequest(v)
	})
}

// UpdateSampleTypeEnumOldLisRequest sets the "sample_type_enum_old_lis_request" field to the value that was provided on create.
func (u *SampleTypeUpsertBulk) UpdateSampleTypeEnumOldLisRequest() *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdateSampleTypeEnumOldLisRequest()
	})
}

// ClearSampleTypeEnumOldLisRequest clears the value of the "sample_type_enum_old_lis_request" field.
func (u *SampleTypeUpsertBulk) ClearSampleTypeEnumOldLisRequest() *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.ClearSampleTypeEnumOldLisRequest()
	})
}

// SetSampleTypeDescription sets the "sample_type_description" field.
func (u *SampleTypeUpsertBulk) SetSampleTypeDescription(v string) *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetSampleTypeDescription(v)
	})
}

// UpdateSampleTypeDescription sets the "sample_type_description" field to the value that was provided on create.
func (u *SampleTypeUpsertBulk) UpdateSampleTypeDescription() *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdateSampleTypeDescription()
	})
}

// SetPrimarySampleTypeGroup sets the "primary_sample_type_group" field.
func (u *SampleTypeUpsertBulk) SetPrimarySampleTypeGroup(v string) *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetPrimarySampleTypeGroup(v)
	})
}

// UpdatePrimarySampleTypeGroup sets the "primary_sample_type_group" field to the value that was provided on create.
func (u *SampleTypeUpsertBulk) UpdatePrimarySampleTypeGroup() *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdatePrimarySampleTypeGroup()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SampleTypeUpsertBulk) SetIsActive(v bool) *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SampleTypeUpsertBulk) UpdateIsActive() *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdateIsActive()
	})
}

// SetCreatedTime sets the "created_time" field.
func (u *SampleTypeUpsertBulk) SetCreatedTime(v time.Time) *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetCreatedTime(v)
	})
}

// UpdateCreatedTime sets the "created_time" field to the value that was provided on create.
func (u *SampleTypeUpsertBulk) UpdateCreatedTime() *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdateCreatedTime()
	})
}

// SetUpdatedTime sets the "updated_time" field.
func (u *SampleTypeUpsertBulk) SetUpdatedTime(v time.Time) *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.SetUpdatedTime(v)
	})
}

// UpdateUpdatedTime sets the "updated_time" field to the value that was provided on create.
func (u *SampleTypeUpsertBulk) UpdateUpdatedTime() *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.UpdateUpdatedTime()
	})
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (u *SampleTypeUpsertBulk) ClearUpdatedTime() *SampleTypeUpsertBulk {
	return u.Update(func(s *SampleTypeUpsert) {
		s.ClearUpdatedTime()
	})
}

// Exec executes the query.
func (u *SampleTypeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SampleTypeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SampleTypeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SampleTypeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
