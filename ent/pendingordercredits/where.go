// Code generated by ent, DO NOT EDIT.

package pendingordercredits

import (
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldLTE(FieldID, id))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldEQ(FieldOrderID, v))
}

// CreditID applies equality check predicate on the "credit_id" field. It's identical to CreditIDEQ.
func CreditID(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldEQ(FieldCreditID, v))
}

// ClinicID applies equality check predicate on the "clinic_id" field. It's identical to ClinicIDEQ.
func ClinicID(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldEQ(FieldClinicID, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldGT(FieldOrderID, v))
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldGTE(FieldOrderID, v))
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldLT(FieldOrderID, v))
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldLTE(FieldOrderID, v))
}

// CreditIDEQ applies the EQ predicate on the "credit_id" field.
func CreditIDEQ(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldEQ(FieldCreditID, v))
}

// CreditIDNEQ applies the NEQ predicate on the "credit_id" field.
func CreditIDNEQ(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldNEQ(FieldCreditID, v))
}

// CreditIDIn applies the In predicate on the "credit_id" field.
func CreditIDIn(vs ...int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldIn(FieldCreditID, vs...))
}

// CreditIDNotIn applies the NotIn predicate on the "credit_id" field.
func CreditIDNotIn(vs ...int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldNotIn(FieldCreditID, vs...))
}

// CreditIDGT applies the GT predicate on the "credit_id" field.
func CreditIDGT(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldGT(FieldCreditID, v))
}

// CreditIDGTE applies the GTE predicate on the "credit_id" field.
func CreditIDGTE(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldGTE(FieldCreditID, v))
}

// CreditIDLT applies the LT predicate on the "credit_id" field.
func CreditIDLT(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldLT(FieldCreditID, v))
}

// CreditIDLTE applies the LTE predicate on the "credit_id" field.
func CreditIDLTE(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldLTE(FieldCreditID, v))
}

// ClinicIDEQ applies the EQ predicate on the "clinic_id" field.
func ClinicIDEQ(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldEQ(FieldClinicID, v))
}

// ClinicIDNEQ applies the NEQ predicate on the "clinic_id" field.
func ClinicIDNEQ(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldNEQ(FieldClinicID, v))
}

// ClinicIDIn applies the In predicate on the "clinic_id" field.
func ClinicIDIn(vs ...int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldIn(FieldClinicID, vs...))
}

// ClinicIDNotIn applies the NotIn predicate on the "clinic_id" field.
func ClinicIDNotIn(vs ...int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldNotIn(FieldClinicID, vs...))
}

// ClinicIDGT applies the GT predicate on the "clinic_id" field.
func ClinicIDGT(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldGT(FieldClinicID, v))
}

// ClinicIDGTE applies the GTE predicate on the "clinic_id" field.
func ClinicIDGTE(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldGTE(FieldClinicID, v))
}

// ClinicIDLT applies the LT predicate on the "clinic_id" field.
func ClinicIDLT(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldLT(FieldClinicID, v))
}

// ClinicIDLTE applies the LTE predicate on the "clinic_id" field.
func ClinicIDLTE(v int64) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.FieldLTE(FieldClinicID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PendingOrderCredits) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PendingOrderCredits) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PendingOrderCredits) predicate.PendingOrderCredits {
	return predicate.PendingOrderCredits(sql.NotPredicates(p))
}
