// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/orderflag"
	"coresamples/ent/orderinfo"
	"coresamples/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderFlagUpdate is the builder for updating OrderFlag entities.
type OrderFlagUpdate struct {
	config
	hooks    []Hook
	mutation *OrderFlagMutation
}

// Where appends a list predicates to the OrderFlagUpdate builder.
func (ofu *OrderFlagUpdate) Where(ps ...predicate.OrderFlag) *OrderFlagUpdate {
	ofu.mutation.Where(ps...)
	return ofu
}

// SetOrderFlagName sets the "order_flag_name" field.
func (ofu *OrderFlagUpdate) SetOrderFlagName(s string) *OrderFlagUpdate {
	ofu.mutation.SetOrderFlagName(s)
	return ofu
}

// SetNillableOrderFlagName sets the "order_flag_name" field if the given value is not nil.
func (ofu *OrderFlagUpdate) SetNillableOrderFlagName(s *string) *OrderFlagUpdate {
	if s != nil {
		ofu.SetOrderFlagName(*s)
	}
	return ofu
}

// SetOrderFlagDescription sets the "order_flag_description" field.
func (ofu *OrderFlagUpdate) SetOrderFlagDescription(s string) *OrderFlagUpdate {
	ofu.mutation.SetOrderFlagDescription(s)
	return ofu
}

// SetNillableOrderFlagDescription sets the "order_flag_description" field if the given value is not nil.
func (ofu *OrderFlagUpdate) SetNillableOrderFlagDescription(s *string) *OrderFlagUpdate {
	if s != nil {
		ofu.SetOrderFlagDescription(*s)
	}
	return ofu
}

// ClearOrderFlagDescription clears the value of the "order_flag_description" field.
func (ofu *OrderFlagUpdate) ClearOrderFlagDescription() *OrderFlagUpdate {
	ofu.mutation.ClearOrderFlagDescription()
	return ofu
}

// SetOrderFlagDisplayName sets the "order_flag_display_name" field.
func (ofu *OrderFlagUpdate) SetOrderFlagDisplayName(s string) *OrderFlagUpdate {
	ofu.mutation.SetOrderFlagDisplayName(s)
	return ofu
}

// SetNillableOrderFlagDisplayName sets the "order_flag_display_name" field if the given value is not nil.
func (ofu *OrderFlagUpdate) SetNillableOrderFlagDisplayName(s *string) *OrderFlagUpdate {
	if s != nil {
		ofu.SetOrderFlagDisplayName(*s)
	}
	return ofu
}

// ClearOrderFlagDisplayName clears the value of the "order_flag_display_name" field.
func (ofu *OrderFlagUpdate) ClearOrderFlagDisplayName() *OrderFlagUpdate {
	ofu.mutation.ClearOrderFlagDisplayName()
	return ofu
}

// SetOrderFlagIsActive sets the "order_flag_is_active" field.
func (ofu *OrderFlagUpdate) SetOrderFlagIsActive(b bool) *OrderFlagUpdate {
	ofu.mutation.SetOrderFlagIsActive(b)
	return ofu
}

// SetNillableOrderFlagIsActive sets the "order_flag_is_active" field if the given value is not nil.
func (ofu *OrderFlagUpdate) SetNillableOrderFlagIsActive(b *bool) *OrderFlagUpdate {
	if b != nil {
		ofu.SetOrderFlagIsActive(*b)
	}
	return ofu
}

// SetOrderFlagCreatedAt sets the "order_flag_created_at" field.
func (ofu *OrderFlagUpdate) SetOrderFlagCreatedAt(t time.Time) *OrderFlagUpdate {
	ofu.mutation.SetOrderFlagCreatedAt(t)
	return ofu
}

// SetNillableOrderFlagCreatedAt sets the "order_flag_created_at" field if the given value is not nil.
func (ofu *OrderFlagUpdate) SetNillableOrderFlagCreatedAt(t *time.Time) *OrderFlagUpdate {
	if t != nil {
		ofu.SetOrderFlagCreatedAt(*t)
	}
	return ofu
}

// SetOrderFlagColor sets the "order_flag_color" field.
func (ofu *OrderFlagUpdate) SetOrderFlagColor(s string) *OrderFlagUpdate {
	ofu.mutation.SetOrderFlagColor(s)
	return ofu
}

// SetNillableOrderFlagColor sets the "order_flag_color" field if the given value is not nil.
func (ofu *OrderFlagUpdate) SetNillableOrderFlagColor(s *string) *OrderFlagUpdate {
	if s != nil {
		ofu.SetOrderFlagColor(*s)
	}
	return ofu
}

// ClearOrderFlagColor clears the value of the "order_flag_color" field.
func (ofu *OrderFlagUpdate) ClearOrderFlagColor() *OrderFlagUpdate {
	ofu.mutation.ClearOrderFlagColor()
	return ofu
}

// SetOrderFlagedBy sets the "order_flaged_by" field.
func (ofu *OrderFlagUpdate) SetOrderFlagedBy(s string) *OrderFlagUpdate {
	ofu.mutation.SetOrderFlagedBy(s)
	return ofu
}

// SetNillableOrderFlagedBy sets the "order_flaged_by" field if the given value is not nil.
func (ofu *OrderFlagUpdate) SetNillableOrderFlagedBy(s *string) *OrderFlagUpdate {
	if s != nil {
		ofu.SetOrderFlagedBy(*s)
	}
	return ofu
}

// ClearOrderFlagedBy clears the value of the "order_flaged_by" field.
func (ofu *OrderFlagUpdate) ClearOrderFlagedBy() *OrderFlagUpdate {
	ofu.mutation.ClearOrderFlagedBy()
	return ofu
}

// SetOrderFlagAllowDuplicatesUnderSameCategory sets the "order_flag_allow_duplicates_under_same_category" field.
func (ofu *OrderFlagUpdate) SetOrderFlagAllowDuplicatesUnderSameCategory(b bool) *OrderFlagUpdate {
	ofu.mutation.SetOrderFlagAllowDuplicatesUnderSameCategory(b)
	return ofu
}

// SetNillableOrderFlagAllowDuplicatesUnderSameCategory sets the "order_flag_allow_duplicates_under_same_category" field if the given value is not nil.
func (ofu *OrderFlagUpdate) SetNillableOrderFlagAllowDuplicatesUnderSameCategory(b *bool) *OrderFlagUpdate {
	if b != nil {
		ofu.SetOrderFlagAllowDuplicatesUnderSameCategory(*b)
	}
	return ofu
}

// SetOrderFlagCategory sets the "order_flag_category" field.
func (ofu *OrderFlagUpdate) SetOrderFlagCategory(s string) *OrderFlagUpdate {
	ofu.mutation.SetOrderFlagCategory(s)
	return ofu
}

// SetNillableOrderFlagCategory sets the "order_flag_category" field if the given value is not nil.
func (ofu *OrderFlagUpdate) SetNillableOrderFlagCategory(s *string) *OrderFlagUpdate {
	if s != nil {
		ofu.SetOrderFlagCategory(*s)
	}
	return ofu
}

// ClearOrderFlagCategory clears the value of the "order_flag_category" field.
func (ofu *OrderFlagUpdate) ClearOrderFlagCategory() *OrderFlagUpdate {
	ofu.mutation.ClearOrderFlagCategory()
	return ofu
}

// SetOrderFlagLevel sets the "order_flag_level" field.
func (ofu *OrderFlagUpdate) SetOrderFlagLevel(i int) *OrderFlagUpdate {
	ofu.mutation.ResetOrderFlagLevel()
	ofu.mutation.SetOrderFlagLevel(i)
	return ofu
}

// SetNillableOrderFlagLevel sets the "order_flag_level" field if the given value is not nil.
func (ofu *OrderFlagUpdate) SetNillableOrderFlagLevel(i *int) *OrderFlagUpdate {
	if i != nil {
		ofu.SetOrderFlagLevel(*i)
	}
	return ofu
}

// AddOrderFlagLevel adds i to the "order_flag_level" field.
func (ofu *OrderFlagUpdate) AddOrderFlagLevel(i int) *OrderFlagUpdate {
	ofu.mutation.AddOrderFlagLevel(i)
	return ofu
}

// AddFlaggedOrderIDs adds the "flagged_orders" edge to the OrderInfo entity by IDs.
func (ofu *OrderFlagUpdate) AddFlaggedOrderIDs(ids ...int) *OrderFlagUpdate {
	ofu.mutation.AddFlaggedOrderIDs(ids...)
	return ofu
}

// AddFlaggedOrders adds the "flagged_orders" edges to the OrderInfo entity.
func (ofu *OrderFlagUpdate) AddFlaggedOrders(o ...*OrderInfo) *OrderFlagUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ofu.AddFlaggedOrderIDs(ids...)
}

// Mutation returns the OrderFlagMutation object of the builder.
func (ofu *OrderFlagUpdate) Mutation() *OrderFlagMutation {
	return ofu.mutation
}

// ClearFlaggedOrders clears all "flagged_orders" edges to the OrderInfo entity.
func (ofu *OrderFlagUpdate) ClearFlaggedOrders() *OrderFlagUpdate {
	ofu.mutation.ClearFlaggedOrders()
	return ofu
}

// RemoveFlaggedOrderIDs removes the "flagged_orders" edge to OrderInfo entities by IDs.
func (ofu *OrderFlagUpdate) RemoveFlaggedOrderIDs(ids ...int) *OrderFlagUpdate {
	ofu.mutation.RemoveFlaggedOrderIDs(ids...)
	return ofu
}

// RemoveFlaggedOrders removes "flagged_orders" edges to OrderInfo entities.
func (ofu *OrderFlagUpdate) RemoveFlaggedOrders(o ...*OrderInfo) *OrderFlagUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ofu.RemoveFlaggedOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ofu *OrderFlagUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ofu.sqlSave, ofu.mutation, ofu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ofu *OrderFlagUpdate) SaveX(ctx context.Context) int {
	affected, err := ofu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ofu *OrderFlagUpdate) Exec(ctx context.Context) error {
	_, err := ofu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ofu *OrderFlagUpdate) ExecX(ctx context.Context) {
	if err := ofu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ofu *OrderFlagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderflag.Table, orderflag.Columns, sqlgraph.NewFieldSpec(orderflag.FieldID, field.TypeInt))
	if ps := ofu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ofu.mutation.OrderFlagName(); ok {
		_spec.SetField(orderflag.FieldOrderFlagName, field.TypeString, value)
	}
	if value, ok := ofu.mutation.OrderFlagDescription(); ok {
		_spec.SetField(orderflag.FieldOrderFlagDescription, field.TypeString, value)
	}
	if ofu.mutation.OrderFlagDescriptionCleared() {
		_spec.ClearField(orderflag.FieldOrderFlagDescription, field.TypeString)
	}
	if value, ok := ofu.mutation.OrderFlagDisplayName(); ok {
		_spec.SetField(orderflag.FieldOrderFlagDisplayName, field.TypeString, value)
	}
	if ofu.mutation.OrderFlagDisplayNameCleared() {
		_spec.ClearField(orderflag.FieldOrderFlagDisplayName, field.TypeString)
	}
	if value, ok := ofu.mutation.OrderFlagIsActive(); ok {
		_spec.SetField(orderflag.FieldOrderFlagIsActive, field.TypeBool, value)
	}
	if value, ok := ofu.mutation.OrderFlagCreatedAt(); ok {
		_spec.SetField(orderflag.FieldOrderFlagCreatedAt, field.TypeTime, value)
	}
	if value, ok := ofu.mutation.OrderFlagColor(); ok {
		_spec.SetField(orderflag.FieldOrderFlagColor, field.TypeString, value)
	}
	if ofu.mutation.OrderFlagColorCleared() {
		_spec.ClearField(orderflag.FieldOrderFlagColor, field.TypeString)
	}
	if value, ok := ofu.mutation.OrderFlagedBy(); ok {
		_spec.SetField(orderflag.FieldOrderFlagedBy, field.TypeString, value)
	}
	if ofu.mutation.OrderFlagedByCleared() {
		_spec.ClearField(orderflag.FieldOrderFlagedBy, field.TypeString)
	}
	if value, ok := ofu.mutation.OrderFlagAllowDuplicatesUnderSameCategory(); ok {
		_spec.SetField(orderflag.FieldOrderFlagAllowDuplicatesUnderSameCategory, field.TypeBool, value)
	}
	if value, ok := ofu.mutation.OrderFlagCategory(); ok {
		_spec.SetField(orderflag.FieldOrderFlagCategory, field.TypeString, value)
	}
	if ofu.mutation.OrderFlagCategoryCleared() {
		_spec.ClearField(orderflag.FieldOrderFlagCategory, field.TypeString)
	}
	if value, ok := ofu.mutation.OrderFlagLevel(); ok {
		_spec.SetField(orderflag.FieldOrderFlagLevel, field.TypeInt, value)
	}
	if value, ok := ofu.mutation.AddedOrderFlagLevel(); ok {
		_spec.AddField(orderflag.FieldOrderFlagLevel, field.TypeInt, value)
	}
	if ofu.mutation.FlaggedOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orderflag.FlaggedOrdersTable,
			Columns: orderflag.FlaggedOrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ofu.mutation.RemovedFlaggedOrdersIDs(); len(nodes) > 0 && !ofu.mutation.FlaggedOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orderflag.FlaggedOrdersTable,
			Columns: orderflag.FlaggedOrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ofu.mutation.FlaggedOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orderflag.FlaggedOrdersTable,
			Columns: orderflag.FlaggedOrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ofu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderflag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ofu.mutation.done = true
	return n, nil
}

// OrderFlagUpdateOne is the builder for updating a single OrderFlag entity.
type OrderFlagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderFlagMutation
}

// SetOrderFlagName sets the "order_flag_name" field.
func (ofuo *OrderFlagUpdateOne) SetOrderFlagName(s string) *OrderFlagUpdateOne {
	ofuo.mutation.SetOrderFlagName(s)
	return ofuo
}

// SetNillableOrderFlagName sets the "order_flag_name" field if the given value is not nil.
func (ofuo *OrderFlagUpdateOne) SetNillableOrderFlagName(s *string) *OrderFlagUpdateOne {
	if s != nil {
		ofuo.SetOrderFlagName(*s)
	}
	return ofuo
}

// SetOrderFlagDescription sets the "order_flag_description" field.
func (ofuo *OrderFlagUpdateOne) SetOrderFlagDescription(s string) *OrderFlagUpdateOne {
	ofuo.mutation.SetOrderFlagDescription(s)
	return ofuo
}

// SetNillableOrderFlagDescription sets the "order_flag_description" field if the given value is not nil.
func (ofuo *OrderFlagUpdateOne) SetNillableOrderFlagDescription(s *string) *OrderFlagUpdateOne {
	if s != nil {
		ofuo.SetOrderFlagDescription(*s)
	}
	return ofuo
}

// ClearOrderFlagDescription clears the value of the "order_flag_description" field.
func (ofuo *OrderFlagUpdateOne) ClearOrderFlagDescription() *OrderFlagUpdateOne {
	ofuo.mutation.ClearOrderFlagDescription()
	return ofuo
}

// SetOrderFlagDisplayName sets the "order_flag_display_name" field.
func (ofuo *OrderFlagUpdateOne) SetOrderFlagDisplayName(s string) *OrderFlagUpdateOne {
	ofuo.mutation.SetOrderFlagDisplayName(s)
	return ofuo
}

// SetNillableOrderFlagDisplayName sets the "order_flag_display_name" field if the given value is not nil.
func (ofuo *OrderFlagUpdateOne) SetNillableOrderFlagDisplayName(s *string) *OrderFlagUpdateOne {
	if s != nil {
		ofuo.SetOrderFlagDisplayName(*s)
	}
	return ofuo
}

// ClearOrderFlagDisplayName clears the value of the "order_flag_display_name" field.
func (ofuo *OrderFlagUpdateOne) ClearOrderFlagDisplayName() *OrderFlagUpdateOne {
	ofuo.mutation.ClearOrderFlagDisplayName()
	return ofuo
}

// SetOrderFlagIsActive sets the "order_flag_is_active" field.
func (ofuo *OrderFlagUpdateOne) SetOrderFlagIsActive(b bool) *OrderFlagUpdateOne {
	ofuo.mutation.SetOrderFlagIsActive(b)
	return ofuo
}

// SetNillableOrderFlagIsActive sets the "order_flag_is_active" field if the given value is not nil.
func (ofuo *OrderFlagUpdateOne) SetNillableOrderFlagIsActive(b *bool) *OrderFlagUpdateOne {
	if b != nil {
		ofuo.SetOrderFlagIsActive(*b)
	}
	return ofuo
}

// SetOrderFlagCreatedAt sets the "order_flag_created_at" field.
func (ofuo *OrderFlagUpdateOne) SetOrderFlagCreatedAt(t time.Time) *OrderFlagUpdateOne {
	ofuo.mutation.SetOrderFlagCreatedAt(t)
	return ofuo
}

// SetNillableOrderFlagCreatedAt sets the "order_flag_created_at" field if the given value is not nil.
func (ofuo *OrderFlagUpdateOne) SetNillableOrderFlagCreatedAt(t *time.Time) *OrderFlagUpdateOne {
	if t != nil {
		ofuo.SetOrderFlagCreatedAt(*t)
	}
	return ofuo
}

// SetOrderFlagColor sets the "order_flag_color" field.
func (ofuo *OrderFlagUpdateOne) SetOrderFlagColor(s string) *OrderFlagUpdateOne {
	ofuo.mutation.SetOrderFlagColor(s)
	return ofuo
}

// SetNillableOrderFlagColor sets the "order_flag_color" field if the given value is not nil.
func (ofuo *OrderFlagUpdateOne) SetNillableOrderFlagColor(s *string) *OrderFlagUpdateOne {
	if s != nil {
		ofuo.SetOrderFlagColor(*s)
	}
	return ofuo
}

// ClearOrderFlagColor clears the value of the "order_flag_color" field.
func (ofuo *OrderFlagUpdateOne) ClearOrderFlagColor() *OrderFlagUpdateOne {
	ofuo.mutation.ClearOrderFlagColor()
	return ofuo
}

// SetOrderFlagedBy sets the "order_flaged_by" field.
func (ofuo *OrderFlagUpdateOne) SetOrderFlagedBy(s string) *OrderFlagUpdateOne {
	ofuo.mutation.SetOrderFlagedBy(s)
	return ofuo
}

// SetNillableOrderFlagedBy sets the "order_flaged_by" field if the given value is not nil.
func (ofuo *OrderFlagUpdateOne) SetNillableOrderFlagedBy(s *string) *OrderFlagUpdateOne {
	if s != nil {
		ofuo.SetOrderFlagedBy(*s)
	}
	return ofuo
}

// ClearOrderFlagedBy clears the value of the "order_flaged_by" field.
func (ofuo *OrderFlagUpdateOne) ClearOrderFlagedBy() *OrderFlagUpdateOne {
	ofuo.mutation.ClearOrderFlagedBy()
	return ofuo
}

// SetOrderFlagAllowDuplicatesUnderSameCategory sets the "order_flag_allow_duplicates_under_same_category" field.
func (ofuo *OrderFlagUpdateOne) SetOrderFlagAllowDuplicatesUnderSameCategory(b bool) *OrderFlagUpdateOne {
	ofuo.mutation.SetOrderFlagAllowDuplicatesUnderSameCategory(b)
	return ofuo
}

// SetNillableOrderFlagAllowDuplicatesUnderSameCategory sets the "order_flag_allow_duplicates_under_same_category" field if the given value is not nil.
func (ofuo *OrderFlagUpdateOne) SetNillableOrderFlagAllowDuplicatesUnderSameCategory(b *bool) *OrderFlagUpdateOne {
	if b != nil {
		ofuo.SetOrderFlagAllowDuplicatesUnderSameCategory(*b)
	}
	return ofuo
}

// SetOrderFlagCategory sets the "order_flag_category" field.
func (ofuo *OrderFlagUpdateOne) SetOrderFlagCategory(s string) *OrderFlagUpdateOne {
	ofuo.mutation.SetOrderFlagCategory(s)
	return ofuo
}

// SetNillableOrderFlagCategory sets the "order_flag_category" field if the given value is not nil.
func (ofuo *OrderFlagUpdateOne) SetNillableOrderFlagCategory(s *string) *OrderFlagUpdateOne {
	if s != nil {
		ofuo.SetOrderFlagCategory(*s)
	}
	return ofuo
}

// ClearOrderFlagCategory clears the value of the "order_flag_category" field.
func (ofuo *OrderFlagUpdateOne) ClearOrderFlagCategory() *OrderFlagUpdateOne {
	ofuo.mutation.ClearOrderFlagCategory()
	return ofuo
}

// SetOrderFlagLevel sets the "order_flag_level" field.
func (ofuo *OrderFlagUpdateOne) SetOrderFlagLevel(i int) *OrderFlagUpdateOne {
	ofuo.mutation.ResetOrderFlagLevel()
	ofuo.mutation.SetOrderFlagLevel(i)
	return ofuo
}

// SetNillableOrderFlagLevel sets the "order_flag_level" field if the given value is not nil.
func (ofuo *OrderFlagUpdateOne) SetNillableOrderFlagLevel(i *int) *OrderFlagUpdateOne {
	if i != nil {
		ofuo.SetOrderFlagLevel(*i)
	}
	return ofuo
}

// AddOrderFlagLevel adds i to the "order_flag_level" field.
func (ofuo *OrderFlagUpdateOne) AddOrderFlagLevel(i int) *OrderFlagUpdateOne {
	ofuo.mutation.AddOrderFlagLevel(i)
	return ofuo
}

// AddFlaggedOrderIDs adds the "flagged_orders" edge to the OrderInfo entity by IDs.
func (ofuo *OrderFlagUpdateOne) AddFlaggedOrderIDs(ids ...int) *OrderFlagUpdateOne {
	ofuo.mutation.AddFlaggedOrderIDs(ids...)
	return ofuo
}

// AddFlaggedOrders adds the "flagged_orders" edges to the OrderInfo entity.
func (ofuo *OrderFlagUpdateOne) AddFlaggedOrders(o ...*OrderInfo) *OrderFlagUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ofuo.AddFlaggedOrderIDs(ids...)
}

// Mutation returns the OrderFlagMutation object of the builder.
func (ofuo *OrderFlagUpdateOne) Mutation() *OrderFlagMutation {
	return ofuo.mutation
}

// ClearFlaggedOrders clears all "flagged_orders" edges to the OrderInfo entity.
func (ofuo *OrderFlagUpdateOne) ClearFlaggedOrders() *OrderFlagUpdateOne {
	ofuo.mutation.ClearFlaggedOrders()
	return ofuo
}

// RemoveFlaggedOrderIDs removes the "flagged_orders" edge to OrderInfo entities by IDs.
func (ofuo *OrderFlagUpdateOne) RemoveFlaggedOrderIDs(ids ...int) *OrderFlagUpdateOne {
	ofuo.mutation.RemoveFlaggedOrderIDs(ids...)
	return ofuo
}

// RemoveFlaggedOrders removes "flagged_orders" edges to OrderInfo entities.
func (ofuo *OrderFlagUpdateOne) RemoveFlaggedOrders(o ...*OrderInfo) *OrderFlagUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ofuo.RemoveFlaggedOrderIDs(ids...)
}

// Where appends a list predicates to the OrderFlagUpdate builder.
func (ofuo *OrderFlagUpdateOne) Where(ps ...predicate.OrderFlag) *OrderFlagUpdateOne {
	ofuo.mutation.Where(ps...)
	return ofuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ofuo *OrderFlagUpdateOne) Select(field string, fields ...string) *OrderFlagUpdateOne {
	ofuo.fields = append([]string{field}, fields...)
	return ofuo
}

// Save executes the query and returns the updated OrderFlag entity.
func (ofuo *OrderFlagUpdateOne) Save(ctx context.Context) (*OrderFlag, error) {
	return withHooks(ctx, ofuo.sqlSave, ofuo.mutation, ofuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ofuo *OrderFlagUpdateOne) SaveX(ctx context.Context) *OrderFlag {
	node, err := ofuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ofuo *OrderFlagUpdateOne) Exec(ctx context.Context) error {
	_, err := ofuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ofuo *OrderFlagUpdateOne) ExecX(ctx context.Context) {
	if err := ofuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ofuo *OrderFlagUpdateOne) sqlSave(ctx context.Context) (_node *OrderFlag, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderflag.Table, orderflag.Columns, sqlgraph.NewFieldSpec(orderflag.FieldID, field.TypeInt))
	id, ok := ofuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderFlag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ofuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderflag.FieldID)
		for _, f := range fields {
			if !orderflag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderflag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ofuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ofuo.mutation.OrderFlagName(); ok {
		_spec.SetField(orderflag.FieldOrderFlagName, field.TypeString, value)
	}
	if value, ok := ofuo.mutation.OrderFlagDescription(); ok {
		_spec.SetField(orderflag.FieldOrderFlagDescription, field.TypeString, value)
	}
	if ofuo.mutation.OrderFlagDescriptionCleared() {
		_spec.ClearField(orderflag.FieldOrderFlagDescription, field.TypeString)
	}
	if value, ok := ofuo.mutation.OrderFlagDisplayName(); ok {
		_spec.SetField(orderflag.FieldOrderFlagDisplayName, field.TypeString, value)
	}
	if ofuo.mutation.OrderFlagDisplayNameCleared() {
		_spec.ClearField(orderflag.FieldOrderFlagDisplayName, field.TypeString)
	}
	if value, ok := ofuo.mutation.OrderFlagIsActive(); ok {
		_spec.SetField(orderflag.FieldOrderFlagIsActive, field.TypeBool, value)
	}
	if value, ok := ofuo.mutation.OrderFlagCreatedAt(); ok {
		_spec.SetField(orderflag.FieldOrderFlagCreatedAt, field.TypeTime, value)
	}
	if value, ok := ofuo.mutation.OrderFlagColor(); ok {
		_spec.SetField(orderflag.FieldOrderFlagColor, field.TypeString, value)
	}
	if ofuo.mutation.OrderFlagColorCleared() {
		_spec.ClearField(orderflag.FieldOrderFlagColor, field.TypeString)
	}
	if value, ok := ofuo.mutation.OrderFlagedBy(); ok {
		_spec.SetField(orderflag.FieldOrderFlagedBy, field.TypeString, value)
	}
	if ofuo.mutation.OrderFlagedByCleared() {
		_spec.ClearField(orderflag.FieldOrderFlagedBy, field.TypeString)
	}
	if value, ok := ofuo.mutation.OrderFlagAllowDuplicatesUnderSameCategory(); ok {
		_spec.SetField(orderflag.FieldOrderFlagAllowDuplicatesUnderSameCategory, field.TypeBool, value)
	}
	if value, ok := ofuo.mutation.OrderFlagCategory(); ok {
		_spec.SetField(orderflag.FieldOrderFlagCategory, field.TypeString, value)
	}
	if ofuo.mutation.OrderFlagCategoryCleared() {
		_spec.ClearField(orderflag.FieldOrderFlagCategory, field.TypeString)
	}
	if value, ok := ofuo.mutation.OrderFlagLevel(); ok {
		_spec.SetField(orderflag.FieldOrderFlagLevel, field.TypeInt, value)
	}
	if value, ok := ofuo.mutation.AddedOrderFlagLevel(); ok {
		_spec.AddField(orderflag.FieldOrderFlagLevel, field.TypeInt, value)
	}
	if ofuo.mutation.FlaggedOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orderflag.FlaggedOrdersTable,
			Columns: orderflag.FlaggedOrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ofuo.mutation.RemovedFlaggedOrdersIDs(); len(nodes) > 0 && !ofuo.mutation.FlaggedOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orderflag.FlaggedOrdersTable,
			Columns: orderflag.FlaggedOrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ofuo.mutation.FlaggedOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orderflag.FlaggedOrdersTable,
			Columns: orderflag.FlaggedOrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderFlag{config: ofuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ofuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderflag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ofuo.mutation.done = true
	return _node, nil
}
