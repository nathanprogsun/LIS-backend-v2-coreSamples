// Code generated by ent, DO NOT EDIT.

package tubereceive

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tubereceive type in the database.
	Label = "tube_receive"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSampleID holds the string denoting the sample_id field in the database.
	FieldSampleID = "sample_id"
	// FieldTubeType holds the string denoting the tube_type field in the database.
	FieldTubeType = "tube_type"
	// FieldReceivedCount holds the string denoting the received_count field in the database.
	FieldReceivedCount = "received_count"
	// FieldReceivedTime holds the string denoting the received_time field in the database.
	FieldReceivedTime = "received_time"
	// FieldReceivedBy holds the string denoting the received_by field in the database.
	FieldReceivedBy = "received_by"
	// FieldModifiedBy holds the string denoting the modified_by field in the database.
	FieldModifiedBy = "modified_by"
	// FieldModifiedTime holds the string denoting the modified_time field in the database.
	FieldModifiedTime = "modified_time"
	// FieldCollectionTime holds the string denoting the collection_time field in the database.
	FieldCollectionTime = "collection_time"
	// FieldIsRedraw holds the string denoting the is_redraw field in the database.
	FieldIsRedraw = "is_redraw"
	// FieldIsRerun holds the string denoting the is_rerun field in the database.
	FieldIsRerun = "is_rerun"
	// EdgeSample holds the string denoting the sample edge name in mutations.
	EdgeSample = "sample"
	// SampleFieldID holds the string denoting the ID field of the Sample.
	SampleFieldID = "sample_id"
	// Table holds the table name of the tubereceive in the database.
	Table = "tube_receive"
	// SampleTable is the table that holds the sample relation/edge.
	SampleTable = "tube_receive"
	// SampleInverseTable is the table name for the Sample entity.
	// It exists in this package in order to avoid circular dependency with the "sample" package.
	SampleInverseTable = "sample"
	// SampleColumn is the table column denoting the sample relation/edge.
	SampleColumn = "sample_id"
)

// Columns holds all SQL columns for tubereceive fields.
var Columns = []string{
	FieldID,
	FieldSampleID,
	FieldTubeType,
	FieldReceivedCount,
	FieldReceivedTime,
	FieldReceivedBy,
	FieldModifiedBy,
	FieldModifiedTime,
	FieldCollectionTime,
	FieldIsRedraw,
	FieldIsRerun,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultReceivedTime holds the default value on creation for the "received_time" field.
	DefaultReceivedTime func() time.Time
	// UpdateDefaultModifiedTime holds the default value on update for the "modified_time" field.
	UpdateDefaultModifiedTime func() time.Time
	// DefaultCollectionTime holds the default value on creation for the "collection_time" field.
	DefaultCollectionTime func() time.Time
	// DefaultIsRedraw holds the default value on creation for the "is_redraw" field.
	DefaultIsRedraw bool
	// DefaultIsRerun holds the default value on creation for the "is_rerun" field.
	DefaultIsRerun bool
)

// OrderOption defines the ordering options for the TubeReceive queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySampleID orders the results by the sample_id field.
func BySampleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSampleID, opts...).ToFunc()
}

// ByTubeType orders the results by the tube_type field.
func ByTubeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTubeType, opts...).ToFunc()
}

// ByReceivedCount orders the results by the received_count field.
func ByReceivedCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceivedCount, opts...).ToFunc()
}

// ByReceivedTime orders the results by the received_time field.
func ByReceivedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceivedTime, opts...).ToFunc()
}

// ByReceivedBy orders the results by the received_by field.
func ByReceivedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceivedBy, opts...).ToFunc()
}

// ByModifiedBy orders the results by the modified_by field.
func ByModifiedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedBy, opts...).ToFunc()
}

// ByModifiedTime orders the results by the modified_time field.
func ByModifiedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedTime, opts...).ToFunc()
}

// ByCollectionTime orders the results by the collection_time field.
func ByCollectionTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollectionTime, opts...).ToFunc()
}

// ByIsRedraw orders the results by the is_redraw field.
func ByIsRedraw(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRedraw, opts...).ToFunc()
}

// ByIsRerun orders the results by the is_rerun field.
func ByIsRerun(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRerun, opts...).ToFunc()
}

// BySampleField orders the results by sample field.
func BySampleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSampleStep(), sql.OrderByField(field, opts...))
	}
}
func newSampleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SampleInverseTable, SampleFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SampleTable, SampleColumn),
	)
}
