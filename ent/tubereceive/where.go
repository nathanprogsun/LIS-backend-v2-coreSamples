// Code generated by ent, DO NOT EDIT.

package tubereceive

import (
	"coresamples/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldLTE(FieldID, id))
}

// SampleID applies equality check predicate on the "sample_id" field. It's identical to SampleIDEQ.
func SampleID(v int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldSampleID, v))
}

// TubeType applies equality check predicate on the "tube_type" field. It's identical to TubeTypeEQ.
func TubeType(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldTubeType, v))
}

// ReceivedCount applies equality check predicate on the "received_count" field. It's identical to ReceivedCountEQ.
func ReceivedCount(v int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldReceivedCount, v))
}

// ReceivedTime applies equality check predicate on the "received_time" field. It's identical to ReceivedTimeEQ.
func ReceivedTime(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldReceivedTime, v))
}

// ReceivedBy applies equality check predicate on the "received_by" field. It's identical to ReceivedByEQ.
func ReceivedBy(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldReceivedBy, v))
}

// ModifiedBy applies equality check predicate on the "modified_by" field. It's identical to ModifiedByEQ.
func ModifiedBy(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldModifiedBy, v))
}

// ModifiedTime applies equality check predicate on the "modified_time" field. It's identical to ModifiedTimeEQ.
func ModifiedTime(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldModifiedTime, v))
}

// CollectionTime applies equality check predicate on the "collection_time" field. It's identical to CollectionTimeEQ.
func CollectionTime(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldCollectionTime, v))
}

// IsRedraw applies equality check predicate on the "is_redraw" field. It's identical to IsRedrawEQ.
func IsRedraw(v bool) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldIsRedraw, v))
}

// IsRerun applies equality check predicate on the "is_rerun" field. It's identical to IsRerunEQ.
func IsRerun(v bool) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldIsRerun, v))
}

// SampleIDEQ applies the EQ predicate on the "sample_id" field.
func SampleIDEQ(v int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldSampleID, v))
}

// SampleIDNEQ applies the NEQ predicate on the "sample_id" field.
func SampleIDNEQ(v int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNEQ(FieldSampleID, v))
}

// SampleIDIn applies the In predicate on the "sample_id" field.
func SampleIDIn(vs ...int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldIn(FieldSampleID, vs...))
}

// SampleIDNotIn applies the NotIn predicate on the "sample_id" field.
func SampleIDNotIn(vs ...int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNotIn(FieldSampleID, vs...))
}

// TubeTypeEQ applies the EQ predicate on the "tube_type" field.
func TubeTypeEQ(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldTubeType, v))
}

// TubeTypeNEQ applies the NEQ predicate on the "tube_type" field.
func TubeTypeNEQ(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNEQ(FieldTubeType, v))
}

// TubeTypeIn applies the In predicate on the "tube_type" field.
func TubeTypeIn(vs ...string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldIn(FieldTubeType, vs...))
}

// TubeTypeNotIn applies the NotIn predicate on the "tube_type" field.
func TubeTypeNotIn(vs ...string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNotIn(FieldTubeType, vs...))
}

// TubeTypeGT applies the GT predicate on the "tube_type" field.
func TubeTypeGT(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldGT(FieldTubeType, v))
}

// TubeTypeGTE applies the GTE predicate on the "tube_type" field.
func TubeTypeGTE(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldGTE(FieldTubeType, v))
}

// TubeTypeLT applies the LT predicate on the "tube_type" field.
func TubeTypeLT(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldLT(FieldTubeType, v))
}

// TubeTypeLTE applies the LTE predicate on the "tube_type" field.
func TubeTypeLTE(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldLTE(FieldTubeType, v))
}

// TubeTypeContains applies the Contains predicate on the "tube_type" field.
func TubeTypeContains(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldContains(FieldTubeType, v))
}

// TubeTypeHasPrefix applies the HasPrefix predicate on the "tube_type" field.
func TubeTypeHasPrefix(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldHasPrefix(FieldTubeType, v))
}

// TubeTypeHasSuffix applies the HasSuffix predicate on the "tube_type" field.
func TubeTypeHasSuffix(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldHasSuffix(FieldTubeType, v))
}

// TubeTypeEqualFold applies the EqualFold predicate on the "tube_type" field.
func TubeTypeEqualFold(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEqualFold(FieldTubeType, v))
}

// TubeTypeContainsFold applies the ContainsFold predicate on the "tube_type" field.
func TubeTypeContainsFold(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldContainsFold(FieldTubeType, v))
}

// ReceivedCountEQ applies the EQ predicate on the "received_count" field.
func ReceivedCountEQ(v int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldReceivedCount, v))
}

// ReceivedCountNEQ applies the NEQ predicate on the "received_count" field.
func ReceivedCountNEQ(v int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNEQ(FieldReceivedCount, v))
}

// ReceivedCountIn applies the In predicate on the "received_count" field.
func ReceivedCountIn(vs ...int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldIn(FieldReceivedCount, vs...))
}

// ReceivedCountNotIn applies the NotIn predicate on the "received_count" field.
func ReceivedCountNotIn(vs ...int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNotIn(FieldReceivedCount, vs...))
}

// ReceivedCountGT applies the GT predicate on the "received_count" field.
func ReceivedCountGT(v int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldGT(FieldReceivedCount, v))
}

// ReceivedCountGTE applies the GTE predicate on the "received_count" field.
func ReceivedCountGTE(v int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldGTE(FieldReceivedCount, v))
}

// ReceivedCountLT applies the LT predicate on the "received_count" field.
func ReceivedCountLT(v int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldLT(FieldReceivedCount, v))
}

// ReceivedCountLTE applies the LTE predicate on the "received_count" field.
func ReceivedCountLTE(v int) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldLTE(FieldReceivedCount, v))
}

// ReceivedTimeEQ applies the EQ predicate on the "received_time" field.
func ReceivedTimeEQ(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldReceivedTime, v))
}

// ReceivedTimeNEQ applies the NEQ predicate on the "received_time" field.
func ReceivedTimeNEQ(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNEQ(FieldReceivedTime, v))
}

// ReceivedTimeIn applies the In predicate on the "received_time" field.
func ReceivedTimeIn(vs ...time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldIn(FieldReceivedTime, vs...))
}

// ReceivedTimeNotIn applies the NotIn predicate on the "received_time" field.
func ReceivedTimeNotIn(vs ...time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNotIn(FieldReceivedTime, vs...))
}

// ReceivedTimeGT applies the GT predicate on the "received_time" field.
func ReceivedTimeGT(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldGT(FieldReceivedTime, v))
}

// ReceivedTimeGTE applies the GTE predicate on the "received_time" field.
func ReceivedTimeGTE(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldGTE(FieldReceivedTime, v))
}

// ReceivedTimeLT applies the LT predicate on the "received_time" field.
func ReceivedTimeLT(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldLT(FieldReceivedTime, v))
}

// ReceivedTimeLTE applies the LTE predicate on the "received_time" field.
func ReceivedTimeLTE(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldLTE(FieldReceivedTime, v))
}

// ReceivedByEQ applies the EQ predicate on the "received_by" field.
func ReceivedByEQ(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldReceivedBy, v))
}

// ReceivedByNEQ applies the NEQ predicate on the "received_by" field.
func ReceivedByNEQ(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNEQ(FieldReceivedBy, v))
}

// ReceivedByIn applies the In predicate on the "received_by" field.
func ReceivedByIn(vs ...string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldIn(FieldReceivedBy, vs...))
}

// ReceivedByNotIn applies the NotIn predicate on the "received_by" field.
func ReceivedByNotIn(vs ...string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNotIn(FieldReceivedBy, vs...))
}

// ReceivedByGT applies the GT predicate on the "received_by" field.
func ReceivedByGT(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldGT(FieldReceivedBy, v))
}

// ReceivedByGTE applies the GTE predicate on the "received_by" field.
func ReceivedByGTE(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldGTE(FieldReceivedBy, v))
}

// ReceivedByLT applies the LT predicate on the "received_by" field.
func ReceivedByLT(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldLT(FieldReceivedBy, v))
}

// ReceivedByLTE applies the LTE predicate on the "received_by" field.
func ReceivedByLTE(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldLTE(FieldReceivedBy, v))
}

// ReceivedByContains applies the Contains predicate on the "received_by" field.
func ReceivedByContains(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldContains(FieldReceivedBy, v))
}

// ReceivedByHasPrefix applies the HasPrefix predicate on the "received_by" field.
func ReceivedByHasPrefix(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldHasPrefix(FieldReceivedBy, v))
}

// ReceivedByHasSuffix applies the HasSuffix predicate on the "received_by" field.
func ReceivedByHasSuffix(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldHasSuffix(FieldReceivedBy, v))
}

// ReceivedByEqualFold applies the EqualFold predicate on the "received_by" field.
func ReceivedByEqualFold(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEqualFold(FieldReceivedBy, v))
}

// ReceivedByContainsFold applies the ContainsFold predicate on the "received_by" field.
func ReceivedByContainsFold(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldContainsFold(FieldReceivedBy, v))
}

// ModifiedByEQ applies the EQ predicate on the "modified_by" field.
func ModifiedByEQ(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldModifiedBy, v))
}

// ModifiedByNEQ applies the NEQ predicate on the "modified_by" field.
func ModifiedByNEQ(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNEQ(FieldModifiedBy, v))
}

// ModifiedByIn applies the In predicate on the "modified_by" field.
func ModifiedByIn(vs ...string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldIn(FieldModifiedBy, vs...))
}

// ModifiedByNotIn applies the NotIn predicate on the "modified_by" field.
func ModifiedByNotIn(vs ...string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNotIn(FieldModifiedBy, vs...))
}

// ModifiedByGT applies the GT predicate on the "modified_by" field.
func ModifiedByGT(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldGT(FieldModifiedBy, v))
}

// ModifiedByGTE applies the GTE predicate on the "modified_by" field.
func ModifiedByGTE(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldGTE(FieldModifiedBy, v))
}

// ModifiedByLT applies the LT predicate on the "modified_by" field.
func ModifiedByLT(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldLT(FieldModifiedBy, v))
}

// ModifiedByLTE applies the LTE predicate on the "modified_by" field.
func ModifiedByLTE(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldLTE(FieldModifiedBy, v))
}

// ModifiedByContains applies the Contains predicate on the "modified_by" field.
func ModifiedByContains(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldContains(FieldModifiedBy, v))
}

// ModifiedByHasPrefix applies the HasPrefix predicate on the "modified_by" field.
func ModifiedByHasPrefix(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldHasPrefix(FieldModifiedBy, v))
}

// ModifiedByHasSuffix applies the HasSuffix predicate on the "modified_by" field.
func ModifiedByHasSuffix(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldHasSuffix(FieldModifiedBy, v))
}

// ModifiedByIsNil applies the IsNil predicate on the "modified_by" field.
func ModifiedByIsNil() predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldIsNull(FieldModifiedBy))
}

// ModifiedByNotNil applies the NotNil predicate on the "modified_by" field.
func ModifiedByNotNil() predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNotNull(FieldModifiedBy))
}

// ModifiedByEqualFold applies the EqualFold predicate on the "modified_by" field.
func ModifiedByEqualFold(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEqualFold(FieldModifiedBy, v))
}

// ModifiedByContainsFold applies the ContainsFold predicate on the "modified_by" field.
func ModifiedByContainsFold(v string) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldContainsFold(FieldModifiedBy, v))
}

// ModifiedTimeEQ applies the EQ predicate on the "modified_time" field.
func ModifiedTimeEQ(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldModifiedTime, v))
}

// ModifiedTimeNEQ applies the NEQ predicate on the "modified_time" field.
func ModifiedTimeNEQ(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNEQ(FieldModifiedTime, v))
}

// ModifiedTimeIn applies the In predicate on the "modified_time" field.
func ModifiedTimeIn(vs ...time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldIn(FieldModifiedTime, vs...))
}

// ModifiedTimeNotIn applies the NotIn predicate on the "modified_time" field.
func ModifiedTimeNotIn(vs ...time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNotIn(FieldModifiedTime, vs...))
}

// ModifiedTimeGT applies the GT predicate on the "modified_time" field.
func ModifiedTimeGT(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldGT(FieldModifiedTime, v))
}

// ModifiedTimeGTE applies the GTE predicate on the "modified_time" field.
func ModifiedTimeGTE(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldGTE(FieldModifiedTime, v))
}

// ModifiedTimeLT applies the LT predicate on the "modified_time" field.
func ModifiedTimeLT(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldLT(FieldModifiedTime, v))
}

// ModifiedTimeLTE applies the LTE predicate on the "modified_time" field.
func ModifiedTimeLTE(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldLTE(FieldModifiedTime, v))
}

// ModifiedTimeIsNil applies the IsNil predicate on the "modified_time" field.
func ModifiedTimeIsNil() predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldIsNull(FieldModifiedTime))
}

// ModifiedTimeNotNil applies the NotNil predicate on the "modified_time" field.
func ModifiedTimeNotNil() predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNotNull(FieldModifiedTime))
}

// CollectionTimeEQ applies the EQ predicate on the "collection_time" field.
func CollectionTimeEQ(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldCollectionTime, v))
}

// CollectionTimeNEQ applies the NEQ predicate on the "collection_time" field.
func CollectionTimeNEQ(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNEQ(FieldCollectionTime, v))
}

// CollectionTimeIn applies the In predicate on the "collection_time" field.
func CollectionTimeIn(vs ...time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldIn(FieldCollectionTime, vs...))
}

// CollectionTimeNotIn applies the NotIn predicate on the "collection_time" field.
func CollectionTimeNotIn(vs ...time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNotIn(FieldCollectionTime, vs...))
}

// CollectionTimeGT applies the GT predicate on the "collection_time" field.
func CollectionTimeGT(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldGT(FieldCollectionTime, v))
}

// CollectionTimeGTE applies the GTE predicate on the "collection_time" field.
func CollectionTimeGTE(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldGTE(FieldCollectionTime, v))
}

// CollectionTimeLT applies the LT predicate on the "collection_time" field.
func CollectionTimeLT(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldLT(FieldCollectionTime, v))
}

// CollectionTimeLTE applies the LTE predicate on the "collection_time" field.
func CollectionTimeLTE(v time.Time) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldLTE(FieldCollectionTime, v))
}

// IsRedrawEQ applies the EQ predicate on the "is_redraw" field.
func IsRedrawEQ(v bool) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldIsRedraw, v))
}

// IsRedrawNEQ applies the NEQ predicate on the "is_redraw" field.
func IsRedrawNEQ(v bool) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNEQ(FieldIsRedraw, v))
}

// IsRerunEQ applies the EQ predicate on the "is_rerun" field.
func IsRerunEQ(v bool) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldEQ(FieldIsRerun, v))
}

// IsRerunNEQ applies the NEQ predicate on the "is_rerun" field.
func IsRerunNEQ(v bool) predicate.TubeReceive {
	return predicate.TubeReceive(sql.FieldNEQ(FieldIsRerun, v))
}

// HasSample applies the HasEdge predicate on the "sample" edge.
func HasSample() predicate.TubeReceive {
	return predicate.TubeReceive(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SampleTable, SampleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSampleWith applies the HasEdge predicate on the "sample" edge with a given conditions (other predicates).
func HasSampleWith(preds ...predicate.Sample) predicate.TubeReceive {
	return predicate.TubeReceive(func(s *sql.Selector) {
		step := newSampleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TubeReceive) predicate.TubeReceive {
	return predicate.TubeReceive(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TubeReceive) predicate.TubeReceive {
	return predicate.TubeReceive(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TubeReceive) predicate.TubeReceive {
	return predicate.TubeReceive(sql.NotPredicates(p))
}
