// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/salesterritory"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SalesTerritoryUpdate is the builder for updating SalesTerritory entities.
type SalesTerritoryUpdate struct {
	config
	hooks    []Hook
	mutation *SalesTerritoryMutation
}

// Where appends a list predicates to the SalesTerritoryUpdate builder.
func (stu *SalesTerritoryUpdate) Where(ps ...predicate.SalesTerritory) *SalesTerritoryUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetSales sets the "sales" field.
func (stu *SalesTerritoryUpdate) SetSales(s string) *SalesTerritoryUpdate {
	stu.mutation.SetSales(s)
	return stu
}

// SetNillableSales sets the "sales" field if the given value is not nil.
func (stu *SalesTerritoryUpdate) SetNillableSales(s *string) *SalesTerritoryUpdate {
	if s != nil {
		stu.SetSales(*s)
	}
	return stu
}

// SetState sets the "state" field.
func (stu *SalesTerritoryUpdate) SetState(s string) *SalesTerritoryUpdate {
	stu.mutation.SetState(s)
	return stu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (stu *SalesTerritoryUpdate) SetNillableState(s *string) *SalesTerritoryUpdate {
	if s != nil {
		stu.SetState(*s)
	}
	return stu
}

// ClearState clears the value of the "state" field.
func (stu *SalesTerritoryUpdate) ClearState() *SalesTerritoryUpdate {
	stu.mutation.ClearState()
	return stu
}

// SetZipcode sets the "zipcode" field.
func (stu *SalesTerritoryUpdate) SetZipcode(i int) *SalesTerritoryUpdate {
	stu.mutation.ResetZipcode()
	stu.mutation.SetZipcode(i)
	return stu
}

// SetNillableZipcode sets the "zipcode" field if the given value is not nil.
func (stu *SalesTerritoryUpdate) SetNillableZipcode(i *int) *SalesTerritoryUpdate {
	if i != nil {
		stu.SetZipcode(*i)
	}
	return stu
}

// AddZipcode adds i to the "zipcode" field.
func (stu *SalesTerritoryUpdate) AddZipcode(i int) *SalesTerritoryUpdate {
	stu.mutation.AddZipcode(i)
	return stu
}

// ClearZipcode clears the value of the "zipcode" field.
func (stu *SalesTerritoryUpdate) ClearZipcode() *SalesTerritoryUpdate {
	stu.mutation.ClearZipcode()
	return stu
}

// SetCountry sets the "country" field.
func (stu *SalesTerritoryUpdate) SetCountry(s string) *SalesTerritoryUpdate {
	stu.mutation.SetCountry(s)
	return stu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (stu *SalesTerritoryUpdate) SetNillableCountry(s *string) *SalesTerritoryUpdate {
	if s != nil {
		stu.SetCountry(*s)
	}
	return stu
}

// ClearCountry clears the value of the "country" field.
func (stu *SalesTerritoryUpdate) ClearCountry() *SalesTerritoryUpdate {
	stu.mutation.ClearCountry()
	return stu
}

// SetUpdatedAt sets the "updatedAt" field.
func (stu *SalesTerritoryUpdate) SetUpdatedAt(t time.Time) *SalesTerritoryUpdate {
	stu.mutation.SetUpdatedAt(t)
	return stu
}

// ClearUpdatedAt clears the value of the "updatedAt" field.
func (stu *SalesTerritoryUpdate) ClearUpdatedAt() *SalesTerritoryUpdate {
	stu.mutation.ClearUpdatedAt()
	return stu
}

// Mutation returns the SalesTerritoryMutation object of the builder.
func (stu *SalesTerritoryUpdate) Mutation() *SalesTerritoryMutation {
	return stu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SalesTerritoryUpdate) Save(ctx context.Context) (int, error) {
	stu.defaults()
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SalesTerritoryUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SalesTerritoryUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SalesTerritoryUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *SalesTerritoryUpdate) defaults() {
	if _, ok := stu.mutation.UpdatedAt(); !ok && !stu.mutation.UpdatedAtCleared() {
		v := salesterritory.UpdateDefaultUpdatedAt()
		stu.mutation.SetUpdatedAt(v)
	}
}

func (stu *SalesTerritoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(salesterritory.Table, salesterritory.Columns, sqlgraph.NewFieldSpec(salesterritory.FieldID, field.TypeInt))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.Sales(); ok {
		_spec.SetField(salesterritory.FieldSales, field.TypeString, value)
	}
	if value, ok := stu.mutation.State(); ok {
		_spec.SetField(salesterritory.FieldState, field.TypeString, value)
	}
	if stu.mutation.StateCleared() {
		_spec.ClearField(salesterritory.FieldState, field.TypeString)
	}
	if value, ok := stu.mutation.Zipcode(); ok {
		_spec.SetField(salesterritory.FieldZipcode, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedZipcode(); ok {
		_spec.AddField(salesterritory.FieldZipcode, field.TypeInt, value)
	}
	if stu.mutation.ZipcodeCleared() {
		_spec.ClearField(salesterritory.FieldZipcode, field.TypeInt)
	}
	if value, ok := stu.mutation.Country(); ok {
		_spec.SetField(salesterritory.FieldCountry, field.TypeString, value)
	}
	if stu.mutation.CountryCleared() {
		_spec.ClearField(salesterritory.FieldCountry, field.TypeString)
	}
	if value, ok := stu.mutation.UpdatedAt(); ok {
		_spec.SetField(salesterritory.FieldUpdatedAt, field.TypeTime, value)
	}
	if stu.mutation.UpdatedAtCleared() {
		_spec.ClearField(salesterritory.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{salesterritory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// SalesTerritoryUpdateOne is the builder for updating a single SalesTerritory entity.
type SalesTerritoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SalesTerritoryMutation
}

// SetSales sets the "sales" field.
func (stuo *SalesTerritoryUpdateOne) SetSales(s string) *SalesTerritoryUpdateOne {
	stuo.mutation.SetSales(s)
	return stuo
}

// SetNillableSales sets the "sales" field if the given value is not nil.
func (stuo *SalesTerritoryUpdateOne) SetNillableSales(s *string) *SalesTerritoryUpdateOne {
	if s != nil {
		stuo.SetSales(*s)
	}
	return stuo
}

// SetState sets the "state" field.
func (stuo *SalesTerritoryUpdateOne) SetState(s string) *SalesTerritoryUpdateOne {
	stuo.mutation.SetState(s)
	return stuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (stuo *SalesTerritoryUpdateOne) SetNillableState(s *string) *SalesTerritoryUpdateOne {
	if s != nil {
		stuo.SetState(*s)
	}
	return stuo
}

// ClearState clears the value of the "state" field.
func (stuo *SalesTerritoryUpdateOne) ClearState() *SalesTerritoryUpdateOne {
	stuo.mutation.ClearState()
	return stuo
}

// SetZipcode sets the "zipcode" field.
func (stuo *SalesTerritoryUpdateOne) SetZipcode(i int) *SalesTerritoryUpdateOne {
	stuo.mutation.ResetZipcode()
	stuo.mutation.SetZipcode(i)
	return stuo
}

// SetNillableZipcode sets the "zipcode" field if the given value is not nil.
func (stuo *SalesTerritoryUpdateOne) SetNillableZipcode(i *int) *SalesTerritoryUpdateOne {
	if i != nil {
		stuo.SetZipcode(*i)
	}
	return stuo
}

// AddZipcode adds i to the "zipcode" field.
func (stuo *SalesTerritoryUpdateOne) AddZipcode(i int) *SalesTerritoryUpdateOne {
	stuo.mutation.AddZipcode(i)
	return stuo
}

// ClearZipcode clears the value of the "zipcode" field.
func (stuo *SalesTerritoryUpdateOne) ClearZipcode() *SalesTerritoryUpdateOne {
	stuo.mutation.ClearZipcode()
	return stuo
}

// SetCountry sets the "country" field.
func (stuo *SalesTerritoryUpdateOne) SetCountry(s string) *SalesTerritoryUpdateOne {
	stuo.mutation.SetCountry(s)
	return stuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (stuo *SalesTerritoryUpdateOne) SetNillableCountry(s *string) *SalesTerritoryUpdateOne {
	if s != nil {
		stuo.SetCountry(*s)
	}
	return stuo
}

// ClearCountry clears the value of the "country" field.
func (stuo *SalesTerritoryUpdateOne) ClearCountry() *SalesTerritoryUpdateOne {
	stuo.mutation.ClearCountry()
	return stuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (stuo *SalesTerritoryUpdateOne) SetUpdatedAt(t time.Time) *SalesTerritoryUpdateOne {
	stuo.mutation.SetUpdatedAt(t)
	return stuo
}

// ClearUpdatedAt clears the value of the "updatedAt" field.
func (stuo *SalesTerritoryUpdateOne) ClearUpdatedAt() *SalesTerritoryUpdateOne {
	stuo.mutation.ClearUpdatedAt()
	return stuo
}

// Mutation returns the SalesTerritoryMutation object of the builder.
func (stuo *SalesTerritoryUpdateOne) Mutation() *SalesTerritoryMutation {
	return stuo.mutation
}

// Where appends a list predicates to the SalesTerritoryUpdate builder.
func (stuo *SalesTerritoryUpdateOne) Where(ps ...predicate.SalesTerritory) *SalesTerritoryUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SalesTerritoryUpdateOne) Select(field string, fields ...string) *SalesTerritoryUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SalesTerritory entity.
func (stuo *SalesTerritoryUpdateOne) Save(ctx context.Context) (*SalesTerritory, error) {
	stuo.defaults()
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SalesTerritoryUpdateOne) SaveX(ctx context.Context) *SalesTerritory {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SalesTerritoryUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SalesTerritoryUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *SalesTerritoryUpdateOne) defaults() {
	if _, ok := stuo.mutation.UpdatedAt(); !ok && !stuo.mutation.UpdatedAtCleared() {
		v := salesterritory.UpdateDefaultUpdatedAt()
		stuo.mutation.SetUpdatedAt(v)
	}
}

func (stuo *SalesTerritoryUpdateOne) sqlSave(ctx context.Context) (_node *SalesTerritory, err error) {
	_spec := sqlgraph.NewUpdateSpec(salesterritory.Table, salesterritory.Columns, sqlgraph.NewFieldSpec(salesterritory.FieldID, field.TypeInt))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SalesTerritory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, salesterritory.FieldID)
		for _, f := range fields {
			if !salesterritory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != salesterritory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.Sales(); ok {
		_spec.SetField(salesterritory.FieldSales, field.TypeString, value)
	}
	if value, ok := stuo.mutation.State(); ok {
		_spec.SetField(salesterritory.FieldState, field.TypeString, value)
	}
	if stuo.mutation.StateCleared() {
		_spec.ClearField(salesterritory.FieldState, field.TypeString)
	}
	if value, ok := stuo.mutation.Zipcode(); ok {
		_spec.SetField(salesterritory.FieldZipcode, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedZipcode(); ok {
		_spec.AddField(salesterritory.FieldZipcode, field.TypeInt, value)
	}
	if stuo.mutation.ZipcodeCleared() {
		_spec.ClearField(salesterritory.FieldZipcode, field.TypeInt)
	}
	if value, ok := stuo.mutation.Country(); ok {
		_spec.SetField(salesterritory.FieldCountry, field.TypeString, value)
	}
	if stuo.mutation.CountryCleared() {
		_spec.ClearField(salesterritory.FieldCountry, field.TypeString)
	}
	if value, ok := stuo.mutation.UpdatedAt(); ok {
		_spec.SetField(salesterritory.FieldUpdatedAt, field.TypeTime, value)
	}
	if stuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(salesterritory.FieldUpdatedAt, field.TypeTime)
	}
	_node = &SalesTerritory{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{salesterritory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
