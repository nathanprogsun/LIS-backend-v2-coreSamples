// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/customer"
	"coresamples/ent/orderinfo"
	"coresamples/ent/patient"
	"coresamples/ent/sample"
	"coresamples/ent/tube"
	"coresamples/ent/tubereceive"
	"coresamples/ent/tuberequirement"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SampleCreate is the builder for creating a Sample entity.
type SampleCreate struct {
	config
	mutation *SampleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAccessionID sets the "accession_id" field.
func (sc *SampleCreate) SetAccessionID(s string) *SampleCreate {
	sc.mutation.SetAccessionID(s)
	return sc
}

// SetSampleStorage sets the "sample_storage" field.
func (sc *SampleCreate) SetSampleStorage(s string) *SampleCreate {
	sc.mutation.SetSampleStorage(s)
	return sc
}

// SetNillableSampleStorage sets the "sample_storage" field if the given value is not nil.
func (sc *SampleCreate) SetNillableSampleStorage(s *string) *SampleCreate {
	if s != nil {
		sc.SetSampleStorage(*s)
	}
	return sc
}

// SetTubeCount sets the "tube_count" field.
func (sc *SampleCreate) SetTubeCount(i int) *SampleCreate {
	sc.mutation.SetTubeCount(i)
	return sc
}

// SetNillableTubeCount sets the "tube_count" field if the given value is not nil.
func (sc *SampleCreate) SetNillableTubeCount(i *int) *SampleCreate {
	if i != nil {
		sc.SetTubeCount(*i)
	}
	return sc
}

// SetOrderID sets the "order_id" field.
func (sc *SampleCreate) SetOrderID(i int) *SampleCreate {
	sc.mutation.SetOrderID(i)
	return sc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (sc *SampleCreate) SetNillableOrderID(i *int) *SampleCreate {
	if i != nil {
		sc.SetOrderID(*i)
	}
	return sc
}

// SetPatientID sets the "patient_id" field.
func (sc *SampleCreate) SetPatientID(i int) *SampleCreate {
	sc.mutation.SetPatientID(i)
	return sc
}

// SetNillablePatientID sets the "patient_id" field if the given value is not nil.
func (sc *SampleCreate) SetNillablePatientID(i *int) *SampleCreate {
	if i != nil {
		sc.SetPatientID(*i)
	}
	return sc
}

// SetSampleOrderMethod sets the "sample_order_method" field.
func (sc *SampleCreate) SetSampleOrderMethod(s string) *SampleCreate {
	sc.mutation.SetSampleOrderMethod(s)
	return sc
}

// SetNillableSampleOrderMethod sets the "sample_order_method" field if the given value is not nil.
func (sc *SampleCreate) SetNillableSampleOrderMethod(s *string) *SampleCreate {
	if s != nil {
		sc.SetSampleOrderMethod(*s)
	}
	return sc
}

// SetSampleCollectionTime sets the "sample_collection_time" field.
func (sc *SampleCreate) SetSampleCollectionTime(t time.Time) *SampleCreate {
	sc.mutation.SetSampleCollectionTime(t)
	return sc
}

// SetNillableSampleCollectionTime sets the "sample_collection_time" field if the given value is not nil.
func (sc *SampleCreate) SetNillableSampleCollectionTime(t *time.Time) *SampleCreate {
	if t != nil {
		sc.SetSampleCollectionTime(*t)
	}
	return sc
}

// SetSampleReceivedTime sets the "sample_received_time" field.
func (sc *SampleCreate) SetSampleReceivedTime(t time.Time) *SampleCreate {
	sc.mutation.SetSampleReceivedTime(t)
	return sc
}

// SetNillableSampleReceivedTime sets the "sample_received_time" field if the given value is not nil.
func (sc *SampleCreate) SetNillableSampleReceivedTime(t *time.Time) *SampleCreate {
	if t != nil {
		sc.SetSampleReceivedTime(*t)
	}
	return sc
}

// SetSampleDescription sets the "sample_description" field.
func (sc *SampleCreate) SetSampleDescription(s string) *SampleCreate {
	sc.mutation.SetSampleDescription(s)
	return sc
}

// SetNillableSampleDescription sets the "sample_description" field if the given value is not nil.
func (sc *SampleCreate) SetNillableSampleDescription(s *string) *SampleCreate {
	if s != nil {
		sc.SetSampleDescription(*s)
	}
	return sc
}

// SetDelayedHours sets the "delayed_hours" field.
func (sc *SampleCreate) SetDelayedHours(i int) *SampleCreate {
	sc.mutation.SetDelayedHours(i)
	return sc
}

// SetSampleReportTime sets the "sample_report_time" field.
func (sc *SampleCreate) SetSampleReportTime(t time.Time) *SampleCreate {
	sc.mutation.SetSampleReportTime(t)
	return sc
}

// SetNillableSampleReportTime sets the "sample_report_time" field if the given value is not nil.
func (sc *SampleCreate) SetNillableSampleReportTime(t *time.Time) *SampleCreate {
	if t != nil {
		sc.SetSampleReportTime(*t)
	}
	return sc
}

// SetInternalReceivedTime sets the "internal_received_time" field.
func (sc *SampleCreate) SetInternalReceivedTime(t time.Time) *SampleCreate {
	sc.mutation.SetInternalReceivedTime(t)
	return sc
}

// SetNillableInternalReceivedTime sets the "internal_received_time" field if the given value is not nil.
func (sc *SampleCreate) SetNillableInternalReceivedTime(t *time.Time) *SampleCreate {
	if t != nil {
		sc.SetInternalReceivedTime(*t)
	}
	return sc
}

// SetSampleReportType sets the "sample_report_type" field.
func (sc *SampleCreate) SetSampleReportType(s string) *SampleCreate {
	sc.mutation.SetSampleReportType(s)
	return sc
}

// SetNillableSampleReportType sets the "sample_report_type" field if the given value is not nil.
func (sc *SampleCreate) SetNillableSampleReportType(s *string) *SampleCreate {
	if s != nil {
		sc.SetSampleReportType(*s)
	}
	return sc
}

// SetCustomerID sets the "customer_id" field.
func (sc *SampleCreate) SetCustomerID(i int) *SampleCreate {
	sc.mutation.SetCustomerID(i)
	return sc
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (sc *SampleCreate) SetNillableCustomerID(i *int) *SampleCreate {
	if i != nil {
		sc.SetCustomerID(*i)
	}
	return sc
}

// SetFastingHours sets the "fasting_hours" field.
func (sc *SampleCreate) SetFastingHours(f float64) *SampleCreate {
	sc.mutation.SetFastingHours(f)
	return sc
}

// SetNillableFastingHours sets the "fasting_hours" field if the given value is not nil.
func (sc *SampleCreate) SetNillableFastingHours(f *float64) *SampleCreate {
	if f != nil {
		sc.SetFastingHours(*f)
	}
	return sc
}

// SetFastingStatus sets the "fasting_status" field.
func (sc *SampleCreate) SetFastingStatus(s string) *SampleCreate {
	sc.mutation.SetFastingStatus(s)
	return sc
}

// SetNillableFastingStatus sets the "fasting_status" field if the given value is not nil.
func (sc *SampleCreate) SetNillableFastingStatus(s *string) *SampleCreate {
	if s != nil {
		sc.SetFastingStatus(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SampleCreate) SetID(i int) *SampleCreate {
	sc.mutation.SetID(i)
	return sc
}

// SetOrder sets the "order" edge to the OrderInfo entity.
func (sc *SampleCreate) SetOrder(o *OrderInfo) *SampleCreate {
	return sc.SetOrderID(o.ID)
}

// AddTubeIDs adds the "tubes" edge to the Tube entity by IDs.
func (sc *SampleCreate) AddTubeIDs(ids ...int) *SampleCreate {
	sc.mutation.AddTubeIDs(ids...)
	return sc
}

// AddTubes adds the "tubes" edges to the Tube entity.
func (sc *SampleCreate) AddTubes(t ...*Tube) *SampleCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return sc.AddTubeIDs(ids...)
}

// AddSampleReceiveRecordIDs adds the "sample_receive_records" edge to the TubeReceive entity by IDs.
func (sc *SampleCreate) AddSampleReceiveRecordIDs(ids ...int) *SampleCreate {
	sc.mutation.AddSampleReceiveRecordIDs(ids...)
	return sc
}

// AddSampleReceiveRecords adds the "sample_receive_records" edges to the TubeReceive entity.
func (sc *SampleCreate) AddSampleReceiveRecords(t ...*TubeReceive) *SampleCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return sc.AddSampleReceiveRecordIDs(ids...)
}

// AddSampleRequiredTubeIDs adds the "sample_required_tubes" edge to the TubeRequirement entity by IDs.
func (sc *SampleCreate) AddSampleRequiredTubeIDs(ids ...int) *SampleCreate {
	sc.mutation.AddSampleRequiredTubeIDs(ids...)
	return sc
}

// AddSampleRequiredTubes adds the "sample_required_tubes" edges to the TubeRequirement entity.
func (sc *SampleCreate) AddSampleRequiredTubes(t ...*TubeRequirement) *SampleCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return sc.AddSampleRequiredTubeIDs(ids...)
}

// SetPatient sets the "patient" edge to the Patient entity.
func (sc *SampleCreate) SetPatient(p *Patient) *SampleCreate {
	return sc.SetPatientID(p.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (sc *SampleCreate) SetCustomer(c *Customer) *SampleCreate {
	return sc.SetCustomerID(c.ID)
}

// Mutation returns the SampleMutation object of the builder.
func (sc *SampleCreate) Mutation() *SampleMutation {
	return sc.mutation
}

// Save creates the Sample in the database.
func (sc *SampleCreate) Save(ctx context.Context) (*Sample, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SampleCreate) SaveX(ctx context.Context) *Sample {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SampleCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SampleCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SampleCreate) defaults() {
	if _, ok := sc.mutation.SampleStorage(); !ok {
		v := sample.DefaultSampleStorage
		sc.mutation.SetSampleStorage(v)
	}
	if _, ok := sc.mutation.TubeCount(); !ok {
		v := sample.DefaultTubeCount
		sc.mutation.SetTubeCount(v)
	}
	if _, ok := sc.mutation.SampleDescription(); !ok {
		v := sample.DefaultSampleDescription
		sc.mutation.SetSampleDescription(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SampleCreate) check() error {
	if _, ok := sc.mutation.AccessionID(); !ok {
		return &ValidationError{Name: "accession_id", err: errors.New(`ent: missing required field "Sample.accession_id"`)}
	}
	if _, ok := sc.mutation.DelayedHours(); !ok {
		return &ValidationError{Name: "delayed_hours", err: errors.New(`ent: missing required field "Sample.delayed_hours"`)}
	}
	return nil
}

func (sc *SampleCreate) sqlSave(ctx context.Context) (*Sample, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SampleCreate) createSpec() (*Sample, *sqlgraph.CreateSpec) {
	var (
		_node = &Sample{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(sample.Table, sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.AccessionID(); ok {
		_spec.SetField(sample.FieldAccessionID, field.TypeString, value)
		_node.AccessionID = value
	}
	if value, ok := sc.mutation.SampleStorage(); ok {
		_spec.SetField(sample.FieldSampleStorage, field.TypeString, value)
		_node.SampleStorage = value
	}
	if value, ok := sc.mutation.TubeCount(); ok {
		_spec.SetField(sample.FieldTubeCount, field.TypeInt, value)
		_node.TubeCount = value
	}
	if value, ok := sc.mutation.SampleOrderMethod(); ok {
		_spec.SetField(sample.FieldSampleOrderMethod, field.TypeString, value)
		_node.SampleOrderMethod = value
	}
	if value, ok := sc.mutation.SampleCollectionTime(); ok {
		_spec.SetField(sample.FieldSampleCollectionTime, field.TypeTime, value)
		_node.SampleCollectionTime = value
	}
	if value, ok := sc.mutation.SampleReceivedTime(); ok {
		_spec.SetField(sample.FieldSampleReceivedTime, field.TypeTime, value)
		_node.SampleReceivedTime = value
	}
	if value, ok := sc.mutation.SampleDescription(); ok {
		_spec.SetField(sample.FieldSampleDescription, field.TypeString, value)
		_node.SampleDescription = value
	}
	if value, ok := sc.mutation.DelayedHours(); ok {
		_spec.SetField(sample.FieldDelayedHours, field.TypeInt, value)
		_node.DelayedHours = value
	}
	if value, ok := sc.mutation.SampleReportTime(); ok {
		_spec.SetField(sample.FieldSampleReportTime, field.TypeTime, value)
		_node.SampleReportTime = value
	}
	if value, ok := sc.mutation.InternalReceivedTime(); ok {
		_spec.SetField(sample.FieldInternalReceivedTime, field.TypeTime, value)
		_node.InternalReceivedTime = value
	}
	if value, ok := sc.mutation.SampleReportType(); ok {
		_spec.SetField(sample.FieldSampleReportType, field.TypeString, value)
		_node.SampleReportType = value
	}
	if value, ok := sc.mutation.FastingHours(); ok {
		_spec.SetField(sample.FieldFastingHours, field.TypeFloat64, value)
		_node.FastingHours = value
	}
	if value, ok := sc.mutation.FastingStatus(); ok {
		_spec.SetField(sample.FieldFastingStatus, field.TypeString, value)
		_node.FastingStatus = value
	}
	if nodes := sc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sample.OrderTable,
			Columns: []string{sample.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.TubesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.TubesTable,
			Columns: []string{sample.TubesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tube.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SampleReceiveRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.SampleReceiveRecordsTable,
			Columns: []string{sample.SampleReceiveRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubereceive.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SampleRequiredTubesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.SampleRequiredTubesTable,
			Columns: []string{sample.SampleRequiredTubesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tuberequirement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sample.PatientTable,
			Columns: []string{sample.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PatientID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sample.CustomerTable,
			Columns: []string{sample.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Sample.Create().
//		SetAccessionID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SampleUpsert) {
//			SetAccessionID(v+v).
//		}).
//		Exec(ctx)
func (sc *SampleCreate) OnConflict(opts ...sql.ConflictOption) *SampleUpsertOne {
	sc.conflict = opts
	return &SampleUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Sample.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SampleCreate) OnConflictColumns(columns ...string) *SampleUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SampleUpsertOne{
		create: sc,
	}
}

type (
	// SampleUpsertOne is the builder for "upsert"-ing
	//  one Sample node.
	SampleUpsertOne struct {
		create *SampleCreate
	}

	// SampleUpsert is the "OnConflict" setter.
	SampleUpsert struct {
		*sql.UpdateSet
	}
)

// SetAccessionID sets the "accession_id" field.
func (u *SampleUpsert) SetAccessionID(v string) *SampleUpsert {
	u.Set(sample.FieldAccessionID, v)
	return u
}

// UpdateAccessionID sets the "accession_id" field to the value that was provided on create.
func (u *SampleUpsert) UpdateAccessionID() *SampleUpsert {
	u.SetExcluded(sample.FieldAccessionID)
	return u
}

// SetSampleStorage sets the "sample_storage" field.
func (u *SampleUpsert) SetSampleStorage(v string) *SampleUpsert {
	u.Set(sample.FieldSampleStorage, v)
	return u
}

// UpdateSampleStorage sets the "sample_storage" field to the value that was provided on create.
func (u *SampleUpsert) UpdateSampleStorage() *SampleUpsert {
	u.SetExcluded(sample.FieldSampleStorage)
	return u
}

// ClearSampleStorage clears the value of the "sample_storage" field.
func (u *SampleUpsert) ClearSampleStorage() *SampleUpsert {
	u.SetNull(sample.FieldSampleStorage)
	return u
}

// SetTubeCount sets the "tube_count" field.
func (u *SampleUpsert) SetTubeCount(v int) *SampleUpsert {
	u.Set(sample.FieldTubeCount, v)
	return u
}

// UpdateTubeCount sets the "tube_count" field to the value that was provided on create.
func (u *SampleUpsert) UpdateTubeCount() *SampleUpsert {
	u.SetExcluded(sample.FieldTubeCount)
	return u
}

// AddTubeCount adds v to the "tube_count" field.
func (u *SampleUpsert) AddTubeCount(v int) *SampleUpsert {
	u.Add(sample.FieldTubeCount, v)
	return u
}

// ClearTubeCount clears the value of the "tube_count" field.
func (u *SampleUpsert) ClearTubeCount() *SampleUpsert {
	u.SetNull(sample.FieldTubeCount)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *SampleUpsert) SetOrderID(v int) *SampleUpsert {
	u.Set(sample.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *SampleUpsert) UpdateOrderID() *SampleUpsert {
	u.SetExcluded(sample.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *SampleUpsert) ClearOrderID() *SampleUpsert {
	u.SetNull(sample.FieldOrderID)
	return u
}

// SetPatientID sets the "patient_id" field.
func (u *SampleUpsert) SetPatientID(v int) *SampleUpsert {
	u.Set(sample.FieldPatientID, v)
	return u
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *SampleUpsert) UpdatePatientID() *SampleUpsert {
	u.SetExcluded(sample.FieldPatientID)
	return u
}

// ClearPatientID clears the value of the "patient_id" field.
func (u *SampleUpsert) ClearPatientID() *SampleUpsert {
	u.SetNull(sample.FieldPatientID)
	return u
}

// SetSampleOrderMethod sets the "sample_order_method" field.
func (u *SampleUpsert) SetSampleOrderMethod(v string) *SampleUpsert {
	u.Set(sample.FieldSampleOrderMethod, v)
	return u
}

// UpdateSampleOrderMethod sets the "sample_order_method" field to the value that was provided on create.
func (u *SampleUpsert) UpdateSampleOrderMethod() *SampleUpsert {
	u.SetExcluded(sample.FieldSampleOrderMethod)
	return u
}

// ClearSampleOrderMethod clears the value of the "sample_order_method" field.
func (u *SampleUpsert) ClearSampleOrderMethod() *SampleUpsert {
	u.SetNull(sample.FieldSampleOrderMethod)
	return u
}

// SetSampleCollectionTime sets the "sample_collection_time" field.
func (u *SampleUpsert) SetSampleCollectionTime(v time.Time) *SampleUpsert {
	u.Set(sample.FieldSampleCollectionTime, v)
	return u
}

// UpdateSampleCollectionTime sets the "sample_collection_time" field to the value that was provided on create.
func (u *SampleUpsert) UpdateSampleCollectionTime() *SampleUpsert {
	u.SetExcluded(sample.FieldSampleCollectionTime)
	return u
}

// ClearSampleCollectionTime clears the value of the "sample_collection_time" field.
func (u *SampleUpsert) ClearSampleCollectionTime() *SampleUpsert {
	u.SetNull(sample.FieldSampleCollectionTime)
	return u
}

// SetSampleReceivedTime sets the "sample_received_time" field.
func (u *SampleUpsert) SetSampleReceivedTime(v time.Time) *SampleUpsert {
	u.Set(sample.FieldSampleReceivedTime, v)
	return u
}

// UpdateSampleReceivedTime sets the "sample_received_time" field to the value that was provided on create.
func (u *SampleUpsert) UpdateSampleReceivedTime() *SampleUpsert {
	u.SetExcluded(sample.FieldSampleReceivedTime)
	return u
}

// ClearSampleReceivedTime clears the value of the "sample_received_time" field.
func (u *SampleUpsert) ClearSampleReceivedTime() *SampleUpsert {
	u.SetNull(sample.FieldSampleReceivedTime)
	return u
}

// SetSampleDescription sets the "sample_description" field.
func (u *SampleUpsert) SetSampleDescription(v string) *SampleUpsert {
	u.Set(sample.FieldSampleDescription, v)
	return u
}

// UpdateSampleDescription sets the "sample_description" field to the value that was provided on create.
func (u *SampleUpsert) UpdateSampleDescription() *SampleUpsert {
	u.SetExcluded(sample.FieldSampleDescription)
	return u
}

// ClearSampleDescription clears the value of the "sample_description" field.
func (u *SampleUpsert) ClearSampleDescription() *SampleUpsert {
	u.SetNull(sample.FieldSampleDescription)
	return u
}

// SetDelayedHours sets the "delayed_hours" field.
func (u *SampleUpsert) SetDelayedHours(v int) *SampleUpsert {
	u.Set(sample.FieldDelayedHours, v)
	return u
}

// UpdateDelayedHours sets the "delayed_hours" field to the value that was provided on create.
func (u *SampleUpsert) UpdateDelayedHours() *SampleUpsert {
	u.SetExcluded(sample.FieldDelayedHours)
	return u
}

// AddDelayedHours adds v to the "delayed_hours" field.
func (u *SampleUpsert) AddDelayedHours(v int) *SampleUpsert {
	u.Add(sample.FieldDelayedHours, v)
	return u
}

// SetSampleReportTime sets the "sample_report_time" field.
func (u *SampleUpsert) SetSampleReportTime(v time.Time) *SampleUpsert {
	u.Set(sample.FieldSampleReportTime, v)
	return u
}

// UpdateSampleReportTime sets the "sample_report_time" field to the value that was provided on create.
func (u *SampleUpsert) UpdateSampleReportTime() *SampleUpsert {
	u.SetExcluded(sample.FieldSampleReportTime)
	return u
}

// ClearSampleReportTime clears the value of the "sample_report_time" field.
func (u *SampleUpsert) ClearSampleReportTime() *SampleUpsert {
	u.SetNull(sample.FieldSampleReportTime)
	return u
}

// SetInternalReceivedTime sets the "internal_received_time" field.
func (u *SampleUpsert) SetInternalReceivedTime(v time.Time) *SampleUpsert {
	u.Set(sample.FieldInternalReceivedTime, v)
	return u
}

// UpdateInternalReceivedTime sets the "internal_received_time" field to the value that was provided on create.
func (u *SampleUpsert) UpdateInternalReceivedTime() *SampleUpsert {
	u.SetExcluded(sample.FieldInternalReceivedTime)
	return u
}

// ClearInternalReceivedTime clears the value of the "internal_received_time" field.
func (u *SampleUpsert) ClearInternalReceivedTime() *SampleUpsert {
	u.SetNull(sample.FieldInternalReceivedTime)
	return u
}

// SetSampleReportType sets the "sample_report_type" field.
func (u *SampleUpsert) SetSampleReportType(v string) *SampleUpsert {
	u.Set(sample.FieldSampleReportType, v)
	return u
}

// UpdateSampleReportType sets the "sample_report_type" field to the value that was provided on create.
func (u *SampleUpsert) UpdateSampleReportType() *SampleUpsert {
	u.SetExcluded(sample.FieldSampleReportType)
	return u
}

// ClearSampleReportType clears the value of the "sample_report_type" field.
func (u *SampleUpsert) ClearSampleReportType() *SampleUpsert {
	u.SetNull(sample.FieldSampleReportType)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *SampleUpsert) SetCustomerID(v int) *SampleUpsert {
	u.Set(sample.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *SampleUpsert) UpdateCustomerID() *SampleUpsert {
	u.SetExcluded(sample.FieldCustomerID)
	return u
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *SampleUpsert) ClearCustomerID() *SampleUpsert {
	u.SetNull(sample.FieldCustomerID)
	return u
}

// SetFastingHours sets the "fasting_hours" field.
func (u *SampleUpsert) SetFastingHours(v float64) *SampleUpsert {
	u.Set(sample.FieldFastingHours, v)
	return u
}

// UpdateFastingHours sets the "fasting_hours" field to the value that was provided on create.
func (u *SampleUpsert) UpdateFastingHours() *SampleUpsert {
	u.SetExcluded(sample.FieldFastingHours)
	return u
}

// AddFastingHours adds v to the "fasting_hours" field.
func (u *SampleUpsert) AddFastingHours(v float64) *SampleUpsert {
	u.Add(sample.FieldFastingHours, v)
	return u
}

// ClearFastingHours clears the value of the "fasting_hours" field.
func (u *SampleUpsert) ClearFastingHours() *SampleUpsert {
	u.SetNull(sample.FieldFastingHours)
	return u
}

// SetFastingStatus sets the "fasting_status" field.
func (u *SampleUpsert) SetFastingStatus(v string) *SampleUpsert {
	u.Set(sample.FieldFastingStatus, v)
	return u
}

// UpdateFastingStatus sets the "fasting_status" field to the value that was provided on create.
func (u *SampleUpsert) UpdateFastingStatus() *SampleUpsert {
	u.SetExcluded(sample.FieldFastingStatus)
	return u
}

// ClearFastingStatus clears the value of the "fasting_status" field.
func (u *SampleUpsert) ClearFastingStatus() *SampleUpsert {
	u.SetNull(sample.FieldFastingStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Sample.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sample.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SampleUpsertOne) UpdateNewValues() *SampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sample.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Sample.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SampleUpsertOne) Ignore() *SampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SampleUpsertOne) DoNothing() *SampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SampleCreate.OnConflict
// documentation for more info.
func (u *SampleUpsertOne) Update(set func(*SampleUpsert)) *SampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SampleUpsert{UpdateSet: update})
	}))
	return u
}

// SetAccessionID sets the "accession_id" field.
func (u *SampleUpsertOne) SetAccessionID(v string) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetAccessionID(v)
	})
}

// UpdateAccessionID sets the "accession_id" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdateAccessionID() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateAccessionID()
	})
}

// SetSampleStorage sets the "sample_storage" field.
func (u *SampleUpsertOne) SetSampleStorage(v string) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetSampleStorage(v)
	})
}

// UpdateSampleStorage sets the "sample_storage" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdateSampleStorage() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateSampleStorage()
	})
}

// ClearSampleStorage clears the value of the "sample_storage" field.
func (u *SampleUpsertOne) ClearSampleStorage() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.ClearSampleStorage()
	})
}

// SetTubeCount sets the "tube_count" field.
func (u *SampleUpsertOne) SetTubeCount(v int) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetTubeCount(v)
	})
}

// AddTubeCount adds v to the "tube_count" field.
func (u *SampleUpsertOne) AddTubeCount(v int) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.AddTubeCount(v)
	})
}

// UpdateTubeCount sets the "tube_count" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdateTubeCount() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateTubeCount()
	})
}

// ClearTubeCount clears the value of the "tube_count" field.
func (u *SampleUpsertOne) ClearTubeCount() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.ClearTubeCount()
	})
}

// SetOrderID sets the "order_id" field.
func (u *SampleUpsertOne) SetOrderID(v int) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdateOrderID() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *SampleUpsertOne) ClearOrderID() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.ClearOrderID()
	})
}

// SetPatientID sets the "patient_id" field.
func (u *SampleUpsertOne) SetPatientID(v int) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetPatientID(v)
	})
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdatePatientID() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdatePatientID()
	})
}

// ClearPatientID clears the value of the "patient_id" field.
func (u *SampleUpsertOne) ClearPatientID() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.ClearPatientID()
	})
}

// SetSampleOrderMethod sets the "sample_order_method" field.
func (u *SampleUpsertOne) SetSampleOrderMethod(v string) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetSampleOrderMethod(v)
	})
}

// UpdateSampleOrderMethod sets the "sample_order_method" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdateSampleOrderMethod() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateSampleOrderMethod()
	})
}

// ClearSampleOrderMethod clears the value of the "sample_order_method" field.
func (u *SampleUpsertOne) ClearSampleOrderMethod() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.ClearSampleOrderMethod()
	})
}

// SetSampleCollectionTime sets the "sample_collection_time" field.
func (u *SampleUpsertOne) SetSampleCollectionTime(v time.Time) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetSampleCollectionTime(v)
	})
}

// UpdateSampleCollectionTime sets the "sample_collection_time" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdateSampleCollectionTime() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateSampleCollectionTime()
	})
}

// ClearSampleCollectionTime clears the value of the "sample_collection_time" field.
func (u *SampleUpsertOne) ClearSampleCollectionTime() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.ClearSampleCollectionTime()
	})
}

// SetSampleReceivedTime sets the "sample_received_time" field.
func (u *SampleUpsertOne) SetSampleReceivedTime(v time.Time) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetSampleReceivedTime(v)
	})
}

// UpdateSampleReceivedTime sets the "sample_received_time" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdateSampleReceivedTime() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateSampleReceivedTime()
	})
}

// ClearSampleReceivedTime clears the value of the "sample_received_time" field.
func (u *SampleUpsertOne) ClearSampleReceivedTime() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.ClearSampleReceivedTime()
	})
}

// SetSampleDescription sets the "sample_description" field.
func (u *SampleUpsertOne) SetSampleDescription(v string) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetSampleDescription(v)
	})
}

// UpdateSampleDescription sets the "sample_description" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdateSampleDescription() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateSampleDescription()
	})
}

// ClearSampleDescription clears the value of the "sample_description" field.
func (u *SampleUpsertOne) ClearSampleDescription() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.ClearSampleDescription()
	})
}

// SetDelayedHours sets the "delayed_hours" field.
func (u *SampleUpsertOne) SetDelayedHours(v int) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetDelayedHours(v)
	})
}

// AddDelayedHours adds v to the "delayed_hours" field.
func (u *SampleUpsertOne) AddDelayedHours(v int) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.AddDelayedHours(v)
	})
}

// UpdateDelayedHours sets the "delayed_hours" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdateDelayedHours() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateDelayedHours()
	})
}

// SetSampleReportTime sets the "sample_report_time" field.
func (u *SampleUpsertOne) SetSampleReportTime(v time.Time) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetSampleReportTime(v)
	})
}

// UpdateSampleReportTime sets the "sample_report_time" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdateSampleReportTime() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateSampleReportTime()
	})
}

// ClearSampleReportTime clears the value of the "sample_report_time" field.
func (u *SampleUpsertOne) ClearSampleReportTime() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.ClearSampleReportTime()
	})
}

// SetInternalReceivedTime sets the "internal_received_time" field.
func (u *SampleUpsertOne) SetInternalReceivedTime(v time.Time) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetInternalReceivedTime(v)
	})
}

// UpdateInternalReceivedTime sets the "internal_received_time" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdateInternalReceivedTime() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateInternalReceivedTime()
	})
}

// ClearInternalReceivedTime clears the value of the "internal_received_time" field.
func (u *SampleUpsertOne) ClearInternalReceivedTime() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.ClearInternalReceivedTime()
	})
}

// SetSampleReportType sets the "sample_report_type" field.
func (u *SampleUpsertOne) SetSampleReportType(v string) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetSampleReportType(v)
	})
}

// UpdateSampleReportType sets the "sample_report_type" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdateSampleReportType() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateSampleReportType()
	})
}

// ClearSampleReportType clears the value of the "sample_report_type" field.
func (u *SampleUpsertOne) ClearSampleReportType() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.ClearSampleReportType()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *SampleUpsertOne) SetCustomerID(v int) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdateCustomerID() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *SampleUpsertOne) ClearCustomerID() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.ClearCustomerID()
	})
}

// SetFastingHours sets the "fasting_hours" field.
func (u *SampleUpsertOne) SetFastingHours(v float64) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetFastingHours(v)
	})
}

// AddFastingHours adds v to the "fasting_hours" field.
func (u *SampleUpsertOne) AddFastingHours(v float64) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.AddFastingHours(v)
	})
}

// UpdateFastingHours sets the "fasting_hours" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdateFastingHours() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateFastingHours()
	})
}

// ClearFastingHours clears the value of the "fasting_hours" field.
func (u *SampleUpsertOne) ClearFastingHours() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.ClearFastingHours()
	})
}

// SetFastingStatus sets the "fasting_status" field.
func (u *SampleUpsertOne) SetFastingStatus(v string) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetFastingStatus(v)
	})
}

// UpdateFastingStatus sets the "fasting_status" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdateFastingStatus() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateFastingStatus()
	})
}

// ClearFastingStatus clears the value of the "fasting_status" field.
func (u *SampleUpsertOne) ClearFastingStatus() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.ClearFastingStatus()
	})
}

// Exec executes the query.
func (u *SampleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SampleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SampleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SampleUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SampleUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SampleCreateBulk is the builder for creating many Sample entities in bulk.
type SampleCreateBulk struct {
	config
	err      error
	builders []*SampleCreate
	conflict []sql.ConflictOption
}

// Save creates the Sample entities in the database.
func (scb *SampleCreateBulk) Save(ctx context.Context) ([]*Sample, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Sample, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SampleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SampleCreateBulk) SaveX(ctx context.Context) []*Sample {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SampleCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SampleCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Sample.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SampleUpsert) {
//			SetAccessionID(v+v).
//		}).
//		Exec(ctx)
func (scb *SampleCreateBulk) OnConflict(opts ...sql.ConflictOption) *SampleUpsertBulk {
	scb.conflict = opts
	return &SampleUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Sample.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SampleCreateBulk) OnConflictColumns(columns ...string) *SampleUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SampleUpsertBulk{
		create: scb,
	}
}

// SampleUpsertBulk is the builder for "upsert"-ing
// a bulk of Sample nodes.
type SampleUpsertBulk struct {
	create *SampleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Sample.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sample.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SampleUpsertBulk) UpdateNewValues() *SampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sample.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Sample.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SampleUpsertBulk) Ignore() *SampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SampleUpsertBulk) DoNothing() *SampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SampleCreateBulk.OnConflict
// documentation for more info.
func (u *SampleUpsertBulk) Update(set func(*SampleUpsert)) *SampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SampleUpsert{UpdateSet: update})
	}))
	return u
}

// SetAccessionID sets the "accession_id" field.
func (u *SampleUpsertBulk) SetAccessionID(v string) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetAccessionID(v)
	})
}

// UpdateAccessionID sets the "accession_id" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdateAccessionID() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateAccessionID()
	})
}

// SetSampleStorage sets the "sample_storage" field.
func (u *SampleUpsertBulk) SetSampleStorage(v string) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetSampleStorage(v)
	})
}

// UpdateSampleStorage sets the "sample_storage" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdateSampleStorage() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateSampleStorage()
	})
}

// ClearSampleStorage clears the value of the "sample_storage" field.
func (u *SampleUpsertBulk) ClearSampleStorage() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.ClearSampleStorage()
	})
}

// SetTubeCount sets the "tube_count" field.
func (u *SampleUpsertBulk) SetTubeCount(v int) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetTubeCount(v)
	})
}

// AddTubeCount adds v to the "tube_count" field.
func (u *SampleUpsertBulk) AddTubeCount(v int) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.AddTubeCount(v)
	})
}

// UpdateTubeCount sets the "tube_count" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdateTubeCount() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateTubeCount()
	})
}

// ClearTubeCount clears the value of the "tube_count" field.
func (u *SampleUpsertBulk) ClearTubeCount() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.ClearTubeCount()
	})
}

// SetOrderID sets the "order_id" field.
func (u *SampleUpsertBulk) SetOrderID(v int) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdateOrderID() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *SampleUpsertBulk) ClearOrderID() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.ClearOrderID()
	})
}

// SetPatientID sets the "patient_id" field.
func (u *SampleUpsertBulk) SetPatientID(v int) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetPatientID(v)
	})
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdatePatientID() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdatePatientID()
	})
}

// ClearPatientID clears the value of the "patient_id" field.
func (u *SampleUpsertBulk) ClearPatientID() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.ClearPatientID()
	})
}

// SetSampleOrderMethod sets the "sample_order_method" field.
func (u *SampleUpsertBulk) SetSampleOrderMethod(v string) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetSampleOrderMethod(v)
	})
}

// UpdateSampleOrderMethod sets the "sample_order_method" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdateSampleOrderMethod() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateSampleOrderMethod()
	})
}

// ClearSampleOrderMethod clears the value of the "sample_order_method" field.
func (u *SampleUpsertBulk) ClearSampleOrderMethod() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.ClearSampleOrderMethod()
	})
}

// SetSampleCollectionTime sets the "sample_collection_time" field.
func (u *SampleUpsertBulk) SetSampleCollectionTime(v time.Time) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetSampleCollectionTime(v)
	})
}

// UpdateSampleCollectionTime sets the "sample_collection_time" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdateSampleCollectionTime() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateSampleCollectionTime()
	})
}

// ClearSampleCollectionTime clears the value of the "sample_collection_time" field.
func (u *SampleUpsertBulk) ClearSampleCollectionTime() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.ClearSampleCollectionTime()
	})
}

// SetSampleReceivedTime sets the "sample_received_time" field.
func (u *SampleUpsertBulk) SetSampleReceivedTime(v time.Time) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetSampleReceivedTime(v)
	})
}

// UpdateSampleReceivedTime sets the "sample_received_time" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdateSampleReceivedTime() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateSampleReceivedTime()
	})
}

// ClearSampleReceivedTime clears the value of the "sample_received_time" field.
func (u *SampleUpsertBulk) ClearSampleReceivedTime() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.ClearSampleReceivedTime()
	})
}

// SetSampleDescription sets the "sample_description" field.
func (u *SampleUpsertBulk) SetSampleDescription(v string) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetSampleDescription(v)
	})
}

// UpdateSampleDescription sets the "sample_description" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdateSampleDescription() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateSampleDescription()
	})
}

// ClearSampleDescription clears the value of the "sample_description" field.
func (u *SampleUpsertBulk) ClearSampleDescription() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.ClearSampleDescription()
	})
}

// SetDelayedHours sets the "delayed_hours" field.
func (u *SampleUpsertBulk) SetDelayedHours(v int) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetDelayedHours(v)
	})
}

// AddDelayedHours adds v to the "delayed_hours" field.
func (u *SampleUpsertBulk) AddDelayedHours(v int) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.AddDelayedHours(v)
	})
}

// UpdateDelayedHours sets the "delayed_hours" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdateDelayedHours() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateDelayedHours()
	})
}

// SetSampleReportTime sets the "sample_report_time" field.
func (u *SampleUpsertBulk) SetSampleReportTime(v time.Time) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetSampleReportTime(v)
	})
}

// UpdateSampleReportTime sets the "sample_report_time" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdateSampleReportTime() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateSampleReportTime()
	})
}

// ClearSampleReportTime clears the value of the "sample_report_time" field.
func (u *SampleUpsertBulk) ClearSampleReportTime() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.ClearSampleReportTime()
	})
}

// SetInternalReceivedTime sets the "internal_received_time" field.
func (u *SampleUpsertBulk) SetInternalReceivedTime(v time.Time) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetInternalReceivedTime(v)
	})
}

// UpdateInternalReceivedTime sets the "internal_received_time" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdateInternalReceivedTime() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateInternalReceivedTime()
	})
}

// ClearInternalReceivedTime clears the value of the "internal_received_time" field.
func (u *SampleUpsertBulk) ClearInternalReceivedTime() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.ClearInternalReceivedTime()
	})
}

// SetSampleReportType sets the "sample_report_type" field.
func (u *SampleUpsertBulk) SetSampleReportType(v string) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetSampleReportType(v)
	})
}

// UpdateSampleReportType sets the "sample_report_type" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdateSampleReportType() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateSampleReportType()
	})
}

// ClearSampleReportType clears the value of the "sample_report_type" field.
func (u *SampleUpsertBulk) ClearSampleReportType() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.ClearSampleReportType()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *SampleUpsertBulk) SetCustomerID(v int) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdateCustomerID() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *SampleUpsertBulk) ClearCustomerID() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.ClearCustomerID()
	})
}

// SetFastingHours sets the "fasting_hours" field.
func (u *SampleUpsertBulk) SetFastingHours(v float64) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetFastingHours(v)
	})
}

// AddFastingHours adds v to the "fasting_hours" field.
func (u *SampleUpsertBulk) AddFastingHours(v float64) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.AddFastingHours(v)
	})
}

// UpdateFastingHours sets the "fasting_hours" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdateFastingHours() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateFastingHours()
	})
}

// ClearFastingHours clears the value of the "fasting_hours" field.
func (u *SampleUpsertBulk) ClearFastingHours() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.ClearFastingHours()
	})
}

// SetFastingStatus sets the "fasting_status" field.
func (u *SampleUpsertBulk) SetFastingStatus(v string) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetFastingStatus(v)
	})
}

// UpdateFastingStatus sets the "fasting_status" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdateFastingStatus() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateFastingStatus()
	})
}

// ClearFastingStatus clears the value of the "fasting_status" field.
func (u *SampleUpsertBulk) ClearFastingStatus() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.ClearFastingStatus()
	})
}

// Exec executes the query.
func (u *SampleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SampleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SampleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SampleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
