// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/accountsubscription"
	"coresamples/ent/predicate"
	"coresamples/ent/serviceship"
	"coresamples/ent/serviceshipbillingplan"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountSubscriptionUpdate is the builder for updating AccountSubscription entities.
type AccountSubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *AccountSubscriptionMutation
}

// Where appends a list predicates to the AccountSubscriptionUpdate builder.
func (asu *AccountSubscriptionUpdate) Where(ps ...predicate.AccountSubscription) *AccountSubscriptionUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetAccountID sets the "account_id" field.
func (asu *AccountSubscriptionUpdate) SetAccountID(i int64) *AccountSubscriptionUpdate {
	asu.mutation.ResetAccountID()
	asu.mutation.SetAccountID(i)
	return asu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (asu *AccountSubscriptionUpdate) SetNillableAccountID(i *int64) *AccountSubscriptionUpdate {
	if i != nil {
		asu.SetAccountID(*i)
	}
	return asu
}

// AddAccountID adds i to the "account_id" field.
func (asu *AccountSubscriptionUpdate) AddAccountID(i int64) *AccountSubscriptionUpdate {
	asu.mutation.AddAccountID(i)
	return asu
}

// SetAccountType sets the "account_type" field.
func (asu *AccountSubscriptionUpdate) SetAccountType(at accountsubscription.AccountType) *AccountSubscriptionUpdate {
	asu.mutation.SetAccountType(at)
	return asu
}

// SetNillableAccountType sets the "account_type" field if the given value is not nil.
func (asu *AccountSubscriptionUpdate) SetNillableAccountType(at *accountsubscription.AccountType) *AccountSubscriptionUpdate {
	if at != nil {
		asu.SetAccountType(*at)
	}
	return asu
}

// SetSubscriberName sets the "subscriber_name" field.
func (asu *AccountSubscriptionUpdate) SetSubscriberName(s string) *AccountSubscriptionUpdate {
	asu.mutation.SetSubscriberName(s)
	return asu
}

// SetNillableSubscriberName sets the "subscriber_name" field if the given value is not nil.
func (asu *AccountSubscriptionUpdate) SetNillableSubscriberName(s *string) *AccountSubscriptionUpdate {
	if s != nil {
		asu.SetSubscriberName(*s)
	}
	return asu
}

// SetEmail sets the "email" field.
func (asu *AccountSubscriptionUpdate) SetEmail(s string) *AccountSubscriptionUpdate {
	asu.mutation.SetEmail(s)
	return asu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (asu *AccountSubscriptionUpdate) SetNillableEmail(s *string) *AccountSubscriptionUpdate {
	if s != nil {
		asu.SetEmail(*s)
	}
	return asu
}

// SetStartTime sets the "start_time" field.
func (asu *AccountSubscriptionUpdate) SetStartTime(t time.Time) *AccountSubscriptionUpdate {
	asu.mutation.SetStartTime(t)
	return asu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (asu *AccountSubscriptionUpdate) SetNillableStartTime(t *time.Time) *AccountSubscriptionUpdate {
	if t != nil {
		asu.SetStartTime(*t)
	}
	return asu
}

// SetEndTime sets the "end_time" field.
func (asu *AccountSubscriptionUpdate) SetEndTime(t time.Time) *AccountSubscriptionUpdate {
	asu.mutation.SetEndTime(t)
	return asu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (asu *AccountSubscriptionUpdate) SetNillableEndTime(t *time.Time) *AccountSubscriptionUpdate {
	if t != nil {
		asu.SetEndTime(*t)
	}
	return asu
}

// SetServiceshipBillingPlanID sets the "serviceship_billing_plan" edge to the ServiceshipBillingPlan entity by ID.
func (asu *AccountSubscriptionUpdate) SetServiceshipBillingPlanID(id int) *AccountSubscriptionUpdate {
	asu.mutation.SetServiceshipBillingPlanID(id)
	return asu
}

// SetServiceshipBillingPlan sets the "serviceship_billing_plan" edge to the ServiceshipBillingPlan entity.
func (asu *AccountSubscriptionUpdate) SetServiceshipBillingPlan(s *ServiceshipBillingPlan) *AccountSubscriptionUpdate {
	return asu.SetServiceshipBillingPlanID(s.ID)
}

// SetServiceshipID sets the "serviceship" edge to the Serviceship entity by ID.
func (asu *AccountSubscriptionUpdate) SetServiceshipID(id int) *AccountSubscriptionUpdate {
	asu.mutation.SetServiceshipID(id)
	return asu
}

// SetServiceship sets the "serviceship" edge to the Serviceship entity.
func (asu *AccountSubscriptionUpdate) SetServiceship(s *Serviceship) *AccountSubscriptionUpdate {
	return asu.SetServiceshipID(s.ID)
}

// Mutation returns the AccountSubscriptionMutation object of the builder.
func (asu *AccountSubscriptionUpdate) Mutation() *AccountSubscriptionMutation {
	return asu.mutation
}

// ClearServiceshipBillingPlan clears the "serviceship_billing_plan" edge to the ServiceshipBillingPlan entity.
func (asu *AccountSubscriptionUpdate) ClearServiceshipBillingPlan() *AccountSubscriptionUpdate {
	asu.mutation.ClearServiceshipBillingPlan()
	return asu
}

// ClearServiceship clears the "serviceship" edge to the Serviceship entity.
func (asu *AccountSubscriptionUpdate) ClearServiceship() *AccountSubscriptionUpdate {
	asu.mutation.ClearServiceship()
	return asu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AccountSubscriptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AccountSubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AccountSubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AccountSubscriptionUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asu *AccountSubscriptionUpdate) check() error {
	if v, ok := asu.mutation.AccountID(); ok {
		if err := accountsubscription.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`ent: validator failed for field "AccountSubscription.account_id": %w`, err)}
		}
	}
	if v, ok := asu.mutation.AccountType(); ok {
		if err := accountsubscription.AccountTypeValidator(v); err != nil {
			return &ValidationError{Name: "account_type", err: fmt.Errorf(`ent: validator failed for field "AccountSubscription.account_type": %w`, err)}
		}
	}
	if _, ok := asu.mutation.ServiceshipBillingPlanID(); asu.mutation.ServiceshipBillingPlanCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AccountSubscription.serviceship_billing_plan"`)
	}
	if _, ok := asu.mutation.ServiceshipID(); asu.mutation.ServiceshipCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AccountSubscription.serviceship"`)
	}
	return nil
}

func (asu *AccountSubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := asu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(accountsubscription.Table, accountsubscription.Columns, sqlgraph.NewFieldSpec(accountsubscription.FieldID, field.TypeInt))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.AccountID(); ok {
		_spec.SetField(accountsubscription.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := asu.mutation.AddedAccountID(); ok {
		_spec.AddField(accountsubscription.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := asu.mutation.AccountType(); ok {
		_spec.SetField(accountsubscription.FieldAccountType, field.TypeEnum, value)
	}
	if value, ok := asu.mutation.SubscriberName(); ok {
		_spec.SetField(accountsubscription.FieldSubscriberName, field.TypeString, value)
	}
	if value, ok := asu.mutation.Email(); ok {
		_spec.SetField(accountsubscription.FieldEmail, field.TypeString, value)
	}
	if value, ok := asu.mutation.StartTime(); ok {
		_spec.SetField(accountsubscription.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := asu.mutation.EndTime(); ok {
		_spec.SetField(accountsubscription.FieldEndTime, field.TypeTime, value)
	}
	if asu.mutation.ServiceshipBillingPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountsubscription.ServiceshipBillingPlanTable,
			Columns: []string{accountsubscription.ServiceshipBillingPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceshipbillingplan.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.ServiceshipBillingPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountsubscription.ServiceshipBillingPlanTable,
			Columns: []string{accountsubscription.ServiceshipBillingPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceshipbillingplan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asu.mutation.ServiceshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountsubscription.ServiceshipTable,
			Columns: []string{accountsubscription.ServiceshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.ServiceshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountsubscription.ServiceshipTable,
			Columns: []string{accountsubscription.ServiceshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AccountSubscriptionUpdateOne is the builder for updating a single AccountSubscription entity.
type AccountSubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountSubscriptionMutation
}

// SetAccountID sets the "account_id" field.
func (asuo *AccountSubscriptionUpdateOne) SetAccountID(i int64) *AccountSubscriptionUpdateOne {
	asuo.mutation.ResetAccountID()
	asuo.mutation.SetAccountID(i)
	return asuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (asuo *AccountSubscriptionUpdateOne) SetNillableAccountID(i *int64) *AccountSubscriptionUpdateOne {
	if i != nil {
		asuo.SetAccountID(*i)
	}
	return asuo
}

// AddAccountID adds i to the "account_id" field.
func (asuo *AccountSubscriptionUpdateOne) AddAccountID(i int64) *AccountSubscriptionUpdateOne {
	asuo.mutation.AddAccountID(i)
	return asuo
}

// SetAccountType sets the "account_type" field.
func (asuo *AccountSubscriptionUpdateOne) SetAccountType(at accountsubscription.AccountType) *AccountSubscriptionUpdateOne {
	asuo.mutation.SetAccountType(at)
	return asuo
}

// SetNillableAccountType sets the "account_type" field if the given value is not nil.
func (asuo *AccountSubscriptionUpdateOne) SetNillableAccountType(at *accountsubscription.AccountType) *AccountSubscriptionUpdateOne {
	if at != nil {
		asuo.SetAccountType(*at)
	}
	return asuo
}

// SetSubscriberName sets the "subscriber_name" field.
func (asuo *AccountSubscriptionUpdateOne) SetSubscriberName(s string) *AccountSubscriptionUpdateOne {
	asuo.mutation.SetSubscriberName(s)
	return asuo
}

// SetNillableSubscriberName sets the "subscriber_name" field if the given value is not nil.
func (asuo *AccountSubscriptionUpdateOne) SetNillableSubscriberName(s *string) *AccountSubscriptionUpdateOne {
	if s != nil {
		asuo.SetSubscriberName(*s)
	}
	return asuo
}

// SetEmail sets the "email" field.
func (asuo *AccountSubscriptionUpdateOne) SetEmail(s string) *AccountSubscriptionUpdateOne {
	asuo.mutation.SetEmail(s)
	return asuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (asuo *AccountSubscriptionUpdateOne) SetNillableEmail(s *string) *AccountSubscriptionUpdateOne {
	if s != nil {
		asuo.SetEmail(*s)
	}
	return asuo
}

// SetStartTime sets the "start_time" field.
func (asuo *AccountSubscriptionUpdateOne) SetStartTime(t time.Time) *AccountSubscriptionUpdateOne {
	asuo.mutation.SetStartTime(t)
	return asuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (asuo *AccountSubscriptionUpdateOne) SetNillableStartTime(t *time.Time) *AccountSubscriptionUpdateOne {
	if t != nil {
		asuo.SetStartTime(*t)
	}
	return asuo
}

// SetEndTime sets the "end_time" field.
func (asuo *AccountSubscriptionUpdateOne) SetEndTime(t time.Time) *AccountSubscriptionUpdateOne {
	asuo.mutation.SetEndTime(t)
	return asuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (asuo *AccountSubscriptionUpdateOne) SetNillableEndTime(t *time.Time) *AccountSubscriptionUpdateOne {
	if t != nil {
		asuo.SetEndTime(*t)
	}
	return asuo
}

// SetServiceshipBillingPlanID sets the "serviceship_billing_plan" edge to the ServiceshipBillingPlan entity by ID.
func (asuo *AccountSubscriptionUpdateOne) SetServiceshipBillingPlanID(id int) *AccountSubscriptionUpdateOne {
	asuo.mutation.SetServiceshipBillingPlanID(id)
	return asuo
}

// SetServiceshipBillingPlan sets the "serviceship_billing_plan" edge to the ServiceshipBillingPlan entity.
func (asuo *AccountSubscriptionUpdateOne) SetServiceshipBillingPlan(s *ServiceshipBillingPlan) *AccountSubscriptionUpdateOne {
	return asuo.SetServiceshipBillingPlanID(s.ID)
}

// SetServiceshipID sets the "serviceship" edge to the Serviceship entity by ID.
func (asuo *AccountSubscriptionUpdateOne) SetServiceshipID(id int) *AccountSubscriptionUpdateOne {
	asuo.mutation.SetServiceshipID(id)
	return asuo
}

// SetServiceship sets the "serviceship" edge to the Serviceship entity.
func (asuo *AccountSubscriptionUpdateOne) SetServiceship(s *Serviceship) *AccountSubscriptionUpdateOne {
	return asuo.SetServiceshipID(s.ID)
}

// Mutation returns the AccountSubscriptionMutation object of the builder.
func (asuo *AccountSubscriptionUpdateOne) Mutation() *AccountSubscriptionMutation {
	return asuo.mutation
}

// ClearServiceshipBillingPlan clears the "serviceship_billing_plan" edge to the ServiceshipBillingPlan entity.
func (asuo *AccountSubscriptionUpdateOne) ClearServiceshipBillingPlan() *AccountSubscriptionUpdateOne {
	asuo.mutation.ClearServiceshipBillingPlan()
	return asuo
}

// ClearServiceship clears the "serviceship" edge to the Serviceship entity.
func (asuo *AccountSubscriptionUpdateOne) ClearServiceship() *AccountSubscriptionUpdateOne {
	asuo.mutation.ClearServiceship()
	return asuo
}

// Where appends a list predicates to the AccountSubscriptionUpdate builder.
func (asuo *AccountSubscriptionUpdateOne) Where(ps ...predicate.AccountSubscription) *AccountSubscriptionUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AccountSubscriptionUpdateOne) Select(field string, fields ...string) *AccountSubscriptionUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AccountSubscription entity.
func (asuo *AccountSubscriptionUpdateOne) Save(ctx context.Context) (*AccountSubscription, error) {
	return withHooks(ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AccountSubscriptionUpdateOne) SaveX(ctx context.Context) *AccountSubscription {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AccountSubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AccountSubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asuo *AccountSubscriptionUpdateOne) check() error {
	if v, ok := asuo.mutation.AccountID(); ok {
		if err := accountsubscription.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`ent: validator failed for field "AccountSubscription.account_id": %w`, err)}
		}
	}
	if v, ok := asuo.mutation.AccountType(); ok {
		if err := accountsubscription.AccountTypeValidator(v); err != nil {
			return &ValidationError{Name: "account_type", err: fmt.Errorf(`ent: validator failed for field "AccountSubscription.account_type": %w`, err)}
		}
	}
	if _, ok := asuo.mutation.ServiceshipBillingPlanID(); asuo.mutation.ServiceshipBillingPlanCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AccountSubscription.serviceship_billing_plan"`)
	}
	if _, ok := asuo.mutation.ServiceshipID(); asuo.mutation.ServiceshipCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AccountSubscription.serviceship"`)
	}
	return nil
}

func (asuo *AccountSubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *AccountSubscription, err error) {
	if err := asuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(accountsubscription.Table, accountsubscription.Columns, sqlgraph.NewFieldSpec(accountsubscription.FieldID, field.TypeInt))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccountSubscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountsubscription.FieldID)
		for _, f := range fields {
			if !accountsubscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accountsubscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.AccountID(); ok {
		_spec.SetField(accountsubscription.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := asuo.mutation.AddedAccountID(); ok {
		_spec.AddField(accountsubscription.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := asuo.mutation.AccountType(); ok {
		_spec.SetField(accountsubscription.FieldAccountType, field.TypeEnum, value)
	}
	if value, ok := asuo.mutation.SubscriberName(); ok {
		_spec.SetField(accountsubscription.FieldSubscriberName, field.TypeString, value)
	}
	if value, ok := asuo.mutation.Email(); ok {
		_spec.SetField(accountsubscription.FieldEmail, field.TypeString, value)
	}
	if value, ok := asuo.mutation.StartTime(); ok {
		_spec.SetField(accountsubscription.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := asuo.mutation.EndTime(); ok {
		_spec.SetField(accountsubscription.FieldEndTime, field.TypeTime, value)
	}
	if asuo.mutation.ServiceshipBillingPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountsubscription.ServiceshipBillingPlanTable,
			Columns: []string{accountsubscription.ServiceshipBillingPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceshipbillingplan.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.ServiceshipBillingPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountsubscription.ServiceshipBillingPlanTable,
			Columns: []string{accountsubscription.ServiceshipBillingPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceshipbillingplan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asuo.mutation.ServiceshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountsubscription.ServiceshipTable,
			Columns: []string{accountsubscription.ServiceshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.ServiceshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountsubscription.ServiceshipTable,
			Columns: []string{accountsubscription.ServiceshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AccountSubscription{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
