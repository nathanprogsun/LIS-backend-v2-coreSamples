// Code generated by ent, DO NOT EDIT.

package tube

import (
	"coresamples/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Tube {
	return predicate.Tube(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Tube {
	return predicate.Tube(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Tube {
	return predicate.Tube(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Tube {
	return predicate.Tube(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Tube {
	return predicate.Tube(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Tube {
	return predicate.Tube(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Tube {
	return predicate.Tube(sql.FieldLTE(FieldID, id))
}

// TubeID applies equality check predicate on the "tube_id" field. It's identical to TubeIDEQ.
func TubeID(v string) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldTubeID, v))
}

// SampleID applies equality check predicate on the "sample_id" field. It's identical to SampleIDEQ.
func SampleID(v int) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldSampleID, v))
}

// TubeStorage applies equality check predicate on the "tube_storage" field. It's identical to TubeStorageEQ.
func TubeStorage(v string) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldTubeStorage, v))
}

// TubeReceiveTime applies equality check predicate on the "tube_receive_time" field. It's identical to TubeReceiveTimeEQ.
func TubeReceiveTime(v time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldTubeReceiveTime, v))
}

// TubeTurnaroundTime applies equality check predicate on the "tube_turnaround_time" field. It's identical to TubeTurnaroundTimeEQ.
func TubeTurnaroundTime(v int) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldTubeTurnaroundTime, v))
}

// TubeStability applies equality check predicate on the "tube_stability" field. It's identical to TubeStabilityEQ.
func TubeStability(v int) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldTubeStability, v))
}

// IsActive applies equality check predicate on the "isActive" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldIsActive, v))
}

// Issues applies equality check predicate on the "issues" field. It's identical to IssuesEQ.
func Issues(v string) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldIssues, v))
}

// TubeCollectionTime applies equality check predicate on the "tube_collection_time" field. It's identical to TubeCollectionTimeEQ.
func TubeCollectionTime(v time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldTubeCollectionTime, v))
}

// TubeIDEQ applies the EQ predicate on the "tube_id" field.
func TubeIDEQ(v string) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldTubeID, v))
}

// TubeIDNEQ applies the NEQ predicate on the "tube_id" field.
func TubeIDNEQ(v string) predicate.Tube {
	return predicate.Tube(sql.FieldNEQ(FieldTubeID, v))
}

// TubeIDIn applies the In predicate on the "tube_id" field.
func TubeIDIn(vs ...string) predicate.Tube {
	return predicate.Tube(sql.FieldIn(FieldTubeID, vs...))
}

// TubeIDNotIn applies the NotIn predicate on the "tube_id" field.
func TubeIDNotIn(vs ...string) predicate.Tube {
	return predicate.Tube(sql.FieldNotIn(FieldTubeID, vs...))
}

// TubeIDGT applies the GT predicate on the "tube_id" field.
func TubeIDGT(v string) predicate.Tube {
	return predicate.Tube(sql.FieldGT(FieldTubeID, v))
}

// TubeIDGTE applies the GTE predicate on the "tube_id" field.
func TubeIDGTE(v string) predicate.Tube {
	return predicate.Tube(sql.FieldGTE(FieldTubeID, v))
}

// TubeIDLT applies the LT predicate on the "tube_id" field.
func TubeIDLT(v string) predicate.Tube {
	return predicate.Tube(sql.FieldLT(FieldTubeID, v))
}

// TubeIDLTE applies the LTE predicate on the "tube_id" field.
func TubeIDLTE(v string) predicate.Tube {
	return predicate.Tube(sql.FieldLTE(FieldTubeID, v))
}

// TubeIDContains applies the Contains predicate on the "tube_id" field.
func TubeIDContains(v string) predicate.Tube {
	return predicate.Tube(sql.FieldContains(FieldTubeID, v))
}

// TubeIDHasPrefix applies the HasPrefix predicate on the "tube_id" field.
func TubeIDHasPrefix(v string) predicate.Tube {
	return predicate.Tube(sql.FieldHasPrefix(FieldTubeID, v))
}

// TubeIDHasSuffix applies the HasSuffix predicate on the "tube_id" field.
func TubeIDHasSuffix(v string) predicate.Tube {
	return predicate.Tube(sql.FieldHasSuffix(FieldTubeID, v))
}

// TubeIDEqualFold applies the EqualFold predicate on the "tube_id" field.
func TubeIDEqualFold(v string) predicate.Tube {
	return predicate.Tube(sql.FieldEqualFold(FieldTubeID, v))
}

// TubeIDContainsFold applies the ContainsFold predicate on the "tube_id" field.
func TubeIDContainsFold(v string) predicate.Tube {
	return predicate.Tube(sql.FieldContainsFold(FieldTubeID, v))
}

// SampleIDEQ applies the EQ predicate on the "sample_id" field.
func SampleIDEQ(v int) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldSampleID, v))
}

// SampleIDNEQ applies the NEQ predicate on the "sample_id" field.
func SampleIDNEQ(v int) predicate.Tube {
	return predicate.Tube(sql.FieldNEQ(FieldSampleID, v))
}

// SampleIDIn applies the In predicate on the "sample_id" field.
func SampleIDIn(vs ...int) predicate.Tube {
	return predicate.Tube(sql.FieldIn(FieldSampleID, vs...))
}

// SampleIDNotIn applies the NotIn predicate on the "sample_id" field.
func SampleIDNotIn(vs ...int) predicate.Tube {
	return predicate.Tube(sql.FieldNotIn(FieldSampleID, vs...))
}

// TubeStorageEQ applies the EQ predicate on the "tube_storage" field.
func TubeStorageEQ(v string) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldTubeStorage, v))
}

// TubeStorageNEQ applies the NEQ predicate on the "tube_storage" field.
func TubeStorageNEQ(v string) predicate.Tube {
	return predicate.Tube(sql.FieldNEQ(FieldTubeStorage, v))
}

// TubeStorageIn applies the In predicate on the "tube_storage" field.
func TubeStorageIn(vs ...string) predicate.Tube {
	return predicate.Tube(sql.FieldIn(FieldTubeStorage, vs...))
}

// TubeStorageNotIn applies the NotIn predicate on the "tube_storage" field.
func TubeStorageNotIn(vs ...string) predicate.Tube {
	return predicate.Tube(sql.FieldNotIn(FieldTubeStorage, vs...))
}

// TubeStorageGT applies the GT predicate on the "tube_storage" field.
func TubeStorageGT(v string) predicate.Tube {
	return predicate.Tube(sql.FieldGT(FieldTubeStorage, v))
}

// TubeStorageGTE applies the GTE predicate on the "tube_storage" field.
func TubeStorageGTE(v string) predicate.Tube {
	return predicate.Tube(sql.FieldGTE(FieldTubeStorage, v))
}

// TubeStorageLT applies the LT predicate on the "tube_storage" field.
func TubeStorageLT(v string) predicate.Tube {
	return predicate.Tube(sql.FieldLT(FieldTubeStorage, v))
}

// TubeStorageLTE applies the LTE predicate on the "tube_storage" field.
func TubeStorageLTE(v string) predicate.Tube {
	return predicate.Tube(sql.FieldLTE(FieldTubeStorage, v))
}

// TubeStorageContains applies the Contains predicate on the "tube_storage" field.
func TubeStorageContains(v string) predicate.Tube {
	return predicate.Tube(sql.FieldContains(FieldTubeStorage, v))
}

// TubeStorageHasPrefix applies the HasPrefix predicate on the "tube_storage" field.
func TubeStorageHasPrefix(v string) predicate.Tube {
	return predicate.Tube(sql.FieldHasPrefix(FieldTubeStorage, v))
}

// TubeStorageHasSuffix applies the HasSuffix predicate on the "tube_storage" field.
func TubeStorageHasSuffix(v string) predicate.Tube {
	return predicate.Tube(sql.FieldHasSuffix(FieldTubeStorage, v))
}

// TubeStorageEqualFold applies the EqualFold predicate on the "tube_storage" field.
func TubeStorageEqualFold(v string) predicate.Tube {
	return predicate.Tube(sql.FieldEqualFold(FieldTubeStorage, v))
}

// TubeStorageContainsFold applies the ContainsFold predicate on the "tube_storage" field.
func TubeStorageContainsFold(v string) predicate.Tube {
	return predicate.Tube(sql.FieldContainsFold(FieldTubeStorage, v))
}

// TubeReceiveTimeEQ applies the EQ predicate on the "tube_receive_time" field.
func TubeReceiveTimeEQ(v time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldTubeReceiveTime, v))
}

// TubeReceiveTimeNEQ applies the NEQ predicate on the "tube_receive_time" field.
func TubeReceiveTimeNEQ(v time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldNEQ(FieldTubeReceiveTime, v))
}

// TubeReceiveTimeIn applies the In predicate on the "tube_receive_time" field.
func TubeReceiveTimeIn(vs ...time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldIn(FieldTubeReceiveTime, vs...))
}

// TubeReceiveTimeNotIn applies the NotIn predicate on the "tube_receive_time" field.
func TubeReceiveTimeNotIn(vs ...time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldNotIn(FieldTubeReceiveTime, vs...))
}

// TubeReceiveTimeGT applies the GT predicate on the "tube_receive_time" field.
func TubeReceiveTimeGT(v time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldGT(FieldTubeReceiveTime, v))
}

// TubeReceiveTimeGTE applies the GTE predicate on the "tube_receive_time" field.
func TubeReceiveTimeGTE(v time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldGTE(FieldTubeReceiveTime, v))
}

// TubeReceiveTimeLT applies the LT predicate on the "tube_receive_time" field.
func TubeReceiveTimeLT(v time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldLT(FieldTubeReceiveTime, v))
}

// TubeReceiveTimeLTE applies the LTE predicate on the "tube_receive_time" field.
func TubeReceiveTimeLTE(v time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldLTE(FieldTubeReceiveTime, v))
}

// TubeTurnaroundTimeEQ applies the EQ predicate on the "tube_turnaround_time" field.
func TubeTurnaroundTimeEQ(v int) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldTubeTurnaroundTime, v))
}

// TubeTurnaroundTimeNEQ applies the NEQ predicate on the "tube_turnaround_time" field.
func TubeTurnaroundTimeNEQ(v int) predicate.Tube {
	return predicate.Tube(sql.FieldNEQ(FieldTubeTurnaroundTime, v))
}

// TubeTurnaroundTimeIn applies the In predicate on the "tube_turnaround_time" field.
func TubeTurnaroundTimeIn(vs ...int) predicate.Tube {
	return predicate.Tube(sql.FieldIn(FieldTubeTurnaroundTime, vs...))
}

// TubeTurnaroundTimeNotIn applies the NotIn predicate on the "tube_turnaround_time" field.
func TubeTurnaroundTimeNotIn(vs ...int) predicate.Tube {
	return predicate.Tube(sql.FieldNotIn(FieldTubeTurnaroundTime, vs...))
}

// TubeTurnaroundTimeGT applies the GT predicate on the "tube_turnaround_time" field.
func TubeTurnaroundTimeGT(v int) predicate.Tube {
	return predicate.Tube(sql.FieldGT(FieldTubeTurnaroundTime, v))
}

// TubeTurnaroundTimeGTE applies the GTE predicate on the "tube_turnaround_time" field.
func TubeTurnaroundTimeGTE(v int) predicate.Tube {
	return predicate.Tube(sql.FieldGTE(FieldTubeTurnaroundTime, v))
}

// TubeTurnaroundTimeLT applies the LT predicate on the "tube_turnaround_time" field.
func TubeTurnaroundTimeLT(v int) predicate.Tube {
	return predicate.Tube(sql.FieldLT(FieldTubeTurnaroundTime, v))
}

// TubeTurnaroundTimeLTE applies the LTE predicate on the "tube_turnaround_time" field.
func TubeTurnaroundTimeLTE(v int) predicate.Tube {
	return predicate.Tube(sql.FieldLTE(FieldTubeTurnaroundTime, v))
}

// TubeStabilityEQ applies the EQ predicate on the "tube_stability" field.
func TubeStabilityEQ(v int) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldTubeStability, v))
}

// TubeStabilityNEQ applies the NEQ predicate on the "tube_stability" field.
func TubeStabilityNEQ(v int) predicate.Tube {
	return predicate.Tube(sql.FieldNEQ(FieldTubeStability, v))
}

// TubeStabilityIn applies the In predicate on the "tube_stability" field.
func TubeStabilityIn(vs ...int) predicate.Tube {
	return predicate.Tube(sql.FieldIn(FieldTubeStability, vs...))
}

// TubeStabilityNotIn applies the NotIn predicate on the "tube_stability" field.
func TubeStabilityNotIn(vs ...int) predicate.Tube {
	return predicate.Tube(sql.FieldNotIn(FieldTubeStability, vs...))
}

// TubeStabilityGT applies the GT predicate on the "tube_stability" field.
func TubeStabilityGT(v int) predicate.Tube {
	return predicate.Tube(sql.FieldGT(FieldTubeStability, v))
}

// TubeStabilityGTE applies the GTE predicate on the "tube_stability" field.
func TubeStabilityGTE(v int) predicate.Tube {
	return predicate.Tube(sql.FieldGTE(FieldTubeStability, v))
}

// TubeStabilityLT applies the LT predicate on the "tube_stability" field.
func TubeStabilityLT(v int) predicate.Tube {
	return predicate.Tube(sql.FieldLT(FieldTubeStability, v))
}

// TubeStabilityLTE applies the LTE predicate on the "tube_stability" field.
func TubeStabilityLTE(v int) predicate.Tube {
	return predicate.Tube(sql.FieldLTE(FieldTubeStability, v))
}

// IsActiveEQ applies the EQ predicate on the "isActive" field.
func IsActiveEQ(v bool) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "isActive" field.
func IsActiveNEQ(v bool) predicate.Tube {
	return predicate.Tube(sql.FieldNEQ(FieldIsActive, v))
}

// IssuesEQ applies the EQ predicate on the "issues" field.
func IssuesEQ(v string) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldIssues, v))
}

// IssuesNEQ applies the NEQ predicate on the "issues" field.
func IssuesNEQ(v string) predicate.Tube {
	return predicate.Tube(sql.FieldNEQ(FieldIssues, v))
}

// IssuesIn applies the In predicate on the "issues" field.
func IssuesIn(vs ...string) predicate.Tube {
	return predicate.Tube(sql.FieldIn(FieldIssues, vs...))
}

// IssuesNotIn applies the NotIn predicate on the "issues" field.
func IssuesNotIn(vs ...string) predicate.Tube {
	return predicate.Tube(sql.FieldNotIn(FieldIssues, vs...))
}

// IssuesGT applies the GT predicate on the "issues" field.
func IssuesGT(v string) predicate.Tube {
	return predicate.Tube(sql.FieldGT(FieldIssues, v))
}

// IssuesGTE applies the GTE predicate on the "issues" field.
func IssuesGTE(v string) predicate.Tube {
	return predicate.Tube(sql.FieldGTE(FieldIssues, v))
}

// IssuesLT applies the LT predicate on the "issues" field.
func IssuesLT(v string) predicate.Tube {
	return predicate.Tube(sql.FieldLT(FieldIssues, v))
}

// IssuesLTE applies the LTE predicate on the "issues" field.
func IssuesLTE(v string) predicate.Tube {
	return predicate.Tube(sql.FieldLTE(FieldIssues, v))
}

// IssuesContains applies the Contains predicate on the "issues" field.
func IssuesContains(v string) predicate.Tube {
	return predicate.Tube(sql.FieldContains(FieldIssues, v))
}

// IssuesHasPrefix applies the HasPrefix predicate on the "issues" field.
func IssuesHasPrefix(v string) predicate.Tube {
	return predicate.Tube(sql.FieldHasPrefix(FieldIssues, v))
}

// IssuesHasSuffix applies the HasSuffix predicate on the "issues" field.
func IssuesHasSuffix(v string) predicate.Tube {
	return predicate.Tube(sql.FieldHasSuffix(FieldIssues, v))
}

// IssuesEqualFold applies the EqualFold predicate on the "issues" field.
func IssuesEqualFold(v string) predicate.Tube {
	return predicate.Tube(sql.FieldEqualFold(FieldIssues, v))
}

// IssuesContainsFold applies the ContainsFold predicate on the "issues" field.
func IssuesContainsFold(v string) predicate.Tube {
	return predicate.Tube(sql.FieldContainsFold(FieldIssues, v))
}

// TubeCollectionTimeEQ applies the EQ predicate on the "tube_collection_time" field.
func TubeCollectionTimeEQ(v time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldEQ(FieldTubeCollectionTime, v))
}

// TubeCollectionTimeNEQ applies the NEQ predicate on the "tube_collection_time" field.
func TubeCollectionTimeNEQ(v time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldNEQ(FieldTubeCollectionTime, v))
}

// TubeCollectionTimeIn applies the In predicate on the "tube_collection_time" field.
func TubeCollectionTimeIn(vs ...time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldIn(FieldTubeCollectionTime, vs...))
}

// TubeCollectionTimeNotIn applies the NotIn predicate on the "tube_collection_time" field.
func TubeCollectionTimeNotIn(vs ...time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldNotIn(FieldTubeCollectionTime, vs...))
}

// TubeCollectionTimeGT applies the GT predicate on the "tube_collection_time" field.
func TubeCollectionTimeGT(v time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldGT(FieldTubeCollectionTime, v))
}

// TubeCollectionTimeGTE applies the GTE predicate on the "tube_collection_time" field.
func TubeCollectionTimeGTE(v time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldGTE(FieldTubeCollectionTime, v))
}

// TubeCollectionTimeLT applies the LT predicate on the "tube_collection_time" field.
func TubeCollectionTimeLT(v time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldLT(FieldTubeCollectionTime, v))
}

// TubeCollectionTimeLTE applies the LTE predicate on the "tube_collection_time" field.
func TubeCollectionTimeLTE(v time.Time) predicate.Tube {
	return predicate.Tube(sql.FieldLTE(FieldTubeCollectionTime, v))
}

// HasTubeType applies the HasEdge predicate on the "tube_type" edge.
func HasTubeType() predicate.Tube {
	return predicate.Tube(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TubeTypeTable, TubeTypePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTubeTypeWith applies the HasEdge predicate on the "tube_type" edge with a given conditions (other predicates).
func HasTubeTypeWith(preds ...predicate.TubeType) predicate.Tube {
	return predicate.Tube(func(s *sql.Selector) {
		step := newTubeTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSample applies the HasEdge predicate on the "sample" edge.
func HasSample() predicate.Tube {
	return predicate.Tube(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SampleTable, SampleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSampleWith applies the HasEdge predicate on the "sample" edge with a given conditions (other predicates).
func HasSampleWith(preds ...predicate.Sample) predicate.Tube {
	return predicate.Tube(func(s *sql.Selector) {
		step := newSampleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tube) predicate.Tube {
	return predicate.Tube(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tube) predicate.Tube {
	return predicate.Tube(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tube) predicate.Tube {
	return predicate.Tube(sql.NotPredicates(p))
}
