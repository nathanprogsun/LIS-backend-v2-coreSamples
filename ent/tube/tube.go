// Code generated by ent, DO NOT EDIT.

package tube

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tube type in the database.
	Label = "tube"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTubeID holds the string denoting the tube_id field in the database.
	FieldTubeID = "tube_id"
	// FieldSampleID holds the string denoting the sample_id field in the database.
	FieldSampleID = "sample_id"
	// FieldTubeStorage holds the string denoting the tube_storage field in the database.
	FieldTubeStorage = "tube_storage"
	// FieldTubeReceiveTime holds the string denoting the tube_receive_time field in the database.
	FieldTubeReceiveTime = "tube_receive_time"
	// FieldTubeTurnaroundTime holds the string denoting the tube_turnaround_time field in the database.
	FieldTubeTurnaroundTime = "tube_turnaround_time"
	// FieldTubeStability holds the string denoting the tube_stability field in the database.
	FieldTubeStability = "tube_stability"
	// FieldIsActive holds the string denoting the isactive field in the database.
	FieldIsActive = "isActive"
	// FieldIssues holds the string denoting the issues field in the database.
	FieldIssues = "issues"
	// FieldTubeCollectionTime holds the string denoting the tube_collection_time field in the database.
	FieldTubeCollectionTime = "tube_collection_time"
	// EdgeTubeType holds the string denoting the tube_type edge name in mutations.
	EdgeTubeType = "tube_type"
	// EdgeSample holds the string denoting the sample edge name in mutations.
	EdgeSample = "sample"
	// SampleFieldID holds the string denoting the ID field of the Sample.
	SampleFieldID = "sample_id"
	// Table holds the table name of the tube in the database.
	Table = "tube"
	// TubeTypeTable is the table that holds the tube_type relation/edge. The primary key declared below.
	TubeTypeTable = "tube_tube_type"
	// TubeTypeInverseTable is the table name for the TubeType entity.
	// It exists in this package in order to avoid circular dependency with the "tubetype" package.
	TubeTypeInverseTable = "tube_type"
	// SampleTable is the table that holds the sample relation/edge.
	SampleTable = "tube"
	// SampleInverseTable is the table name for the Sample entity.
	// It exists in this package in order to avoid circular dependency with the "sample" package.
	SampleInverseTable = "sample"
	// SampleColumn is the table column denoting the sample relation/edge.
	SampleColumn = "sample_id"
)

// Columns holds all SQL columns for tube fields.
var Columns = []string{
	FieldID,
	FieldTubeID,
	FieldSampleID,
	FieldTubeStorage,
	FieldTubeReceiveTime,
	FieldTubeTurnaroundTime,
	FieldTubeStability,
	FieldIsActive,
	FieldIssues,
	FieldTubeCollectionTime,
}

var (
	// TubeTypePrimaryKey and TubeTypeColumn2 are the table columns denoting the
	// primary key for the tube_type relation (M2M).
	TubeTypePrimaryKey = []string{"tube_id", "tube_type_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTubeStorage holds the default value on creation for the "tube_storage" field.
	DefaultTubeStorage string
	// DefaultTubeReceiveTime holds the default value on creation for the "tube_receive_time" field.
	DefaultTubeReceiveTime func() time.Time
	// DefaultTubeStability holds the default value on creation for the "tube_stability" field.
	DefaultTubeStability int
	// DefaultIsActive holds the default value on creation for the "isActive" field.
	DefaultIsActive bool
	// DefaultIssues holds the default value on creation for the "issues" field.
	DefaultIssues string
	// DefaultTubeCollectionTime holds the default value on creation for the "tube_collection_time" field.
	DefaultTubeCollectionTime func() time.Time
)

// OrderOption defines the ordering options for the Tube queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTubeID orders the results by the tube_id field.
func ByTubeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTubeID, opts...).ToFunc()
}

// BySampleID orders the results by the sample_id field.
func BySampleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSampleID, opts...).ToFunc()
}

// ByTubeStorage orders the results by the tube_storage field.
func ByTubeStorage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTubeStorage, opts...).ToFunc()
}

// ByTubeReceiveTime orders the results by the tube_receive_time field.
func ByTubeReceiveTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTubeReceiveTime, opts...).ToFunc()
}

// ByTubeTurnaroundTime orders the results by the tube_turnaround_time field.
func ByTubeTurnaroundTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTubeTurnaroundTime, opts...).ToFunc()
}

// ByTubeStability orders the results by the tube_stability field.
func ByTubeStability(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTubeStability, opts...).ToFunc()
}

// ByIsActive orders the results by the isActive field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByIssues orders the results by the issues field.
func ByIssues(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIssues, opts...).ToFunc()
}

// ByTubeCollectionTime orders the results by the tube_collection_time field.
func ByTubeCollectionTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTubeCollectionTime, opts...).ToFunc()
}

// ByTubeTypeCount orders the results by tube_type count.
func ByTubeTypeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTubeTypeStep(), opts...)
	}
}

// ByTubeType orders the results by tube_type terms.
func ByTubeType(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTubeTypeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySampleField orders the results by sample field.
func BySampleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSampleStep(), sql.OrderByField(field, opts...))
	}
}
func newTubeTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TubeTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TubeTypeTable, TubeTypePrimaryKey...),
	)
}
func newSampleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SampleInverseTable, SampleFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SampleTable, SampleColumn),
	)
}
