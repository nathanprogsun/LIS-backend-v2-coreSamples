// Code generated by ent, DO NOT EDIT.

package tubetype

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tubetype type in the database.
	Label = "tube_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTubeName holds the string denoting the tube_name field in the database.
	FieldTubeName = "tube_name"
	// FieldTubeTypeEnum holds the string denoting the tube_type_enum field in the database.
	FieldTubeTypeEnum = "tube_type_enum"
	// FieldTubeTypeSymbol holds the string denoting the tube_type_symbol field in the database.
	FieldTubeTypeSymbol = "tube_type_symbol"
	// EdgeTube holds the string denoting the tube edge name in mutations.
	EdgeTube = "tube"
	// EdgeSampleTypes holds the string denoting the sample_types edge name in mutations.
	EdgeSampleTypes = "sample_types"
	// EdgeTests holds the string denoting the tests edge name in mutations.
	EdgeTests = "tests"
	// SampleTypeFieldID holds the string denoting the ID field of the SampleType.
	SampleTypeFieldID = "sample_type_id"
	// TestFieldID holds the string denoting the ID field of the Test.
	TestFieldID = "test_id"
	// Table holds the table name of the tubetype in the database.
	Table = "tube_type"
	// TubeTable is the table that holds the tube relation/edge. The primary key declared below.
	TubeTable = "tube_tube_type"
	// TubeInverseTable is the table name for the Tube entity.
	// It exists in this package in order to avoid circular dependency with the "tube" package.
	TubeInverseTable = "tube"
	// SampleTypesTable is the table that holds the sample_types relation/edge. The primary key declared below.
	SampleTypesTable = "_sample_type_to_tube_type"
	// SampleTypesInverseTable is the table name for the SampleType entity.
	// It exists in this package in order to avoid circular dependency with the "sampletype" package.
	SampleTypesInverseTable = "sample_type"
	// TestsTable is the table that holds the tests relation/edge. The primary key declared below.
	TestsTable = "_tube_type_to_test"
	// TestsInverseTable is the table name for the Test entity.
	// It exists in this package in order to avoid circular dependency with the "test" package.
	TestsInverseTable = "test"
)

// Columns holds all SQL columns for tubetype fields.
var Columns = []string{
	FieldID,
	FieldTubeName,
	FieldTubeTypeEnum,
	FieldTubeTypeSymbol,
}

var (
	// TubePrimaryKey and TubeColumn2 are the table columns denoting the
	// primary key for the tube relation (M2M).
	TubePrimaryKey = []string{"tube_id", "tube_type_id"}
	// SampleTypesPrimaryKey and SampleTypesColumn2 are the table columns denoting the
	// primary key for the sample_types relation (M2M).
	SampleTypesPrimaryKey = []string{"sample_type_id", "tube_type_id"}
	// TestsPrimaryKey and TestsColumn2 are the table columns denoting the
	// primary key for the tests relation (M2M).
	TestsPrimaryKey = []string{"tube_type_id", "test_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the TubeType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTubeName orders the results by the tube_name field.
func ByTubeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTubeName, opts...).ToFunc()
}

// ByTubeTypeEnum orders the results by the tube_type_enum field.
func ByTubeTypeEnum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTubeTypeEnum, opts...).ToFunc()
}

// ByTubeTypeSymbol orders the results by the tube_type_symbol field.
func ByTubeTypeSymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTubeTypeSymbol, opts...).ToFunc()
}

// ByTubeCount orders the results by tube count.
func ByTubeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTubeStep(), opts...)
	}
}

// ByTube orders the results by tube terms.
func ByTube(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTubeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySampleTypesCount orders the results by sample_types count.
func BySampleTypesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSampleTypesStep(), opts...)
	}
}

// BySampleTypes orders the results by sample_types terms.
func BySampleTypes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSampleTypesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTestsCount orders the results by tests count.
func ByTestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTestsStep(), opts...)
	}
}

// ByTests orders the results by tests terms.
func ByTests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTubeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TubeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TubeTable, TubePrimaryKey...),
	)
}
func newSampleTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SampleTypesInverseTable, SampleTypeFieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SampleTypesTable, SampleTypesPrimaryKey...),
	)
}
func newTestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestsInverseTable, TestFieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TestsTable, TestsPrimaryKey...),
	)
}
