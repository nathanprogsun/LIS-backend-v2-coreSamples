// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	stdsql "database/sql"
	"fmt"
	"sync"

	"entgo.io/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// AccountSubscription is the client for interacting with the AccountSubscription builders.
	AccountSubscription *AccountSubscriptionClient
	// Address is the client for interacting with the Address builders.
	Address *AddressClient
	// BetaProgram is the client for interacting with the BetaProgram builders.
	BetaProgram *BetaProgramClient
	// BetaProgramParticipation is the client for interacting with the BetaProgramParticipation builders.
	BetaProgramParticipation *BetaProgramParticipationClient
	// Clinic is the client for interacting with the Clinic builders.
	Clinic *ClinicClient
	// Contact is the client for interacting with the Contact builders.
	Contact *ContactClient
	// CountryList is the client for interacting with the CountryList builders.
	CountryList *CountryListClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// CustomerAddressOnClinics is the client for interacting with the CustomerAddressOnClinics builders.
	CustomerAddressOnClinics *CustomerAddressOnClinicsClient
	// CustomerContactOnClinics is the client for interacting with the CustomerContactOnClinics builders.
	CustomerContactOnClinics *CustomerContactOnClinicsClient
	// CustomerSettingOnClinics is the client for interacting with the CustomerSettingOnClinics builders.
	CustomerSettingOnClinics *CustomerSettingOnClinicsClient
	// InternalUser is the client for interacting with the InternalUser builders.
	InternalUser *InternalUserClient
	// LabOrderSendHistory is the client for interacting with the LabOrderSendHistory builders.
	LabOrderSendHistory *LabOrderSendHistoryClient
	// LoginHistory is the client for interacting with the LoginHistory builders.
	LoginHistory *LoginHistoryClient
	// OrderFlag is the client for interacting with the OrderFlag builders.
	OrderFlag *OrderFlagClient
	// OrderInfo is the client for interacting with the OrderInfo builders.
	OrderInfo *OrderInfoClient
	// Patient is the client for interacting with the Patient builders.
	Patient *PatientClient
	// PatientFlag is the client for interacting with the PatientFlag builders.
	PatientFlag *PatientFlagClient
	// PatientWeightHeight is the client for interacting with the PatientWeightHeight builders.
	PatientWeightHeight *PatientWeightHeightClient
	// PendingOrderCredits is the client for interacting with the PendingOrderCredits builders.
	PendingOrderCredits *PendingOrderCreditsClient
	// RBACActions is the client for interacting with the RBACActions builders.
	RBACActions *RBACActionsClient
	// RBACResources is the client for interacting with the RBACResources builders.
	RBACResources *RBACResourcesClient
	// RBACRoles is the client for interacting with the RBACRoles builders.
	RBACRoles *RBACRolesClient
	// SalesTeam is the client for interacting with the SalesTeam builders.
	SalesTeam *SalesTeamClient
	// SalesTerritory is the client for interacting with the SalesTerritory builders.
	SalesTerritory *SalesTerritoryClient
	// SalesTitle is the client for interacting with the SalesTitle builders.
	SalesTitle *SalesTitleClient
	// Sample is the client for interacting with the Sample builders.
	Sample *SampleClient
	// SampleIDGenerate is the client for interacting with the SampleIDGenerate builders.
	SampleIDGenerate *SampleIDGenerateClient
	// SampleType is the client for interacting with the SampleType builders.
	SampleType *SampleTypeClient
	// Serviceship is the client for interacting with the Serviceship builders.
	Serviceship *ServiceshipClient
	// ServiceshipBillingPlan is the client for interacting with the ServiceshipBillingPlan builders.
	ServiceshipBillingPlan *ServiceshipBillingPlanClient
	// Setting is the client for interacting with the Setting builders.
	Setting *SettingClient
	// Test is the client for interacting with the Test builders.
	Test *TestClient
	// TestDetail is the client for interacting with the TestDetail builders.
	TestDetail *TestDetailClient
	// TestList is the client for interacting with the TestList builders.
	TestList *TestListClient
	// Tube is the client for interacting with the Tube builders.
	Tube *TubeClient
	// TubeInstructions is the client for interacting with the TubeInstructions builders.
	TubeInstructions *TubeInstructionsClient
	// TubeReceive is the client for interacting with the TubeReceive builders.
	TubeReceive *TubeReceiveClient
	// TubeRequirement is the client for interacting with the TubeRequirement builders.
	TubeRequirement *TubeRequirementClient
	// TubeType is the client for interacting with the TubeType builders.
	TubeType *TubeTypeClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserInvitationRecord is the client for interacting with the UserInvitationRecord builders.
	UserInvitationRecord *UserInvitationRecordClient
	// Zipcode is the client for interacting with the Zipcode builders.
	Zipcode *ZipcodeClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once
	// ctx lives for the life of the transaction. It is
	// the same context used by the underlying connection.
	ctx context.Context
}

type (
	// Committer is the interface that wraps the Commit method.
	Committer interface {
		Commit(context.Context, *Tx) error
	}

	// The CommitFunc type is an adapter to allow the use of ordinary
	// function as a Committer. If f is a function with the appropriate
	// signature, CommitFunc(f) is a Committer that calls f.
	CommitFunc func(context.Context, *Tx) error

	// CommitHook defines the "commit middleware". A function that gets a Committer
	// and returns a Committer. For example:
	//
	//	hook := func(next ent.Committer) ent.Committer {
	//		return ent.CommitFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Commit(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	CommitHook func(Committer) Committer
)

// Commit calls f(ctx, m).
func (f CommitFunc) Commit(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Committer = CommitFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Commit()
	})
	txDriver.mu.Lock()
	hooks := append([]CommitHook(nil), txDriver.onCommit...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Commit(tx.ctx, tx)
}

// OnCommit adds a hook to call on commit.
func (tx *Tx) OnCommit(f CommitHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onCommit = append(txDriver.onCommit, f)
	txDriver.mu.Unlock()
}

type (
	// Rollbacker is the interface that wraps the Rollback method.
	Rollbacker interface {
		Rollback(context.Context, *Tx) error
	}

	// The RollbackFunc type is an adapter to allow the use of ordinary
	// function as a Rollbacker. If f is a function with the appropriate
	// signature, RollbackFunc(f) is a Rollbacker that calls f.
	RollbackFunc func(context.Context, *Tx) error

	// RollbackHook defines the "rollback middleware". A function that gets a Rollbacker
	// and returns a Rollbacker. For example:
	//
	//	hook := func(next ent.Rollbacker) ent.Rollbacker {
	//		return ent.RollbackFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Rollback(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	RollbackHook func(Rollbacker) Rollbacker
)

// Rollback calls f(ctx, m).
func (f RollbackFunc) Rollback(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Rollbacker = RollbackFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Rollback()
	})
	txDriver.mu.Lock()
	hooks := append([]RollbackHook(nil), txDriver.onRollback...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Rollback(tx.ctx, tx)
}

// OnRollback adds a hook to call on rollback.
func (tx *Tx) OnRollback(f RollbackHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onRollback = append(txDriver.onRollback, f)
	txDriver.mu.Unlock()
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.AccountSubscription = NewAccountSubscriptionClient(tx.config)
	tx.Address = NewAddressClient(tx.config)
	tx.BetaProgram = NewBetaProgramClient(tx.config)
	tx.BetaProgramParticipation = NewBetaProgramParticipationClient(tx.config)
	tx.Clinic = NewClinicClient(tx.config)
	tx.Contact = NewContactClient(tx.config)
	tx.CountryList = NewCountryListClient(tx.config)
	tx.Customer = NewCustomerClient(tx.config)
	tx.CustomerAddressOnClinics = NewCustomerAddressOnClinicsClient(tx.config)
	tx.CustomerContactOnClinics = NewCustomerContactOnClinicsClient(tx.config)
	tx.CustomerSettingOnClinics = NewCustomerSettingOnClinicsClient(tx.config)
	tx.InternalUser = NewInternalUserClient(tx.config)
	tx.LabOrderSendHistory = NewLabOrderSendHistoryClient(tx.config)
	tx.LoginHistory = NewLoginHistoryClient(tx.config)
	tx.OrderFlag = NewOrderFlagClient(tx.config)
	tx.OrderInfo = NewOrderInfoClient(tx.config)
	tx.Patient = NewPatientClient(tx.config)
	tx.PatientFlag = NewPatientFlagClient(tx.config)
	tx.PatientWeightHeight = NewPatientWeightHeightClient(tx.config)
	tx.PendingOrderCredits = NewPendingOrderCreditsClient(tx.config)
	tx.RBACActions = NewRBACActionsClient(tx.config)
	tx.RBACResources = NewRBACResourcesClient(tx.config)
	tx.RBACRoles = NewRBACRolesClient(tx.config)
	tx.SalesTeam = NewSalesTeamClient(tx.config)
	tx.SalesTerritory = NewSalesTerritoryClient(tx.config)
	tx.SalesTitle = NewSalesTitleClient(tx.config)
	tx.Sample = NewSampleClient(tx.config)
	tx.SampleIDGenerate = NewSampleIDGenerateClient(tx.config)
	tx.SampleType = NewSampleTypeClient(tx.config)
	tx.Serviceship = NewServiceshipClient(tx.config)
	tx.ServiceshipBillingPlan = NewServiceshipBillingPlanClient(tx.config)
	tx.Setting = NewSettingClient(tx.config)
	tx.Test = NewTestClient(tx.config)
	tx.TestDetail = NewTestDetailClient(tx.config)
	tx.TestList = NewTestListClient(tx.config)
	tx.Tube = NewTubeClient(tx.config)
	tx.TubeInstructions = NewTubeInstructionsClient(tx.config)
	tx.TubeReceive = NewTubeReceiveClient(tx.config)
	tx.TubeRequirement = NewTubeRequirementClient(tx.config)
	tx.TubeType = NewTubeTypeClient(tx.config)
	tx.User = NewUserClient(tx.config)
	tx.UserInvitationRecord = NewUserInvitationRecordClient(tx.config)
	tx.Zipcode = NewZipcodeClient(tx.config)
}

// txDriver wraps the given dialect.Tx with a nop dialect.Driver implementation.
// The idea is to support transactions without adding any extra code to the builders.
// When a builder calls to driver.Tx(), it gets the same dialect.Tx instance.
// Commit and Rollback are nop for the internal builders and the user must call one
// of them in order to commit or rollback the transaction.
//
// If a closed transaction is embedded in one of the generated entities, and the entity
// applies a query, for example: AccountSubscription.QueryXXX(), the query will be executed
// through the driver which created this transaction.
//
// Note that txDriver is not goroutine safe.
type txDriver struct {
	// the driver we started the transaction from.
	drv dialect.Driver
	// tx is the underlying transaction.
	tx dialect.Tx
	// completion hooks.
	mu         sync.Mutex
	onCommit   []CommitHook
	onRollback []RollbackHook
}

// newTx creates a new transactional driver.
func newTx(ctx context.Context, drv dialect.Driver) (*txDriver, error) {
	tx, err := drv.Tx(ctx)
	if err != nil {
		return nil, err
	}
	return &txDriver{tx: tx, drv: drv}, nil
}

// Tx returns the transaction wrapper (txDriver) to avoid Commit or Rollback calls
// from the internal builders. Should be called only by the internal builders.
func (tx *txDriver) Tx(context.Context) (dialect.Tx, error) { return tx, nil }

// Dialect returns the dialect of the driver we started the transaction from.
func (tx *txDriver) Dialect() string { return tx.drv.Dialect() }

// Close is a nop close.
func (*txDriver) Close() error { return nil }

// Commit is a nop commit for the internal builders.
// User must call `Tx.Commit` in order to commit the transaction.
func (*txDriver) Commit() error { return nil }

// Rollback is a nop rollback for the internal builders.
// User must call `Tx.Rollback` in order to rollback the transaction.
func (*txDriver) Rollback() error { return nil }

// Exec calls tx.Exec.
func (tx *txDriver) Exec(ctx context.Context, query string, args, v any) error {
	return tx.tx.Exec(ctx, query, args, v)
}

// Query calls tx.Query.
func (tx *txDriver) Query(ctx context.Context, query string, args, v any) error {
	return tx.tx.Query(ctx, query, args, v)
}

var _ dialect.Driver = (*txDriver)(nil)

// ExecContext allows calling the underlying ExecContext method of the transaction if it is supported by it.
// See, database/sql#Tx.ExecContext for more information.
func (tx *txDriver) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := tx.tx.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Tx.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the transaction if it is supported by it.
// See, database/sql#Tx.QueryContext for more information.
func (tx *txDriver) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := tx.tx.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Tx.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
