// Code generated by ent, DO NOT EDIT.

package serviceship

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the serviceship type in the database.
	Label = "serviceship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTag holds the string denoting the tag field in the database.
	FieldTag = "tag"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeServiceshipBillingPlan holds the string denoting the serviceship_billing_plan edge name in mutations.
	EdgeServiceshipBillingPlan = "serviceship_billing_plan"
	// EdgeAccountSubscription holds the string denoting the account_subscription edge name in mutations.
	EdgeAccountSubscription = "account_subscription"
	// Table holds the table name of the serviceship in the database.
	Table = "serviceship"
	// ServiceshipBillingPlanTable is the table that holds the serviceship_billing_plan relation/edge.
	ServiceshipBillingPlanTable = "serviceship_billing_plan"
	// ServiceshipBillingPlanInverseTable is the table name for the ServiceshipBillingPlan entity.
	// It exists in this package in order to avoid circular dependency with the "serviceshipbillingplan" package.
	ServiceshipBillingPlanInverseTable = "serviceship_billing_plan"
	// ServiceshipBillingPlanColumn is the table column denoting the serviceship_billing_plan relation/edge.
	ServiceshipBillingPlanColumn = "serviceship_serviceship_billing_plan"
	// AccountSubscriptionTable is the table that holds the account_subscription relation/edge.
	AccountSubscriptionTable = "account_subscription"
	// AccountSubscriptionInverseTable is the table name for the AccountSubscription entity.
	// It exists in this package in order to avoid circular dependency with the "accountsubscription" package.
	AccountSubscriptionInverseTable = "account_subscription"
	// AccountSubscriptionColumn is the table column denoting the account_subscription relation/edge.
	AccountSubscriptionColumn = "serviceship_account_subscription"
)

// Columns holds all SQL columns for serviceship fields.
var Columns = []string{
	FieldID,
	FieldTag,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TagValidator is a validator for the "tag" field. It is called by the builders before save.
	TagValidator func(string) error
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeMembership Type = "membership"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeMembership:
		return nil
	default:
		return fmt.Errorf("serviceship: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Serviceship queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTag orders the results by the tag field.
func ByTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTag, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByServiceshipBillingPlanCount orders the results by serviceship_billing_plan count.
func ByServiceshipBillingPlanCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServiceshipBillingPlanStep(), opts...)
	}
}

// ByServiceshipBillingPlan orders the results by serviceship_billing_plan terms.
func ByServiceshipBillingPlan(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceshipBillingPlanStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAccountSubscriptionCount orders the results by account_subscription count.
func ByAccountSubscriptionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAccountSubscriptionStep(), opts...)
	}
}

// ByAccountSubscription orders the results by account_subscription terms.
func ByAccountSubscription(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountSubscriptionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newServiceshipBillingPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceshipBillingPlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ServiceshipBillingPlanTable, ServiceshipBillingPlanColumn),
	)
}
func newAccountSubscriptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountSubscriptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AccountSubscriptionTable, AccountSubscriptionColumn),
	)
}
