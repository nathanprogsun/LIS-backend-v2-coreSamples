// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/clinic"
	"coresamples/ent/customer"
	"coresamples/ent/customersettingonclinics"
	"coresamples/ent/setting"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerSettingOnClinicsCreate is the builder for creating a CustomerSettingOnClinics entity.
type CustomerSettingOnClinicsCreate struct {
	config
	mutation *CustomerSettingOnClinicsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCustomerID sets the "customer_id" field.
func (csocc *CustomerSettingOnClinicsCreate) SetCustomerID(i int) *CustomerSettingOnClinicsCreate {
	csocc.mutation.SetCustomerID(i)
	return csocc
}

// SetClinicID sets the "clinic_id" field.
func (csocc *CustomerSettingOnClinicsCreate) SetClinicID(i int) *CustomerSettingOnClinicsCreate {
	csocc.mutation.SetClinicID(i)
	return csocc
}

// SetSettingID sets the "setting_id" field.
func (csocc *CustomerSettingOnClinicsCreate) SetSettingID(i int) *CustomerSettingOnClinicsCreate {
	csocc.mutation.SetSettingID(i)
	return csocc
}

// SetSettingName sets the "setting_name" field.
func (csocc *CustomerSettingOnClinicsCreate) SetSettingName(s string) *CustomerSettingOnClinicsCreate {
	csocc.mutation.SetSettingName(s)
	return csocc
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (csocc *CustomerSettingOnClinicsCreate) SetCustomer(c *Customer) *CustomerSettingOnClinicsCreate {
	return csocc.SetCustomerID(c.ID)
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (csocc *CustomerSettingOnClinicsCreate) SetClinic(c *Clinic) *CustomerSettingOnClinicsCreate {
	return csocc.SetClinicID(c.ID)
}

// SetSetting sets the "setting" edge to the Setting entity.
func (csocc *CustomerSettingOnClinicsCreate) SetSetting(s *Setting) *CustomerSettingOnClinicsCreate {
	return csocc.SetSettingID(s.ID)
}

// Mutation returns the CustomerSettingOnClinicsMutation object of the builder.
func (csocc *CustomerSettingOnClinicsCreate) Mutation() *CustomerSettingOnClinicsMutation {
	return csocc.mutation
}

// Save creates the CustomerSettingOnClinics in the database.
func (csocc *CustomerSettingOnClinicsCreate) Save(ctx context.Context) (*CustomerSettingOnClinics, error) {
	return withHooks(ctx, csocc.sqlSave, csocc.mutation, csocc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csocc *CustomerSettingOnClinicsCreate) SaveX(ctx context.Context) *CustomerSettingOnClinics {
	v, err := csocc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csocc *CustomerSettingOnClinicsCreate) Exec(ctx context.Context) error {
	_, err := csocc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csocc *CustomerSettingOnClinicsCreate) ExecX(ctx context.Context) {
	if err := csocc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csocc *CustomerSettingOnClinicsCreate) check() error {
	if _, ok := csocc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "CustomerSettingOnClinics.customer_id"`)}
	}
	if _, ok := csocc.mutation.ClinicID(); !ok {
		return &ValidationError{Name: "clinic_id", err: errors.New(`ent: missing required field "CustomerSettingOnClinics.clinic_id"`)}
	}
	if _, ok := csocc.mutation.SettingID(); !ok {
		return &ValidationError{Name: "setting_id", err: errors.New(`ent: missing required field "CustomerSettingOnClinics.setting_id"`)}
	}
	if _, ok := csocc.mutation.SettingName(); !ok {
		return &ValidationError{Name: "setting_name", err: errors.New(`ent: missing required field "CustomerSettingOnClinics.setting_name"`)}
	}
	if _, ok := csocc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "CustomerSettingOnClinics.customer"`)}
	}
	if _, ok := csocc.mutation.ClinicID(); !ok {
		return &ValidationError{Name: "clinic", err: errors.New(`ent: missing required edge "CustomerSettingOnClinics.clinic"`)}
	}
	if _, ok := csocc.mutation.SettingID(); !ok {
		return &ValidationError{Name: "setting", err: errors.New(`ent: missing required edge "CustomerSettingOnClinics.setting"`)}
	}
	return nil
}

func (csocc *CustomerSettingOnClinicsCreate) sqlSave(ctx context.Context) (*CustomerSettingOnClinics, error) {
	if err := csocc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csocc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csocc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	csocc.mutation.id = &_node.ID
	csocc.mutation.done = true
	return _node, nil
}

func (csocc *CustomerSettingOnClinicsCreate) createSpec() (*CustomerSettingOnClinics, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomerSettingOnClinics{config: csocc.config}
		_spec = sqlgraph.NewCreateSpec(customersettingonclinics.Table, sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt))
	)
	_spec.OnConflict = csocc.conflict
	if value, ok := csocc.mutation.SettingName(); ok {
		_spec.SetField(customersettingonclinics.FieldSettingName, field.TypeString, value)
		_node.SettingName = value
	}
	if nodes := csocc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customersettingonclinics.CustomerTable,
			Columns: []string{customersettingonclinics.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csocc.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customersettingonclinics.ClinicTable,
			Columns: []string{customersettingonclinics.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClinicID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csocc.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customersettingonclinics.SettingTable,
			Columns: []string{customersettingonclinics.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SettingID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CustomerSettingOnClinics.Create().
//		SetCustomerID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerSettingOnClinicsUpsert) {
//			SetCustomerID(v+v).
//		}).
//		Exec(ctx)
func (csocc *CustomerSettingOnClinicsCreate) OnConflict(opts ...sql.ConflictOption) *CustomerSettingOnClinicsUpsertOne {
	csocc.conflict = opts
	return &CustomerSettingOnClinicsUpsertOne{
		create: csocc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CustomerSettingOnClinics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csocc *CustomerSettingOnClinicsCreate) OnConflictColumns(columns ...string) *CustomerSettingOnClinicsUpsertOne {
	csocc.conflict = append(csocc.conflict, sql.ConflictColumns(columns...))
	return &CustomerSettingOnClinicsUpsertOne{
		create: csocc,
	}
}

type (
	// CustomerSettingOnClinicsUpsertOne is the builder for "upsert"-ing
	//  one CustomerSettingOnClinics node.
	CustomerSettingOnClinicsUpsertOne struct {
		create *CustomerSettingOnClinicsCreate
	}

	// CustomerSettingOnClinicsUpsert is the "OnConflict" setter.
	CustomerSettingOnClinicsUpsert struct {
		*sql.UpdateSet
	}
)

// SetCustomerID sets the "customer_id" field.
func (u *CustomerSettingOnClinicsUpsert) SetCustomerID(v int) *CustomerSettingOnClinicsUpsert {
	u.Set(customersettingonclinics.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CustomerSettingOnClinicsUpsert) UpdateCustomerID() *CustomerSettingOnClinicsUpsert {
	u.SetExcluded(customersettingonclinics.FieldCustomerID)
	return u
}

// SetClinicID sets the "clinic_id" field.
func (u *CustomerSettingOnClinicsUpsert) SetClinicID(v int) *CustomerSettingOnClinicsUpsert {
	u.Set(customersettingonclinics.FieldClinicID, v)
	return u
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *CustomerSettingOnClinicsUpsert) UpdateClinicID() *CustomerSettingOnClinicsUpsert {
	u.SetExcluded(customersettingonclinics.FieldClinicID)
	return u
}

// SetSettingID sets the "setting_id" field.
func (u *CustomerSettingOnClinicsUpsert) SetSettingID(v int) *CustomerSettingOnClinicsUpsert {
	u.Set(customersettingonclinics.FieldSettingID, v)
	return u
}

// UpdateSettingID sets the "setting_id" field to the value that was provided on create.
func (u *CustomerSettingOnClinicsUpsert) UpdateSettingID() *CustomerSettingOnClinicsUpsert {
	u.SetExcluded(customersettingonclinics.FieldSettingID)
	return u
}

// SetSettingName sets the "setting_name" field.
func (u *CustomerSettingOnClinicsUpsert) SetSettingName(v string) *CustomerSettingOnClinicsUpsert {
	u.Set(customersettingonclinics.FieldSettingName, v)
	return u
}

// UpdateSettingName sets the "setting_name" field to the value that was provided on create.
func (u *CustomerSettingOnClinicsUpsert) UpdateSettingName() *CustomerSettingOnClinicsUpsert {
	u.SetExcluded(customersettingonclinics.FieldSettingName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CustomerSettingOnClinics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CustomerSettingOnClinicsUpsertOne) UpdateNewValues() *CustomerSettingOnClinicsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CustomerSettingOnClinics.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CustomerSettingOnClinicsUpsertOne) Ignore() *CustomerSettingOnClinicsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerSettingOnClinicsUpsertOne) DoNothing() *CustomerSettingOnClinicsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerSettingOnClinicsCreate.OnConflict
// documentation for more info.
func (u *CustomerSettingOnClinicsUpsertOne) Update(set func(*CustomerSettingOnClinicsUpsert)) *CustomerSettingOnClinicsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerSettingOnClinicsUpsert{UpdateSet: update})
	}))
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *CustomerSettingOnClinicsUpsertOne) SetCustomerID(v int) *CustomerSettingOnClinicsUpsertOne {
	return u.Update(func(s *CustomerSettingOnClinicsUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CustomerSettingOnClinicsUpsertOne) UpdateCustomerID() *CustomerSettingOnClinicsUpsertOne {
	return u.Update(func(s *CustomerSettingOnClinicsUpsert) {
		s.UpdateCustomerID()
	})
}

// SetClinicID sets the "clinic_id" field.
func (u *CustomerSettingOnClinicsUpsertOne) SetClinicID(v int) *CustomerSettingOnClinicsUpsertOne {
	return u.Update(func(s *CustomerSettingOnClinicsUpsert) {
		s.SetClinicID(v)
	})
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *CustomerSettingOnClinicsUpsertOne) UpdateClinicID() *CustomerSettingOnClinicsUpsertOne {
	return u.Update(func(s *CustomerSettingOnClinicsUpsert) {
		s.UpdateClinicID()
	})
}

// SetSettingID sets the "setting_id" field.
func (u *CustomerSettingOnClinicsUpsertOne) SetSettingID(v int) *CustomerSettingOnClinicsUpsertOne {
	return u.Update(func(s *CustomerSettingOnClinicsUpsert) {
		s.SetSettingID(v)
	})
}

// UpdateSettingID sets the "setting_id" field to the value that was provided on create.
func (u *CustomerSettingOnClinicsUpsertOne) UpdateSettingID() *CustomerSettingOnClinicsUpsertOne {
	return u.Update(func(s *CustomerSettingOnClinicsUpsert) {
		s.UpdateSettingID()
	})
}

// SetSettingName sets the "setting_name" field.
func (u *CustomerSettingOnClinicsUpsertOne) SetSettingName(v string) *CustomerSettingOnClinicsUpsertOne {
	return u.Update(func(s *CustomerSettingOnClinicsUpsert) {
		s.SetSettingName(v)
	})
}

// UpdateSettingName sets the "setting_name" field to the value that was provided on create.
func (u *CustomerSettingOnClinicsUpsertOne) UpdateSettingName() *CustomerSettingOnClinicsUpsertOne {
	return u.Update(func(s *CustomerSettingOnClinicsUpsert) {
		s.UpdateSettingName()
	})
}

// Exec executes the query.
func (u *CustomerSettingOnClinicsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CustomerSettingOnClinicsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerSettingOnClinicsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CustomerSettingOnClinicsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CustomerSettingOnClinicsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CustomerSettingOnClinicsCreateBulk is the builder for creating many CustomerSettingOnClinics entities in bulk.
type CustomerSettingOnClinicsCreateBulk struct {
	config
	err      error
	builders []*CustomerSettingOnClinicsCreate
	conflict []sql.ConflictOption
}

// Save creates the CustomerSettingOnClinics entities in the database.
func (csoccb *CustomerSettingOnClinicsCreateBulk) Save(ctx context.Context) ([]*CustomerSettingOnClinics, error) {
	if csoccb.err != nil {
		return nil, csoccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(csoccb.builders))
	nodes := make([]*CustomerSettingOnClinics, len(csoccb.builders))
	mutators := make([]Mutator, len(csoccb.builders))
	for i := range csoccb.builders {
		func(i int, root context.Context) {
			builder := csoccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerSettingOnClinicsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, csoccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = csoccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, csoccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, csoccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (csoccb *CustomerSettingOnClinicsCreateBulk) SaveX(ctx context.Context) []*CustomerSettingOnClinics {
	v, err := csoccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csoccb *CustomerSettingOnClinicsCreateBulk) Exec(ctx context.Context) error {
	_, err := csoccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csoccb *CustomerSettingOnClinicsCreateBulk) ExecX(ctx context.Context) {
	if err := csoccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CustomerSettingOnClinics.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerSettingOnClinicsUpsert) {
//			SetCustomerID(v+v).
//		}).
//		Exec(ctx)
func (csoccb *CustomerSettingOnClinicsCreateBulk) OnConflict(opts ...sql.ConflictOption) *CustomerSettingOnClinicsUpsertBulk {
	csoccb.conflict = opts
	return &CustomerSettingOnClinicsUpsertBulk{
		create: csoccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CustomerSettingOnClinics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csoccb *CustomerSettingOnClinicsCreateBulk) OnConflictColumns(columns ...string) *CustomerSettingOnClinicsUpsertBulk {
	csoccb.conflict = append(csoccb.conflict, sql.ConflictColumns(columns...))
	return &CustomerSettingOnClinicsUpsertBulk{
		create: csoccb,
	}
}

// CustomerSettingOnClinicsUpsertBulk is the builder for "upsert"-ing
// a bulk of CustomerSettingOnClinics nodes.
type CustomerSettingOnClinicsUpsertBulk struct {
	create *CustomerSettingOnClinicsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CustomerSettingOnClinics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CustomerSettingOnClinicsUpsertBulk) UpdateNewValues() *CustomerSettingOnClinicsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CustomerSettingOnClinics.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CustomerSettingOnClinicsUpsertBulk) Ignore() *CustomerSettingOnClinicsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerSettingOnClinicsUpsertBulk) DoNothing() *CustomerSettingOnClinicsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerSettingOnClinicsCreateBulk.OnConflict
// documentation for more info.
func (u *CustomerSettingOnClinicsUpsertBulk) Update(set func(*CustomerSettingOnClinicsUpsert)) *CustomerSettingOnClinicsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerSettingOnClinicsUpsert{UpdateSet: update})
	}))
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *CustomerSettingOnClinicsUpsertBulk) SetCustomerID(v int) *CustomerSettingOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerSettingOnClinicsUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CustomerSettingOnClinicsUpsertBulk) UpdateCustomerID() *CustomerSettingOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerSettingOnClinicsUpsert) {
		s.UpdateCustomerID()
	})
}

// SetClinicID sets the "clinic_id" field.
func (u *CustomerSettingOnClinicsUpsertBulk) SetClinicID(v int) *CustomerSettingOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerSettingOnClinicsUpsert) {
		s.SetClinicID(v)
	})
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *CustomerSettingOnClinicsUpsertBulk) UpdateClinicID() *CustomerSettingOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerSettingOnClinicsUpsert) {
		s.UpdateClinicID()
	})
}

// SetSettingID sets the "setting_id" field.
func (u *CustomerSettingOnClinicsUpsertBulk) SetSettingID(v int) *CustomerSettingOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerSettingOnClinicsUpsert) {
		s.SetSettingID(v)
	})
}

// UpdateSettingID sets the "setting_id" field to the value that was provided on create.
func (u *CustomerSettingOnClinicsUpsertBulk) UpdateSettingID() *CustomerSettingOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerSettingOnClinicsUpsert) {
		s.UpdateSettingID()
	})
}

// SetSettingName sets the "setting_name" field.
func (u *CustomerSettingOnClinicsUpsertBulk) SetSettingName(v string) *CustomerSettingOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerSettingOnClinicsUpsert) {
		s.SetSettingName(v)
	})
}

// UpdateSettingName sets the "setting_name" field to the value that was provided on create.
func (u *CustomerSettingOnClinicsUpsertBulk) UpdateSettingName() *CustomerSettingOnClinicsUpsertBulk {
	return u.Update(func(s *CustomerSettingOnClinicsUpsert) {
		s.UpdateSettingName()
	})
}

// Exec executes the query.
func (u *CustomerSettingOnClinicsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CustomerSettingOnClinicsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CustomerSettingOnClinicsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerSettingOnClinicsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
