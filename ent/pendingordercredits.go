// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/pendingordercredits"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PendingOrderCredits is the model entity for the PendingOrderCredits schema.
type PendingOrderCredits struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int64 `json:"order_id,omitempty"`
	// CreditID holds the value of the "credit_id" field.
	CreditID int64 `json:"credit_id,omitempty"`
	// ClinicID holds the value of the "clinic_id" field.
	ClinicID     int64 `json:"clinic_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PendingOrderCredits) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pendingordercredits.FieldID, pendingordercredits.FieldOrderID, pendingordercredits.FieldCreditID, pendingordercredits.FieldClinicID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PendingOrderCredits fields.
func (poc *PendingOrderCredits) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pendingordercredits.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			poc.ID = int(value.Int64)
		case pendingordercredits.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				poc.OrderID = value.Int64
			}
		case pendingordercredits.FieldCreditID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field credit_id", values[i])
			} else if value.Valid {
				poc.CreditID = value.Int64
			}
		case pendingordercredits.FieldClinicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field clinic_id", values[i])
			} else if value.Valid {
				poc.ClinicID = value.Int64
			}
		default:
			poc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PendingOrderCredits.
// This includes values selected through modifiers, order, etc.
func (poc *PendingOrderCredits) Value(name string) (ent.Value, error) {
	return poc.selectValues.Get(name)
}

// Update returns a builder for updating this PendingOrderCredits.
// Note that you need to call PendingOrderCredits.Unwrap() before calling this method if this PendingOrderCredits
// was returned from a transaction, and the transaction was committed or rolled back.
func (poc *PendingOrderCredits) Update() *PendingOrderCreditsUpdateOne {
	return NewPendingOrderCreditsClient(poc.config).UpdateOne(poc)
}

// Unwrap unwraps the PendingOrderCredits entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (poc *PendingOrderCredits) Unwrap() *PendingOrderCredits {
	_tx, ok := poc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PendingOrderCredits is not a transactional entity")
	}
	poc.config.driver = _tx.drv
	return poc
}

// String implements the fmt.Stringer.
func (poc *PendingOrderCredits) String() string {
	var builder strings.Builder
	builder.WriteString("PendingOrderCredits(")
	builder.WriteString(fmt.Sprintf("id=%v, ", poc.ID))
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", poc.OrderID))
	builder.WriteString(", ")
	builder.WriteString("credit_id=")
	builder.WriteString(fmt.Sprintf("%v", poc.CreditID))
	builder.WriteString(", ")
	builder.WriteString("clinic_id=")
	builder.WriteString(fmt.Sprintf("%v", poc.ClinicID))
	builder.WriteByte(')')
	return builder.String()
}

// PendingOrderCreditsSlice is a parsable slice of PendingOrderCredits.
type PendingOrderCreditsSlice []*PendingOrderCredits
