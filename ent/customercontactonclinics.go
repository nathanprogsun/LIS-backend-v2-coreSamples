// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/clinic"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/customercontactonclinics"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CustomerContactOnClinics is the model entity for the CustomerContactOnClinics schema.
type CustomerContactOnClinics struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID int `json:"customer_id,omitempty"`
	// ClinicID holds the value of the "clinic_id" field.
	ClinicID int `json:"clinic_id,omitempty"`
	// ContactID holds the value of the "contact_id" field.
	ContactID int `json:"contact_id,omitempty"`
	// ContactType holds the value of the "contact_type" field.
	ContactType string `json:"contact_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerContactOnClinicsQuery when eager-loading is set.
	Edges        CustomerContactOnClinicsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CustomerContactOnClinicsEdges holds the relations/edges for other nodes in the graph.
type CustomerContactOnClinicsEdges struct {
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// Clinic holds the value of the clinic edge.
	Clinic *Clinic `json:"clinic,omitempty"`
	// Contact holds the value of the contact edge.
	Contact *Contact `json:"contact,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerContactOnClinicsEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[0] {
		if e.Customer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// ClinicOrErr returns the Clinic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerContactOnClinicsEdges) ClinicOrErr() (*Clinic, error) {
	if e.loadedTypes[1] {
		if e.Clinic == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: clinic.Label}
		}
		return e.Clinic, nil
	}
	return nil, &NotLoadedError{edge: "clinic"}
}

// ContactOrErr returns the Contact value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerContactOnClinicsEdges) ContactOrErr() (*Contact, error) {
	if e.loadedTypes[2] {
		if e.Contact == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: contact.Label}
		}
		return e.Contact, nil
	}
	return nil, &NotLoadedError{edge: "contact"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomerContactOnClinics) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customercontactonclinics.FieldID, customercontactonclinics.FieldCustomerID, customercontactonclinics.FieldClinicID, customercontactonclinics.FieldContactID:
			values[i] = new(sql.NullInt64)
		case customercontactonclinics.FieldContactType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomerContactOnClinics fields.
func (ccoc *CustomerContactOnClinics) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customercontactonclinics.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ccoc.ID = int(value.Int64)
		case customercontactonclinics.FieldCustomerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				ccoc.CustomerID = int(value.Int64)
			}
		case customercontactonclinics.FieldClinicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field clinic_id", values[i])
			} else if value.Valid {
				ccoc.ClinicID = int(value.Int64)
			}
		case customercontactonclinics.FieldContactID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field contact_id", values[i])
			} else if value.Valid {
				ccoc.ContactID = int(value.Int64)
			}
		case customercontactonclinics.FieldContactType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_type", values[i])
			} else if value.Valid {
				ccoc.ContactType = value.String
			}
		default:
			ccoc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CustomerContactOnClinics.
// This includes values selected through modifiers, order, etc.
func (ccoc *CustomerContactOnClinics) Value(name string) (ent.Value, error) {
	return ccoc.selectValues.Get(name)
}

// QueryCustomer queries the "customer" edge of the CustomerContactOnClinics entity.
func (ccoc *CustomerContactOnClinics) QueryCustomer() *CustomerQuery {
	return NewCustomerContactOnClinicsClient(ccoc.config).QueryCustomer(ccoc)
}

// QueryClinic queries the "clinic" edge of the CustomerContactOnClinics entity.
func (ccoc *CustomerContactOnClinics) QueryClinic() *ClinicQuery {
	return NewCustomerContactOnClinicsClient(ccoc.config).QueryClinic(ccoc)
}

// QueryContact queries the "contact" edge of the CustomerContactOnClinics entity.
func (ccoc *CustomerContactOnClinics) QueryContact() *ContactQuery {
	return NewCustomerContactOnClinicsClient(ccoc.config).QueryContact(ccoc)
}

// Update returns a builder for updating this CustomerContactOnClinics.
// Note that you need to call CustomerContactOnClinics.Unwrap() before calling this method if this CustomerContactOnClinics
// was returned from a transaction, and the transaction was committed or rolled back.
func (ccoc *CustomerContactOnClinics) Update() *CustomerContactOnClinicsUpdateOne {
	return NewCustomerContactOnClinicsClient(ccoc.config).UpdateOne(ccoc)
}

// Unwrap unwraps the CustomerContactOnClinics entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ccoc *CustomerContactOnClinics) Unwrap() *CustomerContactOnClinics {
	_tx, ok := ccoc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CustomerContactOnClinics is not a transactional entity")
	}
	ccoc.config.driver = _tx.drv
	return ccoc
}

// String implements the fmt.Stringer.
func (ccoc *CustomerContactOnClinics) String() string {
	var builder strings.Builder
	builder.WriteString("CustomerContactOnClinics(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ccoc.ID))
	builder.WriteString("customer_id=")
	builder.WriteString(fmt.Sprintf("%v", ccoc.CustomerID))
	builder.WriteString(", ")
	builder.WriteString("clinic_id=")
	builder.WriteString(fmt.Sprintf("%v", ccoc.ClinicID))
	builder.WriteString(", ")
	builder.WriteString("contact_id=")
	builder.WriteString(fmt.Sprintf("%v", ccoc.ContactID))
	builder.WriteString(", ")
	builder.WriteString("contact_type=")
	builder.WriteString(ccoc.ContactType)
	builder.WriteByte(')')
	return builder.String()
}

// CustomerContactOnClinicsSlice is a parsable slice of CustomerContactOnClinics.
type CustomerContactOnClinicsSlice []*CustomerContactOnClinics
