// Code generated by ent, DO NOT EDIT.

package zipcode

import (
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldLTE(FieldID, id))
}

// ZipCodeType applies equality check predicate on the "ZipCodeType" field. It's identical to ZipCodeTypeEQ.
func ZipCodeType(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEQ(FieldZipCodeType, v))
}

// City applies equality check predicate on the "City" field. It's identical to CityEQ.
func City(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEQ(FieldCity, v))
}

// State applies equality check predicate on the "State" field. It's identical to StateEQ.
func State(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEQ(FieldState, v))
}

// LocationType applies equality check predicate on the "LocationType" field. It's identical to LocationTypeEQ.
func LocationType(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEQ(FieldLocationType, v))
}

// Lat applies equality check predicate on the "Lat" field. It's identical to LatEQ.
func Lat(v float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEQ(FieldLat, v))
}

// Long applies equality check predicate on the "Long" field. It's identical to LongEQ.
func Long(v float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEQ(FieldLong, v))
}

// ZipCodeTypeEQ applies the EQ predicate on the "ZipCodeType" field.
func ZipCodeTypeEQ(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEQ(FieldZipCodeType, v))
}

// ZipCodeTypeNEQ applies the NEQ predicate on the "ZipCodeType" field.
func ZipCodeTypeNEQ(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldNEQ(FieldZipCodeType, v))
}

// ZipCodeTypeIn applies the In predicate on the "ZipCodeType" field.
func ZipCodeTypeIn(vs ...string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldIn(FieldZipCodeType, vs...))
}

// ZipCodeTypeNotIn applies the NotIn predicate on the "ZipCodeType" field.
func ZipCodeTypeNotIn(vs ...string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldNotIn(FieldZipCodeType, vs...))
}

// ZipCodeTypeGT applies the GT predicate on the "ZipCodeType" field.
func ZipCodeTypeGT(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldGT(FieldZipCodeType, v))
}

// ZipCodeTypeGTE applies the GTE predicate on the "ZipCodeType" field.
func ZipCodeTypeGTE(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldGTE(FieldZipCodeType, v))
}

// ZipCodeTypeLT applies the LT predicate on the "ZipCodeType" field.
func ZipCodeTypeLT(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldLT(FieldZipCodeType, v))
}

// ZipCodeTypeLTE applies the LTE predicate on the "ZipCodeType" field.
func ZipCodeTypeLTE(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldLTE(FieldZipCodeType, v))
}

// ZipCodeTypeContains applies the Contains predicate on the "ZipCodeType" field.
func ZipCodeTypeContains(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldContains(FieldZipCodeType, v))
}

// ZipCodeTypeHasPrefix applies the HasPrefix predicate on the "ZipCodeType" field.
func ZipCodeTypeHasPrefix(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldHasPrefix(FieldZipCodeType, v))
}

// ZipCodeTypeHasSuffix applies the HasSuffix predicate on the "ZipCodeType" field.
func ZipCodeTypeHasSuffix(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldHasSuffix(FieldZipCodeType, v))
}

// ZipCodeTypeEqualFold applies the EqualFold predicate on the "ZipCodeType" field.
func ZipCodeTypeEqualFold(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEqualFold(FieldZipCodeType, v))
}

// ZipCodeTypeContainsFold applies the ContainsFold predicate on the "ZipCodeType" field.
func ZipCodeTypeContainsFold(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldContainsFold(FieldZipCodeType, v))
}

// CityEQ applies the EQ predicate on the "City" field.
func CityEQ(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "City" field.
func CityNEQ(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "City" field.
func CityIn(vs ...string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "City" field.
func CityNotIn(vs ...string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "City" field.
func CityGT(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "City" field.
func CityGTE(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "City" field.
func CityLT(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "City" field.
func CityLTE(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "City" field.
func CityContains(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "City" field.
func CityHasPrefix(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "City" field.
func CityHasSuffix(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "City" field.
func CityEqualFold(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "City" field.
func CityContainsFold(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldContainsFold(FieldCity, v))
}

// StateEQ applies the EQ predicate on the "State" field.
func StateEQ(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "State" field.
func StateNEQ(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "State" field.
func StateIn(vs ...string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "State" field.
func StateNotIn(vs ...string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "State" field.
func StateGT(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "State" field.
func StateGTE(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "State" field.
func StateLT(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "State" field.
func StateLTE(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "State" field.
func StateContains(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "State" field.
func StateHasPrefix(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "State" field.
func StateHasSuffix(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "State" field.
func StateEqualFold(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "State" field.
func StateContainsFold(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldContainsFold(FieldState, v))
}

// LocationTypeEQ applies the EQ predicate on the "LocationType" field.
func LocationTypeEQ(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEQ(FieldLocationType, v))
}

// LocationTypeNEQ applies the NEQ predicate on the "LocationType" field.
func LocationTypeNEQ(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldNEQ(FieldLocationType, v))
}

// LocationTypeIn applies the In predicate on the "LocationType" field.
func LocationTypeIn(vs ...string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldIn(FieldLocationType, vs...))
}

// LocationTypeNotIn applies the NotIn predicate on the "LocationType" field.
func LocationTypeNotIn(vs ...string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldNotIn(FieldLocationType, vs...))
}

// LocationTypeGT applies the GT predicate on the "LocationType" field.
func LocationTypeGT(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldGT(FieldLocationType, v))
}

// LocationTypeGTE applies the GTE predicate on the "LocationType" field.
func LocationTypeGTE(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldGTE(FieldLocationType, v))
}

// LocationTypeLT applies the LT predicate on the "LocationType" field.
func LocationTypeLT(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldLT(FieldLocationType, v))
}

// LocationTypeLTE applies the LTE predicate on the "LocationType" field.
func LocationTypeLTE(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldLTE(FieldLocationType, v))
}

// LocationTypeContains applies the Contains predicate on the "LocationType" field.
func LocationTypeContains(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldContains(FieldLocationType, v))
}

// LocationTypeHasPrefix applies the HasPrefix predicate on the "LocationType" field.
func LocationTypeHasPrefix(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldHasPrefix(FieldLocationType, v))
}

// LocationTypeHasSuffix applies the HasSuffix predicate on the "LocationType" field.
func LocationTypeHasSuffix(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldHasSuffix(FieldLocationType, v))
}

// LocationTypeEqualFold applies the EqualFold predicate on the "LocationType" field.
func LocationTypeEqualFold(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEqualFold(FieldLocationType, v))
}

// LocationTypeContainsFold applies the ContainsFold predicate on the "LocationType" field.
func LocationTypeContainsFold(v string) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldContainsFold(FieldLocationType, v))
}

// LatEQ applies the EQ predicate on the "Lat" field.
func LatEQ(v float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEQ(FieldLat, v))
}

// LatNEQ applies the NEQ predicate on the "Lat" field.
func LatNEQ(v float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldNEQ(FieldLat, v))
}

// LatIn applies the In predicate on the "Lat" field.
func LatIn(vs ...float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldIn(FieldLat, vs...))
}

// LatNotIn applies the NotIn predicate on the "Lat" field.
func LatNotIn(vs ...float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldNotIn(FieldLat, vs...))
}

// LatGT applies the GT predicate on the "Lat" field.
func LatGT(v float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldGT(FieldLat, v))
}

// LatGTE applies the GTE predicate on the "Lat" field.
func LatGTE(v float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldGTE(FieldLat, v))
}

// LatLT applies the LT predicate on the "Lat" field.
func LatLT(v float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldLT(FieldLat, v))
}

// LatLTE applies the LTE predicate on the "Lat" field.
func LatLTE(v float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldLTE(FieldLat, v))
}

// LatIsNil applies the IsNil predicate on the "Lat" field.
func LatIsNil() predicate.Zipcode {
	return predicate.Zipcode(sql.FieldIsNull(FieldLat))
}

// LatNotNil applies the NotNil predicate on the "Lat" field.
func LatNotNil() predicate.Zipcode {
	return predicate.Zipcode(sql.FieldNotNull(FieldLat))
}

// LongEQ applies the EQ predicate on the "Long" field.
func LongEQ(v float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldEQ(FieldLong, v))
}

// LongNEQ applies the NEQ predicate on the "Long" field.
func LongNEQ(v float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldNEQ(FieldLong, v))
}

// LongIn applies the In predicate on the "Long" field.
func LongIn(vs ...float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldIn(FieldLong, vs...))
}

// LongNotIn applies the NotIn predicate on the "Long" field.
func LongNotIn(vs ...float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldNotIn(FieldLong, vs...))
}

// LongGT applies the GT predicate on the "Long" field.
func LongGT(v float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldGT(FieldLong, v))
}

// LongGTE applies the GTE predicate on the "Long" field.
func LongGTE(v float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldGTE(FieldLong, v))
}

// LongLT applies the LT predicate on the "Long" field.
func LongLT(v float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldLT(FieldLong, v))
}

// LongLTE applies the LTE predicate on the "Long" field.
func LongLTE(v float64) predicate.Zipcode {
	return predicate.Zipcode(sql.FieldLTE(FieldLong, v))
}

// LongIsNil applies the IsNil predicate on the "Long" field.
func LongIsNil() predicate.Zipcode {
	return predicate.Zipcode(sql.FieldIsNull(FieldLong))
}

// LongNotNil applies the NotNil predicate on the "Long" field.
func LongNotNil() predicate.Zipcode {
	return predicate.Zipcode(sql.FieldNotNull(FieldLong))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Zipcode) predicate.Zipcode {
	return predicate.Zipcode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Zipcode) predicate.Zipcode {
	return predicate.Zipcode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Zipcode) predicate.Zipcode {
	return predicate.Zipcode(sql.NotPredicates(p))
}
