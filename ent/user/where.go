// Code generated by ent, DO NOT EDIT.

package user

import (
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// UserName applies equality check predicate on the "user_name" field. It's identical to UserNameEQ.
func UserName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUserName, v))
}

// EmailUserID applies equality check predicate on the "email_user_id" field. It's identical to EmailUserIDEQ.
func EmailUserID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailUserID, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// TwoFactorAuthenticationSecret applies equality check predicate on the "two_factor_authentication_secret" field. It's identical to TwoFactorAuthenticationSecretEQ.
func TwoFactorAuthenticationSecret(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTwoFactorAuthenticationSecret, v))
}

// IsTwoFactorAuthenticationEnabled applies equality check predicate on the "is_two_factor_authentication_enabled" field. It's identical to IsTwoFactorAuthenticationEnabledEQ.
func IsTwoFactorAuthenticationEnabled(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsTwoFactorAuthenticationEnabled, v))
}

// UserGroup applies equality check predicate on the "user_group" field. It's identical to UserGroupEQ.
func UserGroup(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUserGroup, v))
}

// ImportedUserWithSaltPassword applies equality check predicate on the "imported_user_with_salt_password" field. It's identical to ImportedUserWithSaltPasswordEQ.
func ImportedUserWithSaltPassword(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldImportedUserWithSaltPassword, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsActive, v))
}

// UserNameEQ applies the EQ predicate on the "user_name" field.
func UserNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUserName, v))
}

// UserNameNEQ applies the NEQ predicate on the "user_name" field.
func UserNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUserName, v))
}

// UserNameIn applies the In predicate on the "user_name" field.
func UserNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUserName, vs...))
}

// UserNameNotIn applies the NotIn predicate on the "user_name" field.
func UserNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUserName, vs...))
}

// UserNameGT applies the GT predicate on the "user_name" field.
func UserNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUserName, v))
}

// UserNameGTE applies the GTE predicate on the "user_name" field.
func UserNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUserName, v))
}

// UserNameLT applies the LT predicate on the "user_name" field.
func UserNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUserName, v))
}

// UserNameLTE applies the LTE predicate on the "user_name" field.
func UserNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUserName, v))
}

// UserNameContains applies the Contains predicate on the "user_name" field.
func UserNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUserName, v))
}

// UserNameHasPrefix applies the HasPrefix predicate on the "user_name" field.
func UserNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUserName, v))
}

// UserNameHasSuffix applies the HasSuffix predicate on the "user_name" field.
func UserNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUserName, v))
}

// UserNameEqualFold applies the EqualFold predicate on the "user_name" field.
func UserNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUserName, v))
}

// UserNameContainsFold applies the ContainsFold predicate on the "user_name" field.
func UserNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUserName, v))
}

// EmailUserIDEQ applies the EQ predicate on the "email_user_id" field.
func EmailUserIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailUserID, v))
}

// EmailUserIDNEQ applies the NEQ predicate on the "email_user_id" field.
func EmailUserIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmailUserID, v))
}

// EmailUserIDIn applies the In predicate on the "email_user_id" field.
func EmailUserIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmailUserID, vs...))
}

// EmailUserIDNotIn applies the NotIn predicate on the "email_user_id" field.
func EmailUserIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmailUserID, vs...))
}

// EmailUserIDGT applies the GT predicate on the "email_user_id" field.
func EmailUserIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmailUserID, v))
}

// EmailUserIDGTE applies the GTE predicate on the "email_user_id" field.
func EmailUserIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmailUserID, v))
}

// EmailUserIDLT applies the LT predicate on the "email_user_id" field.
func EmailUserIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmailUserID, v))
}

// EmailUserIDLTE applies the LTE predicate on the "email_user_id" field.
func EmailUserIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmailUserID, v))
}

// EmailUserIDContains applies the Contains predicate on the "email_user_id" field.
func EmailUserIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmailUserID, v))
}

// EmailUserIDHasPrefix applies the HasPrefix predicate on the "email_user_id" field.
func EmailUserIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmailUserID, v))
}

// EmailUserIDHasSuffix applies the HasSuffix predicate on the "email_user_id" field.
func EmailUserIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmailUserID, v))
}

// EmailUserIDIsNil applies the IsNil predicate on the "email_user_id" field.
func EmailUserIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmailUserID))
}

// EmailUserIDNotNil applies the NotNil predicate on the "email_user_id" field.
func EmailUserIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmailUserID))
}

// EmailUserIDEqualFold applies the EqualFold predicate on the "email_user_id" field.
func EmailUserIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmailUserID, v))
}

// EmailUserIDContainsFold applies the ContainsFold predicate on the "email_user_id" field.
func EmailUserIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmailUserID, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// TwoFactorAuthenticationSecretEQ applies the EQ predicate on the "two_factor_authentication_secret" field.
func TwoFactorAuthenticationSecretEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTwoFactorAuthenticationSecret, v))
}

// TwoFactorAuthenticationSecretNEQ applies the NEQ predicate on the "two_factor_authentication_secret" field.
func TwoFactorAuthenticationSecretNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTwoFactorAuthenticationSecret, v))
}

// TwoFactorAuthenticationSecretIn applies the In predicate on the "two_factor_authentication_secret" field.
func TwoFactorAuthenticationSecretIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTwoFactorAuthenticationSecret, vs...))
}

// TwoFactorAuthenticationSecretNotIn applies the NotIn predicate on the "two_factor_authentication_secret" field.
func TwoFactorAuthenticationSecretNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTwoFactorAuthenticationSecret, vs...))
}

// TwoFactorAuthenticationSecretGT applies the GT predicate on the "two_factor_authentication_secret" field.
func TwoFactorAuthenticationSecretGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTwoFactorAuthenticationSecret, v))
}

// TwoFactorAuthenticationSecretGTE applies the GTE predicate on the "two_factor_authentication_secret" field.
func TwoFactorAuthenticationSecretGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTwoFactorAuthenticationSecret, v))
}

// TwoFactorAuthenticationSecretLT applies the LT predicate on the "two_factor_authentication_secret" field.
func TwoFactorAuthenticationSecretLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTwoFactorAuthenticationSecret, v))
}

// TwoFactorAuthenticationSecretLTE applies the LTE predicate on the "two_factor_authentication_secret" field.
func TwoFactorAuthenticationSecretLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTwoFactorAuthenticationSecret, v))
}

// TwoFactorAuthenticationSecretContains applies the Contains predicate on the "two_factor_authentication_secret" field.
func TwoFactorAuthenticationSecretContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTwoFactorAuthenticationSecret, v))
}

// TwoFactorAuthenticationSecretHasPrefix applies the HasPrefix predicate on the "two_factor_authentication_secret" field.
func TwoFactorAuthenticationSecretHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTwoFactorAuthenticationSecret, v))
}

// TwoFactorAuthenticationSecretHasSuffix applies the HasSuffix predicate on the "two_factor_authentication_secret" field.
func TwoFactorAuthenticationSecretHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTwoFactorAuthenticationSecret, v))
}

// TwoFactorAuthenticationSecretIsNil applies the IsNil predicate on the "two_factor_authentication_secret" field.
func TwoFactorAuthenticationSecretIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTwoFactorAuthenticationSecret))
}

// TwoFactorAuthenticationSecretNotNil applies the NotNil predicate on the "two_factor_authentication_secret" field.
func TwoFactorAuthenticationSecretNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTwoFactorAuthenticationSecret))
}

// TwoFactorAuthenticationSecretEqualFold applies the EqualFold predicate on the "two_factor_authentication_secret" field.
func TwoFactorAuthenticationSecretEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTwoFactorAuthenticationSecret, v))
}

// TwoFactorAuthenticationSecretContainsFold applies the ContainsFold predicate on the "two_factor_authentication_secret" field.
func TwoFactorAuthenticationSecretContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTwoFactorAuthenticationSecret, v))
}

// IsTwoFactorAuthenticationEnabledEQ applies the EQ predicate on the "is_two_factor_authentication_enabled" field.
func IsTwoFactorAuthenticationEnabledEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsTwoFactorAuthenticationEnabled, v))
}

// IsTwoFactorAuthenticationEnabledNEQ applies the NEQ predicate on the "is_two_factor_authentication_enabled" field.
func IsTwoFactorAuthenticationEnabledNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsTwoFactorAuthenticationEnabled, v))
}

// UserGroupEQ applies the EQ predicate on the "user_group" field.
func UserGroupEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUserGroup, v))
}

// UserGroupNEQ applies the NEQ predicate on the "user_group" field.
func UserGroupNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUserGroup, v))
}

// UserGroupIn applies the In predicate on the "user_group" field.
func UserGroupIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUserGroup, vs...))
}

// UserGroupNotIn applies the NotIn predicate on the "user_group" field.
func UserGroupNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUserGroup, vs...))
}

// UserGroupGT applies the GT predicate on the "user_group" field.
func UserGroupGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUserGroup, v))
}

// UserGroupGTE applies the GTE predicate on the "user_group" field.
func UserGroupGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUserGroup, v))
}

// UserGroupLT applies the LT predicate on the "user_group" field.
func UserGroupLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUserGroup, v))
}

// UserGroupLTE applies the LTE predicate on the "user_group" field.
func UserGroupLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUserGroup, v))
}

// UserGroupContains applies the Contains predicate on the "user_group" field.
func UserGroupContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUserGroup, v))
}

// UserGroupHasPrefix applies the HasPrefix predicate on the "user_group" field.
func UserGroupHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUserGroup, v))
}

// UserGroupHasSuffix applies the HasSuffix predicate on the "user_group" field.
func UserGroupHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUserGroup, v))
}

// UserGroupIsNil applies the IsNil predicate on the "user_group" field.
func UserGroupIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUserGroup))
}

// UserGroupNotNil applies the NotNil predicate on the "user_group" field.
func UserGroupNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUserGroup))
}

// UserGroupEqualFold applies the EqualFold predicate on the "user_group" field.
func UserGroupEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUserGroup, v))
}

// UserGroupContainsFold applies the ContainsFold predicate on the "user_group" field.
func UserGroupContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUserGroup, v))
}

// ImportedUserWithSaltPasswordEQ applies the EQ predicate on the "imported_user_with_salt_password" field.
func ImportedUserWithSaltPasswordEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldImportedUserWithSaltPassword, v))
}

// ImportedUserWithSaltPasswordNEQ applies the NEQ predicate on the "imported_user_with_salt_password" field.
func ImportedUserWithSaltPasswordNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldImportedUserWithSaltPassword, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsActive, v))
}

// HasClinic applies the HasEdge predicate on the "clinic" edge.
func HasClinic() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClinicTable, ClinicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicWith applies the HasEdge predicate on the "clinic" edge with a given conditions (other predicates).
func HasClinicWith(preds ...predicate.Clinic) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newClinicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPatientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInternalUser applies the HasEdge predicate on the "internal_user" edge.
func HasInternalUser() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InternalUserTable, InternalUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInternalUserWith applies the HasEdge predicate on the "internal_user" edge with a given conditions (other predicates).
func HasInternalUserWith(preds ...predicate.InternalUser) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newInternalUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
