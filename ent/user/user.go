// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "user_id"
	// FieldUserName holds the string denoting the user_name field in the database.
	FieldUserName = "username"
	// FieldEmailUserID holds the string denoting the email_user_id field in the database.
	FieldEmailUserID = "email_user_id"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldTwoFactorAuthenticationSecret holds the string denoting the two_factor_authentication_secret field in the database.
	FieldTwoFactorAuthenticationSecret = "twoFactorAuthenticationSecret"
	// FieldIsTwoFactorAuthenticationEnabled holds the string denoting the is_two_factor_authentication_enabled field in the database.
	FieldIsTwoFactorAuthenticationEnabled = "isTwoFactorAuthenticationEnabled"
	// FieldUserGroup holds the string denoting the user_group field in the database.
	FieldUserGroup = "user_group"
	// FieldImportedUserWithSaltPassword holds the string denoting the imported_user_with_salt_password field in the database.
	FieldImportedUserWithSaltPassword = "imported_user_with_salt_password"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "isActive"
	// EdgeClinic holds the string denoting the clinic edge name in mutations.
	EdgeClinic = "clinic"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgePatient holds the string denoting the patient edge name in mutations.
	EdgePatient = "patient"
	// EdgeInternalUser holds the string denoting the internal_user edge name in mutations.
	EdgeInternalUser = "internal_user"
	// ClinicFieldID holds the string denoting the ID field of the Clinic.
	ClinicFieldID = "clinic_id"
	// CustomerFieldID holds the string denoting the ID field of the Customer.
	CustomerFieldID = "customer_id"
	// PatientFieldID holds the string denoting the ID field of the Patient.
	PatientFieldID = "patient_id"
	// InternalUserFieldID holds the string denoting the ID field of the InternalUser.
	InternalUserFieldID = "internal_user_id"
	// Table holds the table name of the user in the database.
	Table = "user"
	// ClinicTable is the table that holds the clinic relation/edge.
	ClinicTable = "clinic"
	// ClinicInverseTable is the table name for the Clinic entity.
	// It exists in this package in order to avoid circular dependency with the "clinic" package.
	ClinicInverseTable = "clinic"
	// ClinicColumn is the table column denoting the clinic relation/edge.
	ClinicColumn = "user_id"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "customer"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customer"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "user_id"
	// PatientTable is the table that holds the patient relation/edge.
	PatientTable = "patient"
	// PatientInverseTable is the table name for the Patient entity.
	// It exists in this package in order to avoid circular dependency with the "patient" package.
	PatientInverseTable = "patient"
	// PatientColumn is the table column denoting the patient relation/edge.
	PatientColumn = "user_id"
	// InternalUserTable is the table that holds the internal_user relation/edge.
	InternalUserTable = "internal_user"
	// InternalUserInverseTable is the table name for the InternalUser entity.
	// It exists in this package in order to avoid circular dependency with the "internaluser" package.
	InternalUserInverseTable = "internal_user"
	// InternalUserColumn is the table column denoting the internal_user relation/edge.
	InternalUserColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUserName,
	FieldEmailUserID,
	FieldPassword,
	FieldTwoFactorAuthenticationSecret,
	FieldIsTwoFactorAuthenticationEnabled,
	FieldUserGroup,
	FieldImportedUserWithSaltPassword,
	FieldIsActive,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsTwoFactorAuthenticationEnabled holds the default value on creation for the "is_two_factor_authentication_enabled" field.
	DefaultIsTwoFactorAuthenticationEnabled bool
	// DefaultImportedUserWithSaltPassword holds the default value on creation for the "imported_user_with_salt_password" field.
	DefaultImportedUserWithSaltPassword bool
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserName orders the results by the user_name field.
func ByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserName, opts...).ToFunc()
}

// ByEmailUserID orders the results by the email_user_id field.
func ByEmailUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailUserID, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByTwoFactorAuthenticationSecret orders the results by the two_factor_authentication_secret field.
func ByTwoFactorAuthenticationSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTwoFactorAuthenticationSecret, opts...).ToFunc()
}

// ByIsTwoFactorAuthenticationEnabled orders the results by the is_two_factor_authentication_enabled field.
func ByIsTwoFactorAuthenticationEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTwoFactorAuthenticationEnabled, opts...).ToFunc()
}

// ByUserGroup orders the results by the user_group field.
func ByUserGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserGroup, opts...).ToFunc()
}

// ByImportedUserWithSaltPassword orders the results by the imported_user_with_salt_password field.
func ByImportedUserWithSaltPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImportedUserWithSaltPassword, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByClinicCount orders the results by clinic count.
func ByClinicCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClinicStep(), opts...)
	}
}

// ByClinic orders the results by clinic terms.
func ByClinic(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCustomerCount orders the results by customer count.
func ByCustomerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCustomerStep(), opts...)
	}
}

// ByCustomer orders the results by customer terms.
func ByCustomer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPatientCount orders the results by patient count.
func ByPatientCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPatientStep(), opts...)
	}
}

// ByPatient orders the results by patient terms.
func ByPatient(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPatientStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInternalUserCount orders the results by internal_user count.
func ByInternalUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInternalUserStep(), opts...)
	}
}

// ByInternalUser orders the results by internal_user terms.
func ByInternalUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInternalUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newClinicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicInverseTable, ClinicFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClinicTable, ClinicColumn),
	)
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, CustomerFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CustomerTable, CustomerColumn),
	)
}
func newPatientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PatientInverseTable, PatientFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PatientTable, PatientColumn),
	)
}
func newInternalUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InternalUserInverseTable, InternalUserFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InternalUserTable, InternalUserColumn),
	)
}
