// Code generated by ent, DO NOT EDIT.

package ent

import (
	"coresamples/ent/clinic"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/internaluser"
	"coresamples/ent/patient"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Contact is the model entity for the Contact schema.
type Contact struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"contact_id"`
	// ContactDescription holds the value of the "contact_description" field.
	ContactDescription string `json:"contact_description,omitempty"`
	// ContactDetails holds the value of the "contact_details" field.
	ContactDetails string `json:"contact_details,omitempty"`
	// ContactType holds the value of the "contact_type" field.
	ContactType string `json:"contact_type,omitempty"`
	// IsPrimaryContact holds the value of the "is_primary_contact" field.
	IsPrimaryContact bool `json:"is_primary_contact,omitempty"`
	// Is2faContact holds the value of the "is_2fa_contact" field.
	Is2faContact bool `json:"is_2fa_contact,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID int `json:"customer_id,omitempty"`
	// PatientID holds the value of the "patient_id" field.
	PatientID int `json:"patient_id,omitempty"`
	// ClinicID holds the value of the "clinic_id" field.
	ClinicID int `json:"clinic_id,omitempty"`
	// InternalUserID holds the value of the "internal_user_id" field.
	InternalUserID int `json:"internal_user_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// ContactLevel holds the value of the "contact_level" field.
	ContactLevel int `json:"contact_level,omitempty"`
	// ContactLevelName holds the value of the "contact_level_name" field.
	ContactLevelName string `json:"contact_level_name,omitempty"`
	// GroupContactID holds the value of the "group_contact_id" field.
	GroupContactID int `json:"group_contact_id,omitempty"`
	// ApplyToAllGroupMember holds the value of the "apply_to_all_group_member" field.
	ApplyToAllGroupMember bool `json:"apply_to_all_group_member,omitempty" applyToAllGroupMember`
	// IsGroupContact holds the value of the "is_group_contact" field.
	IsGroupContact bool `json:"isGroupContact"`
	// UseAsDefaultCreateContact holds the value of the "use_as_default_create_contact" field.
	UseAsDefaultCreateContact bool `json:"useAsDefaultCreateContact"`
	// UseGroupContact holds the value of the "use_group_contact" field.
	UseGroupContact bool `json:"useGroupContact"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContactQuery when eager-loading is set.
	Edges        ContactEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ContactEdges holds the relations/edges for other nodes in the graph.
type ContactEdges struct {
	// Clinic holds the value of the clinic edge.
	Clinic *Clinic `json:"clinic,omitempty"`
	// Patient holds the value of the patient edge.
	Patient *Patient `json:"patient,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// CustomerClinicMappings holds the value of the customer_clinic_mappings edge.
	CustomerClinicMappings []*CustomerContactOnClinics `json:"customer_clinic_mappings,omitempty"`
	// MemberContacts holds the value of the member_contacts edge.
	MemberContacts []*Contact `json:"member_contacts,omitempty"`
	// GroupContact holds the value of the group_contact edge.
	GroupContact *Contact `json:"group_contact,omitempty"`
	// InternalUser holds the value of the internal_user edge.
	InternalUser *InternalUser `json:"internal_user,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*OrderInfo `json:"orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// ClinicOrErr returns the Clinic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContactEdges) ClinicOrErr() (*Clinic, error) {
	if e.loadedTypes[0] {
		if e.Clinic == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: clinic.Label}
		}
		return e.Clinic, nil
	}
	return nil, &NotLoadedError{edge: "clinic"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContactEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[1] {
		if e.Patient == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContactEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[2] {
		if e.Customer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// CustomerClinicMappingsOrErr returns the CustomerClinicMappings value or an error if the edge
// was not loaded in eager-loading.
func (e ContactEdges) CustomerClinicMappingsOrErr() ([]*CustomerContactOnClinics, error) {
	if e.loadedTypes[3] {
		return e.CustomerClinicMappings, nil
	}
	return nil, &NotLoadedError{edge: "customer_clinic_mappings"}
}

// MemberContactsOrErr returns the MemberContacts value or an error if the edge
// was not loaded in eager-loading.
func (e ContactEdges) MemberContactsOrErr() ([]*Contact, error) {
	if e.loadedTypes[4] {
		return e.MemberContacts, nil
	}
	return nil, &NotLoadedError{edge: "member_contacts"}
}

// GroupContactOrErr returns the GroupContact value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContactEdges) GroupContactOrErr() (*Contact, error) {
	if e.loadedTypes[5] {
		if e.GroupContact == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: contact.Label}
		}
		return e.GroupContact, nil
	}
	return nil, &NotLoadedError{edge: "group_contact"}
}

// InternalUserOrErr returns the InternalUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContactEdges) InternalUserOrErr() (*InternalUser, error) {
	if e.loadedTypes[6] {
		if e.InternalUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: internaluser.Label}
		}
		return e.InternalUser, nil
	}
	return nil, &NotLoadedError{edge: "internal_user"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e ContactEdges) OrdersOrErr() ([]*OrderInfo, error) {
	if e.loadedTypes[7] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Contact) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contact.FieldIsPrimaryContact, contact.FieldIs2faContact, contact.FieldApplyToAllGroupMember, contact.FieldIsGroupContact, contact.FieldUseAsDefaultCreateContact, contact.FieldUseGroupContact:
			values[i] = new(sql.NullBool)
		case contact.FieldID, contact.FieldCustomerID, contact.FieldPatientID, contact.FieldClinicID, contact.FieldInternalUserID, contact.FieldUserID, contact.FieldContactLevel, contact.FieldGroupContactID:
			values[i] = new(sql.NullInt64)
		case contact.FieldContactDescription, contact.FieldContactDetails, contact.FieldContactType, contact.FieldContactLevelName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Contact fields.
func (c *Contact) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contact.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case contact.FieldContactDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_description", values[i])
			} else if value.Valid {
				c.ContactDescription = value.String
			}
		case contact.FieldContactDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_details", values[i])
			} else if value.Valid {
				c.ContactDetails = value.String
			}
		case contact.FieldContactType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_type", values[i])
			} else if value.Valid {
				c.ContactType = value.String
			}
		case contact.FieldIsPrimaryContact:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_primary_contact", values[i])
			} else if value.Valid {
				c.IsPrimaryContact = value.Bool
			}
		case contact.FieldIs2faContact:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_2fa_contact", values[i])
			} else if value.Valid {
				c.Is2faContact = value.Bool
			}
		case contact.FieldCustomerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				c.CustomerID = int(value.Int64)
			}
		case contact.FieldPatientID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field patient_id", values[i])
			} else if value.Valid {
				c.PatientID = int(value.Int64)
			}
		case contact.FieldClinicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field clinic_id", values[i])
			} else if value.Valid {
				c.ClinicID = int(value.Int64)
			}
		case contact.FieldInternalUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field internal_user_id", values[i])
			} else if value.Valid {
				c.InternalUserID = int(value.Int64)
			}
		case contact.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				c.UserID = int(value.Int64)
			}
		case contact.FieldContactLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field contact_level", values[i])
			} else if value.Valid {
				c.ContactLevel = int(value.Int64)
			}
		case contact.FieldContactLevelName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_level_name", values[i])
			} else if value.Valid {
				c.ContactLevelName = value.String
			}
		case contact.FieldGroupContactID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_contact_id", values[i])
			} else if value.Valid {
				c.GroupContactID = int(value.Int64)
			}
		case contact.FieldApplyToAllGroupMember:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field apply_to_all_group_member", values[i])
			} else if value.Valid {
				c.ApplyToAllGroupMember = value.Bool
			}
		case contact.FieldIsGroupContact:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_group_contact", values[i])
			} else if value.Valid {
				c.IsGroupContact = value.Bool
			}
		case contact.FieldUseAsDefaultCreateContact:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field use_as_default_create_contact", values[i])
			} else if value.Valid {
				c.UseAsDefaultCreateContact = value.Bool
			}
		case contact.FieldUseGroupContact:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field use_group_contact", values[i])
			} else if value.Valid {
				c.UseGroupContact = value.Bool
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Contact.
// This includes values selected through modifiers, order, etc.
func (c *Contact) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryClinic queries the "clinic" edge of the Contact entity.
func (c *Contact) QueryClinic() *ClinicQuery {
	return NewContactClient(c.config).QueryClinic(c)
}

// QueryPatient queries the "patient" edge of the Contact entity.
func (c *Contact) QueryPatient() *PatientQuery {
	return NewContactClient(c.config).QueryPatient(c)
}

// QueryCustomer queries the "customer" edge of the Contact entity.
func (c *Contact) QueryCustomer() *CustomerQuery {
	return NewContactClient(c.config).QueryCustomer(c)
}

// QueryCustomerClinicMappings queries the "customer_clinic_mappings" edge of the Contact entity.
func (c *Contact) QueryCustomerClinicMappings() *CustomerContactOnClinicsQuery {
	return NewContactClient(c.config).QueryCustomerClinicMappings(c)
}

// QueryMemberContacts queries the "member_contacts" edge of the Contact entity.
func (c *Contact) QueryMemberContacts() *ContactQuery {
	return NewContactClient(c.config).QueryMemberContacts(c)
}

// QueryGroupContact queries the "group_contact" edge of the Contact entity.
func (c *Contact) QueryGroupContact() *ContactQuery {
	return NewContactClient(c.config).QueryGroupContact(c)
}

// QueryInternalUser queries the "internal_user" edge of the Contact entity.
func (c *Contact) QueryInternalUser() *InternalUserQuery {
	return NewContactClient(c.config).QueryInternalUser(c)
}

// QueryOrders queries the "orders" edge of the Contact entity.
func (c *Contact) QueryOrders() *OrderInfoQuery {
	return NewContactClient(c.config).QueryOrders(c)
}

// Update returns a builder for updating this Contact.
// Note that you need to call Contact.Unwrap() before calling this method if this Contact
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Contact) Update() *ContactUpdateOne {
	return NewContactClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Contact entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Contact) Unwrap() *Contact {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Contact is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Contact) String() string {
	var builder strings.Builder
	builder.WriteString("Contact(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("contact_description=")
	builder.WriteString(c.ContactDescription)
	builder.WriteString(", ")
	builder.WriteString("contact_details=")
	builder.WriteString(c.ContactDetails)
	builder.WriteString(", ")
	builder.WriteString("contact_type=")
	builder.WriteString(c.ContactType)
	builder.WriteString(", ")
	builder.WriteString("is_primary_contact=")
	builder.WriteString(fmt.Sprintf("%v", c.IsPrimaryContact))
	builder.WriteString(", ")
	builder.WriteString("is_2fa_contact=")
	builder.WriteString(fmt.Sprintf("%v", c.Is2faContact))
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(fmt.Sprintf("%v", c.CustomerID))
	builder.WriteString(", ")
	builder.WriteString("patient_id=")
	builder.WriteString(fmt.Sprintf("%v", c.PatientID))
	builder.WriteString(", ")
	builder.WriteString("clinic_id=")
	builder.WriteString(fmt.Sprintf("%v", c.ClinicID))
	builder.WriteString(", ")
	builder.WriteString("internal_user_id=")
	builder.WriteString(fmt.Sprintf("%v", c.InternalUserID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", c.UserID))
	builder.WriteString(", ")
	builder.WriteString("contact_level=")
	builder.WriteString(fmt.Sprintf("%v", c.ContactLevel))
	builder.WriteString(", ")
	builder.WriteString("contact_level_name=")
	builder.WriteString(c.ContactLevelName)
	builder.WriteString(", ")
	builder.WriteString("group_contact_id=")
	builder.WriteString(fmt.Sprintf("%v", c.GroupContactID))
	builder.WriteString(", ")
	builder.WriteString("apply_to_all_group_member=")
	builder.WriteString(fmt.Sprintf("%v", c.ApplyToAllGroupMember))
	builder.WriteString(", ")
	builder.WriteString("is_group_contact=")
	builder.WriteString(fmt.Sprintf("%v", c.IsGroupContact))
	builder.WriteString(", ")
	builder.WriteString("use_as_default_create_contact=")
	builder.WriteString(fmt.Sprintf("%v", c.UseAsDefaultCreateContact))
	builder.WriteString(", ")
	builder.WriteString("use_group_contact=")
	builder.WriteString(fmt.Sprintf("%v", c.UseGroupContact))
	builder.WriteByte(')')
	return builder.String()
}

// Contacts is a parsable slice of Contact.
type Contacts []*Contact
