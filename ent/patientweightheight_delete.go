// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/patientweightheight"
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PatientWeightHeightDelete is the builder for deleting a PatientWeightHeight entity.
type PatientWeightHeightDelete struct {
	config
	hooks    []Hook
	mutation *PatientWeightHeightMutation
}

// Where appends a list predicates to the PatientWeightHeightDelete builder.
func (pwhd *PatientWeightHeightDelete) Where(ps ...predicate.PatientWeightHeight) *PatientWeightHeightDelete {
	pwhd.mutation.Where(ps...)
	return pwhd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pwhd *PatientWeightHeightDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pwhd.sqlExec, pwhd.mutation, pwhd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pwhd *PatientWeightHeightDelete) ExecX(ctx context.Context) int {
	n, err := pwhd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pwhd *PatientWeightHeightDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(patientweightheight.Table, sqlgraph.NewFieldSpec(patientweightheight.FieldID, field.TypeInt))
	if ps := pwhd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pwhd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pwhd.mutation.done = true
	return affected, err
}

// PatientWeightHeightDeleteOne is the builder for deleting a single PatientWeightHeight entity.
type PatientWeightHeightDeleteOne struct {
	pwhd *PatientWeightHeightDelete
}

// Where appends a list predicates to the PatientWeightHeightDelete builder.
func (pwhdo *PatientWeightHeightDeleteOne) Where(ps ...predicate.PatientWeightHeight) *PatientWeightHeightDeleteOne {
	pwhdo.pwhd.mutation.Where(ps...)
	return pwhdo
}

// Exec executes the deletion query.
func (pwhdo *PatientWeightHeightDeleteOne) Exec(ctx context.Context) error {
	n, err := pwhdo.pwhd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{patientweightheight.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pwhdo *PatientWeightHeightDeleteOne) ExecX(ctx context.Context) {
	if err := pwhdo.Exec(ctx); err != nil {
		panic(err)
	}
}
