// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/sample"
	"coresamples/ent/tube"
	"coresamples/ent/tubetype"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TubeCreate is the builder for creating a Tube entity.
type TubeCreate struct {
	config
	mutation *TubeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTubeID sets the "tube_id" field.
func (tc *TubeCreate) SetTubeID(s string) *TubeCreate {
	tc.mutation.SetTubeID(s)
	return tc
}

// SetSampleID sets the "sample_id" field.
func (tc *TubeCreate) SetSampleID(i int) *TubeCreate {
	tc.mutation.SetSampleID(i)
	return tc
}

// SetTubeStorage sets the "tube_storage" field.
func (tc *TubeCreate) SetTubeStorage(s string) *TubeCreate {
	tc.mutation.SetTubeStorage(s)
	return tc
}

// SetNillableTubeStorage sets the "tube_storage" field if the given value is not nil.
func (tc *TubeCreate) SetNillableTubeStorage(s *string) *TubeCreate {
	if s != nil {
		tc.SetTubeStorage(*s)
	}
	return tc
}

// SetTubeReceiveTime sets the "tube_receive_time" field.
func (tc *TubeCreate) SetTubeReceiveTime(t time.Time) *TubeCreate {
	tc.mutation.SetTubeReceiveTime(t)
	return tc
}

// SetNillableTubeReceiveTime sets the "tube_receive_time" field if the given value is not nil.
func (tc *TubeCreate) SetNillableTubeReceiveTime(t *time.Time) *TubeCreate {
	if t != nil {
		tc.SetTubeReceiveTime(*t)
	}
	return tc
}

// SetTubeTurnaroundTime sets the "tube_turnaround_time" field.
func (tc *TubeCreate) SetTubeTurnaroundTime(i int) *TubeCreate {
	tc.mutation.SetTubeTurnaroundTime(i)
	return tc
}

// SetTubeStability sets the "tube_stability" field.
func (tc *TubeCreate) SetTubeStability(i int) *TubeCreate {
	tc.mutation.SetTubeStability(i)
	return tc
}

// SetNillableTubeStability sets the "tube_stability" field if the given value is not nil.
func (tc *TubeCreate) SetNillableTubeStability(i *int) *TubeCreate {
	if i != nil {
		tc.SetTubeStability(*i)
	}
	return tc
}

// SetIsActive sets the "isActive" field.
func (tc *TubeCreate) SetIsActive(b bool) *TubeCreate {
	tc.mutation.SetIsActive(b)
	return tc
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (tc *TubeCreate) SetNillableIsActive(b *bool) *TubeCreate {
	if b != nil {
		tc.SetIsActive(*b)
	}
	return tc
}

// SetIssues sets the "issues" field.
func (tc *TubeCreate) SetIssues(s string) *TubeCreate {
	tc.mutation.SetIssues(s)
	return tc
}

// SetNillableIssues sets the "issues" field if the given value is not nil.
func (tc *TubeCreate) SetNillableIssues(s *string) *TubeCreate {
	if s != nil {
		tc.SetIssues(*s)
	}
	return tc
}

// SetTubeCollectionTime sets the "tube_collection_time" field.
func (tc *TubeCreate) SetTubeCollectionTime(t time.Time) *TubeCreate {
	tc.mutation.SetTubeCollectionTime(t)
	return tc
}

// SetNillableTubeCollectionTime sets the "tube_collection_time" field if the given value is not nil.
func (tc *TubeCreate) SetNillableTubeCollectionTime(t *time.Time) *TubeCreate {
	if t != nil {
		tc.SetTubeCollectionTime(*t)
	}
	return tc
}

// AddTubeTypeIDs adds the "tube_type" edge to the TubeType entity by IDs.
func (tc *TubeCreate) AddTubeTypeIDs(ids ...int) *TubeCreate {
	tc.mutation.AddTubeTypeIDs(ids...)
	return tc
}

// AddTubeType adds the "tube_type" edges to the TubeType entity.
func (tc *TubeCreate) AddTubeType(t ...*TubeType) *TubeCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTubeTypeIDs(ids...)
}

// SetSample sets the "sample" edge to the Sample entity.
func (tc *TubeCreate) SetSample(s *Sample) *TubeCreate {
	return tc.SetSampleID(s.ID)
}

// Mutation returns the TubeMutation object of the builder.
func (tc *TubeCreate) Mutation() *TubeMutation {
	return tc.mutation
}

// Save creates the Tube in the database.
func (tc *TubeCreate) Save(ctx context.Context) (*Tube, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TubeCreate) SaveX(ctx context.Context) *Tube {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TubeCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TubeCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TubeCreate) defaults() {
	if _, ok := tc.mutation.TubeStorage(); !ok {
		v := tube.DefaultTubeStorage
		tc.mutation.SetTubeStorage(v)
	}
	if _, ok := tc.mutation.TubeReceiveTime(); !ok {
		v := tube.DefaultTubeReceiveTime()
		tc.mutation.SetTubeReceiveTime(v)
	}
	if _, ok := tc.mutation.TubeStability(); !ok {
		v := tube.DefaultTubeStability
		tc.mutation.SetTubeStability(v)
	}
	if _, ok := tc.mutation.IsActive(); !ok {
		v := tube.DefaultIsActive
		tc.mutation.SetIsActive(v)
	}
	if _, ok := tc.mutation.Issues(); !ok {
		v := tube.DefaultIssues
		tc.mutation.SetIssues(v)
	}
	if _, ok := tc.mutation.TubeCollectionTime(); !ok {
		v := tube.DefaultTubeCollectionTime()
		tc.mutation.SetTubeCollectionTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TubeCreate) check() error {
	if _, ok := tc.mutation.TubeID(); !ok {
		return &ValidationError{Name: "tube_id", err: errors.New(`ent: missing required field "Tube.tube_id"`)}
	}
	if _, ok := tc.mutation.SampleID(); !ok {
		return &ValidationError{Name: "sample_id", err: errors.New(`ent: missing required field "Tube.sample_id"`)}
	}
	if _, ok := tc.mutation.TubeStorage(); !ok {
		return &ValidationError{Name: "tube_storage", err: errors.New(`ent: missing required field "Tube.tube_storage"`)}
	}
	if _, ok := tc.mutation.TubeReceiveTime(); !ok {
		return &ValidationError{Name: "tube_receive_time", err: errors.New(`ent: missing required field "Tube.tube_receive_time"`)}
	}
	if _, ok := tc.mutation.TubeTurnaroundTime(); !ok {
		return &ValidationError{Name: "tube_turnaround_time", err: errors.New(`ent: missing required field "Tube.tube_turnaround_time"`)}
	}
	if _, ok := tc.mutation.TubeStability(); !ok {
		return &ValidationError{Name: "tube_stability", err: errors.New(`ent: missing required field "Tube.tube_stability"`)}
	}
	if _, ok := tc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "isActive", err: errors.New(`ent: missing required field "Tube.isActive"`)}
	}
	if _, ok := tc.mutation.Issues(); !ok {
		return &ValidationError{Name: "issues", err: errors.New(`ent: missing required field "Tube.issues"`)}
	}
	if _, ok := tc.mutation.TubeCollectionTime(); !ok {
		return &ValidationError{Name: "tube_collection_time", err: errors.New(`ent: missing required field "Tube.tube_collection_time"`)}
	}
	if _, ok := tc.mutation.SampleID(); !ok {
		return &ValidationError{Name: "sample", err: errors.New(`ent: missing required edge "Tube.sample"`)}
	}
	return nil
}

func (tc *TubeCreate) sqlSave(ctx context.Context) (*Tube, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TubeCreate) createSpec() (*Tube, *sqlgraph.CreateSpec) {
	var (
		_node = &Tube{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tube.Table, sqlgraph.NewFieldSpec(tube.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.TubeID(); ok {
		_spec.SetField(tube.FieldTubeID, field.TypeString, value)
		_node.TubeID = value
	}
	if value, ok := tc.mutation.TubeStorage(); ok {
		_spec.SetField(tube.FieldTubeStorage, field.TypeString, value)
		_node.TubeStorage = value
	}
	if value, ok := tc.mutation.TubeReceiveTime(); ok {
		_spec.SetField(tube.FieldTubeReceiveTime, field.TypeTime, value)
		_node.TubeReceiveTime = value
	}
	if value, ok := tc.mutation.TubeTurnaroundTime(); ok {
		_spec.SetField(tube.FieldTubeTurnaroundTime, field.TypeInt, value)
		_node.TubeTurnaroundTime = value
	}
	if value, ok := tc.mutation.TubeStability(); ok {
		_spec.SetField(tube.FieldTubeStability, field.TypeInt, value)
		_node.TubeStability = value
	}
	if value, ok := tc.mutation.IsActive(); ok {
		_spec.SetField(tube.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := tc.mutation.Issues(); ok {
		_spec.SetField(tube.FieldIssues, field.TypeString, value)
		_node.Issues = value
	}
	if value, ok := tc.mutation.TubeCollectionTime(); ok {
		_spec.SetField(tube.FieldTubeCollectionTime, field.TypeTime, value)
		_node.TubeCollectionTime = value
	}
	if nodes := tc.mutation.TubeTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tube.TubeTypeTable,
			Columns: tube.TubeTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tube.SampleTable,
			Columns: []string{tube.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SampleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tube.Create().
//		SetTubeID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TubeUpsert) {
//			SetTubeID(v+v).
//		}).
//		Exec(ctx)
func (tc *TubeCreate) OnConflict(opts ...sql.ConflictOption) *TubeUpsertOne {
	tc.conflict = opts
	return &TubeUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tube.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TubeCreate) OnConflictColumns(columns ...string) *TubeUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TubeUpsertOne{
		create: tc,
	}
}

type (
	// TubeUpsertOne is the builder for "upsert"-ing
	//  one Tube node.
	TubeUpsertOne struct {
		create *TubeCreate
	}

	// TubeUpsert is the "OnConflict" setter.
	TubeUpsert struct {
		*sql.UpdateSet
	}
)

// SetTubeID sets the "tube_id" field.
func (u *TubeUpsert) SetTubeID(v string) *TubeUpsert {
	u.Set(tube.FieldTubeID, v)
	return u
}

// UpdateTubeID sets the "tube_id" field to the value that was provided on create.
func (u *TubeUpsert) UpdateTubeID() *TubeUpsert {
	u.SetExcluded(tube.FieldTubeID)
	return u
}

// SetSampleID sets the "sample_id" field.
func (u *TubeUpsert) SetSampleID(v int) *TubeUpsert {
	u.Set(tube.FieldSampleID, v)
	return u
}

// UpdateSampleID sets the "sample_id" field to the value that was provided on create.
func (u *TubeUpsert) UpdateSampleID() *TubeUpsert {
	u.SetExcluded(tube.FieldSampleID)
	return u
}

// SetTubeStorage sets the "tube_storage" field.
func (u *TubeUpsert) SetTubeStorage(v string) *TubeUpsert {
	u.Set(tube.FieldTubeStorage, v)
	return u
}

// UpdateTubeStorage sets the "tube_storage" field to the value that was provided on create.
func (u *TubeUpsert) UpdateTubeStorage() *TubeUpsert {
	u.SetExcluded(tube.FieldTubeStorage)
	return u
}

// SetTubeReceiveTime sets the "tube_receive_time" field.
func (u *TubeUpsert) SetTubeReceiveTime(v time.Time) *TubeUpsert {
	u.Set(tube.FieldTubeReceiveTime, v)
	return u
}

// UpdateTubeReceiveTime sets the "tube_receive_time" field to the value that was provided on create.
func (u *TubeUpsert) UpdateTubeReceiveTime() *TubeUpsert {
	u.SetExcluded(tube.FieldTubeReceiveTime)
	return u
}

// SetTubeTurnaroundTime sets the "tube_turnaround_time" field.
func (u *TubeUpsert) SetTubeTurnaroundTime(v int) *TubeUpsert {
	u.Set(tube.FieldTubeTurnaroundTime, v)
	return u
}

// UpdateTubeTurnaroundTime sets the "tube_turnaround_time" field to the value that was provided on create.
func (u *TubeUpsert) UpdateTubeTurnaroundTime() *TubeUpsert {
	u.SetExcluded(tube.FieldTubeTurnaroundTime)
	return u
}

// AddTubeTurnaroundTime adds v to the "tube_turnaround_time" field.
func (u *TubeUpsert) AddTubeTurnaroundTime(v int) *TubeUpsert {
	u.Add(tube.FieldTubeTurnaroundTime, v)
	return u
}

// SetTubeStability sets the "tube_stability" field.
func (u *TubeUpsert) SetTubeStability(v int) *TubeUpsert {
	u.Set(tube.FieldTubeStability, v)
	return u
}

// UpdateTubeStability sets the "tube_stability" field to the value that was provided on create.
func (u *TubeUpsert) UpdateTubeStability() *TubeUpsert {
	u.SetExcluded(tube.FieldTubeStability)
	return u
}

// AddTubeStability adds v to the "tube_stability" field.
func (u *TubeUpsert) AddTubeStability(v int) *TubeUpsert {
	u.Add(tube.FieldTubeStability, v)
	return u
}

// SetIsActive sets the "isActive" field.
func (u *TubeUpsert) SetIsActive(v bool) *TubeUpsert {
	u.Set(tube.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "isActive" field to the value that was provided on create.
func (u *TubeUpsert) UpdateIsActive() *TubeUpsert {
	u.SetExcluded(tube.FieldIsActive)
	return u
}

// SetIssues sets the "issues" field.
func (u *TubeUpsert) SetIssues(v string) *TubeUpsert {
	u.Set(tube.FieldIssues, v)
	return u
}

// UpdateIssues sets the "issues" field to the value that was provided on create.
func (u *TubeUpsert) UpdateIssues() *TubeUpsert {
	u.SetExcluded(tube.FieldIssues)
	return u
}

// SetTubeCollectionTime sets the "tube_collection_time" field.
func (u *TubeUpsert) SetTubeCollectionTime(v time.Time) *TubeUpsert {
	u.Set(tube.FieldTubeCollectionTime, v)
	return u
}

// UpdateTubeCollectionTime sets the "tube_collection_time" field to the value that was provided on create.
func (u *TubeUpsert) UpdateTubeCollectionTime() *TubeUpsert {
	u.SetExcluded(tube.FieldTubeCollectionTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Tube.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TubeUpsertOne) UpdateNewValues() *TubeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tube.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TubeUpsertOne) Ignore() *TubeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TubeUpsertOne) DoNothing() *TubeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TubeCreate.OnConflict
// documentation for more info.
func (u *TubeUpsertOne) Update(set func(*TubeUpsert)) *TubeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TubeUpsert{UpdateSet: update})
	}))
	return u
}

// SetTubeID sets the "tube_id" field.
func (u *TubeUpsertOne) SetTubeID(v string) *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.SetTubeID(v)
	})
}

// UpdateTubeID sets the "tube_id" field to the value that was provided on create.
func (u *TubeUpsertOne) UpdateTubeID() *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateTubeID()
	})
}

// SetSampleID sets the "sample_id" field.
func (u *TubeUpsertOne) SetSampleID(v int) *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.SetSampleID(v)
	})
}

// UpdateSampleID sets the "sample_id" field to the value that was provided on create.
func (u *TubeUpsertOne) UpdateSampleID() *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateSampleID()
	})
}

// SetTubeStorage sets the "tube_storage" field.
func (u *TubeUpsertOne) SetTubeStorage(v string) *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.SetTubeStorage(v)
	})
}

// UpdateTubeStorage sets the "tube_storage" field to the value that was provided on create.
func (u *TubeUpsertOne) UpdateTubeStorage() *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateTubeStorage()
	})
}

// SetTubeReceiveTime sets the "tube_receive_time" field.
func (u *TubeUpsertOne) SetTubeReceiveTime(v time.Time) *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.SetTubeReceiveTime(v)
	})
}

// UpdateTubeReceiveTime sets the "tube_receive_time" field to the value that was provided on create.
func (u *TubeUpsertOne) UpdateTubeReceiveTime() *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateTubeReceiveTime()
	})
}

// SetTubeTurnaroundTime sets the "tube_turnaround_time" field.
func (u *TubeUpsertOne) SetTubeTurnaroundTime(v int) *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.SetTubeTurnaroundTime(v)
	})
}

// AddTubeTurnaroundTime adds v to the "tube_turnaround_time" field.
func (u *TubeUpsertOne) AddTubeTurnaroundTime(v int) *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.AddTubeTurnaroundTime(v)
	})
}

// UpdateTubeTurnaroundTime sets the "tube_turnaround_time" field to the value that was provided on create.
func (u *TubeUpsertOne) UpdateTubeTurnaroundTime() *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateTubeTurnaroundTime()
	})
}

// SetTubeStability sets the "tube_stability" field.
func (u *TubeUpsertOne) SetTubeStability(v int) *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.SetTubeStability(v)
	})
}

// AddTubeStability adds v to the "tube_stability" field.
func (u *TubeUpsertOne) AddTubeStability(v int) *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.AddTubeStability(v)
	})
}

// UpdateTubeStability sets the "tube_stability" field to the value that was provided on create.
func (u *TubeUpsertOne) UpdateTubeStability() *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateTubeStability()
	})
}

// SetIsActive sets the "isActive" field.
func (u *TubeUpsertOne) SetIsActive(v bool) *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "isActive" field to the value that was provided on create.
func (u *TubeUpsertOne) UpdateIsActive() *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateIsActive()
	})
}

// SetIssues sets the "issues" field.
func (u *TubeUpsertOne) SetIssues(v string) *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.SetIssues(v)
	})
}

// UpdateIssues sets the "issues" field to the value that was provided on create.
func (u *TubeUpsertOne) UpdateIssues() *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateIssues()
	})
}

// SetTubeCollectionTime sets the "tube_collection_time" field.
func (u *TubeUpsertOne) SetTubeCollectionTime(v time.Time) *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.SetTubeCollectionTime(v)
	})
}

// UpdateTubeCollectionTime sets the "tube_collection_time" field to the value that was provided on create.
func (u *TubeUpsertOne) UpdateTubeCollectionTime() *TubeUpsertOne {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateTubeCollectionTime()
	})
}

// Exec executes the query.
func (u *TubeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TubeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TubeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TubeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TubeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TubeCreateBulk is the builder for creating many Tube entities in bulk.
type TubeCreateBulk struct {
	config
	err      error
	builders []*TubeCreate
	conflict []sql.ConflictOption
}

// Save creates the Tube entities in the database.
func (tcb *TubeCreateBulk) Save(ctx context.Context) ([]*Tube, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tube, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TubeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TubeCreateBulk) SaveX(ctx context.Context) []*Tube {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TubeCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TubeCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tube.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TubeUpsert) {
//			SetTubeID(v+v).
//		}).
//		Exec(ctx)
func (tcb *TubeCreateBulk) OnConflict(opts ...sql.ConflictOption) *TubeUpsertBulk {
	tcb.conflict = opts
	return &TubeUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tube.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TubeCreateBulk) OnConflictColumns(columns ...string) *TubeUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TubeUpsertBulk{
		create: tcb,
	}
}

// TubeUpsertBulk is the builder for "upsert"-ing
// a bulk of Tube nodes.
type TubeUpsertBulk struct {
	create *TubeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Tube.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TubeUpsertBulk) UpdateNewValues() *TubeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tube.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TubeUpsertBulk) Ignore() *TubeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TubeUpsertBulk) DoNothing() *TubeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TubeCreateBulk.OnConflict
// documentation for more info.
func (u *TubeUpsertBulk) Update(set func(*TubeUpsert)) *TubeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TubeUpsert{UpdateSet: update})
	}))
	return u
}

// SetTubeID sets the "tube_id" field.
func (u *TubeUpsertBulk) SetTubeID(v string) *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.SetTubeID(v)
	})
}

// UpdateTubeID sets the "tube_id" field to the value that was provided on create.
func (u *TubeUpsertBulk) UpdateTubeID() *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateTubeID()
	})
}

// SetSampleID sets the "sample_id" field.
func (u *TubeUpsertBulk) SetSampleID(v int) *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.SetSampleID(v)
	})
}

// UpdateSampleID sets the "sample_id" field to the value that was provided on create.
func (u *TubeUpsertBulk) UpdateSampleID() *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateSampleID()
	})
}

// SetTubeStorage sets the "tube_storage" field.
func (u *TubeUpsertBulk) SetTubeStorage(v string) *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.SetTubeStorage(v)
	})
}

// UpdateTubeStorage sets the "tube_storage" field to the value that was provided on create.
func (u *TubeUpsertBulk) UpdateTubeStorage() *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateTubeStorage()
	})
}

// SetTubeReceiveTime sets the "tube_receive_time" field.
func (u *TubeUpsertBulk) SetTubeReceiveTime(v time.Time) *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.SetTubeReceiveTime(v)
	})
}

// UpdateTubeReceiveTime sets the "tube_receive_time" field to the value that was provided on create.
func (u *TubeUpsertBulk) UpdateTubeReceiveTime() *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateTubeReceiveTime()
	})
}

// SetTubeTurnaroundTime sets the "tube_turnaround_time" field.
func (u *TubeUpsertBulk) SetTubeTurnaroundTime(v int) *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.SetTubeTurnaroundTime(v)
	})
}

// AddTubeTurnaroundTime adds v to the "tube_turnaround_time" field.
func (u *TubeUpsertBulk) AddTubeTurnaroundTime(v int) *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.AddTubeTurnaroundTime(v)
	})
}

// UpdateTubeTurnaroundTime sets the "tube_turnaround_time" field to the value that was provided on create.
func (u *TubeUpsertBulk) UpdateTubeTurnaroundTime() *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateTubeTurnaroundTime()
	})
}

// SetTubeStability sets the "tube_stability" field.
func (u *TubeUpsertBulk) SetTubeStability(v int) *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.SetTubeStability(v)
	})
}

// AddTubeStability adds v to the "tube_stability" field.
func (u *TubeUpsertBulk) AddTubeStability(v int) *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.AddTubeStability(v)
	})
}

// UpdateTubeStability sets the "tube_stability" field to the value that was provided on create.
func (u *TubeUpsertBulk) UpdateTubeStability() *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateTubeStability()
	})
}

// SetIsActive sets the "isActive" field.
func (u *TubeUpsertBulk) SetIsActive(v bool) *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "isActive" field to the value that was provided on create.
func (u *TubeUpsertBulk) UpdateIsActive() *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateIsActive()
	})
}

// SetIssues sets the "issues" field.
func (u *TubeUpsertBulk) SetIssues(v string) *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.SetIssues(v)
	})
}

// UpdateIssues sets the "issues" field to the value that was provided on create.
func (u *TubeUpsertBulk) UpdateIssues() *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateIssues()
	})
}

// SetTubeCollectionTime sets the "tube_collection_time" field.
func (u *TubeUpsertBulk) SetTubeCollectionTime(v time.Time) *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.SetTubeCollectionTime(v)
	})
}

// UpdateTubeCollectionTime sets the "tube_collection_time" field to the value that was provided on create.
func (u *TubeUpsertBulk) UpdateTubeCollectionTime() *TubeUpsertBulk {
	return u.Update(func(s *TubeUpsert) {
		s.UpdateTubeCollectionTime()
	})
}

// Exec executes the query.
func (u *TubeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TubeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TubeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TubeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
