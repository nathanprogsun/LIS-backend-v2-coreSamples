// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountSubscriptionColumns holds the columns for the "account_subscription" table.
	AccountSubscriptionColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "account_id", Type: field.TypeInt64},
		{Name: "account_type", Type: field.TypeEnum, Enums: []string{"clinic"}},
		{Name: "subscriber_name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "start_time", Type: field.TypeTime},
		{Name: "end_time", Type: field.TypeTime},
		{Name: "serviceship_account_subscription", Type: field.TypeInt},
		{Name: "serviceship_billing_plan_account_subscription", Type: field.TypeInt},
	}
	// AccountSubscriptionTable holds the schema information for the "account_subscription" table.
	AccountSubscriptionTable = &schema.Table{
		Name:       "account_subscription",
		Columns:    AccountSubscriptionColumns,
		PrimaryKey: []*schema.Column{AccountSubscriptionColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "account_subscription_serviceship_account_subscription",
				Columns:    []*schema.Column{AccountSubscriptionColumns[7]},
				RefColumns: []*schema.Column{ServiceshipColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "account_subscription_serviceship_billing_plan_account_subscription",
				Columns:    []*schema.Column{AccountSubscriptionColumns[8]},
				RefColumns: []*schema.Column{ServiceshipBillingPlanColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// AddressColumns holds the columns for the "address" table.
	AddressColumns = []*schema.Column{
		{Name: "address_id", Type: field.TypeInt, Increment: true},
		{Name: "address_type", Type: field.TypeString, Nullable: true},
		{Name: "street_address", Type: field.TypeString, Nullable: true},
		{Name: "apt_po", Type: field.TypeString, Nullable: true},
		{Name: "city", Type: field.TypeString, Nullable: true},
		{Name: "state", Type: field.TypeString, Nullable: true},
		{Name: "zipcode", Type: field.TypeString, Nullable: true},
		{Name: "country", Type: field.TypeString, Nullable: true},
		{Name: "address_confirmed", Type: field.TypeBool, Default: true},
		{Name: "is_primary_address", Type: field.TypeBool, Default: false},
		{Name: "address_level", Type: field.TypeInt, Default: 1},
		{Name: "address_level_name", Type: field.TypeString, Default: "Customer"},
		{Name: "applyToAllGroupMember", Type: field.TypeBool, Default: false},
		{Name: "isGroupAddress", Type: field.TypeBool, Default: false},
		{Name: "useAsDefaultCreateAddress", Type: field.TypeBool, Default: true},
		{Name: "useGroupAddress", Type: field.TypeBool, Default: false},
		{Name: "group_address_id", Type: field.TypeInt, Nullable: true},
		{Name: "clinic_id", Type: field.TypeInt, Nullable: true},
		{Name: "customer_id", Type: field.TypeInt, Nullable: true},
		{Name: "internal_user_id", Type: field.TypeInt, Nullable: true},
		{Name: "patient_id", Type: field.TypeInt, Nullable: true},
	}
	// AddressTable holds the schema information for the "address" table.
	AddressTable = &schema.Table{
		Name:       "address",
		Columns:    AddressColumns,
		PrimaryKey: []*schema.Column{AddressColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "address_address_group_address",
				Columns:    []*schema.Column{AddressColumns[16]},
				RefColumns: []*schema.Column{AddressColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "address_clinic_clinic_addresses",
				Columns:    []*schema.Column{AddressColumns[17]},
				RefColumns: []*schema.Column{ClinicColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "address_customer_customer_addresses",
				Columns:    []*schema.Column{AddressColumns[18]},
				RefColumns: []*schema.Column{CustomerColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "address_internal_user_internal_user_addresses",
				Columns:    []*schema.Column{AddressColumns[19]},
				RefColumns: []*schema.Column{InternalUserColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "address_patient_patient_addresses",
				Columns:    []*schema.Column{AddressColumns[20]},
				RefColumns: []*schema.Column{PatientColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// BetaProgramsColumns holds the columns for the "beta_programs" table.
	BetaProgramsColumns = []*schema.Column{
		{Name: "beta_program_id", Type: field.TypeInt, Increment: true},
		{Name: "beta_program_name", Type: field.TypeString},
		{Name: "beta_program_description", Type: field.TypeString},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "beta_program_start_time", Type: field.TypeTime},
		{Name: "beta_program_end_time", Type: field.TypeTime, Nullable: true},
		{Name: "updated_time", Type: field.TypeTime},
		{Name: "beta_program_added_on", Type: field.TypeTime, Nullable: true},
		{Name: "allow_self_signup", Type: field.TypeBool, Nullable: true, Default: true},
	}
	// BetaProgramsTable holds the schema information for the "beta_programs" table.
	BetaProgramsTable = &schema.Table{
		Name:       "beta_programs",
		Columns:    BetaProgramsColumns,
		PrimaryKey: []*schema.Column{BetaProgramsColumns[0]},
	}
	// BetaProgramParticipationsColumns holds the columns for the "beta_program_participations" table.
	BetaProgramParticipationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "has_modified_start_time", Type: field.TypeBool, Default: false},
		{Name: "modified_start_time", Type: field.TypeTime, Nullable: true},
		{Name: "modified_end_time", Type: field.TypeTime, Nullable: true},
		{Name: "beta_program_id", Type: field.TypeInt},
		{Name: "clinic_id", Type: field.TypeInt},
		{Name: "customer_id", Type: field.TypeInt},
	}
	// BetaProgramParticipationsTable holds the schema information for the "beta_program_participations" table.
	BetaProgramParticipationsTable = &schema.Table{
		Name:       "beta_program_participations",
		Columns:    BetaProgramParticipationsColumns,
		PrimaryKey: []*schema.Column{BetaProgramParticipationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "beta_program_participations_beta_programs_participations",
				Columns:    []*schema.Column{BetaProgramParticipationsColumns[5]},
				RefColumns: []*schema.Column{BetaProgramsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "beta_program_participations_clinic_clinic_beta_program_participations",
				Columns:    []*schema.Column{BetaProgramParticipationsColumns[6]},
				RefColumns: []*schema.Column{ClinicColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "beta_program_participations_customer_customer_beta_program_participations",
				Columns:    []*schema.Column{BetaProgramParticipationsColumns[7]},
				RefColumns: []*schema.Column{CustomerColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "betaprogramparticipation_beta_program_id_customer_id_clinic_id",
				Unique:  true,
				Columns: []*schema.Column{BetaProgramParticipationsColumns[5], BetaProgramParticipationsColumns[7], BetaProgramParticipationsColumns[6]},
			},
		},
	}
	// ClinicColumns holds the columns for the "clinic" table.
	ClinicColumns = []*schema.Column{
		{Name: "clinic_id", Type: field.TypeInt, Increment: true},
		{Name: "clinic_name", Type: field.TypeString},
		{Name: "isActive", Type: field.TypeBool},
		{Name: "clinic_account_id", Type: field.TypeInt, Nullable: true},
		{Name: "clinic_name_old_system", Type: field.TypeString, Nullable: true},
		{Name: "clinic_signup_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "clinic_updated_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
	}
	// ClinicTable holds the schema information for the "clinic" table.
	ClinicTable = &schema.Table{
		Name:       "clinic",
		Columns:    ClinicColumns,
		PrimaryKey: []*schema.Column{ClinicColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "clinic_user_clinic",
				Columns:    []*schema.Column{ClinicColumns[7]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ContactColumns holds the columns for the "contact" table.
	ContactColumns = []*schema.Column{
		{Name: "contact_id", Type: field.TypeInt, Increment: true},
		{Name: "contact_description", Type: field.TypeString, Nullable: true},
		{Name: "contact_details", Type: field.TypeString},
		{Name: "contact_type", Type: field.TypeString, Nullable: true},
		{Name: "is_primary_contact", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "is_2fa_contact", Type: field.TypeBool, Default: false},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
		{Name: "contact_level", Type: field.TypeInt, Default: 1},
		{Name: "contact_level_name", Type: field.TypeString, Default: "Customer"},
		{Name: "applyToAllGroupMember", Type: field.TypeBool, Default: false},
		{Name: "isGroupContact", Type: field.TypeBool, Default: false},
		{Name: "useAsDefaultCreateContact", Type: field.TypeBool, Default: true},
		{Name: "useGroupContact", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "clinic_id", Type: field.TypeInt, Nullable: true},
		{Name: "group_contact_id", Type: field.TypeInt, Nullable: true},
		{Name: "customer_id", Type: field.TypeInt, Nullable: true},
		{Name: "internal_user_id", Type: field.TypeInt, Nullable: true},
		{Name: "patient_id", Type: field.TypeInt, Nullable: true},
	}
	// ContactTable holds the schema information for the "contact" table.
	ContactTable = &schema.Table{
		Name:       "contact",
		Columns:    ContactColumns,
		PrimaryKey: []*schema.Column{ContactColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "contact_clinic_clinic_contacts",
				Columns:    []*schema.Column{ContactColumns[13]},
				RefColumns: []*schema.Column{ClinicColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "contact_contact_group_contact",
				Columns:    []*schema.Column{ContactColumns[14]},
				RefColumns: []*schema.Column{ContactColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "contact_customer_customer_contacts",
				Columns:    []*schema.Column{ContactColumns[15]},
				RefColumns: []*schema.Column{CustomerColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "contact_internal_user_internal_user_contacts",
				Columns:    []*schema.Column{ContactColumns[16]},
				RefColumns: []*schema.Column{InternalUserColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "contact_patient_patient_contacts",
				Columns:    []*schema.Column{ContactColumns[17]},
				RefColumns: []*schema.Column{PatientColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CountryListColumns holds the columns for the "country_list" table.
	CountryListColumns = []*schema.Column{
		{Name: "vibrant_country_id", Type: field.TypeInt, Increment: true},
		{Name: "country_name", Type: field.TypeString},
		{Name: "alpha_2_code", Type: field.TypeString},
		{Name: "alpha_3_code", Type: field.TypeString},
		{Name: "country_code_enum", Type: field.TypeString},
		{Name: "iso", Type: field.TypeString},
		{Name: "country_region", Type: field.TypeString},
		{Name: "country_subregion", Type: field.TypeString},
		{Name: "country_region_code", Type: field.TypeString},
		{Name: "country_sub_region_code", Type: field.TypeString},
	}
	// CountryListTable holds the schema information for the "country_list" table.
	CountryListTable = &schema.Table{
		Name:       "country_list",
		Columns:    CountryListColumns,
		PrimaryKey: []*schema.Column{CountryListColumns[0]},
	}
	// CustomerColumns holds the columns for the "customer" table.
	CustomerColumns = []*schema.Column{
		{Name: "customer_id", Type: field.TypeInt, Increment: true},
		{Name: "customer_type", Type: field.TypeString, Default: "Normal Customer"},
		{Name: "customer_first_name", Type: field.TypeString, Nullable: true},
		{Name: "customer_last_name", Type: field.TypeString, Nullable: true},
		{Name: "customer_middle_name", Type: field.TypeString, Nullable: true},
		{Name: "customer_type_id", Type: field.TypeString, Nullable: true},
		{Name: "customer_suffix", Type: field.TypeString, Nullable: true},
		{Name: "customer_samples_received", Type: field.TypeString, Nullable: true},
		{Name: "customer_request_submit_time", Type: field.TypeTime, Nullable: true},
		{Name: "customer_signup_time", Type: field.TypeTime, Nullable: true},
		{Name: "isActive", Type: field.TypeBool, Default: true},
		{Name: "customer_npi_number", Type: field.TypeString, Nullable: true},
		{Name: "referral_source", Type: field.TypeString, Nullable: true},
		{Name: "order_placement_allowed", Type: field.TypeBool, Nullable: true, Default: true},
		{Name: "beta_program_enabled", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "onboarding_questionnaire_filled_on", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "sales_id", Type: field.TypeInt, Nullable: true},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
	}
	// CustomerTable holds the schema information for the "customer" table.
	CustomerTable = &schema.Table{
		Name:       "customer",
		Columns:    CustomerColumns,
		PrimaryKey: []*schema.Column{CustomerColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "customer_internal_user_customers",
				Columns:    []*schema.Column{CustomerColumns[16]},
				RefColumns: []*schema.Column{InternalUserColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "customer_user_customer",
				Columns:    []*schema.Column{CustomerColumns[17]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CustomerAddressOnClinicsColumns holds the columns for the "customer_address_on_clinics" table.
	CustomerAddressOnClinicsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "address_type", Type: field.TypeString, Nullable: true},
		{Name: "address_id", Type: field.TypeInt},
		{Name: "clinic_id", Type: field.TypeInt},
		{Name: "customer_id", Type: field.TypeInt},
	}
	// CustomerAddressOnClinicsTable holds the schema information for the "customer_address_on_clinics" table.
	CustomerAddressOnClinicsTable = &schema.Table{
		Name:       "customer_address_on_clinics",
		Columns:    CustomerAddressOnClinicsColumns,
		PrimaryKey: []*schema.Column{CustomerAddressOnClinicsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "customer_address_on_clinics_address_customer_clinic_mappings",
				Columns:    []*schema.Column{CustomerAddressOnClinicsColumns[2]},
				RefColumns: []*schema.Column{AddressColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "customer_address_on_clinics_clinic_clinic_customer_addresses",
				Columns:    []*schema.Column{CustomerAddressOnClinicsColumns[3]},
				RefColumns: []*schema.Column{ClinicColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "customer_address_on_clinics_customer_customer_addresses_on_clinics",
				Columns:    []*schema.Column{CustomerAddressOnClinicsColumns[4]},
				RefColumns: []*schema.Column{CustomerColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "customeraddressonclinics_customer_id_clinic_id_address_id",
				Unique:  true,
				Columns: []*schema.Column{CustomerAddressOnClinicsColumns[4], CustomerAddressOnClinicsColumns[3], CustomerAddressOnClinicsColumns[2]},
			},
		},
	}
	// CustomerContactOnClinicsColumns holds the columns for the "customer_contact_on_clinics" table.
	CustomerContactOnClinicsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "contact_type", Type: field.TypeString, Nullable: true},
		{Name: "clinic_id", Type: field.TypeInt},
		{Name: "contact_id", Type: field.TypeInt},
		{Name: "customer_id", Type: field.TypeInt},
	}
	// CustomerContactOnClinicsTable holds the schema information for the "customer_contact_on_clinics" table.
	CustomerContactOnClinicsTable = &schema.Table{
		Name:       "customer_contact_on_clinics",
		Columns:    CustomerContactOnClinicsColumns,
		PrimaryKey: []*schema.Column{CustomerContactOnClinicsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "customer_contact_on_clinics_clinic_clinic_customer_contacts",
				Columns:    []*schema.Column{CustomerContactOnClinicsColumns[2]},
				RefColumns: []*schema.Column{ClinicColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "customer_contact_on_clinics_contact_customer_clinic_mappings",
				Columns:    []*schema.Column{CustomerContactOnClinicsColumns[3]},
				RefColumns: []*schema.Column{ContactColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "customer_contact_on_clinics_customer_customer_contacts_on_clinics",
				Columns:    []*schema.Column{CustomerContactOnClinicsColumns[4]},
				RefColumns: []*schema.Column{CustomerColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "customercontactonclinics_customer_id_clinic_id_contact_id",
				Unique:  true,
				Columns: []*schema.Column{CustomerContactOnClinicsColumns[4], CustomerContactOnClinicsColumns[2], CustomerContactOnClinicsColumns[3]},
			},
		},
	}
	// CustomerSettingOnClinicsColumns holds the columns for the "customer_setting_on_clinics" table.
	CustomerSettingOnClinicsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "setting_name", Type: field.TypeString},
		{Name: "clinic_id", Type: field.TypeInt},
		{Name: "customer_id", Type: field.TypeInt},
		{Name: "setting_id", Type: field.TypeInt},
	}
	// CustomerSettingOnClinicsTable holds the schema information for the "customer_setting_on_clinics" table.
	CustomerSettingOnClinicsTable = &schema.Table{
		Name:       "customer_setting_on_clinics",
		Columns:    CustomerSettingOnClinicsColumns,
		PrimaryKey: []*schema.Column{CustomerSettingOnClinicsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "customer_setting_on_clinics_clinic_clinic_customer_settings",
				Columns:    []*schema.Column{CustomerSettingOnClinicsColumns[2]},
				RefColumns: []*schema.Column{ClinicColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "customer_setting_on_clinics_customer_customer_settings_on_clinics",
				Columns:    []*schema.Column{CustomerSettingOnClinicsColumns[3]},
				RefColumns: []*schema.Column{CustomerColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "customer_setting_on_clinics_setting_clinic_customers",
				Columns:    []*schema.Column{CustomerSettingOnClinicsColumns[4]},
				RefColumns: []*schema.Column{SettingColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "customersettingonclinics_customer_id_clinic_id_setting_id",
				Unique:  true,
				Columns: []*schema.Column{CustomerSettingOnClinicsColumns[3], CustomerSettingOnClinicsColumns[2], CustomerSettingOnClinicsColumns[4]},
			},
			{
				Name:    "customersettingonclinics_customer_id_clinic_id_setting_name",
				Unique:  true,
				Columns: []*schema.Column{CustomerSettingOnClinicsColumns[3], CustomerSettingOnClinicsColumns[2], CustomerSettingOnClinicsColumns[1]},
			},
			{
				Name:    "customer_setting_on_clinics_customer_id_clinic_id_setting_id_key",
				Unique:  false,
				Columns: []*schema.Column{CustomerSettingOnClinicsColumns[3], CustomerSettingOnClinicsColumns[2], CustomerSettingOnClinicsColumns[4]},
			},
		},
	}
	// InternalUserColumns holds the columns for the "internal_user" table.
	InternalUserColumns = []*schema.Column{
		{Name: "internal_user_id", Type: field.TypeInt, Increment: true},
		{Name: "internal_user_role", Type: field.TypeString},
		{Name: "internal_user_name", Type: field.TypeString, Nullable: true},
		{Name: "internal_user_firstname", Type: field.TypeString, Nullable: true},
		{Name: "internal_user_lastname", Type: field.TypeString, Nullable: true},
		{Name: "internal_user_middle_name", Type: field.TypeString, Nullable: true},
		{Name: "internal_user_is_full_time", Type: field.TypeBool, Default: true},
		{Name: "internal_user_email", Type: field.TypeString, Nullable: true},
		{Name: "internal_user_phone", Type: field.TypeString, Nullable: true},
		{Name: "isActive", Type: field.TypeBool, Default: true},
		{Name: "internal_user_type", Type: field.TypeString, Nullable: true},
		{Name: "internal_user_role_id", Type: field.TypeInt, Nullable: true},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
	}
	// InternalUserTable holds the schema information for the "internal_user" table.
	InternalUserTable = &schema.Table{
		Name:       "internal_user",
		Columns:    InternalUserColumns,
		PrimaryKey: []*schema.Column{InternalUserColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "internal_user_user_internal_user",
				Columns:    []*schema.Column{InternalUserColumns[12]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// LabOrderSendHistoryColumns holds the columns for the "lab_order_send_history" table.
	LabOrderSendHistoryColumns = []*schema.Column{
		{Name: "lab_order_id", Type: field.TypeInt, Increment: true},
		{Name: "tube_type", Type: field.TypeString},
		{Name: "sendout_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "is_redraw_order", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "is_lab_special_order", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "action", Type: field.TypeString, Nullable: true},
		{Name: "is_resend_blocked", Type: field.TypeBool, Nullable: true, Default: true},
		{Name: "sample_id", Type: field.TypeInt},
	}
	// LabOrderSendHistoryTable holds the schema information for the "lab_order_send_history" table.
	LabOrderSendHistoryTable = &schema.Table{
		Name:       "lab_order_send_history",
		Columns:    LabOrderSendHistoryColumns,
		PrimaryKey: []*schema.Column{LabOrderSendHistoryColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "lab_order_send_history_sample_sample",
				Columns:    []*schema.Column{LabOrderSendHistoryColumns[7]},
				RefColumns: []*schema.Column{SampleColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// LoginHistoryColumns holds the columns for the "login_history" table.
	LoginHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString},
		{Name: "login_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "login_ip", Type: field.TypeString},
		{Name: "login_successfully", Type: field.TypeBool},
		{Name: "failure_reason", Type: field.TypeString, Nullable: true},
		{Name: "login_portal", Type: field.TypeString, Nullable: true},
		{Name: "token", Type: field.TypeString, Nullable: true, Size: 2000},
	}
	// LoginHistoryTable holds the schema information for the "login_history" table.
	LoginHistoryTable = &schema.Table{
		Name:       "login_history",
		Columns:    LoginHistoryColumns,
		PrimaryKey: []*schema.Column{LoginHistoryColumns[0]},
	}
	// OrderFlagColumns holds the columns for the "order_flag" table.
	OrderFlagColumns = []*schema.Column{
		{Name: "order_flag_id", Type: field.TypeInt, Increment: true},
		{Name: "order_flag_name", Type: field.TypeString, Unique: true},
		{Name: "order_flag_description", Type: field.TypeString, Nullable: true},
		{Name: "order_flag_display_name", Type: field.TypeString, Nullable: true},
		{Name: "order_flag_is_active", Type: field.TypeBool, Default: true},
		{Name: "order_flag_created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "order_flag_color", Type: field.TypeString, Nullable: true, Default: "#90EE90"},
		{Name: "order_flaged_by", Type: field.TypeString, Nullable: true, Default: "System"},
		{Name: "order_flag_allow_duplicates_under_same_category", Type: field.TypeBool, Default: false},
		{Name: "order_flag_category", Type: field.TypeString, Nullable: true},
		{Name: "order_flag_level", Type: field.TypeInt, Default: 0},
	}
	// OrderFlagTable holds the schema information for the "order_flag" table.
	OrderFlagTable = &schema.Table{
		Name:       "order_flag",
		Columns:    OrderFlagColumns,
		PrimaryKey: []*schema.Column{OrderFlagColumns[0]},
	}
	// OrderInfoColumns holds the columns for the "order_info" table.
	OrderInfoColumns = []*schema.Column{
		{Name: "order_id", Type: field.TypeInt, Increment: true},
		{Name: "order_title", Type: field.TypeString, Default: "Vibrant America Order"},
		{Name: "order_type", Type: field.TypeString, Default: "Initial"},
		{Name: "order_description", Type: field.TypeString, Default: "Normal Order"},
		{Name: "order_confirmation_number", Type: field.TypeString},
		{Name: "order_create_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "order_service_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "order_process_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "order_redraw_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "order_cancel_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "isActive", Type: field.TypeBool, Default: true},
		{Name: "has_order_setting", Type: field.TypeBool, Default: false},
		{Name: "order_canceled", Type: field.TypeBool, Default: false},
		{Name: "order_flagged", Type: field.TypeBool, Default: false},
		{Name: "order_status", Type: field.TypeString, Nullable: true, Default: "order_received"},
		{Name: "order_major_status", Type: field.TypeString, Nullable: true, Default: "scheduled_order"},
		{Name: "order_kit_status", Type: field.TypeString, Nullable: true, Default: "kit_ready_for_shipment"},
		{Name: "order_report_status", Type: field.TypeString, Nullable: true, Default: "report_not_ready"},
		{Name: "order_tnp_issue_status", Type: field.TypeString, Nullable: true, Default: "no_tnp_issue"},
		{Name: "order_billing_issue_status", Type: field.TypeString, Nullable: true, Default: "no_billing_issue"},
		{Name: "order_missing_info_issue_status", Type: field.TypeString, Nullable: true, Default: "no_missing_info_issue"},
		{Name: "order_incomplete_questionnaire_issue_status", Type: field.TypeString, Nullable: true, Default: "no_incomplete_questionnaire_issue"},
		{Name: "order_ny_waive_form_issue_status", Type: field.TypeString, Nullable: true, Default: "no_new_ny_waive_form_issue"},
		{Name: "order_lab_issue_status", Type: field.TypeString, Nullable: true, Default: "no_lab_issue"},
		{Name: "order_processing_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "order_minor_status", Type: field.TypeString, Nullable: true},
		{Name: "patient_first_name", Type: field.TypeString, Nullable: true},
		{Name: "patient_last_name", Type: field.TypeString, Nullable: true},
		{Name: "order_source", Type: field.TypeString, Nullable: true, Default: "BillingSpring"},
		{Name: "order_charge_method", Type: field.TypeString, Nullable: true},
		{Name: "order_placing_type", Type: field.TypeString, Nullable: true, Default: "Standard"},
		{Name: "billing_order_id", Type: field.TypeString, Nullable: true},
		{Name: "address_id", Type: field.TypeInt, Nullable: true},
		{Name: "clinic_id", Type: field.TypeInt, Nullable: true},
		{Name: "contact_id", Type: field.TypeInt, Nullable: true},
		{Name: "customer_id", Type: field.TypeInt, Nullable: true},
	}
	// OrderInfoTable holds the schema information for the "order_info" table.
	OrderInfoTable = &schema.Table{
		Name:       "order_info",
		Columns:    OrderInfoColumns,
		PrimaryKey: []*schema.Column{OrderInfoColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "order_info_address_orders",
				Columns:    []*schema.Column{OrderInfoColumns[32]},
				RefColumns: []*schema.Column{AddressColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "order_info_clinic_clinic_orders",
				Columns:    []*schema.Column{OrderInfoColumns[33]},
				RefColumns: []*schema.Column{ClinicColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "order_info_contact_orders",
				Columns:    []*schema.Column{OrderInfoColumns[34]},
				RefColumns: []*schema.Column{ContactColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "order_info_customer_orders",
				Columns:    []*schema.Column{OrderInfoColumns[35]},
				RefColumns: []*schema.Column{CustomerColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PatientColumns holds the columns for the "patient" table.
	PatientColumns = []*schema.Column{
		{Name: "patient_id", Type: field.TypeInt, Increment: true},
		{Name: "patient_type", Type: field.TypeString, Default: "Standalone Patient"},
		{Name: "original_patient_id", Type: field.TypeInt, Nullable: true},
		{Name: "patient_gender", Type: field.TypeString, Nullable: true},
		{Name: "patient_first_name", Type: field.TypeString, Nullable: true},
		{Name: "patient_last_name", Type: field.TypeString, Nullable: true},
		{Name: "patient_middle_name", Type: field.TypeString, Nullable: true},
		{Name: "patient_medical_record_number", Type: field.TypeString, Nullable: true},
		{Name: "patient_legal_firstname", Type: field.TypeString, Nullable: true},
		{Name: "patient_legal_lastname", Type: field.TypeString, Nullable: true},
		{Name: "patient_honorific", Type: field.TypeString, Nullable: true},
		{Name: "patient_suffix", Type: field.TypeString, Nullable: true},
		{Name: "patient_marital", Type: field.TypeString, Nullable: true},
		{Name: "patient_ethnicity", Type: field.TypeString, Nullable: true},
		{Name: "patient_birthdate", Type: field.TypeString, Nullable: true},
		{Name: "patient_ssn", Type: field.TypeString, Nullable: true},
		{Name: "patient_height", Type: field.TypeString, Nullable: true},
		{Name: "patient_weight", Type: field.TypeString, Nullable: true},
		{Name: "officeally_id", Type: field.TypeInt, Nullable: true},
		{Name: "patient_ny_waive_form_issue_status", Type: field.TypeString, Default: "no_ny_waive_form_issue"},
		{Name: "patient_create_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "isActive", Type: field.TypeBool, Default: true},
		{Name: "patient_flagged", Type: field.TypeBool, Default: false},
		{Name: "patient_service_date", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "patient_description", Type: field.TypeString, Nullable: true},
		{Name: "patient_language", Type: field.TypeString, Nullable: true, Default: "English"},
		{Name: "customer_id", Type: field.TypeInt, Nullable: true},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
	}
	// PatientTable holds the schema information for the "patient" table.
	PatientTable = &schema.Table{
		Name:       "patient",
		Columns:    PatientColumns,
		PrimaryKey: []*schema.Column{PatientColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "patient_customer_current_patients",
				Columns:    []*schema.Column{PatientColumns[26]},
				RefColumns: []*schema.Column{CustomerColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "patient_user_patient",
				Columns:    []*schema.Column{PatientColumns[27]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PatientFlagColumns holds the columns for the "patient_flag" table.
	PatientFlagColumns = []*schema.Column{
		{Name: "patient_flag_id", Type: field.TypeInt, Increment: true},
		{Name: "patient_flag_name", Type: field.TypeString, Unique: true},
		{Name: "patient_flag_display_name", Type: field.TypeString, Nullable: true},
		{Name: "patient_flag_description", Type: field.TypeString, Nullable: true},
		{Name: "patient_flag_is_active", Type: field.TypeBool, Default: true},
		{Name: "patient_flag_created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "patient_flag_color", Type: field.TypeString, Nullable: true, Default: "#90EE90"},
		{Name: "patient_flaged_by", Type: field.TypeString, Default: "System"},
	}
	// PatientFlagTable holds the schema information for the "patient_flag" table.
	PatientFlagTable = &schema.Table{
		Name:       "patient_flag",
		Columns:    PatientFlagColumns,
		PrimaryKey: []*schema.Column{PatientFlagColumns[0]},
	}
	// PatientWeightHeightColumns holds the columns for the "patient_weight_height" table.
	PatientWeightHeightColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "weight", Type: field.TypeString},
		{Name: "height", Type: field.TypeString},
		{Name: "weight_unit", Type: field.TypeString},
		{Name: "height_unit", Type: field.TypeString},
		{Name: "created_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "patient_id", Type: field.TypeInt},
	}
	// PatientWeightHeightTable holds the schema information for the "patient_weight_height" table.
	PatientWeightHeightTable = &schema.Table{
		Name:       "patient_weight_height",
		Columns:    PatientWeightHeightColumns,
		PrimaryKey: []*schema.Column{PatientWeightHeightColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "patient_weight_height_patient_patient_weight_height_history",
				Columns:    []*schema.Column{PatientWeightHeightColumns[7]},
				RefColumns: []*schema.Column{PatientColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PendingOrderCreditsColumns holds the columns for the "pending_order_credits" table.
	PendingOrderCreditsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "order_id", Type: field.TypeInt64},
		{Name: "credit_id", Type: field.TypeInt64},
		{Name: "clinic_id", Type: field.TypeInt64},
	}
	// PendingOrderCreditsTable holds the schema information for the "pending_order_credits" table.
	PendingOrderCreditsTable = &schema.Table{
		Name:       "pending_order_credits",
		Columns:    PendingOrderCreditsColumns,
		PrimaryKey: []*schema.Column{PendingOrderCreditsColumns[0]},
	}
	// RbacActionsColumns holds the columns for the "rbac_actions" table.
	RbacActionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// RbacActionsTable holds the schema information for the "rbac_actions" table.
	RbacActionsTable = &schema.Table{
		Name:       "rbac_actions",
		Columns:    RbacActionsColumns,
		PrimaryKey: []*schema.Column{RbacActionsColumns[0]},
	}
	// RbacResourcesColumns holds the columns for the "rbac_resources" table.
	RbacResourcesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Default: "N/A"},
	}
	// RbacResourcesTable holds the schema information for the "rbac_resources" table.
	RbacResourcesTable = &schema.Table{
		Name:       "rbac_resources",
		Columns:    RbacResourcesColumns,
		PrimaryKey: []*schema.Column{RbacResourcesColumns[0]},
	}
	// RbacRolesColumns holds the columns for the "rbac_roles" table.
	RbacRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "internal_name", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"internal", "external", "clinic"}},
		{Name: "clinic_id", Type: field.TypeInt32},
	}
	// RbacRolesTable holds the schema information for the "rbac_roles" table.
	RbacRolesTable = &schema.Table{
		Name:       "rbac_roles",
		Columns:    RbacRolesColumns,
		PrimaryKey: []*schema.Column{RbacRolesColumns[0]},
	}
	// SalesTeamColumns holds the columns for the "sales_team" table.
	SalesTeamColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "supervisor_id", Type: field.TypeInt, Nullable: true},
		{Name: "internal_user_id", Type: field.TypeInt},
		{Name: "title_id", Type: field.TypeInt, Nullable: true},
	}
	// SalesTeamTable holds the schema information for the "sales_team" table.
	SalesTeamTable = &schema.Table{
		Name:       "sales_team",
		Columns:    SalesTeamColumns,
		PrimaryKey: []*schema.Column{SalesTeamColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sales_team_sales_team_supervisor",
				Columns:    []*schema.Column{SalesTeamColumns[3]},
				RefColumns: []*schema.Column{SalesTeamColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "sales_team_internal_user_internal_user",
				Columns:    []*schema.Column{SalesTeamColumns[4]},
				RefColumns: []*schema.Column{InternalUserColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "sales_team_sales_title_title",
				Columns:    []*schema.Column{SalesTeamColumns[5]},
				RefColumns: []*schema.Column{SalesTitleColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SalesTerritoryColumns holds the columns for the "sales_territory" table.
	SalesTerritoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "sales", Type: field.TypeString},
		{Name: "state", Type: field.TypeString, Nullable: true},
		{Name: "zipcode", Type: field.TypeInt, Nullable: true},
		{Name: "country", Type: field.TypeString, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
	}
	// SalesTerritoryTable holds the schema information for the "sales_territory" table.
	SalesTerritoryTable = &schema.Table{
		Name:       "sales_territory",
		Columns:    SalesTerritoryColumns,
		PrimaryKey: []*schema.Column{SalesTerritoryColumns[0]},
	}
	// SalesTitleColumns holds the columns for the "sales_title" table.
	SalesTitleColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title_name", Type: field.TypeString, Unique: true},
		{Name: "order", Type: field.TypeInt, Unique: true},
		{Name: "created_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
	}
	// SalesTitleTable holds the schema information for the "sales_title" table.
	SalesTitleTable = &schema.Table{
		Name:       "sales_title",
		Columns:    SalesTitleColumns,
		PrimaryKey: []*schema.Column{SalesTitleColumns[0]},
	}
	// SampleColumns holds the columns for the "sample" table.
	SampleColumns = []*schema.Column{
		{Name: "sample_id", Type: field.TypeInt, Increment: true},
		{Name: "accession_id", Type: field.TypeString},
		{Name: "sample_storage", Type: field.TypeString, Nullable: true, Default: "N/A"},
		{Name: "tube_count", Type: field.TypeInt, Nullable: true, Default: 0},
		{Name: "sample_order_method", Type: field.TypeString, Nullable: true},
		{Name: "sample_collection_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "sample_received_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "sample_description", Type: field.TypeString, Nullable: true, Default: "N/A"},
		{Name: "delayed_hours", Type: field.TypeInt},
		{Name: "sample_report_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "internal_received_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "sample_report_type", Type: field.TypeString, Nullable: true},
		{Name: "fasting_hours", Type: field.TypeFloat64, Nullable: true},
		{Name: "fasting_status", Type: field.TypeString, Nullable: true},
		{Name: "customer_id", Type: field.TypeInt, Nullable: true},
		{Name: "order_id", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "patient_id", Type: field.TypeInt, Nullable: true},
	}
	// SampleTable holds the schema information for the "sample" table.
	SampleTable = &schema.Table{
		Name:       "sample",
		Columns:    SampleColumns,
		PrimaryKey: []*schema.Column{SampleColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sample_customer_samples",
				Columns:    []*schema.Column{SampleColumns[14]},
				RefColumns: []*schema.Column{CustomerColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "sample_order_info_sample",
				Columns:    []*schema.Column{SampleColumns[15]},
				RefColumns: []*schema.Column{OrderInfoColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "sample_patient_samples",
				Columns:    []*schema.Column{SampleColumns[16]},
				RefColumns: []*schema.Column{PatientColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SampleIDGenerateColumns holds the columns for the "sample_id_generate" table.
	SampleIDGenerateColumns = []*schema.Column{
		{Name: "sample_id", Type: field.TypeInt, Increment: true},
		{Name: "barcode", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// SampleIDGenerateTable holds the schema information for the "sample_id_generate" table.
	SampleIDGenerateTable = &schema.Table{
		Name:       "sample_id_generate",
		Columns:    SampleIDGenerateColumns,
		PrimaryKey: []*schema.Column{SampleIDGenerateColumns[0]},
	}
	// SampleTypeColumns holds the columns for the "sample_type" table.
	SampleTypeColumns = []*schema.Column{
		{Name: "sample_type_id", Type: field.TypeInt, Increment: true},
		{Name: "sample_type_name", Type: field.TypeString},
		{Name: "sample_type_code", Type: field.TypeString},
		{Name: "sample_type_emun", Type: field.TypeString, Nullable: true},
		{Name: "sample_type_emun_old_lis_request", Type: field.TypeString, Nullable: true},
		{Name: "sample_type_description", Type: field.TypeString},
		{Name: "primary_sample_type_group", Type: field.TypeString},
		{Name: "isActive", Type: field.TypeBool, Default: true},
		{Name: "created_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
	}
	// SampleTypeTable holds the schema information for the "sample_type" table.
	SampleTypeTable = &schema.Table{
		Name:       "sample_type",
		Columns:    SampleTypeColumns,
		PrimaryKey: []*schema.Column{SampleTypeColumns[0]},
	}
	// ServiceshipColumns holds the columns for the "serviceship" table.
	ServiceshipColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tag", Type: field.TypeString},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"membership"}},
	}
	// ServiceshipTable holds the schema information for the "serviceship" table.
	ServiceshipTable = &schema.Table{
		Name:       "serviceship",
		Columns:    ServiceshipColumns,
		PrimaryKey: []*schema.Column{ServiceshipColumns[0]},
	}
	// ServiceshipBillingPlanColumns holds the columns for the "serviceship_billing_plan" table.
	ServiceshipBillingPlanColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "fee", Type: field.TypeFloat32, SchemaType: map[string]string{"mysql": "decimal(7,2)"}},
		{Name: "billing_cycle", Type: field.TypeInt32},
		{Name: "interval", Type: field.TypeEnum, Enums: []string{"monthly", "daily"}, Default: "monthly"},
		{Name: "effective_time", Type: field.TypeTime},
		{Name: "serviceship_serviceship_billing_plan", Type: field.TypeInt},
	}
	// ServiceshipBillingPlanTable holds the schema information for the "serviceship_billing_plan" table.
	ServiceshipBillingPlanTable = &schema.Table{
		Name:       "serviceship_billing_plan",
		Columns:    ServiceshipBillingPlanColumns,
		PrimaryKey: []*schema.Column{ServiceshipBillingPlanColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "serviceship_billing_plan_serviceship_serviceship_billing_plan",
				Columns:    []*schema.Column{ServiceshipBillingPlanColumns[5]},
				RefColumns: []*schema.Column{ServiceshipColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SettingColumns holds the columns for the "setting" table.
	SettingColumns = []*schema.Column{
		{Name: "setting_id", Type: field.TypeInt, Increment: true},
		{Name: "setting_name", Type: field.TypeString},
		{Name: "setting_group", Type: field.TypeString, Default: "default_customer_setting_group"},
		{Name: "setting_description", Type: field.TypeString},
		{Name: "setting_value", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "MEDIUMTEXT"}},
		{Name: "setting_type", Type: field.TypeString},
		{Name: "setting_value_updated_time", Type: field.TypeTime},
		{Name: "isActive", Type: field.TypeBool, Default: true},
		{Name: "apply_to_all_group_member", Type: field.TypeBool, Default: false},
		{Name: "is_official", Type: field.TypeBool, Default: false},
		{Name: "setting_level", Type: field.TypeInt, Default: 1},
		{Name: "setting_level_name", Type: field.TypeString, Default: "Customer"},
		{Name: "use_group_setting", Type: field.TypeBool, Default: false},
	}
	// SettingTable holds the schema information for the "setting" table.
	SettingTable = &schema.Table{
		Name:       "setting",
		Columns:    SettingColumns,
		PrimaryKey: []*schema.Column{SettingColumns[0]},
	}
	// TestColumns holds the columns for the "test" table.
	TestColumns = []*schema.Column{
		{Name: "test_id", Type: field.TypeInt, Increment: true},
		{Name: "test_name", Type: field.TypeString},
		{Name: "test_code", Type: field.TypeString},
		{Name: "display_name", Type: field.TypeString},
		{Name: "test_description", Type: field.TypeString},
		{Name: "assay_name", Type: field.TypeString},
		{Name: "isActive", Type: field.TypeBool},
		{Name: "created_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
	}
	// TestTable holds the schema information for the "test" table.
	TestTable = &schema.Table{
		Name:       "test",
		Columns:    TestColumns,
		PrimaryKey: []*schema.Column{TestColumns[0]},
	}
	// TestDetailColumns holds the columns for the "test_detail" table.
	TestDetailColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "test_detail_name", Type: field.TypeString},
		{Name: "test_details_value", Type: field.TypeString},
		{Name: "isActive", Type: field.TypeBool, Default: true},
		{Name: "test_id", Type: field.TypeInt},
	}
	// TestDetailTable holds the schema information for the "test_detail" table.
	TestDetailTable = &schema.Table{
		Name:       "test_detail",
		Columns:    TestDetailColumns,
		PrimaryKey: []*schema.Column{TestDetailColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "test_detail_test_test",
				Columns:    []*schema.Column{TestDetailColumns[4]},
				RefColumns: []*schema.Column{TestColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TestListColumns holds the columns for the "test_list" table.
	TestListColumns = []*schema.Column{
		{Name: "test_id", Type: field.TypeInt, Increment: true},
		{Name: "test_instrument", Type: field.TypeEnum, Nullable: true, Enums: []string{"WELLNESS", "Calculation", "Diazyme", "LC", "N/A", "Phadia_250", "Roche", "Sed rate", "Sysmex", "TSP", "VG", "Xevo TQS", "Beckman", "Siemens", "Xevo TQ-XS", "Perkin ICP-MS", "Xevo TQD", "Urinalysis Clintek Novus", "Urinalysis UF"}, Default: "N/A", Collation: "utf8_general_ci"},
		{Name: "tube_type", Type: field.TypeEnum, Enums: []string{"SST", "Urine", "N/A", "PLASMA", "TES", "ESR", "EDTA", "STOOL", "Swab", "NP Swab", "Parasites", "EDTA or Swab", "METAL_FREE_URINE", "SODIUM_CITRATE_PLASMA", "URINE_M", "URINE_A", "URINE_E", "URINE_N", "SALIVA_M", "SALIVA_A", "SALIVA_E", "SALIVA_N", "UNPRESERVED_STOOL", "SALIVA", "COVID19_NPSWAB", "COVID19_FINGERPRICK", "COVID19_EDTA", "BLOOD_FINGERPRICK", "DNA fingerprick", "COVID19_SST", "PLASMA_EDTA", "PLASMA_EDTA_PLATELET_FREE", "FROZEN_SERUM", "PLASMA_CITRATE_PLATELET_POOR", "PLASMA_EDTA_TRASYLOL", "BLOOD_MICROTUBE", "DNA_FINGERPRICK", "URINE_UTI", "URINE_ANALYSIS"}, Collation: "utf8_general_ci"},
		{Name: "DI_group_name", Type: field.TypeString, Nullable: true, Size: 45, Collation: "latin1_swedish_ci"},
		{Name: "volume_required", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(7,3)"}},
		{Name: "blood_type", Type: field.TypeBool},
	}
	// TestListTable holds the schema information for the "test_list" table.
	TestListTable = &schema.Table{
		Name:       "test_list",
		Columns:    TestListColumns,
		PrimaryKey: []*schema.Column{TestListColumns[0]},
	}
	// TubeColumns holds the columns for the "tube" table.
	TubeColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tube_id", Type: field.TypeString, Unique: true},
		{Name: "tube_storage", Type: field.TypeString, Default: "N/A"},
		{Name: "tube_receive_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "tube_turnaround_time", Type: field.TypeInt},
		{Name: "tube_stability", Type: field.TypeInt, Default: 0},
		{Name: "isActive", Type: field.TypeBool, Default: true},
		{Name: "issues", Type: field.TypeString, Default: "N/A"},
		{Name: "tube_collection_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "sample_id", Type: field.TypeInt},
	}
	// TubeTable holds the schema information for the "tube" table.
	TubeTable = &schema.Table{
		Name:       "tube",
		Columns:    TubeColumns,
		PrimaryKey: []*schema.Column{TubeColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tube_sample_sample",
				Columns:    []*schema.Column{TubeColumns[9]},
				RefColumns: []*schema.Column{SampleColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TubeInstructionsColumns holds the columns for the "tube_instructions" table.
	TubeInstructionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tube_name_enum", Type: field.TypeString},
		{Name: "sort_order", Type: field.TypeInt},
		{Name: "tube_instructions", Type: field.TypeString, Size: 1024},
		{Name: "tube_name", Type: field.TypeString},
		{Name: "shipping_box", Type: field.TypeString},
		{Name: "transfer_tubes_to_send", Type: field.TypeString},
		{Name: "blood_type", Type: field.TypeBool, Default: false},
	}
	// TubeInstructionsTable holds the schema information for the "tube_instructions" table.
	TubeInstructionsTable = &schema.Table{
		Name:       "tube_instructions",
		Columns:    TubeInstructionsColumns,
		PrimaryKey: []*schema.Column{TubeInstructionsColumns[0]},
	}
	// TubeReceiveColumns holds the columns for the "tube_receive" table.
	TubeReceiveColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tube_type", Type: field.TypeString},
		{Name: "received_count", Type: field.TypeInt},
		{Name: "received_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "received_by", Type: field.TypeString},
		{Name: "modified_by", Type: field.TypeString, Nullable: true},
		{Name: "modified_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "collection_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "is_redraw", Type: field.TypeBool, Default: false},
		{Name: "is_rerun", Type: field.TypeBool, Default: false},
		{Name: "sample_id", Type: field.TypeInt},
	}
	// TubeReceiveTable holds the schema information for the "tube_receive" table.
	TubeReceiveTable = &schema.Table{
		Name:       "tube_receive",
		Columns:    TubeReceiveColumns,
		PrimaryKey: []*schema.Column{TubeReceiveColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tube_receive_sample_sample",
				Columns:    []*schema.Column{TubeReceiveColumns[10]},
				RefColumns: []*schema.Column{SampleColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TubeRequirementColumns holds the columns for the "tube_requirement" table.
	TubeRequirementColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tube_type", Type: field.TypeString},
		{Name: "required_count", Type: field.TypeInt},
		{Name: "required_count_create_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "required_by", Type: field.TypeString},
		{Name: "modified_by", Type: field.TypeString, Nullable: true},
		{Name: "modified_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "sample_id", Type: field.TypeInt, Nullable: true},
	}
	// TubeRequirementTable holds the schema information for the "tube_requirement" table.
	TubeRequirementTable = &schema.Table{
		Name:       "tube_requirement",
		Columns:    TubeRequirementColumns,
		PrimaryKey: []*schema.Column{TubeRequirementColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tube_requirement_sample_sample",
				Columns:    []*schema.Column{TubeRequirementColumns[7]},
				RefColumns: []*schema.Column{SampleColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TubeTypeColumns holds the columns for the "tube_type" table.
	TubeTypeColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tube_name", Type: field.TypeString},
		{Name: "tube_type_enum", Type: field.TypeString},
		{Name: "tube_type_symbol", Type: field.TypeString},
	}
	// TubeTypeTable holds the schema information for the "tube_type" table.
	TubeTypeTable = &schema.Table{
		Name:       "tube_type",
		Columns:    TubeTypeColumns,
		PrimaryKey: []*schema.Column{TubeTypeColumns[0]},
	}
	// UserColumns holds the columns for the "user" table.
	UserColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "email_user_id", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "password", Type: field.TypeString},
		{Name: "twoFactorAuthenticationSecret", Type: field.TypeString, Nullable: true},
		{Name: "isTwoFactorAuthenticationEnabled", Type: field.TypeBool, Default: false},
		{Name: "user_group", Type: field.TypeString, Nullable: true},
		{Name: "imported_user_with_salt_password", Type: field.TypeBool, Default: false},
		{Name: "isActive", Type: field.TypeBool, Default: true},
	}
	// UserTable holds the schema information for the "user" table.
	UserTable = &schema.Table{
		Name:       "user",
		Columns:    UserColumns,
		PrimaryKey: []*schema.Column{UserColumns[0]},
	}
	// UserInvitationRecordsColumns holds the columns for the "user_invitation_records" table.
	UserInvitationRecordsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "customer_id", Type: field.TypeInt},
		{Name: "invitation_link", Type: field.TypeString, Size: 3000},
	}
	// UserInvitationRecordsTable holds the schema information for the "user_invitation_records" table.
	UserInvitationRecordsTable = &schema.Table{
		Name:       "user_invitation_records",
		Columns:    UserInvitationRecordsColumns,
		PrimaryKey: []*schema.Column{UserInvitationRecordsColumns[0]},
	}
	// ZipcodeColumns holds the columns for the "zipcode" table.
	ZipcodeColumns = []*schema.Column{
		{Name: "zipcode", Type: field.TypeInt, Increment: true},
		{Name: "ZipCodeType", Type: field.TypeString},
		{Name: "City", Type: field.TypeString},
		{Name: "State", Type: field.TypeString},
		{Name: "LocationType", Type: field.TypeString},
		{Name: "Lat", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"mysql": "decimal(8,2)"}},
		{Name: "Long", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"mysql": "decimal(8,2)"}},
	}
	// ZipcodeTable holds the schema information for the "zipcode" table.
	ZipcodeTable = &schema.Table{
		Name:       "zipcode",
		Columns:    ZipcodeColumns,
		PrimaryKey: []*schema.Column{ZipcodeColumns[0]},
	}
	// ClinicCustomersColumns holds the columns for the "clinic_customers" table.
	ClinicCustomersColumns = []*schema.Column{
		{Name: "clinic_id", Type: field.TypeInt},
		{Name: "customer_id", Type: field.TypeInt},
	}
	// ClinicCustomersTable holds the schema information for the "clinic_customers" table.
	ClinicCustomersTable = &schema.Table{
		Name:       "clinic_customers",
		Columns:    ClinicCustomersColumns,
		PrimaryKey: []*schema.Column{ClinicCustomersColumns[0], ClinicCustomersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "clinic_customers_clinic_id",
				Columns:    []*schema.Column{ClinicCustomersColumns[0]},
				RefColumns: []*schema.Column{ClinicColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "clinic_customers_customer_id",
				Columns:    []*schema.Column{ClinicCustomersColumns[1]},
				RefColumns: []*schema.Column{CustomerColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ClinicClinicSettingsColumns holds the columns for the "clinic_clinic_settings" table.
	ClinicClinicSettingsColumns = []*schema.Column{
		{Name: "clinic_id", Type: field.TypeInt},
		{Name: "setting_id", Type: field.TypeInt},
	}
	// ClinicClinicSettingsTable holds the schema information for the "clinic_clinic_settings" table.
	ClinicClinicSettingsTable = &schema.Table{
		Name:       "clinic_clinic_settings",
		Columns:    ClinicClinicSettingsColumns,
		PrimaryKey: []*schema.Column{ClinicClinicSettingsColumns[0], ClinicClinicSettingsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "clinic_clinic_settings_clinic_id",
				Columns:    []*schema.Column{ClinicClinicSettingsColumns[0]},
				RefColumns: []*schema.Column{ClinicColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "clinic_clinic_settings_setting_id",
				Columns:    []*schema.Column{ClinicClinicSettingsColumns[1]},
				RefColumns: []*schema.Column{SettingColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ClinicClinicPatientsColumns holds the columns for the "clinic_clinic_patients" table.
	ClinicClinicPatientsColumns = []*schema.Column{
		{Name: "clinic_id", Type: field.TypeInt},
		{Name: "patient_id", Type: field.TypeInt},
	}
	// ClinicClinicPatientsTable holds the schema information for the "clinic_clinic_patients" table.
	ClinicClinicPatientsTable = &schema.Table{
		Name:       "clinic_clinic_patients",
		Columns:    ClinicClinicPatientsColumns,
		PrimaryKey: []*schema.Column{ClinicClinicPatientsColumns[0], ClinicClinicPatientsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "clinic_clinic_patients_clinic_id",
				Columns:    []*schema.Column{ClinicClinicPatientsColumns[0]},
				RefColumns: []*schema.Column{ClinicColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "clinic_clinic_patients_patient_id",
				Columns:    []*schema.Column{ClinicClinicPatientsColumns[1]},
				RefColumns: []*schema.Column{PatientColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// CustomerPatientsColumns holds the columns for the "customer_patients" table.
	CustomerPatientsColumns = []*schema.Column{
		{Name: "customer_id", Type: field.TypeInt},
		{Name: "patient_id", Type: field.TypeInt},
	}
	// CustomerPatientsTable holds the schema information for the "customer_patients" table.
	CustomerPatientsTable = &schema.Table{
		Name:       "customer_patients",
		Columns:    CustomerPatientsColumns,
		PrimaryKey: []*schema.Column{CustomerPatientsColumns[0], CustomerPatientsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "customer_patients_customer_id",
				Columns:    []*schema.Column{CustomerPatientsColumns[0]},
				RefColumns: []*schema.Column{CustomerColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "customer_patients_patient_id",
				Columns:    []*schema.Column{CustomerPatientsColumns[1]},
				RefColumns: []*schema.Column{PatientColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// InternalUserInternalUserSettingsColumns holds the columns for the "internal_user_internal_user_settings" table.
	InternalUserInternalUserSettingsColumns = []*schema.Column{
		{Name: "internal_user_id", Type: field.TypeInt},
		{Name: "setting_id", Type: field.TypeInt},
	}
	// InternalUserInternalUserSettingsTable holds the schema information for the "internal_user_internal_user_settings" table.
	InternalUserInternalUserSettingsTable = &schema.Table{
		Name:       "internal_user_internal_user_settings",
		Columns:    InternalUserInternalUserSettingsColumns,
		PrimaryKey: []*schema.Column{InternalUserInternalUserSettingsColumns[0], InternalUserInternalUserSettingsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "internal_user_internal_user_settings_internal_user_id",
				Columns:    []*schema.Column{InternalUserInternalUserSettingsColumns[0]},
				RefColumns: []*schema.Column{InternalUserColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "internal_user_internal_user_settings_setting_id",
				Columns:    []*schema.Column{InternalUserInternalUserSettingsColumns[1]},
				RefColumns: []*schema.Column{SettingColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OrderFlagToOrderColumns holds the columns for the "_order_flag_to_order" table.
	OrderFlagToOrderColumns = []*schema.Column{
		{Name: "order_flag_id", Type: field.TypeInt},
		{Name: "order_id", Type: field.TypeInt},
	}
	// OrderFlagToOrderTable holds the schema information for the "_order_flag_to_order" table.
	OrderFlagToOrderTable = &schema.Table{
		Name:       "_order_flag_to_order",
		Columns:    OrderFlagToOrderColumns,
		PrimaryKey: []*schema.Column{OrderFlagToOrderColumns[0], OrderFlagToOrderColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "_order_flag_to_order_order_flag_id",
				Columns:    []*schema.Column{OrderFlagToOrderColumns[0]},
				RefColumns: []*schema.Column{OrderFlagColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "_order_flag_to_order_order_id",
				Columns:    []*schema.Column{OrderFlagToOrderColumns[1]},
				RefColumns: []*schema.Column{OrderInfoColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OrderInfoToTestColumns holds the columns for the "_order_info_to_test" table.
	OrderInfoToTestColumns = []*schema.Column{
		{Name: "order_id", Type: field.TypeInt},
		{Name: "test_id", Type: field.TypeInt},
	}
	// OrderInfoToTestTable holds the schema information for the "_order_info_to_test" table.
	OrderInfoToTestTable = &schema.Table{
		Name:       "_order_info_to_test",
		Columns:    OrderInfoToTestColumns,
		PrimaryKey: []*schema.Column{OrderInfoToTestColumns[0], OrderInfoToTestColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "_order_info_to_test_order_id",
				Columns:    []*schema.Column{OrderInfoToTestColumns[0]},
				RefColumns: []*schema.Column{OrderInfoColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "_order_info_to_test_test_id",
				Columns:    []*schema.Column{OrderInfoToTestColumns[1]},
				RefColumns: []*schema.Column{TestColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PatientPatientSettingsColumns holds the columns for the "patient_patient_settings" table.
	PatientPatientSettingsColumns = []*schema.Column{
		{Name: "patient_id", Type: field.TypeInt},
		{Name: "setting_id", Type: field.TypeInt},
	}
	// PatientPatientSettingsTable holds the schema information for the "patient_patient_settings" table.
	PatientPatientSettingsTable = &schema.Table{
		Name:       "patient_patient_settings",
		Columns:    PatientPatientSettingsColumns,
		PrimaryKey: []*schema.Column{PatientPatientSettingsColumns[0], PatientPatientSettingsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "patient_patient_settings_patient_id",
				Columns:    []*schema.Column{PatientPatientSettingsColumns[0]},
				RefColumns: []*schema.Column{PatientColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "patient_patient_settings_setting_id",
				Columns:    []*schema.Column{PatientPatientSettingsColumns[1]},
				RefColumns: []*schema.Column{SettingColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// SampleTypeToTubeTypeColumns holds the columns for the "_sample_type_to_tube_type" table.
	SampleTypeToTubeTypeColumns = []*schema.Column{
		{Name: "sample_type_id", Type: field.TypeInt},
		{Name: "tube_type_id", Type: field.TypeInt},
	}
	// SampleTypeToTubeTypeTable holds the schema information for the "_sample_type_to_tube_type" table.
	SampleTypeToTubeTypeTable = &schema.Table{
		Name:       "_sample_type_to_tube_type",
		Columns:    SampleTypeToTubeTypeColumns,
		PrimaryKey: []*schema.Column{SampleTypeToTubeTypeColumns[0], SampleTypeToTubeTypeColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "_sample_type_to_tube_type_sample_type_id",
				Columns:    []*schema.Column{SampleTypeToTubeTypeColumns[0]},
				RefColumns: []*schema.Column{SampleTypeColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "_sample_type_to_tube_type_tube_type_id",
				Columns:    []*schema.Column{SampleTypeToTubeTypeColumns[1]},
				RefColumns: []*schema.Column{TubeTypeColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// SampleTypeToTestColumns holds the columns for the "_sample_type_to_test" table.
	SampleTypeToTestColumns = []*schema.Column{
		{Name: "sample_type_id", Type: field.TypeInt},
		{Name: "test_id", Type: field.TypeInt},
	}
	// SampleTypeToTestTable holds the schema information for the "_sample_type_to_test" table.
	SampleTypeToTestTable = &schema.Table{
		Name:       "_sample_type_to_test",
		Columns:    SampleTypeToTestColumns,
		PrimaryKey: []*schema.Column{SampleTypeToTestColumns[0], SampleTypeToTestColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "_sample_type_to_test_sample_type_id",
				Columns:    []*schema.Column{SampleTypeToTestColumns[0]},
				RefColumns: []*schema.Column{SampleTypeColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "_sample_type_to_test_test_id",
				Columns:    []*schema.Column{SampleTypeToTestColumns[1]},
				RefColumns: []*schema.Column{TestColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TubeTubeTypeColumns holds the columns for the "tube_tube_type" table.
	TubeTubeTypeColumns = []*schema.Column{
		{Name: "tube_id", Type: field.TypeInt},
		{Name: "tube_type_id", Type: field.TypeInt},
	}
	// TubeTubeTypeTable holds the schema information for the "tube_tube_type" table.
	TubeTubeTypeTable = &schema.Table{
		Name:       "tube_tube_type",
		Columns:    TubeTubeTypeColumns,
		PrimaryKey: []*schema.Column{TubeTubeTypeColumns[0], TubeTubeTypeColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tube_tube_type_tube_id",
				Columns:    []*schema.Column{TubeTubeTypeColumns[0]},
				RefColumns: []*schema.Column{TubeColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "tube_tube_type_tube_type_id",
				Columns:    []*schema.Column{TubeTubeTypeColumns[1]},
				RefColumns: []*schema.Column{TubeTypeColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TubeTypeToTestColumns holds the columns for the "_tube_type_to_test" table.
	TubeTypeToTestColumns = []*schema.Column{
		{Name: "tube_type_id", Type: field.TypeInt},
		{Name: "test_id", Type: field.TypeInt},
	}
	// TubeTypeToTestTable holds the schema information for the "_tube_type_to_test" table.
	TubeTypeToTestTable = &schema.Table{
		Name:       "_tube_type_to_test",
		Columns:    TubeTypeToTestColumns,
		PrimaryKey: []*schema.Column{TubeTypeToTestColumns[0], TubeTypeToTestColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "_tube_type_to_test_tube_type_id",
				Columns:    []*schema.Column{TubeTypeToTestColumns[0]},
				RefColumns: []*schema.Column{TubeTypeColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "_tube_type_to_test_test_id",
				Columns:    []*schema.Column{TubeTypeToTestColumns[1]},
				RefColumns: []*schema.Column{TestColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountSubscriptionTable,
		AddressTable,
		BetaProgramsTable,
		BetaProgramParticipationsTable,
		ClinicTable,
		ContactTable,
		CountryListTable,
		CustomerTable,
		CustomerAddressOnClinicsTable,
		CustomerContactOnClinicsTable,
		CustomerSettingOnClinicsTable,
		InternalUserTable,
		LabOrderSendHistoryTable,
		LoginHistoryTable,
		OrderFlagTable,
		OrderInfoTable,
		PatientTable,
		PatientFlagTable,
		PatientWeightHeightTable,
		PendingOrderCreditsTable,
		RbacActionsTable,
		RbacResourcesTable,
		RbacRolesTable,
		SalesTeamTable,
		SalesTerritoryTable,
		SalesTitleTable,
		SampleTable,
		SampleIDGenerateTable,
		SampleTypeTable,
		ServiceshipTable,
		ServiceshipBillingPlanTable,
		SettingTable,
		TestTable,
		TestDetailTable,
		TestListTable,
		TubeTable,
		TubeInstructionsTable,
		TubeReceiveTable,
		TubeRequirementTable,
		TubeTypeTable,
		UserTable,
		UserInvitationRecordsTable,
		ZipcodeTable,
		ClinicCustomersTable,
		ClinicClinicSettingsTable,
		ClinicClinicPatientsTable,
		CustomerPatientsTable,
		InternalUserInternalUserSettingsTable,
		OrderFlagToOrderTable,
		OrderInfoToTestTable,
		PatientPatientSettingsTable,
		SampleTypeToTubeTypeTable,
		SampleTypeToTestTable,
		TubeTubeTypeTable,
		TubeTypeToTestTable,
	}
)

func init() {
	AccountSubscriptionTable.ForeignKeys[0].RefTable = ServiceshipTable
	AccountSubscriptionTable.ForeignKeys[1].RefTable = ServiceshipBillingPlanTable
	AccountSubscriptionTable.Annotation = &entsql.Annotation{
		Table: "account_subscription",
	}
	AddressTable.ForeignKeys[0].RefTable = AddressTable
	AddressTable.ForeignKeys[1].RefTable = ClinicTable
	AddressTable.ForeignKeys[2].RefTable = CustomerTable
	AddressTable.ForeignKeys[3].RefTable = InternalUserTable
	AddressTable.ForeignKeys[4].RefTable = PatientTable
	AddressTable.Annotation = &entsql.Annotation{
		Table: "address",
	}
	BetaProgramParticipationsTable.ForeignKeys[0].RefTable = BetaProgramsTable
	BetaProgramParticipationsTable.ForeignKeys[1].RefTable = ClinicTable
	BetaProgramParticipationsTable.ForeignKeys[2].RefTable = CustomerTable
	ClinicTable.ForeignKeys[0].RefTable = UserTable
	ClinicTable.Annotation = &entsql.Annotation{
		Table: "clinic",
	}
	ContactTable.ForeignKeys[0].RefTable = ClinicTable
	ContactTable.ForeignKeys[1].RefTable = ContactTable
	ContactTable.ForeignKeys[2].RefTable = CustomerTable
	ContactTable.ForeignKeys[3].RefTable = InternalUserTable
	ContactTable.ForeignKeys[4].RefTable = PatientTable
	ContactTable.Annotation = &entsql.Annotation{
		Table: "contact",
	}
	CountryListTable.Annotation = &entsql.Annotation{
		Table: "country_list",
	}
	CustomerTable.ForeignKeys[0].RefTable = InternalUserTable
	CustomerTable.ForeignKeys[1].RefTable = UserTable
	CustomerTable.Annotation = &entsql.Annotation{
		Table: "customer",
	}
	CustomerAddressOnClinicsTable.ForeignKeys[0].RefTable = AddressTable
	CustomerAddressOnClinicsTable.ForeignKeys[1].RefTable = ClinicTable
	CustomerAddressOnClinicsTable.ForeignKeys[2].RefTable = CustomerTable
	CustomerAddressOnClinicsTable.Annotation = &entsql.Annotation{
		Table: "customer_address_on_clinics",
	}
	CustomerContactOnClinicsTable.ForeignKeys[0].RefTable = ClinicTable
	CustomerContactOnClinicsTable.ForeignKeys[1].RefTable = ContactTable
	CustomerContactOnClinicsTable.ForeignKeys[2].RefTable = CustomerTable
	CustomerContactOnClinicsTable.Annotation = &entsql.Annotation{
		Table: "customer_contact_on_clinics",
	}
	CustomerSettingOnClinicsTable.ForeignKeys[0].RefTable = ClinicTable
	CustomerSettingOnClinicsTable.ForeignKeys[1].RefTable = CustomerTable
	CustomerSettingOnClinicsTable.ForeignKeys[2].RefTable = SettingTable
	CustomerSettingOnClinicsTable.Annotation = &entsql.Annotation{
		Table: "customer_setting_on_clinics",
	}
	InternalUserTable.ForeignKeys[0].RefTable = UserTable
	InternalUserTable.Annotation = &entsql.Annotation{
		Table: "internal_user",
	}
	LabOrderSendHistoryTable.ForeignKeys[0].RefTable = SampleTable
	LabOrderSendHistoryTable.Annotation = &entsql.Annotation{
		Table: "lab_order_send_history",
	}
	LoginHistoryTable.Annotation = &entsql.Annotation{
		Table: "login_history",
	}
	OrderFlagTable.Annotation = &entsql.Annotation{
		Table: "order_flag",
	}
	OrderInfoTable.ForeignKeys[0].RefTable = AddressTable
	OrderInfoTable.ForeignKeys[1].RefTable = ClinicTable
	OrderInfoTable.ForeignKeys[2].RefTable = ContactTable
	OrderInfoTable.ForeignKeys[3].RefTable = CustomerTable
	OrderInfoTable.Annotation = &entsql.Annotation{
		Table: "order_info",
	}
	PatientTable.ForeignKeys[0].RefTable = CustomerTable
	PatientTable.ForeignKeys[1].RefTable = UserTable
	PatientTable.Annotation = &entsql.Annotation{
		Table: "patient",
	}
	PatientFlagTable.Annotation = &entsql.Annotation{
		Table: "patient_flag",
	}
	PatientWeightHeightTable.ForeignKeys[0].RefTable = PatientTable
	PatientWeightHeightTable.Annotation = &entsql.Annotation{
		Table: "patient_weight_height",
	}
	PendingOrderCreditsTable.Annotation = &entsql.Annotation{
		Table: "pending_order_credits",
	}
	RbacActionsTable.Annotation = &entsql.Annotation{
		Table: "rbac_actions",
	}
	RbacResourcesTable.Annotation = &entsql.Annotation{
		Table: "rbac_resources",
	}
	RbacRolesTable.Annotation = &entsql.Annotation{
		Table: "rbac_roles",
	}
	SalesTeamTable.ForeignKeys[0].RefTable = SalesTeamTable
	SalesTeamTable.ForeignKeys[1].RefTable = InternalUserTable
	SalesTeamTable.ForeignKeys[2].RefTable = SalesTitleTable
	SalesTeamTable.Annotation = &entsql.Annotation{
		Table: "sales_team",
	}
	SalesTerritoryTable.Annotation = &entsql.Annotation{
		Table: "sales_territory",
	}
	SalesTitleTable.Annotation = &entsql.Annotation{
		Table: "sales_title",
	}
	SampleTable.ForeignKeys[0].RefTable = CustomerTable
	SampleTable.ForeignKeys[1].RefTable = OrderInfoTable
	SampleTable.ForeignKeys[2].RefTable = PatientTable
	SampleTable.Annotation = &entsql.Annotation{
		Table: "sample",
	}
	SampleIDGenerateTable.Annotation = &entsql.Annotation{
		Table: "sample_id_generate",
	}
	SampleTypeTable.Annotation = &entsql.Annotation{
		Table: "sample_type",
	}
	ServiceshipTable.Annotation = &entsql.Annotation{
		Table: "serviceship",
	}
	ServiceshipBillingPlanTable.ForeignKeys[0].RefTable = ServiceshipTable
	ServiceshipBillingPlanTable.Annotation = &entsql.Annotation{
		Table: "serviceship_billing_plan",
	}
	SettingTable.Annotation = &entsql.Annotation{
		Table: "setting",
	}
	TestTable.Annotation = &entsql.Annotation{
		Table: "test",
	}
	TestDetailTable.ForeignKeys[0].RefTable = TestTable
	TestDetailTable.Annotation = &entsql.Annotation{
		Table: "test_detail",
	}
	TestListTable.Annotation = &entsql.Annotation{
		Table: "test_list",
	}
	TubeTable.ForeignKeys[0].RefTable = SampleTable
	TubeTable.Annotation = &entsql.Annotation{
		Table: "tube",
	}
	TubeInstructionsTable.Annotation = &entsql.Annotation{
		Table: "tube_instructions",
	}
	TubeReceiveTable.ForeignKeys[0].RefTable = SampleTable
	TubeReceiveTable.Annotation = &entsql.Annotation{
		Table: "tube_receive",
	}
	TubeRequirementTable.ForeignKeys[0].RefTable = SampleTable
	TubeRequirementTable.Annotation = &entsql.Annotation{
		Table: "tube_requirement",
	}
	TubeTypeTable.Annotation = &entsql.Annotation{
		Table: "tube_type",
	}
	UserTable.Annotation = &entsql.Annotation{
		Table: "user",
	}
	ZipcodeTable.Annotation = &entsql.Annotation{
		Table: "zipcode",
	}
	ClinicCustomersTable.ForeignKeys[0].RefTable = ClinicTable
	ClinicCustomersTable.ForeignKeys[1].RefTable = CustomerTable
	ClinicClinicSettingsTable.ForeignKeys[0].RefTable = ClinicTable
	ClinicClinicSettingsTable.ForeignKeys[1].RefTable = SettingTable
	ClinicClinicPatientsTable.ForeignKeys[0].RefTable = ClinicTable
	ClinicClinicPatientsTable.ForeignKeys[1].RefTable = PatientTable
	CustomerPatientsTable.ForeignKeys[0].RefTable = CustomerTable
	CustomerPatientsTable.ForeignKeys[1].RefTable = PatientTable
	InternalUserInternalUserSettingsTable.ForeignKeys[0].RefTable = InternalUserTable
	InternalUserInternalUserSettingsTable.ForeignKeys[1].RefTable = SettingTable
	OrderFlagToOrderTable.ForeignKeys[0].RefTable = OrderFlagTable
	OrderFlagToOrderTable.ForeignKeys[1].RefTable = OrderInfoTable
	OrderInfoToTestTable.ForeignKeys[0].RefTable = OrderInfoTable
	OrderInfoToTestTable.ForeignKeys[1].RefTable = TestTable
	PatientPatientSettingsTable.ForeignKeys[0].RefTable = PatientTable
	PatientPatientSettingsTable.ForeignKeys[1].RefTable = SettingTable
	SampleTypeToTubeTypeTable.ForeignKeys[0].RefTable = SampleTypeTable
	SampleTypeToTubeTypeTable.ForeignKeys[1].RefTable = TubeTypeTable
	SampleTypeToTestTable.ForeignKeys[0].RefTable = SampleTypeTable
	SampleTypeToTestTable.ForeignKeys[1].RefTable = TestTable
	TubeTubeTypeTable.ForeignKeys[0].RefTable = TubeTable
	TubeTubeTypeTable.ForeignKeys[1].RefTable = TubeTypeTable
	TubeTypeToTestTable.ForeignKeys[0].RefTable = TubeTypeTable
	TubeTypeToTestTable.ForeignKeys[1].RefTable = TestTable
}
