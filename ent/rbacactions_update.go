// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/rbacactions"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RBACActionsUpdate is the builder for updating RBACActions entities.
type RBACActionsUpdate struct {
	config
	hooks    []Hook
	mutation *RBACActionsMutation
}

// Where appends a list predicates to the RBACActionsUpdate builder.
func (rau *RBACActionsUpdate) Where(ps ...predicate.RBACActions) *RBACActionsUpdate {
	rau.mutation.Where(ps...)
	return rau
}

// SetName sets the "name" field.
func (rau *RBACActionsUpdate) SetName(s string) *RBACActionsUpdate {
	rau.mutation.SetName(s)
	return rau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rau *RBACActionsUpdate) SetNillableName(s *string) *RBACActionsUpdate {
	if s != nil {
		rau.SetName(*s)
	}
	return rau
}

// Mutation returns the RBACActionsMutation object of the builder.
func (rau *RBACActionsUpdate) Mutation() *RBACActionsMutation {
	return rau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rau *RBACActionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rau.sqlSave, rau.mutation, rau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rau *RBACActionsUpdate) SaveX(ctx context.Context) int {
	affected, err := rau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rau *RBACActionsUpdate) Exec(ctx context.Context) error {
	_, err := rau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rau *RBACActionsUpdate) ExecX(ctx context.Context) {
	if err := rau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rau *RBACActionsUpdate) check() error {
	if v, ok := rau.mutation.Name(); ok {
		if err := rbacactions.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RBACActions.name": %w`, err)}
		}
	}
	return nil
}

func (rau *RBACActionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rbacactions.Table, rbacactions.Columns, sqlgraph.NewFieldSpec(rbacactions.FieldID, field.TypeInt))
	if ps := rau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rau.mutation.Name(); ok {
		_spec.SetField(rbacactions.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rbacactions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rau.mutation.done = true
	return n, nil
}

// RBACActionsUpdateOne is the builder for updating a single RBACActions entity.
type RBACActionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RBACActionsMutation
}

// SetName sets the "name" field.
func (rauo *RBACActionsUpdateOne) SetName(s string) *RBACActionsUpdateOne {
	rauo.mutation.SetName(s)
	return rauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rauo *RBACActionsUpdateOne) SetNillableName(s *string) *RBACActionsUpdateOne {
	if s != nil {
		rauo.SetName(*s)
	}
	return rauo
}

// Mutation returns the RBACActionsMutation object of the builder.
func (rauo *RBACActionsUpdateOne) Mutation() *RBACActionsMutation {
	return rauo.mutation
}

// Where appends a list predicates to the RBACActionsUpdate builder.
func (rauo *RBACActionsUpdateOne) Where(ps ...predicate.RBACActions) *RBACActionsUpdateOne {
	rauo.mutation.Where(ps...)
	return rauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rauo *RBACActionsUpdateOne) Select(field string, fields ...string) *RBACActionsUpdateOne {
	rauo.fields = append([]string{field}, fields...)
	return rauo
}

// Save executes the query and returns the updated RBACActions entity.
func (rauo *RBACActionsUpdateOne) Save(ctx context.Context) (*RBACActions, error) {
	return withHooks(ctx, rauo.sqlSave, rauo.mutation, rauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rauo *RBACActionsUpdateOne) SaveX(ctx context.Context) *RBACActions {
	node, err := rauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rauo *RBACActionsUpdateOne) Exec(ctx context.Context) error {
	_, err := rauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rauo *RBACActionsUpdateOne) ExecX(ctx context.Context) {
	if err := rauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rauo *RBACActionsUpdateOne) check() error {
	if v, ok := rauo.mutation.Name(); ok {
		if err := rbacactions.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RBACActions.name": %w`, err)}
		}
	}
	return nil
}

func (rauo *RBACActionsUpdateOne) sqlSave(ctx context.Context) (_node *RBACActions, err error) {
	if err := rauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rbacactions.Table, rbacactions.Columns, sqlgraph.NewFieldSpec(rbacactions.FieldID, field.TypeInt))
	id, ok := rauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RBACActions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rbacactions.FieldID)
		for _, f := range fields {
			if !rbacactions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rbacactions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rauo.mutation.Name(); ok {
		_spec.SetField(rbacactions.FieldName, field.TypeString, value)
	}
	_node = &RBACActions{config: rauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rbacactions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rauo.mutation.done = true
	return _node, nil
}
