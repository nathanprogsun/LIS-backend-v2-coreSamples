// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/sampletype"
	"coresamples/ent/test"
	"coresamples/ent/tubetype"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SampleTypeUpdate is the builder for updating SampleType entities.
type SampleTypeUpdate struct {
	config
	hooks    []Hook
	mutation *SampleTypeMutation
}

// Where appends a list predicates to the SampleTypeUpdate builder.
func (stu *SampleTypeUpdate) Where(ps ...predicate.SampleType) *SampleTypeUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetSampleTypeName sets the "sample_type_name" field.
func (stu *SampleTypeUpdate) SetSampleTypeName(s string) *SampleTypeUpdate {
	stu.mutation.SetSampleTypeName(s)
	return stu
}

// SetNillableSampleTypeName sets the "sample_type_name" field if the given value is not nil.
func (stu *SampleTypeUpdate) SetNillableSampleTypeName(s *string) *SampleTypeUpdate {
	if s != nil {
		stu.SetSampleTypeName(*s)
	}
	return stu
}

// SetSampleTypeCode sets the "sample_type_code" field.
func (stu *SampleTypeUpdate) SetSampleTypeCode(s string) *SampleTypeUpdate {
	stu.mutation.SetSampleTypeCode(s)
	return stu
}

// SetNillableSampleTypeCode sets the "sample_type_code" field if the given value is not nil.
func (stu *SampleTypeUpdate) SetNillableSampleTypeCode(s *string) *SampleTypeUpdate {
	if s != nil {
		stu.SetSampleTypeCode(*s)
	}
	return stu
}

// SetSampleTypeEnum sets the "sample_type_enum" field.
func (stu *SampleTypeUpdate) SetSampleTypeEnum(s string) *SampleTypeUpdate {
	stu.mutation.SetSampleTypeEnum(s)
	return stu
}

// SetNillableSampleTypeEnum sets the "sample_type_enum" field if the given value is not nil.
func (stu *SampleTypeUpdate) SetNillableSampleTypeEnum(s *string) *SampleTypeUpdate {
	if s != nil {
		stu.SetSampleTypeEnum(*s)
	}
	return stu
}

// ClearSampleTypeEnum clears the value of the "sample_type_enum" field.
func (stu *SampleTypeUpdate) ClearSampleTypeEnum() *SampleTypeUpdate {
	stu.mutation.ClearSampleTypeEnum()
	return stu
}

// SetSampleTypeEnumOldLisRequest sets the "sample_type_enum_old_lis_request" field.
func (stu *SampleTypeUpdate) SetSampleTypeEnumOldLisRequest(s string) *SampleTypeUpdate {
	stu.mutation.SetSampleTypeEnumOldLisRequest(s)
	return stu
}

// SetNillableSampleTypeEnumOldLisRequest sets the "sample_type_enum_old_lis_request" field if the given value is not nil.
func (stu *SampleTypeUpdate) SetNillableSampleTypeEnumOldLisRequest(s *string) *SampleTypeUpdate {
	if s != nil {
		stu.SetSampleTypeEnumOldLisRequest(*s)
	}
	return stu
}

// ClearSampleTypeEnumOldLisRequest clears the value of the "sample_type_enum_old_lis_request" field.
func (stu *SampleTypeUpdate) ClearSampleTypeEnumOldLisRequest() *SampleTypeUpdate {
	stu.mutation.ClearSampleTypeEnumOldLisRequest()
	return stu
}

// SetSampleTypeDescription sets the "sample_type_description" field.
func (stu *SampleTypeUpdate) SetSampleTypeDescription(s string) *SampleTypeUpdate {
	stu.mutation.SetSampleTypeDescription(s)
	return stu
}

// SetNillableSampleTypeDescription sets the "sample_type_description" field if the given value is not nil.
func (stu *SampleTypeUpdate) SetNillableSampleTypeDescription(s *string) *SampleTypeUpdate {
	if s != nil {
		stu.SetSampleTypeDescription(*s)
	}
	return stu
}

// SetPrimarySampleTypeGroup sets the "primary_sample_type_group" field.
func (stu *SampleTypeUpdate) SetPrimarySampleTypeGroup(s string) *SampleTypeUpdate {
	stu.mutation.SetPrimarySampleTypeGroup(s)
	return stu
}

// SetNillablePrimarySampleTypeGroup sets the "primary_sample_type_group" field if the given value is not nil.
func (stu *SampleTypeUpdate) SetNillablePrimarySampleTypeGroup(s *string) *SampleTypeUpdate {
	if s != nil {
		stu.SetPrimarySampleTypeGroup(*s)
	}
	return stu
}

// SetIsActive sets the "is_active" field.
func (stu *SampleTypeUpdate) SetIsActive(b bool) *SampleTypeUpdate {
	stu.mutation.SetIsActive(b)
	return stu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (stu *SampleTypeUpdate) SetNillableIsActive(b *bool) *SampleTypeUpdate {
	if b != nil {
		stu.SetIsActive(*b)
	}
	return stu
}

// SetCreatedTime sets the "created_time" field.
func (stu *SampleTypeUpdate) SetCreatedTime(t time.Time) *SampleTypeUpdate {
	stu.mutation.SetCreatedTime(t)
	return stu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (stu *SampleTypeUpdate) SetNillableCreatedTime(t *time.Time) *SampleTypeUpdate {
	if t != nil {
		stu.SetCreatedTime(*t)
	}
	return stu
}

// SetUpdatedTime sets the "updated_time" field.
func (stu *SampleTypeUpdate) SetUpdatedTime(t time.Time) *SampleTypeUpdate {
	stu.mutation.SetUpdatedTime(t)
	return stu
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (stu *SampleTypeUpdate) ClearUpdatedTime() *SampleTypeUpdate {
	stu.mutation.ClearUpdatedTime()
	return stu
}

// AddTubeTypeIDs adds the "tube_types" edge to the TubeType entity by IDs.
func (stu *SampleTypeUpdate) AddTubeTypeIDs(ids ...int) *SampleTypeUpdate {
	stu.mutation.AddTubeTypeIDs(ids...)
	return stu
}

// AddTubeTypes adds the "tube_types" edges to the TubeType entity.
func (stu *SampleTypeUpdate) AddTubeTypes(t ...*TubeType) *SampleTypeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return stu.AddTubeTypeIDs(ids...)
}

// AddTestIDs adds the "tests" edge to the Test entity by IDs.
func (stu *SampleTypeUpdate) AddTestIDs(ids ...int) *SampleTypeUpdate {
	stu.mutation.AddTestIDs(ids...)
	return stu
}

// AddTests adds the "tests" edges to the Test entity.
func (stu *SampleTypeUpdate) AddTests(t ...*Test) *SampleTypeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return stu.AddTestIDs(ids...)
}

// Mutation returns the SampleTypeMutation object of the builder.
func (stu *SampleTypeUpdate) Mutation() *SampleTypeMutation {
	return stu.mutation
}

// ClearTubeTypes clears all "tube_types" edges to the TubeType entity.
func (stu *SampleTypeUpdate) ClearTubeTypes() *SampleTypeUpdate {
	stu.mutation.ClearTubeTypes()
	return stu
}

// RemoveTubeTypeIDs removes the "tube_types" edge to TubeType entities by IDs.
func (stu *SampleTypeUpdate) RemoveTubeTypeIDs(ids ...int) *SampleTypeUpdate {
	stu.mutation.RemoveTubeTypeIDs(ids...)
	return stu
}

// RemoveTubeTypes removes "tube_types" edges to TubeType entities.
func (stu *SampleTypeUpdate) RemoveTubeTypes(t ...*TubeType) *SampleTypeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return stu.RemoveTubeTypeIDs(ids...)
}

// ClearTests clears all "tests" edges to the Test entity.
func (stu *SampleTypeUpdate) ClearTests() *SampleTypeUpdate {
	stu.mutation.ClearTests()
	return stu
}

// RemoveTestIDs removes the "tests" edge to Test entities by IDs.
func (stu *SampleTypeUpdate) RemoveTestIDs(ids ...int) *SampleTypeUpdate {
	stu.mutation.RemoveTestIDs(ids...)
	return stu
}

// RemoveTests removes "tests" edges to Test entities.
func (stu *SampleTypeUpdate) RemoveTests(t ...*Test) *SampleTypeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return stu.RemoveTestIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SampleTypeUpdate) Save(ctx context.Context) (int, error) {
	stu.defaults()
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SampleTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SampleTypeUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SampleTypeUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *SampleTypeUpdate) defaults() {
	if _, ok := stu.mutation.UpdatedTime(); !ok && !stu.mutation.UpdatedTimeCleared() {
		v := sampletype.UpdateDefaultUpdatedTime()
		stu.mutation.SetUpdatedTime(v)
	}
}

func (stu *SampleTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sampletype.Table, sampletype.Columns, sqlgraph.NewFieldSpec(sampletype.FieldID, field.TypeInt))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.SampleTypeName(); ok {
		_spec.SetField(sampletype.FieldSampleTypeName, field.TypeString, value)
	}
	if value, ok := stu.mutation.SampleTypeCode(); ok {
		_spec.SetField(sampletype.FieldSampleTypeCode, field.TypeString, value)
	}
	if value, ok := stu.mutation.SampleTypeEnum(); ok {
		_spec.SetField(sampletype.FieldSampleTypeEnum, field.TypeString, value)
	}
	if stu.mutation.SampleTypeEnumCleared() {
		_spec.ClearField(sampletype.FieldSampleTypeEnum, field.TypeString)
	}
	if value, ok := stu.mutation.SampleTypeEnumOldLisRequest(); ok {
		_spec.SetField(sampletype.FieldSampleTypeEnumOldLisRequest, field.TypeString, value)
	}
	if stu.mutation.SampleTypeEnumOldLisRequestCleared() {
		_spec.ClearField(sampletype.FieldSampleTypeEnumOldLisRequest, field.TypeString)
	}
	if value, ok := stu.mutation.SampleTypeDescription(); ok {
		_spec.SetField(sampletype.FieldSampleTypeDescription, field.TypeString, value)
	}
	if value, ok := stu.mutation.PrimarySampleTypeGroup(); ok {
		_spec.SetField(sampletype.FieldPrimarySampleTypeGroup, field.TypeString, value)
	}
	if value, ok := stu.mutation.IsActive(); ok {
		_spec.SetField(sampletype.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := stu.mutation.CreatedTime(); ok {
		_spec.SetField(sampletype.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := stu.mutation.UpdatedTime(); ok {
		_spec.SetField(sampletype.FieldUpdatedTime, field.TypeTime, value)
	}
	if stu.mutation.UpdatedTimeCleared() {
		_spec.ClearField(sampletype.FieldUpdatedTime, field.TypeTime)
	}
	if stu.mutation.TubeTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sampletype.TubeTypesTable,
			Columns: sampletype.TubeTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedTubeTypesIDs(); len(nodes) > 0 && !stu.mutation.TubeTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sampletype.TubeTypesTable,
			Columns: sampletype.TubeTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.TubeTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sampletype.TubeTypesTable,
			Columns: sampletype.TubeTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.TestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sampletype.TestsTable,
			Columns: sampletype.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedTestsIDs(); len(nodes) > 0 && !stu.mutation.TestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sampletype.TestsTable,
			Columns: sampletype.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.TestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sampletype.TestsTable,
			Columns: sampletype.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sampletype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// SampleTypeUpdateOne is the builder for updating a single SampleType entity.
type SampleTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SampleTypeMutation
}

// SetSampleTypeName sets the "sample_type_name" field.
func (stuo *SampleTypeUpdateOne) SetSampleTypeName(s string) *SampleTypeUpdateOne {
	stuo.mutation.SetSampleTypeName(s)
	return stuo
}

// SetNillableSampleTypeName sets the "sample_type_name" field if the given value is not nil.
func (stuo *SampleTypeUpdateOne) SetNillableSampleTypeName(s *string) *SampleTypeUpdateOne {
	if s != nil {
		stuo.SetSampleTypeName(*s)
	}
	return stuo
}

// SetSampleTypeCode sets the "sample_type_code" field.
func (stuo *SampleTypeUpdateOne) SetSampleTypeCode(s string) *SampleTypeUpdateOne {
	stuo.mutation.SetSampleTypeCode(s)
	return stuo
}

// SetNillableSampleTypeCode sets the "sample_type_code" field if the given value is not nil.
func (stuo *SampleTypeUpdateOne) SetNillableSampleTypeCode(s *string) *SampleTypeUpdateOne {
	if s != nil {
		stuo.SetSampleTypeCode(*s)
	}
	return stuo
}

// SetSampleTypeEnum sets the "sample_type_enum" field.
func (stuo *SampleTypeUpdateOne) SetSampleTypeEnum(s string) *SampleTypeUpdateOne {
	stuo.mutation.SetSampleTypeEnum(s)
	return stuo
}

// SetNillableSampleTypeEnum sets the "sample_type_enum" field if the given value is not nil.
func (stuo *SampleTypeUpdateOne) SetNillableSampleTypeEnum(s *string) *SampleTypeUpdateOne {
	if s != nil {
		stuo.SetSampleTypeEnum(*s)
	}
	return stuo
}

// ClearSampleTypeEnum clears the value of the "sample_type_enum" field.
func (stuo *SampleTypeUpdateOne) ClearSampleTypeEnum() *SampleTypeUpdateOne {
	stuo.mutation.ClearSampleTypeEnum()
	return stuo
}

// SetSampleTypeEnumOldLisRequest sets the "sample_type_enum_old_lis_request" field.
func (stuo *SampleTypeUpdateOne) SetSampleTypeEnumOldLisRequest(s string) *SampleTypeUpdateOne {
	stuo.mutation.SetSampleTypeEnumOldLisRequest(s)
	return stuo
}

// SetNillableSampleTypeEnumOldLisRequest sets the "sample_type_enum_old_lis_request" field if the given value is not nil.
func (stuo *SampleTypeUpdateOne) SetNillableSampleTypeEnumOldLisRequest(s *string) *SampleTypeUpdateOne {
	if s != nil {
		stuo.SetSampleTypeEnumOldLisRequest(*s)
	}
	return stuo
}

// ClearSampleTypeEnumOldLisRequest clears the value of the "sample_type_enum_old_lis_request" field.
func (stuo *SampleTypeUpdateOne) ClearSampleTypeEnumOldLisRequest() *SampleTypeUpdateOne {
	stuo.mutation.ClearSampleTypeEnumOldLisRequest()
	return stuo
}

// SetSampleTypeDescription sets the "sample_type_description" field.
func (stuo *SampleTypeUpdateOne) SetSampleTypeDescription(s string) *SampleTypeUpdateOne {
	stuo.mutation.SetSampleTypeDescription(s)
	return stuo
}

// SetNillableSampleTypeDescription sets the "sample_type_description" field if the given value is not nil.
func (stuo *SampleTypeUpdateOne) SetNillableSampleTypeDescription(s *string) *SampleTypeUpdateOne {
	if s != nil {
		stuo.SetSampleTypeDescription(*s)
	}
	return stuo
}

// SetPrimarySampleTypeGroup sets the "primary_sample_type_group" field.
func (stuo *SampleTypeUpdateOne) SetPrimarySampleTypeGroup(s string) *SampleTypeUpdateOne {
	stuo.mutation.SetPrimarySampleTypeGroup(s)
	return stuo
}

// SetNillablePrimarySampleTypeGroup sets the "primary_sample_type_group" field if the given value is not nil.
func (stuo *SampleTypeUpdateOne) SetNillablePrimarySampleTypeGroup(s *string) *SampleTypeUpdateOne {
	if s != nil {
		stuo.SetPrimarySampleTypeGroup(*s)
	}
	return stuo
}

// SetIsActive sets the "is_active" field.
func (stuo *SampleTypeUpdateOne) SetIsActive(b bool) *SampleTypeUpdateOne {
	stuo.mutation.SetIsActive(b)
	return stuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (stuo *SampleTypeUpdateOne) SetNillableIsActive(b *bool) *SampleTypeUpdateOne {
	if b != nil {
		stuo.SetIsActive(*b)
	}
	return stuo
}

// SetCreatedTime sets the "created_time" field.
func (stuo *SampleTypeUpdateOne) SetCreatedTime(t time.Time) *SampleTypeUpdateOne {
	stuo.mutation.SetCreatedTime(t)
	return stuo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (stuo *SampleTypeUpdateOne) SetNillableCreatedTime(t *time.Time) *SampleTypeUpdateOne {
	if t != nil {
		stuo.SetCreatedTime(*t)
	}
	return stuo
}

// SetUpdatedTime sets the "updated_time" field.
func (stuo *SampleTypeUpdateOne) SetUpdatedTime(t time.Time) *SampleTypeUpdateOne {
	stuo.mutation.SetUpdatedTime(t)
	return stuo
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (stuo *SampleTypeUpdateOne) ClearUpdatedTime() *SampleTypeUpdateOne {
	stuo.mutation.ClearUpdatedTime()
	return stuo
}

// AddTubeTypeIDs adds the "tube_types" edge to the TubeType entity by IDs.
func (stuo *SampleTypeUpdateOne) AddTubeTypeIDs(ids ...int) *SampleTypeUpdateOne {
	stuo.mutation.AddTubeTypeIDs(ids...)
	return stuo
}

// AddTubeTypes adds the "tube_types" edges to the TubeType entity.
func (stuo *SampleTypeUpdateOne) AddTubeTypes(t ...*TubeType) *SampleTypeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return stuo.AddTubeTypeIDs(ids...)
}

// AddTestIDs adds the "tests" edge to the Test entity by IDs.
func (stuo *SampleTypeUpdateOne) AddTestIDs(ids ...int) *SampleTypeUpdateOne {
	stuo.mutation.AddTestIDs(ids...)
	return stuo
}

// AddTests adds the "tests" edges to the Test entity.
func (stuo *SampleTypeUpdateOne) AddTests(t ...*Test) *SampleTypeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return stuo.AddTestIDs(ids...)
}

// Mutation returns the SampleTypeMutation object of the builder.
func (stuo *SampleTypeUpdateOne) Mutation() *SampleTypeMutation {
	return stuo.mutation
}

// ClearTubeTypes clears all "tube_types" edges to the TubeType entity.
func (stuo *SampleTypeUpdateOne) ClearTubeTypes() *SampleTypeUpdateOne {
	stuo.mutation.ClearTubeTypes()
	return stuo
}

// RemoveTubeTypeIDs removes the "tube_types" edge to TubeType entities by IDs.
func (stuo *SampleTypeUpdateOne) RemoveTubeTypeIDs(ids ...int) *SampleTypeUpdateOne {
	stuo.mutation.RemoveTubeTypeIDs(ids...)
	return stuo
}

// RemoveTubeTypes removes "tube_types" edges to TubeType entities.
func (stuo *SampleTypeUpdateOne) RemoveTubeTypes(t ...*TubeType) *SampleTypeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return stuo.RemoveTubeTypeIDs(ids...)
}

// ClearTests clears all "tests" edges to the Test entity.
func (stuo *SampleTypeUpdateOne) ClearTests() *SampleTypeUpdateOne {
	stuo.mutation.ClearTests()
	return stuo
}

// RemoveTestIDs removes the "tests" edge to Test entities by IDs.
func (stuo *SampleTypeUpdateOne) RemoveTestIDs(ids ...int) *SampleTypeUpdateOne {
	stuo.mutation.RemoveTestIDs(ids...)
	return stuo
}

// RemoveTests removes "tests" edges to Test entities.
func (stuo *SampleTypeUpdateOne) RemoveTests(t ...*Test) *SampleTypeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return stuo.RemoveTestIDs(ids...)
}

// Where appends a list predicates to the SampleTypeUpdate builder.
func (stuo *SampleTypeUpdateOne) Where(ps ...predicate.SampleType) *SampleTypeUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SampleTypeUpdateOne) Select(field string, fields ...string) *SampleTypeUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SampleType entity.
func (stuo *SampleTypeUpdateOne) Save(ctx context.Context) (*SampleType, error) {
	stuo.defaults()
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SampleTypeUpdateOne) SaveX(ctx context.Context) *SampleType {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SampleTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SampleTypeUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *SampleTypeUpdateOne) defaults() {
	if _, ok := stuo.mutation.UpdatedTime(); !ok && !stuo.mutation.UpdatedTimeCleared() {
		v := sampletype.UpdateDefaultUpdatedTime()
		stuo.mutation.SetUpdatedTime(v)
	}
}

func (stuo *SampleTypeUpdateOne) sqlSave(ctx context.Context) (_node *SampleType, err error) {
	_spec := sqlgraph.NewUpdateSpec(sampletype.Table, sampletype.Columns, sqlgraph.NewFieldSpec(sampletype.FieldID, field.TypeInt))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SampleType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sampletype.FieldID)
		for _, f := range fields {
			if !sampletype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sampletype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.SampleTypeName(); ok {
		_spec.SetField(sampletype.FieldSampleTypeName, field.TypeString, value)
	}
	if value, ok := stuo.mutation.SampleTypeCode(); ok {
		_spec.SetField(sampletype.FieldSampleTypeCode, field.TypeString, value)
	}
	if value, ok := stuo.mutation.SampleTypeEnum(); ok {
		_spec.SetField(sampletype.FieldSampleTypeEnum, field.TypeString, value)
	}
	if stuo.mutation.SampleTypeEnumCleared() {
		_spec.ClearField(sampletype.FieldSampleTypeEnum, field.TypeString)
	}
	if value, ok := stuo.mutation.SampleTypeEnumOldLisRequest(); ok {
		_spec.SetField(sampletype.FieldSampleTypeEnumOldLisRequest, field.TypeString, value)
	}
	if stuo.mutation.SampleTypeEnumOldLisRequestCleared() {
		_spec.ClearField(sampletype.FieldSampleTypeEnumOldLisRequest, field.TypeString)
	}
	if value, ok := stuo.mutation.SampleTypeDescription(); ok {
		_spec.SetField(sampletype.FieldSampleTypeDescription, field.TypeString, value)
	}
	if value, ok := stuo.mutation.PrimarySampleTypeGroup(); ok {
		_spec.SetField(sampletype.FieldPrimarySampleTypeGroup, field.TypeString, value)
	}
	if value, ok := stuo.mutation.IsActive(); ok {
		_spec.SetField(sampletype.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := stuo.mutation.CreatedTime(); ok {
		_spec.SetField(sampletype.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := stuo.mutation.UpdatedTime(); ok {
		_spec.SetField(sampletype.FieldUpdatedTime, field.TypeTime, value)
	}
	if stuo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(sampletype.FieldUpdatedTime, field.TypeTime)
	}
	if stuo.mutation.TubeTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sampletype.TubeTypesTable,
			Columns: sampletype.TubeTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedTubeTypesIDs(); len(nodes) > 0 && !stuo.mutation.TubeTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sampletype.TubeTypesTable,
			Columns: sampletype.TubeTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.TubeTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sampletype.TubeTypesTable,
			Columns: sampletype.TubeTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.TestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sampletype.TestsTable,
			Columns: sampletype.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedTestsIDs(); len(nodes) > 0 && !stuo.mutation.TestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sampletype.TestsTable,
			Columns: sampletype.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.TestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sampletype.TestsTable,
			Columns: sampletype.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SampleType{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sampletype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
