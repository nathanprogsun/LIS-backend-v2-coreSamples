// Code generated by ent, DO NOT EDIT.

package accountsubscription

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the accountsubscription type in the database.
	Label = "account_subscription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAccountID holds the string denoting the account_id field in the database.
	FieldAccountID = "account_id"
	// FieldAccountType holds the string denoting the account_type field in the database.
	FieldAccountType = "account_type"
	// FieldSubscriberName holds the string denoting the subscriber_name field in the database.
	FieldSubscriberName = "subscriber_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// EdgeServiceshipBillingPlan holds the string denoting the serviceship_billing_plan edge name in mutations.
	EdgeServiceshipBillingPlan = "serviceship_billing_plan"
	// EdgeServiceship holds the string denoting the serviceship edge name in mutations.
	EdgeServiceship = "serviceship"
	// Table holds the table name of the accountsubscription in the database.
	Table = "account_subscription"
	// ServiceshipBillingPlanTable is the table that holds the serviceship_billing_plan relation/edge.
	ServiceshipBillingPlanTable = "account_subscription"
	// ServiceshipBillingPlanInverseTable is the table name for the ServiceshipBillingPlan entity.
	// It exists in this package in order to avoid circular dependency with the "serviceshipbillingplan" package.
	ServiceshipBillingPlanInverseTable = "serviceship_billing_plan"
	// ServiceshipBillingPlanColumn is the table column denoting the serviceship_billing_plan relation/edge.
	ServiceshipBillingPlanColumn = "serviceship_billing_plan_account_subscription"
	// ServiceshipTable is the table that holds the serviceship relation/edge.
	ServiceshipTable = "account_subscription"
	// ServiceshipInverseTable is the table name for the Serviceship entity.
	// It exists in this package in order to avoid circular dependency with the "serviceship" package.
	ServiceshipInverseTable = "serviceship"
	// ServiceshipColumn is the table column denoting the serviceship relation/edge.
	ServiceshipColumn = "serviceship_account_subscription"
)

// Columns holds all SQL columns for accountsubscription fields.
var Columns = []string{
	FieldID,
	FieldAccountID,
	FieldAccountType,
	FieldSubscriberName,
	FieldEmail,
	FieldStartTime,
	FieldEndTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "account_subscription"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"serviceship_account_subscription",
	"serviceship_billing_plan_account_subscription",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// AccountIDValidator is a validator for the "account_id" field. It is called by the builders before save.
	AccountIDValidator func(int64) error
	// DefaultEndTime holds the default value on creation for the "end_time" field.
	DefaultEndTime time.Time
)

// AccountType defines the type for the "account_type" enum field.
type AccountType string

// AccountType values.
const (
	AccountTypeClinic AccountType = "clinic"
)

func (at AccountType) String() string {
	return string(at)
}

// AccountTypeValidator is a validator for the "account_type" field enum values. It is called by the builders before save.
func AccountTypeValidator(at AccountType) error {
	switch at {
	case AccountTypeClinic:
		return nil
	default:
		return fmt.Errorf("accountsubscription: invalid enum value for account_type field: %q", at)
	}
}

// OrderOption defines the ordering options for the AccountSubscription queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAccountID orders the results by the account_id field.
func ByAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountID, opts...).ToFunc()
}

// ByAccountType orders the results by the account_type field.
func ByAccountType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountType, opts...).ToFunc()
}

// BySubscriberName orders the results by the subscriber_name field.
func BySubscriberName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriberName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByServiceshipBillingPlanField orders the results by serviceship_billing_plan field.
func ByServiceshipBillingPlanField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceshipBillingPlanStep(), sql.OrderByField(field, opts...))
	}
}

// ByServiceshipField orders the results by serviceship field.
func ByServiceshipField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceshipStep(), sql.OrderByField(field, opts...))
	}
}
func newServiceshipBillingPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceshipBillingPlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ServiceshipBillingPlanTable, ServiceshipBillingPlanColumn),
	)
}
func newServiceshipStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceshipInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ServiceshipTable, ServiceshipColumn),
	)
}
