// Code generated by ent, DO NOT EDIT.

package accountsubscription

import (
	"coresamples/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldLTE(FieldID, id))
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v int64) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldEQ(FieldAccountID, v))
}

// SubscriberName applies equality check predicate on the "subscriber_name" field. It's identical to SubscriberNameEQ.
func SubscriberName(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldEQ(FieldSubscriberName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldEQ(FieldEmail, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldEQ(FieldEndTime, v))
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v int64) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldEQ(FieldAccountID, v))
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v int64) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldNEQ(FieldAccountID, v))
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...int64) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldIn(FieldAccountID, vs...))
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...int64) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldNotIn(FieldAccountID, vs...))
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v int64) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldGT(FieldAccountID, v))
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v int64) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldGTE(FieldAccountID, v))
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v int64) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldLT(FieldAccountID, v))
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v int64) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldLTE(FieldAccountID, v))
}

// AccountTypeEQ applies the EQ predicate on the "account_type" field.
func AccountTypeEQ(v AccountType) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldEQ(FieldAccountType, v))
}

// AccountTypeNEQ applies the NEQ predicate on the "account_type" field.
func AccountTypeNEQ(v AccountType) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldNEQ(FieldAccountType, v))
}

// AccountTypeIn applies the In predicate on the "account_type" field.
func AccountTypeIn(vs ...AccountType) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldIn(FieldAccountType, vs...))
}

// AccountTypeNotIn applies the NotIn predicate on the "account_type" field.
func AccountTypeNotIn(vs ...AccountType) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldNotIn(FieldAccountType, vs...))
}

// SubscriberNameEQ applies the EQ predicate on the "subscriber_name" field.
func SubscriberNameEQ(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldEQ(FieldSubscriberName, v))
}

// SubscriberNameNEQ applies the NEQ predicate on the "subscriber_name" field.
func SubscriberNameNEQ(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldNEQ(FieldSubscriberName, v))
}

// SubscriberNameIn applies the In predicate on the "subscriber_name" field.
func SubscriberNameIn(vs ...string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldIn(FieldSubscriberName, vs...))
}

// SubscriberNameNotIn applies the NotIn predicate on the "subscriber_name" field.
func SubscriberNameNotIn(vs ...string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldNotIn(FieldSubscriberName, vs...))
}

// SubscriberNameGT applies the GT predicate on the "subscriber_name" field.
func SubscriberNameGT(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldGT(FieldSubscriberName, v))
}

// SubscriberNameGTE applies the GTE predicate on the "subscriber_name" field.
func SubscriberNameGTE(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldGTE(FieldSubscriberName, v))
}

// SubscriberNameLT applies the LT predicate on the "subscriber_name" field.
func SubscriberNameLT(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldLT(FieldSubscriberName, v))
}

// SubscriberNameLTE applies the LTE predicate on the "subscriber_name" field.
func SubscriberNameLTE(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldLTE(FieldSubscriberName, v))
}

// SubscriberNameContains applies the Contains predicate on the "subscriber_name" field.
func SubscriberNameContains(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldContains(FieldSubscriberName, v))
}

// SubscriberNameHasPrefix applies the HasPrefix predicate on the "subscriber_name" field.
func SubscriberNameHasPrefix(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldHasPrefix(FieldSubscriberName, v))
}

// SubscriberNameHasSuffix applies the HasSuffix predicate on the "subscriber_name" field.
func SubscriberNameHasSuffix(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldHasSuffix(FieldSubscriberName, v))
}

// SubscriberNameEqualFold applies the EqualFold predicate on the "subscriber_name" field.
func SubscriberNameEqualFold(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldEqualFold(FieldSubscriberName, v))
}

// SubscriberNameContainsFold applies the ContainsFold predicate on the "subscriber_name" field.
func SubscriberNameContainsFold(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldContainsFold(FieldSubscriberName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldContainsFold(FieldEmail, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.FieldLTE(FieldEndTime, v))
}

// HasServiceshipBillingPlan applies the HasEdge predicate on the "serviceship_billing_plan" edge.
func HasServiceshipBillingPlan() predicate.AccountSubscription {
	return predicate.AccountSubscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServiceshipBillingPlanTable, ServiceshipBillingPlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceshipBillingPlanWith applies the HasEdge predicate on the "serviceship_billing_plan" edge with a given conditions (other predicates).
func HasServiceshipBillingPlanWith(preds ...predicate.ServiceshipBillingPlan) predicate.AccountSubscription {
	return predicate.AccountSubscription(func(s *sql.Selector) {
		step := newServiceshipBillingPlanStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceship applies the HasEdge predicate on the "serviceship" edge.
func HasServiceship() predicate.AccountSubscription {
	return predicate.AccountSubscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServiceshipTable, ServiceshipColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceshipWith applies the HasEdge predicate on the "serviceship" edge with a given conditions (other predicates).
func HasServiceshipWith(preds ...predicate.Serviceship) predicate.AccountSubscription {
	return predicate.AccountSubscription(func(s *sql.Selector) {
		step := newServiceshipStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AccountSubscription) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AccountSubscription) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AccountSubscription) predicate.AccountSubscription {
	return predicate.AccountSubscription(sql.NotPredicates(p))
}
