// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/customer"
	"coresamples/ent/orderinfo"
	"coresamples/ent/patient"
	"coresamples/ent/predicate"
	"coresamples/ent/sample"
	"coresamples/ent/tube"
	"coresamples/ent/tubereceive"
	"coresamples/ent/tuberequirement"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SampleUpdate is the builder for updating Sample entities.
type SampleUpdate struct {
	config
	hooks    []Hook
	mutation *SampleMutation
}

// Where appends a list predicates to the SampleUpdate builder.
func (su *SampleUpdate) Where(ps ...predicate.Sample) *SampleUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetAccessionID sets the "accession_id" field.
func (su *SampleUpdate) SetAccessionID(s string) *SampleUpdate {
	su.mutation.SetAccessionID(s)
	return su
}

// SetNillableAccessionID sets the "accession_id" field if the given value is not nil.
func (su *SampleUpdate) SetNillableAccessionID(s *string) *SampleUpdate {
	if s != nil {
		su.SetAccessionID(*s)
	}
	return su
}

// SetSampleStorage sets the "sample_storage" field.
func (su *SampleUpdate) SetSampleStorage(s string) *SampleUpdate {
	su.mutation.SetSampleStorage(s)
	return su
}

// SetNillableSampleStorage sets the "sample_storage" field if the given value is not nil.
func (su *SampleUpdate) SetNillableSampleStorage(s *string) *SampleUpdate {
	if s != nil {
		su.SetSampleStorage(*s)
	}
	return su
}

// ClearSampleStorage clears the value of the "sample_storage" field.
func (su *SampleUpdate) ClearSampleStorage() *SampleUpdate {
	su.mutation.ClearSampleStorage()
	return su
}

// SetTubeCount sets the "tube_count" field.
func (su *SampleUpdate) SetTubeCount(i int) *SampleUpdate {
	su.mutation.ResetTubeCount()
	su.mutation.SetTubeCount(i)
	return su
}

// SetNillableTubeCount sets the "tube_count" field if the given value is not nil.
func (su *SampleUpdate) SetNillableTubeCount(i *int) *SampleUpdate {
	if i != nil {
		su.SetTubeCount(*i)
	}
	return su
}

// AddTubeCount adds i to the "tube_count" field.
func (su *SampleUpdate) AddTubeCount(i int) *SampleUpdate {
	su.mutation.AddTubeCount(i)
	return su
}

// ClearTubeCount clears the value of the "tube_count" field.
func (su *SampleUpdate) ClearTubeCount() *SampleUpdate {
	su.mutation.ClearTubeCount()
	return su
}

// SetOrderID sets the "order_id" field.
func (su *SampleUpdate) SetOrderID(i int) *SampleUpdate {
	su.mutation.SetOrderID(i)
	return su
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (su *SampleUpdate) SetNillableOrderID(i *int) *SampleUpdate {
	if i != nil {
		su.SetOrderID(*i)
	}
	return su
}

// ClearOrderID clears the value of the "order_id" field.
func (su *SampleUpdate) ClearOrderID() *SampleUpdate {
	su.mutation.ClearOrderID()
	return su
}

// SetPatientID sets the "patient_id" field.
func (su *SampleUpdate) SetPatientID(i int) *SampleUpdate {
	su.mutation.SetPatientID(i)
	return su
}

// SetNillablePatientID sets the "patient_id" field if the given value is not nil.
func (su *SampleUpdate) SetNillablePatientID(i *int) *SampleUpdate {
	if i != nil {
		su.SetPatientID(*i)
	}
	return su
}

// ClearPatientID clears the value of the "patient_id" field.
func (su *SampleUpdate) ClearPatientID() *SampleUpdate {
	su.mutation.ClearPatientID()
	return su
}

// SetSampleOrderMethod sets the "sample_order_method" field.
func (su *SampleUpdate) SetSampleOrderMethod(s string) *SampleUpdate {
	su.mutation.SetSampleOrderMethod(s)
	return su
}

// SetNillableSampleOrderMethod sets the "sample_order_method" field if the given value is not nil.
func (su *SampleUpdate) SetNillableSampleOrderMethod(s *string) *SampleUpdate {
	if s != nil {
		su.SetSampleOrderMethod(*s)
	}
	return su
}

// ClearSampleOrderMethod clears the value of the "sample_order_method" field.
func (su *SampleUpdate) ClearSampleOrderMethod() *SampleUpdate {
	su.mutation.ClearSampleOrderMethod()
	return su
}

// SetSampleCollectionTime sets the "sample_collection_time" field.
func (su *SampleUpdate) SetSampleCollectionTime(t time.Time) *SampleUpdate {
	su.mutation.SetSampleCollectionTime(t)
	return su
}

// SetNillableSampleCollectionTime sets the "sample_collection_time" field if the given value is not nil.
func (su *SampleUpdate) SetNillableSampleCollectionTime(t *time.Time) *SampleUpdate {
	if t != nil {
		su.SetSampleCollectionTime(*t)
	}
	return su
}

// ClearSampleCollectionTime clears the value of the "sample_collection_time" field.
func (su *SampleUpdate) ClearSampleCollectionTime() *SampleUpdate {
	su.mutation.ClearSampleCollectionTime()
	return su
}

// SetSampleReceivedTime sets the "sample_received_time" field.
func (su *SampleUpdate) SetSampleReceivedTime(t time.Time) *SampleUpdate {
	su.mutation.SetSampleReceivedTime(t)
	return su
}

// SetNillableSampleReceivedTime sets the "sample_received_time" field if the given value is not nil.
func (su *SampleUpdate) SetNillableSampleReceivedTime(t *time.Time) *SampleUpdate {
	if t != nil {
		su.SetSampleReceivedTime(*t)
	}
	return su
}

// ClearSampleReceivedTime clears the value of the "sample_received_time" field.
func (su *SampleUpdate) ClearSampleReceivedTime() *SampleUpdate {
	su.mutation.ClearSampleReceivedTime()
	return su
}

// SetSampleDescription sets the "sample_description" field.
func (su *SampleUpdate) SetSampleDescription(s string) *SampleUpdate {
	su.mutation.SetSampleDescription(s)
	return su
}

// SetNillableSampleDescription sets the "sample_description" field if the given value is not nil.
func (su *SampleUpdate) SetNillableSampleDescription(s *string) *SampleUpdate {
	if s != nil {
		su.SetSampleDescription(*s)
	}
	return su
}

// ClearSampleDescription clears the value of the "sample_description" field.
func (su *SampleUpdate) ClearSampleDescription() *SampleUpdate {
	su.mutation.ClearSampleDescription()
	return su
}

// SetDelayedHours sets the "delayed_hours" field.
func (su *SampleUpdate) SetDelayedHours(i int) *SampleUpdate {
	su.mutation.ResetDelayedHours()
	su.mutation.SetDelayedHours(i)
	return su
}

// SetNillableDelayedHours sets the "delayed_hours" field if the given value is not nil.
func (su *SampleUpdate) SetNillableDelayedHours(i *int) *SampleUpdate {
	if i != nil {
		su.SetDelayedHours(*i)
	}
	return su
}

// AddDelayedHours adds i to the "delayed_hours" field.
func (su *SampleUpdate) AddDelayedHours(i int) *SampleUpdate {
	su.mutation.AddDelayedHours(i)
	return su
}

// SetSampleReportTime sets the "sample_report_time" field.
func (su *SampleUpdate) SetSampleReportTime(t time.Time) *SampleUpdate {
	su.mutation.SetSampleReportTime(t)
	return su
}

// SetNillableSampleReportTime sets the "sample_report_time" field if the given value is not nil.
func (su *SampleUpdate) SetNillableSampleReportTime(t *time.Time) *SampleUpdate {
	if t != nil {
		su.SetSampleReportTime(*t)
	}
	return su
}

// ClearSampleReportTime clears the value of the "sample_report_time" field.
func (su *SampleUpdate) ClearSampleReportTime() *SampleUpdate {
	su.mutation.ClearSampleReportTime()
	return su
}

// SetInternalReceivedTime sets the "internal_received_time" field.
func (su *SampleUpdate) SetInternalReceivedTime(t time.Time) *SampleUpdate {
	su.mutation.SetInternalReceivedTime(t)
	return su
}

// SetNillableInternalReceivedTime sets the "internal_received_time" field if the given value is not nil.
func (su *SampleUpdate) SetNillableInternalReceivedTime(t *time.Time) *SampleUpdate {
	if t != nil {
		su.SetInternalReceivedTime(*t)
	}
	return su
}

// ClearInternalReceivedTime clears the value of the "internal_received_time" field.
func (su *SampleUpdate) ClearInternalReceivedTime() *SampleUpdate {
	su.mutation.ClearInternalReceivedTime()
	return su
}

// SetSampleReportType sets the "sample_report_type" field.
func (su *SampleUpdate) SetSampleReportType(s string) *SampleUpdate {
	su.mutation.SetSampleReportType(s)
	return su
}

// SetNillableSampleReportType sets the "sample_report_type" field if the given value is not nil.
func (su *SampleUpdate) SetNillableSampleReportType(s *string) *SampleUpdate {
	if s != nil {
		su.SetSampleReportType(*s)
	}
	return su
}

// ClearSampleReportType clears the value of the "sample_report_type" field.
func (su *SampleUpdate) ClearSampleReportType() *SampleUpdate {
	su.mutation.ClearSampleReportType()
	return su
}

// SetCustomerID sets the "customer_id" field.
func (su *SampleUpdate) SetCustomerID(i int) *SampleUpdate {
	su.mutation.SetCustomerID(i)
	return su
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (su *SampleUpdate) SetNillableCustomerID(i *int) *SampleUpdate {
	if i != nil {
		su.SetCustomerID(*i)
	}
	return su
}

// ClearCustomerID clears the value of the "customer_id" field.
func (su *SampleUpdate) ClearCustomerID() *SampleUpdate {
	su.mutation.ClearCustomerID()
	return su
}

// SetFastingHours sets the "fasting_hours" field.
func (su *SampleUpdate) SetFastingHours(f float64) *SampleUpdate {
	su.mutation.ResetFastingHours()
	su.mutation.SetFastingHours(f)
	return su
}

// SetNillableFastingHours sets the "fasting_hours" field if the given value is not nil.
func (su *SampleUpdate) SetNillableFastingHours(f *float64) *SampleUpdate {
	if f != nil {
		su.SetFastingHours(*f)
	}
	return su
}

// AddFastingHours adds f to the "fasting_hours" field.
func (su *SampleUpdate) AddFastingHours(f float64) *SampleUpdate {
	su.mutation.AddFastingHours(f)
	return su
}

// ClearFastingHours clears the value of the "fasting_hours" field.
func (su *SampleUpdate) ClearFastingHours() *SampleUpdate {
	su.mutation.ClearFastingHours()
	return su
}

// SetFastingStatus sets the "fasting_status" field.
func (su *SampleUpdate) SetFastingStatus(s string) *SampleUpdate {
	su.mutation.SetFastingStatus(s)
	return su
}

// SetNillableFastingStatus sets the "fasting_status" field if the given value is not nil.
func (su *SampleUpdate) SetNillableFastingStatus(s *string) *SampleUpdate {
	if s != nil {
		su.SetFastingStatus(*s)
	}
	return su
}

// ClearFastingStatus clears the value of the "fasting_status" field.
func (su *SampleUpdate) ClearFastingStatus() *SampleUpdate {
	su.mutation.ClearFastingStatus()
	return su
}

// SetOrder sets the "order" edge to the OrderInfo entity.
func (su *SampleUpdate) SetOrder(o *OrderInfo) *SampleUpdate {
	return su.SetOrderID(o.ID)
}

// AddTubeIDs adds the "tubes" edge to the Tube entity by IDs.
func (su *SampleUpdate) AddTubeIDs(ids ...int) *SampleUpdate {
	su.mutation.AddTubeIDs(ids...)
	return su
}

// AddTubes adds the "tubes" edges to the Tube entity.
func (su *SampleUpdate) AddTubes(t ...*Tube) *SampleUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTubeIDs(ids...)
}

// AddSampleReceiveRecordIDs adds the "sample_receive_records" edge to the TubeReceive entity by IDs.
func (su *SampleUpdate) AddSampleReceiveRecordIDs(ids ...int) *SampleUpdate {
	su.mutation.AddSampleReceiveRecordIDs(ids...)
	return su
}

// AddSampleReceiveRecords adds the "sample_receive_records" edges to the TubeReceive entity.
func (su *SampleUpdate) AddSampleReceiveRecords(t ...*TubeReceive) *SampleUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddSampleReceiveRecordIDs(ids...)
}

// AddSampleRequiredTubeIDs adds the "sample_required_tubes" edge to the TubeRequirement entity by IDs.
func (su *SampleUpdate) AddSampleRequiredTubeIDs(ids ...int) *SampleUpdate {
	su.mutation.AddSampleRequiredTubeIDs(ids...)
	return su
}

// AddSampleRequiredTubes adds the "sample_required_tubes" edges to the TubeRequirement entity.
func (su *SampleUpdate) AddSampleRequiredTubes(t ...*TubeRequirement) *SampleUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddSampleRequiredTubeIDs(ids...)
}

// SetPatient sets the "patient" edge to the Patient entity.
func (su *SampleUpdate) SetPatient(p *Patient) *SampleUpdate {
	return su.SetPatientID(p.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (su *SampleUpdate) SetCustomer(c *Customer) *SampleUpdate {
	return su.SetCustomerID(c.ID)
}

// Mutation returns the SampleMutation object of the builder.
func (su *SampleUpdate) Mutation() *SampleMutation {
	return su.mutation
}

// ClearOrder clears the "order" edge to the OrderInfo entity.
func (su *SampleUpdate) ClearOrder() *SampleUpdate {
	su.mutation.ClearOrder()
	return su
}

// ClearTubes clears all "tubes" edges to the Tube entity.
func (su *SampleUpdate) ClearTubes() *SampleUpdate {
	su.mutation.ClearTubes()
	return su
}

// RemoveTubeIDs removes the "tubes" edge to Tube entities by IDs.
func (su *SampleUpdate) RemoveTubeIDs(ids ...int) *SampleUpdate {
	su.mutation.RemoveTubeIDs(ids...)
	return su
}

// RemoveTubes removes "tubes" edges to Tube entities.
func (su *SampleUpdate) RemoveTubes(t ...*Tube) *SampleUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTubeIDs(ids...)
}

// ClearSampleReceiveRecords clears all "sample_receive_records" edges to the TubeReceive entity.
func (su *SampleUpdate) ClearSampleReceiveRecords() *SampleUpdate {
	su.mutation.ClearSampleReceiveRecords()
	return su
}

// RemoveSampleReceiveRecordIDs removes the "sample_receive_records" edge to TubeReceive entities by IDs.
func (su *SampleUpdate) RemoveSampleReceiveRecordIDs(ids ...int) *SampleUpdate {
	su.mutation.RemoveSampleReceiveRecordIDs(ids...)
	return su
}

// RemoveSampleReceiveRecords removes "sample_receive_records" edges to TubeReceive entities.
func (su *SampleUpdate) RemoveSampleReceiveRecords(t ...*TubeReceive) *SampleUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveSampleReceiveRecordIDs(ids...)
}

// ClearSampleRequiredTubes clears all "sample_required_tubes" edges to the TubeRequirement entity.
func (su *SampleUpdate) ClearSampleRequiredTubes() *SampleUpdate {
	su.mutation.ClearSampleRequiredTubes()
	return su
}

// RemoveSampleRequiredTubeIDs removes the "sample_required_tubes" edge to TubeRequirement entities by IDs.
func (su *SampleUpdate) RemoveSampleRequiredTubeIDs(ids ...int) *SampleUpdate {
	su.mutation.RemoveSampleRequiredTubeIDs(ids...)
	return su
}

// RemoveSampleRequiredTubes removes "sample_required_tubes" edges to TubeRequirement entities.
func (su *SampleUpdate) RemoveSampleRequiredTubes(t ...*TubeRequirement) *SampleUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveSampleRequiredTubeIDs(ids...)
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (su *SampleUpdate) ClearPatient() *SampleUpdate {
	su.mutation.ClearPatient()
	return su
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (su *SampleUpdate) ClearCustomer() *SampleUpdate {
	su.mutation.ClearCustomer()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SampleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SampleUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SampleUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SampleUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SampleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sample.Table, sample.Columns, sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.AccessionID(); ok {
		_spec.SetField(sample.FieldAccessionID, field.TypeString, value)
	}
	if value, ok := su.mutation.SampleStorage(); ok {
		_spec.SetField(sample.FieldSampleStorage, field.TypeString, value)
	}
	if su.mutation.SampleStorageCleared() {
		_spec.ClearField(sample.FieldSampleStorage, field.TypeString)
	}
	if value, ok := su.mutation.TubeCount(); ok {
		_spec.SetField(sample.FieldTubeCount, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedTubeCount(); ok {
		_spec.AddField(sample.FieldTubeCount, field.TypeInt, value)
	}
	if su.mutation.TubeCountCleared() {
		_spec.ClearField(sample.FieldTubeCount, field.TypeInt)
	}
	if value, ok := su.mutation.SampleOrderMethod(); ok {
		_spec.SetField(sample.FieldSampleOrderMethod, field.TypeString, value)
	}
	if su.mutation.SampleOrderMethodCleared() {
		_spec.ClearField(sample.FieldSampleOrderMethod, field.TypeString)
	}
	if value, ok := su.mutation.SampleCollectionTime(); ok {
		_spec.SetField(sample.FieldSampleCollectionTime, field.TypeTime, value)
	}
	if su.mutation.SampleCollectionTimeCleared() {
		_spec.ClearField(sample.FieldSampleCollectionTime, field.TypeTime)
	}
	if value, ok := su.mutation.SampleReceivedTime(); ok {
		_spec.SetField(sample.FieldSampleReceivedTime, field.TypeTime, value)
	}
	if su.mutation.SampleReceivedTimeCleared() {
		_spec.ClearField(sample.FieldSampleReceivedTime, field.TypeTime)
	}
	if value, ok := su.mutation.SampleDescription(); ok {
		_spec.SetField(sample.FieldSampleDescription, field.TypeString, value)
	}
	if su.mutation.SampleDescriptionCleared() {
		_spec.ClearField(sample.FieldSampleDescription, field.TypeString)
	}
	if value, ok := su.mutation.DelayedHours(); ok {
		_spec.SetField(sample.FieldDelayedHours, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedDelayedHours(); ok {
		_spec.AddField(sample.FieldDelayedHours, field.TypeInt, value)
	}
	if value, ok := su.mutation.SampleReportTime(); ok {
		_spec.SetField(sample.FieldSampleReportTime, field.TypeTime, value)
	}
	if su.mutation.SampleReportTimeCleared() {
		_spec.ClearField(sample.FieldSampleReportTime, field.TypeTime)
	}
	if value, ok := su.mutation.InternalReceivedTime(); ok {
		_spec.SetField(sample.FieldInternalReceivedTime, field.TypeTime, value)
	}
	if su.mutation.InternalReceivedTimeCleared() {
		_spec.ClearField(sample.FieldInternalReceivedTime, field.TypeTime)
	}
	if value, ok := su.mutation.SampleReportType(); ok {
		_spec.SetField(sample.FieldSampleReportType, field.TypeString, value)
	}
	if su.mutation.SampleReportTypeCleared() {
		_spec.ClearField(sample.FieldSampleReportType, field.TypeString)
	}
	if value, ok := su.mutation.FastingHours(); ok {
		_spec.SetField(sample.FieldFastingHours, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedFastingHours(); ok {
		_spec.AddField(sample.FieldFastingHours, field.TypeFloat64, value)
	}
	if su.mutation.FastingHoursCleared() {
		_spec.ClearField(sample.FieldFastingHours, field.TypeFloat64)
	}
	if value, ok := su.mutation.FastingStatus(); ok {
		_spec.SetField(sample.FieldFastingStatus, field.TypeString, value)
	}
	if su.mutation.FastingStatusCleared() {
		_spec.ClearField(sample.FieldFastingStatus, field.TypeString)
	}
	if su.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sample.OrderTable,
			Columns: []string{sample.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sample.OrderTable,
			Columns: []string{sample.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TubesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.TubesTable,
			Columns: []string{sample.TubesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tube.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTubesIDs(); len(nodes) > 0 && !su.mutation.TubesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.TubesTable,
			Columns: []string{sample.TubesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tube.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TubesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.TubesTable,
			Columns: []string{sample.TubesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tube.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SampleReceiveRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.SampleReceiveRecordsTable,
			Columns: []string{sample.SampleReceiveRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubereceive.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSampleReceiveRecordsIDs(); len(nodes) > 0 && !su.mutation.SampleReceiveRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.SampleReceiveRecordsTable,
			Columns: []string{sample.SampleReceiveRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubereceive.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SampleReceiveRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.SampleReceiveRecordsTable,
			Columns: []string{sample.SampleReceiveRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubereceive.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SampleRequiredTubesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.SampleRequiredTubesTable,
			Columns: []string{sample.SampleRequiredTubesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tuberequirement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSampleRequiredTubesIDs(); len(nodes) > 0 && !su.mutation.SampleRequiredTubesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.SampleRequiredTubesTable,
			Columns: []string{sample.SampleRequiredTubesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tuberequirement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SampleRequiredTubesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.SampleRequiredTubesTable,
			Columns: []string{sample.SampleRequiredTubesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tuberequirement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sample.PatientTable,
			Columns: []string{sample.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sample.PatientTable,
			Columns: []string{sample.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sample.CustomerTable,
			Columns: []string{sample.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sample.CustomerTable,
			Columns: []string{sample.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sample.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SampleUpdateOne is the builder for updating a single Sample entity.
type SampleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SampleMutation
}

// SetAccessionID sets the "accession_id" field.
func (suo *SampleUpdateOne) SetAccessionID(s string) *SampleUpdateOne {
	suo.mutation.SetAccessionID(s)
	return suo
}

// SetNillableAccessionID sets the "accession_id" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableAccessionID(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetAccessionID(*s)
	}
	return suo
}

// SetSampleStorage sets the "sample_storage" field.
func (suo *SampleUpdateOne) SetSampleStorage(s string) *SampleUpdateOne {
	suo.mutation.SetSampleStorage(s)
	return suo
}

// SetNillableSampleStorage sets the "sample_storage" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableSampleStorage(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetSampleStorage(*s)
	}
	return suo
}

// ClearSampleStorage clears the value of the "sample_storage" field.
func (suo *SampleUpdateOne) ClearSampleStorage() *SampleUpdateOne {
	suo.mutation.ClearSampleStorage()
	return suo
}

// SetTubeCount sets the "tube_count" field.
func (suo *SampleUpdateOne) SetTubeCount(i int) *SampleUpdateOne {
	suo.mutation.ResetTubeCount()
	suo.mutation.SetTubeCount(i)
	return suo
}

// SetNillableTubeCount sets the "tube_count" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableTubeCount(i *int) *SampleUpdateOne {
	if i != nil {
		suo.SetTubeCount(*i)
	}
	return suo
}

// AddTubeCount adds i to the "tube_count" field.
func (suo *SampleUpdateOne) AddTubeCount(i int) *SampleUpdateOne {
	suo.mutation.AddTubeCount(i)
	return suo
}

// ClearTubeCount clears the value of the "tube_count" field.
func (suo *SampleUpdateOne) ClearTubeCount() *SampleUpdateOne {
	suo.mutation.ClearTubeCount()
	return suo
}

// SetOrderID sets the "order_id" field.
func (suo *SampleUpdateOne) SetOrderID(i int) *SampleUpdateOne {
	suo.mutation.SetOrderID(i)
	return suo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableOrderID(i *int) *SampleUpdateOne {
	if i != nil {
		suo.SetOrderID(*i)
	}
	return suo
}

// ClearOrderID clears the value of the "order_id" field.
func (suo *SampleUpdateOne) ClearOrderID() *SampleUpdateOne {
	suo.mutation.ClearOrderID()
	return suo
}

// SetPatientID sets the "patient_id" field.
func (suo *SampleUpdateOne) SetPatientID(i int) *SampleUpdateOne {
	suo.mutation.SetPatientID(i)
	return suo
}

// SetNillablePatientID sets the "patient_id" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillablePatientID(i *int) *SampleUpdateOne {
	if i != nil {
		suo.SetPatientID(*i)
	}
	return suo
}

// ClearPatientID clears the value of the "patient_id" field.
func (suo *SampleUpdateOne) ClearPatientID() *SampleUpdateOne {
	suo.mutation.ClearPatientID()
	return suo
}

// SetSampleOrderMethod sets the "sample_order_method" field.
func (suo *SampleUpdateOne) SetSampleOrderMethod(s string) *SampleUpdateOne {
	suo.mutation.SetSampleOrderMethod(s)
	return suo
}

// SetNillableSampleOrderMethod sets the "sample_order_method" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableSampleOrderMethod(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetSampleOrderMethod(*s)
	}
	return suo
}

// ClearSampleOrderMethod clears the value of the "sample_order_method" field.
func (suo *SampleUpdateOne) ClearSampleOrderMethod() *SampleUpdateOne {
	suo.mutation.ClearSampleOrderMethod()
	return suo
}

// SetSampleCollectionTime sets the "sample_collection_time" field.
func (suo *SampleUpdateOne) SetSampleCollectionTime(t time.Time) *SampleUpdateOne {
	suo.mutation.SetSampleCollectionTime(t)
	return suo
}

// SetNillableSampleCollectionTime sets the "sample_collection_time" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableSampleCollectionTime(t *time.Time) *SampleUpdateOne {
	if t != nil {
		suo.SetSampleCollectionTime(*t)
	}
	return suo
}

// ClearSampleCollectionTime clears the value of the "sample_collection_time" field.
func (suo *SampleUpdateOne) ClearSampleCollectionTime() *SampleUpdateOne {
	suo.mutation.ClearSampleCollectionTime()
	return suo
}

// SetSampleReceivedTime sets the "sample_received_time" field.
func (suo *SampleUpdateOne) SetSampleReceivedTime(t time.Time) *SampleUpdateOne {
	suo.mutation.SetSampleReceivedTime(t)
	return suo
}

// SetNillableSampleReceivedTime sets the "sample_received_time" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableSampleReceivedTime(t *time.Time) *SampleUpdateOne {
	if t != nil {
		suo.SetSampleReceivedTime(*t)
	}
	return suo
}

// ClearSampleReceivedTime clears the value of the "sample_received_time" field.
func (suo *SampleUpdateOne) ClearSampleReceivedTime() *SampleUpdateOne {
	suo.mutation.ClearSampleReceivedTime()
	return suo
}

// SetSampleDescription sets the "sample_description" field.
func (suo *SampleUpdateOne) SetSampleDescription(s string) *SampleUpdateOne {
	suo.mutation.SetSampleDescription(s)
	return suo
}

// SetNillableSampleDescription sets the "sample_description" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableSampleDescription(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetSampleDescription(*s)
	}
	return suo
}

// ClearSampleDescription clears the value of the "sample_description" field.
func (suo *SampleUpdateOne) ClearSampleDescription() *SampleUpdateOne {
	suo.mutation.ClearSampleDescription()
	return suo
}

// SetDelayedHours sets the "delayed_hours" field.
func (suo *SampleUpdateOne) SetDelayedHours(i int) *SampleUpdateOne {
	suo.mutation.ResetDelayedHours()
	suo.mutation.SetDelayedHours(i)
	return suo
}

// SetNillableDelayedHours sets the "delayed_hours" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableDelayedHours(i *int) *SampleUpdateOne {
	if i != nil {
		suo.SetDelayedHours(*i)
	}
	return suo
}

// AddDelayedHours adds i to the "delayed_hours" field.
func (suo *SampleUpdateOne) AddDelayedHours(i int) *SampleUpdateOne {
	suo.mutation.AddDelayedHours(i)
	return suo
}

// SetSampleReportTime sets the "sample_report_time" field.
func (suo *SampleUpdateOne) SetSampleReportTime(t time.Time) *SampleUpdateOne {
	suo.mutation.SetSampleReportTime(t)
	return suo
}

// SetNillableSampleReportTime sets the "sample_report_time" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableSampleReportTime(t *time.Time) *SampleUpdateOne {
	if t != nil {
		suo.SetSampleReportTime(*t)
	}
	return suo
}

// ClearSampleReportTime clears the value of the "sample_report_time" field.
func (suo *SampleUpdateOne) ClearSampleReportTime() *SampleUpdateOne {
	suo.mutation.ClearSampleReportTime()
	return suo
}

// SetInternalReceivedTime sets the "internal_received_time" field.
func (suo *SampleUpdateOne) SetInternalReceivedTime(t time.Time) *SampleUpdateOne {
	suo.mutation.SetInternalReceivedTime(t)
	return suo
}

// SetNillableInternalReceivedTime sets the "internal_received_time" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableInternalReceivedTime(t *time.Time) *SampleUpdateOne {
	if t != nil {
		suo.SetInternalReceivedTime(*t)
	}
	return suo
}

// ClearInternalReceivedTime clears the value of the "internal_received_time" field.
func (suo *SampleUpdateOne) ClearInternalReceivedTime() *SampleUpdateOne {
	suo.mutation.ClearInternalReceivedTime()
	return suo
}

// SetSampleReportType sets the "sample_report_type" field.
func (suo *SampleUpdateOne) SetSampleReportType(s string) *SampleUpdateOne {
	suo.mutation.SetSampleReportType(s)
	return suo
}

// SetNillableSampleReportType sets the "sample_report_type" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableSampleReportType(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetSampleReportType(*s)
	}
	return suo
}

// ClearSampleReportType clears the value of the "sample_report_type" field.
func (suo *SampleUpdateOne) ClearSampleReportType() *SampleUpdateOne {
	suo.mutation.ClearSampleReportType()
	return suo
}

// SetCustomerID sets the "customer_id" field.
func (suo *SampleUpdateOne) SetCustomerID(i int) *SampleUpdateOne {
	suo.mutation.SetCustomerID(i)
	return suo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableCustomerID(i *int) *SampleUpdateOne {
	if i != nil {
		suo.SetCustomerID(*i)
	}
	return suo
}

// ClearCustomerID clears the value of the "customer_id" field.
func (suo *SampleUpdateOne) ClearCustomerID() *SampleUpdateOne {
	suo.mutation.ClearCustomerID()
	return suo
}

// SetFastingHours sets the "fasting_hours" field.
func (suo *SampleUpdateOne) SetFastingHours(f float64) *SampleUpdateOne {
	suo.mutation.ResetFastingHours()
	suo.mutation.SetFastingHours(f)
	return suo
}

// SetNillableFastingHours sets the "fasting_hours" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableFastingHours(f *float64) *SampleUpdateOne {
	if f != nil {
		suo.SetFastingHours(*f)
	}
	return suo
}

// AddFastingHours adds f to the "fasting_hours" field.
func (suo *SampleUpdateOne) AddFastingHours(f float64) *SampleUpdateOne {
	suo.mutation.AddFastingHours(f)
	return suo
}

// ClearFastingHours clears the value of the "fasting_hours" field.
func (suo *SampleUpdateOne) ClearFastingHours() *SampleUpdateOne {
	suo.mutation.ClearFastingHours()
	return suo
}

// SetFastingStatus sets the "fasting_status" field.
func (suo *SampleUpdateOne) SetFastingStatus(s string) *SampleUpdateOne {
	suo.mutation.SetFastingStatus(s)
	return suo
}

// SetNillableFastingStatus sets the "fasting_status" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableFastingStatus(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetFastingStatus(*s)
	}
	return suo
}

// ClearFastingStatus clears the value of the "fasting_status" field.
func (suo *SampleUpdateOne) ClearFastingStatus() *SampleUpdateOne {
	suo.mutation.ClearFastingStatus()
	return suo
}

// SetOrder sets the "order" edge to the OrderInfo entity.
func (suo *SampleUpdateOne) SetOrder(o *OrderInfo) *SampleUpdateOne {
	return suo.SetOrderID(o.ID)
}

// AddTubeIDs adds the "tubes" edge to the Tube entity by IDs.
func (suo *SampleUpdateOne) AddTubeIDs(ids ...int) *SampleUpdateOne {
	suo.mutation.AddTubeIDs(ids...)
	return suo
}

// AddTubes adds the "tubes" edges to the Tube entity.
func (suo *SampleUpdateOne) AddTubes(t ...*Tube) *SampleUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTubeIDs(ids...)
}

// AddSampleReceiveRecordIDs adds the "sample_receive_records" edge to the TubeReceive entity by IDs.
func (suo *SampleUpdateOne) AddSampleReceiveRecordIDs(ids ...int) *SampleUpdateOne {
	suo.mutation.AddSampleReceiveRecordIDs(ids...)
	return suo
}

// AddSampleReceiveRecords adds the "sample_receive_records" edges to the TubeReceive entity.
func (suo *SampleUpdateOne) AddSampleReceiveRecords(t ...*TubeReceive) *SampleUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddSampleReceiveRecordIDs(ids...)
}

// AddSampleRequiredTubeIDs adds the "sample_required_tubes" edge to the TubeRequirement entity by IDs.
func (suo *SampleUpdateOne) AddSampleRequiredTubeIDs(ids ...int) *SampleUpdateOne {
	suo.mutation.AddSampleRequiredTubeIDs(ids...)
	return suo
}

// AddSampleRequiredTubes adds the "sample_required_tubes" edges to the TubeRequirement entity.
func (suo *SampleUpdateOne) AddSampleRequiredTubes(t ...*TubeRequirement) *SampleUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddSampleRequiredTubeIDs(ids...)
}

// SetPatient sets the "patient" edge to the Patient entity.
func (suo *SampleUpdateOne) SetPatient(p *Patient) *SampleUpdateOne {
	return suo.SetPatientID(p.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (suo *SampleUpdateOne) SetCustomer(c *Customer) *SampleUpdateOne {
	return suo.SetCustomerID(c.ID)
}

// Mutation returns the SampleMutation object of the builder.
func (suo *SampleUpdateOne) Mutation() *SampleMutation {
	return suo.mutation
}

// ClearOrder clears the "order" edge to the OrderInfo entity.
func (suo *SampleUpdateOne) ClearOrder() *SampleUpdateOne {
	suo.mutation.ClearOrder()
	return suo
}

// ClearTubes clears all "tubes" edges to the Tube entity.
func (suo *SampleUpdateOne) ClearTubes() *SampleUpdateOne {
	suo.mutation.ClearTubes()
	return suo
}

// RemoveTubeIDs removes the "tubes" edge to Tube entities by IDs.
func (suo *SampleUpdateOne) RemoveTubeIDs(ids ...int) *SampleUpdateOne {
	suo.mutation.RemoveTubeIDs(ids...)
	return suo
}

// RemoveTubes removes "tubes" edges to Tube entities.
func (suo *SampleUpdateOne) RemoveTubes(t ...*Tube) *SampleUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTubeIDs(ids...)
}

// ClearSampleReceiveRecords clears all "sample_receive_records" edges to the TubeReceive entity.
func (suo *SampleUpdateOne) ClearSampleReceiveRecords() *SampleUpdateOne {
	suo.mutation.ClearSampleReceiveRecords()
	return suo
}

// RemoveSampleReceiveRecordIDs removes the "sample_receive_records" edge to TubeReceive entities by IDs.
func (suo *SampleUpdateOne) RemoveSampleReceiveRecordIDs(ids ...int) *SampleUpdateOne {
	suo.mutation.RemoveSampleReceiveRecordIDs(ids...)
	return suo
}

// RemoveSampleReceiveRecords removes "sample_receive_records" edges to TubeReceive entities.
func (suo *SampleUpdateOne) RemoveSampleReceiveRecords(t ...*TubeReceive) *SampleUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveSampleReceiveRecordIDs(ids...)
}

// ClearSampleRequiredTubes clears all "sample_required_tubes" edges to the TubeRequirement entity.
func (suo *SampleUpdateOne) ClearSampleRequiredTubes() *SampleUpdateOne {
	suo.mutation.ClearSampleRequiredTubes()
	return suo
}

// RemoveSampleRequiredTubeIDs removes the "sample_required_tubes" edge to TubeRequirement entities by IDs.
func (suo *SampleUpdateOne) RemoveSampleRequiredTubeIDs(ids ...int) *SampleUpdateOne {
	suo.mutation.RemoveSampleRequiredTubeIDs(ids...)
	return suo
}

// RemoveSampleRequiredTubes removes "sample_required_tubes" edges to TubeRequirement entities.
func (suo *SampleUpdateOne) RemoveSampleRequiredTubes(t ...*TubeRequirement) *SampleUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveSampleRequiredTubeIDs(ids...)
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (suo *SampleUpdateOne) ClearPatient() *SampleUpdateOne {
	suo.mutation.ClearPatient()
	return suo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (suo *SampleUpdateOne) ClearCustomer() *SampleUpdateOne {
	suo.mutation.ClearCustomer()
	return suo
}

// Where appends a list predicates to the SampleUpdate builder.
func (suo *SampleUpdateOne) Where(ps ...predicate.Sample) *SampleUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SampleUpdateOne) Select(field string, fields ...string) *SampleUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sample entity.
func (suo *SampleUpdateOne) Save(ctx context.Context) (*Sample, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SampleUpdateOne) SaveX(ctx context.Context) *Sample {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SampleUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SampleUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SampleUpdateOne) sqlSave(ctx context.Context) (_node *Sample, err error) {
	_spec := sqlgraph.NewUpdateSpec(sample.Table, sample.Columns, sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Sample.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sample.FieldID)
		for _, f := range fields {
			if !sample.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sample.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.AccessionID(); ok {
		_spec.SetField(sample.FieldAccessionID, field.TypeString, value)
	}
	if value, ok := suo.mutation.SampleStorage(); ok {
		_spec.SetField(sample.FieldSampleStorage, field.TypeString, value)
	}
	if suo.mutation.SampleStorageCleared() {
		_spec.ClearField(sample.FieldSampleStorage, field.TypeString)
	}
	if value, ok := suo.mutation.TubeCount(); ok {
		_spec.SetField(sample.FieldTubeCount, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedTubeCount(); ok {
		_spec.AddField(sample.FieldTubeCount, field.TypeInt, value)
	}
	if suo.mutation.TubeCountCleared() {
		_spec.ClearField(sample.FieldTubeCount, field.TypeInt)
	}
	if value, ok := suo.mutation.SampleOrderMethod(); ok {
		_spec.SetField(sample.FieldSampleOrderMethod, field.TypeString, value)
	}
	if suo.mutation.SampleOrderMethodCleared() {
		_spec.ClearField(sample.FieldSampleOrderMethod, field.TypeString)
	}
	if value, ok := suo.mutation.SampleCollectionTime(); ok {
		_spec.SetField(sample.FieldSampleCollectionTime, field.TypeTime, value)
	}
	if suo.mutation.SampleCollectionTimeCleared() {
		_spec.ClearField(sample.FieldSampleCollectionTime, field.TypeTime)
	}
	if value, ok := suo.mutation.SampleReceivedTime(); ok {
		_spec.SetField(sample.FieldSampleReceivedTime, field.TypeTime, value)
	}
	if suo.mutation.SampleReceivedTimeCleared() {
		_spec.ClearField(sample.FieldSampleReceivedTime, field.TypeTime)
	}
	if value, ok := suo.mutation.SampleDescription(); ok {
		_spec.SetField(sample.FieldSampleDescription, field.TypeString, value)
	}
	if suo.mutation.SampleDescriptionCleared() {
		_spec.ClearField(sample.FieldSampleDescription, field.TypeString)
	}
	if value, ok := suo.mutation.DelayedHours(); ok {
		_spec.SetField(sample.FieldDelayedHours, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedDelayedHours(); ok {
		_spec.AddField(sample.FieldDelayedHours, field.TypeInt, value)
	}
	if value, ok := suo.mutation.SampleReportTime(); ok {
		_spec.SetField(sample.FieldSampleReportTime, field.TypeTime, value)
	}
	if suo.mutation.SampleReportTimeCleared() {
		_spec.ClearField(sample.FieldSampleReportTime, field.TypeTime)
	}
	if value, ok := suo.mutation.InternalReceivedTime(); ok {
		_spec.SetField(sample.FieldInternalReceivedTime, field.TypeTime, value)
	}
	if suo.mutation.InternalReceivedTimeCleared() {
		_spec.ClearField(sample.FieldInternalReceivedTime, field.TypeTime)
	}
	if value, ok := suo.mutation.SampleReportType(); ok {
		_spec.SetField(sample.FieldSampleReportType, field.TypeString, value)
	}
	if suo.mutation.SampleReportTypeCleared() {
		_spec.ClearField(sample.FieldSampleReportType, field.TypeString)
	}
	if value, ok := suo.mutation.FastingHours(); ok {
		_spec.SetField(sample.FieldFastingHours, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedFastingHours(); ok {
		_spec.AddField(sample.FieldFastingHours, field.TypeFloat64, value)
	}
	if suo.mutation.FastingHoursCleared() {
		_spec.ClearField(sample.FieldFastingHours, field.TypeFloat64)
	}
	if value, ok := suo.mutation.FastingStatus(); ok {
		_spec.SetField(sample.FieldFastingStatus, field.TypeString, value)
	}
	if suo.mutation.FastingStatusCleared() {
		_spec.ClearField(sample.FieldFastingStatus, field.TypeString)
	}
	if suo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sample.OrderTable,
			Columns: []string{sample.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sample.OrderTable,
			Columns: []string{sample.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TubesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.TubesTable,
			Columns: []string{sample.TubesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tube.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTubesIDs(); len(nodes) > 0 && !suo.mutation.TubesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.TubesTable,
			Columns: []string{sample.TubesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tube.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TubesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.TubesTable,
			Columns: []string{sample.TubesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tube.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SampleReceiveRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.SampleReceiveRecordsTable,
			Columns: []string{sample.SampleReceiveRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubereceive.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSampleReceiveRecordsIDs(); len(nodes) > 0 && !suo.mutation.SampleReceiveRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.SampleReceiveRecordsTable,
			Columns: []string{sample.SampleReceiveRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubereceive.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SampleReceiveRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.SampleReceiveRecordsTable,
			Columns: []string{sample.SampleReceiveRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tubereceive.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SampleRequiredTubesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.SampleRequiredTubesTable,
			Columns: []string{sample.SampleRequiredTubesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tuberequirement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSampleRequiredTubesIDs(); len(nodes) > 0 && !suo.mutation.SampleRequiredTubesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.SampleRequiredTubesTable,
			Columns: []string{sample.SampleRequiredTubesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tuberequirement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SampleRequiredTubesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.SampleRequiredTubesTable,
			Columns: []string{sample.SampleRequiredTubesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tuberequirement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sample.PatientTable,
			Columns: []string{sample.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sample.PatientTable,
			Columns: []string{sample.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sample.CustomerTable,
			Columns: []string{sample.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sample.CustomerTable,
			Columns: []string{sample.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Sample{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sample.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
