// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/salesteam"
	"coresamples/ent/salestitle"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SalesTitleUpdate is the builder for updating SalesTitle entities.
type SalesTitleUpdate struct {
	config
	hooks    []Hook
	mutation *SalesTitleMutation
}

// Where appends a list predicates to the SalesTitleUpdate builder.
func (stu *SalesTitleUpdate) Where(ps ...predicate.SalesTitle) *SalesTitleUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetTitleName sets the "title_name" field.
func (stu *SalesTitleUpdate) SetTitleName(s string) *SalesTitleUpdate {
	stu.mutation.SetTitleName(s)
	return stu
}

// SetNillableTitleName sets the "title_name" field if the given value is not nil.
func (stu *SalesTitleUpdate) SetNillableTitleName(s *string) *SalesTitleUpdate {
	if s != nil {
		stu.SetTitleName(*s)
	}
	return stu
}

// SetOrder sets the "order" field.
func (stu *SalesTitleUpdate) SetOrder(i int) *SalesTitleUpdate {
	stu.mutation.ResetOrder()
	stu.mutation.SetOrder(i)
	return stu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (stu *SalesTitleUpdate) SetNillableOrder(i *int) *SalesTitleUpdate {
	if i != nil {
		stu.SetOrder(*i)
	}
	return stu
}

// AddOrder adds i to the "order" field.
func (stu *SalesTitleUpdate) AddOrder(i int) *SalesTitleUpdate {
	stu.mutation.AddOrder(i)
	return stu
}

// SetCreatedTime sets the "created_time" field.
func (stu *SalesTitleUpdate) SetCreatedTime(t time.Time) *SalesTitleUpdate {
	stu.mutation.SetCreatedTime(t)
	return stu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (stu *SalesTitleUpdate) SetNillableCreatedTime(t *time.Time) *SalesTitleUpdate {
	if t != nil {
		stu.SetCreatedTime(*t)
	}
	return stu
}

// SetUpdatedTime sets the "updated_time" field.
func (stu *SalesTitleUpdate) SetUpdatedTime(t time.Time) *SalesTitleUpdate {
	stu.mutation.SetUpdatedTime(t)
	return stu
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (stu *SalesTitleUpdate) ClearUpdatedTime() *SalesTitleUpdate {
	stu.mutation.ClearUpdatedTime()
	return stu
}

// AddSaleIDs adds the "sales" edge to the SalesTeam entity by IDs.
func (stu *SalesTitleUpdate) AddSaleIDs(ids ...int) *SalesTitleUpdate {
	stu.mutation.AddSaleIDs(ids...)
	return stu
}

// AddSales adds the "sales" edges to the SalesTeam entity.
func (stu *SalesTitleUpdate) AddSales(s ...*SalesTeam) *SalesTitleUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddSaleIDs(ids...)
}

// Mutation returns the SalesTitleMutation object of the builder.
func (stu *SalesTitleUpdate) Mutation() *SalesTitleMutation {
	return stu.mutation
}

// ClearSales clears all "sales" edges to the SalesTeam entity.
func (stu *SalesTitleUpdate) ClearSales() *SalesTitleUpdate {
	stu.mutation.ClearSales()
	return stu
}

// RemoveSaleIDs removes the "sales" edge to SalesTeam entities by IDs.
func (stu *SalesTitleUpdate) RemoveSaleIDs(ids ...int) *SalesTitleUpdate {
	stu.mutation.RemoveSaleIDs(ids...)
	return stu
}

// RemoveSales removes "sales" edges to SalesTeam entities.
func (stu *SalesTitleUpdate) RemoveSales(s ...*SalesTeam) *SalesTitleUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveSaleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SalesTitleUpdate) Save(ctx context.Context) (int, error) {
	stu.defaults()
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SalesTitleUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SalesTitleUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SalesTitleUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *SalesTitleUpdate) defaults() {
	if _, ok := stu.mutation.UpdatedTime(); !ok && !stu.mutation.UpdatedTimeCleared() {
		v := salestitle.UpdateDefaultUpdatedTime()
		stu.mutation.SetUpdatedTime(v)
	}
}

func (stu *SalesTitleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(salestitle.Table, salestitle.Columns, sqlgraph.NewFieldSpec(salestitle.FieldID, field.TypeInt))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.TitleName(); ok {
		_spec.SetField(salestitle.FieldTitleName, field.TypeString, value)
	}
	if value, ok := stu.mutation.Order(); ok {
		_spec.SetField(salestitle.FieldOrder, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedOrder(); ok {
		_spec.AddField(salestitle.FieldOrder, field.TypeInt, value)
	}
	if value, ok := stu.mutation.CreatedTime(); ok {
		_spec.SetField(salestitle.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := stu.mutation.UpdatedTime(); ok {
		_spec.SetField(salestitle.FieldUpdatedTime, field.TypeTime, value)
	}
	if stu.mutation.UpdatedTimeCleared() {
		_spec.ClearField(salestitle.FieldUpdatedTime, field.TypeTime)
	}
	if stu.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   salestitle.SalesTable,
			Columns: []string{salestitle.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedSalesIDs(); len(nodes) > 0 && !stu.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   salestitle.SalesTable,
			Columns: []string{salestitle.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   salestitle.SalesTable,
			Columns: []string{salestitle.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{salestitle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// SalesTitleUpdateOne is the builder for updating a single SalesTitle entity.
type SalesTitleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SalesTitleMutation
}

// SetTitleName sets the "title_name" field.
func (stuo *SalesTitleUpdateOne) SetTitleName(s string) *SalesTitleUpdateOne {
	stuo.mutation.SetTitleName(s)
	return stuo
}

// SetNillableTitleName sets the "title_name" field if the given value is not nil.
func (stuo *SalesTitleUpdateOne) SetNillableTitleName(s *string) *SalesTitleUpdateOne {
	if s != nil {
		stuo.SetTitleName(*s)
	}
	return stuo
}

// SetOrder sets the "order" field.
func (stuo *SalesTitleUpdateOne) SetOrder(i int) *SalesTitleUpdateOne {
	stuo.mutation.ResetOrder()
	stuo.mutation.SetOrder(i)
	return stuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (stuo *SalesTitleUpdateOne) SetNillableOrder(i *int) *SalesTitleUpdateOne {
	if i != nil {
		stuo.SetOrder(*i)
	}
	return stuo
}

// AddOrder adds i to the "order" field.
func (stuo *SalesTitleUpdateOne) AddOrder(i int) *SalesTitleUpdateOne {
	stuo.mutation.AddOrder(i)
	return stuo
}

// SetCreatedTime sets the "created_time" field.
func (stuo *SalesTitleUpdateOne) SetCreatedTime(t time.Time) *SalesTitleUpdateOne {
	stuo.mutation.SetCreatedTime(t)
	return stuo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (stuo *SalesTitleUpdateOne) SetNillableCreatedTime(t *time.Time) *SalesTitleUpdateOne {
	if t != nil {
		stuo.SetCreatedTime(*t)
	}
	return stuo
}

// SetUpdatedTime sets the "updated_time" field.
func (stuo *SalesTitleUpdateOne) SetUpdatedTime(t time.Time) *SalesTitleUpdateOne {
	stuo.mutation.SetUpdatedTime(t)
	return stuo
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (stuo *SalesTitleUpdateOne) ClearUpdatedTime() *SalesTitleUpdateOne {
	stuo.mutation.ClearUpdatedTime()
	return stuo
}

// AddSaleIDs adds the "sales" edge to the SalesTeam entity by IDs.
func (stuo *SalesTitleUpdateOne) AddSaleIDs(ids ...int) *SalesTitleUpdateOne {
	stuo.mutation.AddSaleIDs(ids...)
	return stuo
}

// AddSales adds the "sales" edges to the SalesTeam entity.
func (stuo *SalesTitleUpdateOne) AddSales(s ...*SalesTeam) *SalesTitleUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddSaleIDs(ids...)
}

// Mutation returns the SalesTitleMutation object of the builder.
func (stuo *SalesTitleUpdateOne) Mutation() *SalesTitleMutation {
	return stuo.mutation
}

// ClearSales clears all "sales" edges to the SalesTeam entity.
func (stuo *SalesTitleUpdateOne) ClearSales() *SalesTitleUpdateOne {
	stuo.mutation.ClearSales()
	return stuo
}

// RemoveSaleIDs removes the "sales" edge to SalesTeam entities by IDs.
func (stuo *SalesTitleUpdateOne) RemoveSaleIDs(ids ...int) *SalesTitleUpdateOne {
	stuo.mutation.RemoveSaleIDs(ids...)
	return stuo
}

// RemoveSales removes "sales" edges to SalesTeam entities.
func (stuo *SalesTitleUpdateOne) RemoveSales(s ...*SalesTeam) *SalesTitleUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveSaleIDs(ids...)
}

// Where appends a list predicates to the SalesTitleUpdate builder.
func (stuo *SalesTitleUpdateOne) Where(ps ...predicate.SalesTitle) *SalesTitleUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SalesTitleUpdateOne) Select(field string, fields ...string) *SalesTitleUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SalesTitle entity.
func (stuo *SalesTitleUpdateOne) Save(ctx context.Context) (*SalesTitle, error) {
	stuo.defaults()
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SalesTitleUpdateOne) SaveX(ctx context.Context) *SalesTitle {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SalesTitleUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SalesTitleUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *SalesTitleUpdateOne) defaults() {
	if _, ok := stuo.mutation.UpdatedTime(); !ok && !stuo.mutation.UpdatedTimeCleared() {
		v := salestitle.UpdateDefaultUpdatedTime()
		stuo.mutation.SetUpdatedTime(v)
	}
}

func (stuo *SalesTitleUpdateOne) sqlSave(ctx context.Context) (_node *SalesTitle, err error) {
	_spec := sqlgraph.NewUpdateSpec(salestitle.Table, salestitle.Columns, sqlgraph.NewFieldSpec(salestitle.FieldID, field.TypeInt))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SalesTitle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, salestitle.FieldID)
		for _, f := range fields {
			if !salestitle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != salestitle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.TitleName(); ok {
		_spec.SetField(salestitle.FieldTitleName, field.TypeString, value)
	}
	if value, ok := stuo.mutation.Order(); ok {
		_spec.SetField(salestitle.FieldOrder, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedOrder(); ok {
		_spec.AddField(salestitle.FieldOrder, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.CreatedTime(); ok {
		_spec.SetField(salestitle.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := stuo.mutation.UpdatedTime(); ok {
		_spec.SetField(salestitle.FieldUpdatedTime, field.TypeTime, value)
	}
	if stuo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(salestitle.FieldUpdatedTime, field.TypeTime)
	}
	if stuo.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   salestitle.SalesTable,
			Columns: []string{salestitle.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedSalesIDs(); len(nodes) > 0 && !stuo.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   salestitle.SalesTable,
			Columns: []string{salestitle.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   salestitle.SalesTable,
			Columns: []string{salestitle.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salesteam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SalesTitle{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{salestitle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
