// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/salesterritory"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SalesTerritoryCreate is the builder for creating a SalesTerritory entity.
type SalesTerritoryCreate struct {
	config
	mutation *SalesTerritoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSales sets the "sales" field.
func (stc *SalesTerritoryCreate) SetSales(s string) *SalesTerritoryCreate {
	stc.mutation.SetSales(s)
	return stc
}

// SetState sets the "state" field.
func (stc *SalesTerritoryCreate) SetState(s string) *SalesTerritoryCreate {
	stc.mutation.SetState(s)
	return stc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (stc *SalesTerritoryCreate) SetNillableState(s *string) *SalesTerritoryCreate {
	if s != nil {
		stc.SetState(*s)
	}
	return stc
}

// SetZipcode sets the "zipcode" field.
func (stc *SalesTerritoryCreate) SetZipcode(i int) *SalesTerritoryCreate {
	stc.mutation.SetZipcode(i)
	return stc
}

// SetNillableZipcode sets the "zipcode" field if the given value is not nil.
func (stc *SalesTerritoryCreate) SetNillableZipcode(i *int) *SalesTerritoryCreate {
	if i != nil {
		stc.SetZipcode(*i)
	}
	return stc
}

// SetCountry sets the "country" field.
func (stc *SalesTerritoryCreate) SetCountry(s string) *SalesTerritoryCreate {
	stc.mutation.SetCountry(s)
	return stc
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (stc *SalesTerritoryCreate) SetNillableCountry(s *string) *SalesTerritoryCreate {
	if s != nil {
		stc.SetCountry(*s)
	}
	return stc
}

// SetUpdatedAt sets the "updatedAt" field.
func (stc *SalesTerritoryCreate) SetUpdatedAt(t time.Time) *SalesTerritoryCreate {
	stc.mutation.SetUpdatedAt(t)
	return stc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (stc *SalesTerritoryCreate) SetNillableUpdatedAt(t *time.Time) *SalesTerritoryCreate {
	if t != nil {
		stc.SetUpdatedAt(*t)
	}
	return stc
}

// Mutation returns the SalesTerritoryMutation object of the builder.
func (stc *SalesTerritoryCreate) Mutation() *SalesTerritoryMutation {
	return stc.mutation
}

// Save creates the SalesTerritory in the database.
func (stc *SalesTerritoryCreate) Save(ctx context.Context) (*SalesTerritory, error) {
	return withHooks(ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *SalesTerritoryCreate) SaveX(ctx context.Context) *SalesTerritory {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *SalesTerritoryCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *SalesTerritoryCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *SalesTerritoryCreate) check() error {
	if _, ok := stc.mutation.Sales(); !ok {
		return &ValidationError{Name: "sales", err: errors.New(`ent: missing required field "SalesTerritory.sales"`)}
	}
	return nil
}

func (stc *SalesTerritoryCreate) sqlSave(ctx context.Context) (*SalesTerritory, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *SalesTerritoryCreate) createSpec() (*SalesTerritory, *sqlgraph.CreateSpec) {
	var (
		_node = &SalesTerritory{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(salesterritory.Table, sqlgraph.NewFieldSpec(salesterritory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = stc.conflict
	if value, ok := stc.mutation.Sales(); ok {
		_spec.SetField(salesterritory.FieldSales, field.TypeString, value)
		_node.Sales = value
	}
	if value, ok := stc.mutation.State(); ok {
		_spec.SetField(salesterritory.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := stc.mutation.Zipcode(); ok {
		_spec.SetField(salesterritory.FieldZipcode, field.TypeInt, value)
		_node.Zipcode = value
	}
	if value, ok := stc.mutation.Country(); ok {
		_spec.SetField(salesterritory.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := stc.mutation.UpdatedAt(); ok {
		_spec.SetField(salesterritory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SalesTerritory.Create().
//		SetSales(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SalesTerritoryUpsert) {
//			SetSales(v+v).
//		}).
//		Exec(ctx)
func (stc *SalesTerritoryCreate) OnConflict(opts ...sql.ConflictOption) *SalesTerritoryUpsertOne {
	stc.conflict = opts
	return &SalesTerritoryUpsertOne{
		create: stc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SalesTerritory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stc *SalesTerritoryCreate) OnConflictColumns(columns ...string) *SalesTerritoryUpsertOne {
	stc.conflict = append(stc.conflict, sql.ConflictColumns(columns...))
	return &SalesTerritoryUpsertOne{
		create: stc,
	}
}

type (
	// SalesTerritoryUpsertOne is the builder for "upsert"-ing
	//  one SalesTerritory node.
	SalesTerritoryUpsertOne struct {
		create *SalesTerritoryCreate
	}

	// SalesTerritoryUpsert is the "OnConflict" setter.
	SalesTerritoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetSales sets the "sales" field.
func (u *SalesTerritoryUpsert) SetSales(v string) *SalesTerritoryUpsert {
	u.Set(salesterritory.FieldSales, v)
	return u
}

// UpdateSales sets the "sales" field to the value that was provided on create.
func (u *SalesTerritoryUpsert) UpdateSales() *SalesTerritoryUpsert {
	u.SetExcluded(salesterritory.FieldSales)
	return u
}

// SetState sets the "state" field.
func (u *SalesTerritoryUpsert) SetState(v string) *SalesTerritoryUpsert {
	u.Set(salesterritory.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *SalesTerritoryUpsert) UpdateState() *SalesTerritoryUpsert {
	u.SetExcluded(salesterritory.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *SalesTerritoryUpsert) ClearState() *SalesTerritoryUpsert {
	u.SetNull(salesterritory.FieldState)
	return u
}

// SetZipcode sets the "zipcode" field.
func (u *SalesTerritoryUpsert) SetZipcode(v int) *SalesTerritoryUpsert {
	u.Set(salesterritory.FieldZipcode, v)
	return u
}

// UpdateZipcode sets the "zipcode" field to the value that was provided on create.
func (u *SalesTerritoryUpsert) UpdateZipcode() *SalesTerritoryUpsert {
	u.SetExcluded(salesterritory.FieldZipcode)
	return u
}

// AddZipcode adds v to the "zipcode" field.
func (u *SalesTerritoryUpsert) AddZipcode(v int) *SalesTerritoryUpsert {
	u.Add(salesterritory.FieldZipcode, v)
	return u
}

// ClearZipcode clears the value of the "zipcode" field.
func (u *SalesTerritoryUpsert) ClearZipcode() *SalesTerritoryUpsert {
	u.SetNull(salesterritory.FieldZipcode)
	return u
}

// SetCountry sets the "country" field.
func (u *SalesTerritoryUpsert) SetCountry(v string) *SalesTerritoryUpsert {
	u.Set(salesterritory.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *SalesTerritoryUpsert) UpdateCountry() *SalesTerritoryUpsert {
	u.SetExcluded(salesterritory.FieldCountry)
	return u
}

// ClearCountry clears the value of the "country" field.
func (u *SalesTerritoryUpsert) ClearCountry() *SalesTerritoryUpsert {
	u.SetNull(salesterritory.FieldCountry)
	return u
}

// SetUpdatedAt sets the "updatedAt" field.
func (u *SalesTerritoryUpsert) SetUpdatedAt(v time.Time) *SalesTerritoryUpsert {
	u.Set(salesterritory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updatedAt" field to the value that was provided on create.
func (u *SalesTerritoryUpsert) UpdateUpdatedAt() *SalesTerritoryUpsert {
	u.SetExcluded(salesterritory.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updatedAt" field.
func (u *SalesTerritoryUpsert) ClearUpdatedAt() *SalesTerritoryUpsert {
	u.SetNull(salesterritory.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SalesTerritory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SalesTerritoryUpsertOne) UpdateNewValues() *SalesTerritoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SalesTerritory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SalesTerritoryUpsertOne) Ignore() *SalesTerritoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SalesTerritoryUpsertOne) DoNothing() *SalesTerritoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SalesTerritoryCreate.OnConflict
// documentation for more info.
func (u *SalesTerritoryUpsertOne) Update(set func(*SalesTerritoryUpsert)) *SalesTerritoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SalesTerritoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetSales sets the "sales" field.
func (u *SalesTerritoryUpsertOne) SetSales(v string) *SalesTerritoryUpsertOne {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.SetSales(v)
	})
}

// UpdateSales sets the "sales" field to the value that was provided on create.
func (u *SalesTerritoryUpsertOne) UpdateSales() *SalesTerritoryUpsertOne {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.UpdateSales()
	})
}

// SetState sets the "state" field.
func (u *SalesTerritoryUpsertOne) SetState(v string) *SalesTerritoryUpsertOne {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *SalesTerritoryUpsertOne) UpdateState() *SalesTerritoryUpsertOne {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *SalesTerritoryUpsertOne) ClearState() *SalesTerritoryUpsertOne {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.ClearState()
	})
}

// SetZipcode sets the "zipcode" field.
func (u *SalesTerritoryUpsertOne) SetZipcode(v int) *SalesTerritoryUpsertOne {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.SetZipcode(v)
	})
}

// AddZipcode adds v to the "zipcode" field.
func (u *SalesTerritoryUpsertOne) AddZipcode(v int) *SalesTerritoryUpsertOne {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.AddZipcode(v)
	})
}

// UpdateZipcode sets the "zipcode" field to the value that was provided on create.
func (u *SalesTerritoryUpsertOne) UpdateZipcode() *SalesTerritoryUpsertOne {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.UpdateZipcode()
	})
}

// ClearZipcode clears the value of the "zipcode" field.
func (u *SalesTerritoryUpsertOne) ClearZipcode() *SalesTerritoryUpsertOne {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.ClearZipcode()
	})
}

// SetCountry sets the "country" field.
func (u *SalesTerritoryUpsertOne) SetCountry(v string) *SalesTerritoryUpsertOne {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *SalesTerritoryUpsertOne) UpdateCountry() *SalesTerritoryUpsertOne {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *SalesTerritoryUpsertOne) ClearCountry() *SalesTerritoryUpsertOne {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.ClearCountry()
	})
}

// SetUpdatedAt sets the "updatedAt" field.
func (u *SalesTerritoryUpsertOne) SetUpdatedAt(v time.Time) *SalesTerritoryUpsertOne {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updatedAt" field to the value that was provided on create.
func (u *SalesTerritoryUpsertOne) UpdateUpdatedAt() *SalesTerritoryUpsertOne {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updatedAt" field.
func (u *SalesTerritoryUpsertOne) ClearUpdatedAt() *SalesTerritoryUpsertOne {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.ClearUpdatedAt()
	})
}

// Exec executes the query.
func (u *SalesTerritoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SalesTerritoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SalesTerritoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SalesTerritoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SalesTerritoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SalesTerritoryCreateBulk is the builder for creating many SalesTerritory entities in bulk.
type SalesTerritoryCreateBulk struct {
	config
	err      error
	builders []*SalesTerritoryCreate
	conflict []sql.ConflictOption
}

// Save creates the SalesTerritory entities in the database.
func (stcb *SalesTerritoryCreateBulk) Save(ctx context.Context) ([]*SalesTerritory, error) {
	if stcb.err != nil {
		return nil, stcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*SalesTerritory, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SalesTerritoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = stcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *SalesTerritoryCreateBulk) SaveX(ctx context.Context) []*SalesTerritory {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *SalesTerritoryCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *SalesTerritoryCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SalesTerritory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SalesTerritoryUpsert) {
//			SetSales(v+v).
//		}).
//		Exec(ctx)
func (stcb *SalesTerritoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *SalesTerritoryUpsertBulk {
	stcb.conflict = opts
	return &SalesTerritoryUpsertBulk{
		create: stcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SalesTerritory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stcb *SalesTerritoryCreateBulk) OnConflictColumns(columns ...string) *SalesTerritoryUpsertBulk {
	stcb.conflict = append(stcb.conflict, sql.ConflictColumns(columns...))
	return &SalesTerritoryUpsertBulk{
		create: stcb,
	}
}

// SalesTerritoryUpsertBulk is the builder for "upsert"-ing
// a bulk of SalesTerritory nodes.
type SalesTerritoryUpsertBulk struct {
	create *SalesTerritoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SalesTerritory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SalesTerritoryUpsertBulk) UpdateNewValues() *SalesTerritoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SalesTerritory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SalesTerritoryUpsertBulk) Ignore() *SalesTerritoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SalesTerritoryUpsertBulk) DoNothing() *SalesTerritoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SalesTerritoryCreateBulk.OnConflict
// documentation for more info.
func (u *SalesTerritoryUpsertBulk) Update(set func(*SalesTerritoryUpsert)) *SalesTerritoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SalesTerritoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetSales sets the "sales" field.
func (u *SalesTerritoryUpsertBulk) SetSales(v string) *SalesTerritoryUpsertBulk {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.SetSales(v)
	})
}

// UpdateSales sets the "sales" field to the value that was provided on create.
func (u *SalesTerritoryUpsertBulk) UpdateSales() *SalesTerritoryUpsertBulk {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.UpdateSales()
	})
}

// SetState sets the "state" field.
func (u *SalesTerritoryUpsertBulk) SetState(v string) *SalesTerritoryUpsertBulk {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *SalesTerritoryUpsertBulk) UpdateState() *SalesTerritoryUpsertBulk {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *SalesTerritoryUpsertBulk) ClearState() *SalesTerritoryUpsertBulk {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.ClearState()
	})
}

// SetZipcode sets the "zipcode" field.
func (u *SalesTerritoryUpsertBulk) SetZipcode(v int) *SalesTerritoryUpsertBulk {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.SetZipcode(v)
	})
}

// AddZipcode adds v to the "zipcode" field.
func (u *SalesTerritoryUpsertBulk) AddZipcode(v int) *SalesTerritoryUpsertBulk {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.AddZipcode(v)
	})
}

// UpdateZipcode sets the "zipcode" field to the value that was provided on create.
func (u *SalesTerritoryUpsertBulk) UpdateZipcode() *SalesTerritoryUpsertBulk {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.UpdateZipcode()
	})
}

// ClearZipcode clears the value of the "zipcode" field.
func (u *SalesTerritoryUpsertBulk) ClearZipcode() *SalesTerritoryUpsertBulk {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.ClearZipcode()
	})
}

// SetCountry sets the "country" field.
func (u *SalesTerritoryUpsertBulk) SetCountry(v string) *SalesTerritoryUpsertBulk {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *SalesTerritoryUpsertBulk) UpdateCountry() *SalesTerritoryUpsertBulk {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *SalesTerritoryUpsertBulk) ClearCountry() *SalesTerritoryUpsertBulk {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.ClearCountry()
	})
}

// SetUpdatedAt sets the "updatedAt" field.
func (u *SalesTerritoryUpsertBulk) SetUpdatedAt(v time.Time) *SalesTerritoryUpsertBulk {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updatedAt" field to the value that was provided on create.
func (u *SalesTerritoryUpsertBulk) UpdateUpdatedAt() *SalesTerritoryUpsertBulk {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updatedAt" field.
func (u *SalesTerritoryUpsertBulk) ClearUpdatedAt() *SalesTerritoryUpsertBulk {
	return u.Update(func(s *SalesTerritoryUpsert) {
		s.ClearUpdatedAt()
	})
}

// Exec executes the query.
func (u *SalesTerritoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SalesTerritoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SalesTerritoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SalesTerritoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
