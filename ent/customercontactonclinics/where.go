// Code generated by ent, DO NOT EDIT.

package customercontactonclinics

import (
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldLTE(FieldID, id))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldEQ(FieldCustomerID, v))
}

// ClinicID applies equality check predicate on the "clinic_id" field. It's identical to ClinicIDEQ.
func ClinicID(v int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldEQ(FieldClinicID, v))
}

// ContactID applies equality check predicate on the "contact_id" field. It's identical to ContactIDEQ.
func ContactID(v int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldEQ(FieldContactID, v))
}

// ContactType applies equality check predicate on the "contact_type" field. It's identical to ContactTypeEQ.
func ContactType(v string) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldEQ(FieldContactType, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldNotIn(FieldCustomerID, vs...))
}

// ClinicIDEQ applies the EQ predicate on the "clinic_id" field.
func ClinicIDEQ(v int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldEQ(FieldClinicID, v))
}

// ClinicIDNEQ applies the NEQ predicate on the "clinic_id" field.
func ClinicIDNEQ(v int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldNEQ(FieldClinicID, v))
}

// ClinicIDIn applies the In predicate on the "clinic_id" field.
func ClinicIDIn(vs ...int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldIn(FieldClinicID, vs...))
}

// ClinicIDNotIn applies the NotIn predicate on the "clinic_id" field.
func ClinicIDNotIn(vs ...int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldNotIn(FieldClinicID, vs...))
}

// ContactIDEQ applies the EQ predicate on the "contact_id" field.
func ContactIDEQ(v int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldEQ(FieldContactID, v))
}

// ContactIDNEQ applies the NEQ predicate on the "contact_id" field.
func ContactIDNEQ(v int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldNEQ(FieldContactID, v))
}

// ContactIDIn applies the In predicate on the "contact_id" field.
func ContactIDIn(vs ...int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldIn(FieldContactID, vs...))
}

// ContactIDNotIn applies the NotIn predicate on the "contact_id" field.
func ContactIDNotIn(vs ...int) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldNotIn(FieldContactID, vs...))
}

// ContactTypeEQ applies the EQ predicate on the "contact_type" field.
func ContactTypeEQ(v string) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldEQ(FieldContactType, v))
}

// ContactTypeNEQ applies the NEQ predicate on the "contact_type" field.
func ContactTypeNEQ(v string) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldNEQ(FieldContactType, v))
}

// ContactTypeIn applies the In predicate on the "contact_type" field.
func ContactTypeIn(vs ...string) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldIn(FieldContactType, vs...))
}

// ContactTypeNotIn applies the NotIn predicate on the "contact_type" field.
func ContactTypeNotIn(vs ...string) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldNotIn(FieldContactType, vs...))
}

// ContactTypeGT applies the GT predicate on the "contact_type" field.
func ContactTypeGT(v string) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldGT(FieldContactType, v))
}

// ContactTypeGTE applies the GTE predicate on the "contact_type" field.
func ContactTypeGTE(v string) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldGTE(FieldContactType, v))
}

// ContactTypeLT applies the LT predicate on the "contact_type" field.
func ContactTypeLT(v string) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldLT(FieldContactType, v))
}

// ContactTypeLTE applies the LTE predicate on the "contact_type" field.
func ContactTypeLTE(v string) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldLTE(FieldContactType, v))
}

// ContactTypeContains applies the Contains predicate on the "contact_type" field.
func ContactTypeContains(v string) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldContains(FieldContactType, v))
}

// ContactTypeHasPrefix applies the HasPrefix predicate on the "contact_type" field.
func ContactTypeHasPrefix(v string) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldHasPrefix(FieldContactType, v))
}

// ContactTypeHasSuffix applies the HasSuffix predicate on the "contact_type" field.
func ContactTypeHasSuffix(v string) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldHasSuffix(FieldContactType, v))
}

// ContactTypeIsNil applies the IsNil predicate on the "contact_type" field.
func ContactTypeIsNil() predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldIsNull(FieldContactType))
}

// ContactTypeNotNil applies the NotNil predicate on the "contact_type" field.
func ContactTypeNotNil() predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldNotNull(FieldContactType))
}

// ContactTypeEqualFold applies the EqualFold predicate on the "contact_type" field.
func ContactTypeEqualFold(v string) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldEqualFold(FieldContactType, v))
}

// ContactTypeContainsFold applies the ContainsFold predicate on the "contact_type" field.
func ContactTypeContainsFold(v string) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.FieldContainsFold(FieldContactType, v))
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClinic applies the HasEdge predicate on the "clinic" edge.
func HasClinic() predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicWith applies the HasEdge predicate on the "clinic" edge with a given conditions (other predicates).
func HasClinicWith(preds ...predicate.Clinic) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(func(s *sql.Selector) {
		step := newClinicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContact applies the HasEdge predicate on the "contact" edge.
func HasContact() predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ContactTable, ContactColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContactWith applies the HasEdge predicate on the "contact" edge with a given conditions (other predicates).
func HasContactWith(preds ...predicate.Contact) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(func(s *sql.Selector) {
		step := newContactStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CustomerContactOnClinics) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CustomerContactOnClinics) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CustomerContactOnClinics) predicate.CustomerContactOnClinics {
	return predicate.CustomerContactOnClinics(sql.NotPredicates(p))
}
