// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/testlist"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestListUpdate is the builder for updating TestList entities.
type TestListUpdate struct {
	config
	hooks    []Hook
	mutation *TestListMutation
}

// Where appends a list predicates to the TestListUpdate builder.
func (tlu *TestListUpdate) Where(ps ...predicate.TestList) *TestListUpdate {
	tlu.mutation.Where(ps...)
	return tlu
}

// SetTestInstrument sets the "test_instrument" field.
func (tlu *TestListUpdate) SetTestInstrument(ti testlist.TestInstrument) *TestListUpdate {
	tlu.mutation.SetTestInstrument(ti)
	return tlu
}

// SetNillableTestInstrument sets the "test_instrument" field if the given value is not nil.
func (tlu *TestListUpdate) SetNillableTestInstrument(ti *testlist.TestInstrument) *TestListUpdate {
	if ti != nil {
		tlu.SetTestInstrument(*ti)
	}
	return tlu
}

// ClearTestInstrument clears the value of the "test_instrument" field.
func (tlu *TestListUpdate) ClearTestInstrument() *TestListUpdate {
	tlu.mutation.ClearTestInstrument()
	return tlu
}

// SetTubeType sets the "tube_type" field.
func (tlu *TestListUpdate) SetTubeType(tt testlist.TubeType) *TestListUpdate {
	tlu.mutation.SetTubeType(tt)
	return tlu
}

// SetNillableTubeType sets the "tube_type" field if the given value is not nil.
func (tlu *TestListUpdate) SetNillableTubeType(tt *testlist.TubeType) *TestListUpdate {
	if tt != nil {
		tlu.SetTubeType(*tt)
	}
	return tlu
}

// SetDIGroupName sets the "DI_group_name" field.
func (tlu *TestListUpdate) SetDIGroupName(s string) *TestListUpdate {
	tlu.mutation.SetDIGroupName(s)
	return tlu
}

// SetNillableDIGroupName sets the "DI_group_name" field if the given value is not nil.
func (tlu *TestListUpdate) SetNillableDIGroupName(s *string) *TestListUpdate {
	if s != nil {
		tlu.SetDIGroupName(*s)
	}
	return tlu
}

// ClearDIGroupName clears the value of the "DI_group_name" field.
func (tlu *TestListUpdate) ClearDIGroupName() *TestListUpdate {
	tlu.mutation.ClearDIGroupName()
	return tlu
}

// SetVolumeRequired sets the "volume_required" field.
func (tlu *TestListUpdate) SetVolumeRequired(f float64) *TestListUpdate {
	tlu.mutation.ResetVolumeRequired()
	tlu.mutation.SetVolumeRequired(f)
	return tlu
}

// SetNillableVolumeRequired sets the "volume_required" field if the given value is not nil.
func (tlu *TestListUpdate) SetNillableVolumeRequired(f *float64) *TestListUpdate {
	if f != nil {
		tlu.SetVolumeRequired(*f)
	}
	return tlu
}

// AddVolumeRequired adds f to the "volume_required" field.
func (tlu *TestListUpdate) AddVolumeRequired(f float64) *TestListUpdate {
	tlu.mutation.AddVolumeRequired(f)
	return tlu
}

// SetBloodType sets the "blood_type" field.
func (tlu *TestListUpdate) SetBloodType(b bool) *TestListUpdate {
	tlu.mutation.SetBloodType(b)
	return tlu
}

// SetNillableBloodType sets the "blood_type" field if the given value is not nil.
func (tlu *TestListUpdate) SetNillableBloodType(b *bool) *TestListUpdate {
	if b != nil {
		tlu.SetBloodType(*b)
	}
	return tlu
}

// Mutation returns the TestListMutation object of the builder.
func (tlu *TestListUpdate) Mutation() *TestListMutation {
	return tlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tlu *TestListUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tlu.sqlSave, tlu.mutation, tlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tlu *TestListUpdate) SaveX(ctx context.Context) int {
	affected, err := tlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tlu *TestListUpdate) Exec(ctx context.Context) error {
	_, err := tlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlu *TestListUpdate) ExecX(ctx context.Context) {
	if err := tlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlu *TestListUpdate) check() error {
	if v, ok := tlu.mutation.TestInstrument(); ok {
		if err := testlist.TestInstrumentValidator(v); err != nil {
			return &ValidationError{Name: "test_instrument", err: fmt.Errorf(`ent: validator failed for field "TestList.test_instrument": %w`, err)}
		}
	}
	if v, ok := tlu.mutation.TubeType(); ok {
		if err := testlist.TubeTypeValidator(v); err != nil {
			return &ValidationError{Name: "tube_type", err: fmt.Errorf(`ent: validator failed for field "TestList.tube_type": %w`, err)}
		}
	}
	if v, ok := tlu.mutation.DIGroupName(); ok {
		if err := testlist.DIGroupNameValidator(v); err != nil {
			return &ValidationError{Name: "DI_group_name", err: fmt.Errorf(`ent: validator failed for field "TestList.DI_group_name": %w`, err)}
		}
	}
	return nil
}

func (tlu *TestListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(testlist.Table, testlist.Columns, sqlgraph.NewFieldSpec(testlist.FieldID, field.TypeInt))
	if ps := tlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tlu.mutation.TestInstrument(); ok {
		_spec.SetField(testlist.FieldTestInstrument, field.TypeEnum, value)
	}
	if tlu.mutation.TestInstrumentCleared() {
		_spec.ClearField(testlist.FieldTestInstrument, field.TypeEnum)
	}
	if value, ok := tlu.mutation.TubeType(); ok {
		_spec.SetField(testlist.FieldTubeType, field.TypeEnum, value)
	}
	if value, ok := tlu.mutation.DIGroupName(); ok {
		_spec.SetField(testlist.FieldDIGroupName, field.TypeString, value)
	}
	if tlu.mutation.DIGroupNameCleared() {
		_spec.ClearField(testlist.FieldDIGroupName, field.TypeString)
	}
	if value, ok := tlu.mutation.VolumeRequired(); ok {
		_spec.SetField(testlist.FieldVolumeRequired, field.TypeFloat64, value)
	}
	if value, ok := tlu.mutation.AddedVolumeRequired(); ok {
		_spec.AddField(testlist.FieldVolumeRequired, field.TypeFloat64, value)
	}
	if value, ok := tlu.mutation.BloodType(); ok {
		_spec.SetField(testlist.FieldBloodType, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tlu.mutation.done = true
	return n, nil
}

// TestListUpdateOne is the builder for updating a single TestList entity.
type TestListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestListMutation
}

// SetTestInstrument sets the "test_instrument" field.
func (tluo *TestListUpdateOne) SetTestInstrument(ti testlist.TestInstrument) *TestListUpdateOne {
	tluo.mutation.SetTestInstrument(ti)
	return tluo
}

// SetNillableTestInstrument sets the "test_instrument" field if the given value is not nil.
func (tluo *TestListUpdateOne) SetNillableTestInstrument(ti *testlist.TestInstrument) *TestListUpdateOne {
	if ti != nil {
		tluo.SetTestInstrument(*ti)
	}
	return tluo
}

// ClearTestInstrument clears the value of the "test_instrument" field.
func (tluo *TestListUpdateOne) ClearTestInstrument() *TestListUpdateOne {
	tluo.mutation.ClearTestInstrument()
	return tluo
}

// SetTubeType sets the "tube_type" field.
func (tluo *TestListUpdateOne) SetTubeType(tt testlist.TubeType) *TestListUpdateOne {
	tluo.mutation.SetTubeType(tt)
	return tluo
}

// SetNillableTubeType sets the "tube_type" field if the given value is not nil.
func (tluo *TestListUpdateOne) SetNillableTubeType(tt *testlist.TubeType) *TestListUpdateOne {
	if tt != nil {
		tluo.SetTubeType(*tt)
	}
	return tluo
}

// SetDIGroupName sets the "DI_group_name" field.
func (tluo *TestListUpdateOne) SetDIGroupName(s string) *TestListUpdateOne {
	tluo.mutation.SetDIGroupName(s)
	return tluo
}

// SetNillableDIGroupName sets the "DI_group_name" field if the given value is not nil.
func (tluo *TestListUpdateOne) SetNillableDIGroupName(s *string) *TestListUpdateOne {
	if s != nil {
		tluo.SetDIGroupName(*s)
	}
	return tluo
}

// ClearDIGroupName clears the value of the "DI_group_name" field.
func (tluo *TestListUpdateOne) ClearDIGroupName() *TestListUpdateOne {
	tluo.mutation.ClearDIGroupName()
	return tluo
}

// SetVolumeRequired sets the "volume_required" field.
func (tluo *TestListUpdateOne) SetVolumeRequired(f float64) *TestListUpdateOne {
	tluo.mutation.ResetVolumeRequired()
	tluo.mutation.SetVolumeRequired(f)
	return tluo
}

// SetNillableVolumeRequired sets the "volume_required" field if the given value is not nil.
func (tluo *TestListUpdateOne) SetNillableVolumeRequired(f *float64) *TestListUpdateOne {
	if f != nil {
		tluo.SetVolumeRequired(*f)
	}
	return tluo
}

// AddVolumeRequired adds f to the "volume_required" field.
func (tluo *TestListUpdateOne) AddVolumeRequired(f float64) *TestListUpdateOne {
	tluo.mutation.AddVolumeRequired(f)
	return tluo
}

// SetBloodType sets the "blood_type" field.
func (tluo *TestListUpdateOne) SetBloodType(b bool) *TestListUpdateOne {
	tluo.mutation.SetBloodType(b)
	return tluo
}

// SetNillableBloodType sets the "blood_type" field if the given value is not nil.
func (tluo *TestListUpdateOne) SetNillableBloodType(b *bool) *TestListUpdateOne {
	if b != nil {
		tluo.SetBloodType(*b)
	}
	return tluo
}

// Mutation returns the TestListMutation object of the builder.
func (tluo *TestListUpdateOne) Mutation() *TestListMutation {
	return tluo.mutation
}

// Where appends a list predicates to the TestListUpdate builder.
func (tluo *TestListUpdateOne) Where(ps ...predicate.TestList) *TestListUpdateOne {
	tluo.mutation.Where(ps...)
	return tluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tluo *TestListUpdateOne) Select(field string, fields ...string) *TestListUpdateOne {
	tluo.fields = append([]string{field}, fields...)
	return tluo
}

// Save executes the query and returns the updated TestList entity.
func (tluo *TestListUpdateOne) Save(ctx context.Context) (*TestList, error) {
	return withHooks(ctx, tluo.sqlSave, tluo.mutation, tluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tluo *TestListUpdateOne) SaveX(ctx context.Context) *TestList {
	node, err := tluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tluo *TestListUpdateOne) Exec(ctx context.Context) error {
	_, err := tluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tluo *TestListUpdateOne) ExecX(ctx context.Context) {
	if err := tluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tluo *TestListUpdateOne) check() error {
	if v, ok := tluo.mutation.TestInstrument(); ok {
		if err := testlist.TestInstrumentValidator(v); err != nil {
			return &ValidationError{Name: "test_instrument", err: fmt.Errorf(`ent: validator failed for field "TestList.test_instrument": %w`, err)}
		}
	}
	if v, ok := tluo.mutation.TubeType(); ok {
		if err := testlist.TubeTypeValidator(v); err != nil {
			return &ValidationError{Name: "tube_type", err: fmt.Errorf(`ent: validator failed for field "TestList.tube_type": %w`, err)}
		}
	}
	if v, ok := tluo.mutation.DIGroupName(); ok {
		if err := testlist.DIGroupNameValidator(v); err != nil {
			return &ValidationError{Name: "DI_group_name", err: fmt.Errorf(`ent: validator failed for field "TestList.DI_group_name": %w`, err)}
		}
	}
	return nil
}

func (tluo *TestListUpdateOne) sqlSave(ctx context.Context) (_node *TestList, err error) {
	if err := tluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testlist.Table, testlist.Columns, sqlgraph.NewFieldSpec(testlist.FieldID, field.TypeInt))
	id, ok := tluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testlist.FieldID)
		for _, f := range fields {
			if !testlist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testlist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tluo.mutation.TestInstrument(); ok {
		_spec.SetField(testlist.FieldTestInstrument, field.TypeEnum, value)
	}
	if tluo.mutation.TestInstrumentCleared() {
		_spec.ClearField(testlist.FieldTestInstrument, field.TypeEnum)
	}
	if value, ok := tluo.mutation.TubeType(); ok {
		_spec.SetField(testlist.FieldTubeType, field.TypeEnum, value)
	}
	if value, ok := tluo.mutation.DIGroupName(); ok {
		_spec.SetField(testlist.FieldDIGroupName, field.TypeString, value)
	}
	if tluo.mutation.DIGroupNameCleared() {
		_spec.ClearField(testlist.FieldDIGroupName, field.TypeString)
	}
	if value, ok := tluo.mutation.VolumeRequired(); ok {
		_spec.SetField(testlist.FieldVolumeRequired, field.TypeFloat64, value)
	}
	if value, ok := tluo.mutation.AddedVolumeRequired(); ok {
		_spec.AddField(testlist.FieldVolumeRequired, field.TypeFloat64, value)
	}
	if value, ok := tluo.mutation.BloodType(); ok {
		_spec.SetField(testlist.FieldBloodType, field.TypeBool, value)
	}
	_node = &TestList{config: tluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tluo.mutation.done = true
	return _node, nil
}
