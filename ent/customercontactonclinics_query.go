// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/clinic"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/customercontactonclinics"
	"coresamples/ent/predicate"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerContactOnClinicsQuery is the builder for querying CustomerContactOnClinics entities.
type CustomerContactOnClinicsQuery struct {
	config
	ctx          *QueryContext
	order        []customercontactonclinics.OrderOption
	inters       []Interceptor
	predicates   []predicate.CustomerContactOnClinics
	withCustomer *CustomerQuery
	withClinic   *ClinicQuery
	withContact  *ContactQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CustomerContactOnClinicsQuery builder.
func (ccocq *CustomerContactOnClinicsQuery) Where(ps ...predicate.CustomerContactOnClinics) *CustomerContactOnClinicsQuery {
	ccocq.predicates = append(ccocq.predicates, ps...)
	return ccocq
}

// Limit the number of records to be returned by this query.
func (ccocq *CustomerContactOnClinicsQuery) Limit(limit int) *CustomerContactOnClinicsQuery {
	ccocq.ctx.Limit = &limit
	return ccocq
}

// Offset to start from.
func (ccocq *CustomerContactOnClinicsQuery) Offset(offset int) *CustomerContactOnClinicsQuery {
	ccocq.ctx.Offset = &offset
	return ccocq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ccocq *CustomerContactOnClinicsQuery) Unique(unique bool) *CustomerContactOnClinicsQuery {
	ccocq.ctx.Unique = &unique
	return ccocq
}

// Order specifies how the records should be ordered.
func (ccocq *CustomerContactOnClinicsQuery) Order(o ...customercontactonclinics.OrderOption) *CustomerContactOnClinicsQuery {
	ccocq.order = append(ccocq.order, o...)
	return ccocq
}

// QueryCustomer chains the current query on the "customer" edge.
func (ccocq *CustomerContactOnClinicsQuery) QueryCustomer() *CustomerQuery {
	query := (&CustomerClient{config: ccocq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ccocq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ccocq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(customercontactonclinics.Table, customercontactonclinics.FieldID, selector),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, customercontactonclinics.CustomerTable, customercontactonclinics.CustomerColumn),
		)
		fromU = sqlgraph.SetNeighbors(ccocq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClinic chains the current query on the "clinic" edge.
func (ccocq *CustomerContactOnClinicsQuery) QueryClinic() *ClinicQuery {
	query := (&ClinicClient{config: ccocq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ccocq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ccocq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(customercontactonclinics.Table, customercontactonclinics.FieldID, selector),
			sqlgraph.To(clinic.Table, clinic.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, customercontactonclinics.ClinicTable, customercontactonclinics.ClinicColumn),
		)
		fromU = sqlgraph.SetNeighbors(ccocq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContact chains the current query on the "contact" edge.
func (ccocq *CustomerContactOnClinicsQuery) QueryContact() *ContactQuery {
	query := (&ContactClient{config: ccocq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ccocq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ccocq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(customercontactonclinics.Table, customercontactonclinics.FieldID, selector),
			sqlgraph.To(contact.Table, contact.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, customercontactonclinics.ContactTable, customercontactonclinics.ContactColumn),
		)
		fromU = sqlgraph.SetNeighbors(ccocq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CustomerContactOnClinics entity from the query.
// Returns a *NotFoundError when no CustomerContactOnClinics was found.
func (ccocq *CustomerContactOnClinicsQuery) First(ctx context.Context) (*CustomerContactOnClinics, error) {
	nodes, err := ccocq.Limit(1).All(setContextOp(ctx, ccocq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{customercontactonclinics.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ccocq *CustomerContactOnClinicsQuery) FirstX(ctx context.Context) *CustomerContactOnClinics {
	node, err := ccocq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CustomerContactOnClinics ID from the query.
// Returns a *NotFoundError when no CustomerContactOnClinics ID was found.
func (ccocq *CustomerContactOnClinicsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ccocq.Limit(1).IDs(setContextOp(ctx, ccocq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{customercontactonclinics.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ccocq *CustomerContactOnClinicsQuery) FirstIDX(ctx context.Context) int {
	id, err := ccocq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CustomerContactOnClinics entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CustomerContactOnClinics entity is found.
// Returns a *NotFoundError when no CustomerContactOnClinics entities are found.
func (ccocq *CustomerContactOnClinicsQuery) Only(ctx context.Context) (*CustomerContactOnClinics, error) {
	nodes, err := ccocq.Limit(2).All(setContextOp(ctx, ccocq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{customercontactonclinics.Label}
	default:
		return nil, &NotSingularError{customercontactonclinics.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ccocq *CustomerContactOnClinicsQuery) OnlyX(ctx context.Context) *CustomerContactOnClinics {
	node, err := ccocq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CustomerContactOnClinics ID in the query.
// Returns a *NotSingularError when more than one CustomerContactOnClinics ID is found.
// Returns a *NotFoundError when no entities are found.
func (ccocq *CustomerContactOnClinicsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ccocq.Limit(2).IDs(setContextOp(ctx, ccocq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{customercontactonclinics.Label}
	default:
		err = &NotSingularError{customercontactonclinics.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ccocq *CustomerContactOnClinicsQuery) OnlyIDX(ctx context.Context) int {
	id, err := ccocq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CustomerContactOnClinicsSlice.
func (ccocq *CustomerContactOnClinicsQuery) All(ctx context.Context) ([]*CustomerContactOnClinics, error) {
	ctx = setContextOp(ctx, ccocq.ctx, "All")
	if err := ccocq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CustomerContactOnClinics, *CustomerContactOnClinicsQuery]()
	return withInterceptors[[]*CustomerContactOnClinics](ctx, ccocq, qr, ccocq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ccocq *CustomerContactOnClinicsQuery) AllX(ctx context.Context) []*CustomerContactOnClinics {
	nodes, err := ccocq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CustomerContactOnClinics IDs.
func (ccocq *CustomerContactOnClinicsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ccocq.ctx.Unique == nil && ccocq.path != nil {
		ccocq.Unique(true)
	}
	ctx = setContextOp(ctx, ccocq.ctx, "IDs")
	if err = ccocq.Select(customercontactonclinics.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ccocq *CustomerContactOnClinicsQuery) IDsX(ctx context.Context) []int {
	ids, err := ccocq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ccocq *CustomerContactOnClinicsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ccocq.ctx, "Count")
	if err := ccocq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ccocq, querierCount[*CustomerContactOnClinicsQuery](), ccocq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ccocq *CustomerContactOnClinicsQuery) CountX(ctx context.Context) int {
	count, err := ccocq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ccocq *CustomerContactOnClinicsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ccocq.ctx, "Exist")
	switch _, err := ccocq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ccocq *CustomerContactOnClinicsQuery) ExistX(ctx context.Context) bool {
	exist, err := ccocq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CustomerContactOnClinicsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ccocq *CustomerContactOnClinicsQuery) Clone() *CustomerContactOnClinicsQuery {
	if ccocq == nil {
		return nil
	}
	return &CustomerContactOnClinicsQuery{
		config:       ccocq.config,
		ctx:          ccocq.ctx.Clone(),
		order:        append([]customercontactonclinics.OrderOption{}, ccocq.order...),
		inters:       append([]Interceptor{}, ccocq.inters...),
		predicates:   append([]predicate.CustomerContactOnClinics{}, ccocq.predicates...),
		withCustomer: ccocq.withCustomer.Clone(),
		withClinic:   ccocq.withClinic.Clone(),
		withContact:  ccocq.withContact.Clone(),
		// clone intermediate query.
		sql:  ccocq.sql.Clone(),
		path: ccocq.path,
	}
}

// WithCustomer tells the query-builder to eager-load the nodes that are connected to
// the "customer" edge. The optional arguments are used to configure the query builder of the edge.
func (ccocq *CustomerContactOnClinicsQuery) WithCustomer(opts ...func(*CustomerQuery)) *CustomerContactOnClinicsQuery {
	query := (&CustomerClient{config: ccocq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ccocq.withCustomer = query
	return ccocq
}

// WithClinic tells the query-builder to eager-load the nodes that are connected to
// the "clinic" edge. The optional arguments are used to configure the query builder of the edge.
func (ccocq *CustomerContactOnClinicsQuery) WithClinic(opts ...func(*ClinicQuery)) *CustomerContactOnClinicsQuery {
	query := (&ClinicClient{config: ccocq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ccocq.withClinic = query
	return ccocq
}

// WithContact tells the query-builder to eager-load the nodes that are connected to
// the "contact" edge. The optional arguments are used to configure the query builder of the edge.
func (ccocq *CustomerContactOnClinicsQuery) WithContact(opts ...func(*ContactQuery)) *CustomerContactOnClinicsQuery {
	query := (&ContactClient{config: ccocq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ccocq.withContact = query
	return ccocq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CustomerID int `json:"customer_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CustomerContactOnClinics.Query().
//		GroupBy(customercontactonclinics.FieldCustomerID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ccocq *CustomerContactOnClinicsQuery) GroupBy(field string, fields ...string) *CustomerContactOnClinicsGroupBy {
	ccocq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CustomerContactOnClinicsGroupBy{build: ccocq}
	grbuild.flds = &ccocq.ctx.Fields
	grbuild.label = customercontactonclinics.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CustomerID int `json:"customer_id,omitempty"`
//	}
//
//	client.CustomerContactOnClinics.Query().
//		Select(customercontactonclinics.FieldCustomerID).
//		Scan(ctx, &v)
func (ccocq *CustomerContactOnClinicsQuery) Select(fields ...string) *CustomerContactOnClinicsSelect {
	ccocq.ctx.Fields = append(ccocq.ctx.Fields, fields...)
	sbuild := &CustomerContactOnClinicsSelect{CustomerContactOnClinicsQuery: ccocq}
	sbuild.label = customercontactonclinics.Label
	sbuild.flds, sbuild.scan = &ccocq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CustomerContactOnClinicsSelect configured with the given aggregations.
func (ccocq *CustomerContactOnClinicsQuery) Aggregate(fns ...AggregateFunc) *CustomerContactOnClinicsSelect {
	return ccocq.Select().Aggregate(fns...)
}

func (ccocq *CustomerContactOnClinicsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ccocq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ccocq); err != nil {
				return err
			}
		}
	}
	for _, f := range ccocq.ctx.Fields {
		if !customercontactonclinics.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ccocq.path != nil {
		prev, err := ccocq.path(ctx)
		if err != nil {
			return err
		}
		ccocq.sql = prev
	}
	return nil
}

func (ccocq *CustomerContactOnClinicsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CustomerContactOnClinics, error) {
	var (
		nodes       = []*CustomerContactOnClinics{}
		_spec       = ccocq.querySpec()
		loadedTypes = [3]bool{
			ccocq.withCustomer != nil,
			ccocq.withClinic != nil,
			ccocq.withContact != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CustomerContactOnClinics).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CustomerContactOnClinics{config: ccocq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ccocq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ccocq.withCustomer; query != nil {
		if err := ccocq.loadCustomer(ctx, query, nodes, nil,
			func(n *CustomerContactOnClinics, e *Customer) { n.Edges.Customer = e }); err != nil {
			return nil, err
		}
	}
	if query := ccocq.withClinic; query != nil {
		if err := ccocq.loadClinic(ctx, query, nodes, nil,
			func(n *CustomerContactOnClinics, e *Clinic) { n.Edges.Clinic = e }); err != nil {
			return nil, err
		}
	}
	if query := ccocq.withContact; query != nil {
		if err := ccocq.loadContact(ctx, query, nodes, nil,
			func(n *CustomerContactOnClinics, e *Contact) { n.Edges.Contact = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ccocq *CustomerContactOnClinicsQuery) loadCustomer(ctx context.Context, query *CustomerQuery, nodes []*CustomerContactOnClinics, init func(*CustomerContactOnClinics), assign func(*CustomerContactOnClinics, *Customer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CustomerContactOnClinics)
	for i := range nodes {
		fk := nodes[i].CustomerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(customer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "customer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ccocq *CustomerContactOnClinicsQuery) loadClinic(ctx context.Context, query *ClinicQuery, nodes []*CustomerContactOnClinics, init func(*CustomerContactOnClinics), assign func(*CustomerContactOnClinics, *Clinic)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CustomerContactOnClinics)
	for i := range nodes {
		fk := nodes[i].ClinicID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(clinic.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "clinic_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ccocq *CustomerContactOnClinicsQuery) loadContact(ctx context.Context, query *ContactQuery, nodes []*CustomerContactOnClinics, init func(*CustomerContactOnClinics), assign func(*CustomerContactOnClinics, *Contact)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CustomerContactOnClinics)
	for i := range nodes {
		fk := nodes[i].ContactID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(contact.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "contact_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ccocq *CustomerContactOnClinicsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ccocq.querySpec()
	_spec.Node.Columns = ccocq.ctx.Fields
	if len(ccocq.ctx.Fields) > 0 {
		_spec.Unique = ccocq.ctx.Unique != nil && *ccocq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ccocq.driver, _spec)
}

func (ccocq *CustomerContactOnClinicsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(customercontactonclinics.Table, customercontactonclinics.Columns, sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt))
	_spec.From = ccocq.sql
	if unique := ccocq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ccocq.path != nil {
		_spec.Unique = true
	}
	if fields := ccocq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customercontactonclinics.FieldID)
		for i := range fields {
			if fields[i] != customercontactonclinics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ccocq.withCustomer != nil {
			_spec.Node.AddColumnOnce(customercontactonclinics.FieldCustomerID)
		}
		if ccocq.withClinic != nil {
			_spec.Node.AddColumnOnce(customercontactonclinics.FieldClinicID)
		}
		if ccocq.withContact != nil {
			_spec.Node.AddColumnOnce(customercontactonclinics.FieldContactID)
		}
	}
	if ps := ccocq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ccocq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ccocq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ccocq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ccocq *CustomerContactOnClinicsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ccocq.driver.Dialect())
	t1 := builder.Table(customercontactonclinics.Table)
	columns := ccocq.ctx.Fields
	if len(columns) == 0 {
		columns = customercontactonclinics.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ccocq.sql != nil {
		selector = ccocq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ccocq.ctx.Unique != nil && *ccocq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ccocq.predicates {
		p(selector)
	}
	for _, p := range ccocq.order {
		p(selector)
	}
	if offset := ccocq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ccocq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CustomerContactOnClinicsGroupBy is the group-by builder for CustomerContactOnClinics entities.
type CustomerContactOnClinicsGroupBy struct {
	selector
	build *CustomerContactOnClinicsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ccocgb *CustomerContactOnClinicsGroupBy) Aggregate(fns ...AggregateFunc) *CustomerContactOnClinicsGroupBy {
	ccocgb.fns = append(ccocgb.fns, fns...)
	return ccocgb
}

// Scan applies the selector query and scans the result into the given value.
func (ccocgb *CustomerContactOnClinicsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ccocgb.build.ctx, "GroupBy")
	if err := ccocgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CustomerContactOnClinicsQuery, *CustomerContactOnClinicsGroupBy](ctx, ccocgb.build, ccocgb, ccocgb.build.inters, v)
}

func (ccocgb *CustomerContactOnClinicsGroupBy) sqlScan(ctx context.Context, root *CustomerContactOnClinicsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ccocgb.fns))
	for _, fn := range ccocgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ccocgb.flds)+len(ccocgb.fns))
		for _, f := range *ccocgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ccocgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ccocgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CustomerContactOnClinicsSelect is the builder for selecting fields of CustomerContactOnClinics entities.
type CustomerContactOnClinicsSelect struct {
	*CustomerContactOnClinicsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ccocs *CustomerContactOnClinicsSelect) Aggregate(fns ...AggregateFunc) *CustomerContactOnClinicsSelect {
	ccocs.fns = append(ccocs.fns, fns...)
	return ccocs
}

// Scan applies the selector query and scans the result into the given value.
func (ccocs *CustomerContactOnClinicsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ccocs.ctx, "Select")
	if err := ccocs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CustomerContactOnClinicsQuery, *CustomerContactOnClinicsSelect](ctx, ccocs.CustomerContactOnClinicsQuery, ccocs, ccocs.inters, v)
}

func (ccocs *CustomerContactOnClinicsSelect) sqlScan(ctx context.Context, root *CustomerContactOnClinicsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ccocs.fns))
	for _, fn := range ccocs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ccocs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ccocs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
