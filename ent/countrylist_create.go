// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/countrylist"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CountryListCreate is the builder for creating a CountryList entity.
type CountryListCreate struct {
	config
	mutation *CountryListMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCountryName sets the "country_name" field.
func (clc *CountryListCreate) SetCountryName(s string) *CountryListCreate {
	clc.mutation.SetCountryName(s)
	return clc
}

// SetAlpha2Code sets the "alpha_2_code" field.
func (clc *CountryListCreate) SetAlpha2Code(s string) *CountryListCreate {
	clc.mutation.SetAlpha2Code(s)
	return clc
}

// SetAlpha3Code sets the "alpha_3_code" field.
func (clc *CountryListCreate) SetAlpha3Code(s string) *CountryListCreate {
	clc.mutation.SetAlpha3Code(s)
	return clc
}

// SetCountryCodeEnum sets the "country_code_enum" field.
func (clc *CountryListCreate) SetCountryCodeEnum(s string) *CountryListCreate {
	clc.mutation.SetCountryCodeEnum(s)
	return clc
}

// SetIso sets the "iso" field.
func (clc *CountryListCreate) SetIso(s string) *CountryListCreate {
	clc.mutation.SetIso(s)
	return clc
}

// SetCountryRegion sets the "country_region" field.
func (clc *CountryListCreate) SetCountryRegion(s string) *CountryListCreate {
	clc.mutation.SetCountryRegion(s)
	return clc
}

// SetCountrySubregion sets the "country_subregion" field.
func (clc *CountryListCreate) SetCountrySubregion(s string) *CountryListCreate {
	clc.mutation.SetCountrySubregion(s)
	return clc
}

// SetCountryRegionCode sets the "country_region_code" field.
func (clc *CountryListCreate) SetCountryRegionCode(s string) *CountryListCreate {
	clc.mutation.SetCountryRegionCode(s)
	return clc
}

// SetCountrySubRegionCode sets the "country_sub_region_code" field.
func (clc *CountryListCreate) SetCountrySubRegionCode(s string) *CountryListCreate {
	clc.mutation.SetCountrySubRegionCode(s)
	return clc
}

// SetID sets the "id" field.
func (clc *CountryListCreate) SetID(i int) *CountryListCreate {
	clc.mutation.SetID(i)
	return clc
}

// Mutation returns the CountryListMutation object of the builder.
func (clc *CountryListCreate) Mutation() *CountryListMutation {
	return clc.mutation
}

// Save creates the CountryList in the database.
func (clc *CountryListCreate) Save(ctx context.Context) (*CountryList, error) {
	return withHooks(ctx, clc.sqlSave, clc.mutation, clc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clc *CountryListCreate) SaveX(ctx context.Context) *CountryList {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *CountryListCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *CountryListCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clc *CountryListCreate) check() error {
	if _, ok := clc.mutation.CountryName(); !ok {
		return &ValidationError{Name: "country_name", err: errors.New(`ent: missing required field "CountryList.country_name"`)}
	}
	if _, ok := clc.mutation.Alpha2Code(); !ok {
		return &ValidationError{Name: "alpha_2_code", err: errors.New(`ent: missing required field "CountryList.alpha_2_code"`)}
	}
	if _, ok := clc.mutation.Alpha3Code(); !ok {
		return &ValidationError{Name: "alpha_3_code", err: errors.New(`ent: missing required field "CountryList.alpha_3_code"`)}
	}
	if _, ok := clc.mutation.CountryCodeEnum(); !ok {
		return &ValidationError{Name: "country_code_enum", err: errors.New(`ent: missing required field "CountryList.country_code_enum"`)}
	}
	if _, ok := clc.mutation.Iso(); !ok {
		return &ValidationError{Name: "iso", err: errors.New(`ent: missing required field "CountryList.iso"`)}
	}
	if _, ok := clc.mutation.CountryRegion(); !ok {
		return &ValidationError{Name: "country_region", err: errors.New(`ent: missing required field "CountryList.country_region"`)}
	}
	if _, ok := clc.mutation.CountrySubregion(); !ok {
		return &ValidationError{Name: "country_subregion", err: errors.New(`ent: missing required field "CountryList.country_subregion"`)}
	}
	if _, ok := clc.mutation.CountryRegionCode(); !ok {
		return &ValidationError{Name: "country_region_code", err: errors.New(`ent: missing required field "CountryList.country_region_code"`)}
	}
	if _, ok := clc.mutation.CountrySubRegionCode(); !ok {
		return &ValidationError{Name: "country_sub_region_code", err: errors.New(`ent: missing required field "CountryList.country_sub_region_code"`)}
	}
	return nil
}

func (clc *CountryListCreate) sqlSave(ctx context.Context) (*CountryList, error) {
	if err := clc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	clc.mutation.id = &_node.ID
	clc.mutation.done = true
	return _node, nil
}

func (clc *CountryListCreate) createSpec() (*CountryList, *sqlgraph.CreateSpec) {
	var (
		_node = &CountryList{config: clc.config}
		_spec = sqlgraph.NewCreateSpec(countrylist.Table, sqlgraph.NewFieldSpec(countrylist.FieldID, field.TypeInt))
	)
	_spec.OnConflict = clc.conflict
	if id, ok := clc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := clc.mutation.CountryName(); ok {
		_spec.SetField(countrylist.FieldCountryName, field.TypeString, value)
		_node.CountryName = value
	}
	if value, ok := clc.mutation.Alpha2Code(); ok {
		_spec.SetField(countrylist.FieldAlpha2Code, field.TypeString, value)
		_node.Alpha2Code = value
	}
	if value, ok := clc.mutation.Alpha3Code(); ok {
		_spec.SetField(countrylist.FieldAlpha3Code, field.TypeString, value)
		_node.Alpha3Code = value
	}
	if value, ok := clc.mutation.CountryCodeEnum(); ok {
		_spec.SetField(countrylist.FieldCountryCodeEnum, field.TypeString, value)
		_node.CountryCodeEnum = value
	}
	if value, ok := clc.mutation.Iso(); ok {
		_spec.SetField(countrylist.FieldIso, field.TypeString, value)
		_node.Iso = value
	}
	if value, ok := clc.mutation.CountryRegion(); ok {
		_spec.SetField(countrylist.FieldCountryRegion, field.TypeString, value)
		_node.CountryRegion = value
	}
	if value, ok := clc.mutation.CountrySubregion(); ok {
		_spec.SetField(countrylist.FieldCountrySubregion, field.TypeString, value)
		_node.CountrySubregion = value
	}
	if value, ok := clc.mutation.CountryRegionCode(); ok {
		_spec.SetField(countrylist.FieldCountryRegionCode, field.TypeString, value)
		_node.CountryRegionCode = value
	}
	if value, ok := clc.mutation.CountrySubRegionCode(); ok {
		_spec.SetField(countrylist.FieldCountrySubRegionCode, field.TypeString, value)
		_node.CountrySubRegionCode = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CountryList.Create().
//		SetCountryName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CountryListUpsert) {
//			SetCountryName(v+v).
//		}).
//		Exec(ctx)
func (clc *CountryListCreate) OnConflict(opts ...sql.ConflictOption) *CountryListUpsertOne {
	clc.conflict = opts
	return &CountryListUpsertOne{
		create: clc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CountryList.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (clc *CountryListCreate) OnConflictColumns(columns ...string) *CountryListUpsertOne {
	clc.conflict = append(clc.conflict, sql.ConflictColumns(columns...))
	return &CountryListUpsertOne{
		create: clc,
	}
}

type (
	// CountryListUpsertOne is the builder for "upsert"-ing
	//  one CountryList node.
	CountryListUpsertOne struct {
		create *CountryListCreate
	}

	// CountryListUpsert is the "OnConflict" setter.
	CountryListUpsert struct {
		*sql.UpdateSet
	}
)

// SetCountryName sets the "country_name" field.
func (u *CountryListUpsert) SetCountryName(v string) *CountryListUpsert {
	u.Set(countrylist.FieldCountryName, v)
	return u
}

// UpdateCountryName sets the "country_name" field to the value that was provided on create.
func (u *CountryListUpsert) UpdateCountryName() *CountryListUpsert {
	u.SetExcluded(countrylist.FieldCountryName)
	return u
}

// SetAlpha2Code sets the "alpha_2_code" field.
func (u *CountryListUpsert) SetAlpha2Code(v string) *CountryListUpsert {
	u.Set(countrylist.FieldAlpha2Code, v)
	return u
}

// UpdateAlpha2Code sets the "alpha_2_code" field to the value that was provided on create.
func (u *CountryListUpsert) UpdateAlpha2Code() *CountryListUpsert {
	u.SetExcluded(countrylist.FieldAlpha2Code)
	return u
}

// SetAlpha3Code sets the "alpha_3_code" field.
func (u *CountryListUpsert) SetAlpha3Code(v string) *CountryListUpsert {
	u.Set(countrylist.FieldAlpha3Code, v)
	return u
}

// UpdateAlpha3Code sets the "alpha_3_code" field to the value that was provided on create.
func (u *CountryListUpsert) UpdateAlpha3Code() *CountryListUpsert {
	u.SetExcluded(countrylist.FieldAlpha3Code)
	return u
}

// SetCountryCodeEnum sets the "country_code_enum" field.
func (u *CountryListUpsert) SetCountryCodeEnum(v string) *CountryListUpsert {
	u.Set(countrylist.FieldCountryCodeEnum, v)
	return u
}

// UpdateCountryCodeEnum sets the "country_code_enum" field to the value that was provided on create.
func (u *CountryListUpsert) UpdateCountryCodeEnum() *CountryListUpsert {
	u.SetExcluded(countrylist.FieldCountryCodeEnum)
	return u
}

// SetIso sets the "iso" field.
func (u *CountryListUpsert) SetIso(v string) *CountryListUpsert {
	u.Set(countrylist.FieldIso, v)
	return u
}

// UpdateIso sets the "iso" field to the value that was provided on create.
func (u *CountryListUpsert) UpdateIso() *CountryListUpsert {
	u.SetExcluded(countrylist.FieldIso)
	return u
}

// SetCountryRegion sets the "country_region" field.
func (u *CountryListUpsert) SetCountryRegion(v string) *CountryListUpsert {
	u.Set(countrylist.FieldCountryRegion, v)
	return u
}

// UpdateCountryRegion sets the "country_region" field to the value that was provided on create.
func (u *CountryListUpsert) UpdateCountryRegion() *CountryListUpsert {
	u.SetExcluded(countrylist.FieldCountryRegion)
	return u
}

// SetCountrySubregion sets the "country_subregion" field.
func (u *CountryListUpsert) SetCountrySubregion(v string) *CountryListUpsert {
	u.Set(countrylist.FieldCountrySubregion, v)
	return u
}

// UpdateCountrySubregion sets the "country_subregion" field to the value that was provided on create.
func (u *CountryListUpsert) UpdateCountrySubregion() *CountryListUpsert {
	u.SetExcluded(countrylist.FieldCountrySubregion)
	return u
}

// SetCountryRegionCode sets the "country_region_code" field.
func (u *CountryListUpsert) SetCountryRegionCode(v string) *CountryListUpsert {
	u.Set(countrylist.FieldCountryRegionCode, v)
	return u
}

// UpdateCountryRegionCode sets the "country_region_code" field to the value that was provided on create.
func (u *CountryListUpsert) UpdateCountryRegionCode() *CountryListUpsert {
	u.SetExcluded(countrylist.FieldCountryRegionCode)
	return u
}

// SetCountrySubRegionCode sets the "country_sub_region_code" field.
func (u *CountryListUpsert) SetCountrySubRegionCode(v string) *CountryListUpsert {
	u.Set(countrylist.FieldCountrySubRegionCode, v)
	return u
}

// UpdateCountrySubRegionCode sets the "country_sub_region_code" field to the value that was provided on create.
func (u *CountryListUpsert) UpdateCountrySubRegionCode() *CountryListUpsert {
	u.SetExcluded(countrylist.FieldCountrySubRegionCode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CountryList.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(countrylist.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CountryListUpsertOne) UpdateNewValues() *CountryListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(countrylist.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CountryList.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CountryListUpsertOne) Ignore() *CountryListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CountryListUpsertOne) DoNothing() *CountryListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CountryListCreate.OnConflict
// documentation for more info.
func (u *CountryListUpsertOne) Update(set func(*CountryListUpsert)) *CountryListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CountryListUpsert{UpdateSet: update})
	}))
	return u
}

// SetCountryName sets the "country_name" field.
func (u *CountryListUpsertOne) SetCountryName(v string) *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.SetCountryName(v)
	})
}

// UpdateCountryName sets the "country_name" field to the value that was provided on create.
func (u *CountryListUpsertOne) UpdateCountryName() *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateCountryName()
	})
}

// SetAlpha2Code sets the "alpha_2_code" field.
func (u *CountryListUpsertOne) SetAlpha2Code(v string) *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.SetAlpha2Code(v)
	})
}

// UpdateAlpha2Code sets the "alpha_2_code" field to the value that was provided on create.
func (u *CountryListUpsertOne) UpdateAlpha2Code() *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateAlpha2Code()
	})
}

// SetAlpha3Code sets the "alpha_3_code" field.
func (u *CountryListUpsertOne) SetAlpha3Code(v string) *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.SetAlpha3Code(v)
	})
}

// UpdateAlpha3Code sets the "alpha_3_code" field to the value that was provided on create.
func (u *CountryListUpsertOne) UpdateAlpha3Code() *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateAlpha3Code()
	})
}

// SetCountryCodeEnum sets the "country_code_enum" field.
func (u *CountryListUpsertOne) SetCountryCodeEnum(v string) *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.SetCountryCodeEnum(v)
	})
}

// UpdateCountryCodeEnum sets the "country_code_enum" field to the value that was provided on create.
func (u *CountryListUpsertOne) UpdateCountryCodeEnum() *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateCountryCodeEnum()
	})
}

// SetIso sets the "iso" field.
func (u *CountryListUpsertOne) SetIso(v string) *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.SetIso(v)
	})
}

// UpdateIso sets the "iso" field to the value that was provided on create.
func (u *CountryListUpsertOne) UpdateIso() *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateIso()
	})
}

// SetCountryRegion sets the "country_region" field.
func (u *CountryListUpsertOne) SetCountryRegion(v string) *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.SetCountryRegion(v)
	})
}

// UpdateCountryRegion sets the "country_region" field to the value that was provided on create.
func (u *CountryListUpsertOne) UpdateCountryRegion() *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateCountryRegion()
	})
}

// SetCountrySubregion sets the "country_subregion" field.
func (u *CountryListUpsertOne) SetCountrySubregion(v string) *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.SetCountrySubregion(v)
	})
}

// UpdateCountrySubregion sets the "country_subregion" field to the value that was provided on create.
func (u *CountryListUpsertOne) UpdateCountrySubregion() *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateCountrySubregion()
	})
}

// SetCountryRegionCode sets the "country_region_code" field.
func (u *CountryListUpsertOne) SetCountryRegionCode(v string) *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.SetCountryRegionCode(v)
	})
}

// UpdateCountryRegionCode sets the "country_region_code" field to the value that was provided on create.
func (u *CountryListUpsertOne) UpdateCountryRegionCode() *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateCountryRegionCode()
	})
}

// SetCountrySubRegionCode sets the "country_sub_region_code" field.
func (u *CountryListUpsertOne) SetCountrySubRegionCode(v string) *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.SetCountrySubRegionCode(v)
	})
}

// UpdateCountrySubRegionCode sets the "country_sub_region_code" field to the value that was provided on create.
func (u *CountryListUpsertOne) UpdateCountrySubRegionCode() *CountryListUpsertOne {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateCountrySubRegionCode()
	})
}

// Exec executes the query.
func (u *CountryListUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CountryListCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CountryListUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CountryListUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CountryListUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CountryListCreateBulk is the builder for creating many CountryList entities in bulk.
type CountryListCreateBulk struct {
	config
	err      error
	builders []*CountryListCreate
	conflict []sql.ConflictOption
}

// Save creates the CountryList entities in the database.
func (clcb *CountryListCreateBulk) Save(ctx context.Context) ([]*CountryList, error) {
	if clcb.err != nil {
		return nil, clcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*CountryList, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CountryListMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = clcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *CountryListCreateBulk) SaveX(ctx context.Context) []*CountryList {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *CountryListCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *CountryListCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CountryList.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CountryListUpsert) {
//			SetCountryName(v+v).
//		}).
//		Exec(ctx)
func (clcb *CountryListCreateBulk) OnConflict(opts ...sql.ConflictOption) *CountryListUpsertBulk {
	clcb.conflict = opts
	return &CountryListUpsertBulk{
		create: clcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CountryList.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (clcb *CountryListCreateBulk) OnConflictColumns(columns ...string) *CountryListUpsertBulk {
	clcb.conflict = append(clcb.conflict, sql.ConflictColumns(columns...))
	return &CountryListUpsertBulk{
		create: clcb,
	}
}

// CountryListUpsertBulk is the builder for "upsert"-ing
// a bulk of CountryList nodes.
type CountryListUpsertBulk struct {
	create *CountryListCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CountryList.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(countrylist.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CountryListUpsertBulk) UpdateNewValues() *CountryListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(countrylist.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CountryList.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CountryListUpsertBulk) Ignore() *CountryListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CountryListUpsertBulk) DoNothing() *CountryListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CountryListCreateBulk.OnConflict
// documentation for more info.
func (u *CountryListUpsertBulk) Update(set func(*CountryListUpsert)) *CountryListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CountryListUpsert{UpdateSet: update})
	}))
	return u
}

// SetCountryName sets the "country_name" field.
func (u *CountryListUpsertBulk) SetCountryName(v string) *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.SetCountryName(v)
	})
}

// UpdateCountryName sets the "country_name" field to the value that was provided on create.
func (u *CountryListUpsertBulk) UpdateCountryName() *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateCountryName()
	})
}

// SetAlpha2Code sets the "alpha_2_code" field.
func (u *CountryListUpsertBulk) SetAlpha2Code(v string) *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.SetAlpha2Code(v)
	})
}

// UpdateAlpha2Code sets the "alpha_2_code" field to the value that was provided on create.
func (u *CountryListUpsertBulk) UpdateAlpha2Code() *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateAlpha2Code()
	})
}

// SetAlpha3Code sets the "alpha_3_code" field.
func (u *CountryListUpsertBulk) SetAlpha3Code(v string) *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.SetAlpha3Code(v)
	})
}

// UpdateAlpha3Code sets the "alpha_3_code" field to the value that was provided on create.
func (u *CountryListUpsertBulk) UpdateAlpha3Code() *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateAlpha3Code()
	})
}

// SetCountryCodeEnum sets the "country_code_enum" field.
func (u *CountryListUpsertBulk) SetCountryCodeEnum(v string) *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.SetCountryCodeEnum(v)
	})
}

// UpdateCountryCodeEnum sets the "country_code_enum" field to the value that was provided on create.
func (u *CountryListUpsertBulk) UpdateCountryCodeEnum() *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateCountryCodeEnum()
	})
}

// SetIso sets the "iso" field.
func (u *CountryListUpsertBulk) SetIso(v string) *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.SetIso(v)
	})
}

// UpdateIso sets the "iso" field to the value that was provided on create.
func (u *CountryListUpsertBulk) UpdateIso() *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateIso()
	})
}

// SetCountryRegion sets the "country_region" field.
func (u *CountryListUpsertBulk) SetCountryRegion(v string) *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.SetCountryRegion(v)
	})
}

// UpdateCountryRegion sets the "country_region" field to the value that was provided on create.
func (u *CountryListUpsertBulk) UpdateCountryRegion() *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateCountryRegion()
	})
}

// SetCountrySubregion sets the "country_subregion" field.
func (u *CountryListUpsertBulk) SetCountrySubregion(v string) *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.SetCountrySubregion(v)
	})
}

// UpdateCountrySubregion sets the "country_subregion" field to the value that was provided on create.
func (u *CountryListUpsertBulk) UpdateCountrySubregion() *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateCountrySubregion()
	})
}

// SetCountryRegionCode sets the "country_region_code" field.
func (u *CountryListUpsertBulk) SetCountryRegionCode(v string) *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.SetCountryRegionCode(v)
	})
}

// UpdateCountryRegionCode sets the "country_region_code" field to the value that was provided on create.
func (u *CountryListUpsertBulk) UpdateCountryRegionCode() *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateCountryRegionCode()
	})
}

// SetCountrySubRegionCode sets the "country_sub_region_code" field.
func (u *CountryListUpsertBulk) SetCountrySubRegionCode(v string) *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.SetCountrySubRegionCode(v)
	})
}

// UpdateCountrySubRegionCode sets the "country_sub_region_code" field to the value that was provided on create.
func (u *CountryListUpsertBulk) UpdateCountrySubRegionCode() *CountryListUpsertBulk {
	return u.Update(func(s *CountryListUpsert) {
		s.UpdateCountrySubRegionCode()
	})
}

// Exec executes the query.
func (u *CountryListUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CountryListCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CountryListCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CountryListUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
