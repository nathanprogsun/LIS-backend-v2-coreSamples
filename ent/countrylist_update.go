// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/countrylist"
	"coresamples/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CountryListUpdate is the builder for updating CountryList entities.
type CountryListUpdate struct {
	config
	hooks    []Hook
	mutation *CountryListMutation
}

// Where appends a list predicates to the CountryListUpdate builder.
func (clu *CountryListUpdate) Where(ps ...predicate.CountryList) *CountryListUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetCountryName sets the "country_name" field.
func (clu *CountryListUpdate) SetCountryName(s string) *CountryListUpdate {
	clu.mutation.SetCountryName(s)
	return clu
}

// SetNillableCountryName sets the "country_name" field if the given value is not nil.
func (clu *CountryListUpdate) SetNillableCountryName(s *string) *CountryListUpdate {
	if s != nil {
		clu.SetCountryName(*s)
	}
	return clu
}

// SetAlpha2Code sets the "alpha_2_code" field.
func (clu *CountryListUpdate) SetAlpha2Code(s string) *CountryListUpdate {
	clu.mutation.SetAlpha2Code(s)
	return clu
}

// SetNillableAlpha2Code sets the "alpha_2_code" field if the given value is not nil.
func (clu *CountryListUpdate) SetNillableAlpha2Code(s *string) *CountryListUpdate {
	if s != nil {
		clu.SetAlpha2Code(*s)
	}
	return clu
}

// SetAlpha3Code sets the "alpha_3_code" field.
func (clu *CountryListUpdate) SetAlpha3Code(s string) *CountryListUpdate {
	clu.mutation.SetAlpha3Code(s)
	return clu
}

// SetNillableAlpha3Code sets the "alpha_3_code" field if the given value is not nil.
func (clu *CountryListUpdate) SetNillableAlpha3Code(s *string) *CountryListUpdate {
	if s != nil {
		clu.SetAlpha3Code(*s)
	}
	return clu
}

// SetCountryCodeEnum sets the "country_code_enum" field.
func (clu *CountryListUpdate) SetCountryCodeEnum(s string) *CountryListUpdate {
	clu.mutation.SetCountryCodeEnum(s)
	return clu
}

// SetNillableCountryCodeEnum sets the "country_code_enum" field if the given value is not nil.
func (clu *CountryListUpdate) SetNillableCountryCodeEnum(s *string) *CountryListUpdate {
	if s != nil {
		clu.SetCountryCodeEnum(*s)
	}
	return clu
}

// SetIso sets the "iso" field.
func (clu *CountryListUpdate) SetIso(s string) *CountryListUpdate {
	clu.mutation.SetIso(s)
	return clu
}

// SetNillableIso sets the "iso" field if the given value is not nil.
func (clu *CountryListUpdate) SetNillableIso(s *string) *CountryListUpdate {
	if s != nil {
		clu.SetIso(*s)
	}
	return clu
}

// SetCountryRegion sets the "country_region" field.
func (clu *CountryListUpdate) SetCountryRegion(s string) *CountryListUpdate {
	clu.mutation.SetCountryRegion(s)
	return clu
}

// SetNillableCountryRegion sets the "country_region" field if the given value is not nil.
func (clu *CountryListUpdate) SetNillableCountryRegion(s *string) *CountryListUpdate {
	if s != nil {
		clu.SetCountryRegion(*s)
	}
	return clu
}

// SetCountrySubregion sets the "country_subregion" field.
func (clu *CountryListUpdate) SetCountrySubregion(s string) *CountryListUpdate {
	clu.mutation.SetCountrySubregion(s)
	return clu
}

// SetNillableCountrySubregion sets the "country_subregion" field if the given value is not nil.
func (clu *CountryListUpdate) SetNillableCountrySubregion(s *string) *CountryListUpdate {
	if s != nil {
		clu.SetCountrySubregion(*s)
	}
	return clu
}

// SetCountryRegionCode sets the "country_region_code" field.
func (clu *CountryListUpdate) SetCountryRegionCode(s string) *CountryListUpdate {
	clu.mutation.SetCountryRegionCode(s)
	return clu
}

// SetNillableCountryRegionCode sets the "country_region_code" field if the given value is not nil.
func (clu *CountryListUpdate) SetNillableCountryRegionCode(s *string) *CountryListUpdate {
	if s != nil {
		clu.SetCountryRegionCode(*s)
	}
	return clu
}

// SetCountrySubRegionCode sets the "country_sub_region_code" field.
func (clu *CountryListUpdate) SetCountrySubRegionCode(s string) *CountryListUpdate {
	clu.mutation.SetCountrySubRegionCode(s)
	return clu
}

// SetNillableCountrySubRegionCode sets the "country_sub_region_code" field if the given value is not nil.
func (clu *CountryListUpdate) SetNillableCountrySubRegionCode(s *string) *CountryListUpdate {
	if s != nil {
		clu.SetCountrySubRegionCode(*s)
	}
	return clu
}

// Mutation returns the CountryListMutation object of the builder.
func (clu *CountryListUpdate) Mutation() *CountryListMutation {
	return clu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *CountryListUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, clu.sqlSave, clu.mutation, clu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clu *CountryListUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *CountryListUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *CountryListUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (clu *CountryListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(countrylist.Table, countrylist.Columns, sqlgraph.NewFieldSpec(countrylist.FieldID, field.TypeInt))
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clu.mutation.CountryName(); ok {
		_spec.SetField(countrylist.FieldCountryName, field.TypeString, value)
	}
	if value, ok := clu.mutation.Alpha2Code(); ok {
		_spec.SetField(countrylist.FieldAlpha2Code, field.TypeString, value)
	}
	if value, ok := clu.mutation.Alpha3Code(); ok {
		_spec.SetField(countrylist.FieldAlpha3Code, field.TypeString, value)
	}
	if value, ok := clu.mutation.CountryCodeEnum(); ok {
		_spec.SetField(countrylist.FieldCountryCodeEnum, field.TypeString, value)
	}
	if value, ok := clu.mutation.Iso(); ok {
		_spec.SetField(countrylist.FieldIso, field.TypeString, value)
	}
	if value, ok := clu.mutation.CountryRegion(); ok {
		_spec.SetField(countrylist.FieldCountryRegion, field.TypeString, value)
	}
	if value, ok := clu.mutation.CountrySubregion(); ok {
		_spec.SetField(countrylist.FieldCountrySubregion, field.TypeString, value)
	}
	if value, ok := clu.mutation.CountryRegionCode(); ok {
		_spec.SetField(countrylist.FieldCountryRegionCode, field.TypeString, value)
	}
	if value, ok := clu.mutation.CountrySubRegionCode(); ok {
		_spec.SetField(countrylist.FieldCountrySubRegionCode, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{countrylist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clu.mutation.done = true
	return n, nil
}

// CountryListUpdateOne is the builder for updating a single CountryList entity.
type CountryListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CountryListMutation
}

// SetCountryName sets the "country_name" field.
func (cluo *CountryListUpdateOne) SetCountryName(s string) *CountryListUpdateOne {
	cluo.mutation.SetCountryName(s)
	return cluo
}

// SetNillableCountryName sets the "country_name" field if the given value is not nil.
func (cluo *CountryListUpdateOne) SetNillableCountryName(s *string) *CountryListUpdateOne {
	if s != nil {
		cluo.SetCountryName(*s)
	}
	return cluo
}

// SetAlpha2Code sets the "alpha_2_code" field.
func (cluo *CountryListUpdateOne) SetAlpha2Code(s string) *CountryListUpdateOne {
	cluo.mutation.SetAlpha2Code(s)
	return cluo
}

// SetNillableAlpha2Code sets the "alpha_2_code" field if the given value is not nil.
func (cluo *CountryListUpdateOne) SetNillableAlpha2Code(s *string) *CountryListUpdateOne {
	if s != nil {
		cluo.SetAlpha2Code(*s)
	}
	return cluo
}

// SetAlpha3Code sets the "alpha_3_code" field.
func (cluo *CountryListUpdateOne) SetAlpha3Code(s string) *CountryListUpdateOne {
	cluo.mutation.SetAlpha3Code(s)
	return cluo
}

// SetNillableAlpha3Code sets the "alpha_3_code" field if the given value is not nil.
func (cluo *CountryListUpdateOne) SetNillableAlpha3Code(s *string) *CountryListUpdateOne {
	if s != nil {
		cluo.SetAlpha3Code(*s)
	}
	return cluo
}

// SetCountryCodeEnum sets the "country_code_enum" field.
func (cluo *CountryListUpdateOne) SetCountryCodeEnum(s string) *CountryListUpdateOne {
	cluo.mutation.SetCountryCodeEnum(s)
	return cluo
}

// SetNillableCountryCodeEnum sets the "country_code_enum" field if the given value is not nil.
func (cluo *CountryListUpdateOne) SetNillableCountryCodeEnum(s *string) *CountryListUpdateOne {
	if s != nil {
		cluo.SetCountryCodeEnum(*s)
	}
	return cluo
}

// SetIso sets the "iso" field.
func (cluo *CountryListUpdateOne) SetIso(s string) *CountryListUpdateOne {
	cluo.mutation.SetIso(s)
	return cluo
}

// SetNillableIso sets the "iso" field if the given value is not nil.
func (cluo *CountryListUpdateOne) SetNillableIso(s *string) *CountryListUpdateOne {
	if s != nil {
		cluo.SetIso(*s)
	}
	return cluo
}

// SetCountryRegion sets the "country_region" field.
func (cluo *CountryListUpdateOne) SetCountryRegion(s string) *CountryListUpdateOne {
	cluo.mutation.SetCountryRegion(s)
	return cluo
}

// SetNillableCountryRegion sets the "country_region" field if the given value is not nil.
func (cluo *CountryListUpdateOne) SetNillableCountryRegion(s *string) *CountryListUpdateOne {
	if s != nil {
		cluo.SetCountryRegion(*s)
	}
	return cluo
}

// SetCountrySubregion sets the "country_subregion" field.
func (cluo *CountryListUpdateOne) SetCountrySubregion(s string) *CountryListUpdateOne {
	cluo.mutation.SetCountrySubregion(s)
	return cluo
}

// SetNillableCountrySubregion sets the "country_subregion" field if the given value is not nil.
func (cluo *CountryListUpdateOne) SetNillableCountrySubregion(s *string) *CountryListUpdateOne {
	if s != nil {
		cluo.SetCountrySubregion(*s)
	}
	return cluo
}

// SetCountryRegionCode sets the "country_region_code" field.
func (cluo *CountryListUpdateOne) SetCountryRegionCode(s string) *CountryListUpdateOne {
	cluo.mutation.SetCountryRegionCode(s)
	return cluo
}

// SetNillableCountryRegionCode sets the "country_region_code" field if the given value is not nil.
func (cluo *CountryListUpdateOne) SetNillableCountryRegionCode(s *string) *CountryListUpdateOne {
	if s != nil {
		cluo.SetCountryRegionCode(*s)
	}
	return cluo
}

// SetCountrySubRegionCode sets the "country_sub_region_code" field.
func (cluo *CountryListUpdateOne) SetCountrySubRegionCode(s string) *CountryListUpdateOne {
	cluo.mutation.SetCountrySubRegionCode(s)
	return cluo
}

// SetNillableCountrySubRegionCode sets the "country_sub_region_code" field if the given value is not nil.
func (cluo *CountryListUpdateOne) SetNillableCountrySubRegionCode(s *string) *CountryListUpdateOne {
	if s != nil {
		cluo.SetCountrySubRegionCode(*s)
	}
	return cluo
}

// Mutation returns the CountryListMutation object of the builder.
func (cluo *CountryListUpdateOne) Mutation() *CountryListMutation {
	return cluo.mutation
}

// Where appends a list predicates to the CountryListUpdate builder.
func (cluo *CountryListUpdateOne) Where(ps ...predicate.CountryList) *CountryListUpdateOne {
	cluo.mutation.Where(ps...)
	return cluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *CountryListUpdateOne) Select(field string, fields ...string) *CountryListUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated CountryList entity.
func (cluo *CountryListUpdateOne) Save(ctx context.Context) (*CountryList, error) {
	return withHooks(ctx, cluo.sqlSave, cluo.mutation, cluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *CountryListUpdateOne) SaveX(ctx context.Context) *CountryList {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *CountryListUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *CountryListUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cluo *CountryListUpdateOne) sqlSave(ctx context.Context) (_node *CountryList, err error) {
	_spec := sqlgraph.NewUpdateSpec(countrylist.Table, countrylist.Columns, sqlgraph.NewFieldSpec(countrylist.FieldID, field.TypeInt))
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CountryList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, countrylist.FieldID)
		for _, f := range fields {
			if !countrylist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != countrylist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cluo.mutation.CountryName(); ok {
		_spec.SetField(countrylist.FieldCountryName, field.TypeString, value)
	}
	if value, ok := cluo.mutation.Alpha2Code(); ok {
		_spec.SetField(countrylist.FieldAlpha2Code, field.TypeString, value)
	}
	if value, ok := cluo.mutation.Alpha3Code(); ok {
		_spec.SetField(countrylist.FieldAlpha3Code, field.TypeString, value)
	}
	if value, ok := cluo.mutation.CountryCodeEnum(); ok {
		_spec.SetField(countrylist.FieldCountryCodeEnum, field.TypeString, value)
	}
	if value, ok := cluo.mutation.Iso(); ok {
		_spec.SetField(countrylist.FieldIso, field.TypeString, value)
	}
	if value, ok := cluo.mutation.CountryRegion(); ok {
		_spec.SetField(countrylist.FieldCountryRegion, field.TypeString, value)
	}
	if value, ok := cluo.mutation.CountrySubregion(); ok {
		_spec.SetField(countrylist.FieldCountrySubregion, field.TypeString, value)
	}
	if value, ok := cluo.mutation.CountryRegionCode(); ok {
		_spec.SetField(countrylist.FieldCountryRegionCode, field.TypeString, value)
	}
	if value, ok := cluo.mutation.CountrySubRegionCode(); ok {
		_spec.SetField(countrylist.FieldCountrySubRegionCode, field.TypeString, value)
	}
	_node = &CountryList{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{countrylist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cluo.mutation.done = true
	return _node, nil
}
