// Code generated by ent, DO NOT EDIT.

package tuberequirement

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tuberequirement type in the database.
	Label = "tube_requirement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSampleID holds the string denoting the sample_id field in the database.
	FieldSampleID = "sample_id"
	// FieldTubeType holds the string denoting the tube_type field in the database.
	FieldTubeType = "tube_type"
	// FieldRequiredCount holds the string denoting the required_count field in the database.
	FieldRequiredCount = "required_count"
	// FieldRequiredCountCreateTime holds the string denoting the required_count_create_time field in the database.
	FieldRequiredCountCreateTime = "required_count_create_time"
	// FieldRequiredBy holds the string denoting the required_by field in the database.
	FieldRequiredBy = "required_by"
	// FieldModifiedBy holds the string denoting the modified_by field in the database.
	FieldModifiedBy = "modified_by"
	// FieldModifiedTime holds the string denoting the modified_time field in the database.
	FieldModifiedTime = "modified_time"
	// EdgeSample holds the string denoting the sample edge name in mutations.
	EdgeSample = "sample"
	// SampleFieldID holds the string denoting the ID field of the Sample.
	SampleFieldID = "sample_id"
	// Table holds the table name of the tuberequirement in the database.
	Table = "tube_requirement"
	// SampleTable is the table that holds the sample relation/edge.
	SampleTable = "tube_requirement"
	// SampleInverseTable is the table name for the Sample entity.
	// It exists in this package in order to avoid circular dependency with the "sample" package.
	SampleInverseTable = "sample"
	// SampleColumn is the table column denoting the sample relation/edge.
	SampleColumn = "sample_id"
)

// Columns holds all SQL columns for tuberequirement fields.
var Columns = []string{
	FieldID,
	FieldSampleID,
	FieldTubeType,
	FieldRequiredCount,
	FieldRequiredCountCreateTime,
	FieldRequiredBy,
	FieldModifiedBy,
	FieldModifiedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRequiredCountCreateTime holds the default value on creation for the "required_count_create_time" field.
	DefaultRequiredCountCreateTime func() time.Time
	// DefaultModifiedTime holds the default value on creation for the "modified_time" field.
	DefaultModifiedTime func() time.Time
	// UpdateDefaultModifiedTime holds the default value on update for the "modified_time" field.
	UpdateDefaultModifiedTime func() time.Time
)

// OrderOption defines the ordering options for the TubeRequirement queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySampleID orders the results by the sample_id field.
func BySampleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSampleID, opts...).ToFunc()
}

// ByTubeType orders the results by the tube_type field.
func ByTubeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTubeType, opts...).ToFunc()
}

// ByRequiredCount orders the results by the required_count field.
func ByRequiredCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequiredCount, opts...).ToFunc()
}

// ByRequiredCountCreateTime orders the results by the required_count_create_time field.
func ByRequiredCountCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequiredCountCreateTime, opts...).ToFunc()
}

// ByRequiredBy orders the results by the required_by field.
func ByRequiredBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequiredBy, opts...).ToFunc()
}

// ByModifiedBy orders the results by the modified_by field.
func ByModifiedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedBy, opts...).ToFunc()
}

// ByModifiedTime orders the results by the modified_time field.
func ByModifiedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedTime, opts...).ToFunc()
}

// BySampleField orders the results by sample field.
func BySampleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSampleStep(), sql.OrderByField(field, opts...))
	}
}
func newSampleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SampleInverseTable, SampleFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SampleTable, SampleColumn),
	)
}
