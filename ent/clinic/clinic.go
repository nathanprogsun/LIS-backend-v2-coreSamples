// Code generated by ent, DO NOT EDIT.

package clinic

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the clinic type in the database.
	Label = "clinic"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "clinic_id"
	// FieldClinicName holds the string denoting the clinic_name field in the database.
	FieldClinicName = "clinic_name"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "isActive"
	// FieldClinicAccountID holds the string denoting the clinic_account_id field in the database.
	FieldClinicAccountID = "clinic_account_id"
	// FieldClinicNameOldSystem holds the string denoting the clinic_name_old_system field in the database.
	FieldClinicNameOldSystem = "clinic_name_old_system"
	// FieldClinicSignupTime holds the string denoting the clinic_signup_time field in the database.
	FieldClinicSignupTime = "clinic_signup_time"
	// FieldClinicUpdatedTime holds the string denoting the clinic_updated_time field in the database.
	FieldClinicUpdatedTime = "clinic_updated_time"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeClinicContacts holds the string denoting the clinic_contacts edge name in mutations.
	EdgeClinicContacts = "clinic_contacts"
	// EdgeClinicAddresses holds the string denoting the clinic_addresses edge name in mutations.
	EdgeClinicAddresses = "clinic_addresses"
	// EdgeCustomers holds the string denoting the customers edge name in mutations.
	EdgeCustomers = "customers"
	// EdgeClinicSettings holds the string denoting the clinic_settings edge name in mutations.
	EdgeClinicSettings = "clinic_settings"
	// EdgeClinicOrders holds the string denoting the clinic_orders edge name in mutations.
	EdgeClinicOrders = "clinic_orders"
	// EdgeClinicPatients holds the string denoting the clinic_patients edge name in mutations.
	EdgeClinicPatients = "clinic_patients"
	// EdgeClinicBetaProgramParticipations holds the string denoting the clinic_beta_program_participations edge name in mutations.
	EdgeClinicBetaProgramParticipations = "clinic_beta_program_participations"
	// EdgeClinicCustomerSettings holds the string denoting the clinic_customer_settings edge name in mutations.
	EdgeClinicCustomerSettings = "clinic_customer_settings"
	// EdgeClinicCustomerAddresses holds the string denoting the clinic_customer_addresses edge name in mutations.
	EdgeClinicCustomerAddresses = "clinic_customer_addresses"
	// EdgeClinicCustomerContacts holds the string denoting the clinic_customer_contacts edge name in mutations.
	EdgeClinicCustomerContacts = "clinic_customer_contacts"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "user_id"
	// ContactFieldID holds the string denoting the ID field of the Contact.
	ContactFieldID = "contact_id"
	// AddressFieldID holds the string denoting the ID field of the Address.
	AddressFieldID = "address_id"
	// CustomerFieldID holds the string denoting the ID field of the Customer.
	CustomerFieldID = "customer_id"
	// SettingFieldID holds the string denoting the ID field of the Setting.
	SettingFieldID = "setting_id"
	// OrderInfoFieldID holds the string denoting the ID field of the OrderInfo.
	OrderInfoFieldID = "order_id"
	// PatientFieldID holds the string denoting the ID field of the Patient.
	PatientFieldID = "patient_id"
	// BetaProgramParticipationFieldID holds the string denoting the ID field of the BetaProgramParticipation.
	BetaProgramParticipationFieldID = "id"
	// CustomerSettingOnClinicsFieldID holds the string denoting the ID field of the CustomerSettingOnClinics.
	CustomerSettingOnClinicsFieldID = "id"
	// CustomerAddressOnClinicsFieldID holds the string denoting the ID field of the CustomerAddressOnClinics.
	CustomerAddressOnClinicsFieldID = "id"
	// CustomerContactOnClinicsFieldID holds the string denoting the ID field of the CustomerContactOnClinics.
	CustomerContactOnClinicsFieldID = "id"
	// Table holds the table name of the clinic in the database.
	Table = "clinic"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "clinic"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "user"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// ClinicContactsTable is the table that holds the clinic_contacts relation/edge.
	ClinicContactsTable = "contact"
	// ClinicContactsInverseTable is the table name for the Contact entity.
	// It exists in this package in order to avoid circular dependency with the "contact" package.
	ClinicContactsInverseTable = "contact"
	// ClinicContactsColumn is the table column denoting the clinic_contacts relation/edge.
	ClinicContactsColumn = "clinic_id"
	// ClinicAddressesTable is the table that holds the clinic_addresses relation/edge.
	ClinicAddressesTable = "address"
	// ClinicAddressesInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	ClinicAddressesInverseTable = "address"
	// ClinicAddressesColumn is the table column denoting the clinic_addresses relation/edge.
	ClinicAddressesColumn = "clinic_id"
	// CustomersTable is the table that holds the customers relation/edge. The primary key declared below.
	CustomersTable = "clinic_customers"
	// CustomersInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomersInverseTable = "customer"
	// ClinicSettingsTable is the table that holds the clinic_settings relation/edge. The primary key declared below.
	ClinicSettingsTable = "clinic_clinic_settings"
	// ClinicSettingsInverseTable is the table name for the Setting entity.
	// It exists in this package in order to avoid circular dependency with the "setting" package.
	ClinicSettingsInverseTable = "setting"
	// ClinicOrdersTable is the table that holds the clinic_orders relation/edge.
	ClinicOrdersTable = "order_info"
	// ClinicOrdersInverseTable is the table name for the OrderInfo entity.
	// It exists in this package in order to avoid circular dependency with the "orderinfo" package.
	ClinicOrdersInverseTable = "order_info"
	// ClinicOrdersColumn is the table column denoting the clinic_orders relation/edge.
	ClinicOrdersColumn = "clinic_id"
	// ClinicPatientsTable is the table that holds the clinic_patients relation/edge. The primary key declared below.
	ClinicPatientsTable = "clinic_clinic_patients"
	// ClinicPatientsInverseTable is the table name for the Patient entity.
	// It exists in this package in order to avoid circular dependency with the "patient" package.
	ClinicPatientsInverseTable = "patient"
	// ClinicBetaProgramParticipationsTable is the table that holds the clinic_beta_program_participations relation/edge.
	ClinicBetaProgramParticipationsTable = "beta_program_participations"
	// ClinicBetaProgramParticipationsInverseTable is the table name for the BetaProgramParticipation entity.
	// It exists in this package in order to avoid circular dependency with the "betaprogramparticipation" package.
	ClinicBetaProgramParticipationsInverseTable = "beta_program_participations"
	// ClinicBetaProgramParticipationsColumn is the table column denoting the clinic_beta_program_participations relation/edge.
	ClinicBetaProgramParticipationsColumn = "clinic_id"
	// ClinicCustomerSettingsTable is the table that holds the clinic_customer_settings relation/edge.
	ClinicCustomerSettingsTable = "customer_setting_on_clinics"
	// ClinicCustomerSettingsInverseTable is the table name for the CustomerSettingOnClinics entity.
	// It exists in this package in order to avoid circular dependency with the "customersettingonclinics" package.
	ClinicCustomerSettingsInverseTable = "customer_setting_on_clinics"
	// ClinicCustomerSettingsColumn is the table column denoting the clinic_customer_settings relation/edge.
	ClinicCustomerSettingsColumn = "clinic_id"
	// ClinicCustomerAddressesTable is the table that holds the clinic_customer_addresses relation/edge.
	ClinicCustomerAddressesTable = "customer_address_on_clinics"
	// ClinicCustomerAddressesInverseTable is the table name for the CustomerAddressOnClinics entity.
	// It exists in this package in order to avoid circular dependency with the "customeraddressonclinics" package.
	ClinicCustomerAddressesInverseTable = "customer_address_on_clinics"
	// ClinicCustomerAddressesColumn is the table column denoting the clinic_customer_addresses relation/edge.
	ClinicCustomerAddressesColumn = "clinic_id"
	// ClinicCustomerContactsTable is the table that holds the clinic_customer_contacts relation/edge.
	ClinicCustomerContactsTable = "customer_contact_on_clinics"
	// ClinicCustomerContactsInverseTable is the table name for the CustomerContactOnClinics entity.
	// It exists in this package in order to avoid circular dependency with the "customercontactonclinics" package.
	ClinicCustomerContactsInverseTable = "customer_contact_on_clinics"
	// ClinicCustomerContactsColumn is the table column denoting the clinic_customer_contacts relation/edge.
	ClinicCustomerContactsColumn = "clinic_id"
)

// Columns holds all SQL columns for clinic fields.
var Columns = []string{
	FieldID,
	FieldClinicName,
	FieldUserID,
	FieldIsActive,
	FieldClinicAccountID,
	FieldClinicNameOldSystem,
	FieldClinicSignupTime,
	FieldClinicUpdatedTime,
}

var (
	// CustomersPrimaryKey and CustomersColumn2 are the table columns denoting the
	// primary key for the customers relation (M2M).
	CustomersPrimaryKey = []string{"clinic_id", "customer_id"}
	// ClinicSettingsPrimaryKey and ClinicSettingsColumn2 are the table columns denoting the
	// primary key for the clinic_settings relation (M2M).
	ClinicSettingsPrimaryKey = []string{"clinic_id", "setting_id"}
	// ClinicPatientsPrimaryKey and ClinicPatientsColumn2 are the table columns denoting the
	// primary key for the clinic_patients relation (M2M).
	ClinicPatientsPrimaryKey = []string{"clinic_id", "patient_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultClinicSignupTime holds the default value on creation for the "clinic_signup_time" field.
	DefaultClinicSignupTime func() time.Time
	// UpdateDefaultClinicUpdatedTime holds the default value on update for the "clinic_updated_time" field.
	UpdateDefaultClinicUpdatedTime func() time.Time
)

// OrderOption defines the ordering options for the Clinic queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByClinicName orders the results by the clinic_name field.
func ByClinicName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClinicName, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByClinicAccountID orders the results by the clinic_account_id field.
func ByClinicAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClinicAccountID, opts...).ToFunc()
}

// ByClinicNameOldSystem orders the results by the clinic_name_old_system field.
func ByClinicNameOldSystem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClinicNameOldSystem, opts...).ToFunc()
}

// ByClinicSignupTime orders the results by the clinic_signup_time field.
func ByClinicSignupTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClinicSignupTime, opts...).ToFunc()
}

// ByClinicUpdatedTime orders the results by the clinic_updated_time field.
func ByClinicUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClinicUpdatedTime, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByClinicContactsCount orders the results by clinic_contacts count.
func ByClinicContactsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClinicContactsStep(), opts...)
	}
}

// ByClinicContacts orders the results by clinic_contacts terms.
func ByClinicContacts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicContactsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClinicAddressesCount orders the results by clinic_addresses count.
func ByClinicAddressesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClinicAddressesStep(), opts...)
	}
}

// ByClinicAddresses orders the results by clinic_addresses terms.
func ByClinicAddresses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicAddressesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCustomersCount orders the results by customers count.
func ByCustomersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCustomersStep(), opts...)
	}
}

// ByCustomers orders the results by customers terms.
func ByCustomers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClinicSettingsCount orders the results by clinic_settings count.
func ByClinicSettingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClinicSettingsStep(), opts...)
	}
}

// ByClinicSettings orders the results by clinic_settings terms.
func ByClinicSettings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicSettingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClinicOrdersCount orders the results by clinic_orders count.
func ByClinicOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClinicOrdersStep(), opts...)
	}
}

// ByClinicOrders orders the results by clinic_orders terms.
func ByClinicOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClinicPatientsCount orders the results by clinic_patients count.
func ByClinicPatientsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClinicPatientsStep(), opts...)
	}
}

// ByClinicPatients orders the results by clinic_patients terms.
func ByClinicPatients(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicPatientsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClinicBetaProgramParticipationsCount orders the results by clinic_beta_program_participations count.
func ByClinicBetaProgramParticipationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClinicBetaProgramParticipationsStep(), opts...)
	}
}

// ByClinicBetaProgramParticipations orders the results by clinic_beta_program_participations terms.
func ByClinicBetaProgramParticipations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicBetaProgramParticipationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClinicCustomerSettingsCount orders the results by clinic_customer_settings count.
func ByClinicCustomerSettingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClinicCustomerSettingsStep(), opts...)
	}
}

// ByClinicCustomerSettings orders the results by clinic_customer_settings terms.
func ByClinicCustomerSettings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicCustomerSettingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClinicCustomerAddressesCount orders the results by clinic_customer_addresses count.
func ByClinicCustomerAddressesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClinicCustomerAddressesStep(), opts...)
	}
}

// ByClinicCustomerAddresses orders the results by clinic_customer_addresses terms.
func ByClinicCustomerAddresses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicCustomerAddressesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClinicCustomerContactsCount orders the results by clinic_customer_contacts count.
func ByClinicCustomerContactsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClinicCustomerContactsStep(), opts...)
	}
}

// ByClinicCustomerContacts orders the results by clinic_customer_contacts terms.
func ByClinicCustomerContacts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicCustomerContactsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newClinicContactsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicContactsInverseTable, ContactFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClinicContactsTable, ClinicContactsColumn),
	)
}
func newClinicAddressesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicAddressesInverseTable, AddressFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClinicAddressesTable, ClinicAddressesColumn),
	)
}
func newCustomersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomersInverseTable, CustomerFieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CustomersTable, CustomersPrimaryKey...),
	)
}
func newClinicSettingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicSettingsInverseTable, SettingFieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ClinicSettingsTable, ClinicSettingsPrimaryKey...),
	)
}
func newClinicOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicOrdersInverseTable, OrderInfoFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClinicOrdersTable, ClinicOrdersColumn),
	)
}
func newClinicPatientsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicPatientsInverseTable, PatientFieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ClinicPatientsTable, ClinicPatientsPrimaryKey...),
	)
}
func newClinicBetaProgramParticipationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicBetaProgramParticipationsInverseTable, BetaProgramParticipationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClinicBetaProgramParticipationsTable, ClinicBetaProgramParticipationsColumn),
	)
}
func newClinicCustomerSettingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicCustomerSettingsInverseTable, CustomerSettingOnClinicsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClinicCustomerSettingsTable, ClinicCustomerSettingsColumn),
	)
}
func newClinicCustomerAddressesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicCustomerAddressesInverseTable, CustomerAddressOnClinicsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClinicCustomerAddressesTable, ClinicCustomerAddressesColumn),
	)
}
func newClinicCustomerContactsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicCustomerContactsInverseTable, CustomerContactOnClinicsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClinicCustomerContactsTable, ClinicCustomerContactsColumn),
	)
}
