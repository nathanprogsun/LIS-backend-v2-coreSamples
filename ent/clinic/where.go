// Code generated by ent, DO NOT EDIT.

package clinic

import (
	"coresamples/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Clinic {
	return predicate.Clinic(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Clinic {
	return predicate.Clinic(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Clinic {
	return predicate.Clinic(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Clinic {
	return predicate.Clinic(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Clinic {
	return predicate.Clinic(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Clinic {
	return predicate.Clinic(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Clinic {
	return predicate.Clinic(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Clinic {
	return predicate.Clinic(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Clinic {
	return predicate.Clinic(sql.FieldLTE(FieldID, id))
}

// ClinicName applies equality check predicate on the "clinic_name" field. It's identical to ClinicNameEQ.
func ClinicName(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldEQ(FieldClinicName, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Clinic {
	return predicate.Clinic(sql.FieldEQ(FieldUserID, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Clinic {
	return predicate.Clinic(sql.FieldEQ(FieldIsActive, v))
}

// ClinicAccountID applies equality check predicate on the "clinic_account_id" field. It's identical to ClinicAccountIDEQ.
func ClinicAccountID(v int) predicate.Clinic {
	return predicate.Clinic(sql.FieldEQ(FieldClinicAccountID, v))
}

// ClinicNameOldSystem applies equality check predicate on the "clinic_name_old_system" field. It's identical to ClinicNameOldSystemEQ.
func ClinicNameOldSystem(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldEQ(FieldClinicNameOldSystem, v))
}

// ClinicSignupTime applies equality check predicate on the "clinic_signup_time" field. It's identical to ClinicSignupTimeEQ.
func ClinicSignupTime(v time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldEQ(FieldClinicSignupTime, v))
}

// ClinicUpdatedTime applies equality check predicate on the "clinic_updated_time" field. It's identical to ClinicUpdatedTimeEQ.
func ClinicUpdatedTime(v time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldEQ(FieldClinicUpdatedTime, v))
}

// ClinicNameEQ applies the EQ predicate on the "clinic_name" field.
func ClinicNameEQ(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldEQ(FieldClinicName, v))
}

// ClinicNameNEQ applies the NEQ predicate on the "clinic_name" field.
func ClinicNameNEQ(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldNEQ(FieldClinicName, v))
}

// ClinicNameIn applies the In predicate on the "clinic_name" field.
func ClinicNameIn(vs ...string) predicate.Clinic {
	return predicate.Clinic(sql.FieldIn(FieldClinicName, vs...))
}

// ClinicNameNotIn applies the NotIn predicate on the "clinic_name" field.
func ClinicNameNotIn(vs ...string) predicate.Clinic {
	return predicate.Clinic(sql.FieldNotIn(FieldClinicName, vs...))
}

// ClinicNameGT applies the GT predicate on the "clinic_name" field.
func ClinicNameGT(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldGT(FieldClinicName, v))
}

// ClinicNameGTE applies the GTE predicate on the "clinic_name" field.
func ClinicNameGTE(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldGTE(FieldClinicName, v))
}

// ClinicNameLT applies the LT predicate on the "clinic_name" field.
func ClinicNameLT(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldLT(FieldClinicName, v))
}

// ClinicNameLTE applies the LTE predicate on the "clinic_name" field.
func ClinicNameLTE(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldLTE(FieldClinicName, v))
}

// ClinicNameContains applies the Contains predicate on the "clinic_name" field.
func ClinicNameContains(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldContains(FieldClinicName, v))
}

// ClinicNameHasPrefix applies the HasPrefix predicate on the "clinic_name" field.
func ClinicNameHasPrefix(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldHasPrefix(FieldClinicName, v))
}

// ClinicNameHasSuffix applies the HasSuffix predicate on the "clinic_name" field.
func ClinicNameHasSuffix(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldHasSuffix(FieldClinicName, v))
}

// ClinicNameEqualFold applies the EqualFold predicate on the "clinic_name" field.
func ClinicNameEqualFold(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldEqualFold(FieldClinicName, v))
}

// ClinicNameContainsFold applies the ContainsFold predicate on the "clinic_name" field.
func ClinicNameContainsFold(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldContainsFold(FieldClinicName, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Clinic {
	return predicate.Clinic(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Clinic {
	return predicate.Clinic(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Clinic {
	return predicate.Clinic(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Clinic {
	return predicate.Clinic(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Clinic {
	return predicate.Clinic(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Clinic {
	return predicate.Clinic(sql.FieldNotNull(FieldUserID))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Clinic {
	return predicate.Clinic(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Clinic {
	return predicate.Clinic(sql.FieldNEQ(FieldIsActive, v))
}

// ClinicAccountIDEQ applies the EQ predicate on the "clinic_account_id" field.
func ClinicAccountIDEQ(v int) predicate.Clinic {
	return predicate.Clinic(sql.FieldEQ(FieldClinicAccountID, v))
}

// ClinicAccountIDNEQ applies the NEQ predicate on the "clinic_account_id" field.
func ClinicAccountIDNEQ(v int) predicate.Clinic {
	return predicate.Clinic(sql.FieldNEQ(FieldClinicAccountID, v))
}

// ClinicAccountIDIn applies the In predicate on the "clinic_account_id" field.
func ClinicAccountIDIn(vs ...int) predicate.Clinic {
	return predicate.Clinic(sql.FieldIn(FieldClinicAccountID, vs...))
}

// ClinicAccountIDNotIn applies the NotIn predicate on the "clinic_account_id" field.
func ClinicAccountIDNotIn(vs ...int) predicate.Clinic {
	return predicate.Clinic(sql.FieldNotIn(FieldClinicAccountID, vs...))
}

// ClinicAccountIDGT applies the GT predicate on the "clinic_account_id" field.
func ClinicAccountIDGT(v int) predicate.Clinic {
	return predicate.Clinic(sql.FieldGT(FieldClinicAccountID, v))
}

// ClinicAccountIDGTE applies the GTE predicate on the "clinic_account_id" field.
func ClinicAccountIDGTE(v int) predicate.Clinic {
	return predicate.Clinic(sql.FieldGTE(FieldClinicAccountID, v))
}

// ClinicAccountIDLT applies the LT predicate on the "clinic_account_id" field.
func ClinicAccountIDLT(v int) predicate.Clinic {
	return predicate.Clinic(sql.FieldLT(FieldClinicAccountID, v))
}

// ClinicAccountIDLTE applies the LTE predicate on the "clinic_account_id" field.
func ClinicAccountIDLTE(v int) predicate.Clinic {
	return predicate.Clinic(sql.FieldLTE(FieldClinicAccountID, v))
}

// ClinicAccountIDIsNil applies the IsNil predicate on the "clinic_account_id" field.
func ClinicAccountIDIsNil() predicate.Clinic {
	return predicate.Clinic(sql.FieldIsNull(FieldClinicAccountID))
}

// ClinicAccountIDNotNil applies the NotNil predicate on the "clinic_account_id" field.
func ClinicAccountIDNotNil() predicate.Clinic {
	return predicate.Clinic(sql.FieldNotNull(FieldClinicAccountID))
}

// ClinicNameOldSystemEQ applies the EQ predicate on the "clinic_name_old_system" field.
func ClinicNameOldSystemEQ(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldEQ(FieldClinicNameOldSystem, v))
}

// ClinicNameOldSystemNEQ applies the NEQ predicate on the "clinic_name_old_system" field.
func ClinicNameOldSystemNEQ(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldNEQ(FieldClinicNameOldSystem, v))
}

// ClinicNameOldSystemIn applies the In predicate on the "clinic_name_old_system" field.
func ClinicNameOldSystemIn(vs ...string) predicate.Clinic {
	return predicate.Clinic(sql.FieldIn(FieldClinicNameOldSystem, vs...))
}

// ClinicNameOldSystemNotIn applies the NotIn predicate on the "clinic_name_old_system" field.
func ClinicNameOldSystemNotIn(vs ...string) predicate.Clinic {
	return predicate.Clinic(sql.FieldNotIn(FieldClinicNameOldSystem, vs...))
}

// ClinicNameOldSystemGT applies the GT predicate on the "clinic_name_old_system" field.
func ClinicNameOldSystemGT(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldGT(FieldClinicNameOldSystem, v))
}

// ClinicNameOldSystemGTE applies the GTE predicate on the "clinic_name_old_system" field.
func ClinicNameOldSystemGTE(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldGTE(FieldClinicNameOldSystem, v))
}

// ClinicNameOldSystemLT applies the LT predicate on the "clinic_name_old_system" field.
func ClinicNameOldSystemLT(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldLT(FieldClinicNameOldSystem, v))
}

// ClinicNameOldSystemLTE applies the LTE predicate on the "clinic_name_old_system" field.
func ClinicNameOldSystemLTE(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldLTE(FieldClinicNameOldSystem, v))
}

// ClinicNameOldSystemContains applies the Contains predicate on the "clinic_name_old_system" field.
func ClinicNameOldSystemContains(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldContains(FieldClinicNameOldSystem, v))
}

// ClinicNameOldSystemHasPrefix applies the HasPrefix predicate on the "clinic_name_old_system" field.
func ClinicNameOldSystemHasPrefix(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldHasPrefix(FieldClinicNameOldSystem, v))
}

// ClinicNameOldSystemHasSuffix applies the HasSuffix predicate on the "clinic_name_old_system" field.
func ClinicNameOldSystemHasSuffix(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldHasSuffix(FieldClinicNameOldSystem, v))
}

// ClinicNameOldSystemIsNil applies the IsNil predicate on the "clinic_name_old_system" field.
func ClinicNameOldSystemIsNil() predicate.Clinic {
	return predicate.Clinic(sql.FieldIsNull(FieldClinicNameOldSystem))
}

// ClinicNameOldSystemNotNil applies the NotNil predicate on the "clinic_name_old_system" field.
func ClinicNameOldSystemNotNil() predicate.Clinic {
	return predicate.Clinic(sql.FieldNotNull(FieldClinicNameOldSystem))
}

// ClinicNameOldSystemEqualFold applies the EqualFold predicate on the "clinic_name_old_system" field.
func ClinicNameOldSystemEqualFold(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldEqualFold(FieldClinicNameOldSystem, v))
}

// ClinicNameOldSystemContainsFold applies the ContainsFold predicate on the "clinic_name_old_system" field.
func ClinicNameOldSystemContainsFold(v string) predicate.Clinic {
	return predicate.Clinic(sql.FieldContainsFold(FieldClinicNameOldSystem, v))
}

// ClinicSignupTimeEQ applies the EQ predicate on the "clinic_signup_time" field.
func ClinicSignupTimeEQ(v time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldEQ(FieldClinicSignupTime, v))
}

// ClinicSignupTimeNEQ applies the NEQ predicate on the "clinic_signup_time" field.
func ClinicSignupTimeNEQ(v time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldNEQ(FieldClinicSignupTime, v))
}

// ClinicSignupTimeIn applies the In predicate on the "clinic_signup_time" field.
func ClinicSignupTimeIn(vs ...time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldIn(FieldClinicSignupTime, vs...))
}

// ClinicSignupTimeNotIn applies the NotIn predicate on the "clinic_signup_time" field.
func ClinicSignupTimeNotIn(vs ...time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldNotIn(FieldClinicSignupTime, vs...))
}

// ClinicSignupTimeGT applies the GT predicate on the "clinic_signup_time" field.
func ClinicSignupTimeGT(v time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldGT(FieldClinicSignupTime, v))
}

// ClinicSignupTimeGTE applies the GTE predicate on the "clinic_signup_time" field.
func ClinicSignupTimeGTE(v time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldGTE(FieldClinicSignupTime, v))
}

// ClinicSignupTimeLT applies the LT predicate on the "clinic_signup_time" field.
func ClinicSignupTimeLT(v time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldLT(FieldClinicSignupTime, v))
}

// ClinicSignupTimeLTE applies the LTE predicate on the "clinic_signup_time" field.
func ClinicSignupTimeLTE(v time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldLTE(FieldClinicSignupTime, v))
}

// ClinicUpdatedTimeEQ applies the EQ predicate on the "clinic_updated_time" field.
func ClinicUpdatedTimeEQ(v time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldEQ(FieldClinicUpdatedTime, v))
}

// ClinicUpdatedTimeNEQ applies the NEQ predicate on the "clinic_updated_time" field.
func ClinicUpdatedTimeNEQ(v time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldNEQ(FieldClinicUpdatedTime, v))
}

// ClinicUpdatedTimeIn applies the In predicate on the "clinic_updated_time" field.
func ClinicUpdatedTimeIn(vs ...time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldIn(FieldClinicUpdatedTime, vs...))
}

// ClinicUpdatedTimeNotIn applies the NotIn predicate on the "clinic_updated_time" field.
func ClinicUpdatedTimeNotIn(vs ...time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldNotIn(FieldClinicUpdatedTime, vs...))
}

// ClinicUpdatedTimeGT applies the GT predicate on the "clinic_updated_time" field.
func ClinicUpdatedTimeGT(v time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldGT(FieldClinicUpdatedTime, v))
}

// ClinicUpdatedTimeGTE applies the GTE predicate on the "clinic_updated_time" field.
func ClinicUpdatedTimeGTE(v time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldGTE(FieldClinicUpdatedTime, v))
}

// ClinicUpdatedTimeLT applies the LT predicate on the "clinic_updated_time" field.
func ClinicUpdatedTimeLT(v time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldLT(FieldClinicUpdatedTime, v))
}

// ClinicUpdatedTimeLTE applies the LTE predicate on the "clinic_updated_time" field.
func ClinicUpdatedTimeLTE(v time.Time) predicate.Clinic {
	return predicate.Clinic(sql.FieldLTE(FieldClinicUpdatedTime, v))
}

// ClinicUpdatedTimeIsNil applies the IsNil predicate on the "clinic_updated_time" field.
func ClinicUpdatedTimeIsNil() predicate.Clinic {
	return predicate.Clinic(sql.FieldIsNull(FieldClinicUpdatedTime))
}

// ClinicUpdatedTimeNotNil applies the NotNil predicate on the "clinic_updated_time" field.
func ClinicUpdatedTimeNotNil() predicate.Clinic {
	return predicate.Clinic(sql.FieldNotNull(FieldClinicUpdatedTime))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClinicContacts applies the HasEdge predicate on the "clinic_contacts" edge.
func HasClinicContacts() predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClinicContactsTable, ClinicContactsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicContactsWith applies the HasEdge predicate on the "clinic_contacts" edge with a given conditions (other predicates).
func HasClinicContactsWith(preds ...predicate.Contact) predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := newClinicContactsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClinicAddresses applies the HasEdge predicate on the "clinic_addresses" edge.
func HasClinicAddresses() predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClinicAddressesTable, ClinicAddressesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicAddressesWith applies the HasEdge predicate on the "clinic_addresses" edge with a given conditions (other predicates).
func HasClinicAddressesWith(preds ...predicate.Address) predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := newClinicAddressesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomers applies the HasEdge predicate on the "customers" edge.
func HasCustomers() predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CustomersTable, CustomersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomersWith applies the HasEdge predicate on the "customers" edge with a given conditions (other predicates).
func HasCustomersWith(preds ...predicate.Customer) predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := newCustomersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClinicSettings applies the HasEdge predicate on the "clinic_settings" edge.
func HasClinicSettings() predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ClinicSettingsTable, ClinicSettingsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicSettingsWith applies the HasEdge predicate on the "clinic_settings" edge with a given conditions (other predicates).
func HasClinicSettingsWith(preds ...predicate.Setting) predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := newClinicSettingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClinicOrders applies the HasEdge predicate on the "clinic_orders" edge.
func HasClinicOrders() predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClinicOrdersTable, ClinicOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicOrdersWith applies the HasEdge predicate on the "clinic_orders" edge with a given conditions (other predicates).
func HasClinicOrdersWith(preds ...predicate.OrderInfo) predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := newClinicOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClinicPatients applies the HasEdge predicate on the "clinic_patients" edge.
func HasClinicPatients() predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ClinicPatientsTable, ClinicPatientsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicPatientsWith applies the HasEdge predicate on the "clinic_patients" edge with a given conditions (other predicates).
func HasClinicPatientsWith(preds ...predicate.Patient) predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := newClinicPatientsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClinicBetaProgramParticipations applies the HasEdge predicate on the "clinic_beta_program_participations" edge.
func HasClinicBetaProgramParticipations() predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClinicBetaProgramParticipationsTable, ClinicBetaProgramParticipationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicBetaProgramParticipationsWith applies the HasEdge predicate on the "clinic_beta_program_participations" edge with a given conditions (other predicates).
func HasClinicBetaProgramParticipationsWith(preds ...predicate.BetaProgramParticipation) predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := newClinicBetaProgramParticipationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClinicCustomerSettings applies the HasEdge predicate on the "clinic_customer_settings" edge.
func HasClinicCustomerSettings() predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClinicCustomerSettingsTable, ClinicCustomerSettingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicCustomerSettingsWith applies the HasEdge predicate on the "clinic_customer_settings" edge with a given conditions (other predicates).
func HasClinicCustomerSettingsWith(preds ...predicate.CustomerSettingOnClinics) predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := newClinicCustomerSettingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClinicCustomerAddresses applies the HasEdge predicate on the "clinic_customer_addresses" edge.
func HasClinicCustomerAddresses() predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClinicCustomerAddressesTable, ClinicCustomerAddressesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicCustomerAddressesWith applies the HasEdge predicate on the "clinic_customer_addresses" edge with a given conditions (other predicates).
func HasClinicCustomerAddressesWith(preds ...predicate.CustomerAddressOnClinics) predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := newClinicCustomerAddressesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClinicCustomerContacts applies the HasEdge predicate on the "clinic_customer_contacts" edge.
func HasClinicCustomerContacts() predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClinicCustomerContactsTable, ClinicCustomerContactsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicCustomerContactsWith applies the HasEdge predicate on the "clinic_customer_contacts" edge with a given conditions (other predicates).
func HasClinicCustomerContactsWith(preds ...predicate.CustomerContactOnClinics) predicate.Clinic {
	return predicate.Clinic(func(s *sql.Selector) {
		step := newClinicCustomerContactsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Clinic) predicate.Clinic {
	return predicate.Clinic(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Clinic) predicate.Clinic {
	return predicate.Clinic(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Clinic) predicate.Clinic {
	return predicate.Clinic(sql.NotPredicates(p))
}
