// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/accountsubscription"
	"coresamples/ent/predicate"
	"coresamples/ent/serviceship"
	"coresamples/ent/serviceshipbillingplan"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceshipBillingPlanQuery is the builder for querying ServiceshipBillingPlan entities.
type ServiceshipBillingPlanQuery struct {
	config
	ctx                     *QueryContext
	order                   []serviceshipbillingplan.OrderOption
	inters                  []Interceptor
	predicates              []predicate.ServiceshipBillingPlan
	withAccountSubscription *AccountSubscriptionQuery
	withServiceship         *ServiceshipQuery
	withFKs                 bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ServiceshipBillingPlanQuery builder.
func (sbpq *ServiceshipBillingPlanQuery) Where(ps ...predicate.ServiceshipBillingPlan) *ServiceshipBillingPlanQuery {
	sbpq.predicates = append(sbpq.predicates, ps...)
	return sbpq
}

// Limit the number of records to be returned by this query.
func (sbpq *ServiceshipBillingPlanQuery) Limit(limit int) *ServiceshipBillingPlanQuery {
	sbpq.ctx.Limit = &limit
	return sbpq
}

// Offset to start from.
func (sbpq *ServiceshipBillingPlanQuery) Offset(offset int) *ServiceshipBillingPlanQuery {
	sbpq.ctx.Offset = &offset
	return sbpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sbpq *ServiceshipBillingPlanQuery) Unique(unique bool) *ServiceshipBillingPlanQuery {
	sbpq.ctx.Unique = &unique
	return sbpq
}

// Order specifies how the records should be ordered.
func (sbpq *ServiceshipBillingPlanQuery) Order(o ...serviceshipbillingplan.OrderOption) *ServiceshipBillingPlanQuery {
	sbpq.order = append(sbpq.order, o...)
	return sbpq
}

// QueryAccountSubscription chains the current query on the "account_subscription" edge.
func (sbpq *ServiceshipBillingPlanQuery) QueryAccountSubscription() *AccountSubscriptionQuery {
	query := (&AccountSubscriptionClient{config: sbpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sbpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sbpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceshipbillingplan.Table, serviceshipbillingplan.FieldID, selector),
			sqlgraph.To(accountsubscription.Table, accountsubscription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, serviceshipbillingplan.AccountSubscriptionTable, serviceshipbillingplan.AccountSubscriptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(sbpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServiceship chains the current query on the "serviceship" edge.
func (sbpq *ServiceshipBillingPlanQuery) QueryServiceship() *ServiceshipQuery {
	query := (&ServiceshipClient{config: sbpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sbpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sbpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceshipbillingplan.Table, serviceshipbillingplan.FieldID, selector),
			sqlgraph.To(serviceship.Table, serviceship.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, serviceshipbillingplan.ServiceshipTable, serviceshipbillingplan.ServiceshipColumn),
		)
		fromU = sqlgraph.SetNeighbors(sbpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ServiceshipBillingPlan entity from the query.
// Returns a *NotFoundError when no ServiceshipBillingPlan was found.
func (sbpq *ServiceshipBillingPlanQuery) First(ctx context.Context) (*ServiceshipBillingPlan, error) {
	nodes, err := sbpq.Limit(1).All(setContextOp(ctx, sbpq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{serviceshipbillingplan.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sbpq *ServiceshipBillingPlanQuery) FirstX(ctx context.Context) *ServiceshipBillingPlan {
	node, err := sbpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ServiceshipBillingPlan ID from the query.
// Returns a *NotFoundError when no ServiceshipBillingPlan ID was found.
func (sbpq *ServiceshipBillingPlanQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sbpq.Limit(1).IDs(setContextOp(ctx, sbpq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{serviceshipbillingplan.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sbpq *ServiceshipBillingPlanQuery) FirstIDX(ctx context.Context) int {
	id, err := sbpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ServiceshipBillingPlan entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ServiceshipBillingPlan entity is found.
// Returns a *NotFoundError when no ServiceshipBillingPlan entities are found.
func (sbpq *ServiceshipBillingPlanQuery) Only(ctx context.Context) (*ServiceshipBillingPlan, error) {
	nodes, err := sbpq.Limit(2).All(setContextOp(ctx, sbpq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{serviceshipbillingplan.Label}
	default:
		return nil, &NotSingularError{serviceshipbillingplan.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sbpq *ServiceshipBillingPlanQuery) OnlyX(ctx context.Context) *ServiceshipBillingPlan {
	node, err := sbpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ServiceshipBillingPlan ID in the query.
// Returns a *NotSingularError when more than one ServiceshipBillingPlan ID is found.
// Returns a *NotFoundError when no entities are found.
func (sbpq *ServiceshipBillingPlanQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sbpq.Limit(2).IDs(setContextOp(ctx, sbpq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{serviceshipbillingplan.Label}
	default:
		err = &NotSingularError{serviceshipbillingplan.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sbpq *ServiceshipBillingPlanQuery) OnlyIDX(ctx context.Context) int {
	id, err := sbpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ServiceshipBillingPlans.
func (sbpq *ServiceshipBillingPlanQuery) All(ctx context.Context) ([]*ServiceshipBillingPlan, error) {
	ctx = setContextOp(ctx, sbpq.ctx, "All")
	if err := sbpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ServiceshipBillingPlan, *ServiceshipBillingPlanQuery]()
	return withInterceptors[[]*ServiceshipBillingPlan](ctx, sbpq, qr, sbpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sbpq *ServiceshipBillingPlanQuery) AllX(ctx context.Context) []*ServiceshipBillingPlan {
	nodes, err := sbpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ServiceshipBillingPlan IDs.
func (sbpq *ServiceshipBillingPlanQuery) IDs(ctx context.Context) (ids []int, err error) {
	if sbpq.ctx.Unique == nil && sbpq.path != nil {
		sbpq.Unique(true)
	}
	ctx = setContextOp(ctx, sbpq.ctx, "IDs")
	if err = sbpq.Select(serviceshipbillingplan.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sbpq *ServiceshipBillingPlanQuery) IDsX(ctx context.Context) []int {
	ids, err := sbpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sbpq *ServiceshipBillingPlanQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sbpq.ctx, "Count")
	if err := sbpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sbpq, querierCount[*ServiceshipBillingPlanQuery](), sbpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sbpq *ServiceshipBillingPlanQuery) CountX(ctx context.Context) int {
	count, err := sbpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sbpq *ServiceshipBillingPlanQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sbpq.ctx, "Exist")
	switch _, err := sbpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sbpq *ServiceshipBillingPlanQuery) ExistX(ctx context.Context) bool {
	exist, err := sbpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ServiceshipBillingPlanQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sbpq *ServiceshipBillingPlanQuery) Clone() *ServiceshipBillingPlanQuery {
	if sbpq == nil {
		return nil
	}
	return &ServiceshipBillingPlanQuery{
		config:                  sbpq.config,
		ctx:                     sbpq.ctx.Clone(),
		order:                   append([]serviceshipbillingplan.OrderOption{}, sbpq.order...),
		inters:                  append([]Interceptor{}, sbpq.inters...),
		predicates:              append([]predicate.ServiceshipBillingPlan{}, sbpq.predicates...),
		withAccountSubscription: sbpq.withAccountSubscription.Clone(),
		withServiceship:         sbpq.withServiceship.Clone(),
		// clone intermediate query.
		sql:  sbpq.sql.Clone(),
		path: sbpq.path,
	}
}

// WithAccountSubscription tells the query-builder to eager-load the nodes that are connected to
// the "account_subscription" edge. The optional arguments are used to configure the query builder of the edge.
func (sbpq *ServiceshipBillingPlanQuery) WithAccountSubscription(opts ...func(*AccountSubscriptionQuery)) *ServiceshipBillingPlanQuery {
	query := (&AccountSubscriptionClient{config: sbpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sbpq.withAccountSubscription = query
	return sbpq
}

// WithServiceship tells the query-builder to eager-load the nodes that are connected to
// the "serviceship" edge. The optional arguments are used to configure the query builder of the edge.
func (sbpq *ServiceshipBillingPlanQuery) WithServiceship(opts ...func(*ServiceshipQuery)) *ServiceshipBillingPlanQuery {
	query := (&ServiceshipClient{config: sbpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sbpq.withServiceship = query
	return sbpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Fee float32 `json:"fee,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ServiceshipBillingPlan.Query().
//		GroupBy(serviceshipbillingplan.FieldFee).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sbpq *ServiceshipBillingPlanQuery) GroupBy(field string, fields ...string) *ServiceshipBillingPlanGroupBy {
	sbpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ServiceshipBillingPlanGroupBy{build: sbpq}
	grbuild.flds = &sbpq.ctx.Fields
	grbuild.label = serviceshipbillingplan.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Fee float32 `json:"fee,omitempty"`
//	}
//
//	client.ServiceshipBillingPlan.Query().
//		Select(serviceshipbillingplan.FieldFee).
//		Scan(ctx, &v)
func (sbpq *ServiceshipBillingPlanQuery) Select(fields ...string) *ServiceshipBillingPlanSelect {
	sbpq.ctx.Fields = append(sbpq.ctx.Fields, fields...)
	sbuild := &ServiceshipBillingPlanSelect{ServiceshipBillingPlanQuery: sbpq}
	sbuild.label = serviceshipbillingplan.Label
	sbuild.flds, sbuild.scan = &sbpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ServiceshipBillingPlanSelect configured with the given aggregations.
func (sbpq *ServiceshipBillingPlanQuery) Aggregate(fns ...AggregateFunc) *ServiceshipBillingPlanSelect {
	return sbpq.Select().Aggregate(fns...)
}

func (sbpq *ServiceshipBillingPlanQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sbpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sbpq); err != nil {
				return err
			}
		}
	}
	for _, f := range sbpq.ctx.Fields {
		if !serviceshipbillingplan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sbpq.path != nil {
		prev, err := sbpq.path(ctx)
		if err != nil {
			return err
		}
		sbpq.sql = prev
	}
	return nil
}

func (sbpq *ServiceshipBillingPlanQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ServiceshipBillingPlan, error) {
	var (
		nodes       = []*ServiceshipBillingPlan{}
		withFKs     = sbpq.withFKs
		_spec       = sbpq.querySpec()
		loadedTypes = [2]bool{
			sbpq.withAccountSubscription != nil,
			sbpq.withServiceship != nil,
		}
	)
	if sbpq.withServiceship != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, serviceshipbillingplan.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ServiceshipBillingPlan).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ServiceshipBillingPlan{config: sbpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sbpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sbpq.withAccountSubscription; query != nil {
		if err := sbpq.loadAccountSubscription(ctx, query, nodes,
			func(n *ServiceshipBillingPlan) { n.Edges.AccountSubscription = []*AccountSubscription{} },
			func(n *ServiceshipBillingPlan, e *AccountSubscription) {
				n.Edges.AccountSubscription = append(n.Edges.AccountSubscription, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := sbpq.withServiceship; query != nil {
		if err := sbpq.loadServiceship(ctx, query, nodes, nil,
			func(n *ServiceshipBillingPlan, e *Serviceship) { n.Edges.Serviceship = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sbpq *ServiceshipBillingPlanQuery) loadAccountSubscription(ctx context.Context, query *AccountSubscriptionQuery, nodes []*ServiceshipBillingPlan, init func(*ServiceshipBillingPlan), assign func(*ServiceshipBillingPlan, *AccountSubscription)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ServiceshipBillingPlan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AccountSubscription(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(serviceshipbillingplan.AccountSubscriptionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.serviceship_billing_plan_account_subscription
		if fk == nil {
			return fmt.Errorf(`foreign-key "serviceship_billing_plan_account_subscription" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "serviceship_billing_plan_account_subscription" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sbpq *ServiceshipBillingPlanQuery) loadServiceship(ctx context.Context, query *ServiceshipQuery, nodes []*ServiceshipBillingPlan, init func(*ServiceshipBillingPlan), assign func(*ServiceshipBillingPlan, *Serviceship)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ServiceshipBillingPlan)
	for i := range nodes {
		if nodes[i].serviceship_serviceship_billing_plan == nil {
			continue
		}
		fk := *nodes[i].serviceship_serviceship_billing_plan
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(serviceship.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "serviceship_serviceship_billing_plan" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sbpq *ServiceshipBillingPlanQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sbpq.querySpec()
	_spec.Node.Columns = sbpq.ctx.Fields
	if len(sbpq.ctx.Fields) > 0 {
		_spec.Unique = sbpq.ctx.Unique != nil && *sbpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sbpq.driver, _spec)
}

func (sbpq *ServiceshipBillingPlanQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(serviceshipbillingplan.Table, serviceshipbillingplan.Columns, sqlgraph.NewFieldSpec(serviceshipbillingplan.FieldID, field.TypeInt))
	_spec.From = sbpq.sql
	if unique := sbpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sbpq.path != nil {
		_spec.Unique = true
	}
	if fields := sbpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serviceshipbillingplan.FieldID)
		for i := range fields {
			if fields[i] != serviceshipbillingplan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sbpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sbpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sbpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sbpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sbpq *ServiceshipBillingPlanQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sbpq.driver.Dialect())
	t1 := builder.Table(serviceshipbillingplan.Table)
	columns := sbpq.ctx.Fields
	if len(columns) == 0 {
		columns = serviceshipbillingplan.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sbpq.sql != nil {
		selector = sbpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sbpq.ctx.Unique != nil && *sbpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sbpq.predicates {
		p(selector)
	}
	for _, p := range sbpq.order {
		p(selector)
	}
	if offset := sbpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sbpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ServiceshipBillingPlanGroupBy is the group-by builder for ServiceshipBillingPlan entities.
type ServiceshipBillingPlanGroupBy struct {
	selector
	build *ServiceshipBillingPlanQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sbpgb *ServiceshipBillingPlanGroupBy) Aggregate(fns ...AggregateFunc) *ServiceshipBillingPlanGroupBy {
	sbpgb.fns = append(sbpgb.fns, fns...)
	return sbpgb
}

// Scan applies the selector query and scans the result into the given value.
func (sbpgb *ServiceshipBillingPlanGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sbpgb.build.ctx, "GroupBy")
	if err := sbpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServiceshipBillingPlanQuery, *ServiceshipBillingPlanGroupBy](ctx, sbpgb.build, sbpgb, sbpgb.build.inters, v)
}

func (sbpgb *ServiceshipBillingPlanGroupBy) sqlScan(ctx context.Context, root *ServiceshipBillingPlanQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sbpgb.fns))
	for _, fn := range sbpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sbpgb.flds)+len(sbpgb.fns))
		for _, f := range *sbpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sbpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sbpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ServiceshipBillingPlanSelect is the builder for selecting fields of ServiceshipBillingPlan entities.
type ServiceshipBillingPlanSelect struct {
	*ServiceshipBillingPlanQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sbps *ServiceshipBillingPlanSelect) Aggregate(fns ...AggregateFunc) *ServiceshipBillingPlanSelect {
	sbps.fns = append(sbps.fns, fns...)
	return sbps
}

// Scan applies the selector query and scans the result into the given value.
func (sbps *ServiceshipBillingPlanSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sbps.ctx, "Select")
	if err := sbps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServiceshipBillingPlanQuery, *ServiceshipBillingPlanSelect](ctx, sbps.ServiceshipBillingPlanQuery, sbps, sbps.inters, v)
}

func (sbps *ServiceshipBillingPlanSelect) sqlScan(ctx context.Context, root *ServiceshipBillingPlanQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sbps.fns))
	for _, fn := range sbps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sbps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sbps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
