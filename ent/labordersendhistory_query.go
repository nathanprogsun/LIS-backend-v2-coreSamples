// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/labordersendhistory"
	"coresamples/ent/predicate"
	"coresamples/ent/sample"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LabOrderSendHistoryQuery is the builder for querying LabOrderSendHistory entities.
type LabOrderSendHistoryQuery struct {
	config
	ctx        *QueryContext
	order      []labordersendhistory.OrderOption
	inters     []Interceptor
	predicates []predicate.LabOrderSendHistory
	withSample *SampleQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LabOrderSendHistoryQuery builder.
func (loshq *LabOrderSendHistoryQuery) Where(ps ...predicate.LabOrderSendHistory) *LabOrderSendHistoryQuery {
	loshq.predicates = append(loshq.predicates, ps...)
	return loshq
}

// Limit the number of records to be returned by this query.
func (loshq *LabOrderSendHistoryQuery) Limit(limit int) *LabOrderSendHistoryQuery {
	loshq.ctx.Limit = &limit
	return loshq
}

// Offset to start from.
func (loshq *LabOrderSendHistoryQuery) Offset(offset int) *LabOrderSendHistoryQuery {
	loshq.ctx.Offset = &offset
	return loshq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (loshq *LabOrderSendHistoryQuery) Unique(unique bool) *LabOrderSendHistoryQuery {
	loshq.ctx.Unique = &unique
	return loshq
}

// Order specifies how the records should be ordered.
func (loshq *LabOrderSendHistoryQuery) Order(o ...labordersendhistory.OrderOption) *LabOrderSendHistoryQuery {
	loshq.order = append(loshq.order, o...)
	return loshq
}

// QuerySample chains the current query on the "sample" edge.
func (loshq *LabOrderSendHistoryQuery) QuerySample() *SampleQuery {
	query := (&SampleClient{config: loshq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := loshq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := loshq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(labordersendhistory.Table, labordersendhistory.FieldID, selector),
			sqlgraph.To(sample.Table, sample.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, labordersendhistory.SampleTable, labordersendhistory.SampleColumn),
		)
		fromU = sqlgraph.SetNeighbors(loshq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LabOrderSendHistory entity from the query.
// Returns a *NotFoundError when no LabOrderSendHistory was found.
func (loshq *LabOrderSendHistoryQuery) First(ctx context.Context) (*LabOrderSendHistory, error) {
	nodes, err := loshq.Limit(1).All(setContextOp(ctx, loshq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{labordersendhistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (loshq *LabOrderSendHistoryQuery) FirstX(ctx context.Context) *LabOrderSendHistory {
	node, err := loshq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LabOrderSendHistory ID from the query.
// Returns a *NotFoundError when no LabOrderSendHistory ID was found.
func (loshq *LabOrderSendHistoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = loshq.Limit(1).IDs(setContextOp(ctx, loshq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{labordersendhistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (loshq *LabOrderSendHistoryQuery) FirstIDX(ctx context.Context) int {
	id, err := loshq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LabOrderSendHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LabOrderSendHistory entity is found.
// Returns a *NotFoundError when no LabOrderSendHistory entities are found.
func (loshq *LabOrderSendHistoryQuery) Only(ctx context.Context) (*LabOrderSendHistory, error) {
	nodes, err := loshq.Limit(2).All(setContextOp(ctx, loshq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{labordersendhistory.Label}
	default:
		return nil, &NotSingularError{labordersendhistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (loshq *LabOrderSendHistoryQuery) OnlyX(ctx context.Context) *LabOrderSendHistory {
	node, err := loshq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LabOrderSendHistory ID in the query.
// Returns a *NotSingularError when more than one LabOrderSendHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (loshq *LabOrderSendHistoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = loshq.Limit(2).IDs(setContextOp(ctx, loshq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{labordersendhistory.Label}
	default:
		err = &NotSingularError{labordersendhistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (loshq *LabOrderSendHistoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := loshq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LabOrderSendHistories.
func (loshq *LabOrderSendHistoryQuery) All(ctx context.Context) ([]*LabOrderSendHistory, error) {
	ctx = setContextOp(ctx, loshq.ctx, "All")
	if err := loshq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LabOrderSendHistory, *LabOrderSendHistoryQuery]()
	return withInterceptors[[]*LabOrderSendHistory](ctx, loshq, qr, loshq.inters)
}

// AllX is like All, but panics if an error occurs.
func (loshq *LabOrderSendHistoryQuery) AllX(ctx context.Context) []*LabOrderSendHistory {
	nodes, err := loshq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LabOrderSendHistory IDs.
func (loshq *LabOrderSendHistoryQuery) IDs(ctx context.Context) (ids []int, err error) {
	if loshq.ctx.Unique == nil && loshq.path != nil {
		loshq.Unique(true)
	}
	ctx = setContextOp(ctx, loshq.ctx, "IDs")
	if err = loshq.Select(labordersendhistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (loshq *LabOrderSendHistoryQuery) IDsX(ctx context.Context) []int {
	ids, err := loshq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (loshq *LabOrderSendHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, loshq.ctx, "Count")
	if err := loshq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, loshq, querierCount[*LabOrderSendHistoryQuery](), loshq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (loshq *LabOrderSendHistoryQuery) CountX(ctx context.Context) int {
	count, err := loshq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (loshq *LabOrderSendHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, loshq.ctx, "Exist")
	switch _, err := loshq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (loshq *LabOrderSendHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := loshq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LabOrderSendHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (loshq *LabOrderSendHistoryQuery) Clone() *LabOrderSendHistoryQuery {
	if loshq == nil {
		return nil
	}
	return &LabOrderSendHistoryQuery{
		config:     loshq.config,
		ctx:        loshq.ctx.Clone(),
		order:      append([]labordersendhistory.OrderOption{}, loshq.order...),
		inters:     append([]Interceptor{}, loshq.inters...),
		predicates: append([]predicate.LabOrderSendHistory{}, loshq.predicates...),
		withSample: loshq.withSample.Clone(),
		// clone intermediate query.
		sql:  loshq.sql.Clone(),
		path: loshq.path,
	}
}

// WithSample tells the query-builder to eager-load the nodes that are connected to
// the "sample" edge. The optional arguments are used to configure the query builder of the edge.
func (loshq *LabOrderSendHistoryQuery) WithSample(opts ...func(*SampleQuery)) *LabOrderSendHistoryQuery {
	query := (&SampleClient{config: loshq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	loshq.withSample = query
	return loshq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		SampleID int `json:"sample_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LabOrderSendHistory.Query().
//		GroupBy(labordersendhistory.FieldSampleID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (loshq *LabOrderSendHistoryQuery) GroupBy(field string, fields ...string) *LabOrderSendHistoryGroupBy {
	loshq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LabOrderSendHistoryGroupBy{build: loshq}
	grbuild.flds = &loshq.ctx.Fields
	grbuild.label = labordersendhistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		SampleID int `json:"sample_id,omitempty"`
//	}
//
//	client.LabOrderSendHistory.Query().
//		Select(labordersendhistory.FieldSampleID).
//		Scan(ctx, &v)
func (loshq *LabOrderSendHistoryQuery) Select(fields ...string) *LabOrderSendHistorySelect {
	loshq.ctx.Fields = append(loshq.ctx.Fields, fields...)
	sbuild := &LabOrderSendHistorySelect{LabOrderSendHistoryQuery: loshq}
	sbuild.label = labordersendhistory.Label
	sbuild.flds, sbuild.scan = &loshq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LabOrderSendHistorySelect configured with the given aggregations.
func (loshq *LabOrderSendHistoryQuery) Aggregate(fns ...AggregateFunc) *LabOrderSendHistorySelect {
	return loshq.Select().Aggregate(fns...)
}

func (loshq *LabOrderSendHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range loshq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, loshq); err != nil {
				return err
			}
		}
	}
	for _, f := range loshq.ctx.Fields {
		if !labordersendhistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if loshq.path != nil {
		prev, err := loshq.path(ctx)
		if err != nil {
			return err
		}
		loshq.sql = prev
	}
	return nil
}

func (loshq *LabOrderSendHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LabOrderSendHistory, error) {
	var (
		nodes       = []*LabOrderSendHistory{}
		_spec       = loshq.querySpec()
		loadedTypes = [1]bool{
			loshq.withSample != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LabOrderSendHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LabOrderSendHistory{config: loshq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, loshq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := loshq.withSample; query != nil {
		if err := loshq.loadSample(ctx, query, nodes, nil,
			func(n *LabOrderSendHistory, e *Sample) { n.Edges.Sample = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (loshq *LabOrderSendHistoryQuery) loadSample(ctx context.Context, query *SampleQuery, nodes []*LabOrderSendHistory, init func(*LabOrderSendHistory), assign func(*LabOrderSendHistory, *Sample)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*LabOrderSendHistory)
	for i := range nodes {
		fk := nodes[i].SampleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(sample.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "sample_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (loshq *LabOrderSendHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := loshq.querySpec()
	_spec.Node.Columns = loshq.ctx.Fields
	if len(loshq.ctx.Fields) > 0 {
		_spec.Unique = loshq.ctx.Unique != nil && *loshq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, loshq.driver, _spec)
}

func (loshq *LabOrderSendHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(labordersendhistory.Table, labordersendhistory.Columns, sqlgraph.NewFieldSpec(labordersendhistory.FieldID, field.TypeInt))
	_spec.From = loshq.sql
	if unique := loshq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if loshq.path != nil {
		_spec.Unique = true
	}
	if fields := loshq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, labordersendhistory.FieldID)
		for i := range fields {
			if fields[i] != labordersendhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if loshq.withSample != nil {
			_spec.Node.AddColumnOnce(labordersendhistory.FieldSampleID)
		}
	}
	if ps := loshq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := loshq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := loshq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := loshq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (loshq *LabOrderSendHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(loshq.driver.Dialect())
	t1 := builder.Table(labordersendhistory.Table)
	columns := loshq.ctx.Fields
	if len(columns) == 0 {
		columns = labordersendhistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if loshq.sql != nil {
		selector = loshq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if loshq.ctx.Unique != nil && *loshq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range loshq.predicates {
		p(selector)
	}
	for _, p := range loshq.order {
		p(selector)
	}
	if offset := loshq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := loshq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LabOrderSendHistoryGroupBy is the group-by builder for LabOrderSendHistory entities.
type LabOrderSendHistoryGroupBy struct {
	selector
	build *LabOrderSendHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (loshgb *LabOrderSendHistoryGroupBy) Aggregate(fns ...AggregateFunc) *LabOrderSendHistoryGroupBy {
	loshgb.fns = append(loshgb.fns, fns...)
	return loshgb
}

// Scan applies the selector query and scans the result into the given value.
func (loshgb *LabOrderSendHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, loshgb.build.ctx, "GroupBy")
	if err := loshgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LabOrderSendHistoryQuery, *LabOrderSendHistoryGroupBy](ctx, loshgb.build, loshgb, loshgb.build.inters, v)
}

func (loshgb *LabOrderSendHistoryGroupBy) sqlScan(ctx context.Context, root *LabOrderSendHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(loshgb.fns))
	for _, fn := range loshgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*loshgb.flds)+len(loshgb.fns))
		for _, f := range *loshgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*loshgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := loshgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LabOrderSendHistorySelect is the builder for selecting fields of LabOrderSendHistory entities.
type LabOrderSendHistorySelect struct {
	*LabOrderSendHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (loshs *LabOrderSendHistorySelect) Aggregate(fns ...AggregateFunc) *LabOrderSendHistorySelect {
	loshs.fns = append(loshs.fns, fns...)
	return loshs
}

// Scan applies the selector query and scans the result into the given value.
func (loshs *LabOrderSendHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, loshs.ctx, "Select")
	if err := loshs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LabOrderSendHistoryQuery, *LabOrderSendHistorySelect](ctx, loshs.LabOrderSendHistoryQuery, loshs, loshs.inters, v)
}

func (loshs *LabOrderSendHistorySelect) sqlScan(ctx context.Context, root *LabOrderSendHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(loshs.fns))
	for _, fn := range loshs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*loshs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := loshs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
