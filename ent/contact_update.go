// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/clinic"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/customercontactonclinics"
	"coresamples/ent/internaluser"
	"coresamples/ent/orderinfo"
	"coresamples/ent/patient"
	"coresamples/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContactUpdate is the builder for updating Contact entities.
type ContactUpdate struct {
	config
	hooks    []Hook
	mutation *ContactMutation
}

// Where appends a list predicates to the ContactUpdate builder.
func (cu *ContactUpdate) Where(ps ...predicate.Contact) *ContactUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetContactDescription sets the "contact_description" field.
func (cu *ContactUpdate) SetContactDescription(s string) *ContactUpdate {
	cu.mutation.SetContactDescription(s)
	return cu
}

// SetNillableContactDescription sets the "contact_description" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableContactDescription(s *string) *ContactUpdate {
	if s != nil {
		cu.SetContactDescription(*s)
	}
	return cu
}

// ClearContactDescription clears the value of the "contact_description" field.
func (cu *ContactUpdate) ClearContactDescription() *ContactUpdate {
	cu.mutation.ClearContactDescription()
	return cu
}

// SetContactDetails sets the "contact_details" field.
func (cu *ContactUpdate) SetContactDetails(s string) *ContactUpdate {
	cu.mutation.SetContactDetails(s)
	return cu
}

// SetNillableContactDetails sets the "contact_details" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableContactDetails(s *string) *ContactUpdate {
	if s != nil {
		cu.SetContactDetails(*s)
	}
	return cu
}

// SetContactType sets the "contact_type" field.
func (cu *ContactUpdate) SetContactType(s string) *ContactUpdate {
	cu.mutation.SetContactType(s)
	return cu
}

// SetNillableContactType sets the "contact_type" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableContactType(s *string) *ContactUpdate {
	if s != nil {
		cu.SetContactType(*s)
	}
	return cu
}

// ClearContactType clears the value of the "contact_type" field.
func (cu *ContactUpdate) ClearContactType() *ContactUpdate {
	cu.mutation.ClearContactType()
	return cu
}

// SetIsPrimaryContact sets the "is_primary_contact" field.
func (cu *ContactUpdate) SetIsPrimaryContact(b bool) *ContactUpdate {
	cu.mutation.SetIsPrimaryContact(b)
	return cu
}

// SetNillableIsPrimaryContact sets the "is_primary_contact" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableIsPrimaryContact(b *bool) *ContactUpdate {
	if b != nil {
		cu.SetIsPrimaryContact(*b)
	}
	return cu
}

// ClearIsPrimaryContact clears the value of the "is_primary_contact" field.
func (cu *ContactUpdate) ClearIsPrimaryContact() *ContactUpdate {
	cu.mutation.ClearIsPrimaryContact()
	return cu
}

// SetIs2faContact sets the "is_2fa_contact" field.
func (cu *ContactUpdate) SetIs2faContact(b bool) *ContactUpdate {
	cu.mutation.SetIs2faContact(b)
	return cu
}

// SetNillableIs2faContact sets the "is_2fa_contact" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableIs2faContact(b *bool) *ContactUpdate {
	if b != nil {
		cu.SetIs2faContact(*b)
	}
	return cu
}

// SetCustomerID sets the "customer_id" field.
func (cu *ContactUpdate) SetCustomerID(i int) *ContactUpdate {
	cu.mutation.SetCustomerID(i)
	return cu
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableCustomerID(i *int) *ContactUpdate {
	if i != nil {
		cu.SetCustomerID(*i)
	}
	return cu
}

// ClearCustomerID clears the value of the "customer_id" field.
func (cu *ContactUpdate) ClearCustomerID() *ContactUpdate {
	cu.mutation.ClearCustomerID()
	return cu
}

// SetPatientID sets the "patient_id" field.
func (cu *ContactUpdate) SetPatientID(i int) *ContactUpdate {
	cu.mutation.SetPatientID(i)
	return cu
}

// SetNillablePatientID sets the "patient_id" field if the given value is not nil.
func (cu *ContactUpdate) SetNillablePatientID(i *int) *ContactUpdate {
	if i != nil {
		cu.SetPatientID(*i)
	}
	return cu
}

// ClearPatientID clears the value of the "patient_id" field.
func (cu *ContactUpdate) ClearPatientID() *ContactUpdate {
	cu.mutation.ClearPatientID()
	return cu
}

// SetClinicID sets the "clinic_id" field.
func (cu *ContactUpdate) SetClinicID(i int) *ContactUpdate {
	cu.mutation.SetClinicID(i)
	return cu
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableClinicID(i *int) *ContactUpdate {
	if i != nil {
		cu.SetClinicID(*i)
	}
	return cu
}

// ClearClinicID clears the value of the "clinic_id" field.
func (cu *ContactUpdate) ClearClinicID() *ContactUpdate {
	cu.mutation.ClearClinicID()
	return cu
}

// SetInternalUserID sets the "internal_user_id" field.
func (cu *ContactUpdate) SetInternalUserID(i int) *ContactUpdate {
	cu.mutation.SetInternalUserID(i)
	return cu
}

// SetNillableInternalUserID sets the "internal_user_id" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableInternalUserID(i *int) *ContactUpdate {
	if i != nil {
		cu.SetInternalUserID(*i)
	}
	return cu
}

// ClearInternalUserID clears the value of the "internal_user_id" field.
func (cu *ContactUpdate) ClearInternalUserID() *ContactUpdate {
	cu.mutation.ClearInternalUserID()
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *ContactUpdate) SetUserID(i int) *ContactUpdate {
	cu.mutation.ResetUserID()
	cu.mutation.SetUserID(i)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableUserID(i *int) *ContactUpdate {
	if i != nil {
		cu.SetUserID(*i)
	}
	return cu
}

// AddUserID adds i to the "user_id" field.
func (cu *ContactUpdate) AddUserID(i int) *ContactUpdate {
	cu.mutation.AddUserID(i)
	return cu
}

// ClearUserID clears the value of the "user_id" field.
func (cu *ContactUpdate) ClearUserID() *ContactUpdate {
	cu.mutation.ClearUserID()
	return cu
}

// SetContactLevel sets the "contact_level" field.
func (cu *ContactUpdate) SetContactLevel(i int) *ContactUpdate {
	cu.mutation.ResetContactLevel()
	cu.mutation.SetContactLevel(i)
	return cu
}

// SetNillableContactLevel sets the "contact_level" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableContactLevel(i *int) *ContactUpdate {
	if i != nil {
		cu.SetContactLevel(*i)
	}
	return cu
}

// AddContactLevel adds i to the "contact_level" field.
func (cu *ContactUpdate) AddContactLevel(i int) *ContactUpdate {
	cu.mutation.AddContactLevel(i)
	return cu
}

// SetContactLevelName sets the "contact_level_name" field.
func (cu *ContactUpdate) SetContactLevelName(s string) *ContactUpdate {
	cu.mutation.SetContactLevelName(s)
	return cu
}

// SetNillableContactLevelName sets the "contact_level_name" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableContactLevelName(s *string) *ContactUpdate {
	if s != nil {
		cu.SetContactLevelName(*s)
	}
	return cu
}

// SetGroupContactID sets the "group_contact_id" field.
func (cu *ContactUpdate) SetGroupContactID(i int) *ContactUpdate {
	cu.mutation.SetGroupContactID(i)
	return cu
}

// SetNillableGroupContactID sets the "group_contact_id" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableGroupContactID(i *int) *ContactUpdate {
	if i != nil {
		cu.SetGroupContactID(*i)
	}
	return cu
}

// ClearGroupContactID clears the value of the "group_contact_id" field.
func (cu *ContactUpdate) ClearGroupContactID() *ContactUpdate {
	cu.mutation.ClearGroupContactID()
	return cu
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (cu *ContactUpdate) SetApplyToAllGroupMember(b bool) *ContactUpdate {
	cu.mutation.SetApplyToAllGroupMember(b)
	return cu
}

// SetNillableApplyToAllGroupMember sets the "apply_to_all_group_member" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableApplyToAllGroupMember(b *bool) *ContactUpdate {
	if b != nil {
		cu.SetApplyToAllGroupMember(*b)
	}
	return cu
}

// SetIsGroupContact sets the "is_group_contact" field.
func (cu *ContactUpdate) SetIsGroupContact(b bool) *ContactUpdate {
	cu.mutation.SetIsGroupContact(b)
	return cu
}

// SetNillableIsGroupContact sets the "is_group_contact" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableIsGroupContact(b *bool) *ContactUpdate {
	if b != nil {
		cu.SetIsGroupContact(*b)
	}
	return cu
}

// SetUseAsDefaultCreateContact sets the "use_as_default_create_contact" field.
func (cu *ContactUpdate) SetUseAsDefaultCreateContact(b bool) *ContactUpdate {
	cu.mutation.SetUseAsDefaultCreateContact(b)
	return cu
}

// SetNillableUseAsDefaultCreateContact sets the "use_as_default_create_contact" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableUseAsDefaultCreateContact(b *bool) *ContactUpdate {
	if b != nil {
		cu.SetUseAsDefaultCreateContact(*b)
	}
	return cu
}

// SetUseGroupContact sets the "use_group_contact" field.
func (cu *ContactUpdate) SetUseGroupContact(b bool) *ContactUpdate {
	cu.mutation.SetUseGroupContact(b)
	return cu
}

// SetNillableUseGroupContact sets the "use_group_contact" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableUseGroupContact(b *bool) *ContactUpdate {
	if b != nil {
		cu.SetUseGroupContact(*b)
	}
	return cu
}

// ClearUseGroupContact clears the value of the "use_group_contact" field.
func (cu *ContactUpdate) ClearUseGroupContact() *ContactUpdate {
	cu.mutation.ClearUseGroupContact()
	return cu
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (cu *ContactUpdate) SetClinic(c *Clinic) *ContactUpdate {
	return cu.SetClinicID(c.ID)
}

// SetPatient sets the "patient" edge to the Patient entity.
func (cu *ContactUpdate) SetPatient(p *Patient) *ContactUpdate {
	return cu.SetPatientID(p.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (cu *ContactUpdate) SetCustomer(c *Customer) *ContactUpdate {
	return cu.SetCustomerID(c.ID)
}

// AddCustomerClinicMappingIDs adds the "customer_clinic_mappings" edge to the CustomerContactOnClinics entity by IDs.
func (cu *ContactUpdate) AddCustomerClinicMappingIDs(ids ...int) *ContactUpdate {
	cu.mutation.AddCustomerClinicMappingIDs(ids...)
	return cu
}

// AddCustomerClinicMappings adds the "customer_clinic_mappings" edges to the CustomerContactOnClinics entity.
func (cu *ContactUpdate) AddCustomerClinicMappings(c ...*CustomerContactOnClinics) *ContactUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCustomerClinicMappingIDs(ids...)
}

// AddMemberContactIDs adds the "member_contacts" edge to the Contact entity by IDs.
func (cu *ContactUpdate) AddMemberContactIDs(ids ...int) *ContactUpdate {
	cu.mutation.AddMemberContactIDs(ids...)
	return cu
}

// AddMemberContacts adds the "member_contacts" edges to the Contact entity.
func (cu *ContactUpdate) AddMemberContacts(c ...*Contact) *ContactUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddMemberContactIDs(ids...)
}

// SetGroupContact sets the "group_contact" edge to the Contact entity.
func (cu *ContactUpdate) SetGroupContact(c *Contact) *ContactUpdate {
	return cu.SetGroupContactID(c.ID)
}

// SetInternalUser sets the "internal_user" edge to the InternalUser entity.
func (cu *ContactUpdate) SetInternalUser(i *InternalUser) *ContactUpdate {
	return cu.SetInternalUserID(i.ID)
}

// AddOrderIDs adds the "orders" edge to the OrderInfo entity by IDs.
func (cu *ContactUpdate) AddOrderIDs(ids ...int) *ContactUpdate {
	cu.mutation.AddOrderIDs(ids...)
	return cu
}

// AddOrders adds the "orders" edges to the OrderInfo entity.
func (cu *ContactUpdate) AddOrders(o ...*OrderInfo) *ContactUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.AddOrderIDs(ids...)
}

// Mutation returns the ContactMutation object of the builder.
func (cu *ContactUpdate) Mutation() *ContactMutation {
	return cu.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (cu *ContactUpdate) ClearClinic() *ContactUpdate {
	cu.mutation.ClearClinic()
	return cu
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (cu *ContactUpdate) ClearPatient() *ContactUpdate {
	cu.mutation.ClearPatient()
	return cu
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (cu *ContactUpdate) ClearCustomer() *ContactUpdate {
	cu.mutation.ClearCustomer()
	return cu
}

// ClearCustomerClinicMappings clears all "customer_clinic_mappings" edges to the CustomerContactOnClinics entity.
func (cu *ContactUpdate) ClearCustomerClinicMappings() *ContactUpdate {
	cu.mutation.ClearCustomerClinicMappings()
	return cu
}

// RemoveCustomerClinicMappingIDs removes the "customer_clinic_mappings" edge to CustomerContactOnClinics entities by IDs.
func (cu *ContactUpdate) RemoveCustomerClinicMappingIDs(ids ...int) *ContactUpdate {
	cu.mutation.RemoveCustomerClinicMappingIDs(ids...)
	return cu
}

// RemoveCustomerClinicMappings removes "customer_clinic_mappings" edges to CustomerContactOnClinics entities.
func (cu *ContactUpdate) RemoveCustomerClinicMappings(c ...*CustomerContactOnClinics) *ContactUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCustomerClinicMappingIDs(ids...)
}

// ClearMemberContacts clears all "member_contacts" edges to the Contact entity.
func (cu *ContactUpdate) ClearMemberContacts() *ContactUpdate {
	cu.mutation.ClearMemberContacts()
	return cu
}

// RemoveMemberContactIDs removes the "member_contacts" edge to Contact entities by IDs.
func (cu *ContactUpdate) RemoveMemberContactIDs(ids ...int) *ContactUpdate {
	cu.mutation.RemoveMemberContactIDs(ids...)
	return cu
}

// RemoveMemberContacts removes "member_contacts" edges to Contact entities.
func (cu *ContactUpdate) RemoveMemberContacts(c ...*Contact) *ContactUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveMemberContactIDs(ids...)
}

// ClearGroupContact clears the "group_contact" edge to the Contact entity.
func (cu *ContactUpdate) ClearGroupContact() *ContactUpdate {
	cu.mutation.ClearGroupContact()
	return cu
}

// ClearInternalUser clears the "internal_user" edge to the InternalUser entity.
func (cu *ContactUpdate) ClearInternalUser() *ContactUpdate {
	cu.mutation.ClearInternalUser()
	return cu
}

// ClearOrders clears all "orders" edges to the OrderInfo entity.
func (cu *ContactUpdate) ClearOrders() *ContactUpdate {
	cu.mutation.ClearOrders()
	return cu
}

// RemoveOrderIDs removes the "orders" edge to OrderInfo entities by IDs.
func (cu *ContactUpdate) RemoveOrderIDs(ids ...int) *ContactUpdate {
	cu.mutation.RemoveOrderIDs(ids...)
	return cu
}

// RemoveOrders removes "orders" edges to OrderInfo entities.
func (cu *ContactUpdate) RemoveOrders(o ...*OrderInfo) *ContactUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContactUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContactUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContactUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContactUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ContactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(contact.Table, contact.Columns, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.ContactDescription(); ok {
		_spec.SetField(contact.FieldContactDescription, field.TypeString, value)
	}
	if cu.mutation.ContactDescriptionCleared() {
		_spec.ClearField(contact.FieldContactDescription, field.TypeString)
	}
	if value, ok := cu.mutation.ContactDetails(); ok {
		_spec.SetField(contact.FieldContactDetails, field.TypeString, value)
	}
	if value, ok := cu.mutation.ContactType(); ok {
		_spec.SetField(contact.FieldContactType, field.TypeString, value)
	}
	if cu.mutation.ContactTypeCleared() {
		_spec.ClearField(contact.FieldContactType, field.TypeString)
	}
	if value, ok := cu.mutation.IsPrimaryContact(); ok {
		_spec.SetField(contact.FieldIsPrimaryContact, field.TypeBool, value)
	}
	if cu.mutation.IsPrimaryContactCleared() {
		_spec.ClearField(contact.FieldIsPrimaryContact, field.TypeBool)
	}
	if value, ok := cu.mutation.Is2faContact(); ok {
		_spec.SetField(contact.FieldIs2faContact, field.TypeBool, value)
	}
	if value, ok := cu.mutation.UserID(); ok {
		_spec.SetField(contact.FieldUserID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedUserID(); ok {
		_spec.AddField(contact.FieldUserID, field.TypeInt, value)
	}
	if cu.mutation.UserIDCleared() {
		_spec.ClearField(contact.FieldUserID, field.TypeInt)
	}
	if value, ok := cu.mutation.ContactLevel(); ok {
		_spec.SetField(contact.FieldContactLevel, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedContactLevel(); ok {
		_spec.AddField(contact.FieldContactLevel, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ContactLevelName(); ok {
		_spec.SetField(contact.FieldContactLevelName, field.TypeString, value)
	}
	if value, ok := cu.mutation.ApplyToAllGroupMember(); ok {
		_spec.SetField(contact.FieldApplyToAllGroupMember, field.TypeBool, value)
	}
	if value, ok := cu.mutation.IsGroupContact(); ok {
		_spec.SetField(contact.FieldIsGroupContact, field.TypeBool, value)
	}
	if value, ok := cu.mutation.UseAsDefaultCreateContact(); ok {
		_spec.SetField(contact.FieldUseAsDefaultCreateContact, field.TypeBool, value)
	}
	if value, ok := cu.mutation.UseGroupContact(); ok {
		_spec.SetField(contact.FieldUseGroupContact, field.TypeBool, value)
	}
	if cu.mutation.UseGroupContactCleared() {
		_spec.ClearField(contact.FieldUseGroupContact, field.TypeBool)
	}
	if cu.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.ClinicTable,
			Columns: []string{contact.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.ClinicTable,
			Columns: []string{contact.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.PatientTable,
			Columns: []string{contact.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.PatientTable,
			Columns: []string{contact.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.CustomerTable,
			Columns: []string{contact.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.CustomerTable,
			Columns: []string{contact.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CustomerClinicMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contact.CustomerClinicMappingsTable,
			Columns: []string{contact.CustomerClinicMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCustomerClinicMappingsIDs(); len(nodes) > 0 && !cu.mutation.CustomerClinicMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contact.CustomerClinicMappingsTable,
			Columns: []string{contact.CustomerClinicMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CustomerClinicMappingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contact.CustomerClinicMappingsTable,
			Columns: []string{contact.CustomerClinicMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.MemberContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.MemberContactsTable,
			Columns: []string{contact.MemberContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedMemberContactsIDs(); len(nodes) > 0 && !cu.mutation.MemberContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.MemberContactsTable,
			Columns: []string{contact.MemberContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MemberContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.MemberContactsTable,
			Columns: []string{contact.MemberContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.GroupContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contact.GroupContactTable,
			Columns: []string{contact.GroupContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.GroupContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contact.GroupContactTable,
			Columns: []string{contact.GroupContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.InternalUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.InternalUserTable,
			Columns: []string{contact.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.InternalUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.InternalUserTable,
			Columns: []string{contact.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contact.OrdersTable,
			Columns: []string{contact.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !cu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contact.OrdersTable,
			Columns: []string{contact.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contact.OrdersTable,
			Columns: []string{contact.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContactUpdateOne is the builder for updating a single Contact entity.
type ContactUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContactMutation
}

// SetContactDescription sets the "contact_description" field.
func (cuo *ContactUpdateOne) SetContactDescription(s string) *ContactUpdateOne {
	cuo.mutation.SetContactDescription(s)
	return cuo
}

// SetNillableContactDescription sets the "contact_description" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableContactDescription(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetContactDescription(*s)
	}
	return cuo
}

// ClearContactDescription clears the value of the "contact_description" field.
func (cuo *ContactUpdateOne) ClearContactDescription() *ContactUpdateOne {
	cuo.mutation.ClearContactDescription()
	return cuo
}

// SetContactDetails sets the "contact_details" field.
func (cuo *ContactUpdateOne) SetContactDetails(s string) *ContactUpdateOne {
	cuo.mutation.SetContactDetails(s)
	return cuo
}

// SetNillableContactDetails sets the "contact_details" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableContactDetails(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetContactDetails(*s)
	}
	return cuo
}

// SetContactType sets the "contact_type" field.
func (cuo *ContactUpdateOne) SetContactType(s string) *ContactUpdateOne {
	cuo.mutation.SetContactType(s)
	return cuo
}

// SetNillableContactType sets the "contact_type" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableContactType(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetContactType(*s)
	}
	return cuo
}

// ClearContactType clears the value of the "contact_type" field.
func (cuo *ContactUpdateOne) ClearContactType() *ContactUpdateOne {
	cuo.mutation.ClearContactType()
	return cuo
}

// SetIsPrimaryContact sets the "is_primary_contact" field.
func (cuo *ContactUpdateOne) SetIsPrimaryContact(b bool) *ContactUpdateOne {
	cuo.mutation.SetIsPrimaryContact(b)
	return cuo
}

// SetNillableIsPrimaryContact sets the "is_primary_contact" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableIsPrimaryContact(b *bool) *ContactUpdateOne {
	if b != nil {
		cuo.SetIsPrimaryContact(*b)
	}
	return cuo
}

// ClearIsPrimaryContact clears the value of the "is_primary_contact" field.
func (cuo *ContactUpdateOne) ClearIsPrimaryContact() *ContactUpdateOne {
	cuo.mutation.ClearIsPrimaryContact()
	return cuo
}

// SetIs2faContact sets the "is_2fa_contact" field.
func (cuo *ContactUpdateOne) SetIs2faContact(b bool) *ContactUpdateOne {
	cuo.mutation.SetIs2faContact(b)
	return cuo
}

// SetNillableIs2faContact sets the "is_2fa_contact" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableIs2faContact(b *bool) *ContactUpdateOne {
	if b != nil {
		cuo.SetIs2faContact(*b)
	}
	return cuo
}

// SetCustomerID sets the "customer_id" field.
func (cuo *ContactUpdateOne) SetCustomerID(i int) *ContactUpdateOne {
	cuo.mutation.SetCustomerID(i)
	return cuo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableCustomerID(i *int) *ContactUpdateOne {
	if i != nil {
		cuo.SetCustomerID(*i)
	}
	return cuo
}

// ClearCustomerID clears the value of the "customer_id" field.
func (cuo *ContactUpdateOne) ClearCustomerID() *ContactUpdateOne {
	cuo.mutation.ClearCustomerID()
	return cuo
}

// SetPatientID sets the "patient_id" field.
func (cuo *ContactUpdateOne) SetPatientID(i int) *ContactUpdateOne {
	cuo.mutation.SetPatientID(i)
	return cuo
}

// SetNillablePatientID sets the "patient_id" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillablePatientID(i *int) *ContactUpdateOne {
	if i != nil {
		cuo.SetPatientID(*i)
	}
	return cuo
}

// ClearPatientID clears the value of the "patient_id" field.
func (cuo *ContactUpdateOne) ClearPatientID() *ContactUpdateOne {
	cuo.mutation.ClearPatientID()
	return cuo
}

// SetClinicID sets the "clinic_id" field.
func (cuo *ContactUpdateOne) SetClinicID(i int) *ContactUpdateOne {
	cuo.mutation.SetClinicID(i)
	return cuo
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableClinicID(i *int) *ContactUpdateOne {
	if i != nil {
		cuo.SetClinicID(*i)
	}
	return cuo
}

// ClearClinicID clears the value of the "clinic_id" field.
func (cuo *ContactUpdateOne) ClearClinicID() *ContactUpdateOne {
	cuo.mutation.ClearClinicID()
	return cuo
}

// SetInternalUserID sets the "internal_user_id" field.
func (cuo *ContactUpdateOne) SetInternalUserID(i int) *ContactUpdateOne {
	cuo.mutation.SetInternalUserID(i)
	return cuo
}

// SetNillableInternalUserID sets the "internal_user_id" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableInternalUserID(i *int) *ContactUpdateOne {
	if i != nil {
		cuo.SetInternalUserID(*i)
	}
	return cuo
}

// ClearInternalUserID clears the value of the "internal_user_id" field.
func (cuo *ContactUpdateOne) ClearInternalUserID() *ContactUpdateOne {
	cuo.mutation.ClearInternalUserID()
	return cuo
}

// SetUserID sets the "user_id" field.
func (cuo *ContactUpdateOne) SetUserID(i int) *ContactUpdateOne {
	cuo.mutation.ResetUserID()
	cuo.mutation.SetUserID(i)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableUserID(i *int) *ContactUpdateOne {
	if i != nil {
		cuo.SetUserID(*i)
	}
	return cuo
}

// AddUserID adds i to the "user_id" field.
func (cuo *ContactUpdateOne) AddUserID(i int) *ContactUpdateOne {
	cuo.mutation.AddUserID(i)
	return cuo
}

// ClearUserID clears the value of the "user_id" field.
func (cuo *ContactUpdateOne) ClearUserID() *ContactUpdateOne {
	cuo.mutation.ClearUserID()
	return cuo
}

// SetContactLevel sets the "contact_level" field.
func (cuo *ContactUpdateOne) SetContactLevel(i int) *ContactUpdateOne {
	cuo.mutation.ResetContactLevel()
	cuo.mutation.SetContactLevel(i)
	return cuo
}

// SetNillableContactLevel sets the "contact_level" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableContactLevel(i *int) *ContactUpdateOne {
	if i != nil {
		cuo.SetContactLevel(*i)
	}
	return cuo
}

// AddContactLevel adds i to the "contact_level" field.
func (cuo *ContactUpdateOne) AddContactLevel(i int) *ContactUpdateOne {
	cuo.mutation.AddContactLevel(i)
	return cuo
}

// SetContactLevelName sets the "contact_level_name" field.
func (cuo *ContactUpdateOne) SetContactLevelName(s string) *ContactUpdateOne {
	cuo.mutation.SetContactLevelName(s)
	return cuo
}

// SetNillableContactLevelName sets the "contact_level_name" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableContactLevelName(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetContactLevelName(*s)
	}
	return cuo
}

// SetGroupContactID sets the "group_contact_id" field.
func (cuo *ContactUpdateOne) SetGroupContactID(i int) *ContactUpdateOne {
	cuo.mutation.SetGroupContactID(i)
	return cuo
}

// SetNillableGroupContactID sets the "group_contact_id" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableGroupContactID(i *int) *ContactUpdateOne {
	if i != nil {
		cuo.SetGroupContactID(*i)
	}
	return cuo
}

// ClearGroupContactID clears the value of the "group_contact_id" field.
func (cuo *ContactUpdateOne) ClearGroupContactID() *ContactUpdateOne {
	cuo.mutation.ClearGroupContactID()
	return cuo
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (cuo *ContactUpdateOne) SetApplyToAllGroupMember(b bool) *ContactUpdateOne {
	cuo.mutation.SetApplyToAllGroupMember(b)
	return cuo
}

// SetNillableApplyToAllGroupMember sets the "apply_to_all_group_member" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableApplyToAllGroupMember(b *bool) *ContactUpdateOne {
	if b != nil {
		cuo.SetApplyToAllGroupMember(*b)
	}
	return cuo
}

// SetIsGroupContact sets the "is_group_contact" field.
func (cuo *ContactUpdateOne) SetIsGroupContact(b bool) *ContactUpdateOne {
	cuo.mutation.SetIsGroupContact(b)
	return cuo
}

// SetNillableIsGroupContact sets the "is_group_contact" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableIsGroupContact(b *bool) *ContactUpdateOne {
	if b != nil {
		cuo.SetIsGroupContact(*b)
	}
	return cuo
}

// SetUseAsDefaultCreateContact sets the "use_as_default_create_contact" field.
func (cuo *ContactUpdateOne) SetUseAsDefaultCreateContact(b bool) *ContactUpdateOne {
	cuo.mutation.SetUseAsDefaultCreateContact(b)
	return cuo
}

// SetNillableUseAsDefaultCreateContact sets the "use_as_default_create_contact" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableUseAsDefaultCreateContact(b *bool) *ContactUpdateOne {
	if b != nil {
		cuo.SetUseAsDefaultCreateContact(*b)
	}
	return cuo
}

// SetUseGroupContact sets the "use_group_contact" field.
func (cuo *ContactUpdateOne) SetUseGroupContact(b bool) *ContactUpdateOne {
	cuo.mutation.SetUseGroupContact(b)
	return cuo
}

// SetNillableUseGroupContact sets the "use_group_contact" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableUseGroupContact(b *bool) *ContactUpdateOne {
	if b != nil {
		cuo.SetUseGroupContact(*b)
	}
	return cuo
}

// ClearUseGroupContact clears the value of the "use_group_contact" field.
func (cuo *ContactUpdateOne) ClearUseGroupContact() *ContactUpdateOne {
	cuo.mutation.ClearUseGroupContact()
	return cuo
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (cuo *ContactUpdateOne) SetClinic(c *Clinic) *ContactUpdateOne {
	return cuo.SetClinicID(c.ID)
}

// SetPatient sets the "patient" edge to the Patient entity.
func (cuo *ContactUpdateOne) SetPatient(p *Patient) *ContactUpdateOne {
	return cuo.SetPatientID(p.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (cuo *ContactUpdateOne) SetCustomer(c *Customer) *ContactUpdateOne {
	return cuo.SetCustomerID(c.ID)
}

// AddCustomerClinicMappingIDs adds the "customer_clinic_mappings" edge to the CustomerContactOnClinics entity by IDs.
func (cuo *ContactUpdateOne) AddCustomerClinicMappingIDs(ids ...int) *ContactUpdateOne {
	cuo.mutation.AddCustomerClinicMappingIDs(ids...)
	return cuo
}

// AddCustomerClinicMappings adds the "customer_clinic_mappings" edges to the CustomerContactOnClinics entity.
func (cuo *ContactUpdateOne) AddCustomerClinicMappings(c ...*CustomerContactOnClinics) *ContactUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCustomerClinicMappingIDs(ids...)
}

// AddMemberContactIDs adds the "member_contacts" edge to the Contact entity by IDs.
func (cuo *ContactUpdateOne) AddMemberContactIDs(ids ...int) *ContactUpdateOne {
	cuo.mutation.AddMemberContactIDs(ids...)
	return cuo
}

// AddMemberContacts adds the "member_contacts" edges to the Contact entity.
func (cuo *ContactUpdateOne) AddMemberContacts(c ...*Contact) *ContactUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddMemberContactIDs(ids...)
}

// SetGroupContact sets the "group_contact" edge to the Contact entity.
func (cuo *ContactUpdateOne) SetGroupContact(c *Contact) *ContactUpdateOne {
	return cuo.SetGroupContactID(c.ID)
}

// SetInternalUser sets the "internal_user" edge to the InternalUser entity.
func (cuo *ContactUpdateOne) SetInternalUser(i *InternalUser) *ContactUpdateOne {
	return cuo.SetInternalUserID(i.ID)
}

// AddOrderIDs adds the "orders" edge to the OrderInfo entity by IDs.
func (cuo *ContactUpdateOne) AddOrderIDs(ids ...int) *ContactUpdateOne {
	cuo.mutation.AddOrderIDs(ids...)
	return cuo
}

// AddOrders adds the "orders" edges to the OrderInfo entity.
func (cuo *ContactUpdateOne) AddOrders(o ...*OrderInfo) *ContactUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.AddOrderIDs(ids...)
}

// Mutation returns the ContactMutation object of the builder.
func (cuo *ContactUpdateOne) Mutation() *ContactMutation {
	return cuo.mutation
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (cuo *ContactUpdateOne) ClearClinic() *ContactUpdateOne {
	cuo.mutation.ClearClinic()
	return cuo
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (cuo *ContactUpdateOne) ClearPatient() *ContactUpdateOne {
	cuo.mutation.ClearPatient()
	return cuo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (cuo *ContactUpdateOne) ClearCustomer() *ContactUpdateOne {
	cuo.mutation.ClearCustomer()
	return cuo
}

// ClearCustomerClinicMappings clears all "customer_clinic_mappings" edges to the CustomerContactOnClinics entity.
func (cuo *ContactUpdateOne) ClearCustomerClinicMappings() *ContactUpdateOne {
	cuo.mutation.ClearCustomerClinicMappings()
	return cuo
}

// RemoveCustomerClinicMappingIDs removes the "customer_clinic_mappings" edge to CustomerContactOnClinics entities by IDs.
func (cuo *ContactUpdateOne) RemoveCustomerClinicMappingIDs(ids ...int) *ContactUpdateOne {
	cuo.mutation.RemoveCustomerClinicMappingIDs(ids...)
	return cuo
}

// RemoveCustomerClinicMappings removes "customer_clinic_mappings" edges to CustomerContactOnClinics entities.
func (cuo *ContactUpdateOne) RemoveCustomerClinicMappings(c ...*CustomerContactOnClinics) *ContactUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCustomerClinicMappingIDs(ids...)
}

// ClearMemberContacts clears all "member_contacts" edges to the Contact entity.
func (cuo *ContactUpdateOne) ClearMemberContacts() *ContactUpdateOne {
	cuo.mutation.ClearMemberContacts()
	return cuo
}

// RemoveMemberContactIDs removes the "member_contacts" edge to Contact entities by IDs.
func (cuo *ContactUpdateOne) RemoveMemberContactIDs(ids ...int) *ContactUpdateOne {
	cuo.mutation.RemoveMemberContactIDs(ids...)
	return cuo
}

// RemoveMemberContacts removes "member_contacts" edges to Contact entities.
func (cuo *ContactUpdateOne) RemoveMemberContacts(c ...*Contact) *ContactUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveMemberContactIDs(ids...)
}

// ClearGroupContact clears the "group_contact" edge to the Contact entity.
func (cuo *ContactUpdateOne) ClearGroupContact() *ContactUpdateOne {
	cuo.mutation.ClearGroupContact()
	return cuo
}

// ClearInternalUser clears the "internal_user" edge to the InternalUser entity.
func (cuo *ContactUpdateOne) ClearInternalUser() *ContactUpdateOne {
	cuo.mutation.ClearInternalUser()
	return cuo
}

// ClearOrders clears all "orders" edges to the OrderInfo entity.
func (cuo *ContactUpdateOne) ClearOrders() *ContactUpdateOne {
	cuo.mutation.ClearOrders()
	return cuo
}

// RemoveOrderIDs removes the "orders" edge to OrderInfo entities by IDs.
func (cuo *ContactUpdateOne) RemoveOrderIDs(ids ...int) *ContactUpdateOne {
	cuo.mutation.RemoveOrderIDs(ids...)
	return cuo
}

// RemoveOrders removes "orders" edges to OrderInfo entities.
func (cuo *ContactUpdateOne) RemoveOrders(o ...*OrderInfo) *ContactUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.RemoveOrderIDs(ids...)
}

// Where appends a list predicates to the ContactUpdate builder.
func (cuo *ContactUpdateOne) Where(ps ...predicate.Contact) *ContactUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContactUpdateOne) Select(field string, fields ...string) *ContactUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Contact entity.
func (cuo *ContactUpdateOne) Save(ctx context.Context) (*Contact, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContactUpdateOne) SaveX(ctx context.Context) *Contact {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContactUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContactUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ContactUpdateOne) sqlSave(ctx context.Context) (_node *Contact, err error) {
	_spec := sqlgraph.NewUpdateSpec(contact.Table, contact.Columns, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Contact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contact.FieldID)
		for _, f := range fields {
			if !contact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.ContactDescription(); ok {
		_spec.SetField(contact.FieldContactDescription, field.TypeString, value)
	}
	if cuo.mutation.ContactDescriptionCleared() {
		_spec.ClearField(contact.FieldContactDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.ContactDetails(); ok {
		_spec.SetField(contact.FieldContactDetails, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ContactType(); ok {
		_spec.SetField(contact.FieldContactType, field.TypeString, value)
	}
	if cuo.mutation.ContactTypeCleared() {
		_spec.ClearField(contact.FieldContactType, field.TypeString)
	}
	if value, ok := cuo.mutation.IsPrimaryContact(); ok {
		_spec.SetField(contact.FieldIsPrimaryContact, field.TypeBool, value)
	}
	if cuo.mutation.IsPrimaryContactCleared() {
		_spec.ClearField(contact.FieldIsPrimaryContact, field.TypeBool)
	}
	if value, ok := cuo.mutation.Is2faContact(); ok {
		_spec.SetField(contact.FieldIs2faContact, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.UserID(); ok {
		_spec.SetField(contact.FieldUserID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedUserID(); ok {
		_spec.AddField(contact.FieldUserID, field.TypeInt, value)
	}
	if cuo.mutation.UserIDCleared() {
		_spec.ClearField(contact.FieldUserID, field.TypeInt)
	}
	if value, ok := cuo.mutation.ContactLevel(); ok {
		_spec.SetField(contact.FieldContactLevel, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedContactLevel(); ok {
		_spec.AddField(contact.FieldContactLevel, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ContactLevelName(); ok {
		_spec.SetField(contact.FieldContactLevelName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ApplyToAllGroupMember(); ok {
		_spec.SetField(contact.FieldApplyToAllGroupMember, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.IsGroupContact(); ok {
		_spec.SetField(contact.FieldIsGroupContact, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.UseAsDefaultCreateContact(); ok {
		_spec.SetField(contact.FieldUseAsDefaultCreateContact, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.UseGroupContact(); ok {
		_spec.SetField(contact.FieldUseGroupContact, field.TypeBool, value)
	}
	if cuo.mutation.UseGroupContactCleared() {
		_spec.ClearField(contact.FieldUseGroupContact, field.TypeBool)
	}
	if cuo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.ClinicTable,
			Columns: []string{contact.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.ClinicTable,
			Columns: []string{contact.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.PatientTable,
			Columns: []string{contact.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.PatientTable,
			Columns: []string{contact.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.CustomerTable,
			Columns: []string{contact.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.CustomerTable,
			Columns: []string{contact.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CustomerClinicMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contact.CustomerClinicMappingsTable,
			Columns: []string{contact.CustomerClinicMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCustomerClinicMappingsIDs(); len(nodes) > 0 && !cuo.mutation.CustomerClinicMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contact.CustomerClinicMappingsTable,
			Columns: []string{contact.CustomerClinicMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CustomerClinicMappingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contact.CustomerClinicMappingsTable,
			Columns: []string{contact.CustomerClinicMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.MemberContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.MemberContactsTable,
			Columns: []string{contact.MemberContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedMemberContactsIDs(); len(nodes) > 0 && !cuo.mutation.MemberContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.MemberContactsTable,
			Columns: []string{contact.MemberContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MemberContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.MemberContactsTable,
			Columns: []string{contact.MemberContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.GroupContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contact.GroupContactTable,
			Columns: []string{contact.GroupContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.GroupContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contact.GroupContactTable,
			Columns: []string{contact.GroupContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.InternalUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.InternalUserTable,
			Columns: []string{contact.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.InternalUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.InternalUserTable,
			Columns: []string{contact.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contact.OrdersTable,
			Columns: []string{contact.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !cuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contact.OrdersTable,
			Columns: []string{contact.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contact.OrdersTable,
			Columns: []string{contact.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Contact{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
