// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/customercontactonclinics"
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerContactOnClinicsDelete is the builder for deleting a CustomerContactOnClinics entity.
type CustomerContactOnClinicsDelete struct {
	config
	hooks    []Hook
	mutation *CustomerContactOnClinicsMutation
}

// Where appends a list predicates to the CustomerContactOnClinicsDelete builder.
func (ccocd *CustomerContactOnClinicsDelete) Where(ps ...predicate.CustomerContactOnClinics) *CustomerContactOnClinicsDelete {
	ccocd.mutation.Where(ps...)
	return ccocd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ccocd *CustomerContactOnClinicsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ccocd.sqlExec, ccocd.mutation, ccocd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ccocd *CustomerContactOnClinicsDelete) ExecX(ctx context.Context) int {
	n, err := ccocd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ccocd *CustomerContactOnClinicsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(customercontactonclinics.Table, sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt))
	if ps := ccocd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ccocd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ccocd.mutation.done = true
	return affected, err
}

// CustomerContactOnClinicsDeleteOne is the builder for deleting a single CustomerContactOnClinics entity.
type CustomerContactOnClinicsDeleteOne struct {
	ccocd *CustomerContactOnClinicsDelete
}

// Where appends a list predicates to the CustomerContactOnClinicsDelete builder.
func (ccocdo *CustomerContactOnClinicsDeleteOne) Where(ps ...predicate.CustomerContactOnClinics) *CustomerContactOnClinicsDeleteOne {
	ccocdo.ccocd.mutation.Where(ps...)
	return ccocdo
}

// Exec executes the deletion query.
func (ccocdo *CustomerContactOnClinicsDeleteOne) Exec(ctx context.Context) error {
	n, err := ccocdo.ccocd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{customercontactonclinics.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ccocdo *CustomerContactOnClinicsDeleteOne) ExecX(ctx context.Context) {
	if err := ccocdo.Exec(ctx); err != nil {
		panic(err)
	}
}
