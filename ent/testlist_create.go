// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/testlist"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestListCreate is the builder for creating a TestList entity.
type TestListCreate struct {
	config
	mutation *TestListMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTestInstrument sets the "test_instrument" field.
func (tlc *TestListCreate) SetTestInstrument(ti testlist.TestInstrument) *TestListCreate {
	tlc.mutation.SetTestInstrument(ti)
	return tlc
}

// SetNillableTestInstrument sets the "test_instrument" field if the given value is not nil.
func (tlc *TestListCreate) SetNillableTestInstrument(ti *testlist.TestInstrument) *TestListCreate {
	if ti != nil {
		tlc.SetTestInstrument(*ti)
	}
	return tlc
}

// SetTubeType sets the "tube_type" field.
func (tlc *TestListCreate) SetTubeType(tt testlist.TubeType) *TestListCreate {
	tlc.mutation.SetTubeType(tt)
	return tlc
}

// SetDIGroupName sets the "DI_group_name" field.
func (tlc *TestListCreate) SetDIGroupName(s string) *TestListCreate {
	tlc.mutation.SetDIGroupName(s)
	return tlc
}

// SetNillableDIGroupName sets the "DI_group_name" field if the given value is not nil.
func (tlc *TestListCreate) SetNillableDIGroupName(s *string) *TestListCreate {
	if s != nil {
		tlc.SetDIGroupName(*s)
	}
	return tlc
}

// SetVolumeRequired sets the "volume_required" field.
func (tlc *TestListCreate) SetVolumeRequired(f float64) *TestListCreate {
	tlc.mutation.SetVolumeRequired(f)
	return tlc
}

// SetBloodType sets the "blood_type" field.
func (tlc *TestListCreate) SetBloodType(b bool) *TestListCreate {
	tlc.mutation.SetBloodType(b)
	return tlc
}

// SetID sets the "id" field.
func (tlc *TestListCreate) SetID(i int) *TestListCreate {
	tlc.mutation.SetID(i)
	return tlc
}

// Mutation returns the TestListMutation object of the builder.
func (tlc *TestListCreate) Mutation() *TestListMutation {
	return tlc.mutation
}

// Save creates the TestList in the database.
func (tlc *TestListCreate) Save(ctx context.Context) (*TestList, error) {
	tlc.defaults()
	return withHooks(ctx, tlc.sqlSave, tlc.mutation, tlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tlc *TestListCreate) SaveX(ctx context.Context) *TestList {
	v, err := tlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlc *TestListCreate) Exec(ctx context.Context) error {
	_, err := tlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlc *TestListCreate) ExecX(ctx context.Context) {
	if err := tlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlc *TestListCreate) defaults() {
	if _, ok := tlc.mutation.TestInstrument(); !ok {
		v := testlist.DefaultTestInstrument
		tlc.mutation.SetTestInstrument(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlc *TestListCreate) check() error {
	if v, ok := tlc.mutation.TestInstrument(); ok {
		if err := testlist.TestInstrumentValidator(v); err != nil {
			return &ValidationError{Name: "test_instrument", err: fmt.Errorf(`ent: validator failed for field "TestList.test_instrument": %w`, err)}
		}
	}
	if _, ok := tlc.mutation.TubeType(); !ok {
		return &ValidationError{Name: "tube_type", err: errors.New(`ent: missing required field "TestList.tube_type"`)}
	}
	if v, ok := tlc.mutation.TubeType(); ok {
		if err := testlist.TubeTypeValidator(v); err != nil {
			return &ValidationError{Name: "tube_type", err: fmt.Errorf(`ent: validator failed for field "TestList.tube_type": %w`, err)}
		}
	}
	if v, ok := tlc.mutation.DIGroupName(); ok {
		if err := testlist.DIGroupNameValidator(v); err != nil {
			return &ValidationError{Name: "DI_group_name", err: fmt.Errorf(`ent: validator failed for field "TestList.DI_group_name": %w`, err)}
		}
	}
	if _, ok := tlc.mutation.VolumeRequired(); !ok {
		return &ValidationError{Name: "volume_required", err: errors.New(`ent: missing required field "TestList.volume_required"`)}
	}
	if _, ok := tlc.mutation.BloodType(); !ok {
		return &ValidationError{Name: "blood_type", err: errors.New(`ent: missing required field "TestList.blood_type"`)}
	}
	return nil
}

func (tlc *TestListCreate) sqlSave(ctx context.Context) (*TestList, error) {
	if err := tlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tlc.mutation.id = &_node.ID
	tlc.mutation.done = true
	return _node, nil
}

func (tlc *TestListCreate) createSpec() (*TestList, *sqlgraph.CreateSpec) {
	var (
		_node = &TestList{config: tlc.config}
		_spec = sqlgraph.NewCreateSpec(testlist.Table, sqlgraph.NewFieldSpec(testlist.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tlc.conflict
	if id, ok := tlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tlc.mutation.TestInstrument(); ok {
		_spec.SetField(testlist.FieldTestInstrument, field.TypeEnum, value)
		_node.TestInstrument = value
	}
	if value, ok := tlc.mutation.TubeType(); ok {
		_spec.SetField(testlist.FieldTubeType, field.TypeEnum, value)
		_node.TubeType = value
	}
	if value, ok := tlc.mutation.DIGroupName(); ok {
		_spec.SetField(testlist.FieldDIGroupName, field.TypeString, value)
		_node.DIGroupName = value
	}
	if value, ok := tlc.mutation.VolumeRequired(); ok {
		_spec.SetField(testlist.FieldVolumeRequired, field.TypeFloat64, value)
		_node.VolumeRequired = value
	}
	if value, ok := tlc.mutation.BloodType(); ok {
		_spec.SetField(testlist.FieldBloodType, field.TypeBool, value)
		_node.BloodType = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestList.Create().
//		SetTestInstrument(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestListUpsert) {
//			SetTestInstrument(v+v).
//		}).
//		Exec(ctx)
func (tlc *TestListCreate) OnConflict(opts ...sql.ConflictOption) *TestListUpsertOne {
	tlc.conflict = opts
	return &TestListUpsertOne{
		create: tlc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestList.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tlc *TestListCreate) OnConflictColumns(columns ...string) *TestListUpsertOne {
	tlc.conflict = append(tlc.conflict, sql.ConflictColumns(columns...))
	return &TestListUpsertOne{
		create: tlc,
	}
}

type (
	// TestListUpsertOne is the builder for "upsert"-ing
	//  one TestList node.
	TestListUpsertOne struct {
		create *TestListCreate
	}

	// TestListUpsert is the "OnConflict" setter.
	TestListUpsert struct {
		*sql.UpdateSet
	}
)

// SetTestInstrument sets the "test_instrument" field.
func (u *TestListUpsert) SetTestInstrument(v testlist.TestInstrument) *TestListUpsert {
	u.Set(testlist.FieldTestInstrument, v)
	return u
}

// UpdateTestInstrument sets the "test_instrument" field to the value that was provided on create.
func (u *TestListUpsert) UpdateTestInstrument() *TestListUpsert {
	u.SetExcluded(testlist.FieldTestInstrument)
	return u
}

// ClearTestInstrument clears the value of the "test_instrument" field.
func (u *TestListUpsert) ClearTestInstrument() *TestListUpsert {
	u.SetNull(testlist.FieldTestInstrument)
	return u
}

// SetTubeType sets the "tube_type" field.
func (u *TestListUpsert) SetTubeType(v testlist.TubeType) *TestListUpsert {
	u.Set(testlist.FieldTubeType, v)
	return u
}

// UpdateTubeType sets the "tube_type" field to the value that was provided on create.
func (u *TestListUpsert) UpdateTubeType() *TestListUpsert {
	u.SetExcluded(testlist.FieldTubeType)
	return u
}

// SetDIGroupName sets the "DI_group_name" field.
func (u *TestListUpsert) SetDIGroupName(v string) *TestListUpsert {
	u.Set(testlist.FieldDIGroupName, v)
	return u
}

// UpdateDIGroupName sets the "DI_group_name" field to the value that was provided on create.
func (u *TestListUpsert) UpdateDIGroupName() *TestListUpsert {
	u.SetExcluded(testlist.FieldDIGroupName)
	return u
}

// ClearDIGroupName clears the value of the "DI_group_name" field.
func (u *TestListUpsert) ClearDIGroupName() *TestListUpsert {
	u.SetNull(testlist.FieldDIGroupName)
	return u
}

// SetVolumeRequired sets the "volume_required" field.
func (u *TestListUpsert) SetVolumeRequired(v float64) *TestListUpsert {
	u.Set(testlist.FieldVolumeRequired, v)
	return u
}

// UpdateVolumeRequired sets the "volume_required" field to the value that was provided on create.
func (u *TestListUpsert) UpdateVolumeRequired() *TestListUpsert {
	u.SetExcluded(testlist.FieldVolumeRequired)
	return u
}

// AddVolumeRequired adds v to the "volume_required" field.
func (u *TestListUpsert) AddVolumeRequired(v float64) *TestListUpsert {
	u.Add(testlist.FieldVolumeRequired, v)
	return u
}

// SetBloodType sets the "blood_type" field.
func (u *TestListUpsert) SetBloodType(v bool) *TestListUpsert {
	u.Set(testlist.FieldBloodType, v)
	return u
}

// UpdateBloodType sets the "blood_type" field to the value that was provided on create.
func (u *TestListUpsert) UpdateBloodType() *TestListUpsert {
	u.SetExcluded(testlist.FieldBloodType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TestList.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(testlist.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TestListUpsertOne) UpdateNewValues() *TestListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(testlist.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TestList.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TestListUpsertOne) Ignore() *TestListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestListUpsertOne) DoNothing() *TestListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestListCreate.OnConflict
// documentation for more info.
func (u *TestListUpsertOne) Update(set func(*TestListUpsert)) *TestListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestListUpsert{UpdateSet: update})
	}))
	return u
}

// SetTestInstrument sets the "test_instrument" field.
func (u *TestListUpsertOne) SetTestInstrument(v testlist.TestInstrument) *TestListUpsertOne {
	return u.Update(func(s *TestListUpsert) {
		s.SetTestInstrument(v)
	})
}

// UpdateTestInstrument sets the "test_instrument" field to the value that was provided on create.
func (u *TestListUpsertOne) UpdateTestInstrument() *TestListUpsertOne {
	return u.Update(func(s *TestListUpsert) {
		s.UpdateTestInstrument()
	})
}

// ClearTestInstrument clears the value of the "test_instrument" field.
func (u *TestListUpsertOne) ClearTestInstrument() *TestListUpsertOne {
	return u.Update(func(s *TestListUpsert) {
		s.ClearTestInstrument()
	})
}

// SetTubeType sets the "tube_type" field.
func (u *TestListUpsertOne) SetTubeType(v testlist.TubeType) *TestListUpsertOne {
	return u.Update(func(s *TestListUpsert) {
		s.SetTubeType(v)
	})
}

// UpdateTubeType sets the "tube_type" field to the value that was provided on create.
func (u *TestListUpsertOne) UpdateTubeType() *TestListUpsertOne {
	return u.Update(func(s *TestListUpsert) {
		s.UpdateTubeType()
	})
}

// SetDIGroupName sets the "DI_group_name" field.
func (u *TestListUpsertOne) SetDIGroupName(v string) *TestListUpsertOne {
	return u.Update(func(s *TestListUpsert) {
		s.SetDIGroupName(v)
	})
}

// UpdateDIGroupName sets the "DI_group_name" field to the value that was provided on create.
func (u *TestListUpsertOne) UpdateDIGroupName() *TestListUpsertOne {
	return u.Update(func(s *TestListUpsert) {
		s.UpdateDIGroupName()
	})
}

// ClearDIGroupName clears the value of the "DI_group_name" field.
func (u *TestListUpsertOne) ClearDIGroupName() *TestListUpsertOne {
	return u.Update(func(s *TestListUpsert) {
		s.ClearDIGroupName()
	})
}

// SetVolumeRequired sets the "volume_required" field.
func (u *TestListUpsertOne) SetVolumeRequired(v float64) *TestListUpsertOne {
	return u.Update(func(s *TestListUpsert) {
		s.SetVolumeRequired(v)
	})
}

// AddVolumeRequired adds v to the "volume_required" field.
func (u *TestListUpsertOne) AddVolumeRequired(v float64) *TestListUpsertOne {
	return u.Update(func(s *TestListUpsert) {
		s.AddVolumeRequired(v)
	})
}

// UpdateVolumeRequired sets the "volume_required" field to the value that was provided on create.
func (u *TestListUpsertOne) UpdateVolumeRequired() *TestListUpsertOne {
	return u.Update(func(s *TestListUpsert) {
		s.UpdateVolumeRequired()
	})
}

// SetBloodType sets the "blood_type" field.
func (u *TestListUpsertOne) SetBloodType(v bool) *TestListUpsertOne {
	return u.Update(func(s *TestListUpsert) {
		s.SetBloodType(v)
	})
}

// UpdateBloodType sets the "blood_type" field to the value that was provided on create.
func (u *TestListUpsertOne) UpdateBloodType() *TestListUpsertOne {
	return u.Update(func(s *TestListUpsert) {
		s.UpdateBloodType()
	})
}

// Exec executes the query.
func (u *TestListUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestListCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestListUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TestListUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TestListUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TestListCreateBulk is the builder for creating many TestList entities in bulk.
type TestListCreateBulk struct {
	config
	err      error
	builders []*TestListCreate
	conflict []sql.ConflictOption
}

// Save creates the TestList entities in the database.
func (tlcb *TestListCreateBulk) Save(ctx context.Context) ([]*TestList, error) {
	if tlcb.err != nil {
		return nil, tlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tlcb.builders))
	nodes := make([]*TestList, len(tlcb.builders))
	mutators := make([]Mutator, len(tlcb.builders))
	for i := range tlcb.builders {
		func(i int, root context.Context) {
			builder := tlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestListMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tlcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlcb *TestListCreateBulk) SaveX(ctx context.Context) []*TestList {
	v, err := tlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlcb *TestListCreateBulk) Exec(ctx context.Context) error {
	_, err := tlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlcb *TestListCreateBulk) ExecX(ctx context.Context) {
	if err := tlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestList.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestListUpsert) {
//			SetTestInstrument(v+v).
//		}).
//		Exec(ctx)
func (tlcb *TestListCreateBulk) OnConflict(opts ...sql.ConflictOption) *TestListUpsertBulk {
	tlcb.conflict = opts
	return &TestListUpsertBulk{
		create: tlcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestList.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tlcb *TestListCreateBulk) OnConflictColumns(columns ...string) *TestListUpsertBulk {
	tlcb.conflict = append(tlcb.conflict, sql.ConflictColumns(columns...))
	return &TestListUpsertBulk{
		create: tlcb,
	}
}

// TestListUpsertBulk is the builder for "upsert"-ing
// a bulk of TestList nodes.
type TestListUpsertBulk struct {
	create *TestListCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TestList.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(testlist.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TestListUpsertBulk) UpdateNewValues() *TestListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(testlist.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TestList.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TestListUpsertBulk) Ignore() *TestListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestListUpsertBulk) DoNothing() *TestListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestListCreateBulk.OnConflict
// documentation for more info.
func (u *TestListUpsertBulk) Update(set func(*TestListUpsert)) *TestListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestListUpsert{UpdateSet: update})
	}))
	return u
}

// SetTestInstrument sets the "test_instrument" field.
func (u *TestListUpsertBulk) SetTestInstrument(v testlist.TestInstrument) *TestListUpsertBulk {
	return u.Update(func(s *TestListUpsert) {
		s.SetTestInstrument(v)
	})
}

// UpdateTestInstrument sets the "test_instrument" field to the value that was provided on create.
func (u *TestListUpsertBulk) UpdateTestInstrument() *TestListUpsertBulk {
	return u.Update(func(s *TestListUpsert) {
		s.UpdateTestInstrument()
	})
}

// ClearTestInstrument clears the value of the "test_instrument" field.
func (u *TestListUpsertBulk) ClearTestInstrument() *TestListUpsertBulk {
	return u.Update(func(s *TestListUpsert) {
		s.ClearTestInstrument()
	})
}

// SetTubeType sets the "tube_type" field.
func (u *TestListUpsertBulk) SetTubeType(v testlist.TubeType) *TestListUpsertBulk {
	return u.Update(func(s *TestListUpsert) {
		s.SetTubeType(v)
	})
}

// UpdateTubeType sets the "tube_type" field to the value that was provided on create.
func (u *TestListUpsertBulk) UpdateTubeType() *TestListUpsertBulk {
	return u.Update(func(s *TestListUpsert) {
		s.UpdateTubeType()
	})
}

// SetDIGroupName sets the "DI_group_name" field.
func (u *TestListUpsertBulk) SetDIGroupName(v string) *TestListUpsertBulk {
	return u.Update(func(s *TestListUpsert) {
		s.SetDIGroupName(v)
	})
}

// UpdateDIGroupName sets the "DI_group_name" field to the value that was provided on create.
func (u *TestListUpsertBulk) UpdateDIGroupName() *TestListUpsertBulk {
	return u.Update(func(s *TestListUpsert) {
		s.UpdateDIGroupName()
	})
}

// ClearDIGroupName clears the value of the "DI_group_name" field.
func (u *TestListUpsertBulk) ClearDIGroupName() *TestListUpsertBulk {
	return u.Update(func(s *TestListUpsert) {
		s.ClearDIGroupName()
	})
}

// SetVolumeRequired sets the "volume_required" field.
func (u *TestListUpsertBulk) SetVolumeRequired(v float64) *TestListUpsertBulk {
	return u.Update(func(s *TestListUpsert) {
		s.SetVolumeRequired(v)
	})
}

// AddVolumeRequired adds v to the "volume_required" field.
func (u *TestListUpsertBulk) AddVolumeRequired(v float64) *TestListUpsertBulk {
	return u.Update(func(s *TestListUpsert) {
		s.AddVolumeRequired(v)
	})
}

// UpdateVolumeRequired sets the "volume_required" field to the value that was provided on create.
func (u *TestListUpsertBulk) UpdateVolumeRequired() *TestListUpsertBulk {
	return u.Update(func(s *TestListUpsert) {
		s.UpdateVolumeRequired()
	})
}

// SetBloodType sets the "blood_type" field.
func (u *TestListUpsertBulk) SetBloodType(v bool) *TestListUpsertBulk {
	return u.Update(func(s *TestListUpsert) {
		s.SetBloodType(v)
	})
}

// UpdateBloodType sets the "blood_type" field to the value that was provided on create.
func (u *TestListUpsertBulk) UpdateBloodType() *TestListUpsertBulk {
	return u.Update(func(s *TestListUpsert) {
		s.UpdateBloodType()
	})
}

// Exec executes the query.
func (u *TestListUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TestListCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestListCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestListUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
