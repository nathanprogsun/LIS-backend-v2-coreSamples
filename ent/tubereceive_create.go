// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/sample"
	"coresamples/ent/tubereceive"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TubeReceiveCreate is the builder for creating a TubeReceive entity.
type TubeReceiveCreate struct {
	config
	mutation *TubeReceiveMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSampleID sets the "sample_id" field.
func (trc *TubeReceiveCreate) SetSampleID(i int) *TubeReceiveCreate {
	trc.mutation.SetSampleID(i)
	return trc
}

// SetTubeType sets the "tube_type" field.
func (trc *TubeReceiveCreate) SetTubeType(s string) *TubeReceiveCreate {
	trc.mutation.SetTubeType(s)
	return trc
}

// SetReceivedCount sets the "received_count" field.
func (trc *TubeReceiveCreate) SetReceivedCount(i int) *TubeReceiveCreate {
	trc.mutation.SetReceivedCount(i)
	return trc
}

// SetReceivedTime sets the "received_time" field.
func (trc *TubeReceiveCreate) SetReceivedTime(t time.Time) *TubeReceiveCreate {
	trc.mutation.SetReceivedTime(t)
	return trc
}

// SetNillableReceivedTime sets the "received_time" field if the given value is not nil.
func (trc *TubeReceiveCreate) SetNillableReceivedTime(t *time.Time) *TubeReceiveCreate {
	if t != nil {
		trc.SetReceivedTime(*t)
	}
	return trc
}

// SetReceivedBy sets the "received_by" field.
func (trc *TubeReceiveCreate) SetReceivedBy(s string) *TubeReceiveCreate {
	trc.mutation.SetReceivedBy(s)
	return trc
}

// SetModifiedBy sets the "modified_by" field.
func (trc *TubeReceiveCreate) SetModifiedBy(s string) *TubeReceiveCreate {
	trc.mutation.SetModifiedBy(s)
	return trc
}

// SetNillableModifiedBy sets the "modified_by" field if the given value is not nil.
func (trc *TubeReceiveCreate) SetNillableModifiedBy(s *string) *TubeReceiveCreate {
	if s != nil {
		trc.SetModifiedBy(*s)
	}
	return trc
}

// SetModifiedTime sets the "modified_time" field.
func (trc *TubeReceiveCreate) SetModifiedTime(t time.Time) *TubeReceiveCreate {
	trc.mutation.SetModifiedTime(t)
	return trc
}

// SetNillableModifiedTime sets the "modified_time" field if the given value is not nil.
func (trc *TubeReceiveCreate) SetNillableModifiedTime(t *time.Time) *TubeReceiveCreate {
	if t != nil {
		trc.SetModifiedTime(*t)
	}
	return trc
}

// SetCollectionTime sets the "collection_time" field.
func (trc *TubeReceiveCreate) SetCollectionTime(t time.Time) *TubeReceiveCreate {
	trc.mutation.SetCollectionTime(t)
	return trc
}

// SetNillableCollectionTime sets the "collection_time" field if the given value is not nil.
func (trc *TubeReceiveCreate) SetNillableCollectionTime(t *time.Time) *TubeReceiveCreate {
	if t != nil {
		trc.SetCollectionTime(*t)
	}
	return trc
}

// SetIsRedraw sets the "is_redraw" field.
func (trc *TubeReceiveCreate) SetIsRedraw(b bool) *TubeReceiveCreate {
	trc.mutation.SetIsRedraw(b)
	return trc
}

// SetNillableIsRedraw sets the "is_redraw" field if the given value is not nil.
func (trc *TubeReceiveCreate) SetNillableIsRedraw(b *bool) *TubeReceiveCreate {
	if b != nil {
		trc.SetIsRedraw(*b)
	}
	return trc
}

// SetIsRerun sets the "is_rerun" field.
func (trc *TubeReceiveCreate) SetIsRerun(b bool) *TubeReceiveCreate {
	trc.mutation.SetIsRerun(b)
	return trc
}

// SetNillableIsRerun sets the "is_rerun" field if the given value is not nil.
func (trc *TubeReceiveCreate) SetNillableIsRerun(b *bool) *TubeReceiveCreate {
	if b != nil {
		trc.SetIsRerun(*b)
	}
	return trc
}

// SetSample sets the "sample" edge to the Sample entity.
func (trc *TubeReceiveCreate) SetSample(s *Sample) *TubeReceiveCreate {
	return trc.SetSampleID(s.ID)
}

// Mutation returns the TubeReceiveMutation object of the builder.
func (trc *TubeReceiveCreate) Mutation() *TubeReceiveMutation {
	return trc.mutation
}

// Save creates the TubeReceive in the database.
func (trc *TubeReceiveCreate) Save(ctx context.Context) (*TubeReceive, error) {
	trc.defaults()
	return withHooks(ctx, trc.sqlSave, trc.mutation, trc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TubeReceiveCreate) SaveX(ctx context.Context) *TubeReceive {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trc *TubeReceiveCreate) Exec(ctx context.Context) error {
	_, err := trc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trc *TubeReceiveCreate) ExecX(ctx context.Context) {
	if err := trc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (trc *TubeReceiveCreate) defaults() {
	if _, ok := trc.mutation.ReceivedTime(); !ok {
		v := tubereceive.DefaultReceivedTime()
		trc.mutation.SetReceivedTime(v)
	}
	if _, ok := trc.mutation.CollectionTime(); !ok {
		v := tubereceive.DefaultCollectionTime()
		trc.mutation.SetCollectionTime(v)
	}
	if _, ok := trc.mutation.IsRedraw(); !ok {
		v := tubereceive.DefaultIsRedraw
		trc.mutation.SetIsRedraw(v)
	}
	if _, ok := trc.mutation.IsRerun(); !ok {
		v := tubereceive.DefaultIsRerun
		trc.mutation.SetIsRerun(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (trc *TubeReceiveCreate) check() error {
	if _, ok := trc.mutation.SampleID(); !ok {
		return &ValidationError{Name: "sample_id", err: errors.New(`ent: missing required field "TubeReceive.sample_id"`)}
	}
	if _, ok := trc.mutation.TubeType(); !ok {
		return &ValidationError{Name: "tube_type", err: errors.New(`ent: missing required field "TubeReceive.tube_type"`)}
	}
	if _, ok := trc.mutation.ReceivedCount(); !ok {
		return &ValidationError{Name: "received_count", err: errors.New(`ent: missing required field "TubeReceive.received_count"`)}
	}
	if _, ok := trc.mutation.ReceivedTime(); !ok {
		return &ValidationError{Name: "received_time", err: errors.New(`ent: missing required field "TubeReceive.received_time"`)}
	}
	if _, ok := trc.mutation.ReceivedBy(); !ok {
		return &ValidationError{Name: "received_by", err: errors.New(`ent: missing required field "TubeReceive.received_by"`)}
	}
	if _, ok := trc.mutation.CollectionTime(); !ok {
		return &ValidationError{Name: "collection_time", err: errors.New(`ent: missing required field "TubeReceive.collection_time"`)}
	}
	if _, ok := trc.mutation.IsRedraw(); !ok {
		return &ValidationError{Name: "is_redraw", err: errors.New(`ent: missing required field "TubeReceive.is_redraw"`)}
	}
	if _, ok := trc.mutation.IsRerun(); !ok {
		return &ValidationError{Name: "is_rerun", err: errors.New(`ent: missing required field "TubeReceive.is_rerun"`)}
	}
	if _, ok := trc.mutation.SampleID(); !ok {
		return &ValidationError{Name: "sample", err: errors.New(`ent: missing required edge "TubeReceive.sample"`)}
	}
	return nil
}

func (trc *TubeReceiveCreate) sqlSave(ctx context.Context) (*TubeReceive, error) {
	if err := trc.check(); err != nil {
		return nil, err
	}
	_node, _spec := trc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	trc.mutation.id = &_node.ID
	trc.mutation.done = true
	return _node, nil
}

func (trc *TubeReceiveCreate) createSpec() (*TubeReceive, *sqlgraph.CreateSpec) {
	var (
		_node = &TubeReceive{config: trc.config}
		_spec = sqlgraph.NewCreateSpec(tubereceive.Table, sqlgraph.NewFieldSpec(tubereceive.FieldID, field.TypeInt))
	)
	_spec.OnConflict = trc.conflict
	if value, ok := trc.mutation.TubeType(); ok {
		_spec.SetField(tubereceive.FieldTubeType, field.TypeString, value)
		_node.TubeType = value
	}
	if value, ok := trc.mutation.ReceivedCount(); ok {
		_spec.SetField(tubereceive.FieldReceivedCount, field.TypeInt, value)
		_node.ReceivedCount = value
	}
	if value, ok := trc.mutation.ReceivedTime(); ok {
		_spec.SetField(tubereceive.FieldReceivedTime, field.TypeTime, value)
		_node.ReceivedTime = value
	}
	if value, ok := trc.mutation.ReceivedBy(); ok {
		_spec.SetField(tubereceive.FieldReceivedBy, field.TypeString, value)
		_node.ReceivedBy = value
	}
	if value, ok := trc.mutation.ModifiedBy(); ok {
		_spec.SetField(tubereceive.FieldModifiedBy, field.TypeString, value)
		_node.ModifiedBy = value
	}
	if value, ok := trc.mutation.ModifiedTime(); ok {
		_spec.SetField(tubereceive.FieldModifiedTime, field.TypeTime, value)
		_node.ModifiedTime = value
	}
	if value, ok := trc.mutation.CollectionTime(); ok {
		_spec.SetField(tubereceive.FieldCollectionTime, field.TypeTime, value)
		_node.CollectionTime = value
	}
	if value, ok := trc.mutation.IsRedraw(); ok {
		_spec.SetField(tubereceive.FieldIsRedraw, field.TypeBool, value)
		_node.IsRedraw = value
	}
	if value, ok := trc.mutation.IsRerun(); ok {
		_spec.SetField(tubereceive.FieldIsRerun, field.TypeBool, value)
		_node.IsRerun = value
	}
	if nodes := trc.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tubereceive.SampleTable,
			Columns: []string{tubereceive.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SampleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TubeReceive.Create().
//		SetSampleID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TubeReceiveUpsert) {
//			SetSampleID(v+v).
//		}).
//		Exec(ctx)
func (trc *TubeReceiveCreate) OnConflict(opts ...sql.ConflictOption) *TubeReceiveUpsertOne {
	trc.conflict = opts
	return &TubeReceiveUpsertOne{
		create: trc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TubeReceive.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (trc *TubeReceiveCreate) OnConflictColumns(columns ...string) *TubeReceiveUpsertOne {
	trc.conflict = append(trc.conflict, sql.ConflictColumns(columns...))
	return &TubeReceiveUpsertOne{
		create: trc,
	}
}

type (
	// TubeReceiveUpsertOne is the builder for "upsert"-ing
	//  one TubeReceive node.
	TubeReceiveUpsertOne struct {
		create *TubeReceiveCreate
	}

	// TubeReceiveUpsert is the "OnConflict" setter.
	TubeReceiveUpsert struct {
		*sql.UpdateSet
	}
)

// SetSampleID sets the "sample_id" field.
func (u *TubeReceiveUpsert) SetSampleID(v int) *TubeReceiveUpsert {
	u.Set(tubereceive.FieldSampleID, v)
	return u
}

// UpdateSampleID sets the "sample_id" field to the value that was provided on create.
func (u *TubeReceiveUpsert) UpdateSampleID() *TubeReceiveUpsert {
	u.SetExcluded(tubereceive.FieldSampleID)
	return u
}

// SetTubeType sets the "tube_type" field.
func (u *TubeReceiveUpsert) SetTubeType(v string) *TubeReceiveUpsert {
	u.Set(tubereceive.FieldTubeType, v)
	return u
}

// UpdateTubeType sets the "tube_type" field to the value that was provided on create.
func (u *TubeReceiveUpsert) UpdateTubeType() *TubeReceiveUpsert {
	u.SetExcluded(tubereceive.FieldTubeType)
	return u
}

// SetReceivedCount sets the "received_count" field.
func (u *TubeReceiveUpsert) SetReceivedCount(v int) *TubeReceiveUpsert {
	u.Set(tubereceive.FieldReceivedCount, v)
	return u
}

// UpdateReceivedCount sets the "received_count" field to the value that was provided on create.
func (u *TubeReceiveUpsert) UpdateReceivedCount() *TubeReceiveUpsert {
	u.SetExcluded(tubereceive.FieldReceivedCount)
	return u
}

// AddReceivedCount adds v to the "received_count" field.
func (u *TubeReceiveUpsert) AddReceivedCount(v int) *TubeReceiveUpsert {
	u.Add(tubereceive.FieldReceivedCount, v)
	return u
}

// SetReceivedTime sets the "received_time" field.
func (u *TubeReceiveUpsert) SetReceivedTime(v time.Time) *TubeReceiveUpsert {
	u.Set(tubereceive.FieldReceivedTime, v)
	return u
}

// UpdateReceivedTime sets the "received_time" field to the value that was provided on create.
func (u *TubeReceiveUpsert) UpdateReceivedTime() *TubeReceiveUpsert {
	u.SetExcluded(tubereceive.FieldReceivedTime)
	return u
}

// SetReceivedBy sets the "received_by" field.
func (u *TubeReceiveUpsert) SetReceivedBy(v string) *TubeReceiveUpsert {
	u.Set(tubereceive.FieldReceivedBy, v)
	return u
}

// UpdateReceivedBy sets the "received_by" field to the value that was provided on create.
func (u *TubeReceiveUpsert) UpdateReceivedBy() *TubeReceiveUpsert {
	u.SetExcluded(tubereceive.FieldReceivedBy)
	return u
}

// SetModifiedBy sets the "modified_by" field.
func (u *TubeReceiveUpsert) SetModifiedBy(v string) *TubeReceiveUpsert {
	u.Set(tubereceive.FieldModifiedBy, v)
	return u
}

// UpdateModifiedBy sets the "modified_by" field to the value that was provided on create.
func (u *TubeReceiveUpsert) UpdateModifiedBy() *TubeReceiveUpsert {
	u.SetExcluded(tubereceive.FieldModifiedBy)
	return u
}

// ClearModifiedBy clears the value of the "modified_by" field.
func (u *TubeReceiveUpsert) ClearModifiedBy() *TubeReceiveUpsert {
	u.SetNull(tubereceive.FieldModifiedBy)
	return u
}

// SetModifiedTime sets the "modified_time" field.
func (u *TubeReceiveUpsert) SetModifiedTime(v time.Time) *TubeReceiveUpsert {
	u.Set(tubereceive.FieldModifiedTime, v)
	return u
}

// UpdateModifiedTime sets the "modified_time" field to the value that was provided on create.
func (u *TubeReceiveUpsert) UpdateModifiedTime() *TubeReceiveUpsert {
	u.SetExcluded(tubereceive.FieldModifiedTime)
	return u
}

// ClearModifiedTime clears the value of the "modified_time" field.
func (u *TubeReceiveUpsert) ClearModifiedTime() *TubeReceiveUpsert {
	u.SetNull(tubereceive.FieldModifiedTime)
	return u
}

// SetCollectionTime sets the "collection_time" field.
func (u *TubeReceiveUpsert) SetCollectionTime(v time.Time) *TubeReceiveUpsert {
	u.Set(tubereceive.FieldCollectionTime, v)
	return u
}

// UpdateCollectionTime sets the "collection_time" field to the value that was provided on create.
func (u *TubeReceiveUpsert) UpdateCollectionTime() *TubeReceiveUpsert {
	u.SetExcluded(tubereceive.FieldCollectionTime)
	return u
}

// SetIsRedraw sets the "is_redraw" field.
func (u *TubeReceiveUpsert) SetIsRedraw(v bool) *TubeReceiveUpsert {
	u.Set(tubereceive.FieldIsRedraw, v)
	return u
}

// UpdateIsRedraw sets the "is_redraw" field to the value that was provided on create.
func (u *TubeReceiveUpsert) UpdateIsRedraw() *TubeReceiveUpsert {
	u.SetExcluded(tubereceive.FieldIsRedraw)
	return u
}

// SetIsRerun sets the "is_rerun" field.
func (u *TubeReceiveUpsert) SetIsRerun(v bool) *TubeReceiveUpsert {
	u.Set(tubereceive.FieldIsRerun, v)
	return u
}

// UpdateIsRerun sets the "is_rerun" field to the value that was provided on create.
func (u *TubeReceiveUpsert) UpdateIsRerun() *TubeReceiveUpsert {
	u.SetExcluded(tubereceive.FieldIsRerun)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TubeReceive.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TubeReceiveUpsertOne) UpdateNewValues() *TubeReceiveUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TubeReceive.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TubeReceiveUpsertOne) Ignore() *TubeReceiveUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TubeReceiveUpsertOne) DoNothing() *TubeReceiveUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TubeReceiveCreate.OnConflict
// documentation for more info.
func (u *TubeReceiveUpsertOne) Update(set func(*TubeReceiveUpsert)) *TubeReceiveUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TubeReceiveUpsert{UpdateSet: update})
	}))
	return u
}

// SetSampleID sets the "sample_id" field.
func (u *TubeReceiveUpsertOne) SetSampleID(v int) *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetSampleID(v)
	})
}

// UpdateSampleID sets the "sample_id" field to the value that was provided on create.
func (u *TubeReceiveUpsertOne) UpdateSampleID() *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateSampleID()
	})
}

// SetTubeType sets the "tube_type" field.
func (u *TubeReceiveUpsertOne) SetTubeType(v string) *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetTubeType(v)
	})
}

// UpdateTubeType sets the "tube_type" field to the value that was provided on create.
func (u *TubeReceiveUpsertOne) UpdateTubeType() *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateTubeType()
	})
}

// SetReceivedCount sets the "received_count" field.
func (u *TubeReceiveUpsertOne) SetReceivedCount(v int) *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetReceivedCount(v)
	})
}

// AddReceivedCount adds v to the "received_count" field.
func (u *TubeReceiveUpsertOne) AddReceivedCount(v int) *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.AddReceivedCount(v)
	})
}

// UpdateReceivedCount sets the "received_count" field to the value that was provided on create.
func (u *TubeReceiveUpsertOne) UpdateReceivedCount() *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateReceivedCount()
	})
}

// SetReceivedTime sets the "received_time" field.
func (u *TubeReceiveUpsertOne) SetReceivedTime(v time.Time) *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetReceivedTime(v)
	})
}

// UpdateReceivedTime sets the "received_time" field to the value that was provided on create.
func (u *TubeReceiveUpsertOne) UpdateReceivedTime() *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateReceivedTime()
	})
}

// SetReceivedBy sets the "received_by" field.
func (u *TubeReceiveUpsertOne) SetReceivedBy(v string) *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetReceivedBy(v)
	})
}

// UpdateReceivedBy sets the "received_by" field to the value that was provided on create.
func (u *TubeReceiveUpsertOne) UpdateReceivedBy() *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateReceivedBy()
	})
}

// SetModifiedBy sets the "modified_by" field.
func (u *TubeReceiveUpsertOne) SetModifiedBy(v string) *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetModifiedBy(v)
	})
}

// UpdateModifiedBy sets the "modified_by" field to the value that was provided on create.
func (u *TubeReceiveUpsertOne) UpdateModifiedBy() *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateModifiedBy()
	})
}

// ClearModifiedBy clears the value of the "modified_by" field.
func (u *TubeReceiveUpsertOne) ClearModifiedBy() *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.ClearModifiedBy()
	})
}

// SetModifiedTime sets the "modified_time" field.
func (u *TubeReceiveUpsertOne) SetModifiedTime(v time.Time) *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetModifiedTime(v)
	})
}

// UpdateModifiedTime sets the "modified_time" field to the value that was provided on create.
func (u *TubeReceiveUpsertOne) UpdateModifiedTime() *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateModifiedTime()
	})
}

// ClearModifiedTime clears the value of the "modified_time" field.
func (u *TubeReceiveUpsertOne) ClearModifiedTime() *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.ClearModifiedTime()
	})
}

// SetCollectionTime sets the "collection_time" field.
func (u *TubeReceiveUpsertOne) SetCollectionTime(v time.Time) *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetCollectionTime(v)
	})
}

// UpdateCollectionTime sets the "collection_time" field to the value that was provided on create.
func (u *TubeReceiveUpsertOne) UpdateCollectionTime() *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateCollectionTime()
	})
}

// SetIsRedraw sets the "is_redraw" field.
func (u *TubeReceiveUpsertOne) SetIsRedraw(v bool) *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetIsRedraw(v)
	})
}

// UpdateIsRedraw sets the "is_redraw" field to the value that was provided on create.
func (u *TubeReceiveUpsertOne) UpdateIsRedraw() *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateIsRedraw()
	})
}

// SetIsRerun sets the "is_rerun" field.
func (u *TubeReceiveUpsertOne) SetIsRerun(v bool) *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetIsRerun(v)
	})
}

// UpdateIsRerun sets the "is_rerun" field to the value that was provided on create.
func (u *TubeReceiveUpsertOne) UpdateIsRerun() *TubeReceiveUpsertOne {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateIsRerun()
	})
}

// Exec executes the query.
func (u *TubeReceiveUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TubeReceiveCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TubeReceiveUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TubeReceiveUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TubeReceiveUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TubeReceiveCreateBulk is the builder for creating many TubeReceive entities in bulk.
type TubeReceiveCreateBulk struct {
	config
	err      error
	builders []*TubeReceiveCreate
	conflict []sql.ConflictOption
}

// Save creates the TubeReceive entities in the database.
func (trcb *TubeReceiveCreateBulk) Save(ctx context.Context) ([]*TubeReceive, error) {
	if trcb.err != nil {
		return nil, trcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(trcb.builders))
	nodes := make([]*TubeReceive, len(trcb.builders))
	mutators := make([]Mutator, len(trcb.builders))
	for i := range trcb.builders {
		func(i int, root context.Context) {
			builder := trcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TubeReceiveMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, trcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = trcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, trcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, trcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (trcb *TubeReceiveCreateBulk) SaveX(ctx context.Context) []*TubeReceive {
	v, err := trcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trcb *TubeReceiveCreateBulk) Exec(ctx context.Context) error {
	_, err := trcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trcb *TubeReceiveCreateBulk) ExecX(ctx context.Context) {
	if err := trcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TubeReceive.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TubeReceiveUpsert) {
//			SetSampleID(v+v).
//		}).
//		Exec(ctx)
func (trcb *TubeReceiveCreateBulk) OnConflict(opts ...sql.ConflictOption) *TubeReceiveUpsertBulk {
	trcb.conflict = opts
	return &TubeReceiveUpsertBulk{
		create: trcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TubeReceive.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (trcb *TubeReceiveCreateBulk) OnConflictColumns(columns ...string) *TubeReceiveUpsertBulk {
	trcb.conflict = append(trcb.conflict, sql.ConflictColumns(columns...))
	return &TubeReceiveUpsertBulk{
		create: trcb,
	}
}

// TubeReceiveUpsertBulk is the builder for "upsert"-ing
// a bulk of TubeReceive nodes.
type TubeReceiveUpsertBulk struct {
	create *TubeReceiveCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TubeReceive.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TubeReceiveUpsertBulk) UpdateNewValues() *TubeReceiveUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TubeReceive.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TubeReceiveUpsertBulk) Ignore() *TubeReceiveUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TubeReceiveUpsertBulk) DoNothing() *TubeReceiveUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TubeReceiveCreateBulk.OnConflict
// documentation for more info.
func (u *TubeReceiveUpsertBulk) Update(set func(*TubeReceiveUpsert)) *TubeReceiveUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TubeReceiveUpsert{UpdateSet: update})
	}))
	return u
}

// SetSampleID sets the "sample_id" field.
func (u *TubeReceiveUpsertBulk) SetSampleID(v int) *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetSampleID(v)
	})
}

// UpdateSampleID sets the "sample_id" field to the value that was provided on create.
func (u *TubeReceiveUpsertBulk) UpdateSampleID() *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateSampleID()
	})
}

// SetTubeType sets the "tube_type" field.
func (u *TubeReceiveUpsertBulk) SetTubeType(v string) *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetTubeType(v)
	})
}

// UpdateTubeType sets the "tube_type" field to the value that was provided on create.
func (u *TubeReceiveUpsertBulk) UpdateTubeType() *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateTubeType()
	})
}

// SetReceivedCount sets the "received_count" field.
func (u *TubeReceiveUpsertBulk) SetReceivedCount(v int) *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetReceivedCount(v)
	})
}

// AddReceivedCount adds v to the "received_count" field.
func (u *TubeReceiveUpsertBulk) AddReceivedCount(v int) *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.AddReceivedCount(v)
	})
}

// UpdateReceivedCount sets the "received_count" field to the value that was provided on create.
func (u *TubeReceiveUpsertBulk) UpdateReceivedCount() *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateReceivedCount()
	})
}

// SetReceivedTime sets the "received_time" field.
func (u *TubeReceiveUpsertBulk) SetReceivedTime(v time.Time) *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetReceivedTime(v)
	})
}

// UpdateReceivedTime sets the "received_time" field to the value that was provided on create.
func (u *TubeReceiveUpsertBulk) UpdateReceivedTime() *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateReceivedTime()
	})
}

// SetReceivedBy sets the "received_by" field.
func (u *TubeReceiveUpsertBulk) SetReceivedBy(v string) *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetReceivedBy(v)
	})
}

// UpdateReceivedBy sets the "received_by" field to the value that was provided on create.
func (u *TubeReceiveUpsertBulk) UpdateReceivedBy() *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateReceivedBy()
	})
}

// SetModifiedBy sets the "modified_by" field.
func (u *TubeReceiveUpsertBulk) SetModifiedBy(v string) *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetModifiedBy(v)
	})
}

// UpdateModifiedBy sets the "modified_by" field to the value that was provided on create.
func (u *TubeReceiveUpsertBulk) UpdateModifiedBy() *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateModifiedBy()
	})
}

// ClearModifiedBy clears the value of the "modified_by" field.
func (u *TubeReceiveUpsertBulk) ClearModifiedBy() *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.ClearModifiedBy()
	})
}

// SetModifiedTime sets the "modified_time" field.
func (u *TubeReceiveUpsertBulk) SetModifiedTime(v time.Time) *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetModifiedTime(v)
	})
}

// UpdateModifiedTime sets the "modified_time" field to the value that was provided on create.
func (u *TubeReceiveUpsertBulk) UpdateModifiedTime() *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateModifiedTime()
	})
}

// ClearModifiedTime clears the value of the "modified_time" field.
func (u *TubeReceiveUpsertBulk) ClearModifiedTime() *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.ClearModifiedTime()
	})
}

// SetCollectionTime sets the "collection_time" field.
func (u *TubeReceiveUpsertBulk) SetCollectionTime(v time.Time) *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetCollectionTime(v)
	})
}

// UpdateCollectionTime sets the "collection_time" field to the value that was provided on create.
func (u *TubeReceiveUpsertBulk) UpdateCollectionTime() *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateCollectionTime()
	})
}

// SetIsRedraw sets the "is_redraw" field.
func (u *TubeReceiveUpsertBulk) SetIsRedraw(v bool) *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetIsRedraw(v)
	})
}

// UpdateIsRedraw sets the "is_redraw" field to the value that was provided on create.
func (u *TubeReceiveUpsertBulk) UpdateIsRedraw() *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateIsRedraw()
	})
}

// SetIsRerun sets the "is_rerun" field.
func (u *TubeReceiveUpsertBulk) SetIsRerun(v bool) *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.SetIsRerun(v)
	})
}

// UpdateIsRerun sets the "is_rerun" field to the value that was provided on create.
func (u *TubeReceiveUpsertBulk) UpdateIsRerun() *TubeReceiveUpsertBulk {
	return u.Update(func(s *TubeReceiveUpsert) {
		s.UpdateIsRerun()
	})
}

// Exec executes the query.
func (u *TubeReceiveUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TubeReceiveCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TubeReceiveCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TubeReceiveUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
