// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/clinic"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/customercontactonclinics"
	"coresamples/ent/internaluser"
	"coresamples/ent/orderinfo"
	"coresamples/ent/patient"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContactCreate is the builder for creating a Contact entity.
type ContactCreate struct {
	config
	mutation *ContactMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetContactDescription sets the "contact_description" field.
func (cc *ContactCreate) SetContactDescription(s string) *ContactCreate {
	cc.mutation.SetContactDescription(s)
	return cc
}

// SetNillableContactDescription sets the "contact_description" field if the given value is not nil.
func (cc *ContactCreate) SetNillableContactDescription(s *string) *ContactCreate {
	if s != nil {
		cc.SetContactDescription(*s)
	}
	return cc
}

// SetContactDetails sets the "contact_details" field.
func (cc *ContactCreate) SetContactDetails(s string) *ContactCreate {
	cc.mutation.SetContactDetails(s)
	return cc
}

// SetContactType sets the "contact_type" field.
func (cc *ContactCreate) SetContactType(s string) *ContactCreate {
	cc.mutation.SetContactType(s)
	return cc
}

// SetNillableContactType sets the "contact_type" field if the given value is not nil.
func (cc *ContactCreate) SetNillableContactType(s *string) *ContactCreate {
	if s != nil {
		cc.SetContactType(*s)
	}
	return cc
}

// SetIsPrimaryContact sets the "is_primary_contact" field.
func (cc *ContactCreate) SetIsPrimaryContact(b bool) *ContactCreate {
	cc.mutation.SetIsPrimaryContact(b)
	return cc
}

// SetNillableIsPrimaryContact sets the "is_primary_contact" field if the given value is not nil.
func (cc *ContactCreate) SetNillableIsPrimaryContact(b *bool) *ContactCreate {
	if b != nil {
		cc.SetIsPrimaryContact(*b)
	}
	return cc
}

// SetIs2faContact sets the "is_2fa_contact" field.
func (cc *ContactCreate) SetIs2faContact(b bool) *ContactCreate {
	cc.mutation.SetIs2faContact(b)
	return cc
}

// SetNillableIs2faContact sets the "is_2fa_contact" field if the given value is not nil.
func (cc *ContactCreate) SetNillableIs2faContact(b *bool) *ContactCreate {
	if b != nil {
		cc.SetIs2faContact(*b)
	}
	return cc
}

// SetCustomerID sets the "customer_id" field.
func (cc *ContactCreate) SetCustomerID(i int) *ContactCreate {
	cc.mutation.SetCustomerID(i)
	return cc
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (cc *ContactCreate) SetNillableCustomerID(i *int) *ContactCreate {
	if i != nil {
		cc.SetCustomerID(*i)
	}
	return cc
}

// SetPatientID sets the "patient_id" field.
func (cc *ContactCreate) SetPatientID(i int) *ContactCreate {
	cc.mutation.SetPatientID(i)
	return cc
}

// SetNillablePatientID sets the "patient_id" field if the given value is not nil.
func (cc *ContactCreate) SetNillablePatientID(i *int) *ContactCreate {
	if i != nil {
		cc.SetPatientID(*i)
	}
	return cc
}

// SetClinicID sets the "clinic_id" field.
func (cc *ContactCreate) SetClinicID(i int) *ContactCreate {
	cc.mutation.SetClinicID(i)
	return cc
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (cc *ContactCreate) SetNillableClinicID(i *int) *ContactCreate {
	if i != nil {
		cc.SetClinicID(*i)
	}
	return cc
}

// SetInternalUserID sets the "internal_user_id" field.
func (cc *ContactCreate) SetInternalUserID(i int) *ContactCreate {
	cc.mutation.SetInternalUserID(i)
	return cc
}

// SetNillableInternalUserID sets the "internal_user_id" field if the given value is not nil.
func (cc *ContactCreate) SetNillableInternalUserID(i *int) *ContactCreate {
	if i != nil {
		cc.SetInternalUserID(*i)
	}
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *ContactCreate) SetUserID(i int) *ContactCreate {
	cc.mutation.SetUserID(i)
	return cc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cc *ContactCreate) SetNillableUserID(i *int) *ContactCreate {
	if i != nil {
		cc.SetUserID(*i)
	}
	return cc
}

// SetContactLevel sets the "contact_level" field.
func (cc *ContactCreate) SetContactLevel(i int) *ContactCreate {
	cc.mutation.SetContactLevel(i)
	return cc
}

// SetNillableContactLevel sets the "contact_level" field if the given value is not nil.
func (cc *ContactCreate) SetNillableContactLevel(i *int) *ContactCreate {
	if i != nil {
		cc.SetContactLevel(*i)
	}
	return cc
}

// SetContactLevelName sets the "contact_level_name" field.
func (cc *ContactCreate) SetContactLevelName(s string) *ContactCreate {
	cc.mutation.SetContactLevelName(s)
	return cc
}

// SetNillableContactLevelName sets the "contact_level_name" field if the given value is not nil.
func (cc *ContactCreate) SetNillableContactLevelName(s *string) *ContactCreate {
	if s != nil {
		cc.SetContactLevelName(*s)
	}
	return cc
}

// SetGroupContactID sets the "group_contact_id" field.
func (cc *ContactCreate) SetGroupContactID(i int) *ContactCreate {
	cc.mutation.SetGroupContactID(i)
	return cc
}

// SetNillableGroupContactID sets the "group_contact_id" field if the given value is not nil.
func (cc *ContactCreate) SetNillableGroupContactID(i *int) *ContactCreate {
	if i != nil {
		cc.SetGroupContactID(*i)
	}
	return cc
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (cc *ContactCreate) SetApplyToAllGroupMember(b bool) *ContactCreate {
	cc.mutation.SetApplyToAllGroupMember(b)
	return cc
}

// SetNillableApplyToAllGroupMember sets the "apply_to_all_group_member" field if the given value is not nil.
func (cc *ContactCreate) SetNillableApplyToAllGroupMember(b *bool) *ContactCreate {
	if b != nil {
		cc.SetApplyToAllGroupMember(*b)
	}
	return cc
}

// SetIsGroupContact sets the "is_group_contact" field.
func (cc *ContactCreate) SetIsGroupContact(b bool) *ContactCreate {
	cc.mutation.SetIsGroupContact(b)
	return cc
}

// SetNillableIsGroupContact sets the "is_group_contact" field if the given value is not nil.
func (cc *ContactCreate) SetNillableIsGroupContact(b *bool) *ContactCreate {
	if b != nil {
		cc.SetIsGroupContact(*b)
	}
	return cc
}

// SetUseAsDefaultCreateContact sets the "use_as_default_create_contact" field.
func (cc *ContactCreate) SetUseAsDefaultCreateContact(b bool) *ContactCreate {
	cc.mutation.SetUseAsDefaultCreateContact(b)
	return cc
}

// SetNillableUseAsDefaultCreateContact sets the "use_as_default_create_contact" field if the given value is not nil.
func (cc *ContactCreate) SetNillableUseAsDefaultCreateContact(b *bool) *ContactCreate {
	if b != nil {
		cc.SetUseAsDefaultCreateContact(*b)
	}
	return cc
}

// SetUseGroupContact sets the "use_group_contact" field.
func (cc *ContactCreate) SetUseGroupContact(b bool) *ContactCreate {
	cc.mutation.SetUseGroupContact(b)
	return cc
}

// SetNillableUseGroupContact sets the "use_group_contact" field if the given value is not nil.
func (cc *ContactCreate) SetNillableUseGroupContact(b *bool) *ContactCreate {
	if b != nil {
		cc.SetUseGroupContact(*b)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ContactCreate) SetID(i int) *ContactCreate {
	cc.mutation.SetID(i)
	return cc
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (cc *ContactCreate) SetClinic(c *Clinic) *ContactCreate {
	return cc.SetClinicID(c.ID)
}

// SetPatient sets the "patient" edge to the Patient entity.
func (cc *ContactCreate) SetPatient(p *Patient) *ContactCreate {
	return cc.SetPatientID(p.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (cc *ContactCreate) SetCustomer(c *Customer) *ContactCreate {
	return cc.SetCustomerID(c.ID)
}

// AddCustomerClinicMappingIDs adds the "customer_clinic_mappings" edge to the CustomerContactOnClinics entity by IDs.
func (cc *ContactCreate) AddCustomerClinicMappingIDs(ids ...int) *ContactCreate {
	cc.mutation.AddCustomerClinicMappingIDs(ids...)
	return cc
}

// AddCustomerClinicMappings adds the "customer_clinic_mappings" edges to the CustomerContactOnClinics entity.
func (cc *ContactCreate) AddCustomerClinicMappings(c ...*CustomerContactOnClinics) *ContactCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCustomerClinicMappingIDs(ids...)
}

// AddMemberContactIDs adds the "member_contacts" edge to the Contact entity by IDs.
func (cc *ContactCreate) AddMemberContactIDs(ids ...int) *ContactCreate {
	cc.mutation.AddMemberContactIDs(ids...)
	return cc
}

// AddMemberContacts adds the "member_contacts" edges to the Contact entity.
func (cc *ContactCreate) AddMemberContacts(c ...*Contact) *ContactCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddMemberContactIDs(ids...)
}

// SetGroupContact sets the "group_contact" edge to the Contact entity.
func (cc *ContactCreate) SetGroupContact(c *Contact) *ContactCreate {
	return cc.SetGroupContactID(c.ID)
}

// SetInternalUser sets the "internal_user" edge to the InternalUser entity.
func (cc *ContactCreate) SetInternalUser(i *InternalUser) *ContactCreate {
	return cc.SetInternalUserID(i.ID)
}

// AddOrderIDs adds the "orders" edge to the OrderInfo entity by IDs.
func (cc *ContactCreate) AddOrderIDs(ids ...int) *ContactCreate {
	cc.mutation.AddOrderIDs(ids...)
	return cc
}

// AddOrders adds the "orders" edges to the OrderInfo entity.
func (cc *ContactCreate) AddOrders(o ...*OrderInfo) *ContactCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cc.AddOrderIDs(ids...)
}

// Mutation returns the ContactMutation object of the builder.
func (cc *ContactCreate) Mutation() *ContactMutation {
	return cc.mutation
}

// Save creates the Contact in the database.
func (cc *ContactCreate) Save(ctx context.Context) (*Contact, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContactCreate) SaveX(ctx context.Context) *Contact {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ContactCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ContactCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ContactCreate) defaults() {
	if _, ok := cc.mutation.IsPrimaryContact(); !ok {
		v := contact.DefaultIsPrimaryContact
		cc.mutation.SetIsPrimaryContact(v)
	}
	if _, ok := cc.mutation.Is2faContact(); !ok {
		v := contact.DefaultIs2faContact
		cc.mutation.SetIs2faContact(v)
	}
	if _, ok := cc.mutation.ContactLevel(); !ok {
		v := contact.DefaultContactLevel
		cc.mutation.SetContactLevel(v)
	}
	if _, ok := cc.mutation.ContactLevelName(); !ok {
		v := contact.DefaultContactLevelName
		cc.mutation.SetContactLevelName(v)
	}
	if _, ok := cc.mutation.ApplyToAllGroupMember(); !ok {
		v := contact.DefaultApplyToAllGroupMember
		cc.mutation.SetApplyToAllGroupMember(v)
	}
	if _, ok := cc.mutation.IsGroupContact(); !ok {
		v := contact.DefaultIsGroupContact
		cc.mutation.SetIsGroupContact(v)
	}
	if _, ok := cc.mutation.UseAsDefaultCreateContact(); !ok {
		v := contact.DefaultUseAsDefaultCreateContact
		cc.mutation.SetUseAsDefaultCreateContact(v)
	}
	if _, ok := cc.mutation.UseGroupContact(); !ok {
		v := contact.DefaultUseGroupContact
		cc.mutation.SetUseGroupContact(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ContactCreate) check() error {
	if _, ok := cc.mutation.ContactDetails(); !ok {
		return &ValidationError{Name: "contact_details", err: errors.New(`ent: missing required field "Contact.contact_details"`)}
	}
	if _, ok := cc.mutation.Is2faContact(); !ok {
		return &ValidationError{Name: "is_2fa_contact", err: errors.New(`ent: missing required field "Contact.is_2fa_contact"`)}
	}
	if _, ok := cc.mutation.ContactLevel(); !ok {
		return &ValidationError{Name: "contact_level", err: errors.New(`ent: missing required field "Contact.contact_level"`)}
	}
	if _, ok := cc.mutation.ContactLevelName(); !ok {
		return &ValidationError{Name: "contact_level_name", err: errors.New(`ent: missing required field "Contact.contact_level_name"`)}
	}
	if _, ok := cc.mutation.ApplyToAllGroupMember(); !ok {
		return &ValidationError{Name: "apply_to_all_group_member", err: errors.New(`ent: missing required field "Contact.apply_to_all_group_member"`)}
	}
	if _, ok := cc.mutation.IsGroupContact(); !ok {
		return &ValidationError{Name: "is_group_contact", err: errors.New(`ent: missing required field "Contact.is_group_contact"`)}
	}
	if _, ok := cc.mutation.UseAsDefaultCreateContact(); !ok {
		return &ValidationError{Name: "use_as_default_create_contact", err: errors.New(`ent: missing required field "Contact.use_as_default_create_contact"`)}
	}
	return nil
}

func (cc *ContactCreate) sqlSave(ctx context.Context) (*Contact, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ContactCreate) createSpec() (*Contact, *sqlgraph.CreateSpec) {
	var (
		_node = &Contact{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(contact.Table, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.ContactDescription(); ok {
		_spec.SetField(contact.FieldContactDescription, field.TypeString, value)
		_node.ContactDescription = value
	}
	if value, ok := cc.mutation.ContactDetails(); ok {
		_spec.SetField(contact.FieldContactDetails, field.TypeString, value)
		_node.ContactDetails = value
	}
	if value, ok := cc.mutation.ContactType(); ok {
		_spec.SetField(contact.FieldContactType, field.TypeString, value)
		_node.ContactType = value
	}
	if value, ok := cc.mutation.IsPrimaryContact(); ok {
		_spec.SetField(contact.FieldIsPrimaryContact, field.TypeBool, value)
		_node.IsPrimaryContact = value
	}
	if value, ok := cc.mutation.Is2faContact(); ok {
		_spec.SetField(contact.FieldIs2faContact, field.TypeBool, value)
		_node.Is2faContact = value
	}
	if value, ok := cc.mutation.UserID(); ok {
		_spec.SetField(contact.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := cc.mutation.ContactLevel(); ok {
		_spec.SetField(contact.FieldContactLevel, field.TypeInt, value)
		_node.ContactLevel = value
	}
	if value, ok := cc.mutation.ContactLevelName(); ok {
		_spec.SetField(contact.FieldContactLevelName, field.TypeString, value)
		_node.ContactLevelName = value
	}
	if value, ok := cc.mutation.ApplyToAllGroupMember(); ok {
		_spec.SetField(contact.FieldApplyToAllGroupMember, field.TypeBool, value)
		_node.ApplyToAllGroupMember = value
	}
	if value, ok := cc.mutation.IsGroupContact(); ok {
		_spec.SetField(contact.FieldIsGroupContact, field.TypeBool, value)
		_node.IsGroupContact = value
	}
	if value, ok := cc.mutation.UseAsDefaultCreateContact(); ok {
		_spec.SetField(contact.FieldUseAsDefaultCreateContact, field.TypeBool, value)
		_node.UseAsDefaultCreateContact = value
	}
	if value, ok := cc.mutation.UseGroupContact(); ok {
		_spec.SetField(contact.FieldUseGroupContact, field.TypeBool, value)
		_node.UseGroupContact = value
	}
	if nodes := cc.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.ClinicTable,
			Columns: []string{contact.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClinicID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.PatientTable,
			Columns: []string{contact.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PatientID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.CustomerTable,
			Columns: []string{contact.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CustomerClinicMappingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contact.CustomerClinicMappingsTable,
			Columns: []string{contact.CustomerClinicMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customercontactonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.MemberContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.MemberContactsTable,
			Columns: []string{contact.MemberContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.GroupContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contact.GroupContactTable,
			Columns: []string{contact.GroupContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GroupContactID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.InternalUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.InternalUserTable,
			Columns: []string{contact.InternalUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InternalUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contact.OrdersTable,
			Columns: []string{contact.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Contact.Create().
//		SetContactDescription(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContactUpsert) {
//			SetContactDescription(v+v).
//		}).
//		Exec(ctx)
func (cc *ContactCreate) OnConflict(opts ...sql.ConflictOption) *ContactUpsertOne {
	cc.conflict = opts
	return &ContactUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ContactCreate) OnConflictColumns(columns ...string) *ContactUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ContactUpsertOne{
		create: cc,
	}
}

type (
	// ContactUpsertOne is the builder for "upsert"-ing
	//  one Contact node.
	ContactUpsertOne struct {
		create *ContactCreate
	}

	// ContactUpsert is the "OnConflict" setter.
	ContactUpsert struct {
		*sql.UpdateSet
	}
)

// SetContactDescription sets the "contact_description" field.
func (u *ContactUpsert) SetContactDescription(v string) *ContactUpsert {
	u.Set(contact.FieldContactDescription, v)
	return u
}

// UpdateContactDescription sets the "contact_description" field to the value that was provided on create.
func (u *ContactUpsert) UpdateContactDescription() *ContactUpsert {
	u.SetExcluded(contact.FieldContactDescription)
	return u
}

// ClearContactDescription clears the value of the "contact_description" field.
func (u *ContactUpsert) ClearContactDescription() *ContactUpsert {
	u.SetNull(contact.FieldContactDescription)
	return u
}

// SetContactDetails sets the "contact_details" field.
func (u *ContactUpsert) SetContactDetails(v string) *ContactUpsert {
	u.Set(contact.FieldContactDetails, v)
	return u
}

// UpdateContactDetails sets the "contact_details" field to the value that was provided on create.
func (u *ContactUpsert) UpdateContactDetails() *ContactUpsert {
	u.SetExcluded(contact.FieldContactDetails)
	return u
}

// SetContactType sets the "contact_type" field.
func (u *ContactUpsert) SetContactType(v string) *ContactUpsert {
	u.Set(contact.FieldContactType, v)
	return u
}

// UpdateContactType sets the "contact_type" field to the value that was provided on create.
func (u *ContactUpsert) UpdateContactType() *ContactUpsert {
	u.SetExcluded(contact.FieldContactType)
	return u
}

// ClearContactType clears the value of the "contact_type" field.
func (u *ContactUpsert) ClearContactType() *ContactUpsert {
	u.SetNull(contact.FieldContactType)
	return u
}

// SetIsPrimaryContact sets the "is_primary_contact" field.
func (u *ContactUpsert) SetIsPrimaryContact(v bool) *ContactUpsert {
	u.Set(contact.FieldIsPrimaryContact, v)
	return u
}

// UpdateIsPrimaryContact sets the "is_primary_contact" field to the value that was provided on create.
func (u *ContactUpsert) UpdateIsPrimaryContact() *ContactUpsert {
	u.SetExcluded(contact.FieldIsPrimaryContact)
	return u
}

// ClearIsPrimaryContact clears the value of the "is_primary_contact" field.
func (u *ContactUpsert) ClearIsPrimaryContact() *ContactUpsert {
	u.SetNull(contact.FieldIsPrimaryContact)
	return u
}

// SetIs2faContact sets the "is_2fa_contact" field.
func (u *ContactUpsert) SetIs2faContact(v bool) *ContactUpsert {
	u.Set(contact.FieldIs2faContact, v)
	return u
}

// UpdateIs2faContact sets the "is_2fa_contact" field to the value that was provided on create.
func (u *ContactUpsert) UpdateIs2faContact() *ContactUpsert {
	u.SetExcluded(contact.FieldIs2faContact)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *ContactUpsert) SetCustomerID(v int) *ContactUpsert {
	u.Set(contact.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *ContactUpsert) UpdateCustomerID() *ContactUpsert {
	u.SetExcluded(contact.FieldCustomerID)
	return u
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *ContactUpsert) ClearCustomerID() *ContactUpsert {
	u.SetNull(contact.FieldCustomerID)
	return u
}

// SetPatientID sets the "patient_id" field.
func (u *ContactUpsert) SetPatientID(v int) *ContactUpsert {
	u.Set(contact.FieldPatientID, v)
	return u
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *ContactUpsert) UpdatePatientID() *ContactUpsert {
	u.SetExcluded(contact.FieldPatientID)
	return u
}

// ClearPatientID clears the value of the "patient_id" field.
func (u *ContactUpsert) ClearPatientID() *ContactUpsert {
	u.SetNull(contact.FieldPatientID)
	return u
}

// SetClinicID sets the "clinic_id" field.
func (u *ContactUpsert) SetClinicID(v int) *ContactUpsert {
	u.Set(contact.FieldClinicID, v)
	return u
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *ContactUpsert) UpdateClinicID() *ContactUpsert {
	u.SetExcluded(contact.FieldClinicID)
	return u
}

// ClearClinicID clears the value of the "clinic_id" field.
func (u *ContactUpsert) ClearClinicID() *ContactUpsert {
	u.SetNull(contact.FieldClinicID)
	return u
}

// SetInternalUserID sets the "internal_user_id" field.
func (u *ContactUpsert) SetInternalUserID(v int) *ContactUpsert {
	u.Set(contact.FieldInternalUserID, v)
	return u
}

// UpdateInternalUserID sets the "internal_user_id" field to the value that was provided on create.
func (u *ContactUpsert) UpdateInternalUserID() *ContactUpsert {
	u.SetExcluded(contact.FieldInternalUserID)
	return u
}

// ClearInternalUserID clears the value of the "internal_user_id" field.
func (u *ContactUpsert) ClearInternalUserID() *ContactUpsert {
	u.SetNull(contact.FieldInternalUserID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ContactUpsert) SetUserID(v int) *ContactUpsert {
	u.Set(contact.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ContactUpsert) UpdateUserID() *ContactUpsert {
	u.SetExcluded(contact.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *ContactUpsert) AddUserID(v int) *ContactUpsert {
	u.Add(contact.FieldUserID, v)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *ContactUpsert) ClearUserID() *ContactUpsert {
	u.SetNull(contact.FieldUserID)
	return u
}

// SetContactLevel sets the "contact_level" field.
func (u *ContactUpsert) SetContactLevel(v int) *ContactUpsert {
	u.Set(contact.FieldContactLevel, v)
	return u
}

// UpdateContactLevel sets the "contact_level" field to the value that was provided on create.
func (u *ContactUpsert) UpdateContactLevel() *ContactUpsert {
	u.SetExcluded(contact.FieldContactLevel)
	return u
}

// AddContactLevel adds v to the "contact_level" field.
func (u *ContactUpsert) AddContactLevel(v int) *ContactUpsert {
	u.Add(contact.FieldContactLevel, v)
	return u
}

// SetContactLevelName sets the "contact_level_name" field.
func (u *ContactUpsert) SetContactLevelName(v string) *ContactUpsert {
	u.Set(contact.FieldContactLevelName, v)
	return u
}

// UpdateContactLevelName sets the "contact_level_name" field to the value that was provided on create.
func (u *ContactUpsert) UpdateContactLevelName() *ContactUpsert {
	u.SetExcluded(contact.FieldContactLevelName)
	return u
}

// SetGroupContactID sets the "group_contact_id" field.
func (u *ContactUpsert) SetGroupContactID(v int) *ContactUpsert {
	u.Set(contact.FieldGroupContactID, v)
	return u
}

// UpdateGroupContactID sets the "group_contact_id" field to the value that was provided on create.
func (u *ContactUpsert) UpdateGroupContactID() *ContactUpsert {
	u.SetExcluded(contact.FieldGroupContactID)
	return u
}

// ClearGroupContactID clears the value of the "group_contact_id" field.
func (u *ContactUpsert) ClearGroupContactID() *ContactUpsert {
	u.SetNull(contact.FieldGroupContactID)
	return u
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (u *ContactUpsert) SetApplyToAllGroupMember(v bool) *ContactUpsert {
	u.Set(contact.FieldApplyToAllGroupMember, v)
	return u
}

// UpdateApplyToAllGroupMember sets the "apply_to_all_group_member" field to the value that was provided on create.
func (u *ContactUpsert) UpdateApplyToAllGroupMember() *ContactUpsert {
	u.SetExcluded(contact.FieldApplyToAllGroupMember)
	return u
}

// SetIsGroupContact sets the "is_group_contact" field.
func (u *ContactUpsert) SetIsGroupContact(v bool) *ContactUpsert {
	u.Set(contact.FieldIsGroupContact, v)
	return u
}

// UpdateIsGroupContact sets the "is_group_contact" field to the value that was provided on create.
func (u *ContactUpsert) UpdateIsGroupContact() *ContactUpsert {
	u.SetExcluded(contact.FieldIsGroupContact)
	return u
}

// SetUseAsDefaultCreateContact sets the "use_as_default_create_contact" field.
func (u *ContactUpsert) SetUseAsDefaultCreateContact(v bool) *ContactUpsert {
	u.Set(contact.FieldUseAsDefaultCreateContact, v)
	return u
}

// UpdateUseAsDefaultCreateContact sets the "use_as_default_create_contact" field to the value that was provided on create.
func (u *ContactUpsert) UpdateUseAsDefaultCreateContact() *ContactUpsert {
	u.SetExcluded(contact.FieldUseAsDefaultCreateContact)
	return u
}

// SetUseGroupContact sets the "use_group_contact" field.
func (u *ContactUpsert) SetUseGroupContact(v bool) *ContactUpsert {
	u.Set(contact.FieldUseGroupContact, v)
	return u
}

// UpdateUseGroupContact sets the "use_group_contact" field to the value that was provided on create.
func (u *ContactUpsert) UpdateUseGroupContact() *ContactUpsert {
	u.SetExcluded(contact.FieldUseGroupContact)
	return u
}

// ClearUseGroupContact clears the value of the "use_group_contact" field.
func (u *ContactUpsert) ClearUseGroupContact() *ContactUpsert {
	u.SetNull(contact.FieldUseGroupContact)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(contact.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ContactUpsertOne) UpdateNewValues() *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(contact.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Contact.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ContactUpsertOne) Ignore() *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContactUpsertOne) DoNothing() *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContactCreate.OnConflict
// documentation for more info.
func (u *ContactUpsertOne) Update(set func(*ContactUpsert)) *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetContactDescription sets the "contact_description" field.
func (u *ContactUpsertOne) SetContactDescription(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetContactDescription(v)
	})
}

// UpdateContactDescription sets the "contact_description" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateContactDescription() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateContactDescription()
	})
}

// ClearContactDescription clears the value of the "contact_description" field.
func (u *ContactUpsertOne) ClearContactDescription() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.ClearContactDescription()
	})
}

// SetContactDetails sets the "contact_details" field.
func (u *ContactUpsertOne) SetContactDetails(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetContactDetails(v)
	})
}

// UpdateContactDetails sets the "contact_details" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateContactDetails() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateContactDetails()
	})
}

// SetContactType sets the "contact_type" field.
func (u *ContactUpsertOne) SetContactType(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetContactType(v)
	})
}

// UpdateContactType sets the "contact_type" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateContactType() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateContactType()
	})
}

// ClearContactType clears the value of the "contact_type" field.
func (u *ContactUpsertOne) ClearContactType() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.ClearContactType()
	})
}

// SetIsPrimaryContact sets the "is_primary_contact" field.
func (u *ContactUpsertOne) SetIsPrimaryContact(v bool) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetIsPrimaryContact(v)
	})
}

// UpdateIsPrimaryContact sets the "is_primary_contact" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateIsPrimaryContact() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateIsPrimaryContact()
	})
}

// ClearIsPrimaryContact clears the value of the "is_primary_contact" field.
func (u *ContactUpsertOne) ClearIsPrimaryContact() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.ClearIsPrimaryContact()
	})
}

// SetIs2faContact sets the "is_2fa_contact" field.
func (u *ContactUpsertOne) SetIs2faContact(v bool) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetIs2faContact(v)
	})
}

// UpdateIs2faContact sets the "is_2fa_contact" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateIs2faContact() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateIs2faContact()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *ContactUpsertOne) SetCustomerID(v int) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateCustomerID() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *ContactUpsertOne) ClearCustomerID() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.ClearCustomerID()
	})
}

// SetPatientID sets the "patient_id" field.
func (u *ContactUpsertOne) SetPatientID(v int) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetPatientID(v)
	})
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdatePatientID() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdatePatientID()
	})
}

// ClearPatientID clears the value of the "patient_id" field.
func (u *ContactUpsertOne) ClearPatientID() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.ClearPatientID()
	})
}

// SetClinicID sets the "clinic_id" field.
func (u *ContactUpsertOne) SetClinicID(v int) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetClinicID(v)
	})
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateClinicID() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateClinicID()
	})
}

// ClearClinicID clears the value of the "clinic_id" field.
func (u *ContactUpsertOne) ClearClinicID() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.ClearClinicID()
	})
}

// SetInternalUserID sets the "internal_user_id" field.
func (u *ContactUpsertOne) SetInternalUserID(v int) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetInternalUserID(v)
	})
}

// UpdateInternalUserID sets the "internal_user_id" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateInternalUserID() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateInternalUserID()
	})
}

// ClearInternalUserID clears the value of the "internal_user_id" field.
func (u *ContactUpsertOne) ClearInternalUserID() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.ClearInternalUserID()
	})
}

// SetUserID sets the "user_id" field.
func (u *ContactUpsertOne) SetUserID(v int) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *ContactUpsertOne) AddUserID(v int) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateUserID() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *ContactUpsertOne) ClearUserID() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.ClearUserID()
	})
}

// SetContactLevel sets the "contact_level" field.
func (u *ContactUpsertOne) SetContactLevel(v int) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetContactLevel(v)
	})
}

// AddContactLevel adds v to the "contact_level" field.
func (u *ContactUpsertOne) AddContactLevel(v int) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.AddContactLevel(v)
	})
}

// UpdateContactLevel sets the "contact_level" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateContactLevel() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateContactLevel()
	})
}

// SetContactLevelName sets the "contact_level_name" field.
func (u *ContactUpsertOne) SetContactLevelName(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetContactLevelName(v)
	})
}

// UpdateContactLevelName sets the "contact_level_name" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateContactLevelName() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateContactLevelName()
	})
}

// SetGroupContactID sets the "group_contact_id" field.
func (u *ContactUpsertOne) SetGroupContactID(v int) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetGroupContactID(v)
	})
}

// UpdateGroupContactID sets the "group_contact_id" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateGroupContactID() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateGroupContactID()
	})
}

// ClearGroupContactID clears the value of the "group_contact_id" field.
func (u *ContactUpsertOne) ClearGroupContactID() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.ClearGroupContactID()
	})
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (u *ContactUpsertOne) SetApplyToAllGroupMember(v bool) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetApplyToAllGroupMember(v)
	})
}

// UpdateApplyToAllGroupMember sets the "apply_to_all_group_member" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateApplyToAllGroupMember() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateApplyToAllGroupMember()
	})
}

// SetIsGroupContact sets the "is_group_contact" field.
func (u *ContactUpsertOne) SetIsGroupContact(v bool) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetIsGroupContact(v)
	})
}

// UpdateIsGroupContact sets the "is_group_contact" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateIsGroupContact() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateIsGroupContact()
	})
}

// SetUseAsDefaultCreateContact sets the "use_as_default_create_contact" field.
func (u *ContactUpsertOne) SetUseAsDefaultCreateContact(v bool) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetUseAsDefaultCreateContact(v)
	})
}

// UpdateUseAsDefaultCreateContact sets the "use_as_default_create_contact" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateUseAsDefaultCreateContact() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUseAsDefaultCreateContact()
	})
}

// SetUseGroupContact sets the "use_group_contact" field.
func (u *ContactUpsertOne) SetUseGroupContact(v bool) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetUseGroupContact(v)
	})
}

// UpdateUseGroupContact sets the "use_group_contact" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateUseGroupContact() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUseGroupContact()
	})
}

// ClearUseGroupContact clears the value of the "use_group_contact" field.
func (u *ContactUpsertOne) ClearUseGroupContact() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.ClearUseGroupContact()
	})
}

// Exec executes the query.
func (u *ContactUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContactCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContactUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ContactUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ContactUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ContactCreateBulk is the builder for creating many Contact entities in bulk.
type ContactCreateBulk struct {
	config
	err      error
	builders []*ContactCreate
	conflict []sql.ConflictOption
}

// Save creates the Contact entities in the database.
func (ccb *ContactCreateBulk) Save(ctx context.Context) ([]*Contact, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Contact, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContactMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ContactCreateBulk) SaveX(ctx context.Context) []*Contact {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ContactCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ContactCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Contact.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContactUpsert) {
//			SetContactDescription(v+v).
//		}).
//		Exec(ctx)
func (ccb *ContactCreateBulk) OnConflict(opts ...sql.ConflictOption) *ContactUpsertBulk {
	ccb.conflict = opts
	return &ContactUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ContactCreateBulk) OnConflictColumns(columns ...string) *ContactUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ContactUpsertBulk{
		create: ccb,
	}
}

// ContactUpsertBulk is the builder for "upsert"-ing
// a bulk of Contact nodes.
type ContactUpsertBulk struct {
	create *ContactCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(contact.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ContactUpsertBulk) UpdateNewValues() *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(contact.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ContactUpsertBulk) Ignore() *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContactUpsertBulk) DoNothing() *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContactCreateBulk.OnConflict
// documentation for more info.
func (u *ContactUpsertBulk) Update(set func(*ContactUpsert)) *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetContactDescription sets the "contact_description" field.
func (u *ContactUpsertBulk) SetContactDescription(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetContactDescription(v)
	})
}

// UpdateContactDescription sets the "contact_description" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateContactDescription() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateContactDescription()
	})
}

// ClearContactDescription clears the value of the "contact_description" field.
func (u *ContactUpsertBulk) ClearContactDescription() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.ClearContactDescription()
	})
}

// SetContactDetails sets the "contact_details" field.
func (u *ContactUpsertBulk) SetContactDetails(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetContactDetails(v)
	})
}

// UpdateContactDetails sets the "contact_details" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateContactDetails() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateContactDetails()
	})
}

// SetContactType sets the "contact_type" field.
func (u *ContactUpsertBulk) SetContactType(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetContactType(v)
	})
}

// UpdateContactType sets the "contact_type" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateContactType() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateContactType()
	})
}

// ClearContactType clears the value of the "contact_type" field.
func (u *ContactUpsertBulk) ClearContactType() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.ClearContactType()
	})
}

// SetIsPrimaryContact sets the "is_primary_contact" field.
func (u *ContactUpsertBulk) SetIsPrimaryContact(v bool) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetIsPrimaryContact(v)
	})
}

// UpdateIsPrimaryContact sets the "is_primary_contact" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateIsPrimaryContact() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateIsPrimaryContact()
	})
}

// ClearIsPrimaryContact clears the value of the "is_primary_contact" field.
func (u *ContactUpsertBulk) ClearIsPrimaryContact() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.ClearIsPrimaryContact()
	})
}

// SetIs2faContact sets the "is_2fa_contact" field.
func (u *ContactUpsertBulk) SetIs2faContact(v bool) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetIs2faContact(v)
	})
}

// UpdateIs2faContact sets the "is_2fa_contact" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateIs2faContact() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateIs2faContact()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *ContactUpsertBulk) SetCustomerID(v int) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateCustomerID() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *ContactUpsertBulk) ClearCustomerID() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.ClearCustomerID()
	})
}

// SetPatientID sets the "patient_id" field.
func (u *ContactUpsertBulk) SetPatientID(v int) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetPatientID(v)
	})
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdatePatientID() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdatePatientID()
	})
}

// ClearPatientID clears the value of the "patient_id" field.
func (u *ContactUpsertBulk) ClearPatientID() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.ClearPatientID()
	})
}

// SetClinicID sets the "clinic_id" field.
func (u *ContactUpsertBulk) SetClinicID(v int) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetClinicID(v)
	})
}

// UpdateClinicID sets the "clinic_id" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateClinicID() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateClinicID()
	})
}

// ClearClinicID clears the value of the "clinic_id" field.
func (u *ContactUpsertBulk) ClearClinicID() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.ClearClinicID()
	})
}

// SetInternalUserID sets the "internal_user_id" field.
func (u *ContactUpsertBulk) SetInternalUserID(v int) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetInternalUserID(v)
	})
}

// UpdateInternalUserID sets the "internal_user_id" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateInternalUserID() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateInternalUserID()
	})
}

// ClearInternalUserID clears the value of the "internal_user_id" field.
func (u *ContactUpsertBulk) ClearInternalUserID() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.ClearInternalUserID()
	})
}

// SetUserID sets the "user_id" field.
func (u *ContactUpsertBulk) SetUserID(v int) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *ContactUpsertBulk) AddUserID(v int) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateUserID() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *ContactUpsertBulk) ClearUserID() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.ClearUserID()
	})
}

// SetContactLevel sets the "contact_level" field.
func (u *ContactUpsertBulk) SetContactLevel(v int) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetContactLevel(v)
	})
}

// AddContactLevel adds v to the "contact_level" field.
func (u *ContactUpsertBulk) AddContactLevel(v int) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.AddContactLevel(v)
	})
}

// UpdateContactLevel sets the "contact_level" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateContactLevel() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateContactLevel()
	})
}

// SetContactLevelName sets the "contact_level_name" field.
func (u *ContactUpsertBulk) SetContactLevelName(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetContactLevelName(v)
	})
}

// UpdateContactLevelName sets the "contact_level_name" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateContactLevelName() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateContactLevelName()
	})
}

// SetGroupContactID sets the "group_contact_id" field.
func (u *ContactUpsertBulk) SetGroupContactID(v int) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetGroupContactID(v)
	})
}

// UpdateGroupContactID sets the "group_contact_id" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateGroupContactID() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateGroupContactID()
	})
}

// ClearGroupContactID clears the value of the "group_contact_id" field.
func (u *ContactUpsertBulk) ClearGroupContactID() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.ClearGroupContactID()
	})
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (u *ContactUpsertBulk) SetApplyToAllGroupMember(v bool) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetApplyToAllGroupMember(v)
	})
}

// UpdateApplyToAllGroupMember sets the "apply_to_all_group_member" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateApplyToAllGroupMember() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateApplyToAllGroupMember()
	})
}

// SetIsGroupContact sets the "is_group_contact" field.
func (u *ContactUpsertBulk) SetIsGroupContact(v bool) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetIsGroupContact(v)
	})
}

// UpdateIsGroupContact sets the "is_group_contact" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateIsGroupContact() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateIsGroupContact()
	})
}

// SetUseAsDefaultCreateContact sets the "use_as_default_create_contact" field.
func (u *ContactUpsertBulk) SetUseAsDefaultCreateContact(v bool) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetUseAsDefaultCreateContact(v)
	})
}

// UpdateUseAsDefaultCreateContact sets the "use_as_default_create_contact" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateUseAsDefaultCreateContact() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUseAsDefaultCreateContact()
	})
}

// SetUseGroupContact sets the "use_group_contact" field.
func (u *ContactUpsertBulk) SetUseGroupContact(v bool) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetUseGroupContact(v)
	})
}

// UpdateUseGroupContact sets the "use_group_contact" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateUseGroupContact() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUseGroupContact()
	})
}

// ClearUseGroupContact clears the value of the "use_group_contact" field.
func (u *ContactUpsertBulk) ClearUseGroupContact() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.ClearUseGroupContact()
	})
}

// Exec executes the query.
func (u *ContactUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ContactCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContactCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContactUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
