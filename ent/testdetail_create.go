// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/test"
	"coresamples/ent/testdetail"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestDetailCreate is the builder for creating a TestDetail entity.
type TestDetailCreate struct {
	config
	mutation *TestDetailMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTestID sets the "test_id" field.
func (tdc *TestDetailCreate) SetTestID(i int) *TestDetailCreate {
	tdc.mutation.SetTestID(i)
	return tdc
}

// SetTestDetailName sets the "test_detail_name" field.
func (tdc *TestDetailCreate) SetTestDetailName(s string) *TestDetailCreate {
	tdc.mutation.SetTestDetailName(s)
	return tdc
}

// SetTestDetailsValue sets the "test_details_value" field.
func (tdc *TestDetailCreate) SetTestDetailsValue(s string) *TestDetailCreate {
	tdc.mutation.SetTestDetailsValue(s)
	return tdc
}

// SetIsActive sets the "isActive" field.
func (tdc *TestDetailCreate) SetIsActive(b bool) *TestDetailCreate {
	tdc.mutation.SetIsActive(b)
	return tdc
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (tdc *TestDetailCreate) SetNillableIsActive(b *bool) *TestDetailCreate {
	if b != nil {
		tdc.SetIsActive(*b)
	}
	return tdc
}

// SetTest sets the "test" edge to the Test entity.
func (tdc *TestDetailCreate) SetTest(t *Test) *TestDetailCreate {
	return tdc.SetTestID(t.ID)
}

// Mutation returns the TestDetailMutation object of the builder.
func (tdc *TestDetailCreate) Mutation() *TestDetailMutation {
	return tdc.mutation
}

// Save creates the TestDetail in the database.
func (tdc *TestDetailCreate) Save(ctx context.Context) (*TestDetail, error) {
	tdc.defaults()
	return withHooks(ctx, tdc.sqlSave, tdc.mutation, tdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tdc *TestDetailCreate) SaveX(ctx context.Context) *TestDetail {
	v, err := tdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdc *TestDetailCreate) Exec(ctx context.Context) error {
	_, err := tdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdc *TestDetailCreate) ExecX(ctx context.Context) {
	if err := tdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdc *TestDetailCreate) defaults() {
	if _, ok := tdc.mutation.IsActive(); !ok {
		v := testdetail.DefaultIsActive
		tdc.mutation.SetIsActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdc *TestDetailCreate) check() error {
	if _, ok := tdc.mutation.TestID(); !ok {
		return &ValidationError{Name: "test_id", err: errors.New(`ent: missing required field "TestDetail.test_id"`)}
	}
	if _, ok := tdc.mutation.TestDetailName(); !ok {
		return &ValidationError{Name: "test_detail_name", err: errors.New(`ent: missing required field "TestDetail.test_detail_name"`)}
	}
	if _, ok := tdc.mutation.TestDetailsValue(); !ok {
		return &ValidationError{Name: "test_details_value", err: errors.New(`ent: missing required field "TestDetail.test_details_value"`)}
	}
	if _, ok := tdc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "isActive", err: errors.New(`ent: missing required field "TestDetail.isActive"`)}
	}
	if _, ok := tdc.mutation.TestID(); !ok {
		return &ValidationError{Name: "test", err: errors.New(`ent: missing required edge "TestDetail.test"`)}
	}
	return nil
}

func (tdc *TestDetailCreate) sqlSave(ctx context.Context) (*TestDetail, error) {
	if err := tdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tdc.mutation.id = &_node.ID
	tdc.mutation.done = true
	return _node, nil
}

func (tdc *TestDetailCreate) createSpec() (*TestDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &TestDetail{config: tdc.config}
		_spec = sqlgraph.NewCreateSpec(testdetail.Table, sqlgraph.NewFieldSpec(testdetail.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tdc.conflict
	if value, ok := tdc.mutation.TestDetailName(); ok {
		_spec.SetField(testdetail.FieldTestDetailName, field.TypeString, value)
		_node.TestDetailName = value
	}
	if value, ok := tdc.mutation.TestDetailsValue(); ok {
		_spec.SetField(testdetail.FieldTestDetailsValue, field.TypeString, value)
		_node.TestDetailsValue = value
	}
	if value, ok := tdc.mutation.IsActive(); ok {
		_spec.SetField(testdetail.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if nodes := tdc.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testdetail.TestTable,
			Columns: []string{testdetail.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TestID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestDetail.Create().
//		SetTestID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestDetailUpsert) {
//			SetTestID(v+v).
//		}).
//		Exec(ctx)
func (tdc *TestDetailCreate) OnConflict(opts ...sql.ConflictOption) *TestDetailUpsertOne {
	tdc.conflict = opts
	return &TestDetailUpsertOne{
		create: tdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tdc *TestDetailCreate) OnConflictColumns(columns ...string) *TestDetailUpsertOne {
	tdc.conflict = append(tdc.conflict, sql.ConflictColumns(columns...))
	return &TestDetailUpsertOne{
		create: tdc,
	}
}

type (
	// TestDetailUpsertOne is the builder for "upsert"-ing
	//  one TestDetail node.
	TestDetailUpsertOne struct {
		create *TestDetailCreate
	}

	// TestDetailUpsert is the "OnConflict" setter.
	TestDetailUpsert struct {
		*sql.UpdateSet
	}
)

// SetTestID sets the "test_id" field.
func (u *TestDetailUpsert) SetTestID(v int) *TestDetailUpsert {
	u.Set(testdetail.FieldTestID, v)
	return u
}

// UpdateTestID sets the "test_id" field to the value that was provided on create.
func (u *TestDetailUpsert) UpdateTestID() *TestDetailUpsert {
	u.SetExcluded(testdetail.FieldTestID)
	return u
}

// SetTestDetailName sets the "test_detail_name" field.
func (u *TestDetailUpsert) SetTestDetailName(v string) *TestDetailUpsert {
	u.Set(testdetail.FieldTestDetailName, v)
	return u
}

// UpdateTestDetailName sets the "test_detail_name" field to the value that was provided on create.
func (u *TestDetailUpsert) UpdateTestDetailName() *TestDetailUpsert {
	u.SetExcluded(testdetail.FieldTestDetailName)
	return u
}

// SetTestDetailsValue sets the "test_details_value" field.
func (u *TestDetailUpsert) SetTestDetailsValue(v string) *TestDetailUpsert {
	u.Set(testdetail.FieldTestDetailsValue, v)
	return u
}

// UpdateTestDetailsValue sets the "test_details_value" field to the value that was provided on create.
func (u *TestDetailUpsert) UpdateTestDetailsValue() *TestDetailUpsert {
	u.SetExcluded(testdetail.FieldTestDetailsValue)
	return u
}

// SetIsActive sets the "isActive" field.
func (u *TestDetailUpsert) SetIsActive(v bool) *TestDetailUpsert {
	u.Set(testdetail.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "isActive" field to the value that was provided on create.
func (u *TestDetailUpsert) UpdateIsActive() *TestDetailUpsert {
	u.SetExcluded(testdetail.FieldIsActive)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TestDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TestDetailUpsertOne) UpdateNewValues() *TestDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TestDetail.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TestDetailUpsertOne) Ignore() *TestDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestDetailUpsertOne) DoNothing() *TestDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestDetailCreate.OnConflict
// documentation for more info.
func (u *TestDetailUpsertOne) Update(set func(*TestDetailUpsert)) *TestDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetTestID sets the "test_id" field.
func (u *TestDetailUpsertOne) SetTestID(v int) *TestDetailUpsertOne {
	return u.Update(func(s *TestDetailUpsert) {
		s.SetTestID(v)
	})
}

// UpdateTestID sets the "test_id" field to the value that was provided on create.
func (u *TestDetailUpsertOne) UpdateTestID() *TestDetailUpsertOne {
	return u.Update(func(s *TestDetailUpsert) {
		s.UpdateTestID()
	})
}

// SetTestDetailName sets the "test_detail_name" field.
func (u *TestDetailUpsertOne) SetTestDetailName(v string) *TestDetailUpsertOne {
	return u.Update(func(s *TestDetailUpsert) {
		s.SetTestDetailName(v)
	})
}

// UpdateTestDetailName sets the "test_detail_name" field to the value that was provided on create.
func (u *TestDetailUpsertOne) UpdateTestDetailName() *TestDetailUpsertOne {
	return u.Update(func(s *TestDetailUpsert) {
		s.UpdateTestDetailName()
	})
}

// SetTestDetailsValue sets the "test_details_value" field.
func (u *TestDetailUpsertOne) SetTestDetailsValue(v string) *TestDetailUpsertOne {
	return u.Update(func(s *TestDetailUpsert) {
		s.SetTestDetailsValue(v)
	})
}

// UpdateTestDetailsValue sets the "test_details_value" field to the value that was provided on create.
func (u *TestDetailUpsertOne) UpdateTestDetailsValue() *TestDetailUpsertOne {
	return u.Update(func(s *TestDetailUpsert) {
		s.UpdateTestDetailsValue()
	})
}

// SetIsActive sets the "isActive" field.
func (u *TestDetailUpsertOne) SetIsActive(v bool) *TestDetailUpsertOne {
	return u.Update(func(s *TestDetailUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "isActive" field to the value that was provided on create.
func (u *TestDetailUpsertOne) UpdateIsActive() *TestDetailUpsertOne {
	return u.Update(func(s *TestDetailUpsert) {
		s.UpdateIsActive()
	})
}

// Exec executes the query.
func (u *TestDetailUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestDetailCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestDetailUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TestDetailUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TestDetailUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TestDetailCreateBulk is the builder for creating many TestDetail entities in bulk.
type TestDetailCreateBulk struct {
	config
	err      error
	builders []*TestDetailCreate
	conflict []sql.ConflictOption
}

// Save creates the TestDetail entities in the database.
func (tdcb *TestDetailCreateBulk) Save(ctx context.Context) ([]*TestDetail, error) {
	if tdcb.err != nil {
		return nil, tdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tdcb.builders))
	nodes := make([]*TestDetail, len(tdcb.builders))
	mutators := make([]Mutator, len(tdcb.builders))
	for i := range tdcb.builders {
		func(i int, root context.Context) {
			builder := tdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tdcb *TestDetailCreateBulk) SaveX(ctx context.Context) []*TestDetail {
	v, err := tdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdcb *TestDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := tdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdcb *TestDetailCreateBulk) ExecX(ctx context.Context) {
	if err := tdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestDetail.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestDetailUpsert) {
//			SetTestID(v+v).
//		}).
//		Exec(ctx)
func (tdcb *TestDetailCreateBulk) OnConflict(opts ...sql.ConflictOption) *TestDetailUpsertBulk {
	tdcb.conflict = opts
	return &TestDetailUpsertBulk{
		create: tdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tdcb *TestDetailCreateBulk) OnConflictColumns(columns ...string) *TestDetailUpsertBulk {
	tdcb.conflict = append(tdcb.conflict, sql.ConflictColumns(columns...))
	return &TestDetailUpsertBulk{
		create: tdcb,
	}
}

// TestDetailUpsertBulk is the builder for "upsert"-ing
// a bulk of TestDetail nodes.
type TestDetailUpsertBulk struct {
	create *TestDetailCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TestDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TestDetailUpsertBulk) UpdateNewValues() *TestDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TestDetail.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TestDetailUpsertBulk) Ignore() *TestDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestDetailUpsertBulk) DoNothing() *TestDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestDetailCreateBulk.OnConflict
// documentation for more info.
func (u *TestDetailUpsertBulk) Update(set func(*TestDetailUpsert)) *TestDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetTestID sets the "test_id" field.
func (u *TestDetailUpsertBulk) SetTestID(v int) *TestDetailUpsertBulk {
	return u.Update(func(s *TestDetailUpsert) {
		s.SetTestID(v)
	})
}

// UpdateTestID sets the "test_id" field to the value that was provided on create.
func (u *TestDetailUpsertBulk) UpdateTestID() *TestDetailUpsertBulk {
	return u.Update(func(s *TestDetailUpsert) {
		s.UpdateTestID()
	})
}

// SetTestDetailName sets the "test_detail_name" field.
func (u *TestDetailUpsertBulk) SetTestDetailName(v string) *TestDetailUpsertBulk {
	return u.Update(func(s *TestDetailUpsert) {
		s.SetTestDetailName(v)
	})
}

// UpdateTestDetailName sets the "test_detail_name" field to the value that was provided on create.
func (u *TestDetailUpsertBulk) UpdateTestDetailName() *TestDetailUpsertBulk {
	return u.Update(func(s *TestDetailUpsert) {
		s.UpdateTestDetailName()
	})
}

// SetTestDetailsValue sets the "test_details_value" field.
func (u *TestDetailUpsertBulk) SetTestDetailsValue(v string) *TestDetailUpsertBulk {
	return u.Update(func(s *TestDetailUpsert) {
		s.SetTestDetailsValue(v)
	})
}

// UpdateTestDetailsValue sets the "test_details_value" field to the value that was provided on create.
func (u *TestDetailUpsertBulk) UpdateTestDetailsValue() *TestDetailUpsertBulk {
	return u.Update(func(s *TestDetailUpsert) {
		s.UpdateTestDetailsValue()
	})
}

// SetIsActive sets the "isActive" field.
func (u *TestDetailUpsertBulk) SetIsActive(v bool) *TestDetailUpsertBulk {
	return u.Update(func(s *TestDetailUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "isActive" field to the value that was provided on create.
func (u *TestDetailUpsertBulk) UpdateIsActive() *TestDetailUpsertBulk {
	return u.Update(func(s *TestDetailUpsert) {
		s.UpdateIsActive()
	})
}

// Exec executes the query.
func (u *TestDetailUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TestDetailCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestDetailCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestDetailUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
