// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/tubeinstructions"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TubeInstructionsUpdate is the builder for updating TubeInstructions entities.
type TubeInstructionsUpdate struct {
	config
	hooks    []Hook
	mutation *TubeInstructionsMutation
}

// Where appends a list predicates to the TubeInstructionsUpdate builder.
func (tiu *TubeInstructionsUpdate) Where(ps ...predicate.TubeInstructions) *TubeInstructionsUpdate {
	tiu.mutation.Where(ps...)
	return tiu
}

// SetTubeNameEnum sets the "tube_name_enum" field.
func (tiu *TubeInstructionsUpdate) SetTubeNameEnum(s string) *TubeInstructionsUpdate {
	tiu.mutation.SetTubeNameEnum(s)
	return tiu
}

// SetNillableTubeNameEnum sets the "tube_name_enum" field if the given value is not nil.
func (tiu *TubeInstructionsUpdate) SetNillableTubeNameEnum(s *string) *TubeInstructionsUpdate {
	if s != nil {
		tiu.SetTubeNameEnum(*s)
	}
	return tiu
}

// SetSortOrder sets the "sort_order" field.
func (tiu *TubeInstructionsUpdate) SetSortOrder(i int) *TubeInstructionsUpdate {
	tiu.mutation.ResetSortOrder()
	tiu.mutation.SetSortOrder(i)
	return tiu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (tiu *TubeInstructionsUpdate) SetNillableSortOrder(i *int) *TubeInstructionsUpdate {
	if i != nil {
		tiu.SetSortOrder(*i)
	}
	return tiu
}

// AddSortOrder adds i to the "sort_order" field.
func (tiu *TubeInstructionsUpdate) AddSortOrder(i int) *TubeInstructionsUpdate {
	tiu.mutation.AddSortOrder(i)
	return tiu
}

// SetTubeInstructions sets the "tube_instructions" field.
func (tiu *TubeInstructionsUpdate) SetTubeInstructions(s string) *TubeInstructionsUpdate {
	tiu.mutation.SetTubeInstructions(s)
	return tiu
}

// SetNillableTubeInstructions sets the "tube_instructions" field if the given value is not nil.
func (tiu *TubeInstructionsUpdate) SetNillableTubeInstructions(s *string) *TubeInstructionsUpdate {
	if s != nil {
		tiu.SetTubeInstructions(*s)
	}
	return tiu
}

// SetTubeName sets the "tube_name" field.
func (tiu *TubeInstructionsUpdate) SetTubeName(s string) *TubeInstructionsUpdate {
	tiu.mutation.SetTubeName(s)
	return tiu
}

// SetNillableTubeName sets the "tube_name" field if the given value is not nil.
func (tiu *TubeInstructionsUpdate) SetNillableTubeName(s *string) *TubeInstructionsUpdate {
	if s != nil {
		tiu.SetTubeName(*s)
	}
	return tiu
}

// SetShippingBox sets the "shipping_box" field.
func (tiu *TubeInstructionsUpdate) SetShippingBox(s string) *TubeInstructionsUpdate {
	tiu.mutation.SetShippingBox(s)
	return tiu
}

// SetNillableShippingBox sets the "shipping_box" field if the given value is not nil.
func (tiu *TubeInstructionsUpdate) SetNillableShippingBox(s *string) *TubeInstructionsUpdate {
	if s != nil {
		tiu.SetShippingBox(*s)
	}
	return tiu
}

// SetTransferTubesToSend sets the "transfer_tubes_to_send" field.
func (tiu *TubeInstructionsUpdate) SetTransferTubesToSend(s string) *TubeInstructionsUpdate {
	tiu.mutation.SetTransferTubesToSend(s)
	return tiu
}

// SetNillableTransferTubesToSend sets the "transfer_tubes_to_send" field if the given value is not nil.
func (tiu *TubeInstructionsUpdate) SetNillableTransferTubesToSend(s *string) *TubeInstructionsUpdate {
	if s != nil {
		tiu.SetTransferTubesToSend(*s)
	}
	return tiu
}

// SetBloodType sets the "blood_type" field.
func (tiu *TubeInstructionsUpdate) SetBloodType(b bool) *TubeInstructionsUpdate {
	tiu.mutation.SetBloodType(b)
	return tiu
}

// SetNillableBloodType sets the "blood_type" field if the given value is not nil.
func (tiu *TubeInstructionsUpdate) SetNillableBloodType(b *bool) *TubeInstructionsUpdate {
	if b != nil {
		tiu.SetBloodType(*b)
	}
	return tiu
}

// Mutation returns the TubeInstructionsMutation object of the builder.
func (tiu *TubeInstructionsUpdate) Mutation() *TubeInstructionsMutation {
	return tiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tiu *TubeInstructionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tiu.sqlSave, tiu.mutation, tiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tiu *TubeInstructionsUpdate) SaveX(ctx context.Context) int {
	affected, err := tiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tiu *TubeInstructionsUpdate) Exec(ctx context.Context) error {
	_, err := tiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiu *TubeInstructionsUpdate) ExecX(ctx context.Context) {
	if err := tiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tiu *TubeInstructionsUpdate) check() error {
	if v, ok := tiu.mutation.TubeInstructions(); ok {
		if err := tubeinstructions.TubeInstructionsValidator(v); err != nil {
			return &ValidationError{Name: "tube_instructions", err: fmt.Errorf(`ent: validator failed for field "TubeInstructions.tube_instructions": %w`, err)}
		}
	}
	return nil
}

func (tiu *TubeInstructionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tubeinstructions.Table, tubeinstructions.Columns, sqlgraph.NewFieldSpec(tubeinstructions.FieldID, field.TypeInt))
	if ps := tiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiu.mutation.TubeNameEnum(); ok {
		_spec.SetField(tubeinstructions.FieldTubeNameEnum, field.TypeString, value)
	}
	if value, ok := tiu.mutation.SortOrder(); ok {
		_spec.SetField(tubeinstructions.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := tiu.mutation.AddedSortOrder(); ok {
		_spec.AddField(tubeinstructions.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := tiu.mutation.TubeInstructions(); ok {
		_spec.SetField(tubeinstructions.FieldTubeInstructions, field.TypeString, value)
	}
	if value, ok := tiu.mutation.TubeName(); ok {
		_spec.SetField(tubeinstructions.FieldTubeName, field.TypeString, value)
	}
	if value, ok := tiu.mutation.ShippingBox(); ok {
		_spec.SetField(tubeinstructions.FieldShippingBox, field.TypeString, value)
	}
	if value, ok := tiu.mutation.TransferTubesToSend(); ok {
		_spec.SetField(tubeinstructions.FieldTransferTubesToSend, field.TypeString, value)
	}
	if value, ok := tiu.mutation.BloodType(); ok {
		_spec.SetField(tubeinstructions.FieldBloodType, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tubeinstructions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tiu.mutation.done = true
	return n, nil
}

// TubeInstructionsUpdateOne is the builder for updating a single TubeInstructions entity.
type TubeInstructionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TubeInstructionsMutation
}

// SetTubeNameEnum sets the "tube_name_enum" field.
func (tiuo *TubeInstructionsUpdateOne) SetTubeNameEnum(s string) *TubeInstructionsUpdateOne {
	tiuo.mutation.SetTubeNameEnum(s)
	return tiuo
}

// SetNillableTubeNameEnum sets the "tube_name_enum" field if the given value is not nil.
func (tiuo *TubeInstructionsUpdateOne) SetNillableTubeNameEnum(s *string) *TubeInstructionsUpdateOne {
	if s != nil {
		tiuo.SetTubeNameEnum(*s)
	}
	return tiuo
}

// SetSortOrder sets the "sort_order" field.
func (tiuo *TubeInstructionsUpdateOne) SetSortOrder(i int) *TubeInstructionsUpdateOne {
	tiuo.mutation.ResetSortOrder()
	tiuo.mutation.SetSortOrder(i)
	return tiuo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (tiuo *TubeInstructionsUpdateOne) SetNillableSortOrder(i *int) *TubeInstructionsUpdateOne {
	if i != nil {
		tiuo.SetSortOrder(*i)
	}
	return tiuo
}

// AddSortOrder adds i to the "sort_order" field.
func (tiuo *TubeInstructionsUpdateOne) AddSortOrder(i int) *TubeInstructionsUpdateOne {
	tiuo.mutation.AddSortOrder(i)
	return tiuo
}

// SetTubeInstructions sets the "tube_instructions" field.
func (tiuo *TubeInstructionsUpdateOne) SetTubeInstructions(s string) *TubeInstructionsUpdateOne {
	tiuo.mutation.SetTubeInstructions(s)
	return tiuo
}

// SetNillableTubeInstructions sets the "tube_instructions" field if the given value is not nil.
func (tiuo *TubeInstructionsUpdateOne) SetNillableTubeInstructions(s *string) *TubeInstructionsUpdateOne {
	if s != nil {
		tiuo.SetTubeInstructions(*s)
	}
	return tiuo
}

// SetTubeName sets the "tube_name" field.
func (tiuo *TubeInstructionsUpdateOne) SetTubeName(s string) *TubeInstructionsUpdateOne {
	tiuo.mutation.SetTubeName(s)
	return tiuo
}

// SetNillableTubeName sets the "tube_name" field if the given value is not nil.
func (tiuo *TubeInstructionsUpdateOne) SetNillableTubeName(s *string) *TubeInstructionsUpdateOne {
	if s != nil {
		tiuo.SetTubeName(*s)
	}
	return tiuo
}

// SetShippingBox sets the "shipping_box" field.
func (tiuo *TubeInstructionsUpdateOne) SetShippingBox(s string) *TubeInstructionsUpdateOne {
	tiuo.mutation.SetShippingBox(s)
	return tiuo
}

// SetNillableShippingBox sets the "shipping_box" field if the given value is not nil.
func (tiuo *TubeInstructionsUpdateOne) SetNillableShippingBox(s *string) *TubeInstructionsUpdateOne {
	if s != nil {
		tiuo.SetShippingBox(*s)
	}
	return tiuo
}

// SetTransferTubesToSend sets the "transfer_tubes_to_send" field.
func (tiuo *TubeInstructionsUpdateOne) SetTransferTubesToSend(s string) *TubeInstructionsUpdateOne {
	tiuo.mutation.SetTransferTubesToSend(s)
	return tiuo
}

// SetNillableTransferTubesToSend sets the "transfer_tubes_to_send" field if the given value is not nil.
func (tiuo *TubeInstructionsUpdateOne) SetNillableTransferTubesToSend(s *string) *TubeInstructionsUpdateOne {
	if s != nil {
		tiuo.SetTransferTubesToSend(*s)
	}
	return tiuo
}

// SetBloodType sets the "blood_type" field.
func (tiuo *TubeInstructionsUpdateOne) SetBloodType(b bool) *TubeInstructionsUpdateOne {
	tiuo.mutation.SetBloodType(b)
	return tiuo
}

// SetNillableBloodType sets the "blood_type" field if the given value is not nil.
func (tiuo *TubeInstructionsUpdateOne) SetNillableBloodType(b *bool) *TubeInstructionsUpdateOne {
	if b != nil {
		tiuo.SetBloodType(*b)
	}
	return tiuo
}

// Mutation returns the TubeInstructionsMutation object of the builder.
func (tiuo *TubeInstructionsUpdateOne) Mutation() *TubeInstructionsMutation {
	return tiuo.mutation
}

// Where appends a list predicates to the TubeInstructionsUpdate builder.
func (tiuo *TubeInstructionsUpdateOne) Where(ps ...predicate.TubeInstructions) *TubeInstructionsUpdateOne {
	tiuo.mutation.Where(ps...)
	return tiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tiuo *TubeInstructionsUpdateOne) Select(field string, fields ...string) *TubeInstructionsUpdateOne {
	tiuo.fields = append([]string{field}, fields...)
	return tiuo
}

// Save executes the query and returns the updated TubeInstructions entity.
func (tiuo *TubeInstructionsUpdateOne) Save(ctx context.Context) (*TubeInstructions, error) {
	return withHooks(ctx, tiuo.sqlSave, tiuo.mutation, tiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tiuo *TubeInstructionsUpdateOne) SaveX(ctx context.Context) *TubeInstructions {
	node, err := tiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tiuo *TubeInstructionsUpdateOne) Exec(ctx context.Context) error {
	_, err := tiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiuo *TubeInstructionsUpdateOne) ExecX(ctx context.Context) {
	if err := tiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tiuo *TubeInstructionsUpdateOne) check() error {
	if v, ok := tiuo.mutation.TubeInstructions(); ok {
		if err := tubeinstructions.TubeInstructionsValidator(v); err != nil {
			return &ValidationError{Name: "tube_instructions", err: fmt.Errorf(`ent: validator failed for field "TubeInstructions.tube_instructions": %w`, err)}
		}
	}
	return nil
}

func (tiuo *TubeInstructionsUpdateOne) sqlSave(ctx context.Context) (_node *TubeInstructions, err error) {
	if err := tiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tubeinstructions.Table, tubeinstructions.Columns, sqlgraph.NewFieldSpec(tubeinstructions.FieldID, field.TypeInt))
	id, ok := tiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TubeInstructions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tubeinstructions.FieldID)
		for _, f := range fields {
			if !tubeinstructions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tubeinstructions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiuo.mutation.TubeNameEnum(); ok {
		_spec.SetField(tubeinstructions.FieldTubeNameEnum, field.TypeString, value)
	}
	if value, ok := tiuo.mutation.SortOrder(); ok {
		_spec.SetField(tubeinstructions.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := tiuo.mutation.AddedSortOrder(); ok {
		_spec.AddField(tubeinstructions.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := tiuo.mutation.TubeInstructions(); ok {
		_spec.SetField(tubeinstructions.FieldTubeInstructions, field.TypeString, value)
	}
	if value, ok := tiuo.mutation.TubeName(); ok {
		_spec.SetField(tubeinstructions.FieldTubeName, field.TypeString, value)
	}
	if value, ok := tiuo.mutation.ShippingBox(); ok {
		_spec.SetField(tubeinstructions.FieldShippingBox, field.TypeString, value)
	}
	if value, ok := tiuo.mutation.TransferTubesToSend(); ok {
		_spec.SetField(tubeinstructions.FieldTransferTubesToSend, field.TypeString, value)
	}
	if value, ok := tiuo.mutation.BloodType(); ok {
		_spec.SetField(tubeinstructions.FieldBloodType, field.TypeBool, value)
	}
	_node = &TubeInstructions{config: tiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tubeinstructions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tiuo.mutation.done = true
	return _node, nil
}
