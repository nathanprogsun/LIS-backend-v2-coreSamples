// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/patientflag"
	"coresamples/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PatientFlagUpdate is the builder for updating PatientFlag entities.
type PatientFlagUpdate struct {
	config
	hooks    []Hook
	mutation *PatientFlagMutation
}

// Where appends a list predicates to the PatientFlagUpdate builder.
func (pfu *PatientFlagUpdate) Where(ps ...predicate.PatientFlag) *PatientFlagUpdate {
	pfu.mutation.Where(ps...)
	return pfu
}

// SetPatientFlagName sets the "patient_flag_name" field.
func (pfu *PatientFlagUpdate) SetPatientFlagName(s string) *PatientFlagUpdate {
	pfu.mutation.SetPatientFlagName(s)
	return pfu
}

// SetNillablePatientFlagName sets the "patient_flag_name" field if the given value is not nil.
func (pfu *PatientFlagUpdate) SetNillablePatientFlagName(s *string) *PatientFlagUpdate {
	if s != nil {
		pfu.SetPatientFlagName(*s)
	}
	return pfu
}

// SetPatientFlagDisplayName sets the "patient_flag_display_name" field.
func (pfu *PatientFlagUpdate) SetPatientFlagDisplayName(s string) *PatientFlagUpdate {
	pfu.mutation.SetPatientFlagDisplayName(s)
	return pfu
}

// SetNillablePatientFlagDisplayName sets the "patient_flag_display_name" field if the given value is not nil.
func (pfu *PatientFlagUpdate) SetNillablePatientFlagDisplayName(s *string) *PatientFlagUpdate {
	if s != nil {
		pfu.SetPatientFlagDisplayName(*s)
	}
	return pfu
}

// ClearPatientFlagDisplayName clears the value of the "patient_flag_display_name" field.
func (pfu *PatientFlagUpdate) ClearPatientFlagDisplayName() *PatientFlagUpdate {
	pfu.mutation.ClearPatientFlagDisplayName()
	return pfu
}

// SetPatientFlagDescription sets the "patient_flag_description" field.
func (pfu *PatientFlagUpdate) SetPatientFlagDescription(s string) *PatientFlagUpdate {
	pfu.mutation.SetPatientFlagDescription(s)
	return pfu
}

// SetNillablePatientFlagDescription sets the "patient_flag_description" field if the given value is not nil.
func (pfu *PatientFlagUpdate) SetNillablePatientFlagDescription(s *string) *PatientFlagUpdate {
	if s != nil {
		pfu.SetPatientFlagDescription(*s)
	}
	return pfu
}

// ClearPatientFlagDescription clears the value of the "patient_flag_description" field.
func (pfu *PatientFlagUpdate) ClearPatientFlagDescription() *PatientFlagUpdate {
	pfu.mutation.ClearPatientFlagDescription()
	return pfu
}

// SetPatientFlagIsActive sets the "patient_flag_is_active" field.
func (pfu *PatientFlagUpdate) SetPatientFlagIsActive(b bool) *PatientFlagUpdate {
	pfu.mutation.SetPatientFlagIsActive(b)
	return pfu
}

// SetNillablePatientFlagIsActive sets the "patient_flag_is_active" field if the given value is not nil.
func (pfu *PatientFlagUpdate) SetNillablePatientFlagIsActive(b *bool) *PatientFlagUpdate {
	if b != nil {
		pfu.SetPatientFlagIsActive(*b)
	}
	return pfu
}

// SetPatientFlagCreatedAt sets the "patient_flag_created_at" field.
func (pfu *PatientFlagUpdate) SetPatientFlagCreatedAt(t time.Time) *PatientFlagUpdate {
	pfu.mutation.SetPatientFlagCreatedAt(t)
	return pfu
}

// SetNillablePatientFlagCreatedAt sets the "patient_flag_created_at" field if the given value is not nil.
func (pfu *PatientFlagUpdate) SetNillablePatientFlagCreatedAt(t *time.Time) *PatientFlagUpdate {
	if t != nil {
		pfu.SetPatientFlagCreatedAt(*t)
	}
	return pfu
}

// SetPatientFlagColor sets the "patient_flag_color" field.
func (pfu *PatientFlagUpdate) SetPatientFlagColor(s string) *PatientFlagUpdate {
	pfu.mutation.SetPatientFlagColor(s)
	return pfu
}

// SetNillablePatientFlagColor sets the "patient_flag_color" field if the given value is not nil.
func (pfu *PatientFlagUpdate) SetNillablePatientFlagColor(s *string) *PatientFlagUpdate {
	if s != nil {
		pfu.SetPatientFlagColor(*s)
	}
	return pfu
}

// ClearPatientFlagColor clears the value of the "patient_flag_color" field.
func (pfu *PatientFlagUpdate) ClearPatientFlagColor() *PatientFlagUpdate {
	pfu.mutation.ClearPatientFlagColor()
	return pfu
}

// SetPatientFlagedBy sets the "patient_flaged_by" field.
func (pfu *PatientFlagUpdate) SetPatientFlagedBy(s string) *PatientFlagUpdate {
	pfu.mutation.SetPatientFlagedBy(s)
	return pfu
}

// SetNillablePatientFlagedBy sets the "patient_flaged_by" field if the given value is not nil.
func (pfu *PatientFlagUpdate) SetNillablePatientFlagedBy(s *string) *PatientFlagUpdate {
	if s != nil {
		pfu.SetPatientFlagedBy(*s)
	}
	return pfu
}

// Mutation returns the PatientFlagMutation object of the builder.
func (pfu *PatientFlagUpdate) Mutation() *PatientFlagMutation {
	return pfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pfu *PatientFlagUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pfu.sqlSave, pfu.mutation, pfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pfu *PatientFlagUpdate) SaveX(ctx context.Context) int {
	affected, err := pfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pfu *PatientFlagUpdate) Exec(ctx context.Context) error {
	_, err := pfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfu *PatientFlagUpdate) ExecX(ctx context.Context) {
	if err := pfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pfu *PatientFlagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(patientflag.Table, patientflag.Columns, sqlgraph.NewFieldSpec(patientflag.FieldID, field.TypeInt))
	if ps := pfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfu.mutation.PatientFlagName(); ok {
		_spec.SetField(patientflag.FieldPatientFlagName, field.TypeString, value)
	}
	if value, ok := pfu.mutation.PatientFlagDisplayName(); ok {
		_spec.SetField(patientflag.FieldPatientFlagDisplayName, field.TypeString, value)
	}
	if pfu.mutation.PatientFlagDisplayNameCleared() {
		_spec.ClearField(patientflag.FieldPatientFlagDisplayName, field.TypeString)
	}
	if value, ok := pfu.mutation.PatientFlagDescription(); ok {
		_spec.SetField(patientflag.FieldPatientFlagDescription, field.TypeString, value)
	}
	if pfu.mutation.PatientFlagDescriptionCleared() {
		_spec.ClearField(patientflag.FieldPatientFlagDescription, field.TypeString)
	}
	if value, ok := pfu.mutation.PatientFlagIsActive(); ok {
		_spec.SetField(patientflag.FieldPatientFlagIsActive, field.TypeBool, value)
	}
	if value, ok := pfu.mutation.PatientFlagCreatedAt(); ok {
		_spec.SetField(patientflag.FieldPatientFlagCreatedAt, field.TypeTime, value)
	}
	if value, ok := pfu.mutation.PatientFlagColor(); ok {
		_spec.SetField(patientflag.FieldPatientFlagColor, field.TypeString, value)
	}
	if pfu.mutation.PatientFlagColorCleared() {
		_spec.ClearField(patientflag.FieldPatientFlagColor, field.TypeString)
	}
	if value, ok := pfu.mutation.PatientFlagedBy(); ok {
		_spec.SetField(patientflag.FieldPatientFlagedBy, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patientflag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pfu.mutation.done = true
	return n, nil
}

// PatientFlagUpdateOne is the builder for updating a single PatientFlag entity.
type PatientFlagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PatientFlagMutation
}

// SetPatientFlagName sets the "patient_flag_name" field.
func (pfuo *PatientFlagUpdateOne) SetPatientFlagName(s string) *PatientFlagUpdateOne {
	pfuo.mutation.SetPatientFlagName(s)
	return pfuo
}

// SetNillablePatientFlagName sets the "patient_flag_name" field if the given value is not nil.
func (pfuo *PatientFlagUpdateOne) SetNillablePatientFlagName(s *string) *PatientFlagUpdateOne {
	if s != nil {
		pfuo.SetPatientFlagName(*s)
	}
	return pfuo
}

// SetPatientFlagDisplayName sets the "patient_flag_display_name" field.
func (pfuo *PatientFlagUpdateOne) SetPatientFlagDisplayName(s string) *PatientFlagUpdateOne {
	pfuo.mutation.SetPatientFlagDisplayName(s)
	return pfuo
}

// SetNillablePatientFlagDisplayName sets the "patient_flag_display_name" field if the given value is not nil.
func (pfuo *PatientFlagUpdateOne) SetNillablePatientFlagDisplayName(s *string) *PatientFlagUpdateOne {
	if s != nil {
		pfuo.SetPatientFlagDisplayName(*s)
	}
	return pfuo
}

// ClearPatientFlagDisplayName clears the value of the "patient_flag_display_name" field.
func (pfuo *PatientFlagUpdateOne) ClearPatientFlagDisplayName() *PatientFlagUpdateOne {
	pfuo.mutation.ClearPatientFlagDisplayName()
	return pfuo
}

// SetPatientFlagDescription sets the "patient_flag_description" field.
func (pfuo *PatientFlagUpdateOne) SetPatientFlagDescription(s string) *PatientFlagUpdateOne {
	pfuo.mutation.SetPatientFlagDescription(s)
	return pfuo
}

// SetNillablePatientFlagDescription sets the "patient_flag_description" field if the given value is not nil.
func (pfuo *PatientFlagUpdateOne) SetNillablePatientFlagDescription(s *string) *PatientFlagUpdateOne {
	if s != nil {
		pfuo.SetPatientFlagDescription(*s)
	}
	return pfuo
}

// ClearPatientFlagDescription clears the value of the "patient_flag_description" field.
func (pfuo *PatientFlagUpdateOne) ClearPatientFlagDescription() *PatientFlagUpdateOne {
	pfuo.mutation.ClearPatientFlagDescription()
	return pfuo
}

// SetPatientFlagIsActive sets the "patient_flag_is_active" field.
func (pfuo *PatientFlagUpdateOne) SetPatientFlagIsActive(b bool) *PatientFlagUpdateOne {
	pfuo.mutation.SetPatientFlagIsActive(b)
	return pfuo
}

// SetNillablePatientFlagIsActive sets the "patient_flag_is_active" field if the given value is not nil.
func (pfuo *PatientFlagUpdateOne) SetNillablePatientFlagIsActive(b *bool) *PatientFlagUpdateOne {
	if b != nil {
		pfuo.SetPatientFlagIsActive(*b)
	}
	return pfuo
}

// SetPatientFlagCreatedAt sets the "patient_flag_created_at" field.
func (pfuo *PatientFlagUpdateOne) SetPatientFlagCreatedAt(t time.Time) *PatientFlagUpdateOne {
	pfuo.mutation.SetPatientFlagCreatedAt(t)
	return pfuo
}

// SetNillablePatientFlagCreatedAt sets the "patient_flag_created_at" field if the given value is not nil.
func (pfuo *PatientFlagUpdateOne) SetNillablePatientFlagCreatedAt(t *time.Time) *PatientFlagUpdateOne {
	if t != nil {
		pfuo.SetPatientFlagCreatedAt(*t)
	}
	return pfuo
}

// SetPatientFlagColor sets the "patient_flag_color" field.
func (pfuo *PatientFlagUpdateOne) SetPatientFlagColor(s string) *PatientFlagUpdateOne {
	pfuo.mutation.SetPatientFlagColor(s)
	return pfuo
}

// SetNillablePatientFlagColor sets the "patient_flag_color" field if the given value is not nil.
func (pfuo *PatientFlagUpdateOne) SetNillablePatientFlagColor(s *string) *PatientFlagUpdateOne {
	if s != nil {
		pfuo.SetPatientFlagColor(*s)
	}
	return pfuo
}

// ClearPatientFlagColor clears the value of the "patient_flag_color" field.
func (pfuo *PatientFlagUpdateOne) ClearPatientFlagColor() *PatientFlagUpdateOne {
	pfuo.mutation.ClearPatientFlagColor()
	return pfuo
}

// SetPatientFlagedBy sets the "patient_flaged_by" field.
func (pfuo *PatientFlagUpdateOne) SetPatientFlagedBy(s string) *PatientFlagUpdateOne {
	pfuo.mutation.SetPatientFlagedBy(s)
	return pfuo
}

// SetNillablePatientFlagedBy sets the "patient_flaged_by" field if the given value is not nil.
func (pfuo *PatientFlagUpdateOne) SetNillablePatientFlagedBy(s *string) *PatientFlagUpdateOne {
	if s != nil {
		pfuo.SetPatientFlagedBy(*s)
	}
	return pfuo
}

// Mutation returns the PatientFlagMutation object of the builder.
func (pfuo *PatientFlagUpdateOne) Mutation() *PatientFlagMutation {
	return pfuo.mutation
}

// Where appends a list predicates to the PatientFlagUpdate builder.
func (pfuo *PatientFlagUpdateOne) Where(ps ...predicate.PatientFlag) *PatientFlagUpdateOne {
	pfuo.mutation.Where(ps...)
	return pfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pfuo *PatientFlagUpdateOne) Select(field string, fields ...string) *PatientFlagUpdateOne {
	pfuo.fields = append([]string{field}, fields...)
	return pfuo
}

// Save executes the query and returns the updated PatientFlag entity.
func (pfuo *PatientFlagUpdateOne) Save(ctx context.Context) (*PatientFlag, error) {
	return withHooks(ctx, pfuo.sqlSave, pfuo.mutation, pfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pfuo *PatientFlagUpdateOne) SaveX(ctx context.Context) *PatientFlag {
	node, err := pfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pfuo *PatientFlagUpdateOne) Exec(ctx context.Context) error {
	_, err := pfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfuo *PatientFlagUpdateOne) ExecX(ctx context.Context) {
	if err := pfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pfuo *PatientFlagUpdateOne) sqlSave(ctx context.Context) (_node *PatientFlag, err error) {
	_spec := sqlgraph.NewUpdateSpec(patientflag.Table, patientflag.Columns, sqlgraph.NewFieldSpec(patientflag.FieldID, field.TypeInt))
	id, ok := pfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PatientFlag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, patientflag.FieldID)
		for _, f := range fields {
			if !patientflag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != patientflag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfuo.mutation.PatientFlagName(); ok {
		_spec.SetField(patientflag.FieldPatientFlagName, field.TypeString, value)
	}
	if value, ok := pfuo.mutation.PatientFlagDisplayName(); ok {
		_spec.SetField(patientflag.FieldPatientFlagDisplayName, field.TypeString, value)
	}
	if pfuo.mutation.PatientFlagDisplayNameCleared() {
		_spec.ClearField(patientflag.FieldPatientFlagDisplayName, field.TypeString)
	}
	if value, ok := pfuo.mutation.PatientFlagDescription(); ok {
		_spec.SetField(patientflag.FieldPatientFlagDescription, field.TypeString, value)
	}
	if pfuo.mutation.PatientFlagDescriptionCleared() {
		_spec.ClearField(patientflag.FieldPatientFlagDescription, field.TypeString)
	}
	if value, ok := pfuo.mutation.PatientFlagIsActive(); ok {
		_spec.SetField(patientflag.FieldPatientFlagIsActive, field.TypeBool, value)
	}
	if value, ok := pfuo.mutation.PatientFlagCreatedAt(); ok {
		_spec.SetField(patientflag.FieldPatientFlagCreatedAt, field.TypeTime, value)
	}
	if value, ok := pfuo.mutation.PatientFlagColor(); ok {
		_spec.SetField(patientflag.FieldPatientFlagColor, field.TypeString, value)
	}
	if pfuo.mutation.PatientFlagColorCleared() {
		_spec.ClearField(patientflag.FieldPatientFlagColor, field.TypeString)
	}
	if value, ok := pfuo.mutation.PatientFlagedBy(); ok {
		_spec.SetField(patientflag.FieldPatientFlagedBy, field.TypeString, value)
	}
	_node = &PatientFlag{config: pfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patientflag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pfuo.mutation.done = true
	return _node, nil
}
