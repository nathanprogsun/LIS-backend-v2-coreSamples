// Code generated by ent, DO NOT EDIT.

package sampletype

import (
	"coresamples/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SampleType {
	return predicate.SampleType(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SampleType {
	return predicate.SampleType(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SampleType {
	return predicate.SampleType(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SampleType {
	return predicate.SampleType(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SampleType {
	return predicate.SampleType(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SampleType {
	return predicate.SampleType(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SampleType {
	return predicate.SampleType(sql.FieldLTE(FieldID, id))
}

// SampleTypeName applies equality check predicate on the "sample_type_name" field. It's identical to SampleTypeNameEQ.
func SampleTypeName(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldSampleTypeName, v))
}

// SampleTypeCode applies equality check predicate on the "sample_type_code" field. It's identical to SampleTypeCodeEQ.
func SampleTypeCode(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldSampleTypeCode, v))
}

// SampleTypeEnum applies equality check predicate on the "sample_type_enum" field. It's identical to SampleTypeEnumEQ.
func SampleTypeEnum(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldSampleTypeEnum, v))
}

// SampleTypeEnumOldLisRequest applies equality check predicate on the "sample_type_enum_old_lis_request" field. It's identical to SampleTypeEnumOldLisRequestEQ.
func SampleTypeEnumOldLisRequest(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldSampleTypeEnumOldLisRequest, v))
}

// SampleTypeDescription applies equality check predicate on the "sample_type_description" field. It's identical to SampleTypeDescriptionEQ.
func SampleTypeDescription(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldSampleTypeDescription, v))
}

// PrimarySampleTypeGroup applies equality check predicate on the "primary_sample_type_group" field. It's identical to PrimarySampleTypeGroupEQ.
func PrimarySampleTypeGroup(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldPrimarySampleTypeGroup, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldIsActive, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldCreatedTime, v))
}

// UpdatedTime applies equality check predicate on the "updated_time" field. It's identical to UpdatedTimeEQ.
func UpdatedTime(v time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldUpdatedTime, v))
}

// SampleTypeNameEQ applies the EQ predicate on the "sample_type_name" field.
func SampleTypeNameEQ(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldSampleTypeName, v))
}

// SampleTypeNameNEQ applies the NEQ predicate on the "sample_type_name" field.
func SampleTypeNameNEQ(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldNEQ(FieldSampleTypeName, v))
}

// SampleTypeNameIn applies the In predicate on the "sample_type_name" field.
func SampleTypeNameIn(vs ...string) predicate.SampleType {
	return predicate.SampleType(sql.FieldIn(FieldSampleTypeName, vs...))
}

// SampleTypeNameNotIn applies the NotIn predicate on the "sample_type_name" field.
func SampleTypeNameNotIn(vs ...string) predicate.SampleType {
	return predicate.SampleType(sql.FieldNotIn(FieldSampleTypeName, vs...))
}

// SampleTypeNameGT applies the GT predicate on the "sample_type_name" field.
func SampleTypeNameGT(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldGT(FieldSampleTypeName, v))
}

// SampleTypeNameGTE applies the GTE predicate on the "sample_type_name" field.
func SampleTypeNameGTE(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldGTE(FieldSampleTypeName, v))
}

// SampleTypeNameLT applies the LT predicate on the "sample_type_name" field.
func SampleTypeNameLT(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldLT(FieldSampleTypeName, v))
}

// SampleTypeNameLTE applies the LTE predicate on the "sample_type_name" field.
func SampleTypeNameLTE(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldLTE(FieldSampleTypeName, v))
}

// SampleTypeNameContains applies the Contains predicate on the "sample_type_name" field.
func SampleTypeNameContains(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldContains(FieldSampleTypeName, v))
}

// SampleTypeNameHasPrefix applies the HasPrefix predicate on the "sample_type_name" field.
func SampleTypeNameHasPrefix(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldHasPrefix(FieldSampleTypeName, v))
}

// SampleTypeNameHasSuffix applies the HasSuffix predicate on the "sample_type_name" field.
func SampleTypeNameHasSuffix(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldHasSuffix(FieldSampleTypeName, v))
}

// SampleTypeNameEqualFold applies the EqualFold predicate on the "sample_type_name" field.
func SampleTypeNameEqualFold(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEqualFold(FieldSampleTypeName, v))
}

// SampleTypeNameContainsFold applies the ContainsFold predicate on the "sample_type_name" field.
func SampleTypeNameContainsFold(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldContainsFold(FieldSampleTypeName, v))
}

// SampleTypeCodeEQ applies the EQ predicate on the "sample_type_code" field.
func SampleTypeCodeEQ(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldSampleTypeCode, v))
}

// SampleTypeCodeNEQ applies the NEQ predicate on the "sample_type_code" field.
func SampleTypeCodeNEQ(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldNEQ(FieldSampleTypeCode, v))
}

// SampleTypeCodeIn applies the In predicate on the "sample_type_code" field.
func SampleTypeCodeIn(vs ...string) predicate.SampleType {
	return predicate.SampleType(sql.FieldIn(FieldSampleTypeCode, vs...))
}

// SampleTypeCodeNotIn applies the NotIn predicate on the "sample_type_code" field.
func SampleTypeCodeNotIn(vs ...string) predicate.SampleType {
	return predicate.SampleType(sql.FieldNotIn(FieldSampleTypeCode, vs...))
}

// SampleTypeCodeGT applies the GT predicate on the "sample_type_code" field.
func SampleTypeCodeGT(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldGT(FieldSampleTypeCode, v))
}

// SampleTypeCodeGTE applies the GTE predicate on the "sample_type_code" field.
func SampleTypeCodeGTE(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldGTE(FieldSampleTypeCode, v))
}

// SampleTypeCodeLT applies the LT predicate on the "sample_type_code" field.
func SampleTypeCodeLT(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldLT(FieldSampleTypeCode, v))
}

// SampleTypeCodeLTE applies the LTE predicate on the "sample_type_code" field.
func SampleTypeCodeLTE(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldLTE(FieldSampleTypeCode, v))
}

// SampleTypeCodeContains applies the Contains predicate on the "sample_type_code" field.
func SampleTypeCodeContains(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldContains(FieldSampleTypeCode, v))
}

// SampleTypeCodeHasPrefix applies the HasPrefix predicate on the "sample_type_code" field.
func SampleTypeCodeHasPrefix(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldHasPrefix(FieldSampleTypeCode, v))
}

// SampleTypeCodeHasSuffix applies the HasSuffix predicate on the "sample_type_code" field.
func SampleTypeCodeHasSuffix(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldHasSuffix(FieldSampleTypeCode, v))
}

// SampleTypeCodeEqualFold applies the EqualFold predicate on the "sample_type_code" field.
func SampleTypeCodeEqualFold(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEqualFold(FieldSampleTypeCode, v))
}

// SampleTypeCodeContainsFold applies the ContainsFold predicate on the "sample_type_code" field.
func SampleTypeCodeContainsFold(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldContainsFold(FieldSampleTypeCode, v))
}

// SampleTypeEnumEQ applies the EQ predicate on the "sample_type_enum" field.
func SampleTypeEnumEQ(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldSampleTypeEnum, v))
}

// SampleTypeEnumNEQ applies the NEQ predicate on the "sample_type_enum" field.
func SampleTypeEnumNEQ(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldNEQ(FieldSampleTypeEnum, v))
}

// SampleTypeEnumIn applies the In predicate on the "sample_type_enum" field.
func SampleTypeEnumIn(vs ...string) predicate.SampleType {
	return predicate.SampleType(sql.FieldIn(FieldSampleTypeEnum, vs...))
}

// SampleTypeEnumNotIn applies the NotIn predicate on the "sample_type_enum" field.
func SampleTypeEnumNotIn(vs ...string) predicate.SampleType {
	return predicate.SampleType(sql.FieldNotIn(FieldSampleTypeEnum, vs...))
}

// SampleTypeEnumGT applies the GT predicate on the "sample_type_enum" field.
func SampleTypeEnumGT(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldGT(FieldSampleTypeEnum, v))
}

// SampleTypeEnumGTE applies the GTE predicate on the "sample_type_enum" field.
func SampleTypeEnumGTE(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldGTE(FieldSampleTypeEnum, v))
}

// SampleTypeEnumLT applies the LT predicate on the "sample_type_enum" field.
func SampleTypeEnumLT(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldLT(FieldSampleTypeEnum, v))
}

// SampleTypeEnumLTE applies the LTE predicate on the "sample_type_enum" field.
func SampleTypeEnumLTE(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldLTE(FieldSampleTypeEnum, v))
}

// SampleTypeEnumContains applies the Contains predicate on the "sample_type_enum" field.
func SampleTypeEnumContains(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldContains(FieldSampleTypeEnum, v))
}

// SampleTypeEnumHasPrefix applies the HasPrefix predicate on the "sample_type_enum" field.
func SampleTypeEnumHasPrefix(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldHasPrefix(FieldSampleTypeEnum, v))
}

// SampleTypeEnumHasSuffix applies the HasSuffix predicate on the "sample_type_enum" field.
func SampleTypeEnumHasSuffix(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldHasSuffix(FieldSampleTypeEnum, v))
}

// SampleTypeEnumIsNil applies the IsNil predicate on the "sample_type_enum" field.
func SampleTypeEnumIsNil() predicate.SampleType {
	return predicate.SampleType(sql.FieldIsNull(FieldSampleTypeEnum))
}

// SampleTypeEnumNotNil applies the NotNil predicate on the "sample_type_enum" field.
func SampleTypeEnumNotNil() predicate.SampleType {
	return predicate.SampleType(sql.FieldNotNull(FieldSampleTypeEnum))
}

// SampleTypeEnumEqualFold applies the EqualFold predicate on the "sample_type_enum" field.
func SampleTypeEnumEqualFold(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEqualFold(FieldSampleTypeEnum, v))
}

// SampleTypeEnumContainsFold applies the ContainsFold predicate on the "sample_type_enum" field.
func SampleTypeEnumContainsFold(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldContainsFold(FieldSampleTypeEnum, v))
}

// SampleTypeEnumOldLisRequestEQ applies the EQ predicate on the "sample_type_enum_old_lis_request" field.
func SampleTypeEnumOldLisRequestEQ(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldSampleTypeEnumOldLisRequest, v))
}

// SampleTypeEnumOldLisRequestNEQ applies the NEQ predicate on the "sample_type_enum_old_lis_request" field.
func SampleTypeEnumOldLisRequestNEQ(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldNEQ(FieldSampleTypeEnumOldLisRequest, v))
}

// SampleTypeEnumOldLisRequestIn applies the In predicate on the "sample_type_enum_old_lis_request" field.
func SampleTypeEnumOldLisRequestIn(vs ...string) predicate.SampleType {
	return predicate.SampleType(sql.FieldIn(FieldSampleTypeEnumOldLisRequest, vs...))
}

// SampleTypeEnumOldLisRequestNotIn applies the NotIn predicate on the "sample_type_enum_old_lis_request" field.
func SampleTypeEnumOldLisRequestNotIn(vs ...string) predicate.SampleType {
	return predicate.SampleType(sql.FieldNotIn(FieldSampleTypeEnumOldLisRequest, vs...))
}

// SampleTypeEnumOldLisRequestGT applies the GT predicate on the "sample_type_enum_old_lis_request" field.
func SampleTypeEnumOldLisRequestGT(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldGT(FieldSampleTypeEnumOldLisRequest, v))
}

// SampleTypeEnumOldLisRequestGTE applies the GTE predicate on the "sample_type_enum_old_lis_request" field.
func SampleTypeEnumOldLisRequestGTE(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldGTE(FieldSampleTypeEnumOldLisRequest, v))
}

// SampleTypeEnumOldLisRequestLT applies the LT predicate on the "sample_type_enum_old_lis_request" field.
func SampleTypeEnumOldLisRequestLT(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldLT(FieldSampleTypeEnumOldLisRequest, v))
}

// SampleTypeEnumOldLisRequestLTE applies the LTE predicate on the "sample_type_enum_old_lis_request" field.
func SampleTypeEnumOldLisRequestLTE(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldLTE(FieldSampleTypeEnumOldLisRequest, v))
}

// SampleTypeEnumOldLisRequestContains applies the Contains predicate on the "sample_type_enum_old_lis_request" field.
func SampleTypeEnumOldLisRequestContains(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldContains(FieldSampleTypeEnumOldLisRequest, v))
}

// SampleTypeEnumOldLisRequestHasPrefix applies the HasPrefix predicate on the "sample_type_enum_old_lis_request" field.
func SampleTypeEnumOldLisRequestHasPrefix(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldHasPrefix(FieldSampleTypeEnumOldLisRequest, v))
}

// SampleTypeEnumOldLisRequestHasSuffix applies the HasSuffix predicate on the "sample_type_enum_old_lis_request" field.
func SampleTypeEnumOldLisRequestHasSuffix(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldHasSuffix(FieldSampleTypeEnumOldLisRequest, v))
}

// SampleTypeEnumOldLisRequestIsNil applies the IsNil predicate on the "sample_type_enum_old_lis_request" field.
func SampleTypeEnumOldLisRequestIsNil() predicate.SampleType {
	return predicate.SampleType(sql.FieldIsNull(FieldSampleTypeEnumOldLisRequest))
}

// SampleTypeEnumOldLisRequestNotNil applies the NotNil predicate on the "sample_type_enum_old_lis_request" field.
func SampleTypeEnumOldLisRequestNotNil() predicate.SampleType {
	return predicate.SampleType(sql.FieldNotNull(FieldSampleTypeEnumOldLisRequest))
}

// SampleTypeEnumOldLisRequestEqualFold applies the EqualFold predicate on the "sample_type_enum_old_lis_request" field.
func SampleTypeEnumOldLisRequestEqualFold(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEqualFold(FieldSampleTypeEnumOldLisRequest, v))
}

// SampleTypeEnumOldLisRequestContainsFold applies the ContainsFold predicate on the "sample_type_enum_old_lis_request" field.
func SampleTypeEnumOldLisRequestContainsFold(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldContainsFold(FieldSampleTypeEnumOldLisRequest, v))
}

// SampleTypeDescriptionEQ applies the EQ predicate on the "sample_type_description" field.
func SampleTypeDescriptionEQ(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldSampleTypeDescription, v))
}

// SampleTypeDescriptionNEQ applies the NEQ predicate on the "sample_type_description" field.
func SampleTypeDescriptionNEQ(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldNEQ(FieldSampleTypeDescription, v))
}

// SampleTypeDescriptionIn applies the In predicate on the "sample_type_description" field.
func SampleTypeDescriptionIn(vs ...string) predicate.SampleType {
	return predicate.SampleType(sql.FieldIn(FieldSampleTypeDescription, vs...))
}

// SampleTypeDescriptionNotIn applies the NotIn predicate on the "sample_type_description" field.
func SampleTypeDescriptionNotIn(vs ...string) predicate.SampleType {
	return predicate.SampleType(sql.FieldNotIn(FieldSampleTypeDescription, vs...))
}

// SampleTypeDescriptionGT applies the GT predicate on the "sample_type_description" field.
func SampleTypeDescriptionGT(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldGT(FieldSampleTypeDescription, v))
}

// SampleTypeDescriptionGTE applies the GTE predicate on the "sample_type_description" field.
func SampleTypeDescriptionGTE(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldGTE(FieldSampleTypeDescription, v))
}

// SampleTypeDescriptionLT applies the LT predicate on the "sample_type_description" field.
func SampleTypeDescriptionLT(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldLT(FieldSampleTypeDescription, v))
}

// SampleTypeDescriptionLTE applies the LTE predicate on the "sample_type_description" field.
func SampleTypeDescriptionLTE(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldLTE(FieldSampleTypeDescription, v))
}

// SampleTypeDescriptionContains applies the Contains predicate on the "sample_type_description" field.
func SampleTypeDescriptionContains(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldContains(FieldSampleTypeDescription, v))
}

// SampleTypeDescriptionHasPrefix applies the HasPrefix predicate on the "sample_type_description" field.
func SampleTypeDescriptionHasPrefix(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldHasPrefix(FieldSampleTypeDescription, v))
}

// SampleTypeDescriptionHasSuffix applies the HasSuffix predicate on the "sample_type_description" field.
func SampleTypeDescriptionHasSuffix(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldHasSuffix(FieldSampleTypeDescription, v))
}

// SampleTypeDescriptionEqualFold applies the EqualFold predicate on the "sample_type_description" field.
func SampleTypeDescriptionEqualFold(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEqualFold(FieldSampleTypeDescription, v))
}

// SampleTypeDescriptionContainsFold applies the ContainsFold predicate on the "sample_type_description" field.
func SampleTypeDescriptionContainsFold(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldContainsFold(FieldSampleTypeDescription, v))
}

// PrimarySampleTypeGroupEQ applies the EQ predicate on the "primary_sample_type_group" field.
func PrimarySampleTypeGroupEQ(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldPrimarySampleTypeGroup, v))
}

// PrimarySampleTypeGroupNEQ applies the NEQ predicate on the "primary_sample_type_group" field.
func PrimarySampleTypeGroupNEQ(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldNEQ(FieldPrimarySampleTypeGroup, v))
}

// PrimarySampleTypeGroupIn applies the In predicate on the "primary_sample_type_group" field.
func PrimarySampleTypeGroupIn(vs ...string) predicate.SampleType {
	return predicate.SampleType(sql.FieldIn(FieldPrimarySampleTypeGroup, vs...))
}

// PrimarySampleTypeGroupNotIn applies the NotIn predicate on the "primary_sample_type_group" field.
func PrimarySampleTypeGroupNotIn(vs ...string) predicate.SampleType {
	return predicate.SampleType(sql.FieldNotIn(FieldPrimarySampleTypeGroup, vs...))
}

// PrimarySampleTypeGroupGT applies the GT predicate on the "primary_sample_type_group" field.
func PrimarySampleTypeGroupGT(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldGT(FieldPrimarySampleTypeGroup, v))
}

// PrimarySampleTypeGroupGTE applies the GTE predicate on the "primary_sample_type_group" field.
func PrimarySampleTypeGroupGTE(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldGTE(FieldPrimarySampleTypeGroup, v))
}

// PrimarySampleTypeGroupLT applies the LT predicate on the "primary_sample_type_group" field.
func PrimarySampleTypeGroupLT(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldLT(FieldPrimarySampleTypeGroup, v))
}

// PrimarySampleTypeGroupLTE applies the LTE predicate on the "primary_sample_type_group" field.
func PrimarySampleTypeGroupLTE(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldLTE(FieldPrimarySampleTypeGroup, v))
}

// PrimarySampleTypeGroupContains applies the Contains predicate on the "primary_sample_type_group" field.
func PrimarySampleTypeGroupContains(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldContains(FieldPrimarySampleTypeGroup, v))
}

// PrimarySampleTypeGroupHasPrefix applies the HasPrefix predicate on the "primary_sample_type_group" field.
func PrimarySampleTypeGroupHasPrefix(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldHasPrefix(FieldPrimarySampleTypeGroup, v))
}

// PrimarySampleTypeGroupHasSuffix applies the HasSuffix predicate on the "primary_sample_type_group" field.
func PrimarySampleTypeGroupHasSuffix(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldHasSuffix(FieldPrimarySampleTypeGroup, v))
}

// PrimarySampleTypeGroupEqualFold applies the EqualFold predicate on the "primary_sample_type_group" field.
func PrimarySampleTypeGroupEqualFold(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldEqualFold(FieldPrimarySampleTypeGroup, v))
}

// PrimarySampleTypeGroupContainsFold applies the ContainsFold predicate on the "primary_sample_type_group" field.
func PrimarySampleTypeGroupContainsFold(v string) predicate.SampleType {
	return predicate.SampleType(sql.FieldContainsFold(FieldPrimarySampleTypeGroup, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.SampleType {
	return predicate.SampleType(sql.FieldNEQ(FieldIsActive, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldLTE(FieldCreatedTime, v))
}

// UpdatedTimeEQ applies the EQ predicate on the "updated_time" field.
func UpdatedTimeEQ(v time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedTimeNEQ applies the NEQ predicate on the "updated_time" field.
func UpdatedTimeNEQ(v time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldNEQ(FieldUpdatedTime, v))
}

// UpdatedTimeIn applies the In predicate on the "updated_time" field.
func UpdatedTimeIn(vs ...time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeNotIn applies the NotIn predicate on the "updated_time" field.
func UpdatedTimeNotIn(vs ...time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldNotIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeGT applies the GT predicate on the "updated_time" field.
func UpdatedTimeGT(v time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldGT(FieldUpdatedTime, v))
}

// UpdatedTimeGTE applies the GTE predicate on the "updated_time" field.
func UpdatedTimeGTE(v time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldGTE(FieldUpdatedTime, v))
}

// UpdatedTimeLT applies the LT predicate on the "updated_time" field.
func UpdatedTimeLT(v time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldLT(FieldUpdatedTime, v))
}

// UpdatedTimeLTE applies the LTE predicate on the "updated_time" field.
func UpdatedTimeLTE(v time.Time) predicate.SampleType {
	return predicate.SampleType(sql.FieldLTE(FieldUpdatedTime, v))
}

// UpdatedTimeIsNil applies the IsNil predicate on the "updated_time" field.
func UpdatedTimeIsNil() predicate.SampleType {
	return predicate.SampleType(sql.FieldIsNull(FieldUpdatedTime))
}

// UpdatedTimeNotNil applies the NotNil predicate on the "updated_time" field.
func UpdatedTimeNotNil() predicate.SampleType {
	return predicate.SampleType(sql.FieldNotNull(FieldUpdatedTime))
}

// HasTubeTypes applies the HasEdge predicate on the "tube_types" edge.
func HasTubeTypes() predicate.SampleType {
	return predicate.SampleType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TubeTypesTable, TubeTypesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTubeTypesWith applies the HasEdge predicate on the "tube_types" edge with a given conditions (other predicates).
func HasTubeTypesWith(preds ...predicate.TubeType) predicate.SampleType {
	return predicate.SampleType(func(s *sql.Selector) {
		step := newTubeTypesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTests applies the HasEdge predicate on the "tests" edge.
func HasTests() predicate.SampleType {
	return predicate.SampleType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TestsTable, TestsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestsWith applies the HasEdge predicate on the "tests" edge with a given conditions (other predicates).
func HasTestsWith(preds ...predicate.Test) predicate.SampleType {
	return predicate.SampleType(func(s *sql.Selector) {
		step := newTestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SampleType) predicate.SampleType {
	return predicate.SampleType(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SampleType) predicate.SampleType {
	return predicate.SampleType(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SampleType) predicate.SampleType {
	return predicate.SampleType(sql.NotPredicates(p))
}
