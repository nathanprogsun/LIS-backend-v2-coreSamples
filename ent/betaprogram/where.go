// Code generated by ent, DO NOT EDIT.

package betaprogram

import (
	"coresamples/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldLTE(FieldID, id))
}

// BetaProgramName applies equality check predicate on the "beta_program_name" field. It's identical to BetaProgramNameEQ.
func BetaProgramName(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldBetaProgramName, v))
}

// BetaProgramDescription applies equality check predicate on the "beta_program_description" field. It's identical to BetaProgramDescriptionEQ.
func BetaProgramDescription(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldBetaProgramDescription, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldIsActive, v))
}

// BetaProgramStartTime applies equality check predicate on the "beta_program_start_time" field. It's identical to BetaProgramStartTimeEQ.
func BetaProgramStartTime(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldBetaProgramStartTime, v))
}

// BetaProgramEndTime applies equality check predicate on the "beta_program_end_time" field. It's identical to BetaProgramEndTimeEQ.
func BetaProgramEndTime(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldBetaProgramEndTime, v))
}

// UpdatedTime applies equality check predicate on the "updated_time" field. It's identical to UpdatedTimeEQ.
func UpdatedTime(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldUpdatedTime, v))
}

// BetaProgramAddedOn applies equality check predicate on the "beta_program_added_on" field. It's identical to BetaProgramAddedOnEQ.
func BetaProgramAddedOn(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldBetaProgramAddedOn, v))
}

// AllowSelfSignup applies equality check predicate on the "allow_self_signup" field. It's identical to AllowSelfSignupEQ.
func AllowSelfSignup(v bool) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldAllowSelfSignup, v))
}

// BetaProgramNameEQ applies the EQ predicate on the "beta_program_name" field.
func BetaProgramNameEQ(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldBetaProgramName, v))
}

// BetaProgramNameNEQ applies the NEQ predicate on the "beta_program_name" field.
func BetaProgramNameNEQ(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNEQ(FieldBetaProgramName, v))
}

// BetaProgramNameIn applies the In predicate on the "beta_program_name" field.
func BetaProgramNameIn(vs ...string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldIn(FieldBetaProgramName, vs...))
}

// BetaProgramNameNotIn applies the NotIn predicate on the "beta_program_name" field.
func BetaProgramNameNotIn(vs ...string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNotIn(FieldBetaProgramName, vs...))
}

// BetaProgramNameGT applies the GT predicate on the "beta_program_name" field.
func BetaProgramNameGT(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldGT(FieldBetaProgramName, v))
}

// BetaProgramNameGTE applies the GTE predicate on the "beta_program_name" field.
func BetaProgramNameGTE(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldGTE(FieldBetaProgramName, v))
}

// BetaProgramNameLT applies the LT predicate on the "beta_program_name" field.
func BetaProgramNameLT(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldLT(FieldBetaProgramName, v))
}

// BetaProgramNameLTE applies the LTE predicate on the "beta_program_name" field.
func BetaProgramNameLTE(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldLTE(FieldBetaProgramName, v))
}

// BetaProgramNameContains applies the Contains predicate on the "beta_program_name" field.
func BetaProgramNameContains(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldContains(FieldBetaProgramName, v))
}

// BetaProgramNameHasPrefix applies the HasPrefix predicate on the "beta_program_name" field.
func BetaProgramNameHasPrefix(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldHasPrefix(FieldBetaProgramName, v))
}

// BetaProgramNameHasSuffix applies the HasSuffix predicate on the "beta_program_name" field.
func BetaProgramNameHasSuffix(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldHasSuffix(FieldBetaProgramName, v))
}

// BetaProgramNameEqualFold applies the EqualFold predicate on the "beta_program_name" field.
func BetaProgramNameEqualFold(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEqualFold(FieldBetaProgramName, v))
}

// BetaProgramNameContainsFold applies the ContainsFold predicate on the "beta_program_name" field.
func BetaProgramNameContainsFold(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldContainsFold(FieldBetaProgramName, v))
}

// BetaProgramDescriptionEQ applies the EQ predicate on the "beta_program_description" field.
func BetaProgramDescriptionEQ(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldBetaProgramDescription, v))
}

// BetaProgramDescriptionNEQ applies the NEQ predicate on the "beta_program_description" field.
func BetaProgramDescriptionNEQ(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNEQ(FieldBetaProgramDescription, v))
}

// BetaProgramDescriptionIn applies the In predicate on the "beta_program_description" field.
func BetaProgramDescriptionIn(vs ...string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldIn(FieldBetaProgramDescription, vs...))
}

// BetaProgramDescriptionNotIn applies the NotIn predicate on the "beta_program_description" field.
func BetaProgramDescriptionNotIn(vs ...string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNotIn(FieldBetaProgramDescription, vs...))
}

// BetaProgramDescriptionGT applies the GT predicate on the "beta_program_description" field.
func BetaProgramDescriptionGT(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldGT(FieldBetaProgramDescription, v))
}

// BetaProgramDescriptionGTE applies the GTE predicate on the "beta_program_description" field.
func BetaProgramDescriptionGTE(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldGTE(FieldBetaProgramDescription, v))
}

// BetaProgramDescriptionLT applies the LT predicate on the "beta_program_description" field.
func BetaProgramDescriptionLT(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldLT(FieldBetaProgramDescription, v))
}

// BetaProgramDescriptionLTE applies the LTE predicate on the "beta_program_description" field.
func BetaProgramDescriptionLTE(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldLTE(FieldBetaProgramDescription, v))
}

// BetaProgramDescriptionContains applies the Contains predicate on the "beta_program_description" field.
func BetaProgramDescriptionContains(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldContains(FieldBetaProgramDescription, v))
}

// BetaProgramDescriptionHasPrefix applies the HasPrefix predicate on the "beta_program_description" field.
func BetaProgramDescriptionHasPrefix(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldHasPrefix(FieldBetaProgramDescription, v))
}

// BetaProgramDescriptionHasSuffix applies the HasSuffix predicate on the "beta_program_description" field.
func BetaProgramDescriptionHasSuffix(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldHasSuffix(FieldBetaProgramDescription, v))
}

// BetaProgramDescriptionEqualFold applies the EqualFold predicate on the "beta_program_description" field.
func BetaProgramDescriptionEqualFold(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEqualFold(FieldBetaProgramDescription, v))
}

// BetaProgramDescriptionContainsFold applies the ContainsFold predicate on the "beta_program_description" field.
func BetaProgramDescriptionContainsFold(v string) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldContainsFold(FieldBetaProgramDescription, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNEQ(FieldIsActive, v))
}

// BetaProgramStartTimeEQ applies the EQ predicate on the "beta_program_start_time" field.
func BetaProgramStartTimeEQ(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldBetaProgramStartTime, v))
}

// BetaProgramStartTimeNEQ applies the NEQ predicate on the "beta_program_start_time" field.
func BetaProgramStartTimeNEQ(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNEQ(FieldBetaProgramStartTime, v))
}

// BetaProgramStartTimeIn applies the In predicate on the "beta_program_start_time" field.
func BetaProgramStartTimeIn(vs ...time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldIn(FieldBetaProgramStartTime, vs...))
}

// BetaProgramStartTimeNotIn applies the NotIn predicate on the "beta_program_start_time" field.
func BetaProgramStartTimeNotIn(vs ...time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNotIn(FieldBetaProgramStartTime, vs...))
}

// BetaProgramStartTimeGT applies the GT predicate on the "beta_program_start_time" field.
func BetaProgramStartTimeGT(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldGT(FieldBetaProgramStartTime, v))
}

// BetaProgramStartTimeGTE applies the GTE predicate on the "beta_program_start_time" field.
func BetaProgramStartTimeGTE(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldGTE(FieldBetaProgramStartTime, v))
}

// BetaProgramStartTimeLT applies the LT predicate on the "beta_program_start_time" field.
func BetaProgramStartTimeLT(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldLT(FieldBetaProgramStartTime, v))
}

// BetaProgramStartTimeLTE applies the LTE predicate on the "beta_program_start_time" field.
func BetaProgramStartTimeLTE(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldLTE(FieldBetaProgramStartTime, v))
}

// BetaProgramEndTimeEQ applies the EQ predicate on the "beta_program_end_time" field.
func BetaProgramEndTimeEQ(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldBetaProgramEndTime, v))
}

// BetaProgramEndTimeNEQ applies the NEQ predicate on the "beta_program_end_time" field.
func BetaProgramEndTimeNEQ(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNEQ(FieldBetaProgramEndTime, v))
}

// BetaProgramEndTimeIn applies the In predicate on the "beta_program_end_time" field.
func BetaProgramEndTimeIn(vs ...time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldIn(FieldBetaProgramEndTime, vs...))
}

// BetaProgramEndTimeNotIn applies the NotIn predicate on the "beta_program_end_time" field.
func BetaProgramEndTimeNotIn(vs ...time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNotIn(FieldBetaProgramEndTime, vs...))
}

// BetaProgramEndTimeGT applies the GT predicate on the "beta_program_end_time" field.
func BetaProgramEndTimeGT(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldGT(FieldBetaProgramEndTime, v))
}

// BetaProgramEndTimeGTE applies the GTE predicate on the "beta_program_end_time" field.
func BetaProgramEndTimeGTE(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldGTE(FieldBetaProgramEndTime, v))
}

// BetaProgramEndTimeLT applies the LT predicate on the "beta_program_end_time" field.
func BetaProgramEndTimeLT(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldLT(FieldBetaProgramEndTime, v))
}

// BetaProgramEndTimeLTE applies the LTE predicate on the "beta_program_end_time" field.
func BetaProgramEndTimeLTE(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldLTE(FieldBetaProgramEndTime, v))
}

// BetaProgramEndTimeIsNil applies the IsNil predicate on the "beta_program_end_time" field.
func BetaProgramEndTimeIsNil() predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldIsNull(FieldBetaProgramEndTime))
}

// BetaProgramEndTimeNotNil applies the NotNil predicate on the "beta_program_end_time" field.
func BetaProgramEndTimeNotNil() predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNotNull(FieldBetaProgramEndTime))
}

// UpdatedTimeEQ applies the EQ predicate on the "updated_time" field.
func UpdatedTimeEQ(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedTimeNEQ applies the NEQ predicate on the "updated_time" field.
func UpdatedTimeNEQ(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNEQ(FieldUpdatedTime, v))
}

// UpdatedTimeIn applies the In predicate on the "updated_time" field.
func UpdatedTimeIn(vs ...time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeNotIn applies the NotIn predicate on the "updated_time" field.
func UpdatedTimeNotIn(vs ...time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNotIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeGT applies the GT predicate on the "updated_time" field.
func UpdatedTimeGT(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldGT(FieldUpdatedTime, v))
}

// UpdatedTimeGTE applies the GTE predicate on the "updated_time" field.
func UpdatedTimeGTE(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldGTE(FieldUpdatedTime, v))
}

// UpdatedTimeLT applies the LT predicate on the "updated_time" field.
func UpdatedTimeLT(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldLT(FieldUpdatedTime, v))
}

// UpdatedTimeLTE applies the LTE predicate on the "updated_time" field.
func UpdatedTimeLTE(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldLTE(FieldUpdatedTime, v))
}

// BetaProgramAddedOnEQ applies the EQ predicate on the "beta_program_added_on" field.
func BetaProgramAddedOnEQ(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldBetaProgramAddedOn, v))
}

// BetaProgramAddedOnNEQ applies the NEQ predicate on the "beta_program_added_on" field.
func BetaProgramAddedOnNEQ(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNEQ(FieldBetaProgramAddedOn, v))
}

// BetaProgramAddedOnIn applies the In predicate on the "beta_program_added_on" field.
func BetaProgramAddedOnIn(vs ...time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldIn(FieldBetaProgramAddedOn, vs...))
}

// BetaProgramAddedOnNotIn applies the NotIn predicate on the "beta_program_added_on" field.
func BetaProgramAddedOnNotIn(vs ...time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNotIn(FieldBetaProgramAddedOn, vs...))
}

// BetaProgramAddedOnGT applies the GT predicate on the "beta_program_added_on" field.
func BetaProgramAddedOnGT(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldGT(FieldBetaProgramAddedOn, v))
}

// BetaProgramAddedOnGTE applies the GTE predicate on the "beta_program_added_on" field.
func BetaProgramAddedOnGTE(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldGTE(FieldBetaProgramAddedOn, v))
}

// BetaProgramAddedOnLT applies the LT predicate on the "beta_program_added_on" field.
func BetaProgramAddedOnLT(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldLT(FieldBetaProgramAddedOn, v))
}

// BetaProgramAddedOnLTE applies the LTE predicate on the "beta_program_added_on" field.
func BetaProgramAddedOnLTE(v time.Time) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldLTE(FieldBetaProgramAddedOn, v))
}

// BetaProgramAddedOnIsNil applies the IsNil predicate on the "beta_program_added_on" field.
func BetaProgramAddedOnIsNil() predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldIsNull(FieldBetaProgramAddedOn))
}

// BetaProgramAddedOnNotNil applies the NotNil predicate on the "beta_program_added_on" field.
func BetaProgramAddedOnNotNil() predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNotNull(FieldBetaProgramAddedOn))
}

// AllowSelfSignupEQ applies the EQ predicate on the "allow_self_signup" field.
func AllowSelfSignupEQ(v bool) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldEQ(FieldAllowSelfSignup, v))
}

// AllowSelfSignupNEQ applies the NEQ predicate on the "allow_self_signup" field.
func AllowSelfSignupNEQ(v bool) predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNEQ(FieldAllowSelfSignup, v))
}

// AllowSelfSignupIsNil applies the IsNil predicate on the "allow_self_signup" field.
func AllowSelfSignupIsNil() predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldIsNull(FieldAllowSelfSignup))
}

// AllowSelfSignupNotNil applies the NotNil predicate on the "allow_self_signup" field.
func AllowSelfSignupNotNil() predicate.BetaProgram {
	return predicate.BetaProgram(sql.FieldNotNull(FieldAllowSelfSignup))
}

// HasParticipations applies the HasEdge predicate on the "participations" edge.
func HasParticipations() predicate.BetaProgram {
	return predicate.BetaProgram(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ParticipationsTable, ParticipationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParticipationsWith applies the HasEdge predicate on the "participations" edge with a given conditions (other predicates).
func HasParticipationsWith(preds ...predicate.BetaProgramParticipation) predicate.BetaProgram {
	return predicate.BetaProgram(func(s *sql.Selector) {
		step := newParticipationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BetaProgram) predicate.BetaProgram {
	return predicate.BetaProgram(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BetaProgram) predicate.BetaProgram {
	return predicate.BetaProgram(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BetaProgram) predicate.BetaProgram {
	return predicate.BetaProgram(sql.NotPredicates(p))
}
