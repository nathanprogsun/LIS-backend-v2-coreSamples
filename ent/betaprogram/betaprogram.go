// Code generated by ent, DO NOT EDIT.

package betaprogram

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the betaprogram type in the database.
	Label = "beta_program"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "beta_program_id"
	// FieldBetaProgramName holds the string denoting the beta_program_name field in the database.
	FieldBetaProgramName = "beta_program_name"
	// FieldBetaProgramDescription holds the string denoting the beta_program_description field in the database.
	FieldBetaProgramDescription = "beta_program_description"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldBetaProgramStartTime holds the string denoting the beta_program_start_time field in the database.
	FieldBetaProgramStartTime = "beta_program_start_time"
	// FieldBetaProgramEndTime holds the string denoting the beta_program_end_time field in the database.
	FieldBetaProgramEndTime = "beta_program_end_time"
	// FieldUpdatedTime holds the string denoting the updated_time field in the database.
	FieldUpdatedTime = "updated_time"
	// FieldBetaProgramAddedOn holds the string denoting the beta_program_added_on field in the database.
	FieldBetaProgramAddedOn = "beta_program_added_on"
	// FieldAllowSelfSignup holds the string denoting the allow_self_signup field in the database.
	FieldAllowSelfSignup = "allow_self_signup"
	// EdgeParticipations holds the string denoting the participations edge name in mutations.
	EdgeParticipations = "participations"
	// BetaProgramParticipationFieldID holds the string denoting the ID field of the BetaProgramParticipation.
	BetaProgramParticipationFieldID = "id"
	// Table holds the table name of the betaprogram in the database.
	Table = "beta_programs"
	// ParticipationsTable is the table that holds the participations relation/edge.
	ParticipationsTable = "beta_program_participations"
	// ParticipationsInverseTable is the table name for the BetaProgramParticipation entity.
	// It exists in this package in order to avoid circular dependency with the "betaprogramparticipation" package.
	ParticipationsInverseTable = "beta_program_participations"
	// ParticipationsColumn is the table column denoting the participations relation/edge.
	ParticipationsColumn = "beta_program_id"
)

// Columns holds all SQL columns for betaprogram fields.
var Columns = []string{
	FieldID,
	FieldBetaProgramName,
	FieldBetaProgramDescription,
	FieldIsActive,
	FieldBetaProgramStartTime,
	FieldBetaProgramEndTime,
	FieldUpdatedTime,
	FieldBetaProgramAddedOn,
	FieldAllowSelfSignup,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultBetaProgramStartTime holds the default value on creation for the "beta_program_start_time" field.
	DefaultBetaProgramStartTime func() time.Time
	// UpdateDefaultUpdatedTime holds the default value on update for the "updated_time" field.
	UpdateDefaultUpdatedTime func() time.Time
	// DefaultBetaProgramAddedOn holds the default value on creation for the "beta_program_added_on" field.
	DefaultBetaProgramAddedOn func() time.Time
	// DefaultAllowSelfSignup holds the default value on creation for the "allow_self_signup" field.
	DefaultAllowSelfSignup bool
)

// OrderOption defines the ordering options for the BetaProgram queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBetaProgramName orders the results by the beta_program_name field.
func ByBetaProgramName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBetaProgramName, opts...).ToFunc()
}

// ByBetaProgramDescription orders the results by the beta_program_description field.
func ByBetaProgramDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBetaProgramDescription, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByBetaProgramStartTime orders the results by the beta_program_start_time field.
func ByBetaProgramStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBetaProgramStartTime, opts...).ToFunc()
}

// ByBetaProgramEndTime orders the results by the beta_program_end_time field.
func ByBetaProgramEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBetaProgramEndTime, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the updated_time field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}

// ByBetaProgramAddedOn orders the results by the beta_program_added_on field.
func ByBetaProgramAddedOn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBetaProgramAddedOn, opts...).ToFunc()
}

// ByAllowSelfSignup orders the results by the allow_self_signup field.
func ByAllowSelfSignup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowSelfSignup, opts...).ToFunc()
}

// ByParticipationsCount orders the results by participations count.
func ByParticipationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParticipationsStep(), opts...)
	}
}

// ByParticipations orders the results by participations terms.
func ByParticipations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParticipationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newParticipationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParticipationsInverseTable, BetaProgramParticipationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ParticipationsTable, ParticipationsColumn),
	)
}
