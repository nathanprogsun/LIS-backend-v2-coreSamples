// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/clinic"
	"coresamples/ent/customersettingonclinics"
	"coresamples/ent/internaluser"
	"coresamples/ent/patient"
	"coresamples/ent/setting"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SettingCreate is the builder for creating a Setting entity.
type SettingCreate struct {
	config
	mutation *SettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSettingName sets the "setting_name" field.
func (sc *SettingCreate) SetSettingName(s string) *SettingCreate {
	sc.mutation.SetSettingName(s)
	return sc
}

// SetSettingGroup sets the "setting_group" field.
func (sc *SettingCreate) SetSettingGroup(s string) *SettingCreate {
	sc.mutation.SetSettingGroup(s)
	return sc
}

// SetNillableSettingGroup sets the "setting_group" field if the given value is not nil.
func (sc *SettingCreate) SetNillableSettingGroup(s *string) *SettingCreate {
	if s != nil {
		sc.SetSettingGroup(*s)
	}
	return sc
}

// SetSettingDescription sets the "setting_description" field.
func (sc *SettingCreate) SetSettingDescription(s string) *SettingCreate {
	sc.mutation.SetSettingDescription(s)
	return sc
}

// SetSettingValue sets the "setting_value" field.
func (sc *SettingCreate) SetSettingValue(s string) *SettingCreate {
	sc.mutation.SetSettingValue(s)
	return sc
}

// SetNillableSettingValue sets the "setting_value" field if the given value is not nil.
func (sc *SettingCreate) SetNillableSettingValue(s *string) *SettingCreate {
	if s != nil {
		sc.SetSettingValue(*s)
	}
	return sc
}

// SetSettingType sets the "setting_type" field.
func (sc *SettingCreate) SetSettingType(s string) *SettingCreate {
	sc.mutation.SetSettingType(s)
	return sc
}

// SetSettingValueUpdatedTime sets the "setting_value_updated_time" field.
func (sc *SettingCreate) SetSettingValueUpdatedTime(t time.Time) *SettingCreate {
	sc.mutation.SetSettingValueUpdatedTime(t)
	return sc
}

// SetNillableSettingValueUpdatedTime sets the "setting_value_updated_time" field if the given value is not nil.
func (sc *SettingCreate) SetNillableSettingValueUpdatedTime(t *time.Time) *SettingCreate {
	if t != nil {
		sc.SetSettingValueUpdatedTime(*t)
	}
	return sc
}

// SetIsActive sets the "is_active" field.
func (sc *SettingCreate) SetIsActive(b bool) *SettingCreate {
	sc.mutation.SetIsActive(b)
	return sc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sc *SettingCreate) SetNillableIsActive(b *bool) *SettingCreate {
	if b != nil {
		sc.SetIsActive(*b)
	}
	return sc
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (sc *SettingCreate) SetApplyToAllGroupMember(b bool) *SettingCreate {
	sc.mutation.SetApplyToAllGroupMember(b)
	return sc
}

// SetNillableApplyToAllGroupMember sets the "apply_to_all_group_member" field if the given value is not nil.
func (sc *SettingCreate) SetNillableApplyToAllGroupMember(b *bool) *SettingCreate {
	if b != nil {
		sc.SetApplyToAllGroupMember(*b)
	}
	return sc
}

// SetIsOfficial sets the "is_official" field.
func (sc *SettingCreate) SetIsOfficial(b bool) *SettingCreate {
	sc.mutation.SetIsOfficial(b)
	return sc
}

// SetNillableIsOfficial sets the "is_official" field if the given value is not nil.
func (sc *SettingCreate) SetNillableIsOfficial(b *bool) *SettingCreate {
	if b != nil {
		sc.SetIsOfficial(*b)
	}
	return sc
}

// SetSettingLevel sets the "setting_level" field.
func (sc *SettingCreate) SetSettingLevel(i int) *SettingCreate {
	sc.mutation.SetSettingLevel(i)
	return sc
}

// SetNillableSettingLevel sets the "setting_level" field if the given value is not nil.
func (sc *SettingCreate) SetNillableSettingLevel(i *int) *SettingCreate {
	if i != nil {
		sc.SetSettingLevel(*i)
	}
	return sc
}

// SetSettingLevelName sets the "setting_level_name" field.
func (sc *SettingCreate) SetSettingLevelName(s string) *SettingCreate {
	sc.mutation.SetSettingLevelName(s)
	return sc
}

// SetNillableSettingLevelName sets the "setting_level_name" field if the given value is not nil.
func (sc *SettingCreate) SetNillableSettingLevelName(s *string) *SettingCreate {
	if s != nil {
		sc.SetSettingLevelName(*s)
	}
	return sc
}

// SetUseGroupSetting sets the "use_group_setting" field.
func (sc *SettingCreate) SetUseGroupSetting(b bool) *SettingCreate {
	sc.mutation.SetUseGroupSetting(b)
	return sc
}

// SetNillableUseGroupSetting sets the "use_group_setting" field if the given value is not nil.
func (sc *SettingCreate) SetNillableUseGroupSetting(b *bool) *SettingCreate {
	if b != nil {
		sc.SetUseGroupSetting(*b)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SettingCreate) SetID(i int) *SettingCreate {
	sc.mutation.SetID(i)
	return sc
}

// AddClinicIDs adds the "clinics" edge to the Clinic entity by IDs.
func (sc *SettingCreate) AddClinicIDs(ids ...int) *SettingCreate {
	sc.mutation.AddClinicIDs(ids...)
	return sc
}

// AddClinics adds the "clinics" edges to the Clinic entity.
func (sc *SettingCreate) AddClinics(c ...*Clinic) *SettingCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddClinicIDs(ids...)
}

// AddInternalUserIDs adds the "internal_users" edge to the InternalUser entity by IDs.
func (sc *SettingCreate) AddInternalUserIDs(ids ...int) *SettingCreate {
	sc.mutation.AddInternalUserIDs(ids...)
	return sc
}

// AddInternalUsers adds the "internal_users" edges to the InternalUser entity.
func (sc *SettingCreate) AddInternalUsers(i ...*InternalUser) *SettingCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return sc.AddInternalUserIDs(ids...)
}

// AddPatientIDs adds the "patients" edge to the Patient entity by IDs.
func (sc *SettingCreate) AddPatientIDs(ids ...int) *SettingCreate {
	sc.mutation.AddPatientIDs(ids...)
	return sc
}

// AddPatients adds the "patients" edges to the Patient entity.
func (sc *SettingCreate) AddPatients(p ...*Patient) *SettingCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddPatientIDs(ids...)
}

// AddClinicCustomerIDs adds the "clinic_customers" edge to the CustomerSettingOnClinics entity by IDs.
func (sc *SettingCreate) AddClinicCustomerIDs(ids ...int) *SettingCreate {
	sc.mutation.AddClinicCustomerIDs(ids...)
	return sc
}

// AddClinicCustomers adds the "clinic_customers" edges to the CustomerSettingOnClinics entity.
func (sc *SettingCreate) AddClinicCustomers(c ...*CustomerSettingOnClinics) *SettingCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddClinicCustomerIDs(ids...)
}

// Mutation returns the SettingMutation object of the builder.
func (sc *SettingCreate) Mutation() *SettingMutation {
	return sc.mutation
}

// Save creates the Setting in the database.
func (sc *SettingCreate) Save(ctx context.Context) (*Setting, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SettingCreate) SaveX(ctx context.Context) *Setting {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SettingCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SettingCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SettingCreate) defaults() {
	if _, ok := sc.mutation.SettingGroup(); !ok {
		v := setting.DefaultSettingGroup
		sc.mutation.SetSettingGroup(v)
	}
	if _, ok := sc.mutation.SettingValueUpdatedTime(); !ok {
		v := setting.DefaultSettingValueUpdatedTime()
		sc.mutation.SetSettingValueUpdatedTime(v)
	}
	if _, ok := sc.mutation.IsActive(); !ok {
		v := setting.DefaultIsActive
		sc.mutation.SetIsActive(v)
	}
	if _, ok := sc.mutation.ApplyToAllGroupMember(); !ok {
		v := setting.DefaultApplyToAllGroupMember
		sc.mutation.SetApplyToAllGroupMember(v)
	}
	if _, ok := sc.mutation.IsOfficial(); !ok {
		v := setting.DefaultIsOfficial
		sc.mutation.SetIsOfficial(v)
	}
	if _, ok := sc.mutation.SettingLevel(); !ok {
		v := setting.DefaultSettingLevel
		sc.mutation.SetSettingLevel(v)
	}
	if _, ok := sc.mutation.SettingLevelName(); !ok {
		v := setting.DefaultSettingLevelName
		sc.mutation.SetSettingLevelName(v)
	}
	if _, ok := sc.mutation.UseGroupSetting(); !ok {
		v := setting.DefaultUseGroupSetting
		sc.mutation.SetUseGroupSetting(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SettingCreate) check() error {
	if _, ok := sc.mutation.SettingName(); !ok {
		return &ValidationError{Name: "setting_name", err: errors.New(`ent: missing required field "Setting.setting_name"`)}
	}
	if _, ok := sc.mutation.SettingGroup(); !ok {
		return &ValidationError{Name: "setting_group", err: errors.New(`ent: missing required field "Setting.setting_group"`)}
	}
	if _, ok := sc.mutation.SettingDescription(); !ok {
		return &ValidationError{Name: "setting_description", err: errors.New(`ent: missing required field "Setting.setting_description"`)}
	}
	if _, ok := sc.mutation.SettingType(); !ok {
		return &ValidationError{Name: "setting_type", err: errors.New(`ent: missing required field "Setting.setting_type"`)}
	}
	if _, ok := sc.mutation.SettingValueUpdatedTime(); !ok {
		return &ValidationError{Name: "setting_value_updated_time", err: errors.New(`ent: missing required field "Setting.setting_value_updated_time"`)}
	}
	if _, ok := sc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Setting.is_active"`)}
	}
	if _, ok := sc.mutation.ApplyToAllGroupMember(); !ok {
		return &ValidationError{Name: "apply_to_all_group_member", err: errors.New(`ent: missing required field "Setting.apply_to_all_group_member"`)}
	}
	if _, ok := sc.mutation.IsOfficial(); !ok {
		return &ValidationError{Name: "is_official", err: errors.New(`ent: missing required field "Setting.is_official"`)}
	}
	if _, ok := sc.mutation.SettingLevel(); !ok {
		return &ValidationError{Name: "setting_level", err: errors.New(`ent: missing required field "Setting.setting_level"`)}
	}
	if _, ok := sc.mutation.SettingLevelName(); !ok {
		return &ValidationError{Name: "setting_level_name", err: errors.New(`ent: missing required field "Setting.setting_level_name"`)}
	}
	if _, ok := sc.mutation.UseGroupSetting(); !ok {
		return &ValidationError{Name: "use_group_setting", err: errors.New(`ent: missing required field "Setting.use_group_setting"`)}
	}
	return nil
}

func (sc *SettingCreate) sqlSave(ctx context.Context) (*Setting, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SettingCreate) createSpec() (*Setting, *sqlgraph.CreateSpec) {
	var (
		_node = &Setting{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(setting.Table, sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.SettingName(); ok {
		_spec.SetField(setting.FieldSettingName, field.TypeString, value)
		_node.SettingName = value
	}
	if value, ok := sc.mutation.SettingGroup(); ok {
		_spec.SetField(setting.FieldSettingGroup, field.TypeString, value)
		_node.SettingGroup = value
	}
	if value, ok := sc.mutation.SettingDescription(); ok {
		_spec.SetField(setting.FieldSettingDescription, field.TypeString, value)
		_node.SettingDescription = value
	}
	if value, ok := sc.mutation.SettingValue(); ok {
		_spec.SetField(setting.FieldSettingValue, field.TypeString, value)
		_node.SettingValue = value
	}
	if value, ok := sc.mutation.SettingType(); ok {
		_spec.SetField(setting.FieldSettingType, field.TypeString, value)
		_node.SettingType = value
	}
	if value, ok := sc.mutation.SettingValueUpdatedTime(); ok {
		_spec.SetField(setting.FieldSettingValueUpdatedTime, field.TypeTime, value)
		_node.SettingValueUpdatedTime = value
	}
	if value, ok := sc.mutation.IsActive(); ok {
		_spec.SetField(setting.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := sc.mutation.ApplyToAllGroupMember(); ok {
		_spec.SetField(setting.FieldApplyToAllGroupMember, field.TypeBool, value)
		_node.ApplyToAllGroupMember = value
	}
	if value, ok := sc.mutation.IsOfficial(); ok {
		_spec.SetField(setting.FieldIsOfficial, field.TypeBool, value)
		_node.IsOfficial = value
	}
	if value, ok := sc.mutation.SettingLevel(); ok {
		_spec.SetField(setting.FieldSettingLevel, field.TypeInt, value)
		_node.SettingLevel = value
	}
	if value, ok := sc.mutation.SettingLevelName(); ok {
		_spec.SetField(setting.FieldSettingLevelName, field.TypeString, value)
		_node.SettingLevelName = value
	}
	if value, ok := sc.mutation.UseGroupSetting(); ok {
		_spec.SetField(setting.FieldUseGroupSetting, field.TypeBool, value)
		_node.UseGroupSetting = value
	}
	if nodes := sc.mutation.ClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.ClinicsTable,
			Columns: setting.ClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.InternalUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.InternalUsersTable,
			Columns: setting.InternalUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.PatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   setting.PatientsTable,
			Columns: setting.PatientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ClinicCustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   setting.ClinicCustomersTable,
			Columns: []string{setting.ClinicCustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersettingonclinics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Setting.Create().
//		SetSettingName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SettingUpsert) {
//			SetSettingName(v+v).
//		}).
//		Exec(ctx)
func (sc *SettingCreate) OnConflict(opts ...sql.ConflictOption) *SettingUpsertOne {
	sc.conflict = opts
	return &SettingUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Setting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SettingCreate) OnConflictColumns(columns ...string) *SettingUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SettingUpsertOne{
		create: sc,
	}
}

type (
	// SettingUpsertOne is the builder for "upsert"-ing
	//  one Setting node.
	SettingUpsertOne struct {
		create *SettingCreate
	}

	// SettingUpsert is the "OnConflict" setter.
	SettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetSettingName sets the "setting_name" field.
func (u *SettingUpsert) SetSettingName(v string) *SettingUpsert {
	u.Set(setting.FieldSettingName, v)
	return u
}

// UpdateSettingName sets the "setting_name" field to the value that was provided on create.
func (u *SettingUpsert) UpdateSettingName() *SettingUpsert {
	u.SetExcluded(setting.FieldSettingName)
	return u
}

// SetSettingGroup sets the "setting_group" field.
func (u *SettingUpsert) SetSettingGroup(v string) *SettingUpsert {
	u.Set(setting.FieldSettingGroup, v)
	return u
}

// UpdateSettingGroup sets the "setting_group" field to the value that was provided on create.
func (u *SettingUpsert) UpdateSettingGroup() *SettingUpsert {
	u.SetExcluded(setting.FieldSettingGroup)
	return u
}

// SetSettingDescription sets the "setting_description" field.
func (u *SettingUpsert) SetSettingDescription(v string) *SettingUpsert {
	u.Set(setting.FieldSettingDescription, v)
	return u
}

// UpdateSettingDescription sets the "setting_description" field to the value that was provided on create.
func (u *SettingUpsert) UpdateSettingDescription() *SettingUpsert {
	u.SetExcluded(setting.FieldSettingDescription)
	return u
}

// SetSettingValue sets the "setting_value" field.
func (u *SettingUpsert) SetSettingValue(v string) *SettingUpsert {
	u.Set(setting.FieldSettingValue, v)
	return u
}

// UpdateSettingValue sets the "setting_value" field to the value that was provided on create.
func (u *SettingUpsert) UpdateSettingValue() *SettingUpsert {
	u.SetExcluded(setting.FieldSettingValue)
	return u
}

// ClearSettingValue clears the value of the "setting_value" field.
func (u *SettingUpsert) ClearSettingValue() *SettingUpsert {
	u.SetNull(setting.FieldSettingValue)
	return u
}

// SetSettingType sets the "setting_type" field.
func (u *SettingUpsert) SetSettingType(v string) *SettingUpsert {
	u.Set(setting.FieldSettingType, v)
	return u
}

// UpdateSettingType sets the "setting_type" field to the value that was provided on create.
func (u *SettingUpsert) UpdateSettingType() *SettingUpsert {
	u.SetExcluded(setting.FieldSettingType)
	return u
}

// SetSettingValueUpdatedTime sets the "setting_value_updated_time" field.
func (u *SettingUpsert) SetSettingValueUpdatedTime(v time.Time) *SettingUpsert {
	u.Set(setting.FieldSettingValueUpdatedTime, v)
	return u
}

// UpdateSettingValueUpdatedTime sets the "setting_value_updated_time" field to the value that was provided on create.
func (u *SettingUpsert) UpdateSettingValueUpdatedTime() *SettingUpsert {
	u.SetExcluded(setting.FieldSettingValueUpdatedTime)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *SettingUpsert) SetIsActive(v bool) *SettingUpsert {
	u.Set(setting.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SettingUpsert) UpdateIsActive() *SettingUpsert {
	u.SetExcluded(setting.FieldIsActive)
	return u
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (u *SettingUpsert) SetApplyToAllGroupMember(v bool) *SettingUpsert {
	u.Set(setting.FieldApplyToAllGroupMember, v)
	return u
}

// UpdateApplyToAllGroupMember sets the "apply_to_all_group_member" field to the value that was provided on create.
func (u *SettingUpsert) UpdateApplyToAllGroupMember() *SettingUpsert {
	u.SetExcluded(setting.FieldApplyToAllGroupMember)
	return u
}

// SetIsOfficial sets the "is_official" field.
func (u *SettingUpsert) SetIsOfficial(v bool) *SettingUpsert {
	u.Set(setting.FieldIsOfficial, v)
	return u
}

// UpdateIsOfficial sets the "is_official" field to the value that was provided on create.
func (u *SettingUpsert) UpdateIsOfficial() *SettingUpsert {
	u.SetExcluded(setting.FieldIsOfficial)
	return u
}

// SetSettingLevel sets the "setting_level" field.
func (u *SettingUpsert) SetSettingLevel(v int) *SettingUpsert {
	u.Set(setting.FieldSettingLevel, v)
	return u
}

// UpdateSettingLevel sets the "setting_level" field to the value that was provided on create.
func (u *SettingUpsert) UpdateSettingLevel() *SettingUpsert {
	u.SetExcluded(setting.FieldSettingLevel)
	return u
}

// AddSettingLevel adds v to the "setting_level" field.
func (u *SettingUpsert) AddSettingLevel(v int) *SettingUpsert {
	u.Add(setting.FieldSettingLevel, v)
	return u
}

// SetSettingLevelName sets the "setting_level_name" field.
func (u *SettingUpsert) SetSettingLevelName(v string) *SettingUpsert {
	u.Set(setting.FieldSettingLevelName, v)
	return u
}

// UpdateSettingLevelName sets the "setting_level_name" field to the value that was provided on create.
func (u *SettingUpsert) UpdateSettingLevelName() *SettingUpsert {
	u.SetExcluded(setting.FieldSettingLevelName)
	return u
}

// SetUseGroupSetting sets the "use_group_setting" field.
func (u *SettingUpsert) SetUseGroupSetting(v bool) *SettingUpsert {
	u.Set(setting.FieldUseGroupSetting, v)
	return u
}

// UpdateUseGroupSetting sets the "use_group_setting" field to the value that was provided on create.
func (u *SettingUpsert) UpdateUseGroupSetting() *SettingUpsert {
	u.SetExcluded(setting.FieldUseGroupSetting)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Setting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(setting.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SettingUpsertOne) UpdateNewValues() *SettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(setting.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Setting.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SettingUpsertOne) Ignore() *SettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SettingUpsertOne) DoNothing() *SettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SettingCreate.OnConflict
// documentation for more info.
func (u *SettingUpsertOne) Update(set func(*SettingUpsert)) *SettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetSettingName sets the "setting_name" field.
func (u *SettingUpsertOne) SetSettingName(v string) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetSettingName(v)
	})
}

// UpdateSettingName sets the "setting_name" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateSettingName() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSettingName()
	})
}

// SetSettingGroup sets the "setting_group" field.
func (u *SettingUpsertOne) SetSettingGroup(v string) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetSettingGroup(v)
	})
}

// UpdateSettingGroup sets the "setting_group" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateSettingGroup() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSettingGroup()
	})
}

// SetSettingDescription sets the "setting_description" field.
func (u *SettingUpsertOne) SetSettingDescription(v string) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetSettingDescription(v)
	})
}

// UpdateSettingDescription sets the "setting_description" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateSettingDescription() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSettingDescription()
	})
}

// SetSettingValue sets the "setting_value" field.
func (u *SettingUpsertOne) SetSettingValue(v string) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetSettingValue(v)
	})
}

// UpdateSettingValue sets the "setting_value" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateSettingValue() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSettingValue()
	})
}

// ClearSettingValue clears the value of the "setting_value" field.
func (u *SettingUpsertOne) ClearSettingValue() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearSettingValue()
	})
}

// SetSettingType sets the "setting_type" field.
func (u *SettingUpsertOne) SetSettingType(v string) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetSettingType(v)
	})
}

// UpdateSettingType sets the "setting_type" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateSettingType() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSettingType()
	})
}

// SetSettingValueUpdatedTime sets the "setting_value_updated_time" field.
func (u *SettingUpsertOne) SetSettingValueUpdatedTime(v time.Time) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetSettingValueUpdatedTime(v)
	})
}

// UpdateSettingValueUpdatedTime sets the "setting_value_updated_time" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateSettingValueUpdatedTime() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSettingValueUpdatedTime()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SettingUpsertOne) SetIsActive(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateIsActive() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateIsActive()
	})
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (u *SettingUpsertOne) SetApplyToAllGroupMember(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetApplyToAllGroupMember(v)
	})
}

// UpdateApplyToAllGroupMember sets the "apply_to_all_group_member" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateApplyToAllGroupMember() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateApplyToAllGroupMember()
	})
}

// SetIsOfficial sets the "is_official" field.
func (u *SettingUpsertOne) SetIsOfficial(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetIsOfficial(v)
	})
}

// UpdateIsOfficial sets the "is_official" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateIsOfficial() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateIsOfficial()
	})
}

// SetSettingLevel sets the "setting_level" field.
func (u *SettingUpsertOne) SetSettingLevel(v int) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetSettingLevel(v)
	})
}

// AddSettingLevel adds v to the "setting_level" field.
func (u *SettingUpsertOne) AddSettingLevel(v int) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.AddSettingLevel(v)
	})
}

// UpdateSettingLevel sets the "setting_level" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateSettingLevel() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSettingLevel()
	})
}

// SetSettingLevelName sets the "setting_level_name" field.
func (u *SettingUpsertOne) SetSettingLevelName(v string) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetSettingLevelName(v)
	})
}

// UpdateSettingLevelName sets the "setting_level_name" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateSettingLevelName() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSettingLevelName()
	})
}

// SetUseGroupSetting sets the "use_group_setting" field.
func (u *SettingUpsertOne) SetUseGroupSetting(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetUseGroupSetting(v)
	})
}

// UpdateUseGroupSetting sets the "use_group_setting" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateUseGroupSetting() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateUseGroupSetting()
	})
}

// Exec executes the query.
func (u *SettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SettingUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SettingUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SettingCreateBulk is the builder for creating many Setting entities in bulk.
type SettingCreateBulk struct {
	config
	err      error
	builders []*SettingCreate
	conflict []sql.ConflictOption
}

// Save creates the Setting entities in the database.
func (scb *SettingCreateBulk) Save(ctx context.Context) ([]*Setting, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Setting, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SettingCreateBulk) SaveX(ctx context.Context) []*Setting {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SettingCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SettingCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Setting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SettingUpsert) {
//			SetSettingName(v+v).
//		}).
//		Exec(ctx)
func (scb *SettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *SettingUpsertBulk {
	scb.conflict = opts
	return &SettingUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Setting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SettingCreateBulk) OnConflictColumns(columns ...string) *SettingUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SettingUpsertBulk{
		create: scb,
	}
}

// SettingUpsertBulk is the builder for "upsert"-ing
// a bulk of Setting nodes.
type SettingUpsertBulk struct {
	create *SettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Setting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(setting.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SettingUpsertBulk) UpdateNewValues() *SettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(setting.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Setting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SettingUpsertBulk) Ignore() *SettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SettingUpsertBulk) DoNothing() *SettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SettingCreateBulk.OnConflict
// documentation for more info.
func (u *SettingUpsertBulk) Update(set func(*SettingUpsert)) *SettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetSettingName sets the "setting_name" field.
func (u *SettingUpsertBulk) SetSettingName(v string) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetSettingName(v)
	})
}

// UpdateSettingName sets the "setting_name" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateSettingName() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSettingName()
	})
}

// SetSettingGroup sets the "setting_group" field.
func (u *SettingUpsertBulk) SetSettingGroup(v string) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetSettingGroup(v)
	})
}

// UpdateSettingGroup sets the "setting_group" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateSettingGroup() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSettingGroup()
	})
}

// SetSettingDescription sets the "setting_description" field.
func (u *SettingUpsertBulk) SetSettingDescription(v string) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetSettingDescription(v)
	})
}

// UpdateSettingDescription sets the "setting_description" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateSettingDescription() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSettingDescription()
	})
}

// SetSettingValue sets the "setting_value" field.
func (u *SettingUpsertBulk) SetSettingValue(v string) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetSettingValue(v)
	})
}

// UpdateSettingValue sets the "setting_value" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateSettingValue() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSettingValue()
	})
}

// ClearSettingValue clears the value of the "setting_value" field.
func (u *SettingUpsertBulk) ClearSettingValue() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearSettingValue()
	})
}

// SetSettingType sets the "setting_type" field.
func (u *SettingUpsertBulk) SetSettingType(v string) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetSettingType(v)
	})
}

// UpdateSettingType sets the "setting_type" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateSettingType() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSettingType()
	})
}

// SetSettingValueUpdatedTime sets the "setting_value_updated_time" field.
func (u *SettingUpsertBulk) SetSettingValueUpdatedTime(v time.Time) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetSettingValueUpdatedTime(v)
	})
}

// UpdateSettingValueUpdatedTime sets the "setting_value_updated_time" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateSettingValueUpdatedTime() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSettingValueUpdatedTime()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SettingUpsertBulk) SetIsActive(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateIsActive() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateIsActive()
	})
}

// SetApplyToAllGroupMember sets the "apply_to_all_group_member" field.
func (u *SettingUpsertBulk) SetApplyToAllGroupMember(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetApplyToAllGroupMember(v)
	})
}

// UpdateApplyToAllGroupMember sets the "apply_to_all_group_member" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateApplyToAllGroupMember() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateApplyToAllGroupMember()
	})
}

// SetIsOfficial sets the "is_official" field.
func (u *SettingUpsertBulk) SetIsOfficial(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetIsOfficial(v)
	})
}

// UpdateIsOfficial sets the "is_official" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateIsOfficial() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateIsOfficial()
	})
}

// SetSettingLevel sets the "setting_level" field.
func (u *SettingUpsertBulk) SetSettingLevel(v int) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetSettingLevel(v)
	})
}

// AddSettingLevel adds v to the "setting_level" field.
func (u *SettingUpsertBulk) AddSettingLevel(v int) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.AddSettingLevel(v)
	})
}

// UpdateSettingLevel sets the "setting_level" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateSettingLevel() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSettingLevel()
	})
}

// SetSettingLevelName sets the "setting_level_name" field.
func (u *SettingUpsertBulk) SetSettingLevelName(v string) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetSettingLevelName(v)
	})
}

// UpdateSettingLevelName sets the "setting_level_name" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateSettingLevelName() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSettingLevelName()
	})
}

// SetUseGroupSetting sets the "use_group_setting" field.
func (u *SettingUpsertBulk) SetUseGroupSetting(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetUseGroupSetting(v)
	})
}

// UpdateUseGroupSetting sets the "use_group_setting" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateUseGroupSetting() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateUseGroupSetting()
	})
}

// Exec executes the query.
func (u *SettingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
