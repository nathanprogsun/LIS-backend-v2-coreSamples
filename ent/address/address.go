// Code generated by ent, DO NOT EDIT.

package address

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the address type in the database.
	Label = "address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "address_id"
	// FieldAddressType holds the string denoting the address_type field in the database.
	FieldAddressType = "address_type"
	// FieldStreetAddress holds the string denoting the street_address field in the database.
	FieldStreetAddress = "street_address"
	// FieldAptPo holds the string denoting the apt_po field in the database.
	FieldAptPo = "apt_po"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldZipcode holds the string denoting the zipcode field in the database.
	FieldZipcode = "zipcode"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldAddressConfirmed holds the string denoting the address_confirmed field in the database.
	FieldAddressConfirmed = "address_confirmed"
	// FieldIsPrimaryAddress holds the string denoting the is_primary_address field in the database.
	FieldIsPrimaryAddress = "is_primary_address"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldPatientID holds the string denoting the patient_id field in the database.
	FieldPatientID = "patient_id"
	// FieldClinicID holds the string denoting the clinic_id field in the database.
	FieldClinicID = "clinic_id"
	// FieldInternalUserID holds the string denoting the internal_user_id field in the database.
	FieldInternalUserID = "internal_user_id"
	// FieldAddressLevel holds the string denoting the address_level field in the database.
	FieldAddressLevel = "address_level"
	// FieldAddressLevelName holds the string denoting the address_level_name field in the database.
	FieldAddressLevelName = "address_level_name"
	// FieldApplyToAllGroupMember holds the string denoting the apply_to_all_group_member field in the database.
	FieldApplyToAllGroupMember = "applyToAllGroupMember"
	// FieldGroupAddressID holds the string denoting the group_address_id field in the database.
	FieldGroupAddressID = "group_address_id"
	// FieldIsGroupAddress holds the string denoting the is_group_address field in the database.
	FieldIsGroupAddress = "isGroupAddress"
	// FieldUseAsDefaultCreateAddress holds the string denoting the use_as_default_create_address field in the database.
	FieldUseAsDefaultCreateAddress = "useAsDefaultCreateAddress"
	// FieldUseGroupAddress holds the string denoting the use_group_address field in the database.
	FieldUseGroupAddress = "useGroupAddress"
	// EdgeClinic holds the string denoting the clinic edge name in mutations.
	EdgeClinic = "clinic"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeCustomerClinicMappings holds the string denoting the customer_clinic_mappings edge name in mutations.
	EdgeCustomerClinicMappings = "customer_clinic_mappings"
	// EdgeMemberAddresses holds the string denoting the member_addresses edge name in mutations.
	EdgeMemberAddresses = "member_addresses"
	// EdgeGroupAddress holds the string denoting the group_address edge name in mutations.
	EdgeGroupAddress = "group_address"
	// EdgeInternalUser holds the string denoting the internal_user edge name in mutations.
	EdgeInternalUser = "internal_user"
	// EdgePatient holds the string denoting the patient edge name in mutations.
	EdgePatient = "patient"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// ClinicFieldID holds the string denoting the ID field of the Clinic.
	ClinicFieldID = "clinic_id"
	// CustomerFieldID holds the string denoting the ID field of the Customer.
	CustomerFieldID = "customer_id"
	// CustomerAddressOnClinicsFieldID holds the string denoting the ID field of the CustomerAddressOnClinics.
	CustomerAddressOnClinicsFieldID = "id"
	// InternalUserFieldID holds the string denoting the ID field of the InternalUser.
	InternalUserFieldID = "internal_user_id"
	// PatientFieldID holds the string denoting the ID field of the Patient.
	PatientFieldID = "patient_id"
	// OrderInfoFieldID holds the string denoting the ID field of the OrderInfo.
	OrderInfoFieldID = "order_id"
	// Table holds the table name of the address in the database.
	Table = "address"
	// ClinicTable is the table that holds the clinic relation/edge.
	ClinicTable = "address"
	// ClinicInverseTable is the table name for the Clinic entity.
	// It exists in this package in order to avoid circular dependency with the "clinic" package.
	ClinicInverseTable = "clinic"
	// ClinicColumn is the table column denoting the clinic relation/edge.
	ClinicColumn = "clinic_id"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "address"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customer"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_id"
	// CustomerClinicMappingsTable is the table that holds the customer_clinic_mappings relation/edge.
	CustomerClinicMappingsTable = "customer_address_on_clinics"
	// CustomerClinicMappingsInverseTable is the table name for the CustomerAddressOnClinics entity.
	// It exists in this package in order to avoid circular dependency with the "customeraddressonclinics" package.
	CustomerClinicMappingsInverseTable = "customer_address_on_clinics"
	// CustomerClinicMappingsColumn is the table column denoting the customer_clinic_mappings relation/edge.
	CustomerClinicMappingsColumn = "address_id"
	// MemberAddressesTable is the table that holds the member_addresses relation/edge.
	MemberAddressesTable = "address"
	// MemberAddressesColumn is the table column denoting the member_addresses relation/edge.
	MemberAddressesColumn = "group_address_id"
	// GroupAddressTable is the table that holds the group_address relation/edge.
	GroupAddressTable = "address"
	// GroupAddressColumn is the table column denoting the group_address relation/edge.
	GroupAddressColumn = "group_address_id"
	// InternalUserTable is the table that holds the internal_user relation/edge.
	InternalUserTable = "address"
	// InternalUserInverseTable is the table name for the InternalUser entity.
	// It exists in this package in order to avoid circular dependency with the "internaluser" package.
	InternalUserInverseTable = "internal_user"
	// InternalUserColumn is the table column denoting the internal_user relation/edge.
	InternalUserColumn = "internal_user_id"
	// PatientTable is the table that holds the patient relation/edge.
	PatientTable = "address"
	// PatientInverseTable is the table name for the Patient entity.
	// It exists in this package in order to avoid circular dependency with the "patient" package.
	PatientInverseTable = "patient"
	// PatientColumn is the table column denoting the patient relation/edge.
	PatientColumn = "patient_id"
	// OrdersTable is the table that holds the orders relation/edge.
	OrdersTable = "order_info"
	// OrdersInverseTable is the table name for the OrderInfo entity.
	// It exists in this package in order to avoid circular dependency with the "orderinfo" package.
	OrdersInverseTable = "order_info"
	// OrdersColumn is the table column denoting the orders relation/edge.
	OrdersColumn = "address_id"
)

// Columns holds all SQL columns for address fields.
var Columns = []string{
	FieldID,
	FieldAddressType,
	FieldStreetAddress,
	FieldAptPo,
	FieldCity,
	FieldState,
	FieldZipcode,
	FieldCountry,
	FieldAddressConfirmed,
	FieldIsPrimaryAddress,
	FieldCustomerID,
	FieldPatientID,
	FieldClinicID,
	FieldInternalUserID,
	FieldAddressLevel,
	FieldAddressLevelName,
	FieldApplyToAllGroupMember,
	FieldGroupAddressID,
	FieldIsGroupAddress,
	FieldUseAsDefaultCreateAddress,
	FieldUseGroupAddress,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAddressConfirmed holds the default value on creation for the "address_confirmed" field.
	DefaultAddressConfirmed bool
	// DefaultIsPrimaryAddress holds the default value on creation for the "is_primary_address" field.
	DefaultIsPrimaryAddress bool
	// DefaultAddressLevel holds the default value on creation for the "address_level" field.
	DefaultAddressLevel int
	// DefaultAddressLevelName holds the default value on creation for the "address_level_name" field.
	DefaultAddressLevelName string
	// DefaultApplyToAllGroupMember holds the default value on creation for the "apply_to_all_group_member" field.
	DefaultApplyToAllGroupMember bool
	// DefaultIsGroupAddress holds the default value on creation for the "is_group_address" field.
	DefaultIsGroupAddress bool
	// DefaultUseAsDefaultCreateAddress holds the default value on creation for the "use_as_default_create_address" field.
	DefaultUseAsDefaultCreateAddress bool
	// DefaultUseGroupAddress holds the default value on creation for the "use_group_address" field.
	DefaultUseGroupAddress bool
)

// OrderOption defines the ordering options for the Address queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAddressType orders the results by the address_type field.
func ByAddressType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddressType, opts...).ToFunc()
}

// ByStreetAddress orders the results by the street_address field.
func ByStreetAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreetAddress, opts...).ToFunc()
}

// ByAptPo orders the results by the apt_po field.
func ByAptPo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAptPo, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByZipcode orders the results by the zipcode field.
func ByZipcode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldZipcode, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByAddressConfirmed orders the results by the address_confirmed field.
func ByAddressConfirmed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddressConfirmed, opts...).ToFunc()
}

// ByIsPrimaryAddress orders the results by the is_primary_address field.
func ByIsPrimaryAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPrimaryAddress, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByPatientID orders the results by the patient_id field.
func ByPatientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientID, opts...).ToFunc()
}

// ByClinicID orders the results by the clinic_id field.
func ByClinicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClinicID, opts...).ToFunc()
}

// ByInternalUserID orders the results by the internal_user_id field.
func ByInternalUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalUserID, opts...).ToFunc()
}

// ByAddressLevel orders the results by the address_level field.
func ByAddressLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddressLevel, opts...).ToFunc()
}

// ByAddressLevelName orders the results by the address_level_name field.
func ByAddressLevelName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddressLevelName, opts...).ToFunc()
}

// ByApplyToAllGroupMember orders the results by the apply_to_all_group_member field.
func ByApplyToAllGroupMember(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplyToAllGroupMember, opts...).ToFunc()
}

// ByGroupAddressID orders the results by the group_address_id field.
func ByGroupAddressID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupAddressID, opts...).ToFunc()
}

// ByIsGroupAddress orders the results by the is_group_address field.
func ByIsGroupAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsGroupAddress, opts...).ToFunc()
}

// ByUseAsDefaultCreateAddress orders the results by the use_as_default_create_address field.
func ByUseAsDefaultCreateAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseAsDefaultCreateAddress, opts...).ToFunc()
}

// ByUseGroupAddress orders the results by the use_group_address field.
func ByUseGroupAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseGroupAddress, opts...).ToFunc()
}

// ByClinicField orders the results by clinic field.
func ByClinicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomerClinicMappingsCount orders the results by customer_clinic_mappings count.
func ByCustomerClinicMappingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCustomerClinicMappingsStep(), opts...)
	}
}

// ByCustomerClinicMappings orders the results by customer_clinic_mappings terms.
func ByCustomerClinicMappings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerClinicMappingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMemberAddressesCount orders the results by member_addresses count.
func ByMemberAddressesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberAddressesStep(), opts...)
	}
}

// ByMemberAddresses orders the results by member_addresses terms.
func ByMemberAddresses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberAddressesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupAddressField orders the results by group_address field.
func ByGroupAddressField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupAddressStep(), sql.OrderByField(field, opts...))
	}
}

// ByInternalUserField orders the results by internal_user field.
func ByInternalUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInternalUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByPatientField orders the results by patient field.
func ByPatientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPatientStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrdersCount orders the results by orders count.
func ByOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrdersStep(), opts...)
	}
}

// ByOrders orders the results by orders terms.
func ByOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newClinicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicInverseTable, ClinicFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
	)
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, CustomerFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
	)
}
func newCustomerClinicMappingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerClinicMappingsInverseTable, CustomerAddressOnClinicsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CustomerClinicMappingsTable, CustomerClinicMappingsColumn),
	)
}
func newMemberAddressesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MemberAddressesTable, MemberAddressesColumn),
	)
}
func newGroupAddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, GroupAddressTable, GroupAddressColumn),
	)
}
func newInternalUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InternalUserInverseTable, InternalUserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InternalUserTable, InternalUserColumn),
	)
}
func newPatientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PatientInverseTable, PatientFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
	)
}
func newOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrdersInverseTable, OrderInfoFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
	)
}
