// Code generated by ent, DO NOT EDIT.

package address

import (
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldID, id))
}

// AddressType applies equality check predicate on the "address_type" field. It's identical to AddressTypeEQ.
func AddressType(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAddressType, v))
}

// StreetAddress applies equality check predicate on the "street_address" field. It's identical to StreetAddressEQ.
func StreetAddress(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldStreetAddress, v))
}

// AptPo applies equality check predicate on the "apt_po" field. It's identical to AptPoEQ.
func AptPo(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAptPo, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCity, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldState, v))
}

// Zipcode applies equality check predicate on the "zipcode" field. It's identical to ZipcodeEQ.
func Zipcode(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldZipcode, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCountry, v))
}

// AddressConfirmed applies equality check predicate on the "address_confirmed" field. It's identical to AddressConfirmedEQ.
func AddressConfirmed(v bool) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAddressConfirmed, v))
}

// IsPrimaryAddress applies equality check predicate on the "is_primary_address" field. It's identical to IsPrimaryAddressEQ.
func IsPrimaryAddress(v bool) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldIsPrimaryAddress, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCustomerID, v))
}

// PatientID applies equality check predicate on the "patient_id" field. It's identical to PatientIDEQ.
func PatientID(v int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldPatientID, v))
}

// ClinicID applies equality check predicate on the "clinic_id" field. It's identical to ClinicIDEQ.
func ClinicID(v int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldClinicID, v))
}

// InternalUserID applies equality check predicate on the "internal_user_id" field. It's identical to InternalUserIDEQ.
func InternalUserID(v int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldInternalUserID, v))
}

// AddressLevel applies equality check predicate on the "address_level" field. It's identical to AddressLevelEQ.
func AddressLevel(v int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAddressLevel, v))
}

// AddressLevelName applies equality check predicate on the "address_level_name" field. It's identical to AddressLevelNameEQ.
func AddressLevelName(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAddressLevelName, v))
}

// ApplyToAllGroupMember applies equality check predicate on the "apply_to_all_group_member" field. It's identical to ApplyToAllGroupMemberEQ.
func ApplyToAllGroupMember(v bool) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldApplyToAllGroupMember, v))
}

// GroupAddressID applies equality check predicate on the "group_address_id" field. It's identical to GroupAddressIDEQ.
func GroupAddressID(v int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldGroupAddressID, v))
}

// IsGroupAddress applies equality check predicate on the "is_group_address" field. It's identical to IsGroupAddressEQ.
func IsGroupAddress(v bool) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldIsGroupAddress, v))
}

// UseAsDefaultCreateAddress applies equality check predicate on the "use_as_default_create_address" field. It's identical to UseAsDefaultCreateAddressEQ.
func UseAsDefaultCreateAddress(v bool) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldUseAsDefaultCreateAddress, v))
}

// UseGroupAddress applies equality check predicate on the "use_group_address" field. It's identical to UseGroupAddressEQ.
func UseGroupAddress(v bool) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldUseGroupAddress, v))
}

// AddressTypeEQ applies the EQ predicate on the "address_type" field.
func AddressTypeEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAddressType, v))
}

// AddressTypeNEQ applies the NEQ predicate on the "address_type" field.
func AddressTypeNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldAddressType, v))
}

// AddressTypeIn applies the In predicate on the "address_type" field.
func AddressTypeIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldAddressType, vs...))
}

// AddressTypeNotIn applies the NotIn predicate on the "address_type" field.
func AddressTypeNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldAddressType, vs...))
}

// AddressTypeGT applies the GT predicate on the "address_type" field.
func AddressTypeGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldAddressType, v))
}

// AddressTypeGTE applies the GTE predicate on the "address_type" field.
func AddressTypeGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldAddressType, v))
}

// AddressTypeLT applies the LT predicate on the "address_type" field.
func AddressTypeLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldAddressType, v))
}

// AddressTypeLTE applies the LTE predicate on the "address_type" field.
func AddressTypeLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldAddressType, v))
}

// AddressTypeContains applies the Contains predicate on the "address_type" field.
func AddressTypeContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldAddressType, v))
}

// AddressTypeHasPrefix applies the HasPrefix predicate on the "address_type" field.
func AddressTypeHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldAddressType, v))
}

// AddressTypeHasSuffix applies the HasSuffix predicate on the "address_type" field.
func AddressTypeHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldAddressType, v))
}

// AddressTypeIsNil applies the IsNil predicate on the "address_type" field.
func AddressTypeIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldAddressType))
}

// AddressTypeNotNil applies the NotNil predicate on the "address_type" field.
func AddressTypeNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldAddressType))
}

// AddressTypeEqualFold applies the EqualFold predicate on the "address_type" field.
func AddressTypeEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldAddressType, v))
}

// AddressTypeContainsFold applies the ContainsFold predicate on the "address_type" field.
func AddressTypeContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldAddressType, v))
}

// StreetAddressEQ applies the EQ predicate on the "street_address" field.
func StreetAddressEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldStreetAddress, v))
}

// StreetAddressNEQ applies the NEQ predicate on the "street_address" field.
func StreetAddressNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldStreetAddress, v))
}

// StreetAddressIn applies the In predicate on the "street_address" field.
func StreetAddressIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldStreetAddress, vs...))
}

// StreetAddressNotIn applies the NotIn predicate on the "street_address" field.
func StreetAddressNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldStreetAddress, vs...))
}

// StreetAddressGT applies the GT predicate on the "street_address" field.
func StreetAddressGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldStreetAddress, v))
}

// StreetAddressGTE applies the GTE predicate on the "street_address" field.
func StreetAddressGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldStreetAddress, v))
}

// StreetAddressLT applies the LT predicate on the "street_address" field.
func StreetAddressLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldStreetAddress, v))
}

// StreetAddressLTE applies the LTE predicate on the "street_address" field.
func StreetAddressLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldStreetAddress, v))
}

// StreetAddressContains applies the Contains predicate on the "street_address" field.
func StreetAddressContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldStreetAddress, v))
}

// StreetAddressHasPrefix applies the HasPrefix predicate on the "street_address" field.
func StreetAddressHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldStreetAddress, v))
}

// StreetAddressHasSuffix applies the HasSuffix predicate on the "street_address" field.
func StreetAddressHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldStreetAddress, v))
}

// StreetAddressIsNil applies the IsNil predicate on the "street_address" field.
func StreetAddressIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldStreetAddress))
}

// StreetAddressNotNil applies the NotNil predicate on the "street_address" field.
func StreetAddressNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldStreetAddress))
}

// StreetAddressEqualFold applies the EqualFold predicate on the "street_address" field.
func StreetAddressEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldStreetAddress, v))
}

// StreetAddressContainsFold applies the ContainsFold predicate on the "street_address" field.
func StreetAddressContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldStreetAddress, v))
}

// AptPoEQ applies the EQ predicate on the "apt_po" field.
func AptPoEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAptPo, v))
}

// AptPoNEQ applies the NEQ predicate on the "apt_po" field.
func AptPoNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldAptPo, v))
}

// AptPoIn applies the In predicate on the "apt_po" field.
func AptPoIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldAptPo, vs...))
}

// AptPoNotIn applies the NotIn predicate on the "apt_po" field.
func AptPoNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldAptPo, vs...))
}

// AptPoGT applies the GT predicate on the "apt_po" field.
func AptPoGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldAptPo, v))
}

// AptPoGTE applies the GTE predicate on the "apt_po" field.
func AptPoGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldAptPo, v))
}

// AptPoLT applies the LT predicate on the "apt_po" field.
func AptPoLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldAptPo, v))
}

// AptPoLTE applies the LTE predicate on the "apt_po" field.
func AptPoLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldAptPo, v))
}

// AptPoContains applies the Contains predicate on the "apt_po" field.
func AptPoContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldAptPo, v))
}

// AptPoHasPrefix applies the HasPrefix predicate on the "apt_po" field.
func AptPoHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldAptPo, v))
}

// AptPoHasSuffix applies the HasSuffix predicate on the "apt_po" field.
func AptPoHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldAptPo, v))
}

// AptPoIsNil applies the IsNil predicate on the "apt_po" field.
func AptPoIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldAptPo))
}

// AptPoNotNil applies the NotNil predicate on the "apt_po" field.
func AptPoNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldAptPo))
}

// AptPoEqualFold applies the EqualFold predicate on the "apt_po" field.
func AptPoEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldAptPo, v))
}

// AptPoContainsFold applies the ContainsFold predicate on the "apt_po" field.
func AptPoContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldAptPo, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldCity, v))
}

// CityIsNil applies the IsNil predicate on the "city" field.
func CityIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldCity))
}

// CityNotNil applies the NotNil predicate on the "city" field.
func CityNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldCity))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldCity, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldState, v))
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldState))
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldState))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldState, v))
}

// ZipcodeEQ applies the EQ predicate on the "zipcode" field.
func ZipcodeEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldZipcode, v))
}

// ZipcodeNEQ applies the NEQ predicate on the "zipcode" field.
func ZipcodeNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldZipcode, v))
}

// ZipcodeIn applies the In predicate on the "zipcode" field.
func ZipcodeIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldZipcode, vs...))
}

// ZipcodeNotIn applies the NotIn predicate on the "zipcode" field.
func ZipcodeNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldZipcode, vs...))
}

// ZipcodeGT applies the GT predicate on the "zipcode" field.
func ZipcodeGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldZipcode, v))
}

// ZipcodeGTE applies the GTE predicate on the "zipcode" field.
func ZipcodeGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldZipcode, v))
}

// ZipcodeLT applies the LT predicate on the "zipcode" field.
func ZipcodeLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldZipcode, v))
}

// ZipcodeLTE applies the LTE predicate on the "zipcode" field.
func ZipcodeLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldZipcode, v))
}

// ZipcodeContains applies the Contains predicate on the "zipcode" field.
func ZipcodeContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldZipcode, v))
}

// ZipcodeHasPrefix applies the HasPrefix predicate on the "zipcode" field.
func ZipcodeHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldZipcode, v))
}

// ZipcodeHasSuffix applies the HasSuffix predicate on the "zipcode" field.
func ZipcodeHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldZipcode, v))
}

// ZipcodeIsNil applies the IsNil predicate on the "zipcode" field.
func ZipcodeIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldZipcode))
}

// ZipcodeNotNil applies the NotNil predicate on the "zipcode" field.
func ZipcodeNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldZipcode))
}

// ZipcodeEqualFold applies the EqualFold predicate on the "zipcode" field.
func ZipcodeEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldZipcode, v))
}

// ZipcodeContainsFold applies the ContainsFold predicate on the "zipcode" field.
func ZipcodeContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldZipcode, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryIsNil applies the IsNil predicate on the "country" field.
func CountryIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldCountry))
}

// CountryNotNil applies the NotNil predicate on the "country" field.
func CountryNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldCountry))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldCountry, v))
}

// AddressConfirmedEQ applies the EQ predicate on the "address_confirmed" field.
func AddressConfirmedEQ(v bool) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAddressConfirmed, v))
}

// AddressConfirmedNEQ applies the NEQ predicate on the "address_confirmed" field.
func AddressConfirmedNEQ(v bool) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldAddressConfirmed, v))
}

// IsPrimaryAddressEQ applies the EQ predicate on the "is_primary_address" field.
func IsPrimaryAddressEQ(v bool) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldIsPrimaryAddress, v))
}

// IsPrimaryAddressNEQ applies the NEQ predicate on the "is_primary_address" field.
func IsPrimaryAddressNEQ(v bool) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldIsPrimaryAddress, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v int) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...int) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...int) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDIsNil applies the IsNil predicate on the "customer_id" field.
func CustomerIDIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldCustomerID))
}

// CustomerIDNotNil applies the NotNil predicate on the "customer_id" field.
func CustomerIDNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldCustomerID))
}

// PatientIDEQ applies the EQ predicate on the "patient_id" field.
func PatientIDEQ(v int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldPatientID, v))
}

// PatientIDNEQ applies the NEQ predicate on the "patient_id" field.
func PatientIDNEQ(v int) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldPatientID, v))
}

// PatientIDIn applies the In predicate on the "patient_id" field.
func PatientIDIn(vs ...int) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldPatientID, vs...))
}

// PatientIDNotIn applies the NotIn predicate on the "patient_id" field.
func PatientIDNotIn(vs ...int) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldPatientID, vs...))
}

// PatientIDIsNil applies the IsNil predicate on the "patient_id" field.
func PatientIDIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldPatientID))
}

// PatientIDNotNil applies the NotNil predicate on the "patient_id" field.
func PatientIDNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldPatientID))
}

// ClinicIDEQ applies the EQ predicate on the "clinic_id" field.
func ClinicIDEQ(v int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldClinicID, v))
}

// ClinicIDNEQ applies the NEQ predicate on the "clinic_id" field.
func ClinicIDNEQ(v int) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldClinicID, v))
}

// ClinicIDIn applies the In predicate on the "clinic_id" field.
func ClinicIDIn(vs ...int) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldClinicID, vs...))
}

// ClinicIDNotIn applies the NotIn predicate on the "clinic_id" field.
func ClinicIDNotIn(vs ...int) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldClinicID, vs...))
}

// ClinicIDIsNil applies the IsNil predicate on the "clinic_id" field.
func ClinicIDIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldClinicID))
}

// ClinicIDNotNil applies the NotNil predicate on the "clinic_id" field.
func ClinicIDNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldClinicID))
}

// InternalUserIDEQ applies the EQ predicate on the "internal_user_id" field.
func InternalUserIDEQ(v int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldInternalUserID, v))
}

// InternalUserIDNEQ applies the NEQ predicate on the "internal_user_id" field.
func InternalUserIDNEQ(v int) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldInternalUserID, v))
}

// InternalUserIDIn applies the In predicate on the "internal_user_id" field.
func InternalUserIDIn(vs ...int) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldInternalUserID, vs...))
}

// InternalUserIDNotIn applies the NotIn predicate on the "internal_user_id" field.
func InternalUserIDNotIn(vs ...int) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldInternalUserID, vs...))
}

// InternalUserIDIsNil applies the IsNil predicate on the "internal_user_id" field.
func InternalUserIDIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldInternalUserID))
}

// InternalUserIDNotNil applies the NotNil predicate on the "internal_user_id" field.
func InternalUserIDNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldInternalUserID))
}

// AddressLevelEQ applies the EQ predicate on the "address_level" field.
func AddressLevelEQ(v int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAddressLevel, v))
}

// AddressLevelNEQ applies the NEQ predicate on the "address_level" field.
func AddressLevelNEQ(v int) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldAddressLevel, v))
}

// AddressLevelIn applies the In predicate on the "address_level" field.
func AddressLevelIn(vs ...int) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldAddressLevel, vs...))
}

// AddressLevelNotIn applies the NotIn predicate on the "address_level" field.
func AddressLevelNotIn(vs ...int) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldAddressLevel, vs...))
}

// AddressLevelGT applies the GT predicate on the "address_level" field.
func AddressLevelGT(v int) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldAddressLevel, v))
}

// AddressLevelGTE applies the GTE predicate on the "address_level" field.
func AddressLevelGTE(v int) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldAddressLevel, v))
}

// AddressLevelLT applies the LT predicate on the "address_level" field.
func AddressLevelLT(v int) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldAddressLevel, v))
}

// AddressLevelLTE applies the LTE predicate on the "address_level" field.
func AddressLevelLTE(v int) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldAddressLevel, v))
}

// AddressLevelNameEQ applies the EQ predicate on the "address_level_name" field.
func AddressLevelNameEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAddressLevelName, v))
}

// AddressLevelNameNEQ applies the NEQ predicate on the "address_level_name" field.
func AddressLevelNameNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldAddressLevelName, v))
}

// AddressLevelNameIn applies the In predicate on the "address_level_name" field.
func AddressLevelNameIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldAddressLevelName, vs...))
}

// AddressLevelNameNotIn applies the NotIn predicate on the "address_level_name" field.
func AddressLevelNameNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldAddressLevelName, vs...))
}

// AddressLevelNameGT applies the GT predicate on the "address_level_name" field.
func AddressLevelNameGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldAddressLevelName, v))
}

// AddressLevelNameGTE applies the GTE predicate on the "address_level_name" field.
func AddressLevelNameGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldAddressLevelName, v))
}

// AddressLevelNameLT applies the LT predicate on the "address_level_name" field.
func AddressLevelNameLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldAddressLevelName, v))
}

// AddressLevelNameLTE applies the LTE predicate on the "address_level_name" field.
func AddressLevelNameLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldAddressLevelName, v))
}

// AddressLevelNameContains applies the Contains predicate on the "address_level_name" field.
func AddressLevelNameContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldAddressLevelName, v))
}

// AddressLevelNameHasPrefix applies the HasPrefix predicate on the "address_level_name" field.
func AddressLevelNameHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldAddressLevelName, v))
}

// AddressLevelNameHasSuffix applies the HasSuffix predicate on the "address_level_name" field.
func AddressLevelNameHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldAddressLevelName, v))
}

// AddressLevelNameEqualFold applies the EqualFold predicate on the "address_level_name" field.
func AddressLevelNameEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldAddressLevelName, v))
}

// AddressLevelNameContainsFold applies the ContainsFold predicate on the "address_level_name" field.
func AddressLevelNameContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldAddressLevelName, v))
}

// ApplyToAllGroupMemberEQ applies the EQ predicate on the "apply_to_all_group_member" field.
func ApplyToAllGroupMemberEQ(v bool) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldApplyToAllGroupMember, v))
}

// ApplyToAllGroupMemberNEQ applies the NEQ predicate on the "apply_to_all_group_member" field.
func ApplyToAllGroupMemberNEQ(v bool) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldApplyToAllGroupMember, v))
}

// GroupAddressIDEQ applies the EQ predicate on the "group_address_id" field.
func GroupAddressIDEQ(v int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldGroupAddressID, v))
}

// GroupAddressIDNEQ applies the NEQ predicate on the "group_address_id" field.
func GroupAddressIDNEQ(v int) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldGroupAddressID, v))
}

// GroupAddressIDIn applies the In predicate on the "group_address_id" field.
func GroupAddressIDIn(vs ...int) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldGroupAddressID, vs...))
}

// GroupAddressIDNotIn applies the NotIn predicate on the "group_address_id" field.
func GroupAddressIDNotIn(vs ...int) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldGroupAddressID, vs...))
}

// GroupAddressIDIsNil applies the IsNil predicate on the "group_address_id" field.
func GroupAddressIDIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldGroupAddressID))
}

// GroupAddressIDNotNil applies the NotNil predicate on the "group_address_id" field.
func GroupAddressIDNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldGroupAddressID))
}

// IsGroupAddressEQ applies the EQ predicate on the "is_group_address" field.
func IsGroupAddressEQ(v bool) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldIsGroupAddress, v))
}

// IsGroupAddressNEQ applies the NEQ predicate on the "is_group_address" field.
func IsGroupAddressNEQ(v bool) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldIsGroupAddress, v))
}

// UseAsDefaultCreateAddressEQ applies the EQ predicate on the "use_as_default_create_address" field.
func UseAsDefaultCreateAddressEQ(v bool) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldUseAsDefaultCreateAddress, v))
}

// UseAsDefaultCreateAddressNEQ applies the NEQ predicate on the "use_as_default_create_address" field.
func UseAsDefaultCreateAddressNEQ(v bool) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldUseAsDefaultCreateAddress, v))
}

// UseGroupAddressEQ applies the EQ predicate on the "use_group_address" field.
func UseGroupAddressEQ(v bool) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldUseGroupAddress, v))
}

// UseGroupAddressNEQ applies the NEQ predicate on the "use_group_address" field.
func UseGroupAddressNEQ(v bool) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldUseGroupAddress, v))
}

// HasClinic applies the HasEdge predicate on the "clinic" edge.
func HasClinic() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicWith applies the HasEdge predicate on the "clinic" edge with a given conditions (other predicates).
func HasClinicWith(preds ...predicate.Clinic) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newClinicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomerClinicMappings applies the HasEdge predicate on the "customer_clinic_mappings" edge.
func HasCustomerClinicMappings() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CustomerClinicMappingsTable, CustomerClinicMappingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerClinicMappingsWith applies the HasEdge predicate on the "customer_clinic_mappings" edge with a given conditions (other predicates).
func HasCustomerClinicMappingsWith(preds ...predicate.CustomerAddressOnClinics) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newCustomerClinicMappingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMemberAddresses applies the HasEdge predicate on the "member_addresses" edge.
func HasMemberAddresses() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, MemberAddressesTable, MemberAddressesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberAddressesWith applies the HasEdge predicate on the "member_addresses" edge with a given conditions (other predicates).
func HasMemberAddressesWith(preds ...predicate.Address) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newMemberAddressesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroupAddress applies the HasEdge predicate on the "group_address" edge.
func HasGroupAddress() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, GroupAddressTable, GroupAddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupAddressWith applies the HasEdge predicate on the "group_address" edge with a given conditions (other predicates).
func HasGroupAddressWith(preds ...predicate.Address) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newGroupAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInternalUser applies the HasEdge predicate on the "internal_user" edge.
func HasInternalUser() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InternalUserTable, InternalUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInternalUserWith applies the HasEdge predicate on the "internal_user" edge with a given conditions (other predicates).
func HasInternalUserWith(preds ...predicate.InternalUser) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newInternalUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newPatientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.OrderInfo) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Address) predicate.Address {
	return predicate.Address(sql.NotPredicates(p))
}
