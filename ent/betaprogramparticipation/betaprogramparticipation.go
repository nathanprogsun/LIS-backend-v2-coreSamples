// Code generated by ent, DO NOT EDIT.

package betaprogramparticipation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the betaprogramparticipation type in the database.
	Label = "beta_program_participation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBetaProgramID holds the string denoting the beta_program_id field in the database.
	FieldBetaProgramID = "beta_program_id"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldClinicID holds the string denoting the clinic_id field in the database.
	FieldClinicID = "clinic_id"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldHasModifiedStartTime holds the string denoting the has_modified_start_time field in the database.
	FieldHasModifiedStartTime = "has_modified_start_time"
	// FieldModifiedStartTime holds the string denoting the modified_start_time field in the database.
	FieldModifiedStartTime = "modified_start_time"
	// FieldModifiedEndTime holds the string denoting the modified_end_time field in the database.
	FieldModifiedEndTime = "modified_end_time"
	// EdgeBetaProgram holds the string denoting the beta_program edge name in mutations.
	EdgeBetaProgram = "beta_program"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeClinic holds the string denoting the clinic edge name in mutations.
	EdgeClinic = "clinic"
	// BetaProgramFieldID holds the string denoting the ID field of the BetaProgram.
	BetaProgramFieldID = "beta_program_id"
	// CustomerFieldID holds the string denoting the ID field of the Customer.
	CustomerFieldID = "customer_id"
	// ClinicFieldID holds the string denoting the ID field of the Clinic.
	ClinicFieldID = "clinic_id"
	// Table holds the table name of the betaprogramparticipation in the database.
	Table = "beta_program_participations"
	// BetaProgramTable is the table that holds the beta_program relation/edge.
	BetaProgramTable = "beta_program_participations"
	// BetaProgramInverseTable is the table name for the BetaProgram entity.
	// It exists in this package in order to avoid circular dependency with the "betaprogram" package.
	BetaProgramInverseTable = "beta_programs"
	// BetaProgramColumn is the table column denoting the beta_program relation/edge.
	BetaProgramColumn = "beta_program_id"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "beta_program_participations"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customer"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_id"
	// ClinicTable is the table that holds the clinic relation/edge.
	ClinicTable = "beta_program_participations"
	// ClinicInverseTable is the table name for the Clinic entity.
	// It exists in this package in order to avoid circular dependency with the "clinic" package.
	ClinicInverseTable = "clinic"
	// ClinicColumn is the table column denoting the clinic relation/edge.
	ClinicColumn = "clinic_id"
)

// Columns holds all SQL columns for betaprogramparticipation fields.
var Columns = []string{
	FieldID,
	FieldBetaProgramID,
	FieldCustomerID,
	FieldClinicID,
	FieldIsActive,
	FieldHasModifiedStartTime,
	FieldModifiedStartTime,
	FieldModifiedEndTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultHasModifiedStartTime holds the default value on creation for the "has_modified_start_time" field.
	DefaultHasModifiedStartTime bool
)

// OrderOption defines the ordering options for the BetaProgramParticipation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBetaProgramID orders the results by the beta_program_id field.
func ByBetaProgramID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBetaProgramID, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByClinicID orders the results by the clinic_id field.
func ByClinicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClinicID, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByHasModifiedStartTime orders the results by the has_modified_start_time field.
func ByHasModifiedStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasModifiedStartTime, opts...).ToFunc()
}

// ByModifiedStartTime orders the results by the modified_start_time field.
func ByModifiedStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedStartTime, opts...).ToFunc()
}

// ByModifiedEndTime orders the results by the modified_end_time field.
func ByModifiedEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedEndTime, opts...).ToFunc()
}

// ByBetaProgramField orders the results by beta_program field.
func ByBetaProgramField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBetaProgramStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}

// ByClinicField orders the results by clinic field.
func ByClinicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClinicStep(), sql.OrderByField(field, opts...))
	}
}
func newBetaProgramStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BetaProgramInverseTable, BetaProgramFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BetaProgramTable, BetaProgramColumn),
	)
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, CustomerFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
	)
}
func newClinicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClinicInverseTable, ClinicFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
	)
}
