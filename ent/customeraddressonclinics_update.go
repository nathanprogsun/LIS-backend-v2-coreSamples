// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/address"
	"coresamples/ent/clinic"
	"coresamples/ent/customer"
	"coresamples/ent/customeraddressonclinics"
	"coresamples/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerAddressOnClinicsUpdate is the builder for updating CustomerAddressOnClinics entities.
type CustomerAddressOnClinicsUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerAddressOnClinicsMutation
}

// Where appends a list predicates to the CustomerAddressOnClinicsUpdate builder.
func (caocu *CustomerAddressOnClinicsUpdate) Where(ps ...predicate.CustomerAddressOnClinics) *CustomerAddressOnClinicsUpdate {
	caocu.mutation.Where(ps...)
	return caocu
}

// SetCustomerID sets the "customer_id" field.
func (caocu *CustomerAddressOnClinicsUpdate) SetCustomerID(i int) *CustomerAddressOnClinicsUpdate {
	caocu.mutation.SetCustomerID(i)
	return caocu
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (caocu *CustomerAddressOnClinicsUpdate) SetNillableCustomerID(i *int) *CustomerAddressOnClinicsUpdate {
	if i != nil {
		caocu.SetCustomerID(*i)
	}
	return caocu
}

// SetClinicID sets the "clinic_id" field.
func (caocu *CustomerAddressOnClinicsUpdate) SetClinicID(i int) *CustomerAddressOnClinicsUpdate {
	caocu.mutation.SetClinicID(i)
	return caocu
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (caocu *CustomerAddressOnClinicsUpdate) SetNillableClinicID(i *int) *CustomerAddressOnClinicsUpdate {
	if i != nil {
		caocu.SetClinicID(*i)
	}
	return caocu
}

// SetAddressID sets the "address_id" field.
func (caocu *CustomerAddressOnClinicsUpdate) SetAddressID(i int) *CustomerAddressOnClinicsUpdate {
	caocu.mutation.SetAddressID(i)
	return caocu
}

// SetNillableAddressID sets the "address_id" field if the given value is not nil.
func (caocu *CustomerAddressOnClinicsUpdate) SetNillableAddressID(i *int) *CustomerAddressOnClinicsUpdate {
	if i != nil {
		caocu.SetAddressID(*i)
	}
	return caocu
}

// SetAddressType sets the "address_type" field.
func (caocu *CustomerAddressOnClinicsUpdate) SetAddressType(s string) *CustomerAddressOnClinicsUpdate {
	caocu.mutation.SetAddressType(s)
	return caocu
}

// SetNillableAddressType sets the "address_type" field if the given value is not nil.
func (caocu *CustomerAddressOnClinicsUpdate) SetNillableAddressType(s *string) *CustomerAddressOnClinicsUpdate {
	if s != nil {
		caocu.SetAddressType(*s)
	}
	return caocu
}

// ClearAddressType clears the value of the "address_type" field.
func (caocu *CustomerAddressOnClinicsUpdate) ClearAddressType() *CustomerAddressOnClinicsUpdate {
	caocu.mutation.ClearAddressType()
	return caocu
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (caocu *CustomerAddressOnClinicsUpdate) SetCustomer(c *Customer) *CustomerAddressOnClinicsUpdate {
	return caocu.SetCustomerID(c.ID)
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (caocu *CustomerAddressOnClinicsUpdate) SetClinic(c *Clinic) *CustomerAddressOnClinicsUpdate {
	return caocu.SetClinicID(c.ID)
}

// SetAddress sets the "address" edge to the Address entity.
func (caocu *CustomerAddressOnClinicsUpdate) SetAddress(a *Address) *CustomerAddressOnClinicsUpdate {
	return caocu.SetAddressID(a.ID)
}

// Mutation returns the CustomerAddressOnClinicsMutation object of the builder.
func (caocu *CustomerAddressOnClinicsUpdate) Mutation() *CustomerAddressOnClinicsMutation {
	return caocu.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (caocu *CustomerAddressOnClinicsUpdate) ClearCustomer() *CustomerAddressOnClinicsUpdate {
	caocu.mutation.ClearCustomer()
	return caocu
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (caocu *CustomerAddressOnClinicsUpdate) ClearClinic() *CustomerAddressOnClinicsUpdate {
	caocu.mutation.ClearClinic()
	return caocu
}

// ClearAddress clears the "address" edge to the Address entity.
func (caocu *CustomerAddressOnClinicsUpdate) ClearAddress() *CustomerAddressOnClinicsUpdate {
	caocu.mutation.ClearAddress()
	return caocu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (caocu *CustomerAddressOnClinicsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, caocu.sqlSave, caocu.mutation, caocu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (caocu *CustomerAddressOnClinicsUpdate) SaveX(ctx context.Context) int {
	affected, err := caocu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (caocu *CustomerAddressOnClinicsUpdate) Exec(ctx context.Context) error {
	_, err := caocu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (caocu *CustomerAddressOnClinicsUpdate) ExecX(ctx context.Context) {
	if err := caocu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (caocu *CustomerAddressOnClinicsUpdate) check() error {
	if _, ok := caocu.mutation.CustomerID(); caocu.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerAddressOnClinics.customer"`)
	}
	if _, ok := caocu.mutation.ClinicID(); caocu.mutation.ClinicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerAddressOnClinics.clinic"`)
	}
	if _, ok := caocu.mutation.AddressID(); caocu.mutation.AddressCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerAddressOnClinics.address"`)
	}
	return nil
}

func (caocu *CustomerAddressOnClinicsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := caocu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customeraddressonclinics.Table, customeraddressonclinics.Columns, sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt))
	if ps := caocu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := caocu.mutation.AddressType(); ok {
		_spec.SetField(customeraddressonclinics.FieldAddressType, field.TypeString, value)
	}
	if caocu.mutation.AddressTypeCleared() {
		_spec.ClearField(customeraddressonclinics.FieldAddressType, field.TypeString)
	}
	if caocu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddressonclinics.CustomerTable,
			Columns: []string{customeraddressonclinics.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caocu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddressonclinics.CustomerTable,
			Columns: []string{customeraddressonclinics.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if caocu.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddressonclinics.ClinicTable,
			Columns: []string{customeraddressonclinics.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caocu.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddressonclinics.ClinicTable,
			Columns: []string{customeraddressonclinics.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if caocu.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddressonclinics.AddressTable,
			Columns: []string{customeraddressonclinics.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caocu.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddressonclinics.AddressTable,
			Columns: []string{customeraddressonclinics.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, caocu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customeraddressonclinics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	caocu.mutation.done = true
	return n, nil
}

// CustomerAddressOnClinicsUpdateOne is the builder for updating a single CustomerAddressOnClinics entity.
type CustomerAddressOnClinicsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerAddressOnClinicsMutation
}

// SetCustomerID sets the "customer_id" field.
func (caocuo *CustomerAddressOnClinicsUpdateOne) SetCustomerID(i int) *CustomerAddressOnClinicsUpdateOne {
	caocuo.mutation.SetCustomerID(i)
	return caocuo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (caocuo *CustomerAddressOnClinicsUpdateOne) SetNillableCustomerID(i *int) *CustomerAddressOnClinicsUpdateOne {
	if i != nil {
		caocuo.SetCustomerID(*i)
	}
	return caocuo
}

// SetClinicID sets the "clinic_id" field.
func (caocuo *CustomerAddressOnClinicsUpdateOne) SetClinicID(i int) *CustomerAddressOnClinicsUpdateOne {
	caocuo.mutation.SetClinicID(i)
	return caocuo
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (caocuo *CustomerAddressOnClinicsUpdateOne) SetNillableClinicID(i *int) *CustomerAddressOnClinicsUpdateOne {
	if i != nil {
		caocuo.SetClinicID(*i)
	}
	return caocuo
}

// SetAddressID sets the "address_id" field.
func (caocuo *CustomerAddressOnClinicsUpdateOne) SetAddressID(i int) *CustomerAddressOnClinicsUpdateOne {
	caocuo.mutation.SetAddressID(i)
	return caocuo
}

// SetNillableAddressID sets the "address_id" field if the given value is not nil.
func (caocuo *CustomerAddressOnClinicsUpdateOne) SetNillableAddressID(i *int) *CustomerAddressOnClinicsUpdateOne {
	if i != nil {
		caocuo.SetAddressID(*i)
	}
	return caocuo
}

// SetAddressType sets the "address_type" field.
func (caocuo *CustomerAddressOnClinicsUpdateOne) SetAddressType(s string) *CustomerAddressOnClinicsUpdateOne {
	caocuo.mutation.SetAddressType(s)
	return caocuo
}

// SetNillableAddressType sets the "address_type" field if the given value is not nil.
func (caocuo *CustomerAddressOnClinicsUpdateOne) SetNillableAddressType(s *string) *CustomerAddressOnClinicsUpdateOne {
	if s != nil {
		caocuo.SetAddressType(*s)
	}
	return caocuo
}

// ClearAddressType clears the value of the "address_type" field.
func (caocuo *CustomerAddressOnClinicsUpdateOne) ClearAddressType() *CustomerAddressOnClinicsUpdateOne {
	caocuo.mutation.ClearAddressType()
	return caocuo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (caocuo *CustomerAddressOnClinicsUpdateOne) SetCustomer(c *Customer) *CustomerAddressOnClinicsUpdateOne {
	return caocuo.SetCustomerID(c.ID)
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (caocuo *CustomerAddressOnClinicsUpdateOne) SetClinic(c *Clinic) *CustomerAddressOnClinicsUpdateOne {
	return caocuo.SetClinicID(c.ID)
}

// SetAddress sets the "address" edge to the Address entity.
func (caocuo *CustomerAddressOnClinicsUpdateOne) SetAddress(a *Address) *CustomerAddressOnClinicsUpdateOne {
	return caocuo.SetAddressID(a.ID)
}

// Mutation returns the CustomerAddressOnClinicsMutation object of the builder.
func (caocuo *CustomerAddressOnClinicsUpdateOne) Mutation() *CustomerAddressOnClinicsMutation {
	return caocuo.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (caocuo *CustomerAddressOnClinicsUpdateOne) ClearCustomer() *CustomerAddressOnClinicsUpdateOne {
	caocuo.mutation.ClearCustomer()
	return caocuo
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (caocuo *CustomerAddressOnClinicsUpdateOne) ClearClinic() *CustomerAddressOnClinicsUpdateOne {
	caocuo.mutation.ClearClinic()
	return caocuo
}

// ClearAddress clears the "address" edge to the Address entity.
func (caocuo *CustomerAddressOnClinicsUpdateOne) ClearAddress() *CustomerAddressOnClinicsUpdateOne {
	caocuo.mutation.ClearAddress()
	return caocuo
}

// Where appends a list predicates to the CustomerAddressOnClinicsUpdate builder.
func (caocuo *CustomerAddressOnClinicsUpdateOne) Where(ps ...predicate.CustomerAddressOnClinics) *CustomerAddressOnClinicsUpdateOne {
	caocuo.mutation.Where(ps...)
	return caocuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (caocuo *CustomerAddressOnClinicsUpdateOne) Select(field string, fields ...string) *CustomerAddressOnClinicsUpdateOne {
	caocuo.fields = append([]string{field}, fields...)
	return caocuo
}

// Save executes the query and returns the updated CustomerAddressOnClinics entity.
func (caocuo *CustomerAddressOnClinicsUpdateOne) Save(ctx context.Context) (*CustomerAddressOnClinics, error) {
	return withHooks(ctx, caocuo.sqlSave, caocuo.mutation, caocuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (caocuo *CustomerAddressOnClinicsUpdateOne) SaveX(ctx context.Context) *CustomerAddressOnClinics {
	node, err := caocuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (caocuo *CustomerAddressOnClinicsUpdateOne) Exec(ctx context.Context) error {
	_, err := caocuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (caocuo *CustomerAddressOnClinicsUpdateOne) ExecX(ctx context.Context) {
	if err := caocuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (caocuo *CustomerAddressOnClinicsUpdateOne) check() error {
	if _, ok := caocuo.mutation.CustomerID(); caocuo.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerAddressOnClinics.customer"`)
	}
	if _, ok := caocuo.mutation.ClinicID(); caocuo.mutation.ClinicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerAddressOnClinics.clinic"`)
	}
	if _, ok := caocuo.mutation.AddressID(); caocuo.mutation.AddressCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CustomerAddressOnClinics.address"`)
	}
	return nil
}

func (caocuo *CustomerAddressOnClinicsUpdateOne) sqlSave(ctx context.Context) (_node *CustomerAddressOnClinics, err error) {
	if err := caocuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customeraddressonclinics.Table, customeraddressonclinics.Columns, sqlgraph.NewFieldSpec(customeraddressonclinics.FieldID, field.TypeInt))
	id, ok := caocuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CustomerAddressOnClinics.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := caocuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customeraddressonclinics.FieldID)
		for _, f := range fields {
			if !customeraddressonclinics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customeraddressonclinics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := caocuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := caocuo.mutation.AddressType(); ok {
		_spec.SetField(customeraddressonclinics.FieldAddressType, field.TypeString, value)
	}
	if caocuo.mutation.AddressTypeCleared() {
		_spec.ClearField(customeraddressonclinics.FieldAddressType, field.TypeString)
	}
	if caocuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddressonclinics.CustomerTable,
			Columns: []string{customeraddressonclinics.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caocuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddressonclinics.CustomerTable,
			Columns: []string{customeraddressonclinics.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if caocuo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddressonclinics.ClinicTable,
			Columns: []string{customeraddressonclinics.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caocuo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddressonclinics.ClinicTable,
			Columns: []string{customeraddressonclinics.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if caocuo.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddressonclinics.AddressTable,
			Columns: []string{customeraddressonclinics.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caocuo.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customeraddressonclinics.AddressTable,
			Columns: []string{customeraddressonclinics.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CustomerAddressOnClinics{config: caocuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, caocuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customeraddressonclinics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	caocuo.mutation.done = true
	return _node, nil
}
