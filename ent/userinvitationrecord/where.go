// Code generated by ent, DO NOT EDIT.

package userinvitationrecord

import (
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldLTE(FieldID, id))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldEQ(FieldCustomerID, v))
}

// InvitationLink applies equality check predicate on the "invitation_link" field. It's identical to InvitationLinkEQ.
func InvitationLink(v string) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldEQ(FieldInvitationLink, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldGT(FieldCustomerID, v))
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldGTE(FieldCustomerID, v))
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldLT(FieldCustomerID, v))
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v int) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldLTE(FieldCustomerID, v))
}

// InvitationLinkEQ applies the EQ predicate on the "invitation_link" field.
func InvitationLinkEQ(v string) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldEQ(FieldInvitationLink, v))
}

// InvitationLinkNEQ applies the NEQ predicate on the "invitation_link" field.
func InvitationLinkNEQ(v string) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldNEQ(FieldInvitationLink, v))
}

// InvitationLinkIn applies the In predicate on the "invitation_link" field.
func InvitationLinkIn(vs ...string) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldIn(FieldInvitationLink, vs...))
}

// InvitationLinkNotIn applies the NotIn predicate on the "invitation_link" field.
func InvitationLinkNotIn(vs ...string) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldNotIn(FieldInvitationLink, vs...))
}

// InvitationLinkGT applies the GT predicate on the "invitation_link" field.
func InvitationLinkGT(v string) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldGT(FieldInvitationLink, v))
}

// InvitationLinkGTE applies the GTE predicate on the "invitation_link" field.
func InvitationLinkGTE(v string) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldGTE(FieldInvitationLink, v))
}

// InvitationLinkLT applies the LT predicate on the "invitation_link" field.
func InvitationLinkLT(v string) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldLT(FieldInvitationLink, v))
}

// InvitationLinkLTE applies the LTE predicate on the "invitation_link" field.
func InvitationLinkLTE(v string) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldLTE(FieldInvitationLink, v))
}

// InvitationLinkContains applies the Contains predicate on the "invitation_link" field.
func InvitationLinkContains(v string) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldContains(FieldInvitationLink, v))
}

// InvitationLinkHasPrefix applies the HasPrefix predicate on the "invitation_link" field.
func InvitationLinkHasPrefix(v string) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldHasPrefix(FieldInvitationLink, v))
}

// InvitationLinkHasSuffix applies the HasSuffix predicate on the "invitation_link" field.
func InvitationLinkHasSuffix(v string) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldHasSuffix(FieldInvitationLink, v))
}

// InvitationLinkEqualFold applies the EqualFold predicate on the "invitation_link" field.
func InvitationLinkEqualFold(v string) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldEqualFold(FieldInvitationLink, v))
}

// InvitationLinkContainsFold applies the ContainsFold predicate on the "invitation_link" field.
func InvitationLinkContainsFold(v string) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.FieldContainsFold(FieldInvitationLink, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserInvitationRecord) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserInvitationRecord) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserInvitationRecord) predicate.UserInvitationRecord {
	return predicate.UserInvitationRecord(sql.NotPredicates(p))
}
