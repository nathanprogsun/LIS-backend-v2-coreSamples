// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/betaprogram"
	"coresamples/ent/betaprogramparticipation"
	"coresamples/ent/clinic"
	"coresamples/ent/customer"
	"coresamples/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BetaProgramParticipationUpdate is the builder for updating BetaProgramParticipation entities.
type BetaProgramParticipationUpdate struct {
	config
	hooks    []Hook
	mutation *BetaProgramParticipationMutation
}

// Where appends a list predicates to the BetaProgramParticipationUpdate builder.
func (bppu *BetaProgramParticipationUpdate) Where(ps ...predicate.BetaProgramParticipation) *BetaProgramParticipationUpdate {
	bppu.mutation.Where(ps...)
	return bppu
}

// SetBetaProgramID sets the "beta_program_id" field.
func (bppu *BetaProgramParticipationUpdate) SetBetaProgramID(i int) *BetaProgramParticipationUpdate {
	bppu.mutation.SetBetaProgramID(i)
	return bppu
}

// SetNillableBetaProgramID sets the "beta_program_id" field if the given value is not nil.
func (bppu *BetaProgramParticipationUpdate) SetNillableBetaProgramID(i *int) *BetaProgramParticipationUpdate {
	if i != nil {
		bppu.SetBetaProgramID(*i)
	}
	return bppu
}

// SetCustomerID sets the "customer_id" field.
func (bppu *BetaProgramParticipationUpdate) SetCustomerID(i int) *BetaProgramParticipationUpdate {
	bppu.mutation.SetCustomerID(i)
	return bppu
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (bppu *BetaProgramParticipationUpdate) SetNillableCustomerID(i *int) *BetaProgramParticipationUpdate {
	if i != nil {
		bppu.SetCustomerID(*i)
	}
	return bppu
}

// SetClinicID sets the "clinic_id" field.
func (bppu *BetaProgramParticipationUpdate) SetClinicID(i int) *BetaProgramParticipationUpdate {
	bppu.mutation.SetClinicID(i)
	return bppu
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (bppu *BetaProgramParticipationUpdate) SetNillableClinicID(i *int) *BetaProgramParticipationUpdate {
	if i != nil {
		bppu.SetClinicID(*i)
	}
	return bppu
}

// SetIsActive sets the "is_active" field.
func (bppu *BetaProgramParticipationUpdate) SetIsActive(b bool) *BetaProgramParticipationUpdate {
	bppu.mutation.SetIsActive(b)
	return bppu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (bppu *BetaProgramParticipationUpdate) SetNillableIsActive(b *bool) *BetaProgramParticipationUpdate {
	if b != nil {
		bppu.SetIsActive(*b)
	}
	return bppu
}

// SetHasModifiedStartTime sets the "has_modified_start_time" field.
func (bppu *BetaProgramParticipationUpdate) SetHasModifiedStartTime(b bool) *BetaProgramParticipationUpdate {
	bppu.mutation.SetHasModifiedStartTime(b)
	return bppu
}

// SetNillableHasModifiedStartTime sets the "has_modified_start_time" field if the given value is not nil.
func (bppu *BetaProgramParticipationUpdate) SetNillableHasModifiedStartTime(b *bool) *BetaProgramParticipationUpdate {
	if b != nil {
		bppu.SetHasModifiedStartTime(*b)
	}
	return bppu
}

// SetModifiedStartTime sets the "modified_start_time" field.
func (bppu *BetaProgramParticipationUpdate) SetModifiedStartTime(t time.Time) *BetaProgramParticipationUpdate {
	bppu.mutation.SetModifiedStartTime(t)
	return bppu
}

// SetNillableModifiedStartTime sets the "modified_start_time" field if the given value is not nil.
func (bppu *BetaProgramParticipationUpdate) SetNillableModifiedStartTime(t *time.Time) *BetaProgramParticipationUpdate {
	if t != nil {
		bppu.SetModifiedStartTime(*t)
	}
	return bppu
}

// ClearModifiedStartTime clears the value of the "modified_start_time" field.
func (bppu *BetaProgramParticipationUpdate) ClearModifiedStartTime() *BetaProgramParticipationUpdate {
	bppu.mutation.ClearModifiedStartTime()
	return bppu
}

// SetModifiedEndTime sets the "modified_end_time" field.
func (bppu *BetaProgramParticipationUpdate) SetModifiedEndTime(t time.Time) *BetaProgramParticipationUpdate {
	bppu.mutation.SetModifiedEndTime(t)
	return bppu
}

// SetNillableModifiedEndTime sets the "modified_end_time" field if the given value is not nil.
func (bppu *BetaProgramParticipationUpdate) SetNillableModifiedEndTime(t *time.Time) *BetaProgramParticipationUpdate {
	if t != nil {
		bppu.SetModifiedEndTime(*t)
	}
	return bppu
}

// ClearModifiedEndTime clears the value of the "modified_end_time" field.
func (bppu *BetaProgramParticipationUpdate) ClearModifiedEndTime() *BetaProgramParticipationUpdate {
	bppu.mutation.ClearModifiedEndTime()
	return bppu
}

// SetBetaProgram sets the "beta_program" edge to the BetaProgram entity.
func (bppu *BetaProgramParticipationUpdate) SetBetaProgram(b *BetaProgram) *BetaProgramParticipationUpdate {
	return bppu.SetBetaProgramID(b.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (bppu *BetaProgramParticipationUpdate) SetCustomer(c *Customer) *BetaProgramParticipationUpdate {
	return bppu.SetCustomerID(c.ID)
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (bppu *BetaProgramParticipationUpdate) SetClinic(c *Clinic) *BetaProgramParticipationUpdate {
	return bppu.SetClinicID(c.ID)
}

// Mutation returns the BetaProgramParticipationMutation object of the builder.
func (bppu *BetaProgramParticipationUpdate) Mutation() *BetaProgramParticipationMutation {
	return bppu.mutation
}

// ClearBetaProgram clears the "beta_program" edge to the BetaProgram entity.
func (bppu *BetaProgramParticipationUpdate) ClearBetaProgram() *BetaProgramParticipationUpdate {
	bppu.mutation.ClearBetaProgram()
	return bppu
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (bppu *BetaProgramParticipationUpdate) ClearCustomer() *BetaProgramParticipationUpdate {
	bppu.mutation.ClearCustomer()
	return bppu
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (bppu *BetaProgramParticipationUpdate) ClearClinic() *BetaProgramParticipationUpdate {
	bppu.mutation.ClearClinic()
	return bppu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bppu *BetaProgramParticipationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bppu.sqlSave, bppu.mutation, bppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bppu *BetaProgramParticipationUpdate) SaveX(ctx context.Context) int {
	affected, err := bppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bppu *BetaProgramParticipationUpdate) Exec(ctx context.Context) error {
	_, err := bppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bppu *BetaProgramParticipationUpdate) ExecX(ctx context.Context) {
	if err := bppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bppu *BetaProgramParticipationUpdate) check() error {
	if _, ok := bppu.mutation.BetaProgramID(); bppu.mutation.BetaProgramCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BetaProgramParticipation.beta_program"`)
	}
	if _, ok := bppu.mutation.CustomerID(); bppu.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BetaProgramParticipation.customer"`)
	}
	if _, ok := bppu.mutation.ClinicID(); bppu.mutation.ClinicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BetaProgramParticipation.clinic"`)
	}
	return nil
}

func (bppu *BetaProgramParticipationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bppu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(betaprogramparticipation.Table, betaprogramparticipation.Columns, sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt))
	if ps := bppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bppu.mutation.IsActive(); ok {
		_spec.SetField(betaprogramparticipation.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := bppu.mutation.HasModifiedStartTime(); ok {
		_spec.SetField(betaprogramparticipation.FieldHasModifiedStartTime, field.TypeBool, value)
	}
	if value, ok := bppu.mutation.ModifiedStartTime(); ok {
		_spec.SetField(betaprogramparticipation.FieldModifiedStartTime, field.TypeTime, value)
	}
	if bppu.mutation.ModifiedStartTimeCleared() {
		_spec.ClearField(betaprogramparticipation.FieldModifiedStartTime, field.TypeTime)
	}
	if value, ok := bppu.mutation.ModifiedEndTime(); ok {
		_spec.SetField(betaprogramparticipation.FieldModifiedEndTime, field.TypeTime, value)
	}
	if bppu.mutation.ModifiedEndTimeCleared() {
		_spec.ClearField(betaprogramparticipation.FieldModifiedEndTime, field.TypeTime)
	}
	if bppu.mutation.BetaProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   betaprogramparticipation.BetaProgramTable,
			Columns: []string{betaprogramparticipation.BetaProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogram.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bppu.mutation.BetaProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   betaprogramparticipation.BetaProgramTable,
			Columns: []string{betaprogramparticipation.BetaProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogram.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bppu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   betaprogramparticipation.CustomerTable,
			Columns: []string{betaprogramparticipation.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bppu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   betaprogramparticipation.CustomerTable,
			Columns: []string{betaprogramparticipation.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bppu.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   betaprogramparticipation.ClinicTable,
			Columns: []string{betaprogramparticipation.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bppu.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   betaprogramparticipation.ClinicTable,
			Columns: []string{betaprogramparticipation.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{betaprogramparticipation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bppu.mutation.done = true
	return n, nil
}

// BetaProgramParticipationUpdateOne is the builder for updating a single BetaProgramParticipation entity.
type BetaProgramParticipationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BetaProgramParticipationMutation
}

// SetBetaProgramID sets the "beta_program_id" field.
func (bppuo *BetaProgramParticipationUpdateOne) SetBetaProgramID(i int) *BetaProgramParticipationUpdateOne {
	bppuo.mutation.SetBetaProgramID(i)
	return bppuo
}

// SetNillableBetaProgramID sets the "beta_program_id" field if the given value is not nil.
func (bppuo *BetaProgramParticipationUpdateOne) SetNillableBetaProgramID(i *int) *BetaProgramParticipationUpdateOne {
	if i != nil {
		bppuo.SetBetaProgramID(*i)
	}
	return bppuo
}

// SetCustomerID sets the "customer_id" field.
func (bppuo *BetaProgramParticipationUpdateOne) SetCustomerID(i int) *BetaProgramParticipationUpdateOne {
	bppuo.mutation.SetCustomerID(i)
	return bppuo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (bppuo *BetaProgramParticipationUpdateOne) SetNillableCustomerID(i *int) *BetaProgramParticipationUpdateOne {
	if i != nil {
		bppuo.SetCustomerID(*i)
	}
	return bppuo
}

// SetClinicID sets the "clinic_id" field.
func (bppuo *BetaProgramParticipationUpdateOne) SetClinicID(i int) *BetaProgramParticipationUpdateOne {
	bppuo.mutation.SetClinicID(i)
	return bppuo
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (bppuo *BetaProgramParticipationUpdateOne) SetNillableClinicID(i *int) *BetaProgramParticipationUpdateOne {
	if i != nil {
		bppuo.SetClinicID(*i)
	}
	return bppuo
}

// SetIsActive sets the "is_active" field.
func (bppuo *BetaProgramParticipationUpdateOne) SetIsActive(b bool) *BetaProgramParticipationUpdateOne {
	bppuo.mutation.SetIsActive(b)
	return bppuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (bppuo *BetaProgramParticipationUpdateOne) SetNillableIsActive(b *bool) *BetaProgramParticipationUpdateOne {
	if b != nil {
		bppuo.SetIsActive(*b)
	}
	return bppuo
}

// SetHasModifiedStartTime sets the "has_modified_start_time" field.
func (bppuo *BetaProgramParticipationUpdateOne) SetHasModifiedStartTime(b bool) *BetaProgramParticipationUpdateOne {
	bppuo.mutation.SetHasModifiedStartTime(b)
	return bppuo
}

// SetNillableHasModifiedStartTime sets the "has_modified_start_time" field if the given value is not nil.
func (bppuo *BetaProgramParticipationUpdateOne) SetNillableHasModifiedStartTime(b *bool) *BetaProgramParticipationUpdateOne {
	if b != nil {
		bppuo.SetHasModifiedStartTime(*b)
	}
	return bppuo
}

// SetModifiedStartTime sets the "modified_start_time" field.
func (bppuo *BetaProgramParticipationUpdateOne) SetModifiedStartTime(t time.Time) *BetaProgramParticipationUpdateOne {
	bppuo.mutation.SetModifiedStartTime(t)
	return bppuo
}

// SetNillableModifiedStartTime sets the "modified_start_time" field if the given value is not nil.
func (bppuo *BetaProgramParticipationUpdateOne) SetNillableModifiedStartTime(t *time.Time) *BetaProgramParticipationUpdateOne {
	if t != nil {
		bppuo.SetModifiedStartTime(*t)
	}
	return bppuo
}

// ClearModifiedStartTime clears the value of the "modified_start_time" field.
func (bppuo *BetaProgramParticipationUpdateOne) ClearModifiedStartTime() *BetaProgramParticipationUpdateOne {
	bppuo.mutation.ClearModifiedStartTime()
	return bppuo
}

// SetModifiedEndTime sets the "modified_end_time" field.
func (bppuo *BetaProgramParticipationUpdateOne) SetModifiedEndTime(t time.Time) *BetaProgramParticipationUpdateOne {
	bppuo.mutation.SetModifiedEndTime(t)
	return bppuo
}

// SetNillableModifiedEndTime sets the "modified_end_time" field if the given value is not nil.
func (bppuo *BetaProgramParticipationUpdateOne) SetNillableModifiedEndTime(t *time.Time) *BetaProgramParticipationUpdateOne {
	if t != nil {
		bppuo.SetModifiedEndTime(*t)
	}
	return bppuo
}

// ClearModifiedEndTime clears the value of the "modified_end_time" field.
func (bppuo *BetaProgramParticipationUpdateOne) ClearModifiedEndTime() *BetaProgramParticipationUpdateOne {
	bppuo.mutation.ClearModifiedEndTime()
	return bppuo
}

// SetBetaProgram sets the "beta_program" edge to the BetaProgram entity.
func (bppuo *BetaProgramParticipationUpdateOne) SetBetaProgram(b *BetaProgram) *BetaProgramParticipationUpdateOne {
	return bppuo.SetBetaProgramID(b.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (bppuo *BetaProgramParticipationUpdateOne) SetCustomer(c *Customer) *BetaProgramParticipationUpdateOne {
	return bppuo.SetCustomerID(c.ID)
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (bppuo *BetaProgramParticipationUpdateOne) SetClinic(c *Clinic) *BetaProgramParticipationUpdateOne {
	return bppuo.SetClinicID(c.ID)
}

// Mutation returns the BetaProgramParticipationMutation object of the builder.
func (bppuo *BetaProgramParticipationUpdateOne) Mutation() *BetaProgramParticipationMutation {
	return bppuo.mutation
}

// ClearBetaProgram clears the "beta_program" edge to the BetaProgram entity.
func (bppuo *BetaProgramParticipationUpdateOne) ClearBetaProgram() *BetaProgramParticipationUpdateOne {
	bppuo.mutation.ClearBetaProgram()
	return bppuo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (bppuo *BetaProgramParticipationUpdateOne) ClearCustomer() *BetaProgramParticipationUpdateOne {
	bppuo.mutation.ClearCustomer()
	return bppuo
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (bppuo *BetaProgramParticipationUpdateOne) ClearClinic() *BetaProgramParticipationUpdateOne {
	bppuo.mutation.ClearClinic()
	return bppuo
}

// Where appends a list predicates to the BetaProgramParticipationUpdate builder.
func (bppuo *BetaProgramParticipationUpdateOne) Where(ps ...predicate.BetaProgramParticipation) *BetaProgramParticipationUpdateOne {
	bppuo.mutation.Where(ps...)
	return bppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bppuo *BetaProgramParticipationUpdateOne) Select(field string, fields ...string) *BetaProgramParticipationUpdateOne {
	bppuo.fields = append([]string{field}, fields...)
	return bppuo
}

// Save executes the query and returns the updated BetaProgramParticipation entity.
func (bppuo *BetaProgramParticipationUpdateOne) Save(ctx context.Context) (*BetaProgramParticipation, error) {
	return withHooks(ctx, bppuo.sqlSave, bppuo.mutation, bppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bppuo *BetaProgramParticipationUpdateOne) SaveX(ctx context.Context) *BetaProgramParticipation {
	node, err := bppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bppuo *BetaProgramParticipationUpdateOne) Exec(ctx context.Context) error {
	_, err := bppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bppuo *BetaProgramParticipationUpdateOne) ExecX(ctx context.Context) {
	if err := bppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bppuo *BetaProgramParticipationUpdateOne) check() error {
	if _, ok := bppuo.mutation.BetaProgramID(); bppuo.mutation.BetaProgramCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BetaProgramParticipation.beta_program"`)
	}
	if _, ok := bppuo.mutation.CustomerID(); bppuo.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BetaProgramParticipation.customer"`)
	}
	if _, ok := bppuo.mutation.ClinicID(); bppuo.mutation.ClinicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BetaProgramParticipation.clinic"`)
	}
	return nil
}

func (bppuo *BetaProgramParticipationUpdateOne) sqlSave(ctx context.Context) (_node *BetaProgramParticipation, err error) {
	if err := bppuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(betaprogramparticipation.Table, betaprogramparticipation.Columns, sqlgraph.NewFieldSpec(betaprogramparticipation.FieldID, field.TypeInt))
	id, ok := bppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BetaProgramParticipation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, betaprogramparticipation.FieldID)
		for _, f := range fields {
			if !betaprogramparticipation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != betaprogramparticipation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bppuo.mutation.IsActive(); ok {
		_spec.SetField(betaprogramparticipation.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := bppuo.mutation.HasModifiedStartTime(); ok {
		_spec.SetField(betaprogramparticipation.FieldHasModifiedStartTime, field.TypeBool, value)
	}
	if value, ok := bppuo.mutation.ModifiedStartTime(); ok {
		_spec.SetField(betaprogramparticipation.FieldModifiedStartTime, field.TypeTime, value)
	}
	if bppuo.mutation.ModifiedStartTimeCleared() {
		_spec.ClearField(betaprogramparticipation.FieldModifiedStartTime, field.TypeTime)
	}
	if value, ok := bppuo.mutation.ModifiedEndTime(); ok {
		_spec.SetField(betaprogramparticipation.FieldModifiedEndTime, field.TypeTime, value)
	}
	if bppuo.mutation.ModifiedEndTimeCleared() {
		_spec.ClearField(betaprogramparticipation.FieldModifiedEndTime, field.TypeTime)
	}
	if bppuo.mutation.BetaProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   betaprogramparticipation.BetaProgramTable,
			Columns: []string{betaprogramparticipation.BetaProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogram.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bppuo.mutation.BetaProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   betaprogramparticipation.BetaProgramTable,
			Columns: []string{betaprogramparticipation.BetaProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(betaprogram.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bppuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   betaprogramparticipation.CustomerTable,
			Columns: []string{betaprogramparticipation.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bppuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   betaprogramparticipation.CustomerTable,
			Columns: []string{betaprogramparticipation.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bppuo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   betaprogramparticipation.ClinicTable,
			Columns: []string{betaprogramparticipation.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bppuo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   betaprogramparticipation.ClinicTable,
			Columns: []string{betaprogramparticipation.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BetaProgramParticipation{config: bppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{betaprogramparticipation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bppuo.mutation.done = true
	return _node, nil
}
