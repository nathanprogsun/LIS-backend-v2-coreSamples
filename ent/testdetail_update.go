// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/test"
	"coresamples/ent/testdetail"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestDetailUpdate is the builder for updating TestDetail entities.
type TestDetailUpdate struct {
	config
	hooks    []Hook
	mutation *TestDetailMutation
}

// Where appends a list predicates to the TestDetailUpdate builder.
func (tdu *TestDetailUpdate) Where(ps ...predicate.TestDetail) *TestDetailUpdate {
	tdu.mutation.Where(ps...)
	return tdu
}

// SetTestID sets the "test_id" field.
func (tdu *TestDetailUpdate) SetTestID(i int) *TestDetailUpdate {
	tdu.mutation.SetTestID(i)
	return tdu
}

// SetNillableTestID sets the "test_id" field if the given value is not nil.
func (tdu *TestDetailUpdate) SetNillableTestID(i *int) *TestDetailUpdate {
	if i != nil {
		tdu.SetTestID(*i)
	}
	return tdu
}

// SetTestDetailName sets the "test_detail_name" field.
func (tdu *TestDetailUpdate) SetTestDetailName(s string) *TestDetailUpdate {
	tdu.mutation.SetTestDetailName(s)
	return tdu
}

// SetNillableTestDetailName sets the "test_detail_name" field if the given value is not nil.
func (tdu *TestDetailUpdate) SetNillableTestDetailName(s *string) *TestDetailUpdate {
	if s != nil {
		tdu.SetTestDetailName(*s)
	}
	return tdu
}

// SetTestDetailsValue sets the "test_details_value" field.
func (tdu *TestDetailUpdate) SetTestDetailsValue(s string) *TestDetailUpdate {
	tdu.mutation.SetTestDetailsValue(s)
	return tdu
}

// SetNillableTestDetailsValue sets the "test_details_value" field if the given value is not nil.
func (tdu *TestDetailUpdate) SetNillableTestDetailsValue(s *string) *TestDetailUpdate {
	if s != nil {
		tdu.SetTestDetailsValue(*s)
	}
	return tdu
}

// SetIsActive sets the "isActive" field.
func (tdu *TestDetailUpdate) SetIsActive(b bool) *TestDetailUpdate {
	tdu.mutation.SetIsActive(b)
	return tdu
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (tdu *TestDetailUpdate) SetNillableIsActive(b *bool) *TestDetailUpdate {
	if b != nil {
		tdu.SetIsActive(*b)
	}
	return tdu
}

// SetTest sets the "test" edge to the Test entity.
func (tdu *TestDetailUpdate) SetTest(t *Test) *TestDetailUpdate {
	return tdu.SetTestID(t.ID)
}

// Mutation returns the TestDetailMutation object of the builder.
func (tdu *TestDetailUpdate) Mutation() *TestDetailMutation {
	return tdu.mutation
}

// ClearTest clears the "test" edge to the Test entity.
func (tdu *TestDetailUpdate) ClearTest() *TestDetailUpdate {
	tdu.mutation.ClearTest()
	return tdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tdu *TestDetailUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tdu.sqlSave, tdu.mutation, tdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tdu *TestDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := tdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tdu *TestDetailUpdate) Exec(ctx context.Context) error {
	_, err := tdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdu *TestDetailUpdate) ExecX(ctx context.Context) {
	if err := tdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdu *TestDetailUpdate) check() error {
	if _, ok := tdu.mutation.TestID(); tdu.mutation.TestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TestDetail.test"`)
	}
	return nil
}

func (tdu *TestDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(testdetail.Table, testdetail.Columns, sqlgraph.NewFieldSpec(testdetail.FieldID, field.TypeInt))
	if ps := tdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tdu.mutation.TestDetailName(); ok {
		_spec.SetField(testdetail.FieldTestDetailName, field.TypeString, value)
	}
	if value, ok := tdu.mutation.TestDetailsValue(); ok {
		_spec.SetField(testdetail.FieldTestDetailsValue, field.TypeString, value)
	}
	if value, ok := tdu.mutation.IsActive(); ok {
		_spec.SetField(testdetail.FieldIsActive, field.TypeBool, value)
	}
	if tdu.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testdetail.TestTable,
			Columns: []string{testdetail.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tdu.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testdetail.TestTable,
			Columns: []string{testdetail.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tdu.mutation.done = true
	return n, nil
}

// TestDetailUpdateOne is the builder for updating a single TestDetail entity.
type TestDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestDetailMutation
}

// SetTestID sets the "test_id" field.
func (tduo *TestDetailUpdateOne) SetTestID(i int) *TestDetailUpdateOne {
	tduo.mutation.SetTestID(i)
	return tduo
}

// SetNillableTestID sets the "test_id" field if the given value is not nil.
func (tduo *TestDetailUpdateOne) SetNillableTestID(i *int) *TestDetailUpdateOne {
	if i != nil {
		tduo.SetTestID(*i)
	}
	return tduo
}

// SetTestDetailName sets the "test_detail_name" field.
func (tduo *TestDetailUpdateOne) SetTestDetailName(s string) *TestDetailUpdateOne {
	tduo.mutation.SetTestDetailName(s)
	return tduo
}

// SetNillableTestDetailName sets the "test_detail_name" field if the given value is not nil.
func (tduo *TestDetailUpdateOne) SetNillableTestDetailName(s *string) *TestDetailUpdateOne {
	if s != nil {
		tduo.SetTestDetailName(*s)
	}
	return tduo
}

// SetTestDetailsValue sets the "test_details_value" field.
func (tduo *TestDetailUpdateOne) SetTestDetailsValue(s string) *TestDetailUpdateOne {
	tduo.mutation.SetTestDetailsValue(s)
	return tduo
}

// SetNillableTestDetailsValue sets the "test_details_value" field if the given value is not nil.
func (tduo *TestDetailUpdateOne) SetNillableTestDetailsValue(s *string) *TestDetailUpdateOne {
	if s != nil {
		tduo.SetTestDetailsValue(*s)
	}
	return tduo
}

// SetIsActive sets the "isActive" field.
func (tduo *TestDetailUpdateOne) SetIsActive(b bool) *TestDetailUpdateOne {
	tduo.mutation.SetIsActive(b)
	return tduo
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (tduo *TestDetailUpdateOne) SetNillableIsActive(b *bool) *TestDetailUpdateOne {
	if b != nil {
		tduo.SetIsActive(*b)
	}
	return tduo
}

// SetTest sets the "test" edge to the Test entity.
func (tduo *TestDetailUpdateOne) SetTest(t *Test) *TestDetailUpdateOne {
	return tduo.SetTestID(t.ID)
}

// Mutation returns the TestDetailMutation object of the builder.
func (tduo *TestDetailUpdateOne) Mutation() *TestDetailMutation {
	return tduo.mutation
}

// ClearTest clears the "test" edge to the Test entity.
func (tduo *TestDetailUpdateOne) ClearTest() *TestDetailUpdateOne {
	tduo.mutation.ClearTest()
	return tduo
}

// Where appends a list predicates to the TestDetailUpdate builder.
func (tduo *TestDetailUpdateOne) Where(ps ...predicate.TestDetail) *TestDetailUpdateOne {
	tduo.mutation.Where(ps...)
	return tduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tduo *TestDetailUpdateOne) Select(field string, fields ...string) *TestDetailUpdateOne {
	tduo.fields = append([]string{field}, fields...)
	return tduo
}

// Save executes the query and returns the updated TestDetail entity.
func (tduo *TestDetailUpdateOne) Save(ctx context.Context) (*TestDetail, error) {
	return withHooks(ctx, tduo.sqlSave, tduo.mutation, tduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tduo *TestDetailUpdateOne) SaveX(ctx context.Context) *TestDetail {
	node, err := tduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tduo *TestDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := tduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tduo *TestDetailUpdateOne) ExecX(ctx context.Context) {
	if err := tduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tduo *TestDetailUpdateOne) check() error {
	if _, ok := tduo.mutation.TestID(); tduo.mutation.TestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TestDetail.test"`)
	}
	return nil
}

func (tduo *TestDetailUpdateOne) sqlSave(ctx context.Context) (_node *TestDetail, err error) {
	if err := tduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testdetail.Table, testdetail.Columns, sqlgraph.NewFieldSpec(testdetail.FieldID, field.TypeInt))
	id, ok := tduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testdetail.FieldID)
		for _, f := range fields {
			if !testdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tduo.mutation.TestDetailName(); ok {
		_spec.SetField(testdetail.FieldTestDetailName, field.TypeString, value)
	}
	if value, ok := tduo.mutation.TestDetailsValue(); ok {
		_spec.SetField(testdetail.FieldTestDetailsValue, field.TypeString, value)
	}
	if value, ok := tduo.mutation.IsActive(); ok {
		_spec.SetField(testdetail.FieldIsActive, field.TypeBool, value)
	}
	if tduo.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testdetail.TestTable,
			Columns: []string{testdetail.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tduo.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testdetail.TestTable,
			Columns: []string{testdetail.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestDetail{config: tduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tduo.mutation.done = true
	return _node, nil
}
