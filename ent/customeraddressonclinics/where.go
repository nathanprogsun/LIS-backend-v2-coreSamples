// Code generated by ent, DO NOT EDIT.

package customeraddressonclinics

import (
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldLTE(FieldID, id))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldEQ(FieldCustomerID, v))
}

// ClinicID applies equality check predicate on the "clinic_id" field. It's identical to ClinicIDEQ.
func ClinicID(v int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldEQ(FieldClinicID, v))
}

// AddressID applies equality check predicate on the "address_id" field. It's identical to AddressIDEQ.
func AddressID(v int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldEQ(FieldAddressID, v))
}

// AddressType applies equality check predicate on the "address_type" field. It's identical to AddressTypeEQ.
func AddressType(v string) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldEQ(FieldAddressType, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldNotIn(FieldCustomerID, vs...))
}

// ClinicIDEQ applies the EQ predicate on the "clinic_id" field.
func ClinicIDEQ(v int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldEQ(FieldClinicID, v))
}

// ClinicIDNEQ applies the NEQ predicate on the "clinic_id" field.
func ClinicIDNEQ(v int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldNEQ(FieldClinicID, v))
}

// ClinicIDIn applies the In predicate on the "clinic_id" field.
func ClinicIDIn(vs ...int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldIn(FieldClinicID, vs...))
}

// ClinicIDNotIn applies the NotIn predicate on the "clinic_id" field.
func ClinicIDNotIn(vs ...int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldNotIn(FieldClinicID, vs...))
}

// AddressIDEQ applies the EQ predicate on the "address_id" field.
func AddressIDEQ(v int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldEQ(FieldAddressID, v))
}

// AddressIDNEQ applies the NEQ predicate on the "address_id" field.
func AddressIDNEQ(v int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldNEQ(FieldAddressID, v))
}

// AddressIDIn applies the In predicate on the "address_id" field.
func AddressIDIn(vs ...int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldIn(FieldAddressID, vs...))
}

// AddressIDNotIn applies the NotIn predicate on the "address_id" field.
func AddressIDNotIn(vs ...int) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldNotIn(FieldAddressID, vs...))
}

// AddressTypeEQ applies the EQ predicate on the "address_type" field.
func AddressTypeEQ(v string) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldEQ(FieldAddressType, v))
}

// AddressTypeNEQ applies the NEQ predicate on the "address_type" field.
func AddressTypeNEQ(v string) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldNEQ(FieldAddressType, v))
}

// AddressTypeIn applies the In predicate on the "address_type" field.
func AddressTypeIn(vs ...string) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldIn(FieldAddressType, vs...))
}

// AddressTypeNotIn applies the NotIn predicate on the "address_type" field.
func AddressTypeNotIn(vs ...string) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldNotIn(FieldAddressType, vs...))
}

// AddressTypeGT applies the GT predicate on the "address_type" field.
func AddressTypeGT(v string) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldGT(FieldAddressType, v))
}

// AddressTypeGTE applies the GTE predicate on the "address_type" field.
func AddressTypeGTE(v string) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldGTE(FieldAddressType, v))
}

// AddressTypeLT applies the LT predicate on the "address_type" field.
func AddressTypeLT(v string) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldLT(FieldAddressType, v))
}

// AddressTypeLTE applies the LTE predicate on the "address_type" field.
func AddressTypeLTE(v string) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldLTE(FieldAddressType, v))
}

// AddressTypeContains applies the Contains predicate on the "address_type" field.
func AddressTypeContains(v string) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldContains(FieldAddressType, v))
}

// AddressTypeHasPrefix applies the HasPrefix predicate on the "address_type" field.
func AddressTypeHasPrefix(v string) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldHasPrefix(FieldAddressType, v))
}

// AddressTypeHasSuffix applies the HasSuffix predicate on the "address_type" field.
func AddressTypeHasSuffix(v string) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldHasSuffix(FieldAddressType, v))
}

// AddressTypeIsNil applies the IsNil predicate on the "address_type" field.
func AddressTypeIsNil() predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldIsNull(FieldAddressType))
}

// AddressTypeNotNil applies the NotNil predicate on the "address_type" field.
func AddressTypeNotNil() predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldNotNull(FieldAddressType))
}

// AddressTypeEqualFold applies the EqualFold predicate on the "address_type" field.
func AddressTypeEqualFold(v string) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldEqualFold(FieldAddressType, v))
}

// AddressTypeContainsFold applies the ContainsFold predicate on the "address_type" field.
func AddressTypeContainsFold(v string) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.FieldContainsFold(FieldAddressType, v))
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClinic applies the HasEdge predicate on the "clinic" edge.
func HasClinic() predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClinicTable, ClinicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClinicWith applies the HasEdge predicate on the "clinic" edge with a given conditions (other predicates).
func HasClinicWith(preds ...predicate.Clinic) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(func(s *sql.Selector) {
		step := newClinicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAddress applies the HasEdge predicate on the "address" edge.
func HasAddress() predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AddressTable, AddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddressWith applies the HasEdge predicate on the "address" edge with a given conditions (other predicates).
func HasAddressWith(preds ...predicate.Address) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(func(s *sql.Selector) {
		step := newAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CustomerAddressOnClinics) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CustomerAddressOnClinics) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CustomerAddressOnClinics) predicate.CustomerAddressOnClinics {
	return predicate.CustomerAddressOnClinics(sql.NotPredicates(p))
}
