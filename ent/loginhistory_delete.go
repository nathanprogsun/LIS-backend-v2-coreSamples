// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/loginhistory"
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoginHistoryDelete is the builder for deleting a LoginHistory entity.
type LoginHistoryDelete struct {
	config
	hooks    []Hook
	mutation *LoginHistoryMutation
}

// Where appends a list predicates to the LoginHistoryDelete builder.
func (lhd *LoginHistoryDelete) Where(ps ...predicate.LoginHistory) *LoginHistoryDelete {
	lhd.mutation.Where(ps...)
	return lhd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lhd *LoginHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lhd.sqlExec, lhd.mutation, lhd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lhd *LoginHistoryDelete) ExecX(ctx context.Context) int {
	n, err := lhd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lhd *LoginHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(loginhistory.Table, sqlgraph.NewFieldSpec(loginhistory.FieldID, field.TypeInt))
	if ps := lhd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lhd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lhd.mutation.done = true
	return affected, err
}

// LoginHistoryDeleteOne is the builder for deleting a single LoginHistory entity.
type LoginHistoryDeleteOne struct {
	lhd *LoginHistoryDelete
}

// Where appends a list predicates to the LoginHistoryDelete builder.
func (lhdo *LoginHistoryDeleteOne) Where(ps ...predicate.LoginHistory) *LoginHistoryDeleteOne {
	lhdo.lhd.mutation.Where(ps...)
	return lhdo
}

// Exec executes the deletion query.
func (lhdo *LoginHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := lhdo.lhd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{loginhistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lhdo *LoginHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := lhdo.Exec(ctx); err != nil {
		panic(err)
	}
}
