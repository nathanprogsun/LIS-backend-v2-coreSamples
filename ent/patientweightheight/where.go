// Code generated by ent, DO NOT EDIT.

package patientweightheight

import (
	"coresamples/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldLTE(FieldID, id))
}

// PatientID applies equality check predicate on the "patient_id" field. It's identical to PatientIDEQ.
func PatientID(v int) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEQ(FieldPatientID, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEQ(FieldWeight, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEQ(FieldHeight, v))
}

// WeightUnit applies equality check predicate on the "weight_unit" field. It's identical to WeightUnitEQ.
func WeightUnit(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEQ(FieldWeightUnit, v))
}

// HeightUnit applies equality check predicate on the "height_unit" field. It's identical to HeightUnitEQ.
func HeightUnit(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEQ(FieldHeightUnit, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEQ(FieldCreatedTime, v))
}

// UpdatedTime applies equality check predicate on the "updated_time" field. It's identical to UpdatedTimeEQ.
func UpdatedTime(v time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEQ(FieldUpdatedTime, v))
}

// PatientIDEQ applies the EQ predicate on the "patient_id" field.
func PatientIDEQ(v int) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEQ(FieldPatientID, v))
}

// PatientIDNEQ applies the NEQ predicate on the "patient_id" field.
func PatientIDNEQ(v int) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldNEQ(FieldPatientID, v))
}

// PatientIDIn applies the In predicate on the "patient_id" field.
func PatientIDIn(vs ...int) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldIn(FieldPatientID, vs...))
}

// PatientIDNotIn applies the NotIn predicate on the "patient_id" field.
func PatientIDNotIn(vs ...int) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldNotIn(FieldPatientID, vs...))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldLTE(FieldWeight, v))
}

// WeightContains applies the Contains predicate on the "weight" field.
func WeightContains(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldContains(FieldWeight, v))
}

// WeightHasPrefix applies the HasPrefix predicate on the "weight" field.
func WeightHasPrefix(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldHasPrefix(FieldWeight, v))
}

// WeightHasSuffix applies the HasSuffix predicate on the "weight" field.
func WeightHasSuffix(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldHasSuffix(FieldWeight, v))
}

// WeightEqualFold applies the EqualFold predicate on the "weight" field.
func WeightEqualFold(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEqualFold(FieldWeight, v))
}

// WeightContainsFold applies the ContainsFold predicate on the "weight" field.
func WeightContainsFold(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldContainsFold(FieldWeight, v))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldLTE(FieldHeight, v))
}

// HeightContains applies the Contains predicate on the "height" field.
func HeightContains(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldContains(FieldHeight, v))
}

// HeightHasPrefix applies the HasPrefix predicate on the "height" field.
func HeightHasPrefix(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldHasPrefix(FieldHeight, v))
}

// HeightHasSuffix applies the HasSuffix predicate on the "height" field.
func HeightHasSuffix(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldHasSuffix(FieldHeight, v))
}

// HeightEqualFold applies the EqualFold predicate on the "height" field.
func HeightEqualFold(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEqualFold(FieldHeight, v))
}

// HeightContainsFold applies the ContainsFold predicate on the "height" field.
func HeightContainsFold(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldContainsFold(FieldHeight, v))
}

// WeightUnitEQ applies the EQ predicate on the "weight_unit" field.
func WeightUnitEQ(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEQ(FieldWeightUnit, v))
}

// WeightUnitNEQ applies the NEQ predicate on the "weight_unit" field.
func WeightUnitNEQ(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldNEQ(FieldWeightUnit, v))
}

// WeightUnitIn applies the In predicate on the "weight_unit" field.
func WeightUnitIn(vs ...string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldIn(FieldWeightUnit, vs...))
}

// WeightUnitNotIn applies the NotIn predicate on the "weight_unit" field.
func WeightUnitNotIn(vs ...string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldNotIn(FieldWeightUnit, vs...))
}

// WeightUnitGT applies the GT predicate on the "weight_unit" field.
func WeightUnitGT(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldGT(FieldWeightUnit, v))
}

// WeightUnitGTE applies the GTE predicate on the "weight_unit" field.
func WeightUnitGTE(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldGTE(FieldWeightUnit, v))
}

// WeightUnitLT applies the LT predicate on the "weight_unit" field.
func WeightUnitLT(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldLT(FieldWeightUnit, v))
}

// WeightUnitLTE applies the LTE predicate on the "weight_unit" field.
func WeightUnitLTE(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldLTE(FieldWeightUnit, v))
}

// WeightUnitContains applies the Contains predicate on the "weight_unit" field.
func WeightUnitContains(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldContains(FieldWeightUnit, v))
}

// WeightUnitHasPrefix applies the HasPrefix predicate on the "weight_unit" field.
func WeightUnitHasPrefix(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldHasPrefix(FieldWeightUnit, v))
}

// WeightUnitHasSuffix applies the HasSuffix predicate on the "weight_unit" field.
func WeightUnitHasSuffix(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldHasSuffix(FieldWeightUnit, v))
}

// WeightUnitEqualFold applies the EqualFold predicate on the "weight_unit" field.
func WeightUnitEqualFold(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEqualFold(FieldWeightUnit, v))
}

// WeightUnitContainsFold applies the ContainsFold predicate on the "weight_unit" field.
func WeightUnitContainsFold(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldContainsFold(FieldWeightUnit, v))
}

// HeightUnitEQ applies the EQ predicate on the "height_unit" field.
func HeightUnitEQ(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEQ(FieldHeightUnit, v))
}

// HeightUnitNEQ applies the NEQ predicate on the "height_unit" field.
func HeightUnitNEQ(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldNEQ(FieldHeightUnit, v))
}

// HeightUnitIn applies the In predicate on the "height_unit" field.
func HeightUnitIn(vs ...string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldIn(FieldHeightUnit, vs...))
}

// HeightUnitNotIn applies the NotIn predicate on the "height_unit" field.
func HeightUnitNotIn(vs ...string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldNotIn(FieldHeightUnit, vs...))
}

// HeightUnitGT applies the GT predicate on the "height_unit" field.
func HeightUnitGT(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldGT(FieldHeightUnit, v))
}

// HeightUnitGTE applies the GTE predicate on the "height_unit" field.
func HeightUnitGTE(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldGTE(FieldHeightUnit, v))
}

// HeightUnitLT applies the LT predicate on the "height_unit" field.
func HeightUnitLT(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldLT(FieldHeightUnit, v))
}

// HeightUnitLTE applies the LTE predicate on the "height_unit" field.
func HeightUnitLTE(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldLTE(FieldHeightUnit, v))
}

// HeightUnitContains applies the Contains predicate on the "height_unit" field.
func HeightUnitContains(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldContains(FieldHeightUnit, v))
}

// HeightUnitHasPrefix applies the HasPrefix predicate on the "height_unit" field.
func HeightUnitHasPrefix(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldHasPrefix(FieldHeightUnit, v))
}

// HeightUnitHasSuffix applies the HasSuffix predicate on the "height_unit" field.
func HeightUnitHasSuffix(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldHasSuffix(FieldHeightUnit, v))
}

// HeightUnitEqualFold applies the EqualFold predicate on the "height_unit" field.
func HeightUnitEqualFold(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEqualFold(FieldHeightUnit, v))
}

// HeightUnitContainsFold applies the ContainsFold predicate on the "height_unit" field.
func HeightUnitContainsFold(v string) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldContainsFold(FieldHeightUnit, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldLTE(FieldCreatedTime, v))
}

// UpdatedTimeEQ applies the EQ predicate on the "updated_time" field.
func UpdatedTimeEQ(v time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedTimeNEQ applies the NEQ predicate on the "updated_time" field.
func UpdatedTimeNEQ(v time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldNEQ(FieldUpdatedTime, v))
}

// UpdatedTimeIn applies the In predicate on the "updated_time" field.
func UpdatedTimeIn(vs ...time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeNotIn applies the NotIn predicate on the "updated_time" field.
func UpdatedTimeNotIn(vs ...time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldNotIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeGT applies the GT predicate on the "updated_time" field.
func UpdatedTimeGT(v time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldGT(FieldUpdatedTime, v))
}

// UpdatedTimeGTE applies the GTE predicate on the "updated_time" field.
func UpdatedTimeGTE(v time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldGTE(FieldUpdatedTime, v))
}

// UpdatedTimeLT applies the LT predicate on the "updated_time" field.
func UpdatedTimeLT(v time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldLT(FieldUpdatedTime, v))
}

// UpdatedTimeLTE applies the LTE predicate on the "updated_time" field.
func UpdatedTimeLTE(v time.Time) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldLTE(FieldUpdatedTime, v))
}

// UpdatedTimeIsNil applies the IsNil predicate on the "updated_time" field.
func UpdatedTimeIsNil() predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldIsNull(FieldUpdatedTime))
}

// UpdatedTimeNotNil applies the NotNil predicate on the "updated_time" field.
func UpdatedTimeNotNil() predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.FieldNotNull(FieldUpdatedTime))
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(func(s *sql.Selector) {
		step := newPatientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PatientWeightHeight) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PatientWeightHeight) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PatientWeightHeight) predicate.PatientWeightHeight {
	return predicate.PatientWeightHeight(sql.NotPredicates(p))
}
