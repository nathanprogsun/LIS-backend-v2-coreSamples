// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/address"
	"coresamples/ent/clinic"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/patient"
	"coresamples/ent/patientweightheight"
	"coresamples/ent/predicate"
	"coresamples/ent/sample"
	"coresamples/ent/setting"
	"coresamples/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PatientUpdate is the builder for updating Patient entities.
type PatientUpdate struct {
	config
	hooks    []Hook
	mutation *PatientMutation
}

// Where appends a list predicates to the PatientUpdate builder.
func (pu *PatientUpdate) Where(ps ...predicate.Patient) *PatientUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *PatientUpdate) SetUserID(i int) *PatientUpdate {
	pu.mutation.SetUserID(i)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableUserID(i *int) *PatientUpdate {
	if i != nil {
		pu.SetUserID(*i)
	}
	return pu
}

// ClearUserID clears the value of the "user_id" field.
func (pu *PatientUpdate) ClearUserID() *PatientUpdate {
	pu.mutation.ClearUserID()
	return pu
}

// SetPatientType sets the "patient_type" field.
func (pu *PatientUpdate) SetPatientType(s string) *PatientUpdate {
	pu.mutation.SetPatientType(s)
	return pu
}

// SetNillablePatientType sets the "patient_type" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientType(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientType(*s)
	}
	return pu
}

// SetOriginalPatientID sets the "original_patient_id" field.
func (pu *PatientUpdate) SetOriginalPatientID(i int) *PatientUpdate {
	pu.mutation.ResetOriginalPatientID()
	pu.mutation.SetOriginalPatientID(i)
	return pu
}

// SetNillableOriginalPatientID sets the "original_patient_id" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableOriginalPatientID(i *int) *PatientUpdate {
	if i != nil {
		pu.SetOriginalPatientID(*i)
	}
	return pu
}

// AddOriginalPatientID adds i to the "original_patient_id" field.
func (pu *PatientUpdate) AddOriginalPatientID(i int) *PatientUpdate {
	pu.mutation.AddOriginalPatientID(i)
	return pu
}

// ClearOriginalPatientID clears the value of the "original_patient_id" field.
func (pu *PatientUpdate) ClearOriginalPatientID() *PatientUpdate {
	pu.mutation.ClearOriginalPatientID()
	return pu
}

// SetPatientGender sets the "patient_gender" field.
func (pu *PatientUpdate) SetPatientGender(s string) *PatientUpdate {
	pu.mutation.SetPatientGender(s)
	return pu
}

// SetNillablePatientGender sets the "patient_gender" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientGender(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientGender(*s)
	}
	return pu
}

// ClearPatientGender clears the value of the "patient_gender" field.
func (pu *PatientUpdate) ClearPatientGender() *PatientUpdate {
	pu.mutation.ClearPatientGender()
	return pu
}

// SetPatientFirstName sets the "patient_first_name" field.
func (pu *PatientUpdate) SetPatientFirstName(s string) *PatientUpdate {
	pu.mutation.SetPatientFirstName(s)
	return pu
}

// SetNillablePatientFirstName sets the "patient_first_name" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientFirstName(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientFirstName(*s)
	}
	return pu
}

// ClearPatientFirstName clears the value of the "patient_first_name" field.
func (pu *PatientUpdate) ClearPatientFirstName() *PatientUpdate {
	pu.mutation.ClearPatientFirstName()
	return pu
}

// SetPatientLastName sets the "patient_last_name" field.
func (pu *PatientUpdate) SetPatientLastName(s string) *PatientUpdate {
	pu.mutation.SetPatientLastName(s)
	return pu
}

// SetNillablePatientLastName sets the "patient_last_name" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientLastName(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientLastName(*s)
	}
	return pu
}

// ClearPatientLastName clears the value of the "patient_last_name" field.
func (pu *PatientUpdate) ClearPatientLastName() *PatientUpdate {
	pu.mutation.ClearPatientLastName()
	return pu
}

// SetPatientMiddleName sets the "patient_middle_name" field.
func (pu *PatientUpdate) SetPatientMiddleName(s string) *PatientUpdate {
	pu.mutation.SetPatientMiddleName(s)
	return pu
}

// SetNillablePatientMiddleName sets the "patient_middle_name" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientMiddleName(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientMiddleName(*s)
	}
	return pu
}

// ClearPatientMiddleName clears the value of the "patient_middle_name" field.
func (pu *PatientUpdate) ClearPatientMiddleName() *PatientUpdate {
	pu.mutation.ClearPatientMiddleName()
	return pu
}

// SetPatientMedicalRecordNumber sets the "patient_medical_record_number" field.
func (pu *PatientUpdate) SetPatientMedicalRecordNumber(s string) *PatientUpdate {
	pu.mutation.SetPatientMedicalRecordNumber(s)
	return pu
}

// SetNillablePatientMedicalRecordNumber sets the "patient_medical_record_number" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientMedicalRecordNumber(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientMedicalRecordNumber(*s)
	}
	return pu
}

// ClearPatientMedicalRecordNumber clears the value of the "patient_medical_record_number" field.
func (pu *PatientUpdate) ClearPatientMedicalRecordNumber() *PatientUpdate {
	pu.mutation.ClearPatientMedicalRecordNumber()
	return pu
}

// SetPatientLegalFirstname sets the "patient_legal_firstname" field.
func (pu *PatientUpdate) SetPatientLegalFirstname(s string) *PatientUpdate {
	pu.mutation.SetPatientLegalFirstname(s)
	return pu
}

// SetNillablePatientLegalFirstname sets the "patient_legal_firstname" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientLegalFirstname(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientLegalFirstname(*s)
	}
	return pu
}

// ClearPatientLegalFirstname clears the value of the "patient_legal_firstname" field.
func (pu *PatientUpdate) ClearPatientLegalFirstname() *PatientUpdate {
	pu.mutation.ClearPatientLegalFirstname()
	return pu
}

// SetPatientLegalLastname sets the "patient_legal_lastname" field.
func (pu *PatientUpdate) SetPatientLegalLastname(s string) *PatientUpdate {
	pu.mutation.SetPatientLegalLastname(s)
	return pu
}

// SetNillablePatientLegalLastname sets the "patient_legal_lastname" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientLegalLastname(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientLegalLastname(*s)
	}
	return pu
}

// ClearPatientLegalLastname clears the value of the "patient_legal_lastname" field.
func (pu *PatientUpdate) ClearPatientLegalLastname() *PatientUpdate {
	pu.mutation.ClearPatientLegalLastname()
	return pu
}

// SetPatientHonorific sets the "patient_honorific" field.
func (pu *PatientUpdate) SetPatientHonorific(s string) *PatientUpdate {
	pu.mutation.SetPatientHonorific(s)
	return pu
}

// SetNillablePatientHonorific sets the "patient_honorific" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientHonorific(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientHonorific(*s)
	}
	return pu
}

// ClearPatientHonorific clears the value of the "patient_honorific" field.
func (pu *PatientUpdate) ClearPatientHonorific() *PatientUpdate {
	pu.mutation.ClearPatientHonorific()
	return pu
}

// SetPatientSuffix sets the "patient_suffix" field.
func (pu *PatientUpdate) SetPatientSuffix(s string) *PatientUpdate {
	pu.mutation.SetPatientSuffix(s)
	return pu
}

// SetNillablePatientSuffix sets the "patient_suffix" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientSuffix(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientSuffix(*s)
	}
	return pu
}

// ClearPatientSuffix clears the value of the "patient_suffix" field.
func (pu *PatientUpdate) ClearPatientSuffix() *PatientUpdate {
	pu.mutation.ClearPatientSuffix()
	return pu
}

// SetPatientMarital sets the "patient_marital" field.
func (pu *PatientUpdate) SetPatientMarital(s string) *PatientUpdate {
	pu.mutation.SetPatientMarital(s)
	return pu
}

// SetNillablePatientMarital sets the "patient_marital" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientMarital(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientMarital(*s)
	}
	return pu
}

// ClearPatientMarital clears the value of the "patient_marital" field.
func (pu *PatientUpdate) ClearPatientMarital() *PatientUpdate {
	pu.mutation.ClearPatientMarital()
	return pu
}

// SetPatientEthnicity sets the "patient_ethnicity" field.
func (pu *PatientUpdate) SetPatientEthnicity(s string) *PatientUpdate {
	pu.mutation.SetPatientEthnicity(s)
	return pu
}

// SetNillablePatientEthnicity sets the "patient_ethnicity" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientEthnicity(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientEthnicity(*s)
	}
	return pu
}

// ClearPatientEthnicity clears the value of the "patient_ethnicity" field.
func (pu *PatientUpdate) ClearPatientEthnicity() *PatientUpdate {
	pu.mutation.ClearPatientEthnicity()
	return pu
}

// SetPatientBirthdate sets the "patient_birthdate" field.
func (pu *PatientUpdate) SetPatientBirthdate(s string) *PatientUpdate {
	pu.mutation.SetPatientBirthdate(s)
	return pu
}

// SetNillablePatientBirthdate sets the "patient_birthdate" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientBirthdate(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientBirthdate(*s)
	}
	return pu
}

// ClearPatientBirthdate clears the value of the "patient_birthdate" field.
func (pu *PatientUpdate) ClearPatientBirthdate() *PatientUpdate {
	pu.mutation.ClearPatientBirthdate()
	return pu
}

// SetPatientSsn sets the "patient_ssn" field.
func (pu *PatientUpdate) SetPatientSsn(s string) *PatientUpdate {
	pu.mutation.SetPatientSsn(s)
	return pu
}

// SetNillablePatientSsn sets the "patient_ssn" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientSsn(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientSsn(*s)
	}
	return pu
}

// ClearPatientSsn clears the value of the "patient_ssn" field.
func (pu *PatientUpdate) ClearPatientSsn() *PatientUpdate {
	pu.mutation.ClearPatientSsn()
	return pu
}

// SetPatientHeight sets the "patient_height" field.
func (pu *PatientUpdate) SetPatientHeight(s string) *PatientUpdate {
	pu.mutation.SetPatientHeight(s)
	return pu
}

// SetNillablePatientHeight sets the "patient_height" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientHeight(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientHeight(*s)
	}
	return pu
}

// ClearPatientHeight clears the value of the "patient_height" field.
func (pu *PatientUpdate) ClearPatientHeight() *PatientUpdate {
	pu.mutation.ClearPatientHeight()
	return pu
}

// SetPatientWeight sets the "patient_weight" field.
func (pu *PatientUpdate) SetPatientWeight(s string) *PatientUpdate {
	pu.mutation.SetPatientWeight(s)
	return pu
}

// SetNillablePatientWeight sets the "patient_weight" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientWeight(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientWeight(*s)
	}
	return pu
}

// ClearPatientWeight clears the value of the "patient_weight" field.
func (pu *PatientUpdate) ClearPatientWeight() *PatientUpdate {
	pu.mutation.ClearPatientWeight()
	return pu
}

// SetOfficeallyID sets the "officeally_id" field.
func (pu *PatientUpdate) SetOfficeallyID(i int) *PatientUpdate {
	pu.mutation.ResetOfficeallyID()
	pu.mutation.SetOfficeallyID(i)
	return pu
}

// SetNillableOfficeallyID sets the "officeally_id" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableOfficeallyID(i *int) *PatientUpdate {
	if i != nil {
		pu.SetOfficeallyID(*i)
	}
	return pu
}

// AddOfficeallyID adds i to the "officeally_id" field.
func (pu *PatientUpdate) AddOfficeallyID(i int) *PatientUpdate {
	pu.mutation.AddOfficeallyID(i)
	return pu
}

// ClearOfficeallyID clears the value of the "officeally_id" field.
func (pu *PatientUpdate) ClearOfficeallyID() *PatientUpdate {
	pu.mutation.ClearOfficeallyID()
	return pu
}

// SetPatientNyWaiveFormIssueStatus sets the "patient_ny_waive_form_issue_status" field.
func (pu *PatientUpdate) SetPatientNyWaiveFormIssueStatus(s string) *PatientUpdate {
	pu.mutation.SetPatientNyWaiveFormIssueStatus(s)
	return pu
}

// SetNillablePatientNyWaiveFormIssueStatus sets the "patient_ny_waive_form_issue_status" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientNyWaiveFormIssueStatus(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientNyWaiveFormIssueStatus(*s)
	}
	return pu
}

// SetPatientCreateTime sets the "patient_create_time" field.
func (pu *PatientUpdate) SetPatientCreateTime(t time.Time) *PatientUpdate {
	pu.mutation.SetPatientCreateTime(t)
	return pu
}

// SetNillablePatientCreateTime sets the "patient_create_time" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientCreateTime(t *time.Time) *PatientUpdate {
	if t != nil {
		pu.SetPatientCreateTime(*t)
	}
	return pu
}

// ClearPatientCreateTime clears the value of the "patient_create_time" field.
func (pu *PatientUpdate) ClearPatientCreateTime() *PatientUpdate {
	pu.mutation.ClearPatientCreateTime()
	return pu
}

// SetCustomerID sets the "customer_id" field.
func (pu *PatientUpdate) SetCustomerID(i int) *PatientUpdate {
	pu.mutation.SetCustomerID(i)
	return pu
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableCustomerID(i *int) *PatientUpdate {
	if i != nil {
		pu.SetCustomerID(*i)
	}
	return pu
}

// ClearCustomerID clears the value of the "customer_id" field.
func (pu *PatientUpdate) ClearCustomerID() *PatientUpdate {
	pu.mutation.ClearCustomerID()
	return pu
}

// SetIsActive sets the "isActive" field.
func (pu *PatientUpdate) SetIsActive(b bool) *PatientUpdate {
	pu.mutation.SetIsActive(b)
	return pu
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableIsActive(b *bool) *PatientUpdate {
	if b != nil {
		pu.SetIsActive(*b)
	}
	return pu
}

// SetPatientFlagged sets the "patient_flagged" field.
func (pu *PatientUpdate) SetPatientFlagged(b bool) *PatientUpdate {
	pu.mutation.SetPatientFlagged(b)
	return pu
}

// SetNillablePatientFlagged sets the "patient_flagged" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientFlagged(b *bool) *PatientUpdate {
	if b != nil {
		pu.SetPatientFlagged(*b)
	}
	return pu
}

// SetPatientServiceDate sets the "patient_service_date" field.
func (pu *PatientUpdate) SetPatientServiceDate(t time.Time) *PatientUpdate {
	pu.mutation.SetPatientServiceDate(t)
	return pu
}

// SetNillablePatientServiceDate sets the "patient_service_date" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientServiceDate(t *time.Time) *PatientUpdate {
	if t != nil {
		pu.SetPatientServiceDate(*t)
	}
	return pu
}

// ClearPatientServiceDate clears the value of the "patient_service_date" field.
func (pu *PatientUpdate) ClearPatientServiceDate() *PatientUpdate {
	pu.mutation.ClearPatientServiceDate()
	return pu
}

// SetPatientDescription sets the "patient_description" field.
func (pu *PatientUpdate) SetPatientDescription(s string) *PatientUpdate {
	pu.mutation.SetPatientDescription(s)
	return pu
}

// SetNillablePatientDescription sets the "patient_description" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientDescription(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientDescription(*s)
	}
	return pu
}

// ClearPatientDescription clears the value of the "patient_description" field.
func (pu *PatientUpdate) ClearPatientDescription() *PatientUpdate {
	pu.mutation.ClearPatientDescription()
	return pu
}

// SetPatientLanguage sets the "patient_language" field.
func (pu *PatientUpdate) SetPatientLanguage(s string) *PatientUpdate {
	pu.mutation.SetPatientLanguage(s)
	return pu
}

// SetNillablePatientLanguage sets the "patient_language" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePatientLanguage(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPatientLanguage(*s)
	}
	return pu
}

// ClearPatientLanguage clears the value of the "patient_language" field.
func (pu *PatientUpdate) ClearPatientLanguage() *PatientUpdate {
	pu.mutation.ClearPatientLanguage()
	return pu
}

// SetCurrentCustomerID sets the "current_customer" edge to the Customer entity by ID.
func (pu *PatientUpdate) SetCurrentCustomerID(id int) *PatientUpdate {
	pu.mutation.SetCurrentCustomerID(id)
	return pu
}

// SetNillableCurrentCustomerID sets the "current_customer" edge to the Customer entity by ID if the given value is not nil.
func (pu *PatientUpdate) SetNillableCurrentCustomerID(id *int) *PatientUpdate {
	if id != nil {
		pu = pu.SetCurrentCustomerID(*id)
	}
	return pu
}

// SetCurrentCustomer sets the "current_customer" edge to the Customer entity.
func (pu *PatientUpdate) SetCurrentCustomer(c *Customer) *PatientUpdate {
	return pu.SetCurrentCustomerID(c.ID)
}

// AddPatientCustomerIDs adds the "patient_customers" edge to the Customer entity by IDs.
func (pu *PatientUpdate) AddPatientCustomerIDs(ids ...int) *PatientUpdate {
	pu.mutation.AddPatientCustomerIDs(ids...)
	return pu
}

// AddPatientCustomers adds the "patient_customers" edges to the Customer entity.
func (pu *PatientUpdate) AddPatientCustomers(c ...*Customer) *PatientUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddPatientCustomerIDs(ids...)
}

// AddSampleIDs adds the "samples" edge to the Sample entity by IDs.
func (pu *PatientUpdate) AddSampleIDs(ids ...int) *PatientUpdate {
	pu.mutation.AddSampleIDs(ids...)
	return pu
}

// AddSamples adds the "samples" edges to the Sample entity.
func (pu *PatientUpdate) AddSamples(s ...*Sample) *PatientUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSampleIDs(ids...)
}

// AddPatientContactIDs adds the "patient_contacts" edge to the Contact entity by IDs.
func (pu *PatientUpdate) AddPatientContactIDs(ids ...int) *PatientUpdate {
	pu.mutation.AddPatientContactIDs(ids...)
	return pu
}

// AddPatientContacts adds the "patient_contacts" edges to the Contact entity.
func (pu *PatientUpdate) AddPatientContacts(c ...*Contact) *PatientUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddPatientContactIDs(ids...)
}

// AddPatientAddressIDs adds the "patient_addresses" edge to the Address entity by IDs.
func (pu *PatientUpdate) AddPatientAddressIDs(ids ...int) *PatientUpdate {
	pu.mutation.AddPatientAddressIDs(ids...)
	return pu
}

// AddPatientAddresses adds the "patient_addresses" edges to the Address entity.
func (pu *PatientUpdate) AddPatientAddresses(a ...*Address) *PatientUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddPatientAddressIDs(ids...)
}

// AddPatientClinicIDs adds the "patient_clinics" edge to the Clinic entity by IDs.
func (pu *PatientUpdate) AddPatientClinicIDs(ids ...int) *PatientUpdate {
	pu.mutation.AddPatientClinicIDs(ids...)
	return pu
}

// AddPatientClinics adds the "patient_clinics" edges to the Clinic entity.
func (pu *PatientUpdate) AddPatientClinics(c ...*Clinic) *PatientUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddPatientClinicIDs(ids...)
}

// SetUser sets the "user" edge to the User entity.
func (pu *PatientUpdate) SetUser(u *User) *PatientUpdate {
	return pu.SetUserID(u.ID)
}

// AddPatientWeightHeightHistoryIDs adds the "patient_weight_height_history" edge to the PatientWeightHeight entity by IDs.
func (pu *PatientUpdate) AddPatientWeightHeightHistoryIDs(ids ...int) *PatientUpdate {
	pu.mutation.AddPatientWeightHeightHistoryIDs(ids...)
	return pu
}

// AddPatientWeightHeightHistory adds the "patient_weight_height_history" edges to the PatientWeightHeight entity.
func (pu *PatientUpdate) AddPatientWeightHeightHistory(p ...*PatientWeightHeight) *PatientUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPatientWeightHeightHistoryIDs(ids...)
}

// AddPatientSettingIDs adds the "patient_settings" edge to the Setting entity by IDs.
func (pu *PatientUpdate) AddPatientSettingIDs(ids ...int) *PatientUpdate {
	pu.mutation.AddPatientSettingIDs(ids...)
	return pu
}

// AddPatientSettings adds the "patient_settings" edges to the Setting entity.
func (pu *PatientUpdate) AddPatientSettings(s ...*Setting) *PatientUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddPatientSettingIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (pu *PatientUpdate) Mutation() *PatientMutation {
	return pu.mutation
}

// ClearCurrentCustomer clears the "current_customer" edge to the Customer entity.
func (pu *PatientUpdate) ClearCurrentCustomer() *PatientUpdate {
	pu.mutation.ClearCurrentCustomer()
	return pu
}

// ClearPatientCustomers clears all "patient_customers" edges to the Customer entity.
func (pu *PatientUpdate) ClearPatientCustomers() *PatientUpdate {
	pu.mutation.ClearPatientCustomers()
	return pu
}

// RemovePatientCustomerIDs removes the "patient_customers" edge to Customer entities by IDs.
func (pu *PatientUpdate) RemovePatientCustomerIDs(ids ...int) *PatientUpdate {
	pu.mutation.RemovePatientCustomerIDs(ids...)
	return pu
}

// RemovePatientCustomers removes "patient_customers" edges to Customer entities.
func (pu *PatientUpdate) RemovePatientCustomers(c ...*Customer) *PatientUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemovePatientCustomerIDs(ids...)
}

// ClearSamples clears all "samples" edges to the Sample entity.
func (pu *PatientUpdate) ClearSamples() *PatientUpdate {
	pu.mutation.ClearSamples()
	return pu
}

// RemoveSampleIDs removes the "samples" edge to Sample entities by IDs.
func (pu *PatientUpdate) RemoveSampleIDs(ids ...int) *PatientUpdate {
	pu.mutation.RemoveSampleIDs(ids...)
	return pu
}

// RemoveSamples removes "samples" edges to Sample entities.
func (pu *PatientUpdate) RemoveSamples(s ...*Sample) *PatientUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSampleIDs(ids...)
}

// ClearPatientContacts clears all "patient_contacts" edges to the Contact entity.
func (pu *PatientUpdate) ClearPatientContacts() *PatientUpdate {
	pu.mutation.ClearPatientContacts()
	return pu
}

// RemovePatientContactIDs removes the "patient_contacts" edge to Contact entities by IDs.
func (pu *PatientUpdate) RemovePatientContactIDs(ids ...int) *PatientUpdate {
	pu.mutation.RemovePatientContactIDs(ids...)
	return pu
}

// RemovePatientContacts removes "patient_contacts" edges to Contact entities.
func (pu *PatientUpdate) RemovePatientContacts(c ...*Contact) *PatientUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemovePatientContactIDs(ids...)
}

// ClearPatientAddresses clears all "patient_addresses" edges to the Address entity.
func (pu *PatientUpdate) ClearPatientAddresses() *PatientUpdate {
	pu.mutation.ClearPatientAddresses()
	return pu
}

// RemovePatientAddressIDs removes the "patient_addresses" edge to Address entities by IDs.
func (pu *PatientUpdate) RemovePatientAddressIDs(ids ...int) *PatientUpdate {
	pu.mutation.RemovePatientAddressIDs(ids...)
	return pu
}

// RemovePatientAddresses removes "patient_addresses" edges to Address entities.
func (pu *PatientUpdate) RemovePatientAddresses(a ...*Address) *PatientUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemovePatientAddressIDs(ids...)
}

// ClearPatientClinics clears all "patient_clinics" edges to the Clinic entity.
func (pu *PatientUpdate) ClearPatientClinics() *PatientUpdate {
	pu.mutation.ClearPatientClinics()
	return pu
}

// RemovePatientClinicIDs removes the "patient_clinics" edge to Clinic entities by IDs.
func (pu *PatientUpdate) RemovePatientClinicIDs(ids ...int) *PatientUpdate {
	pu.mutation.RemovePatientClinicIDs(ids...)
	return pu
}

// RemovePatientClinics removes "patient_clinics" edges to Clinic entities.
func (pu *PatientUpdate) RemovePatientClinics(c ...*Clinic) *PatientUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemovePatientClinicIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (pu *PatientUpdate) ClearUser() *PatientUpdate {
	pu.mutation.ClearUser()
	return pu
}

// ClearPatientWeightHeightHistory clears all "patient_weight_height_history" edges to the PatientWeightHeight entity.
func (pu *PatientUpdate) ClearPatientWeightHeightHistory() *PatientUpdate {
	pu.mutation.ClearPatientWeightHeightHistory()
	return pu
}

// RemovePatientWeightHeightHistoryIDs removes the "patient_weight_height_history" edge to PatientWeightHeight entities by IDs.
func (pu *PatientUpdate) RemovePatientWeightHeightHistoryIDs(ids ...int) *PatientUpdate {
	pu.mutation.RemovePatientWeightHeightHistoryIDs(ids...)
	return pu
}

// RemovePatientWeightHeightHistory removes "patient_weight_height_history" edges to PatientWeightHeight entities.
func (pu *PatientUpdate) RemovePatientWeightHeightHistory(p ...*PatientWeightHeight) *PatientUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePatientWeightHeightHistoryIDs(ids...)
}

// ClearPatientSettings clears all "patient_settings" edges to the Setting entity.
func (pu *PatientUpdate) ClearPatientSettings() *PatientUpdate {
	pu.mutation.ClearPatientSettings()
	return pu
}

// RemovePatientSettingIDs removes the "patient_settings" edge to Setting entities by IDs.
func (pu *PatientUpdate) RemovePatientSettingIDs(ids ...int) *PatientUpdate {
	pu.mutation.RemovePatientSettingIDs(ids...)
	return pu
}

// RemovePatientSettings removes "patient_settings" edges to Setting entities.
func (pu *PatientUpdate) RemovePatientSettings(s ...*Setting) *PatientUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemovePatientSettingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PatientUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PatientUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PatientUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PatientUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PatientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(patient.Table, patient.Columns, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PatientType(); ok {
		_spec.SetField(patient.FieldPatientType, field.TypeString, value)
	}
	if value, ok := pu.mutation.OriginalPatientID(); ok {
		_spec.SetField(patient.FieldOriginalPatientID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedOriginalPatientID(); ok {
		_spec.AddField(patient.FieldOriginalPatientID, field.TypeInt, value)
	}
	if pu.mutation.OriginalPatientIDCleared() {
		_spec.ClearField(patient.FieldOriginalPatientID, field.TypeInt)
	}
	if value, ok := pu.mutation.PatientGender(); ok {
		_spec.SetField(patient.FieldPatientGender, field.TypeString, value)
	}
	if pu.mutation.PatientGenderCleared() {
		_spec.ClearField(patient.FieldPatientGender, field.TypeString)
	}
	if value, ok := pu.mutation.PatientFirstName(); ok {
		_spec.SetField(patient.FieldPatientFirstName, field.TypeString, value)
	}
	if pu.mutation.PatientFirstNameCleared() {
		_spec.ClearField(patient.FieldPatientFirstName, field.TypeString)
	}
	if value, ok := pu.mutation.PatientLastName(); ok {
		_spec.SetField(patient.FieldPatientLastName, field.TypeString, value)
	}
	if pu.mutation.PatientLastNameCleared() {
		_spec.ClearField(patient.FieldPatientLastName, field.TypeString)
	}
	if value, ok := pu.mutation.PatientMiddleName(); ok {
		_spec.SetField(patient.FieldPatientMiddleName, field.TypeString, value)
	}
	if pu.mutation.PatientMiddleNameCleared() {
		_spec.ClearField(patient.FieldPatientMiddleName, field.TypeString)
	}
	if value, ok := pu.mutation.PatientMedicalRecordNumber(); ok {
		_spec.SetField(patient.FieldPatientMedicalRecordNumber, field.TypeString, value)
	}
	if pu.mutation.PatientMedicalRecordNumberCleared() {
		_spec.ClearField(patient.FieldPatientMedicalRecordNumber, field.TypeString)
	}
	if value, ok := pu.mutation.PatientLegalFirstname(); ok {
		_spec.SetField(patient.FieldPatientLegalFirstname, field.TypeString, value)
	}
	if pu.mutation.PatientLegalFirstnameCleared() {
		_spec.ClearField(patient.FieldPatientLegalFirstname, field.TypeString)
	}
	if value, ok := pu.mutation.PatientLegalLastname(); ok {
		_spec.SetField(patient.FieldPatientLegalLastname, field.TypeString, value)
	}
	if pu.mutation.PatientLegalLastnameCleared() {
		_spec.ClearField(patient.FieldPatientLegalLastname, field.TypeString)
	}
	if value, ok := pu.mutation.PatientHonorific(); ok {
		_spec.SetField(patient.FieldPatientHonorific, field.TypeString, value)
	}
	if pu.mutation.PatientHonorificCleared() {
		_spec.ClearField(patient.FieldPatientHonorific, field.TypeString)
	}
	if value, ok := pu.mutation.PatientSuffix(); ok {
		_spec.SetField(patient.FieldPatientSuffix, field.TypeString, value)
	}
	if pu.mutation.PatientSuffixCleared() {
		_spec.ClearField(patient.FieldPatientSuffix, field.TypeString)
	}
	if value, ok := pu.mutation.PatientMarital(); ok {
		_spec.SetField(patient.FieldPatientMarital, field.TypeString, value)
	}
	if pu.mutation.PatientMaritalCleared() {
		_spec.ClearField(patient.FieldPatientMarital, field.TypeString)
	}
	if value, ok := pu.mutation.PatientEthnicity(); ok {
		_spec.SetField(patient.FieldPatientEthnicity, field.TypeString, value)
	}
	if pu.mutation.PatientEthnicityCleared() {
		_spec.ClearField(patient.FieldPatientEthnicity, field.TypeString)
	}
	if value, ok := pu.mutation.PatientBirthdate(); ok {
		_spec.SetField(patient.FieldPatientBirthdate, field.TypeString, value)
	}
	if pu.mutation.PatientBirthdateCleared() {
		_spec.ClearField(patient.FieldPatientBirthdate, field.TypeString)
	}
	if value, ok := pu.mutation.PatientSsn(); ok {
		_spec.SetField(patient.FieldPatientSsn, field.TypeString, value)
	}
	if pu.mutation.PatientSsnCleared() {
		_spec.ClearField(patient.FieldPatientSsn, field.TypeString)
	}
	if value, ok := pu.mutation.PatientHeight(); ok {
		_spec.SetField(patient.FieldPatientHeight, field.TypeString, value)
	}
	if pu.mutation.PatientHeightCleared() {
		_spec.ClearField(patient.FieldPatientHeight, field.TypeString)
	}
	if value, ok := pu.mutation.PatientWeight(); ok {
		_spec.SetField(patient.FieldPatientWeight, field.TypeString, value)
	}
	if pu.mutation.PatientWeightCleared() {
		_spec.ClearField(patient.FieldPatientWeight, field.TypeString)
	}
	if value, ok := pu.mutation.OfficeallyID(); ok {
		_spec.SetField(patient.FieldOfficeallyID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedOfficeallyID(); ok {
		_spec.AddField(patient.FieldOfficeallyID, field.TypeInt, value)
	}
	if pu.mutation.OfficeallyIDCleared() {
		_spec.ClearField(patient.FieldOfficeallyID, field.TypeInt)
	}
	if value, ok := pu.mutation.PatientNyWaiveFormIssueStatus(); ok {
		_spec.SetField(patient.FieldPatientNyWaiveFormIssueStatus, field.TypeString, value)
	}
	if value, ok := pu.mutation.PatientCreateTime(); ok {
		_spec.SetField(patient.FieldPatientCreateTime, field.TypeTime, value)
	}
	if pu.mutation.PatientCreateTimeCleared() {
		_spec.ClearField(patient.FieldPatientCreateTime, field.TypeTime)
	}
	if value, ok := pu.mutation.IsActive(); ok {
		_spec.SetField(patient.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := pu.mutation.PatientFlagged(); ok {
		_spec.SetField(patient.FieldPatientFlagged, field.TypeBool, value)
	}
	if value, ok := pu.mutation.PatientServiceDate(); ok {
		_spec.SetField(patient.FieldPatientServiceDate, field.TypeTime, value)
	}
	if pu.mutation.PatientServiceDateCleared() {
		_spec.ClearField(patient.FieldPatientServiceDate, field.TypeTime)
	}
	if value, ok := pu.mutation.PatientDescription(); ok {
		_spec.SetField(patient.FieldPatientDescription, field.TypeString, value)
	}
	if pu.mutation.PatientDescriptionCleared() {
		_spec.ClearField(patient.FieldPatientDescription, field.TypeString)
	}
	if value, ok := pu.mutation.PatientLanguage(); ok {
		_spec.SetField(patient.FieldPatientLanguage, field.TypeString, value)
	}
	if pu.mutation.PatientLanguageCleared() {
		_spec.ClearField(patient.FieldPatientLanguage, field.TypeString)
	}
	if pu.mutation.CurrentCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.CurrentCustomerTable,
			Columns: []string{patient.CurrentCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CurrentCustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.CurrentCustomerTable,
			Columns: []string{patient.CurrentCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PatientCustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.PatientCustomersTable,
			Columns: patient.PatientCustomersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPatientCustomersIDs(); len(nodes) > 0 && !pu.mutation.PatientCustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.PatientCustomersTable,
			Columns: patient.PatientCustomersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PatientCustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.PatientCustomersTable,
			Columns: patient.PatientCustomersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SamplesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.SamplesTable,
			Columns: []string{patient.SamplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSamplesIDs(); len(nodes) > 0 && !pu.mutation.SamplesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.SamplesTable,
			Columns: []string{patient.SamplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SamplesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.SamplesTable,
			Columns: []string{patient.SamplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PatientContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientContactsTable,
			Columns: []string{patient.PatientContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPatientContactsIDs(); len(nodes) > 0 && !pu.mutation.PatientContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientContactsTable,
			Columns: []string{patient.PatientContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PatientContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientContactsTable,
			Columns: []string{patient.PatientContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PatientAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientAddressesTable,
			Columns: []string{patient.PatientAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPatientAddressesIDs(); len(nodes) > 0 && !pu.mutation.PatientAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientAddressesTable,
			Columns: []string{patient.PatientAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PatientAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientAddressesTable,
			Columns: []string{patient.PatientAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PatientClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.PatientClinicsTable,
			Columns: patient.PatientClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPatientClinicsIDs(); len(nodes) > 0 && !pu.mutation.PatientClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.PatientClinicsTable,
			Columns: patient.PatientClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PatientClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.PatientClinicsTable,
			Columns: patient.PatientClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.UserTable,
			Columns: []string{patient.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.UserTable,
			Columns: []string{patient.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PatientWeightHeightHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientWeightHeightHistoryTable,
			Columns: []string{patient.PatientWeightHeightHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patientweightheight.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPatientWeightHeightHistoryIDs(); len(nodes) > 0 && !pu.mutation.PatientWeightHeightHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientWeightHeightHistoryTable,
			Columns: []string{patient.PatientWeightHeightHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patientweightheight.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PatientWeightHeightHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientWeightHeightHistoryTable,
			Columns: []string{patient.PatientWeightHeightHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patientweightheight.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PatientSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   patient.PatientSettingsTable,
			Columns: patient.PatientSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPatientSettingsIDs(); len(nodes) > 0 && !pu.mutation.PatientSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   patient.PatientSettingsTable,
			Columns: patient.PatientSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PatientSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   patient.PatientSettingsTable,
			Columns: patient.PatientSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PatientUpdateOne is the builder for updating a single Patient entity.
type PatientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PatientMutation
}

// SetUserID sets the "user_id" field.
func (puo *PatientUpdateOne) SetUserID(i int) *PatientUpdateOne {
	puo.mutation.SetUserID(i)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableUserID(i *int) *PatientUpdateOne {
	if i != nil {
		puo.SetUserID(*i)
	}
	return puo
}

// ClearUserID clears the value of the "user_id" field.
func (puo *PatientUpdateOne) ClearUserID() *PatientUpdateOne {
	puo.mutation.ClearUserID()
	return puo
}

// SetPatientType sets the "patient_type" field.
func (puo *PatientUpdateOne) SetPatientType(s string) *PatientUpdateOne {
	puo.mutation.SetPatientType(s)
	return puo
}

// SetNillablePatientType sets the "patient_type" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientType(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientType(*s)
	}
	return puo
}

// SetOriginalPatientID sets the "original_patient_id" field.
func (puo *PatientUpdateOne) SetOriginalPatientID(i int) *PatientUpdateOne {
	puo.mutation.ResetOriginalPatientID()
	puo.mutation.SetOriginalPatientID(i)
	return puo
}

// SetNillableOriginalPatientID sets the "original_patient_id" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableOriginalPatientID(i *int) *PatientUpdateOne {
	if i != nil {
		puo.SetOriginalPatientID(*i)
	}
	return puo
}

// AddOriginalPatientID adds i to the "original_patient_id" field.
func (puo *PatientUpdateOne) AddOriginalPatientID(i int) *PatientUpdateOne {
	puo.mutation.AddOriginalPatientID(i)
	return puo
}

// ClearOriginalPatientID clears the value of the "original_patient_id" field.
func (puo *PatientUpdateOne) ClearOriginalPatientID() *PatientUpdateOne {
	puo.mutation.ClearOriginalPatientID()
	return puo
}

// SetPatientGender sets the "patient_gender" field.
func (puo *PatientUpdateOne) SetPatientGender(s string) *PatientUpdateOne {
	puo.mutation.SetPatientGender(s)
	return puo
}

// SetNillablePatientGender sets the "patient_gender" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientGender(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientGender(*s)
	}
	return puo
}

// ClearPatientGender clears the value of the "patient_gender" field.
func (puo *PatientUpdateOne) ClearPatientGender() *PatientUpdateOne {
	puo.mutation.ClearPatientGender()
	return puo
}

// SetPatientFirstName sets the "patient_first_name" field.
func (puo *PatientUpdateOne) SetPatientFirstName(s string) *PatientUpdateOne {
	puo.mutation.SetPatientFirstName(s)
	return puo
}

// SetNillablePatientFirstName sets the "patient_first_name" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientFirstName(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientFirstName(*s)
	}
	return puo
}

// ClearPatientFirstName clears the value of the "patient_first_name" field.
func (puo *PatientUpdateOne) ClearPatientFirstName() *PatientUpdateOne {
	puo.mutation.ClearPatientFirstName()
	return puo
}

// SetPatientLastName sets the "patient_last_name" field.
func (puo *PatientUpdateOne) SetPatientLastName(s string) *PatientUpdateOne {
	puo.mutation.SetPatientLastName(s)
	return puo
}

// SetNillablePatientLastName sets the "patient_last_name" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientLastName(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientLastName(*s)
	}
	return puo
}

// ClearPatientLastName clears the value of the "patient_last_name" field.
func (puo *PatientUpdateOne) ClearPatientLastName() *PatientUpdateOne {
	puo.mutation.ClearPatientLastName()
	return puo
}

// SetPatientMiddleName sets the "patient_middle_name" field.
func (puo *PatientUpdateOne) SetPatientMiddleName(s string) *PatientUpdateOne {
	puo.mutation.SetPatientMiddleName(s)
	return puo
}

// SetNillablePatientMiddleName sets the "patient_middle_name" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientMiddleName(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientMiddleName(*s)
	}
	return puo
}

// ClearPatientMiddleName clears the value of the "patient_middle_name" field.
func (puo *PatientUpdateOne) ClearPatientMiddleName() *PatientUpdateOne {
	puo.mutation.ClearPatientMiddleName()
	return puo
}

// SetPatientMedicalRecordNumber sets the "patient_medical_record_number" field.
func (puo *PatientUpdateOne) SetPatientMedicalRecordNumber(s string) *PatientUpdateOne {
	puo.mutation.SetPatientMedicalRecordNumber(s)
	return puo
}

// SetNillablePatientMedicalRecordNumber sets the "patient_medical_record_number" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientMedicalRecordNumber(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientMedicalRecordNumber(*s)
	}
	return puo
}

// ClearPatientMedicalRecordNumber clears the value of the "patient_medical_record_number" field.
func (puo *PatientUpdateOne) ClearPatientMedicalRecordNumber() *PatientUpdateOne {
	puo.mutation.ClearPatientMedicalRecordNumber()
	return puo
}

// SetPatientLegalFirstname sets the "patient_legal_firstname" field.
func (puo *PatientUpdateOne) SetPatientLegalFirstname(s string) *PatientUpdateOne {
	puo.mutation.SetPatientLegalFirstname(s)
	return puo
}

// SetNillablePatientLegalFirstname sets the "patient_legal_firstname" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientLegalFirstname(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientLegalFirstname(*s)
	}
	return puo
}

// ClearPatientLegalFirstname clears the value of the "patient_legal_firstname" field.
func (puo *PatientUpdateOne) ClearPatientLegalFirstname() *PatientUpdateOne {
	puo.mutation.ClearPatientLegalFirstname()
	return puo
}

// SetPatientLegalLastname sets the "patient_legal_lastname" field.
func (puo *PatientUpdateOne) SetPatientLegalLastname(s string) *PatientUpdateOne {
	puo.mutation.SetPatientLegalLastname(s)
	return puo
}

// SetNillablePatientLegalLastname sets the "patient_legal_lastname" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientLegalLastname(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientLegalLastname(*s)
	}
	return puo
}

// ClearPatientLegalLastname clears the value of the "patient_legal_lastname" field.
func (puo *PatientUpdateOne) ClearPatientLegalLastname() *PatientUpdateOne {
	puo.mutation.ClearPatientLegalLastname()
	return puo
}

// SetPatientHonorific sets the "patient_honorific" field.
func (puo *PatientUpdateOne) SetPatientHonorific(s string) *PatientUpdateOne {
	puo.mutation.SetPatientHonorific(s)
	return puo
}

// SetNillablePatientHonorific sets the "patient_honorific" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientHonorific(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientHonorific(*s)
	}
	return puo
}

// ClearPatientHonorific clears the value of the "patient_honorific" field.
func (puo *PatientUpdateOne) ClearPatientHonorific() *PatientUpdateOne {
	puo.mutation.ClearPatientHonorific()
	return puo
}

// SetPatientSuffix sets the "patient_suffix" field.
func (puo *PatientUpdateOne) SetPatientSuffix(s string) *PatientUpdateOne {
	puo.mutation.SetPatientSuffix(s)
	return puo
}

// SetNillablePatientSuffix sets the "patient_suffix" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientSuffix(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientSuffix(*s)
	}
	return puo
}

// ClearPatientSuffix clears the value of the "patient_suffix" field.
func (puo *PatientUpdateOne) ClearPatientSuffix() *PatientUpdateOne {
	puo.mutation.ClearPatientSuffix()
	return puo
}

// SetPatientMarital sets the "patient_marital" field.
func (puo *PatientUpdateOne) SetPatientMarital(s string) *PatientUpdateOne {
	puo.mutation.SetPatientMarital(s)
	return puo
}

// SetNillablePatientMarital sets the "patient_marital" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientMarital(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientMarital(*s)
	}
	return puo
}

// ClearPatientMarital clears the value of the "patient_marital" field.
func (puo *PatientUpdateOne) ClearPatientMarital() *PatientUpdateOne {
	puo.mutation.ClearPatientMarital()
	return puo
}

// SetPatientEthnicity sets the "patient_ethnicity" field.
func (puo *PatientUpdateOne) SetPatientEthnicity(s string) *PatientUpdateOne {
	puo.mutation.SetPatientEthnicity(s)
	return puo
}

// SetNillablePatientEthnicity sets the "patient_ethnicity" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientEthnicity(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientEthnicity(*s)
	}
	return puo
}

// ClearPatientEthnicity clears the value of the "patient_ethnicity" field.
func (puo *PatientUpdateOne) ClearPatientEthnicity() *PatientUpdateOne {
	puo.mutation.ClearPatientEthnicity()
	return puo
}

// SetPatientBirthdate sets the "patient_birthdate" field.
func (puo *PatientUpdateOne) SetPatientBirthdate(s string) *PatientUpdateOne {
	puo.mutation.SetPatientBirthdate(s)
	return puo
}

// SetNillablePatientBirthdate sets the "patient_birthdate" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientBirthdate(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientBirthdate(*s)
	}
	return puo
}

// ClearPatientBirthdate clears the value of the "patient_birthdate" field.
func (puo *PatientUpdateOne) ClearPatientBirthdate() *PatientUpdateOne {
	puo.mutation.ClearPatientBirthdate()
	return puo
}

// SetPatientSsn sets the "patient_ssn" field.
func (puo *PatientUpdateOne) SetPatientSsn(s string) *PatientUpdateOne {
	puo.mutation.SetPatientSsn(s)
	return puo
}

// SetNillablePatientSsn sets the "patient_ssn" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientSsn(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientSsn(*s)
	}
	return puo
}

// ClearPatientSsn clears the value of the "patient_ssn" field.
func (puo *PatientUpdateOne) ClearPatientSsn() *PatientUpdateOne {
	puo.mutation.ClearPatientSsn()
	return puo
}

// SetPatientHeight sets the "patient_height" field.
func (puo *PatientUpdateOne) SetPatientHeight(s string) *PatientUpdateOne {
	puo.mutation.SetPatientHeight(s)
	return puo
}

// SetNillablePatientHeight sets the "patient_height" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientHeight(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientHeight(*s)
	}
	return puo
}

// ClearPatientHeight clears the value of the "patient_height" field.
func (puo *PatientUpdateOne) ClearPatientHeight() *PatientUpdateOne {
	puo.mutation.ClearPatientHeight()
	return puo
}

// SetPatientWeight sets the "patient_weight" field.
func (puo *PatientUpdateOne) SetPatientWeight(s string) *PatientUpdateOne {
	puo.mutation.SetPatientWeight(s)
	return puo
}

// SetNillablePatientWeight sets the "patient_weight" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientWeight(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientWeight(*s)
	}
	return puo
}

// ClearPatientWeight clears the value of the "patient_weight" field.
func (puo *PatientUpdateOne) ClearPatientWeight() *PatientUpdateOne {
	puo.mutation.ClearPatientWeight()
	return puo
}

// SetOfficeallyID sets the "officeally_id" field.
func (puo *PatientUpdateOne) SetOfficeallyID(i int) *PatientUpdateOne {
	puo.mutation.ResetOfficeallyID()
	puo.mutation.SetOfficeallyID(i)
	return puo
}

// SetNillableOfficeallyID sets the "officeally_id" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableOfficeallyID(i *int) *PatientUpdateOne {
	if i != nil {
		puo.SetOfficeallyID(*i)
	}
	return puo
}

// AddOfficeallyID adds i to the "officeally_id" field.
func (puo *PatientUpdateOne) AddOfficeallyID(i int) *PatientUpdateOne {
	puo.mutation.AddOfficeallyID(i)
	return puo
}

// ClearOfficeallyID clears the value of the "officeally_id" field.
func (puo *PatientUpdateOne) ClearOfficeallyID() *PatientUpdateOne {
	puo.mutation.ClearOfficeallyID()
	return puo
}

// SetPatientNyWaiveFormIssueStatus sets the "patient_ny_waive_form_issue_status" field.
func (puo *PatientUpdateOne) SetPatientNyWaiveFormIssueStatus(s string) *PatientUpdateOne {
	puo.mutation.SetPatientNyWaiveFormIssueStatus(s)
	return puo
}

// SetNillablePatientNyWaiveFormIssueStatus sets the "patient_ny_waive_form_issue_status" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientNyWaiveFormIssueStatus(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientNyWaiveFormIssueStatus(*s)
	}
	return puo
}

// SetPatientCreateTime sets the "patient_create_time" field.
func (puo *PatientUpdateOne) SetPatientCreateTime(t time.Time) *PatientUpdateOne {
	puo.mutation.SetPatientCreateTime(t)
	return puo
}

// SetNillablePatientCreateTime sets the "patient_create_time" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientCreateTime(t *time.Time) *PatientUpdateOne {
	if t != nil {
		puo.SetPatientCreateTime(*t)
	}
	return puo
}

// ClearPatientCreateTime clears the value of the "patient_create_time" field.
func (puo *PatientUpdateOne) ClearPatientCreateTime() *PatientUpdateOne {
	puo.mutation.ClearPatientCreateTime()
	return puo
}

// SetCustomerID sets the "customer_id" field.
func (puo *PatientUpdateOne) SetCustomerID(i int) *PatientUpdateOne {
	puo.mutation.SetCustomerID(i)
	return puo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableCustomerID(i *int) *PatientUpdateOne {
	if i != nil {
		puo.SetCustomerID(*i)
	}
	return puo
}

// ClearCustomerID clears the value of the "customer_id" field.
func (puo *PatientUpdateOne) ClearCustomerID() *PatientUpdateOne {
	puo.mutation.ClearCustomerID()
	return puo
}

// SetIsActive sets the "isActive" field.
func (puo *PatientUpdateOne) SetIsActive(b bool) *PatientUpdateOne {
	puo.mutation.SetIsActive(b)
	return puo
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableIsActive(b *bool) *PatientUpdateOne {
	if b != nil {
		puo.SetIsActive(*b)
	}
	return puo
}

// SetPatientFlagged sets the "patient_flagged" field.
func (puo *PatientUpdateOne) SetPatientFlagged(b bool) *PatientUpdateOne {
	puo.mutation.SetPatientFlagged(b)
	return puo
}

// SetNillablePatientFlagged sets the "patient_flagged" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientFlagged(b *bool) *PatientUpdateOne {
	if b != nil {
		puo.SetPatientFlagged(*b)
	}
	return puo
}

// SetPatientServiceDate sets the "patient_service_date" field.
func (puo *PatientUpdateOne) SetPatientServiceDate(t time.Time) *PatientUpdateOne {
	puo.mutation.SetPatientServiceDate(t)
	return puo
}

// SetNillablePatientServiceDate sets the "patient_service_date" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientServiceDate(t *time.Time) *PatientUpdateOne {
	if t != nil {
		puo.SetPatientServiceDate(*t)
	}
	return puo
}

// ClearPatientServiceDate clears the value of the "patient_service_date" field.
func (puo *PatientUpdateOne) ClearPatientServiceDate() *PatientUpdateOne {
	puo.mutation.ClearPatientServiceDate()
	return puo
}

// SetPatientDescription sets the "patient_description" field.
func (puo *PatientUpdateOne) SetPatientDescription(s string) *PatientUpdateOne {
	puo.mutation.SetPatientDescription(s)
	return puo
}

// SetNillablePatientDescription sets the "patient_description" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientDescription(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientDescription(*s)
	}
	return puo
}

// ClearPatientDescription clears the value of the "patient_description" field.
func (puo *PatientUpdateOne) ClearPatientDescription() *PatientUpdateOne {
	puo.mutation.ClearPatientDescription()
	return puo
}

// SetPatientLanguage sets the "patient_language" field.
func (puo *PatientUpdateOne) SetPatientLanguage(s string) *PatientUpdateOne {
	puo.mutation.SetPatientLanguage(s)
	return puo
}

// SetNillablePatientLanguage sets the "patient_language" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePatientLanguage(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPatientLanguage(*s)
	}
	return puo
}

// ClearPatientLanguage clears the value of the "patient_language" field.
func (puo *PatientUpdateOne) ClearPatientLanguage() *PatientUpdateOne {
	puo.mutation.ClearPatientLanguage()
	return puo
}

// SetCurrentCustomerID sets the "current_customer" edge to the Customer entity by ID.
func (puo *PatientUpdateOne) SetCurrentCustomerID(id int) *PatientUpdateOne {
	puo.mutation.SetCurrentCustomerID(id)
	return puo
}

// SetNillableCurrentCustomerID sets the "current_customer" edge to the Customer entity by ID if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableCurrentCustomerID(id *int) *PatientUpdateOne {
	if id != nil {
		puo = puo.SetCurrentCustomerID(*id)
	}
	return puo
}

// SetCurrentCustomer sets the "current_customer" edge to the Customer entity.
func (puo *PatientUpdateOne) SetCurrentCustomer(c *Customer) *PatientUpdateOne {
	return puo.SetCurrentCustomerID(c.ID)
}

// AddPatientCustomerIDs adds the "patient_customers" edge to the Customer entity by IDs.
func (puo *PatientUpdateOne) AddPatientCustomerIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.AddPatientCustomerIDs(ids...)
	return puo
}

// AddPatientCustomers adds the "patient_customers" edges to the Customer entity.
func (puo *PatientUpdateOne) AddPatientCustomers(c ...*Customer) *PatientUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddPatientCustomerIDs(ids...)
}

// AddSampleIDs adds the "samples" edge to the Sample entity by IDs.
func (puo *PatientUpdateOne) AddSampleIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.AddSampleIDs(ids...)
	return puo
}

// AddSamples adds the "samples" edges to the Sample entity.
func (puo *PatientUpdateOne) AddSamples(s ...*Sample) *PatientUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSampleIDs(ids...)
}

// AddPatientContactIDs adds the "patient_contacts" edge to the Contact entity by IDs.
func (puo *PatientUpdateOne) AddPatientContactIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.AddPatientContactIDs(ids...)
	return puo
}

// AddPatientContacts adds the "patient_contacts" edges to the Contact entity.
func (puo *PatientUpdateOne) AddPatientContacts(c ...*Contact) *PatientUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddPatientContactIDs(ids...)
}

// AddPatientAddressIDs adds the "patient_addresses" edge to the Address entity by IDs.
func (puo *PatientUpdateOne) AddPatientAddressIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.AddPatientAddressIDs(ids...)
	return puo
}

// AddPatientAddresses adds the "patient_addresses" edges to the Address entity.
func (puo *PatientUpdateOne) AddPatientAddresses(a ...*Address) *PatientUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddPatientAddressIDs(ids...)
}

// AddPatientClinicIDs adds the "patient_clinics" edge to the Clinic entity by IDs.
func (puo *PatientUpdateOne) AddPatientClinicIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.AddPatientClinicIDs(ids...)
	return puo
}

// AddPatientClinics adds the "patient_clinics" edges to the Clinic entity.
func (puo *PatientUpdateOne) AddPatientClinics(c ...*Clinic) *PatientUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddPatientClinicIDs(ids...)
}

// SetUser sets the "user" edge to the User entity.
func (puo *PatientUpdateOne) SetUser(u *User) *PatientUpdateOne {
	return puo.SetUserID(u.ID)
}

// AddPatientWeightHeightHistoryIDs adds the "patient_weight_height_history" edge to the PatientWeightHeight entity by IDs.
func (puo *PatientUpdateOne) AddPatientWeightHeightHistoryIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.AddPatientWeightHeightHistoryIDs(ids...)
	return puo
}

// AddPatientWeightHeightHistory adds the "patient_weight_height_history" edges to the PatientWeightHeight entity.
func (puo *PatientUpdateOne) AddPatientWeightHeightHistory(p ...*PatientWeightHeight) *PatientUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPatientWeightHeightHistoryIDs(ids...)
}

// AddPatientSettingIDs adds the "patient_settings" edge to the Setting entity by IDs.
func (puo *PatientUpdateOne) AddPatientSettingIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.AddPatientSettingIDs(ids...)
	return puo
}

// AddPatientSettings adds the "patient_settings" edges to the Setting entity.
func (puo *PatientUpdateOne) AddPatientSettings(s ...*Setting) *PatientUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddPatientSettingIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (puo *PatientUpdateOne) Mutation() *PatientMutation {
	return puo.mutation
}

// ClearCurrentCustomer clears the "current_customer" edge to the Customer entity.
func (puo *PatientUpdateOne) ClearCurrentCustomer() *PatientUpdateOne {
	puo.mutation.ClearCurrentCustomer()
	return puo
}

// ClearPatientCustomers clears all "patient_customers" edges to the Customer entity.
func (puo *PatientUpdateOne) ClearPatientCustomers() *PatientUpdateOne {
	puo.mutation.ClearPatientCustomers()
	return puo
}

// RemovePatientCustomerIDs removes the "patient_customers" edge to Customer entities by IDs.
func (puo *PatientUpdateOne) RemovePatientCustomerIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.RemovePatientCustomerIDs(ids...)
	return puo
}

// RemovePatientCustomers removes "patient_customers" edges to Customer entities.
func (puo *PatientUpdateOne) RemovePatientCustomers(c ...*Customer) *PatientUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemovePatientCustomerIDs(ids...)
}

// ClearSamples clears all "samples" edges to the Sample entity.
func (puo *PatientUpdateOne) ClearSamples() *PatientUpdateOne {
	puo.mutation.ClearSamples()
	return puo
}

// RemoveSampleIDs removes the "samples" edge to Sample entities by IDs.
func (puo *PatientUpdateOne) RemoveSampleIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.RemoveSampleIDs(ids...)
	return puo
}

// RemoveSamples removes "samples" edges to Sample entities.
func (puo *PatientUpdateOne) RemoveSamples(s ...*Sample) *PatientUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSampleIDs(ids...)
}

// ClearPatientContacts clears all "patient_contacts" edges to the Contact entity.
func (puo *PatientUpdateOne) ClearPatientContacts() *PatientUpdateOne {
	puo.mutation.ClearPatientContacts()
	return puo
}

// RemovePatientContactIDs removes the "patient_contacts" edge to Contact entities by IDs.
func (puo *PatientUpdateOne) RemovePatientContactIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.RemovePatientContactIDs(ids...)
	return puo
}

// RemovePatientContacts removes "patient_contacts" edges to Contact entities.
func (puo *PatientUpdateOne) RemovePatientContacts(c ...*Contact) *PatientUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemovePatientContactIDs(ids...)
}

// ClearPatientAddresses clears all "patient_addresses" edges to the Address entity.
func (puo *PatientUpdateOne) ClearPatientAddresses() *PatientUpdateOne {
	puo.mutation.ClearPatientAddresses()
	return puo
}

// RemovePatientAddressIDs removes the "patient_addresses" edge to Address entities by IDs.
func (puo *PatientUpdateOne) RemovePatientAddressIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.RemovePatientAddressIDs(ids...)
	return puo
}

// RemovePatientAddresses removes "patient_addresses" edges to Address entities.
func (puo *PatientUpdateOne) RemovePatientAddresses(a ...*Address) *PatientUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemovePatientAddressIDs(ids...)
}

// ClearPatientClinics clears all "patient_clinics" edges to the Clinic entity.
func (puo *PatientUpdateOne) ClearPatientClinics() *PatientUpdateOne {
	puo.mutation.ClearPatientClinics()
	return puo
}

// RemovePatientClinicIDs removes the "patient_clinics" edge to Clinic entities by IDs.
func (puo *PatientUpdateOne) RemovePatientClinicIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.RemovePatientClinicIDs(ids...)
	return puo
}

// RemovePatientClinics removes "patient_clinics" edges to Clinic entities.
func (puo *PatientUpdateOne) RemovePatientClinics(c ...*Clinic) *PatientUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemovePatientClinicIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (puo *PatientUpdateOne) ClearUser() *PatientUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// ClearPatientWeightHeightHistory clears all "patient_weight_height_history" edges to the PatientWeightHeight entity.
func (puo *PatientUpdateOne) ClearPatientWeightHeightHistory() *PatientUpdateOne {
	puo.mutation.ClearPatientWeightHeightHistory()
	return puo
}

// RemovePatientWeightHeightHistoryIDs removes the "patient_weight_height_history" edge to PatientWeightHeight entities by IDs.
func (puo *PatientUpdateOne) RemovePatientWeightHeightHistoryIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.RemovePatientWeightHeightHistoryIDs(ids...)
	return puo
}

// RemovePatientWeightHeightHistory removes "patient_weight_height_history" edges to PatientWeightHeight entities.
func (puo *PatientUpdateOne) RemovePatientWeightHeightHistory(p ...*PatientWeightHeight) *PatientUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePatientWeightHeightHistoryIDs(ids...)
}

// ClearPatientSettings clears all "patient_settings" edges to the Setting entity.
func (puo *PatientUpdateOne) ClearPatientSettings() *PatientUpdateOne {
	puo.mutation.ClearPatientSettings()
	return puo
}

// RemovePatientSettingIDs removes the "patient_settings" edge to Setting entities by IDs.
func (puo *PatientUpdateOne) RemovePatientSettingIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.RemovePatientSettingIDs(ids...)
	return puo
}

// RemovePatientSettings removes "patient_settings" edges to Setting entities.
func (puo *PatientUpdateOne) RemovePatientSettings(s ...*Setting) *PatientUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemovePatientSettingIDs(ids...)
}

// Where appends a list predicates to the PatientUpdate builder.
func (puo *PatientUpdateOne) Where(ps ...predicate.Patient) *PatientUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PatientUpdateOne) Select(field string, fields ...string) *PatientUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Patient entity.
func (puo *PatientUpdateOne) Save(ctx context.Context) (*Patient, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PatientUpdateOne) SaveX(ctx context.Context) *Patient {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PatientUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PatientUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PatientUpdateOne) sqlSave(ctx context.Context) (_node *Patient, err error) {
	_spec := sqlgraph.NewUpdateSpec(patient.Table, patient.Columns, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Patient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, patient.FieldID)
		for _, f := range fields {
			if !patient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != patient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.PatientType(); ok {
		_spec.SetField(patient.FieldPatientType, field.TypeString, value)
	}
	if value, ok := puo.mutation.OriginalPatientID(); ok {
		_spec.SetField(patient.FieldOriginalPatientID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedOriginalPatientID(); ok {
		_spec.AddField(patient.FieldOriginalPatientID, field.TypeInt, value)
	}
	if puo.mutation.OriginalPatientIDCleared() {
		_spec.ClearField(patient.FieldOriginalPatientID, field.TypeInt)
	}
	if value, ok := puo.mutation.PatientGender(); ok {
		_spec.SetField(patient.FieldPatientGender, field.TypeString, value)
	}
	if puo.mutation.PatientGenderCleared() {
		_spec.ClearField(patient.FieldPatientGender, field.TypeString)
	}
	if value, ok := puo.mutation.PatientFirstName(); ok {
		_spec.SetField(patient.FieldPatientFirstName, field.TypeString, value)
	}
	if puo.mutation.PatientFirstNameCleared() {
		_spec.ClearField(patient.FieldPatientFirstName, field.TypeString)
	}
	if value, ok := puo.mutation.PatientLastName(); ok {
		_spec.SetField(patient.FieldPatientLastName, field.TypeString, value)
	}
	if puo.mutation.PatientLastNameCleared() {
		_spec.ClearField(patient.FieldPatientLastName, field.TypeString)
	}
	if value, ok := puo.mutation.PatientMiddleName(); ok {
		_spec.SetField(patient.FieldPatientMiddleName, field.TypeString, value)
	}
	if puo.mutation.PatientMiddleNameCleared() {
		_spec.ClearField(patient.FieldPatientMiddleName, field.TypeString)
	}
	if value, ok := puo.mutation.PatientMedicalRecordNumber(); ok {
		_spec.SetField(patient.FieldPatientMedicalRecordNumber, field.TypeString, value)
	}
	if puo.mutation.PatientMedicalRecordNumberCleared() {
		_spec.ClearField(patient.FieldPatientMedicalRecordNumber, field.TypeString)
	}
	if value, ok := puo.mutation.PatientLegalFirstname(); ok {
		_spec.SetField(patient.FieldPatientLegalFirstname, field.TypeString, value)
	}
	if puo.mutation.PatientLegalFirstnameCleared() {
		_spec.ClearField(patient.FieldPatientLegalFirstname, field.TypeString)
	}
	if value, ok := puo.mutation.PatientLegalLastname(); ok {
		_spec.SetField(patient.FieldPatientLegalLastname, field.TypeString, value)
	}
	if puo.mutation.PatientLegalLastnameCleared() {
		_spec.ClearField(patient.FieldPatientLegalLastname, field.TypeString)
	}
	if value, ok := puo.mutation.PatientHonorific(); ok {
		_spec.SetField(patient.FieldPatientHonorific, field.TypeString, value)
	}
	if puo.mutation.PatientHonorificCleared() {
		_spec.ClearField(patient.FieldPatientHonorific, field.TypeString)
	}
	if value, ok := puo.mutation.PatientSuffix(); ok {
		_spec.SetField(patient.FieldPatientSuffix, field.TypeString, value)
	}
	if puo.mutation.PatientSuffixCleared() {
		_spec.ClearField(patient.FieldPatientSuffix, field.TypeString)
	}
	if value, ok := puo.mutation.PatientMarital(); ok {
		_spec.SetField(patient.FieldPatientMarital, field.TypeString, value)
	}
	if puo.mutation.PatientMaritalCleared() {
		_spec.ClearField(patient.FieldPatientMarital, field.TypeString)
	}
	if value, ok := puo.mutation.PatientEthnicity(); ok {
		_spec.SetField(patient.FieldPatientEthnicity, field.TypeString, value)
	}
	if puo.mutation.PatientEthnicityCleared() {
		_spec.ClearField(patient.FieldPatientEthnicity, field.TypeString)
	}
	if value, ok := puo.mutation.PatientBirthdate(); ok {
		_spec.SetField(patient.FieldPatientBirthdate, field.TypeString, value)
	}
	if puo.mutation.PatientBirthdateCleared() {
		_spec.ClearField(patient.FieldPatientBirthdate, field.TypeString)
	}
	if value, ok := puo.mutation.PatientSsn(); ok {
		_spec.SetField(patient.FieldPatientSsn, field.TypeString, value)
	}
	if puo.mutation.PatientSsnCleared() {
		_spec.ClearField(patient.FieldPatientSsn, field.TypeString)
	}
	if value, ok := puo.mutation.PatientHeight(); ok {
		_spec.SetField(patient.FieldPatientHeight, field.TypeString, value)
	}
	if puo.mutation.PatientHeightCleared() {
		_spec.ClearField(patient.FieldPatientHeight, field.TypeString)
	}
	if value, ok := puo.mutation.PatientWeight(); ok {
		_spec.SetField(patient.FieldPatientWeight, field.TypeString, value)
	}
	if puo.mutation.PatientWeightCleared() {
		_spec.ClearField(patient.FieldPatientWeight, field.TypeString)
	}
	if value, ok := puo.mutation.OfficeallyID(); ok {
		_spec.SetField(patient.FieldOfficeallyID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedOfficeallyID(); ok {
		_spec.AddField(patient.FieldOfficeallyID, field.TypeInt, value)
	}
	if puo.mutation.OfficeallyIDCleared() {
		_spec.ClearField(patient.FieldOfficeallyID, field.TypeInt)
	}
	if value, ok := puo.mutation.PatientNyWaiveFormIssueStatus(); ok {
		_spec.SetField(patient.FieldPatientNyWaiveFormIssueStatus, field.TypeString, value)
	}
	if value, ok := puo.mutation.PatientCreateTime(); ok {
		_spec.SetField(patient.FieldPatientCreateTime, field.TypeTime, value)
	}
	if puo.mutation.PatientCreateTimeCleared() {
		_spec.ClearField(patient.FieldPatientCreateTime, field.TypeTime)
	}
	if value, ok := puo.mutation.IsActive(); ok {
		_spec.SetField(patient.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := puo.mutation.PatientFlagged(); ok {
		_spec.SetField(patient.FieldPatientFlagged, field.TypeBool, value)
	}
	if value, ok := puo.mutation.PatientServiceDate(); ok {
		_spec.SetField(patient.FieldPatientServiceDate, field.TypeTime, value)
	}
	if puo.mutation.PatientServiceDateCleared() {
		_spec.ClearField(patient.FieldPatientServiceDate, field.TypeTime)
	}
	if value, ok := puo.mutation.PatientDescription(); ok {
		_spec.SetField(patient.FieldPatientDescription, field.TypeString, value)
	}
	if puo.mutation.PatientDescriptionCleared() {
		_spec.ClearField(patient.FieldPatientDescription, field.TypeString)
	}
	if value, ok := puo.mutation.PatientLanguage(); ok {
		_spec.SetField(patient.FieldPatientLanguage, field.TypeString, value)
	}
	if puo.mutation.PatientLanguageCleared() {
		_spec.ClearField(patient.FieldPatientLanguage, field.TypeString)
	}
	if puo.mutation.CurrentCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.CurrentCustomerTable,
			Columns: []string{patient.CurrentCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CurrentCustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.CurrentCustomerTable,
			Columns: []string{patient.CurrentCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PatientCustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.PatientCustomersTable,
			Columns: patient.PatientCustomersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPatientCustomersIDs(); len(nodes) > 0 && !puo.mutation.PatientCustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.PatientCustomersTable,
			Columns: patient.PatientCustomersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PatientCustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.PatientCustomersTable,
			Columns: patient.PatientCustomersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SamplesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.SamplesTable,
			Columns: []string{patient.SamplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSamplesIDs(); len(nodes) > 0 && !puo.mutation.SamplesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.SamplesTable,
			Columns: []string{patient.SamplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SamplesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.SamplesTable,
			Columns: []string{patient.SamplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PatientContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientContactsTable,
			Columns: []string{patient.PatientContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPatientContactsIDs(); len(nodes) > 0 && !puo.mutation.PatientContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientContactsTable,
			Columns: []string{patient.PatientContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PatientContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientContactsTable,
			Columns: []string{patient.PatientContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PatientAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientAddressesTable,
			Columns: []string{patient.PatientAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPatientAddressesIDs(); len(nodes) > 0 && !puo.mutation.PatientAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientAddressesTable,
			Columns: []string{patient.PatientAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PatientAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientAddressesTable,
			Columns: []string{patient.PatientAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PatientClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.PatientClinicsTable,
			Columns: patient.PatientClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPatientClinicsIDs(); len(nodes) > 0 && !puo.mutation.PatientClinicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.PatientClinicsTable,
			Columns: patient.PatientClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PatientClinicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.PatientClinicsTable,
			Columns: patient.PatientClinicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.UserTable,
			Columns: []string{patient.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.UserTable,
			Columns: []string{patient.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PatientWeightHeightHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientWeightHeightHistoryTable,
			Columns: []string{patient.PatientWeightHeightHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patientweightheight.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPatientWeightHeightHistoryIDs(); len(nodes) > 0 && !puo.mutation.PatientWeightHeightHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientWeightHeightHistoryTable,
			Columns: []string{patient.PatientWeightHeightHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patientweightheight.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PatientWeightHeightHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientWeightHeightHistoryTable,
			Columns: []string{patient.PatientWeightHeightHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patientweightheight.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PatientSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   patient.PatientSettingsTable,
			Columns: patient.PatientSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPatientSettingsIDs(); len(nodes) > 0 && !puo.mutation.PatientSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   patient.PatientSettingsTable,
			Columns: patient.PatientSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PatientSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   patient.PatientSettingsTable,
			Columns: patient.PatientSettingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Patient{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
