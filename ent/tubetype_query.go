// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/predicate"
	"coresamples/ent/sampletype"
	"coresamples/ent/test"
	"coresamples/ent/tube"
	"coresamples/ent/tubetype"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TubeTypeQuery is the builder for querying TubeType entities.
type TubeTypeQuery struct {
	config
	ctx             *QueryContext
	order           []tubetype.OrderOption
	inters          []Interceptor
	predicates      []predicate.TubeType
	withTube        *TubeQuery
	withSampleTypes *SampleTypeQuery
	withTests       *TestQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TubeTypeQuery builder.
func (ttq *TubeTypeQuery) Where(ps ...predicate.TubeType) *TubeTypeQuery {
	ttq.predicates = append(ttq.predicates, ps...)
	return ttq
}

// Limit the number of records to be returned by this query.
func (ttq *TubeTypeQuery) Limit(limit int) *TubeTypeQuery {
	ttq.ctx.Limit = &limit
	return ttq
}

// Offset to start from.
func (ttq *TubeTypeQuery) Offset(offset int) *TubeTypeQuery {
	ttq.ctx.Offset = &offset
	return ttq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ttq *TubeTypeQuery) Unique(unique bool) *TubeTypeQuery {
	ttq.ctx.Unique = &unique
	return ttq
}

// Order specifies how the records should be ordered.
func (ttq *TubeTypeQuery) Order(o ...tubetype.OrderOption) *TubeTypeQuery {
	ttq.order = append(ttq.order, o...)
	return ttq
}

// QueryTube chains the current query on the "tube" edge.
func (ttq *TubeTypeQuery) QueryTube() *TubeQuery {
	query := (&TubeClient{config: ttq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tubetype.Table, tubetype.FieldID, selector),
			sqlgraph.To(tube.Table, tube.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tubetype.TubeTable, tubetype.TubePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ttq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySampleTypes chains the current query on the "sample_types" edge.
func (ttq *TubeTypeQuery) QuerySampleTypes() *SampleTypeQuery {
	query := (&SampleTypeClient{config: ttq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tubetype.Table, tubetype.FieldID, selector),
			sqlgraph.To(sampletype.Table, sampletype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tubetype.SampleTypesTable, tubetype.SampleTypesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ttq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTests chains the current query on the "tests" edge.
func (ttq *TubeTypeQuery) QueryTests() *TestQuery {
	query := (&TestClient{config: ttq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tubetype.Table, tubetype.FieldID, selector),
			sqlgraph.To(test.Table, test.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, tubetype.TestsTable, tubetype.TestsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ttq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TubeType entity from the query.
// Returns a *NotFoundError when no TubeType was found.
func (ttq *TubeTypeQuery) First(ctx context.Context) (*TubeType, error) {
	nodes, err := ttq.Limit(1).All(setContextOp(ctx, ttq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tubetype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ttq *TubeTypeQuery) FirstX(ctx context.Context) *TubeType {
	node, err := ttq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TubeType ID from the query.
// Returns a *NotFoundError when no TubeType ID was found.
func (ttq *TubeTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ttq.Limit(1).IDs(setContextOp(ctx, ttq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tubetype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ttq *TubeTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := ttq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TubeType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TubeType entity is found.
// Returns a *NotFoundError when no TubeType entities are found.
func (ttq *TubeTypeQuery) Only(ctx context.Context) (*TubeType, error) {
	nodes, err := ttq.Limit(2).All(setContextOp(ctx, ttq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tubetype.Label}
	default:
		return nil, &NotSingularError{tubetype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ttq *TubeTypeQuery) OnlyX(ctx context.Context) *TubeType {
	node, err := ttq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TubeType ID in the query.
// Returns a *NotSingularError when more than one TubeType ID is found.
// Returns a *NotFoundError when no entities are found.
func (ttq *TubeTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ttq.Limit(2).IDs(setContextOp(ctx, ttq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tubetype.Label}
	default:
		err = &NotSingularError{tubetype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ttq *TubeTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := ttq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TubeTypes.
func (ttq *TubeTypeQuery) All(ctx context.Context) ([]*TubeType, error) {
	ctx = setContextOp(ctx, ttq.ctx, "All")
	if err := ttq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TubeType, *TubeTypeQuery]()
	return withInterceptors[[]*TubeType](ctx, ttq, qr, ttq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ttq *TubeTypeQuery) AllX(ctx context.Context) []*TubeType {
	nodes, err := ttq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TubeType IDs.
func (ttq *TubeTypeQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ttq.ctx.Unique == nil && ttq.path != nil {
		ttq.Unique(true)
	}
	ctx = setContextOp(ctx, ttq.ctx, "IDs")
	if err = ttq.Select(tubetype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ttq *TubeTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := ttq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ttq *TubeTypeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ttq.ctx, "Count")
	if err := ttq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ttq, querierCount[*TubeTypeQuery](), ttq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ttq *TubeTypeQuery) CountX(ctx context.Context) int {
	count, err := ttq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ttq *TubeTypeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ttq.ctx, "Exist")
	switch _, err := ttq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ttq *TubeTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := ttq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TubeTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ttq *TubeTypeQuery) Clone() *TubeTypeQuery {
	if ttq == nil {
		return nil
	}
	return &TubeTypeQuery{
		config:          ttq.config,
		ctx:             ttq.ctx.Clone(),
		order:           append([]tubetype.OrderOption{}, ttq.order...),
		inters:          append([]Interceptor{}, ttq.inters...),
		predicates:      append([]predicate.TubeType{}, ttq.predicates...),
		withTube:        ttq.withTube.Clone(),
		withSampleTypes: ttq.withSampleTypes.Clone(),
		withTests:       ttq.withTests.Clone(),
		// clone intermediate query.
		sql:  ttq.sql.Clone(),
		path: ttq.path,
	}
}

// WithTube tells the query-builder to eager-load the nodes that are connected to
// the "tube" edge. The optional arguments are used to configure the query builder of the edge.
func (ttq *TubeTypeQuery) WithTube(opts ...func(*TubeQuery)) *TubeTypeQuery {
	query := (&TubeClient{config: ttq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ttq.withTube = query
	return ttq
}

// WithSampleTypes tells the query-builder to eager-load the nodes that are connected to
// the "sample_types" edge. The optional arguments are used to configure the query builder of the edge.
func (ttq *TubeTypeQuery) WithSampleTypes(opts ...func(*SampleTypeQuery)) *TubeTypeQuery {
	query := (&SampleTypeClient{config: ttq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ttq.withSampleTypes = query
	return ttq
}

// WithTests tells the query-builder to eager-load the nodes that are connected to
// the "tests" edge. The optional arguments are used to configure the query builder of the edge.
func (ttq *TubeTypeQuery) WithTests(opts ...func(*TestQuery)) *TubeTypeQuery {
	query := (&TestClient{config: ttq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ttq.withTests = query
	return ttq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TubeName string `json:"tube_name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TubeType.Query().
//		GroupBy(tubetype.FieldTubeName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ttq *TubeTypeQuery) GroupBy(field string, fields ...string) *TubeTypeGroupBy {
	ttq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TubeTypeGroupBy{build: ttq}
	grbuild.flds = &ttq.ctx.Fields
	grbuild.label = tubetype.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TubeName string `json:"tube_name,omitempty"`
//	}
//
//	client.TubeType.Query().
//		Select(tubetype.FieldTubeName).
//		Scan(ctx, &v)
func (ttq *TubeTypeQuery) Select(fields ...string) *TubeTypeSelect {
	ttq.ctx.Fields = append(ttq.ctx.Fields, fields...)
	sbuild := &TubeTypeSelect{TubeTypeQuery: ttq}
	sbuild.label = tubetype.Label
	sbuild.flds, sbuild.scan = &ttq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TubeTypeSelect configured with the given aggregations.
func (ttq *TubeTypeQuery) Aggregate(fns ...AggregateFunc) *TubeTypeSelect {
	return ttq.Select().Aggregate(fns...)
}

func (ttq *TubeTypeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ttq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ttq); err != nil {
				return err
			}
		}
	}
	for _, f := range ttq.ctx.Fields {
		if !tubetype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ttq.path != nil {
		prev, err := ttq.path(ctx)
		if err != nil {
			return err
		}
		ttq.sql = prev
	}
	return nil
}

func (ttq *TubeTypeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TubeType, error) {
	var (
		nodes       = []*TubeType{}
		_spec       = ttq.querySpec()
		loadedTypes = [3]bool{
			ttq.withTube != nil,
			ttq.withSampleTypes != nil,
			ttq.withTests != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TubeType).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TubeType{config: ttq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ttq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ttq.withTube; query != nil {
		if err := ttq.loadTube(ctx, query, nodes,
			func(n *TubeType) { n.Edges.Tube = []*Tube{} },
			func(n *TubeType, e *Tube) { n.Edges.Tube = append(n.Edges.Tube, e) }); err != nil {
			return nil, err
		}
	}
	if query := ttq.withSampleTypes; query != nil {
		if err := ttq.loadSampleTypes(ctx, query, nodes,
			func(n *TubeType) { n.Edges.SampleTypes = []*SampleType{} },
			func(n *TubeType, e *SampleType) { n.Edges.SampleTypes = append(n.Edges.SampleTypes, e) }); err != nil {
			return nil, err
		}
	}
	if query := ttq.withTests; query != nil {
		if err := ttq.loadTests(ctx, query, nodes,
			func(n *TubeType) { n.Edges.Tests = []*Test{} },
			func(n *TubeType, e *Test) { n.Edges.Tests = append(n.Edges.Tests, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ttq *TubeTypeQuery) loadTube(ctx context.Context, query *TubeQuery, nodes []*TubeType, init func(*TubeType), assign func(*TubeType, *Tube)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*TubeType)
	nids := make(map[int]map[*TubeType]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(tubetype.TubeTable)
		s.Join(joinT).On(s.C(tube.FieldID), joinT.C(tubetype.TubePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(tubetype.TubePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(tubetype.TubePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*TubeType]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Tube](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tube" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (ttq *TubeTypeQuery) loadSampleTypes(ctx context.Context, query *SampleTypeQuery, nodes []*TubeType, init func(*TubeType), assign func(*TubeType, *SampleType)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*TubeType)
	nids := make(map[int]map[*TubeType]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(tubetype.SampleTypesTable)
		s.Join(joinT).On(s.C(sampletype.FieldID), joinT.C(tubetype.SampleTypesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(tubetype.SampleTypesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(tubetype.SampleTypesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*TubeType]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*SampleType](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "sample_types" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (ttq *TubeTypeQuery) loadTests(ctx context.Context, query *TestQuery, nodes []*TubeType, init func(*TubeType), assign func(*TubeType, *Test)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*TubeType)
	nids := make(map[int]map[*TubeType]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(tubetype.TestsTable)
		s.Join(joinT).On(s.C(test.FieldID), joinT.C(tubetype.TestsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(tubetype.TestsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(tubetype.TestsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*TubeType]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Test](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tests" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (ttq *TubeTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ttq.querySpec()
	_spec.Node.Columns = ttq.ctx.Fields
	if len(ttq.ctx.Fields) > 0 {
		_spec.Unique = ttq.ctx.Unique != nil && *ttq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ttq.driver, _spec)
}

func (ttq *TubeTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tubetype.Table, tubetype.Columns, sqlgraph.NewFieldSpec(tubetype.FieldID, field.TypeInt))
	_spec.From = ttq.sql
	if unique := ttq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ttq.path != nil {
		_spec.Unique = true
	}
	if fields := ttq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tubetype.FieldID)
		for i := range fields {
			if fields[i] != tubetype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ttq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ttq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ttq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ttq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ttq *TubeTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ttq.driver.Dialect())
	t1 := builder.Table(tubetype.Table)
	columns := ttq.ctx.Fields
	if len(columns) == 0 {
		columns = tubetype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ttq.sql != nil {
		selector = ttq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ttq.ctx.Unique != nil && *ttq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ttq.predicates {
		p(selector)
	}
	for _, p := range ttq.order {
		p(selector)
	}
	if offset := ttq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ttq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TubeTypeGroupBy is the group-by builder for TubeType entities.
type TubeTypeGroupBy struct {
	selector
	build *TubeTypeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ttgb *TubeTypeGroupBy) Aggregate(fns ...AggregateFunc) *TubeTypeGroupBy {
	ttgb.fns = append(ttgb.fns, fns...)
	return ttgb
}

// Scan applies the selector query and scans the result into the given value.
func (ttgb *TubeTypeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ttgb.build.ctx, "GroupBy")
	if err := ttgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TubeTypeQuery, *TubeTypeGroupBy](ctx, ttgb.build, ttgb, ttgb.build.inters, v)
}

func (ttgb *TubeTypeGroupBy) sqlScan(ctx context.Context, root *TubeTypeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ttgb.fns))
	for _, fn := range ttgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ttgb.flds)+len(ttgb.fns))
		for _, f := range *ttgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ttgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ttgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TubeTypeSelect is the builder for selecting fields of TubeType entities.
type TubeTypeSelect struct {
	*TubeTypeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tts *TubeTypeSelect) Aggregate(fns ...AggregateFunc) *TubeTypeSelect {
	tts.fns = append(tts.fns, fns...)
	return tts
}

// Scan applies the selector query and scans the result into the given value.
func (tts *TubeTypeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tts.ctx, "Select")
	if err := tts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TubeTypeQuery, *TubeTypeSelect](ctx, tts.TubeTypeQuery, tts, tts.inters, v)
}

func (tts *TubeTypeSelect) sqlScan(ctx context.Context, root *TubeTypeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tts.fns))
	for _, fn := range tts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
