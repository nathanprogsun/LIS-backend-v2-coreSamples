// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/address"
	"coresamples/ent/clinic"
	"coresamples/ent/contact"
	"coresamples/ent/customer"
	"coresamples/ent/orderflag"
	"coresamples/ent/orderinfo"
	"coresamples/ent/predicate"
	"coresamples/ent/sample"
	"coresamples/ent/test"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderInfoUpdate is the builder for updating OrderInfo entities.
type OrderInfoUpdate struct {
	config
	hooks    []Hook
	mutation *OrderInfoMutation
}

// Where appends a list predicates to the OrderInfoUpdate builder.
func (oiu *OrderInfoUpdate) Where(ps ...predicate.OrderInfo) *OrderInfoUpdate {
	oiu.mutation.Where(ps...)
	return oiu
}

// SetOrderTitle sets the "order_title" field.
func (oiu *OrderInfoUpdate) SetOrderTitle(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderTitle(s)
	return oiu
}

// SetNillableOrderTitle sets the "order_title" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderTitle(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderTitle(*s)
	}
	return oiu
}

// SetOrderType sets the "order_type" field.
func (oiu *OrderInfoUpdate) SetOrderType(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderType(s)
	return oiu
}

// SetNillableOrderType sets the "order_type" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderType(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderType(*s)
	}
	return oiu
}

// SetOrderDescription sets the "order_description" field.
func (oiu *OrderInfoUpdate) SetOrderDescription(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderDescription(s)
	return oiu
}

// SetNillableOrderDescription sets the "order_description" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderDescription(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderDescription(*s)
	}
	return oiu
}

// SetOrderConfirmationNumber sets the "order_confirmation_number" field.
func (oiu *OrderInfoUpdate) SetOrderConfirmationNumber(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderConfirmationNumber(s)
	return oiu
}

// SetNillableOrderConfirmationNumber sets the "order_confirmation_number" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderConfirmationNumber(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderConfirmationNumber(*s)
	}
	return oiu
}

// SetClinicID sets the "clinic_id" field.
func (oiu *OrderInfoUpdate) SetClinicID(i int) *OrderInfoUpdate {
	oiu.mutation.SetClinicID(i)
	return oiu
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableClinicID(i *int) *OrderInfoUpdate {
	if i != nil {
		oiu.SetClinicID(*i)
	}
	return oiu
}

// ClearClinicID clears the value of the "clinic_id" field.
func (oiu *OrderInfoUpdate) ClearClinicID() *OrderInfoUpdate {
	oiu.mutation.ClearClinicID()
	return oiu
}

// SetCustomerID sets the "customer_id" field.
func (oiu *OrderInfoUpdate) SetCustomerID(i int) *OrderInfoUpdate {
	oiu.mutation.SetCustomerID(i)
	return oiu
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableCustomerID(i *int) *OrderInfoUpdate {
	if i != nil {
		oiu.SetCustomerID(*i)
	}
	return oiu
}

// ClearCustomerID clears the value of the "customer_id" field.
func (oiu *OrderInfoUpdate) ClearCustomerID() *OrderInfoUpdate {
	oiu.mutation.ClearCustomerID()
	return oiu
}

// SetOrderCreateTime sets the "order_create_time" field.
func (oiu *OrderInfoUpdate) SetOrderCreateTime(t time.Time) *OrderInfoUpdate {
	oiu.mutation.SetOrderCreateTime(t)
	return oiu
}

// SetNillableOrderCreateTime sets the "order_create_time" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderCreateTime(t *time.Time) *OrderInfoUpdate {
	if t != nil {
		oiu.SetOrderCreateTime(*t)
	}
	return oiu
}

// SetOrderServiceTime sets the "order_service_time" field.
func (oiu *OrderInfoUpdate) SetOrderServiceTime(t time.Time) *OrderInfoUpdate {
	oiu.mutation.SetOrderServiceTime(t)
	return oiu
}

// SetNillableOrderServiceTime sets the "order_service_time" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderServiceTime(t *time.Time) *OrderInfoUpdate {
	if t != nil {
		oiu.SetOrderServiceTime(*t)
	}
	return oiu
}

// ClearOrderServiceTime clears the value of the "order_service_time" field.
func (oiu *OrderInfoUpdate) ClearOrderServiceTime() *OrderInfoUpdate {
	oiu.mutation.ClearOrderServiceTime()
	return oiu
}

// SetOrderProcessTime sets the "order_process_time" field.
func (oiu *OrderInfoUpdate) SetOrderProcessTime(t time.Time) *OrderInfoUpdate {
	oiu.mutation.SetOrderProcessTime(t)
	return oiu
}

// SetNillableOrderProcessTime sets the "order_process_time" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderProcessTime(t *time.Time) *OrderInfoUpdate {
	if t != nil {
		oiu.SetOrderProcessTime(*t)
	}
	return oiu
}

// ClearOrderProcessTime clears the value of the "order_process_time" field.
func (oiu *OrderInfoUpdate) ClearOrderProcessTime() *OrderInfoUpdate {
	oiu.mutation.ClearOrderProcessTime()
	return oiu
}

// SetOrderRedrawTime sets the "order_redraw_time" field.
func (oiu *OrderInfoUpdate) SetOrderRedrawTime(t time.Time) *OrderInfoUpdate {
	oiu.mutation.SetOrderRedrawTime(t)
	return oiu
}

// SetNillableOrderRedrawTime sets the "order_redraw_time" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderRedrawTime(t *time.Time) *OrderInfoUpdate {
	if t != nil {
		oiu.SetOrderRedrawTime(*t)
	}
	return oiu
}

// ClearOrderRedrawTime clears the value of the "order_redraw_time" field.
func (oiu *OrderInfoUpdate) ClearOrderRedrawTime() *OrderInfoUpdate {
	oiu.mutation.ClearOrderRedrawTime()
	return oiu
}

// SetOrderCancelTime sets the "order_cancel_time" field.
func (oiu *OrderInfoUpdate) SetOrderCancelTime(t time.Time) *OrderInfoUpdate {
	oiu.mutation.SetOrderCancelTime(t)
	return oiu
}

// SetNillableOrderCancelTime sets the "order_cancel_time" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderCancelTime(t *time.Time) *OrderInfoUpdate {
	if t != nil {
		oiu.SetOrderCancelTime(*t)
	}
	return oiu
}

// ClearOrderCancelTime clears the value of the "order_cancel_time" field.
func (oiu *OrderInfoUpdate) ClearOrderCancelTime() *OrderInfoUpdate {
	oiu.mutation.ClearOrderCancelTime()
	return oiu
}

// SetIsActive sets the "isActive" field.
func (oiu *OrderInfoUpdate) SetIsActive(b bool) *OrderInfoUpdate {
	oiu.mutation.SetIsActive(b)
	return oiu
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableIsActive(b *bool) *OrderInfoUpdate {
	if b != nil {
		oiu.SetIsActive(*b)
	}
	return oiu
}

// SetHasOrderSetting sets the "has_order_setting" field.
func (oiu *OrderInfoUpdate) SetHasOrderSetting(b bool) *OrderInfoUpdate {
	oiu.mutation.SetHasOrderSetting(b)
	return oiu
}

// SetNillableHasOrderSetting sets the "has_order_setting" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableHasOrderSetting(b *bool) *OrderInfoUpdate {
	if b != nil {
		oiu.SetHasOrderSetting(*b)
	}
	return oiu
}

// SetOrderCanceled sets the "order_canceled" field.
func (oiu *OrderInfoUpdate) SetOrderCanceled(b bool) *OrderInfoUpdate {
	oiu.mutation.SetOrderCanceled(b)
	return oiu
}

// SetNillableOrderCanceled sets the "order_canceled" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderCanceled(b *bool) *OrderInfoUpdate {
	if b != nil {
		oiu.SetOrderCanceled(*b)
	}
	return oiu
}

// SetOrderFlagged sets the "order_flagged" field.
func (oiu *OrderInfoUpdate) SetOrderFlagged(b bool) *OrderInfoUpdate {
	oiu.mutation.SetOrderFlagged(b)
	return oiu
}

// SetNillableOrderFlagged sets the "order_flagged" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderFlagged(b *bool) *OrderInfoUpdate {
	if b != nil {
		oiu.SetOrderFlagged(*b)
	}
	return oiu
}

// SetOrderStatus sets the "order_status" field.
func (oiu *OrderInfoUpdate) SetOrderStatus(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderStatus(s)
	return oiu
}

// SetNillableOrderStatus sets the "order_status" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderStatus(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderStatus(*s)
	}
	return oiu
}

// ClearOrderStatus clears the value of the "order_status" field.
func (oiu *OrderInfoUpdate) ClearOrderStatus() *OrderInfoUpdate {
	oiu.mutation.ClearOrderStatus()
	return oiu
}

// SetOrderMajorStatus sets the "order_major_status" field.
func (oiu *OrderInfoUpdate) SetOrderMajorStatus(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderMajorStatus(s)
	return oiu
}

// SetNillableOrderMajorStatus sets the "order_major_status" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderMajorStatus(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderMajorStatus(*s)
	}
	return oiu
}

// ClearOrderMajorStatus clears the value of the "order_major_status" field.
func (oiu *OrderInfoUpdate) ClearOrderMajorStatus() *OrderInfoUpdate {
	oiu.mutation.ClearOrderMajorStatus()
	return oiu
}

// SetOrderKitStatus sets the "order_kit_status" field.
func (oiu *OrderInfoUpdate) SetOrderKitStatus(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderKitStatus(s)
	return oiu
}

// SetNillableOrderKitStatus sets the "order_kit_status" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderKitStatus(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderKitStatus(*s)
	}
	return oiu
}

// ClearOrderKitStatus clears the value of the "order_kit_status" field.
func (oiu *OrderInfoUpdate) ClearOrderKitStatus() *OrderInfoUpdate {
	oiu.mutation.ClearOrderKitStatus()
	return oiu
}

// SetOrderReportStatus sets the "order_report_status" field.
func (oiu *OrderInfoUpdate) SetOrderReportStatus(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderReportStatus(s)
	return oiu
}

// SetNillableOrderReportStatus sets the "order_report_status" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderReportStatus(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderReportStatus(*s)
	}
	return oiu
}

// ClearOrderReportStatus clears the value of the "order_report_status" field.
func (oiu *OrderInfoUpdate) ClearOrderReportStatus() *OrderInfoUpdate {
	oiu.mutation.ClearOrderReportStatus()
	return oiu
}

// SetOrderTnpIssueStatus sets the "order_tnp_issue_status" field.
func (oiu *OrderInfoUpdate) SetOrderTnpIssueStatus(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderTnpIssueStatus(s)
	return oiu
}

// SetNillableOrderTnpIssueStatus sets the "order_tnp_issue_status" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderTnpIssueStatus(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderTnpIssueStatus(*s)
	}
	return oiu
}

// ClearOrderTnpIssueStatus clears the value of the "order_tnp_issue_status" field.
func (oiu *OrderInfoUpdate) ClearOrderTnpIssueStatus() *OrderInfoUpdate {
	oiu.mutation.ClearOrderTnpIssueStatus()
	return oiu
}

// SetOrderBillingIssueStatus sets the "order_billing_issue_status" field.
func (oiu *OrderInfoUpdate) SetOrderBillingIssueStatus(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderBillingIssueStatus(s)
	return oiu
}

// SetNillableOrderBillingIssueStatus sets the "order_billing_issue_status" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderBillingIssueStatus(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderBillingIssueStatus(*s)
	}
	return oiu
}

// ClearOrderBillingIssueStatus clears the value of the "order_billing_issue_status" field.
func (oiu *OrderInfoUpdate) ClearOrderBillingIssueStatus() *OrderInfoUpdate {
	oiu.mutation.ClearOrderBillingIssueStatus()
	return oiu
}

// SetOrderMissingInfoIssueStatus sets the "order_missing_info_issue_status" field.
func (oiu *OrderInfoUpdate) SetOrderMissingInfoIssueStatus(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderMissingInfoIssueStatus(s)
	return oiu
}

// SetNillableOrderMissingInfoIssueStatus sets the "order_missing_info_issue_status" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderMissingInfoIssueStatus(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderMissingInfoIssueStatus(*s)
	}
	return oiu
}

// ClearOrderMissingInfoIssueStatus clears the value of the "order_missing_info_issue_status" field.
func (oiu *OrderInfoUpdate) ClearOrderMissingInfoIssueStatus() *OrderInfoUpdate {
	oiu.mutation.ClearOrderMissingInfoIssueStatus()
	return oiu
}

// SetOrderIncompleteQuestionnaireIssueStatus sets the "order_incomplete_questionnaire_issue_status" field.
func (oiu *OrderInfoUpdate) SetOrderIncompleteQuestionnaireIssueStatus(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderIncompleteQuestionnaireIssueStatus(s)
	return oiu
}

// SetNillableOrderIncompleteQuestionnaireIssueStatus sets the "order_incomplete_questionnaire_issue_status" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderIncompleteQuestionnaireIssueStatus(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderIncompleteQuestionnaireIssueStatus(*s)
	}
	return oiu
}

// ClearOrderIncompleteQuestionnaireIssueStatus clears the value of the "order_incomplete_questionnaire_issue_status" field.
func (oiu *OrderInfoUpdate) ClearOrderIncompleteQuestionnaireIssueStatus() *OrderInfoUpdate {
	oiu.mutation.ClearOrderIncompleteQuestionnaireIssueStatus()
	return oiu
}

// SetOrderNyWaiveFormIssueStatus sets the "order_ny_waive_form_issue_status" field.
func (oiu *OrderInfoUpdate) SetOrderNyWaiveFormIssueStatus(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderNyWaiveFormIssueStatus(s)
	return oiu
}

// SetNillableOrderNyWaiveFormIssueStatus sets the "order_ny_waive_form_issue_status" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderNyWaiveFormIssueStatus(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderNyWaiveFormIssueStatus(*s)
	}
	return oiu
}

// ClearOrderNyWaiveFormIssueStatus clears the value of the "order_ny_waive_form_issue_status" field.
func (oiu *OrderInfoUpdate) ClearOrderNyWaiveFormIssueStatus() *OrderInfoUpdate {
	oiu.mutation.ClearOrderNyWaiveFormIssueStatus()
	return oiu
}

// SetOrderLabIssueStatus sets the "order_lab_issue_status" field.
func (oiu *OrderInfoUpdate) SetOrderLabIssueStatus(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderLabIssueStatus(s)
	return oiu
}

// SetNillableOrderLabIssueStatus sets the "order_lab_issue_status" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderLabIssueStatus(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderLabIssueStatus(*s)
	}
	return oiu
}

// ClearOrderLabIssueStatus clears the value of the "order_lab_issue_status" field.
func (oiu *OrderInfoUpdate) ClearOrderLabIssueStatus() *OrderInfoUpdate {
	oiu.mutation.ClearOrderLabIssueStatus()
	return oiu
}

// SetOrderProcessingTime sets the "order_processing_time" field.
func (oiu *OrderInfoUpdate) SetOrderProcessingTime(t time.Time) *OrderInfoUpdate {
	oiu.mutation.SetOrderProcessingTime(t)
	return oiu
}

// SetNillableOrderProcessingTime sets the "order_processing_time" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderProcessingTime(t *time.Time) *OrderInfoUpdate {
	if t != nil {
		oiu.SetOrderProcessingTime(*t)
	}
	return oiu
}

// ClearOrderProcessingTime clears the value of the "order_processing_time" field.
func (oiu *OrderInfoUpdate) ClearOrderProcessingTime() *OrderInfoUpdate {
	oiu.mutation.ClearOrderProcessingTime()
	return oiu
}

// SetOrderMinorStatus sets the "order_minor_status" field.
func (oiu *OrderInfoUpdate) SetOrderMinorStatus(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderMinorStatus(s)
	return oiu
}

// SetNillableOrderMinorStatus sets the "order_minor_status" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderMinorStatus(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderMinorStatus(*s)
	}
	return oiu
}

// ClearOrderMinorStatus clears the value of the "order_minor_status" field.
func (oiu *OrderInfoUpdate) ClearOrderMinorStatus() *OrderInfoUpdate {
	oiu.mutation.ClearOrderMinorStatus()
	return oiu
}

// SetPatientFirstName sets the "patient_first_name" field.
func (oiu *OrderInfoUpdate) SetPatientFirstName(s string) *OrderInfoUpdate {
	oiu.mutation.SetPatientFirstName(s)
	return oiu
}

// SetNillablePatientFirstName sets the "patient_first_name" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillablePatientFirstName(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetPatientFirstName(*s)
	}
	return oiu
}

// ClearPatientFirstName clears the value of the "patient_first_name" field.
func (oiu *OrderInfoUpdate) ClearPatientFirstName() *OrderInfoUpdate {
	oiu.mutation.ClearPatientFirstName()
	return oiu
}

// SetPatientLastName sets the "patient_last_name" field.
func (oiu *OrderInfoUpdate) SetPatientLastName(s string) *OrderInfoUpdate {
	oiu.mutation.SetPatientLastName(s)
	return oiu
}

// SetNillablePatientLastName sets the "patient_last_name" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillablePatientLastName(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetPatientLastName(*s)
	}
	return oiu
}

// ClearPatientLastName clears the value of the "patient_last_name" field.
func (oiu *OrderInfoUpdate) ClearPatientLastName() *OrderInfoUpdate {
	oiu.mutation.ClearPatientLastName()
	return oiu
}

// SetOrderSource sets the "order_source" field.
func (oiu *OrderInfoUpdate) SetOrderSource(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderSource(s)
	return oiu
}

// SetNillableOrderSource sets the "order_source" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderSource(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderSource(*s)
	}
	return oiu
}

// ClearOrderSource clears the value of the "order_source" field.
func (oiu *OrderInfoUpdate) ClearOrderSource() *OrderInfoUpdate {
	oiu.mutation.ClearOrderSource()
	return oiu
}

// SetOrderChargeMethod sets the "order_charge_method" field.
func (oiu *OrderInfoUpdate) SetOrderChargeMethod(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderChargeMethod(s)
	return oiu
}

// SetNillableOrderChargeMethod sets the "order_charge_method" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderChargeMethod(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderChargeMethod(*s)
	}
	return oiu
}

// ClearOrderChargeMethod clears the value of the "order_charge_method" field.
func (oiu *OrderInfoUpdate) ClearOrderChargeMethod() *OrderInfoUpdate {
	oiu.mutation.ClearOrderChargeMethod()
	return oiu
}

// SetOrderPlacingType sets the "order_placing_type" field.
func (oiu *OrderInfoUpdate) SetOrderPlacingType(s string) *OrderInfoUpdate {
	oiu.mutation.SetOrderPlacingType(s)
	return oiu
}

// SetNillableOrderPlacingType sets the "order_placing_type" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderPlacingType(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetOrderPlacingType(*s)
	}
	return oiu
}

// ClearOrderPlacingType clears the value of the "order_placing_type" field.
func (oiu *OrderInfoUpdate) ClearOrderPlacingType() *OrderInfoUpdate {
	oiu.mutation.ClearOrderPlacingType()
	return oiu
}

// SetBillingOrderID sets the "billing_order_id" field.
func (oiu *OrderInfoUpdate) SetBillingOrderID(s string) *OrderInfoUpdate {
	oiu.mutation.SetBillingOrderID(s)
	return oiu
}

// SetNillableBillingOrderID sets the "billing_order_id" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableBillingOrderID(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetBillingOrderID(*s)
	}
	return oiu
}

// ClearBillingOrderID clears the value of the "billing_order_id" field.
func (oiu *OrderInfoUpdate) ClearBillingOrderID() *OrderInfoUpdate {
	oiu.mutation.ClearBillingOrderID()
	return oiu
}

// SetContactID sets the "contact_id" field.
func (oiu *OrderInfoUpdate) SetContactID(i int) *OrderInfoUpdate {
	oiu.mutation.SetContactID(i)
	return oiu
}

// SetNillableContactID sets the "contact_id" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableContactID(i *int) *OrderInfoUpdate {
	if i != nil {
		oiu.SetContactID(*i)
	}
	return oiu
}

// ClearContactID clears the value of the "contact_id" field.
func (oiu *OrderInfoUpdate) ClearContactID() *OrderInfoUpdate {
	oiu.mutation.ClearContactID()
	return oiu
}

// SetAddressID sets the "address_id" field.
func (oiu *OrderInfoUpdate) SetAddressID(i int) *OrderInfoUpdate {
	oiu.mutation.SetAddressID(i)
	return oiu
}

// SetNillableAddressID sets the "address_id" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableAddressID(i *int) *OrderInfoUpdate {
	if i != nil {
		oiu.SetAddressID(*i)
	}
	return oiu
}

// ClearAddressID clears the value of the "address_id" field.
func (oiu *OrderInfoUpdate) ClearAddressID() *OrderInfoUpdate {
	oiu.mutation.ClearAddressID()
	return oiu
}

// AddTestIDs adds the "tests" edge to the Test entity by IDs.
func (oiu *OrderInfoUpdate) AddTestIDs(ids ...int) *OrderInfoUpdate {
	oiu.mutation.AddTestIDs(ids...)
	return oiu
}

// AddTests adds the "tests" edges to the Test entity.
func (oiu *OrderInfoUpdate) AddTests(t ...*Test) *OrderInfoUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return oiu.AddTestIDs(ids...)
}

// AddOrderFlagIDs adds the "order_flags" edge to the OrderFlag entity by IDs.
func (oiu *OrderInfoUpdate) AddOrderFlagIDs(ids ...int) *OrderInfoUpdate {
	oiu.mutation.AddOrderFlagIDs(ids...)
	return oiu
}

// AddOrderFlags adds the "order_flags" edges to the OrderFlag entity.
func (oiu *OrderInfoUpdate) AddOrderFlags(o ...*OrderFlag) *OrderInfoUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiu.AddOrderFlagIDs(ids...)
}

// SetSampleID sets the "sample" edge to the Sample entity by ID.
func (oiu *OrderInfoUpdate) SetSampleID(id int) *OrderInfoUpdate {
	oiu.mutation.SetSampleID(id)
	return oiu
}

// SetNillableSampleID sets the "sample" edge to the Sample entity by ID if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableSampleID(id *int) *OrderInfoUpdate {
	if id != nil {
		oiu = oiu.SetSampleID(*id)
	}
	return oiu
}

// SetSample sets the "sample" edge to the Sample entity.
func (oiu *OrderInfoUpdate) SetSample(s *Sample) *OrderInfoUpdate {
	return oiu.SetSampleID(s.ID)
}

// SetContact sets the "contact" edge to the Contact entity.
func (oiu *OrderInfoUpdate) SetContact(c *Contact) *OrderInfoUpdate {
	return oiu.SetContactID(c.ID)
}

// SetAddress sets the "address" edge to the Address entity.
func (oiu *OrderInfoUpdate) SetAddress(a *Address) *OrderInfoUpdate {
	return oiu.SetAddressID(a.ID)
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (oiu *OrderInfoUpdate) SetClinic(c *Clinic) *OrderInfoUpdate {
	return oiu.SetClinicID(c.ID)
}

// SetCustomerInfoID sets the "customer_info" edge to the Customer entity by ID.
func (oiu *OrderInfoUpdate) SetCustomerInfoID(id int) *OrderInfoUpdate {
	oiu.mutation.SetCustomerInfoID(id)
	return oiu
}

// SetNillableCustomerInfoID sets the "customer_info" edge to the Customer entity by ID if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableCustomerInfoID(id *int) *OrderInfoUpdate {
	if id != nil {
		oiu = oiu.SetCustomerInfoID(*id)
	}
	return oiu
}

// SetCustomerInfo sets the "customer_info" edge to the Customer entity.
func (oiu *OrderInfoUpdate) SetCustomerInfo(c *Customer) *OrderInfoUpdate {
	return oiu.SetCustomerInfoID(c.ID)
}

// Mutation returns the OrderInfoMutation object of the builder.
func (oiu *OrderInfoUpdate) Mutation() *OrderInfoMutation {
	return oiu.mutation
}

// ClearTests clears all "tests" edges to the Test entity.
func (oiu *OrderInfoUpdate) ClearTests() *OrderInfoUpdate {
	oiu.mutation.ClearTests()
	return oiu
}

// RemoveTestIDs removes the "tests" edge to Test entities by IDs.
func (oiu *OrderInfoUpdate) RemoveTestIDs(ids ...int) *OrderInfoUpdate {
	oiu.mutation.RemoveTestIDs(ids...)
	return oiu
}

// RemoveTests removes "tests" edges to Test entities.
func (oiu *OrderInfoUpdate) RemoveTests(t ...*Test) *OrderInfoUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return oiu.RemoveTestIDs(ids...)
}

// ClearOrderFlags clears all "order_flags" edges to the OrderFlag entity.
func (oiu *OrderInfoUpdate) ClearOrderFlags() *OrderInfoUpdate {
	oiu.mutation.ClearOrderFlags()
	return oiu
}

// RemoveOrderFlagIDs removes the "order_flags" edge to OrderFlag entities by IDs.
func (oiu *OrderInfoUpdate) RemoveOrderFlagIDs(ids ...int) *OrderInfoUpdate {
	oiu.mutation.RemoveOrderFlagIDs(ids...)
	return oiu
}

// RemoveOrderFlags removes "order_flags" edges to OrderFlag entities.
func (oiu *OrderInfoUpdate) RemoveOrderFlags(o ...*OrderFlag) *OrderInfoUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiu.RemoveOrderFlagIDs(ids...)
}

// ClearSample clears the "sample" edge to the Sample entity.
func (oiu *OrderInfoUpdate) ClearSample() *OrderInfoUpdate {
	oiu.mutation.ClearSample()
	return oiu
}

// ClearContact clears the "contact" edge to the Contact entity.
func (oiu *OrderInfoUpdate) ClearContact() *OrderInfoUpdate {
	oiu.mutation.ClearContact()
	return oiu
}

// ClearAddress clears the "address" edge to the Address entity.
func (oiu *OrderInfoUpdate) ClearAddress() *OrderInfoUpdate {
	oiu.mutation.ClearAddress()
	return oiu
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (oiu *OrderInfoUpdate) ClearClinic() *OrderInfoUpdate {
	oiu.mutation.ClearClinic()
	return oiu
}

// ClearCustomerInfo clears the "customer_info" edge to the Customer entity.
func (oiu *OrderInfoUpdate) ClearCustomerInfo() *OrderInfoUpdate {
	oiu.mutation.ClearCustomerInfo()
	return oiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oiu *OrderInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oiu.sqlSave, oiu.mutation, oiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oiu *OrderInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := oiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oiu *OrderInfoUpdate) Exec(ctx context.Context) error {
	_, err := oiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiu *OrderInfoUpdate) ExecX(ctx context.Context) {
	if err := oiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oiu *OrderInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderinfo.Table, orderinfo.Columns, sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt))
	if ps := oiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiu.mutation.OrderTitle(); ok {
		_spec.SetField(orderinfo.FieldOrderTitle, field.TypeString, value)
	}
	if value, ok := oiu.mutation.OrderType(); ok {
		_spec.SetField(orderinfo.FieldOrderType, field.TypeString, value)
	}
	if value, ok := oiu.mutation.OrderDescription(); ok {
		_spec.SetField(orderinfo.FieldOrderDescription, field.TypeString, value)
	}
	if value, ok := oiu.mutation.OrderConfirmationNumber(); ok {
		_spec.SetField(orderinfo.FieldOrderConfirmationNumber, field.TypeString, value)
	}
	if value, ok := oiu.mutation.OrderCreateTime(); ok {
		_spec.SetField(orderinfo.FieldOrderCreateTime, field.TypeTime, value)
	}
	if value, ok := oiu.mutation.OrderServiceTime(); ok {
		_spec.SetField(orderinfo.FieldOrderServiceTime, field.TypeTime, value)
	}
	if oiu.mutation.OrderServiceTimeCleared() {
		_spec.ClearField(orderinfo.FieldOrderServiceTime, field.TypeTime)
	}
	if value, ok := oiu.mutation.OrderProcessTime(); ok {
		_spec.SetField(orderinfo.FieldOrderProcessTime, field.TypeTime, value)
	}
	if oiu.mutation.OrderProcessTimeCleared() {
		_spec.ClearField(orderinfo.FieldOrderProcessTime, field.TypeTime)
	}
	if value, ok := oiu.mutation.OrderRedrawTime(); ok {
		_spec.SetField(orderinfo.FieldOrderRedrawTime, field.TypeTime, value)
	}
	if oiu.mutation.OrderRedrawTimeCleared() {
		_spec.ClearField(orderinfo.FieldOrderRedrawTime, field.TypeTime)
	}
	if value, ok := oiu.mutation.OrderCancelTime(); ok {
		_spec.SetField(orderinfo.FieldOrderCancelTime, field.TypeTime, value)
	}
	if oiu.mutation.OrderCancelTimeCleared() {
		_spec.ClearField(orderinfo.FieldOrderCancelTime, field.TypeTime)
	}
	if value, ok := oiu.mutation.IsActive(); ok {
		_spec.SetField(orderinfo.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := oiu.mutation.HasOrderSetting(); ok {
		_spec.SetField(orderinfo.FieldHasOrderSetting, field.TypeBool, value)
	}
	if value, ok := oiu.mutation.OrderCanceled(); ok {
		_spec.SetField(orderinfo.FieldOrderCanceled, field.TypeBool, value)
	}
	if value, ok := oiu.mutation.OrderFlagged(); ok {
		_spec.SetField(orderinfo.FieldOrderFlagged, field.TypeBool, value)
	}
	if value, ok := oiu.mutation.OrderStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderStatus, field.TypeString, value)
	}
	if oiu.mutation.OrderStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderStatus, field.TypeString)
	}
	if value, ok := oiu.mutation.OrderMajorStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderMajorStatus, field.TypeString, value)
	}
	if oiu.mutation.OrderMajorStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderMajorStatus, field.TypeString)
	}
	if value, ok := oiu.mutation.OrderKitStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderKitStatus, field.TypeString, value)
	}
	if oiu.mutation.OrderKitStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderKitStatus, field.TypeString)
	}
	if value, ok := oiu.mutation.OrderReportStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderReportStatus, field.TypeString, value)
	}
	if oiu.mutation.OrderReportStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderReportStatus, field.TypeString)
	}
	if value, ok := oiu.mutation.OrderTnpIssueStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderTnpIssueStatus, field.TypeString, value)
	}
	if oiu.mutation.OrderTnpIssueStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderTnpIssueStatus, field.TypeString)
	}
	if value, ok := oiu.mutation.OrderBillingIssueStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderBillingIssueStatus, field.TypeString, value)
	}
	if oiu.mutation.OrderBillingIssueStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderBillingIssueStatus, field.TypeString)
	}
	if value, ok := oiu.mutation.OrderMissingInfoIssueStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderMissingInfoIssueStatus, field.TypeString, value)
	}
	if oiu.mutation.OrderMissingInfoIssueStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderMissingInfoIssueStatus, field.TypeString)
	}
	if value, ok := oiu.mutation.OrderIncompleteQuestionnaireIssueStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderIncompleteQuestionnaireIssueStatus, field.TypeString, value)
	}
	if oiu.mutation.OrderIncompleteQuestionnaireIssueStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderIncompleteQuestionnaireIssueStatus, field.TypeString)
	}
	if value, ok := oiu.mutation.OrderNyWaiveFormIssueStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderNyWaiveFormIssueStatus, field.TypeString, value)
	}
	if oiu.mutation.OrderNyWaiveFormIssueStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderNyWaiveFormIssueStatus, field.TypeString)
	}
	if value, ok := oiu.mutation.OrderLabIssueStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderLabIssueStatus, field.TypeString, value)
	}
	if oiu.mutation.OrderLabIssueStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderLabIssueStatus, field.TypeString)
	}
	if value, ok := oiu.mutation.OrderProcessingTime(); ok {
		_spec.SetField(orderinfo.FieldOrderProcessingTime, field.TypeTime, value)
	}
	if oiu.mutation.OrderProcessingTimeCleared() {
		_spec.ClearField(orderinfo.FieldOrderProcessingTime, field.TypeTime)
	}
	if value, ok := oiu.mutation.OrderMinorStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderMinorStatus, field.TypeString, value)
	}
	if oiu.mutation.OrderMinorStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderMinorStatus, field.TypeString)
	}
	if value, ok := oiu.mutation.PatientFirstName(); ok {
		_spec.SetField(orderinfo.FieldPatientFirstName, field.TypeString, value)
	}
	if oiu.mutation.PatientFirstNameCleared() {
		_spec.ClearField(orderinfo.FieldPatientFirstName, field.TypeString)
	}
	if value, ok := oiu.mutation.PatientLastName(); ok {
		_spec.SetField(orderinfo.FieldPatientLastName, field.TypeString, value)
	}
	if oiu.mutation.PatientLastNameCleared() {
		_spec.ClearField(orderinfo.FieldPatientLastName, field.TypeString)
	}
	if value, ok := oiu.mutation.OrderSource(); ok {
		_spec.SetField(orderinfo.FieldOrderSource, field.TypeString, value)
	}
	if oiu.mutation.OrderSourceCleared() {
		_spec.ClearField(orderinfo.FieldOrderSource, field.TypeString)
	}
	if value, ok := oiu.mutation.OrderChargeMethod(); ok {
		_spec.SetField(orderinfo.FieldOrderChargeMethod, field.TypeString, value)
	}
	if oiu.mutation.OrderChargeMethodCleared() {
		_spec.ClearField(orderinfo.FieldOrderChargeMethod, field.TypeString)
	}
	if value, ok := oiu.mutation.OrderPlacingType(); ok {
		_spec.SetField(orderinfo.FieldOrderPlacingType, field.TypeString, value)
	}
	if oiu.mutation.OrderPlacingTypeCleared() {
		_spec.ClearField(orderinfo.FieldOrderPlacingType, field.TypeString)
	}
	if value, ok := oiu.mutation.BillingOrderID(); ok {
		_spec.SetField(orderinfo.FieldBillingOrderID, field.TypeString, value)
	}
	if oiu.mutation.BillingOrderIDCleared() {
		_spec.ClearField(orderinfo.FieldBillingOrderID, field.TypeString)
	}
	if oiu.mutation.TestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orderinfo.TestsTable,
			Columns: orderinfo.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.RemovedTestsIDs(); len(nodes) > 0 && !oiu.mutation.TestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orderinfo.TestsTable,
			Columns: orderinfo.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.TestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orderinfo.TestsTable,
			Columns: orderinfo.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.OrderFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orderinfo.OrderFlagsTable,
			Columns: orderinfo.OrderFlagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderflag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.RemovedOrderFlagsIDs(); len(nodes) > 0 && !oiu.mutation.OrderFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orderinfo.OrderFlagsTable,
			Columns: orderinfo.OrderFlagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderflag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.OrderFlagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orderinfo.OrderFlagsTable,
			Columns: orderinfo.OrderFlagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderflag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.SampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   orderinfo.SampleTable,
			Columns: []string{orderinfo.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   orderinfo.SampleTable,
			Columns: []string{orderinfo.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.ContactTable,
			Columns: []string{orderinfo.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.ContactTable,
			Columns: []string{orderinfo.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.AddressTable,
			Columns: []string{orderinfo.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.AddressTable,
			Columns: []string{orderinfo.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.ClinicTable,
			Columns: []string{orderinfo.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.ClinicTable,
			Columns: []string{orderinfo.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.CustomerInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.CustomerInfoTable,
			Columns: []string{orderinfo.CustomerInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.CustomerInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.CustomerInfoTable,
			Columns: []string{orderinfo.CustomerInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oiu.mutation.done = true
	return n, nil
}

// OrderInfoUpdateOne is the builder for updating a single OrderInfo entity.
type OrderInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderInfoMutation
}

// SetOrderTitle sets the "order_title" field.
func (oiuo *OrderInfoUpdateOne) SetOrderTitle(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderTitle(s)
	return oiuo
}

// SetNillableOrderTitle sets the "order_title" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderTitle(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderTitle(*s)
	}
	return oiuo
}

// SetOrderType sets the "order_type" field.
func (oiuo *OrderInfoUpdateOne) SetOrderType(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderType(s)
	return oiuo
}

// SetNillableOrderType sets the "order_type" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderType(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderType(*s)
	}
	return oiuo
}

// SetOrderDescription sets the "order_description" field.
func (oiuo *OrderInfoUpdateOne) SetOrderDescription(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderDescription(s)
	return oiuo
}

// SetNillableOrderDescription sets the "order_description" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderDescription(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderDescription(*s)
	}
	return oiuo
}

// SetOrderConfirmationNumber sets the "order_confirmation_number" field.
func (oiuo *OrderInfoUpdateOne) SetOrderConfirmationNumber(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderConfirmationNumber(s)
	return oiuo
}

// SetNillableOrderConfirmationNumber sets the "order_confirmation_number" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderConfirmationNumber(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderConfirmationNumber(*s)
	}
	return oiuo
}

// SetClinicID sets the "clinic_id" field.
func (oiuo *OrderInfoUpdateOne) SetClinicID(i int) *OrderInfoUpdateOne {
	oiuo.mutation.SetClinicID(i)
	return oiuo
}

// SetNillableClinicID sets the "clinic_id" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableClinicID(i *int) *OrderInfoUpdateOne {
	if i != nil {
		oiuo.SetClinicID(*i)
	}
	return oiuo
}

// ClearClinicID clears the value of the "clinic_id" field.
func (oiuo *OrderInfoUpdateOne) ClearClinicID() *OrderInfoUpdateOne {
	oiuo.mutation.ClearClinicID()
	return oiuo
}

// SetCustomerID sets the "customer_id" field.
func (oiuo *OrderInfoUpdateOne) SetCustomerID(i int) *OrderInfoUpdateOne {
	oiuo.mutation.SetCustomerID(i)
	return oiuo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableCustomerID(i *int) *OrderInfoUpdateOne {
	if i != nil {
		oiuo.SetCustomerID(*i)
	}
	return oiuo
}

// ClearCustomerID clears the value of the "customer_id" field.
func (oiuo *OrderInfoUpdateOne) ClearCustomerID() *OrderInfoUpdateOne {
	oiuo.mutation.ClearCustomerID()
	return oiuo
}

// SetOrderCreateTime sets the "order_create_time" field.
func (oiuo *OrderInfoUpdateOne) SetOrderCreateTime(t time.Time) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderCreateTime(t)
	return oiuo
}

// SetNillableOrderCreateTime sets the "order_create_time" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderCreateTime(t *time.Time) *OrderInfoUpdateOne {
	if t != nil {
		oiuo.SetOrderCreateTime(*t)
	}
	return oiuo
}

// SetOrderServiceTime sets the "order_service_time" field.
func (oiuo *OrderInfoUpdateOne) SetOrderServiceTime(t time.Time) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderServiceTime(t)
	return oiuo
}

// SetNillableOrderServiceTime sets the "order_service_time" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderServiceTime(t *time.Time) *OrderInfoUpdateOne {
	if t != nil {
		oiuo.SetOrderServiceTime(*t)
	}
	return oiuo
}

// ClearOrderServiceTime clears the value of the "order_service_time" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderServiceTime() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderServiceTime()
	return oiuo
}

// SetOrderProcessTime sets the "order_process_time" field.
func (oiuo *OrderInfoUpdateOne) SetOrderProcessTime(t time.Time) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderProcessTime(t)
	return oiuo
}

// SetNillableOrderProcessTime sets the "order_process_time" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderProcessTime(t *time.Time) *OrderInfoUpdateOne {
	if t != nil {
		oiuo.SetOrderProcessTime(*t)
	}
	return oiuo
}

// ClearOrderProcessTime clears the value of the "order_process_time" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderProcessTime() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderProcessTime()
	return oiuo
}

// SetOrderRedrawTime sets the "order_redraw_time" field.
func (oiuo *OrderInfoUpdateOne) SetOrderRedrawTime(t time.Time) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderRedrawTime(t)
	return oiuo
}

// SetNillableOrderRedrawTime sets the "order_redraw_time" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderRedrawTime(t *time.Time) *OrderInfoUpdateOne {
	if t != nil {
		oiuo.SetOrderRedrawTime(*t)
	}
	return oiuo
}

// ClearOrderRedrawTime clears the value of the "order_redraw_time" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderRedrawTime() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderRedrawTime()
	return oiuo
}

// SetOrderCancelTime sets the "order_cancel_time" field.
func (oiuo *OrderInfoUpdateOne) SetOrderCancelTime(t time.Time) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderCancelTime(t)
	return oiuo
}

// SetNillableOrderCancelTime sets the "order_cancel_time" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderCancelTime(t *time.Time) *OrderInfoUpdateOne {
	if t != nil {
		oiuo.SetOrderCancelTime(*t)
	}
	return oiuo
}

// ClearOrderCancelTime clears the value of the "order_cancel_time" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderCancelTime() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderCancelTime()
	return oiuo
}

// SetIsActive sets the "isActive" field.
func (oiuo *OrderInfoUpdateOne) SetIsActive(b bool) *OrderInfoUpdateOne {
	oiuo.mutation.SetIsActive(b)
	return oiuo
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableIsActive(b *bool) *OrderInfoUpdateOne {
	if b != nil {
		oiuo.SetIsActive(*b)
	}
	return oiuo
}

// SetHasOrderSetting sets the "has_order_setting" field.
func (oiuo *OrderInfoUpdateOne) SetHasOrderSetting(b bool) *OrderInfoUpdateOne {
	oiuo.mutation.SetHasOrderSetting(b)
	return oiuo
}

// SetNillableHasOrderSetting sets the "has_order_setting" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableHasOrderSetting(b *bool) *OrderInfoUpdateOne {
	if b != nil {
		oiuo.SetHasOrderSetting(*b)
	}
	return oiuo
}

// SetOrderCanceled sets the "order_canceled" field.
func (oiuo *OrderInfoUpdateOne) SetOrderCanceled(b bool) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderCanceled(b)
	return oiuo
}

// SetNillableOrderCanceled sets the "order_canceled" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderCanceled(b *bool) *OrderInfoUpdateOne {
	if b != nil {
		oiuo.SetOrderCanceled(*b)
	}
	return oiuo
}

// SetOrderFlagged sets the "order_flagged" field.
func (oiuo *OrderInfoUpdateOne) SetOrderFlagged(b bool) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderFlagged(b)
	return oiuo
}

// SetNillableOrderFlagged sets the "order_flagged" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderFlagged(b *bool) *OrderInfoUpdateOne {
	if b != nil {
		oiuo.SetOrderFlagged(*b)
	}
	return oiuo
}

// SetOrderStatus sets the "order_status" field.
func (oiuo *OrderInfoUpdateOne) SetOrderStatus(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderStatus(s)
	return oiuo
}

// SetNillableOrderStatus sets the "order_status" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderStatus(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderStatus(*s)
	}
	return oiuo
}

// ClearOrderStatus clears the value of the "order_status" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderStatus() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderStatus()
	return oiuo
}

// SetOrderMajorStatus sets the "order_major_status" field.
func (oiuo *OrderInfoUpdateOne) SetOrderMajorStatus(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderMajorStatus(s)
	return oiuo
}

// SetNillableOrderMajorStatus sets the "order_major_status" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderMajorStatus(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderMajorStatus(*s)
	}
	return oiuo
}

// ClearOrderMajorStatus clears the value of the "order_major_status" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderMajorStatus() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderMajorStatus()
	return oiuo
}

// SetOrderKitStatus sets the "order_kit_status" field.
func (oiuo *OrderInfoUpdateOne) SetOrderKitStatus(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderKitStatus(s)
	return oiuo
}

// SetNillableOrderKitStatus sets the "order_kit_status" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderKitStatus(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderKitStatus(*s)
	}
	return oiuo
}

// ClearOrderKitStatus clears the value of the "order_kit_status" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderKitStatus() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderKitStatus()
	return oiuo
}

// SetOrderReportStatus sets the "order_report_status" field.
func (oiuo *OrderInfoUpdateOne) SetOrderReportStatus(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderReportStatus(s)
	return oiuo
}

// SetNillableOrderReportStatus sets the "order_report_status" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderReportStatus(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderReportStatus(*s)
	}
	return oiuo
}

// ClearOrderReportStatus clears the value of the "order_report_status" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderReportStatus() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderReportStatus()
	return oiuo
}

// SetOrderTnpIssueStatus sets the "order_tnp_issue_status" field.
func (oiuo *OrderInfoUpdateOne) SetOrderTnpIssueStatus(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderTnpIssueStatus(s)
	return oiuo
}

// SetNillableOrderTnpIssueStatus sets the "order_tnp_issue_status" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderTnpIssueStatus(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderTnpIssueStatus(*s)
	}
	return oiuo
}

// ClearOrderTnpIssueStatus clears the value of the "order_tnp_issue_status" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderTnpIssueStatus() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderTnpIssueStatus()
	return oiuo
}

// SetOrderBillingIssueStatus sets the "order_billing_issue_status" field.
func (oiuo *OrderInfoUpdateOne) SetOrderBillingIssueStatus(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderBillingIssueStatus(s)
	return oiuo
}

// SetNillableOrderBillingIssueStatus sets the "order_billing_issue_status" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderBillingIssueStatus(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderBillingIssueStatus(*s)
	}
	return oiuo
}

// ClearOrderBillingIssueStatus clears the value of the "order_billing_issue_status" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderBillingIssueStatus() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderBillingIssueStatus()
	return oiuo
}

// SetOrderMissingInfoIssueStatus sets the "order_missing_info_issue_status" field.
func (oiuo *OrderInfoUpdateOne) SetOrderMissingInfoIssueStatus(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderMissingInfoIssueStatus(s)
	return oiuo
}

// SetNillableOrderMissingInfoIssueStatus sets the "order_missing_info_issue_status" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderMissingInfoIssueStatus(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderMissingInfoIssueStatus(*s)
	}
	return oiuo
}

// ClearOrderMissingInfoIssueStatus clears the value of the "order_missing_info_issue_status" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderMissingInfoIssueStatus() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderMissingInfoIssueStatus()
	return oiuo
}

// SetOrderIncompleteQuestionnaireIssueStatus sets the "order_incomplete_questionnaire_issue_status" field.
func (oiuo *OrderInfoUpdateOne) SetOrderIncompleteQuestionnaireIssueStatus(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderIncompleteQuestionnaireIssueStatus(s)
	return oiuo
}

// SetNillableOrderIncompleteQuestionnaireIssueStatus sets the "order_incomplete_questionnaire_issue_status" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderIncompleteQuestionnaireIssueStatus(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderIncompleteQuestionnaireIssueStatus(*s)
	}
	return oiuo
}

// ClearOrderIncompleteQuestionnaireIssueStatus clears the value of the "order_incomplete_questionnaire_issue_status" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderIncompleteQuestionnaireIssueStatus() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderIncompleteQuestionnaireIssueStatus()
	return oiuo
}

// SetOrderNyWaiveFormIssueStatus sets the "order_ny_waive_form_issue_status" field.
func (oiuo *OrderInfoUpdateOne) SetOrderNyWaiveFormIssueStatus(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderNyWaiveFormIssueStatus(s)
	return oiuo
}

// SetNillableOrderNyWaiveFormIssueStatus sets the "order_ny_waive_form_issue_status" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderNyWaiveFormIssueStatus(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderNyWaiveFormIssueStatus(*s)
	}
	return oiuo
}

// ClearOrderNyWaiveFormIssueStatus clears the value of the "order_ny_waive_form_issue_status" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderNyWaiveFormIssueStatus() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderNyWaiveFormIssueStatus()
	return oiuo
}

// SetOrderLabIssueStatus sets the "order_lab_issue_status" field.
func (oiuo *OrderInfoUpdateOne) SetOrderLabIssueStatus(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderLabIssueStatus(s)
	return oiuo
}

// SetNillableOrderLabIssueStatus sets the "order_lab_issue_status" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderLabIssueStatus(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderLabIssueStatus(*s)
	}
	return oiuo
}

// ClearOrderLabIssueStatus clears the value of the "order_lab_issue_status" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderLabIssueStatus() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderLabIssueStatus()
	return oiuo
}

// SetOrderProcessingTime sets the "order_processing_time" field.
func (oiuo *OrderInfoUpdateOne) SetOrderProcessingTime(t time.Time) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderProcessingTime(t)
	return oiuo
}

// SetNillableOrderProcessingTime sets the "order_processing_time" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderProcessingTime(t *time.Time) *OrderInfoUpdateOne {
	if t != nil {
		oiuo.SetOrderProcessingTime(*t)
	}
	return oiuo
}

// ClearOrderProcessingTime clears the value of the "order_processing_time" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderProcessingTime() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderProcessingTime()
	return oiuo
}

// SetOrderMinorStatus sets the "order_minor_status" field.
func (oiuo *OrderInfoUpdateOne) SetOrderMinorStatus(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderMinorStatus(s)
	return oiuo
}

// SetNillableOrderMinorStatus sets the "order_minor_status" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderMinorStatus(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderMinorStatus(*s)
	}
	return oiuo
}

// ClearOrderMinorStatus clears the value of the "order_minor_status" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderMinorStatus() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderMinorStatus()
	return oiuo
}

// SetPatientFirstName sets the "patient_first_name" field.
func (oiuo *OrderInfoUpdateOne) SetPatientFirstName(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetPatientFirstName(s)
	return oiuo
}

// SetNillablePatientFirstName sets the "patient_first_name" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillablePatientFirstName(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetPatientFirstName(*s)
	}
	return oiuo
}

// ClearPatientFirstName clears the value of the "patient_first_name" field.
func (oiuo *OrderInfoUpdateOne) ClearPatientFirstName() *OrderInfoUpdateOne {
	oiuo.mutation.ClearPatientFirstName()
	return oiuo
}

// SetPatientLastName sets the "patient_last_name" field.
func (oiuo *OrderInfoUpdateOne) SetPatientLastName(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetPatientLastName(s)
	return oiuo
}

// SetNillablePatientLastName sets the "patient_last_name" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillablePatientLastName(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetPatientLastName(*s)
	}
	return oiuo
}

// ClearPatientLastName clears the value of the "patient_last_name" field.
func (oiuo *OrderInfoUpdateOne) ClearPatientLastName() *OrderInfoUpdateOne {
	oiuo.mutation.ClearPatientLastName()
	return oiuo
}

// SetOrderSource sets the "order_source" field.
func (oiuo *OrderInfoUpdateOne) SetOrderSource(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderSource(s)
	return oiuo
}

// SetNillableOrderSource sets the "order_source" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderSource(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderSource(*s)
	}
	return oiuo
}

// ClearOrderSource clears the value of the "order_source" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderSource() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderSource()
	return oiuo
}

// SetOrderChargeMethod sets the "order_charge_method" field.
func (oiuo *OrderInfoUpdateOne) SetOrderChargeMethod(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderChargeMethod(s)
	return oiuo
}

// SetNillableOrderChargeMethod sets the "order_charge_method" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderChargeMethod(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderChargeMethod(*s)
	}
	return oiuo
}

// ClearOrderChargeMethod clears the value of the "order_charge_method" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderChargeMethod() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderChargeMethod()
	return oiuo
}

// SetOrderPlacingType sets the "order_placing_type" field.
func (oiuo *OrderInfoUpdateOne) SetOrderPlacingType(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetOrderPlacingType(s)
	return oiuo
}

// SetNillableOrderPlacingType sets the "order_placing_type" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderPlacingType(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetOrderPlacingType(*s)
	}
	return oiuo
}

// ClearOrderPlacingType clears the value of the "order_placing_type" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderPlacingType() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderPlacingType()
	return oiuo
}

// SetBillingOrderID sets the "billing_order_id" field.
func (oiuo *OrderInfoUpdateOne) SetBillingOrderID(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetBillingOrderID(s)
	return oiuo
}

// SetNillableBillingOrderID sets the "billing_order_id" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableBillingOrderID(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetBillingOrderID(*s)
	}
	return oiuo
}

// ClearBillingOrderID clears the value of the "billing_order_id" field.
func (oiuo *OrderInfoUpdateOne) ClearBillingOrderID() *OrderInfoUpdateOne {
	oiuo.mutation.ClearBillingOrderID()
	return oiuo
}

// SetContactID sets the "contact_id" field.
func (oiuo *OrderInfoUpdateOne) SetContactID(i int) *OrderInfoUpdateOne {
	oiuo.mutation.SetContactID(i)
	return oiuo
}

// SetNillableContactID sets the "contact_id" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableContactID(i *int) *OrderInfoUpdateOne {
	if i != nil {
		oiuo.SetContactID(*i)
	}
	return oiuo
}

// ClearContactID clears the value of the "contact_id" field.
func (oiuo *OrderInfoUpdateOne) ClearContactID() *OrderInfoUpdateOne {
	oiuo.mutation.ClearContactID()
	return oiuo
}

// SetAddressID sets the "address_id" field.
func (oiuo *OrderInfoUpdateOne) SetAddressID(i int) *OrderInfoUpdateOne {
	oiuo.mutation.SetAddressID(i)
	return oiuo
}

// SetNillableAddressID sets the "address_id" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableAddressID(i *int) *OrderInfoUpdateOne {
	if i != nil {
		oiuo.SetAddressID(*i)
	}
	return oiuo
}

// ClearAddressID clears the value of the "address_id" field.
func (oiuo *OrderInfoUpdateOne) ClearAddressID() *OrderInfoUpdateOne {
	oiuo.mutation.ClearAddressID()
	return oiuo
}

// AddTestIDs adds the "tests" edge to the Test entity by IDs.
func (oiuo *OrderInfoUpdateOne) AddTestIDs(ids ...int) *OrderInfoUpdateOne {
	oiuo.mutation.AddTestIDs(ids...)
	return oiuo
}

// AddTests adds the "tests" edges to the Test entity.
func (oiuo *OrderInfoUpdateOne) AddTests(t ...*Test) *OrderInfoUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return oiuo.AddTestIDs(ids...)
}

// AddOrderFlagIDs adds the "order_flags" edge to the OrderFlag entity by IDs.
func (oiuo *OrderInfoUpdateOne) AddOrderFlagIDs(ids ...int) *OrderInfoUpdateOne {
	oiuo.mutation.AddOrderFlagIDs(ids...)
	return oiuo
}

// AddOrderFlags adds the "order_flags" edges to the OrderFlag entity.
func (oiuo *OrderInfoUpdateOne) AddOrderFlags(o ...*OrderFlag) *OrderInfoUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiuo.AddOrderFlagIDs(ids...)
}

// SetSampleID sets the "sample" edge to the Sample entity by ID.
func (oiuo *OrderInfoUpdateOne) SetSampleID(id int) *OrderInfoUpdateOne {
	oiuo.mutation.SetSampleID(id)
	return oiuo
}

// SetNillableSampleID sets the "sample" edge to the Sample entity by ID if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableSampleID(id *int) *OrderInfoUpdateOne {
	if id != nil {
		oiuo = oiuo.SetSampleID(*id)
	}
	return oiuo
}

// SetSample sets the "sample" edge to the Sample entity.
func (oiuo *OrderInfoUpdateOne) SetSample(s *Sample) *OrderInfoUpdateOne {
	return oiuo.SetSampleID(s.ID)
}

// SetContact sets the "contact" edge to the Contact entity.
func (oiuo *OrderInfoUpdateOne) SetContact(c *Contact) *OrderInfoUpdateOne {
	return oiuo.SetContactID(c.ID)
}

// SetAddress sets the "address" edge to the Address entity.
func (oiuo *OrderInfoUpdateOne) SetAddress(a *Address) *OrderInfoUpdateOne {
	return oiuo.SetAddressID(a.ID)
}

// SetClinic sets the "clinic" edge to the Clinic entity.
func (oiuo *OrderInfoUpdateOne) SetClinic(c *Clinic) *OrderInfoUpdateOne {
	return oiuo.SetClinicID(c.ID)
}

// SetCustomerInfoID sets the "customer_info" edge to the Customer entity by ID.
func (oiuo *OrderInfoUpdateOne) SetCustomerInfoID(id int) *OrderInfoUpdateOne {
	oiuo.mutation.SetCustomerInfoID(id)
	return oiuo
}

// SetNillableCustomerInfoID sets the "customer_info" edge to the Customer entity by ID if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableCustomerInfoID(id *int) *OrderInfoUpdateOne {
	if id != nil {
		oiuo = oiuo.SetCustomerInfoID(*id)
	}
	return oiuo
}

// SetCustomerInfo sets the "customer_info" edge to the Customer entity.
func (oiuo *OrderInfoUpdateOne) SetCustomerInfo(c *Customer) *OrderInfoUpdateOne {
	return oiuo.SetCustomerInfoID(c.ID)
}

// Mutation returns the OrderInfoMutation object of the builder.
func (oiuo *OrderInfoUpdateOne) Mutation() *OrderInfoMutation {
	return oiuo.mutation
}

// ClearTests clears all "tests" edges to the Test entity.
func (oiuo *OrderInfoUpdateOne) ClearTests() *OrderInfoUpdateOne {
	oiuo.mutation.ClearTests()
	return oiuo
}

// RemoveTestIDs removes the "tests" edge to Test entities by IDs.
func (oiuo *OrderInfoUpdateOne) RemoveTestIDs(ids ...int) *OrderInfoUpdateOne {
	oiuo.mutation.RemoveTestIDs(ids...)
	return oiuo
}

// RemoveTests removes "tests" edges to Test entities.
func (oiuo *OrderInfoUpdateOne) RemoveTests(t ...*Test) *OrderInfoUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return oiuo.RemoveTestIDs(ids...)
}

// ClearOrderFlags clears all "order_flags" edges to the OrderFlag entity.
func (oiuo *OrderInfoUpdateOne) ClearOrderFlags() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderFlags()
	return oiuo
}

// RemoveOrderFlagIDs removes the "order_flags" edge to OrderFlag entities by IDs.
func (oiuo *OrderInfoUpdateOne) RemoveOrderFlagIDs(ids ...int) *OrderInfoUpdateOne {
	oiuo.mutation.RemoveOrderFlagIDs(ids...)
	return oiuo
}

// RemoveOrderFlags removes "order_flags" edges to OrderFlag entities.
func (oiuo *OrderInfoUpdateOne) RemoveOrderFlags(o ...*OrderFlag) *OrderInfoUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiuo.RemoveOrderFlagIDs(ids...)
}

// ClearSample clears the "sample" edge to the Sample entity.
func (oiuo *OrderInfoUpdateOne) ClearSample() *OrderInfoUpdateOne {
	oiuo.mutation.ClearSample()
	return oiuo
}

// ClearContact clears the "contact" edge to the Contact entity.
func (oiuo *OrderInfoUpdateOne) ClearContact() *OrderInfoUpdateOne {
	oiuo.mutation.ClearContact()
	return oiuo
}

// ClearAddress clears the "address" edge to the Address entity.
func (oiuo *OrderInfoUpdateOne) ClearAddress() *OrderInfoUpdateOne {
	oiuo.mutation.ClearAddress()
	return oiuo
}

// ClearClinic clears the "clinic" edge to the Clinic entity.
func (oiuo *OrderInfoUpdateOne) ClearClinic() *OrderInfoUpdateOne {
	oiuo.mutation.ClearClinic()
	return oiuo
}

// ClearCustomerInfo clears the "customer_info" edge to the Customer entity.
func (oiuo *OrderInfoUpdateOne) ClearCustomerInfo() *OrderInfoUpdateOne {
	oiuo.mutation.ClearCustomerInfo()
	return oiuo
}

// Where appends a list predicates to the OrderInfoUpdate builder.
func (oiuo *OrderInfoUpdateOne) Where(ps ...predicate.OrderInfo) *OrderInfoUpdateOne {
	oiuo.mutation.Where(ps...)
	return oiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oiuo *OrderInfoUpdateOne) Select(field string, fields ...string) *OrderInfoUpdateOne {
	oiuo.fields = append([]string{field}, fields...)
	return oiuo
}

// Save executes the query and returns the updated OrderInfo entity.
func (oiuo *OrderInfoUpdateOne) Save(ctx context.Context) (*OrderInfo, error) {
	return withHooks(ctx, oiuo.sqlSave, oiuo.mutation, oiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oiuo *OrderInfoUpdateOne) SaveX(ctx context.Context) *OrderInfo {
	node, err := oiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oiuo *OrderInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := oiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiuo *OrderInfoUpdateOne) ExecX(ctx context.Context) {
	if err := oiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oiuo *OrderInfoUpdateOne) sqlSave(ctx context.Context) (_node *OrderInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderinfo.Table, orderinfo.Columns, sqlgraph.NewFieldSpec(orderinfo.FieldID, field.TypeInt))
	id, ok := oiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderinfo.FieldID)
		for _, f := range fields {
			if !orderinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiuo.mutation.OrderTitle(); ok {
		_spec.SetField(orderinfo.FieldOrderTitle, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.OrderType(); ok {
		_spec.SetField(orderinfo.FieldOrderType, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.OrderDescription(); ok {
		_spec.SetField(orderinfo.FieldOrderDescription, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.OrderConfirmationNumber(); ok {
		_spec.SetField(orderinfo.FieldOrderConfirmationNumber, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.OrderCreateTime(); ok {
		_spec.SetField(orderinfo.FieldOrderCreateTime, field.TypeTime, value)
	}
	if value, ok := oiuo.mutation.OrderServiceTime(); ok {
		_spec.SetField(orderinfo.FieldOrderServiceTime, field.TypeTime, value)
	}
	if oiuo.mutation.OrderServiceTimeCleared() {
		_spec.ClearField(orderinfo.FieldOrderServiceTime, field.TypeTime)
	}
	if value, ok := oiuo.mutation.OrderProcessTime(); ok {
		_spec.SetField(orderinfo.FieldOrderProcessTime, field.TypeTime, value)
	}
	if oiuo.mutation.OrderProcessTimeCleared() {
		_spec.ClearField(orderinfo.FieldOrderProcessTime, field.TypeTime)
	}
	if value, ok := oiuo.mutation.OrderRedrawTime(); ok {
		_spec.SetField(orderinfo.FieldOrderRedrawTime, field.TypeTime, value)
	}
	if oiuo.mutation.OrderRedrawTimeCleared() {
		_spec.ClearField(orderinfo.FieldOrderRedrawTime, field.TypeTime)
	}
	if value, ok := oiuo.mutation.OrderCancelTime(); ok {
		_spec.SetField(orderinfo.FieldOrderCancelTime, field.TypeTime, value)
	}
	if oiuo.mutation.OrderCancelTimeCleared() {
		_spec.ClearField(orderinfo.FieldOrderCancelTime, field.TypeTime)
	}
	if value, ok := oiuo.mutation.IsActive(); ok {
		_spec.SetField(orderinfo.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := oiuo.mutation.HasOrderSetting(); ok {
		_spec.SetField(orderinfo.FieldHasOrderSetting, field.TypeBool, value)
	}
	if value, ok := oiuo.mutation.OrderCanceled(); ok {
		_spec.SetField(orderinfo.FieldOrderCanceled, field.TypeBool, value)
	}
	if value, ok := oiuo.mutation.OrderFlagged(); ok {
		_spec.SetField(orderinfo.FieldOrderFlagged, field.TypeBool, value)
	}
	if value, ok := oiuo.mutation.OrderStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderStatus, field.TypeString, value)
	}
	if oiuo.mutation.OrderStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderStatus, field.TypeString)
	}
	if value, ok := oiuo.mutation.OrderMajorStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderMajorStatus, field.TypeString, value)
	}
	if oiuo.mutation.OrderMajorStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderMajorStatus, field.TypeString)
	}
	if value, ok := oiuo.mutation.OrderKitStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderKitStatus, field.TypeString, value)
	}
	if oiuo.mutation.OrderKitStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderKitStatus, field.TypeString)
	}
	if value, ok := oiuo.mutation.OrderReportStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderReportStatus, field.TypeString, value)
	}
	if oiuo.mutation.OrderReportStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderReportStatus, field.TypeString)
	}
	if value, ok := oiuo.mutation.OrderTnpIssueStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderTnpIssueStatus, field.TypeString, value)
	}
	if oiuo.mutation.OrderTnpIssueStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderTnpIssueStatus, field.TypeString)
	}
	if value, ok := oiuo.mutation.OrderBillingIssueStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderBillingIssueStatus, field.TypeString, value)
	}
	if oiuo.mutation.OrderBillingIssueStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderBillingIssueStatus, field.TypeString)
	}
	if value, ok := oiuo.mutation.OrderMissingInfoIssueStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderMissingInfoIssueStatus, field.TypeString, value)
	}
	if oiuo.mutation.OrderMissingInfoIssueStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderMissingInfoIssueStatus, field.TypeString)
	}
	if value, ok := oiuo.mutation.OrderIncompleteQuestionnaireIssueStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderIncompleteQuestionnaireIssueStatus, field.TypeString, value)
	}
	if oiuo.mutation.OrderIncompleteQuestionnaireIssueStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderIncompleteQuestionnaireIssueStatus, field.TypeString)
	}
	if value, ok := oiuo.mutation.OrderNyWaiveFormIssueStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderNyWaiveFormIssueStatus, field.TypeString, value)
	}
	if oiuo.mutation.OrderNyWaiveFormIssueStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderNyWaiveFormIssueStatus, field.TypeString)
	}
	if value, ok := oiuo.mutation.OrderLabIssueStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderLabIssueStatus, field.TypeString, value)
	}
	if oiuo.mutation.OrderLabIssueStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderLabIssueStatus, field.TypeString)
	}
	if value, ok := oiuo.mutation.OrderProcessingTime(); ok {
		_spec.SetField(orderinfo.FieldOrderProcessingTime, field.TypeTime, value)
	}
	if oiuo.mutation.OrderProcessingTimeCleared() {
		_spec.ClearField(orderinfo.FieldOrderProcessingTime, field.TypeTime)
	}
	if value, ok := oiuo.mutation.OrderMinorStatus(); ok {
		_spec.SetField(orderinfo.FieldOrderMinorStatus, field.TypeString, value)
	}
	if oiuo.mutation.OrderMinorStatusCleared() {
		_spec.ClearField(orderinfo.FieldOrderMinorStatus, field.TypeString)
	}
	if value, ok := oiuo.mutation.PatientFirstName(); ok {
		_spec.SetField(orderinfo.FieldPatientFirstName, field.TypeString, value)
	}
	if oiuo.mutation.PatientFirstNameCleared() {
		_spec.ClearField(orderinfo.FieldPatientFirstName, field.TypeString)
	}
	if value, ok := oiuo.mutation.PatientLastName(); ok {
		_spec.SetField(orderinfo.FieldPatientLastName, field.TypeString, value)
	}
	if oiuo.mutation.PatientLastNameCleared() {
		_spec.ClearField(orderinfo.FieldPatientLastName, field.TypeString)
	}
	if value, ok := oiuo.mutation.OrderSource(); ok {
		_spec.SetField(orderinfo.FieldOrderSource, field.TypeString, value)
	}
	if oiuo.mutation.OrderSourceCleared() {
		_spec.ClearField(orderinfo.FieldOrderSource, field.TypeString)
	}
	if value, ok := oiuo.mutation.OrderChargeMethod(); ok {
		_spec.SetField(orderinfo.FieldOrderChargeMethod, field.TypeString, value)
	}
	if oiuo.mutation.OrderChargeMethodCleared() {
		_spec.ClearField(orderinfo.FieldOrderChargeMethod, field.TypeString)
	}
	if value, ok := oiuo.mutation.OrderPlacingType(); ok {
		_spec.SetField(orderinfo.FieldOrderPlacingType, field.TypeString, value)
	}
	if oiuo.mutation.OrderPlacingTypeCleared() {
		_spec.ClearField(orderinfo.FieldOrderPlacingType, field.TypeString)
	}
	if value, ok := oiuo.mutation.BillingOrderID(); ok {
		_spec.SetField(orderinfo.FieldBillingOrderID, field.TypeString, value)
	}
	if oiuo.mutation.BillingOrderIDCleared() {
		_spec.ClearField(orderinfo.FieldBillingOrderID, field.TypeString)
	}
	if oiuo.mutation.TestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orderinfo.TestsTable,
			Columns: orderinfo.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.RemovedTestsIDs(); len(nodes) > 0 && !oiuo.mutation.TestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orderinfo.TestsTable,
			Columns: orderinfo.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.TestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orderinfo.TestsTable,
			Columns: orderinfo.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.OrderFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orderinfo.OrderFlagsTable,
			Columns: orderinfo.OrderFlagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderflag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.RemovedOrderFlagsIDs(); len(nodes) > 0 && !oiuo.mutation.OrderFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orderinfo.OrderFlagsTable,
			Columns: orderinfo.OrderFlagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderflag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.OrderFlagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orderinfo.OrderFlagsTable,
			Columns: orderinfo.OrderFlagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderflag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.SampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   orderinfo.SampleTable,
			Columns: []string{orderinfo.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   orderinfo.SampleTable,
			Columns: []string{orderinfo.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.ContactTable,
			Columns: []string{orderinfo.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.ContactTable,
			Columns: []string{orderinfo.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.AddressTable,
			Columns: []string{orderinfo.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.AddressTable,
			Columns: []string{orderinfo.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.ClinicTable,
			Columns: []string{orderinfo.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.ClinicTable,
			Columns: []string{orderinfo.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clinic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.CustomerInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.CustomerInfoTable,
			Columns: []string{orderinfo.CustomerInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.CustomerInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.CustomerInfoTable,
			Columns: []string{orderinfo.CustomerInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderInfo{config: oiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oiuo.mutation.done = true
	return _node, nil
}
