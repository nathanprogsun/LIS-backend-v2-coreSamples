// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"coresamples/ent/internaluser"
	"coresamples/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InternalUserDelete is the builder for deleting a InternalUser entity.
type InternalUserDelete struct {
	config
	hooks    []Hook
	mutation *InternalUserMutation
}

// Where appends a list predicates to the InternalUserDelete builder.
func (iud *InternalUserDelete) Where(ps ...predicate.InternalUser) *InternalUserDelete {
	iud.mutation.Where(ps...)
	return iud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (iud *InternalUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, iud.sqlExec, iud.mutation, iud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (iud *InternalUserDelete) ExecX(ctx context.Context) int {
	n, err := iud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (iud *InternalUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(internaluser.Table, sqlgraph.NewFieldSpec(internaluser.FieldID, field.TypeInt))
	if ps := iud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, iud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	iud.mutation.done = true
	return affected, err
}

// InternalUserDeleteOne is the builder for deleting a single InternalUser entity.
type InternalUserDeleteOne struct {
	iud *InternalUserDelete
}

// Where appends a list predicates to the InternalUserDelete builder.
func (iudo *InternalUserDeleteOne) Where(ps ...predicate.InternalUser) *InternalUserDeleteOne {
	iudo.iud.mutation.Where(ps...)
	return iudo
}

// Exec executes the deletion query.
func (iudo *InternalUserDeleteOne) Exec(ctx context.Context) error {
	n, err := iudo.iud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{internaluser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (iudo *InternalUserDeleteOne) ExecX(ctx context.Context) {
	if err := iudo.Exec(ctx); err != nil {
		panic(err)
	}
}
